{"version":3,"sources":["app/schemas/i18n_schema.coffee"],"names":[],"mappings":";AACA;;AAAA,IAAI,QAAQ,WAAR;;AAEJ,yBAAyB,CAAC,CAAC,8BAAF;;AAEzB,gBAAgB;EACd,OAAO,gBADO;EAEd,aAAa,mBAFC;EAGd,MAAM,QAHQ;EAId,YAAY;IACV,MAAM;MACJ,OAAO,MADH;MAEJ,aAAa,iEAFT;MAGJ,MAAM,QAHF;MAIJ,WAAW,GAJP;KADI;IAOV,MAAM;MAAC,QAAQ,oBAAT;KAPI;GAJE;EAad,aAAa;IACX,MAAM;MACJ,OAAO,MADH;MAEJ,aAAa,iCAFT;MAGJ,MAAM,QAHF;MAIJ,mBAAmB;QACjB,wBAAwB;UACtB,sBAAsB,KADA;UAEtB,YAAY;YAIZ,YAAY;cAAC,QAAQ,cAAT;aAJA;WAFU;UAStB,WAAS;YACP,OAAO,cADA;YAEP,aAAa,qBAFN;WATa;SADP;OAJf;KADK;GAbC","file":"public/javascripts/app/schemas/i18n_schema.js","sourcesContent":["#this file will hold the experimental JSON schema for i18n\r\nc = require './schemas'\r\n\r\nlanguageCodeArrayRegex = c.generateLanguageCodeArrayRegex()\r\n\r\nExampleSchema = {\r\n  title: 'Example Schema',\r\n  description: 'An example schema',\r\n  type: 'object',\r\n  properties: {\r\n    text: {\r\n      title: 'Text',\r\n      description: 'A short message to display in the dialogue area. Markdown okay.',\r\n      type: 'string',\r\n      maxLength: 400\r\n    },\r\n    i18n: {'$ref': '#/definitions/i18n'}\r\n  },\r\n  definitions: {\r\n    i18n: {\r\n      title: 'i18n',\r\n      description: 'The internationalization object',\r\n      type: 'object',\r\n      patternProperties: {\r\n        languageCodeArrayRegex: {\r\n          additionalProperties: false,\r\n          properties: {\r\n          #put the translatable properties here\r\n          #if it is possible to not include i18n with a reference\r\n          # to #/properties, you could just do\r\n          properties: {'$ref': '#/properties'}\r\n           # text: {'$ref': '#/properties/text'}\r\n          }\r\n          default: {\r\n            title: 'LanguageCode',\r\n            description: 'LanguageDescription'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n#define a i18n object type for each schema, then have the i18n have it's oneOf check against\r\n#translatable schemas of that object\r\n"]}