{"version":3,"sources":["app/views/courses/CourseDetailsView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/courses/CourseDetailsView.js","sourcesContent":["Course = require 'models/Course'\r\nCourses = require 'collections/Courses'\r\nLevelSessions = require 'collections/LevelSessions'\r\nCourseInstance = require 'models/CourseInstance'\r\nCourseInstances = require 'collections/CourseInstances'\r\nClassroom = require 'models/Classroom'\r\nClassrooms = require 'collections/Classrooms'\r\nLevels = require 'collections/Levels'\r\nRootView = require 'views/core/RootView'\r\ntemplate = require 'templates/courses/course-details'\r\nUser = require 'models/User'\r\nstorage = require 'core/storage'\r\n\r\nmodule.exports = class CourseDetailsView extends RootView\r\n  id: 'course-details-view'\r\n  template: template\r\n  memberSort: 'nameAsc'\r\n\r\n  events:\r\n    'click .btn-play-level': 'onClickPlayLevel'\r\n    'click .btn-select-instance': 'onClickSelectInstance'\r\n    'submit #school-form': 'onSubmitSchoolForm'\r\n\r\n  constructor: (options, @courseID, @courseInstanceID) ->\r\n    super options\r\n    @courses = new Courses()\r\n    @course = new Course()\r\n    @levelSessions = new LevelSessions()\r\n    @courseInstance = new CourseInstance({_id: @courseInstanceID})\r\n    @owner = new User()\r\n    @classroom = new Classroom()\r\n    @levels = new Levels()\r\n    @courseInstances = new CourseInstances()\r\n\r\n    @supermodel.trackRequest(@courses.fetch().then(=>\r\n      @course = @courses.get(@courseID)\r\n    ))\r\n    sessionsLoaded = @supermodel.trackRequest(@levelSessions.fetchForCourseInstance(@courseInstanceID, {cache: false}))\r\n\r\n    @supermodel.trackRequest(@courseInstance.fetch().then(=>\r\n      return if @destroyed\r\n      @owner = new User({_id: @courseInstance.get('ownerID')})\r\n      @supermodel.trackRequest(@owner.fetch())\r\n\r\n      classroomID = @courseInstance.get('classroomID')\r\n      @classroom = new Classroom({ _id: classroomID })\r\n      @supermodel.trackRequest(@classroom.fetch())\r\n\r\n      levelsLoaded = @supermodel.trackRequest(@levels.fetchForClassroomAndCourse(classroomID, @courseID, {\r\n        data: { project: 'concepts,practice,primerLanguage,type,slug,name,original,description,shareable,i18n' }\r\n      }))\r\n\r\n      @supermodel.trackRequest($.when(levelsLoaded, sessionsLoaded).then(=>\r\n        @buildSessionStats()\r\n        return if @destroyed\r\n        if @memberStats[me.id]?.totalLevelsCompleted >= @levels.size() - 1  # Don't need to complete arena\r\n          # need to figure out the next course instance\r\n          @courseComplete = true\r\n          @courseInstances.comparator = 'courseID'\r\n          # TODO: make this logic use locked course content to figure out the next course, then fetch the\r\n          # course instance for that\r\n          @supermodel.trackRequest(@courseInstances.fetchForClassroom(classroomID).then(=>\r\n            @nextCourseInstance = _.find @courseInstances.models, (ci) => ci.get('courseID') > @courseID\r\n            if @nextCourseInstance\r\n              nextCourseID = @nextCourseInstance.get('courseID')\r\n              @nextCourse = @courses.get(nextCourseID)\r\n        ))\r\n        @promptForSchool = @courseComplete and not me.isAnonymous() and not me.get('schoolName') and not storage.load('no-school')\r\n      ))\r\n    ))\r\n\r\n  initialize: (options) ->\r\n    window.tracker?.trackEvent 'Students Class Course Loaded', category: 'Students', ['Mixpanel']\r\n    super(options)\r\n\r\n  buildSessionStats: ->\r\n    return if @destroyed\r\n\r\n    @levelConceptMap = {}\r\n    for level in @levels.models\r\n      @levelConceptMap[level.get('original')] ?= {}\r\n      for concept in level.get('concepts') or []\r\n        @levelConceptMap[level.get('original')][concept] = true\r\n      if level.isType('course-ladder')\r\n        @arenaLevel = level\r\n\r\n    # console.log 'onLevelSessionsSync'\r\n    @memberStats = {}\r\n    @userConceptStateMap = {}\r\n    @userLevelStateMap = {}\r\n    for levelSession in @levelSessions.models\r\n      continue if levelSession.skipMe   # Don't track second arena session as another completed level\r\n      userID = levelSession.get('creator')\r\n      levelID = levelSession.get('level').original\r\n      state = if levelSession.get('state')?.complete then 'complete' else 'started'\r\n      playtime = parseInt(levelSession.get('playtime') ? 0, 10)\r\n      do (userID, levelID) =>\r\n        secondSessionForLevel = _.find(@levelSessions.models, ((otherSession) ->\r\n          otherSession.get('creator') is userID and otherSession.get('level').original is levelID and otherSession.id isnt levelSession.id\r\n        ))\r\n        if secondSessionForLevel\r\n          state = 'complete' if secondSessionForLevel.get('state')?.complete\r\n          playtime = playtime + parseInt(secondSessionForLevel.get('playtime') ? 0, 10)\r\n          secondSessionForLevel.skipMe = true\r\n\r\n      @memberStats[userID] ?= totalLevelsCompleted: 0, totalPlayTime: 0\r\n      @memberStats[userID].totalLevelsCompleted++ if state is 'complete'\r\n      @memberStats[userID].totalPlayTime += playtime\r\n\r\n      @userConceptStateMap[userID] ?= {}\r\n      for concept of @levelConceptMap[levelID]\r\n        @userConceptStateMap[userID][concept] = state\r\n\r\n      @userLevelStateMap[userID] ?= {}\r\n      @userLevelStateMap[userID][levelID] = state\r\n\r\n    @conceptsCompleted = {}\r\n    for userID, conceptStateMap of @userConceptStateMap\r\n      for concept, state of conceptStateMap\r\n        @conceptsCompleted[concept] ?= 0\r\n        @conceptsCompleted[concept]++\r\n\r\n  onClickPlayLevel: (e) ->\r\n    levelSlug = $(e.target).closest('.btn-play-level').data('level-slug')\r\n    levelID = $(e.target).closest('.btn-play-level').data('level-id')\r\n    level = @levels.findWhere({original: levelID})\r\n    window.tracker?.trackEvent 'Students Class Course Play Level', category: 'Students', courseID: @courseID, courseInstanceID: @courseInstanceID, levelSlug: levelSlug, ['Mixpanel']\r\n    if level.isType('course-ladder')\r\n      viewClass = 'views/ladder/LadderView'\r\n      viewArgs = [{supermodel: @supermodel}, levelSlug]\r\n      route = '/play/ladder/' + levelSlug\r\n      route += '/course/' + @courseInstance.id\r\n      viewArgs = viewArgs.concat ['course', @courseInstance.id]\r\n    else\r\n      route = @getLevelURL levelSlug\r\n      route += \"&codeLanguage=\" + level.get('primerLanguage') if level.get('primerLanguage')\r\n      viewClass = 'views/play/level/PlayLevelView'\r\n      viewArgs = [{courseID: @courseID, courseInstanceID: @courseInstanceID, supermodel: @supermodel}, levelSlug]\r\n    Backbone.Mediator.publish 'router:navigate', route: route, viewClass: viewClass, viewArgs: viewArgs\r\n\r\n  getLevelURL: (levelSlug) ->\r\n    \"/play/level/#{levelSlug}?course=#{@courseID}&course-instance=#{@courseInstanceID}\"\r\n\r\n  getOwnerName: ->\r\n    return if @owner.isNew()\r\n    if @owner.get('firstName') and @owner.get('lastName')\r\n      return \"#{@owner.get('firstName')} #{@owner.get('lastName')}\"\r\n    @owner.get('name') or @owner.get('email')\r\n\r\n  getLastLevelCompleted: ->\r\n    lastLevelCompleted = null\r\n    for levelID in @levels.pluck('original')\r\n      if @userLevelStateMap?[me.id]?[levelID] is 'complete'\r\n        lastLevelCompleted = levelID\r\n    return lastLevelCompleted\r\n"]}