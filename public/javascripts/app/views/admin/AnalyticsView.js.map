{"version":3,"sources":["app/views/admin/AnalyticsView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/admin/AnalyticsView.js","sourcesContent":["CocoCollection = require 'collections/CocoCollection'\r\nCourse = require 'models/Course'\r\nCourseInstance = require 'models/CourseInstance'\r\nrequire 'vendor/d3'\r\nd3Utils = require 'core/d3_utils'\r\nPayment = require 'models/Payment'\r\nRootView = require 'views/core/RootView'\r\ntemplate = require 'templates/admin/analytics'\r\nutils = require 'core/utils'\r\n\r\n# TODO: terminal subscription purchases entered as DRR monthly subs, but should be spread across their timeframe\r\n\r\nmodule.exports = class AnalyticsView extends RootView\r\n  id: 'admin-analytics-view'\r\n  template: template\r\n  furthestCourseDayRangeRecent: 60\r\n  furthestCourseDayRange: 365\r\n  lineColors: ['red', 'blue', 'green', 'purple', 'goldenrod', 'brown', 'darkcyan']\r\n  minSchoolCount: 20\r\n\r\n  initialize: ->\r\n    @activeClasses = []\r\n    @activeClassGroups = {}\r\n    @activeUsers = []\r\n    @yearMonthMrrMap = {}\r\n    @monthMrrMap = {}\r\n    @revenue = []\r\n    @revenueGroups = {}\r\n    @dayEnrollmentsMap = {}\r\n    @enrollmentDays = []\r\n    @loadData()\r\n\r\n  afterRender: ->\r\n    super()\r\n    @createLineCharts()\r\n\r\n  loadData: ->\r\n    @supermodel.addRequestResource({\r\n      url: '/db/analytics_perday/-/active_classes'\r\n      method: 'POST'\r\n      success: (data) =>\r\n        # Organize data by day, then group\r\n        groupMap = {}\r\n        dayGroupMap = {}\r\n        for activeClass in data\r\n          dayGroupMap[activeClass.day] ?= {}\r\n          dayGroupMap[activeClass.day]['Total'] = 0\r\n          for group, val of activeClass.classes\r\n            groupMap[group] = true\r\n            dayGroupMap[activeClass.day][group] = val\r\n            dayGroupMap[activeClass.day]['Total'] += val\r\n        @activeClassGroups = Object.keys(groupMap)\r\n        @activeClassGroups.push 'Total'\r\n        # Build list of active classes, where each entry is a day of individual group values\r\n        @activeClasses = []\r\n        for day of dayGroupMap\r\n          dashedDay = \"#{day.substring(0, 4)}-#{day.substring(4, 6)}-#{day.substring(6, 8)}\"\r\n          data = day: dashedDay, groups: []\r\n          for group in @activeClassGroups\r\n            data.groups.push(dayGroupMap[day][group] ? 0)\r\n          @activeClasses.push data\r\n        @activeClasses.sort (a, b) -> b.day.localeCompare(a.day)\r\n\r\n        @updateAllKPIChartData()\r\n        @updateActiveClassesChartData()\r\n        @render?()\r\n    }, 0).load()\r\n\r\n    @supermodel.addRequestResource({\r\n      url: '/db/analytics_perday/-/active_users'\r\n      method: 'POST'\r\n      success: (data) =>\r\n        @activeUsers = data.map (a) ->\r\n          a.day = \"#{a.day.substring(0, 4)}-#{a.day.substring(4, 6)}-#{a.day.substring(6, 8)}\"\r\n          a\r\n\r\n        # Add campaign/classroom DAU 30-day averages and daily totals\r\n        campaignDauTotals = []\r\n        classroomDauTotals = []\r\n        eventMap = {}\r\n        for entry in @activeUsers\r\n          day = entry.day\r\n          campaignDauTotal = 0\r\n          classroomDauTotal = 0\r\n          for event, count of entry.events\r\n            if event.indexOf('DAU campaign') >= 0\r\n              campaignDauTotal += count\r\n            else if event.indexOf('DAU classroom') >= 0\r\n              classroomDauTotal += count\r\n            eventMap[event] = true\r\n          entry.events['DAU campaign total'] = campaignDauTotal\r\n          eventMap['DAU campaign total'] = true\r\n          campaignDauTotals.unshift(campaignDauTotal)\r\n          campaignDauTotals.pop() while campaignDauTotals.length > 30\r\n          if campaignDauTotals.length is 30\r\n            entry.events['DAU campaign 30-day average'] = Math.round(_.reduce(campaignDauTotals, (a, b) -> a + b) / 30)\r\n            eventMap['DAU campaign 30-day average'] = true\r\n          entry.events['DAU classroom total'] = classroomDauTotal\r\n          eventMap['DAU classroom total'] = true\r\n          classroomDauTotals.unshift(classroomDauTotal)\r\n          classroomDauTotals.pop() while classroomDauTotals.length > 30\r\n          if classroomDauTotals.length is 30\r\n            entry.events['DAU classroom 30-day average'] = Math.round(_.reduce(classroomDauTotals, (a, b) -> a + b) / 30)\r\n            eventMap['DAU classroom 30-day average'] = true\r\n\r\n        @activeUsers.sort (a, b) -> b.day.localeCompare(a.day)\r\n        @activeUserEventNames = Object.keys(eventMap)\r\n        @activeUserEventNames.sort (a, b) ->\r\n          if a.indexOf('campaign') is b.indexOf('campaign') or a.indexOf('classroom') is b.indexOf('classroom')\r\n            a.localeCompare(b)\r\n          else if a.indexOf('campaign') > b.indexOf('campaign')\r\n            1\r\n          else\r\n            -1\r\n\r\n        @updateAllKPIChartData()\r\n        @updateActiveUsersChartData()\r\n        @updateCampaignVsClassroomActiveUsersChartData()\r\n        @render?()\r\n    }, 0).load()\r\n\r\n    @supermodel.addRequestResource({\r\n      url: '/db/analytics_perday/-/recurring_revenue'\r\n      method: 'POST'\r\n      success: (data) =>\r\n        # Amounts in cents, 'DRR yearly subs', 'DRR monthly subs'\r\n\r\n        # Organize data by day, then group\r\n        groupMap = {}\r\n        dayGroupCountMap = {}\r\n        for dailyRevenue in data\r\n          dayGroupCountMap[dailyRevenue.day] ?= {}\r\n          dayGroupCountMap[dailyRevenue.day]['DRR Total'] = 0\r\n          for group, val of dailyRevenue.groups\r\n            groupMap[group] = true\r\n            dayGroupCountMap[dailyRevenue.day][group] = val\r\n            dayGroupCountMap[dailyRevenue.day]['DRR Total'] += val\r\n        @revenueGroups = Object.keys(groupMap)\r\n        @revenueGroups.push 'DRR Total'\r\n\r\n        # Build list of recurring revenue entries, where each entry is a day of individual group values\r\n        @revenue = []\r\n        for day of dayGroupCountMap\r\n          dashedDay = \"#{day.substring(0, 4)}-#{day.substring(4, 6)}-#{day.substring(6, 8)}\"\r\n          data = day: dashedDay, groups: []\r\n          for group in @revenueGroups\r\n            data.groups.push(dayGroupCountMap[day][group] ? 0)\r\n          @revenue.push data\r\n\r\n        # Order present to past\r\n        @revenue.sort (a, b) -> b.day.localeCompare(a.day)\r\n\r\n        return unless @revenue.length > 0\r\n\r\n        # Add monthly recurring revenue values\r\n\r\n        # For each daily group, add up monthly values walking forward through time, and add to revenue groups\r\n        monthlyDailyGroupMap = {}\r\n        dailyGroupIndexMap = {}\r\n        for group, i in @revenueGroups\r\n          monthlyDailyGroupMap[group.replace('DRR', 'MRR')] = group\r\n          dailyGroupIndexMap[group] = i\r\n        for monthlyGroup, dailyGroup of monthlyDailyGroupMap\r\n          monthlyValues = []\r\n          for i in [@revenue.length-1..0]\r\n            dailyTotal = @revenue[i].groups[dailyGroupIndexMap[dailyGroup]]\r\n            monthlyValues.push(dailyTotal)\r\n            monthlyValues.shift() while monthlyValues.length > 30\r\n            if monthlyValues.length is 30\r\n              @revenue[i].groups.push(_.reduce(monthlyValues, (s, num) -> s + num))\r\n        for monthlyGroup, dailyGroup of monthlyDailyGroupMap\r\n          @revenueGroups.push monthlyGroup\r\n\r\n        # Calculate real monthly revenue instead of 30 days estimation\r\n        @monthMrrMap = {}\r\n        for revenue in @revenue\r\n          month = revenue.day.substring(0, 7)\r\n          @monthMrrMap[month] ?= {gems: 0, yearly: 0, monthly: 0, total: 0}\r\n          for group, i in @revenueGroups\r\n            if group is 'DRR gems'\r\n              @monthMrrMap[month].gems += revenue.groups[i]\r\n            else if group is 'DRR monthly subs'\r\n              @monthMrrMap[month].monthly += revenue.groups[i]\r\n            else if group is 'DRR yearly subs'\r\n              @monthMrrMap[month].yearly += revenue.groups[i]\r\n            if group in ['DRR gems', 'DRR monthly subs', 'DRR yearly subs']\r\n              @monthMrrMap[month].total += revenue.groups[i]\r\n\r\n        @updateAllKPIChartData()\r\n        @updateRevenueChartData()\r\n        @render?()\r\n\r\n    }, 0).load()\r\n\r\n    @supermodel.addRequestResource({\r\n      url: '/db/user/-/school_counts'\r\n      method: 'POST'\r\n      data: {minCount: @minSchoolCount}\r\n      success: (@schoolCounts) =>\r\n        @schoolCounts?.sort (a, b) ->\r\n          return -1 if a.count > b.count\r\n          return 0 if a.count is b.count\r\n          1\r\n        @renderSelectors?('#school-counts')\r\n    }, 0).load()\r\n\r\n    @supermodel.addRequestResource({\r\n      url: '/db/payment/-/school_sales'\r\n      success: (@schoolSales) =>\r\n        @schoolSales?.sort (a, b) ->\r\n          return -1 if a.created > b.created\r\n          return 0 if a.created is b.created\r\n          1\r\n        @renderSelectors?('.school-sales')\r\n    }, 0).load()\r\n\r\n    @supermodel.addRequestResource({\r\n      url: '/db/prepaid/-/courses'\r\n      method: 'POST'\r\n      data: {project: {endDate: 1, maxRedeemers: 1, properties: 1, redeemers: 1}}\r\n      success: (prepaids) =>\r\n        paidDayMaxMap = {}\r\n        paidDayRedeemedMap = {}\r\n        trialDayMaxMap = {}\r\n        trialDayRedeemedMap = {}\r\n        for prepaid in prepaids\r\n          day = utils.objectIdToDate(prepaid._id).toISOString().substring(0, 10)\r\n          if prepaid.properties?.trialRequestID? or prepaid.properties?.endDate?\r\n            trialDayMaxMap[day] ?= 0\r\n            if prepaid.properties?.endDate?\r\n              trialDayMaxMap[day] += prepaid.redeemers?.length ? 0\r\n            else\r\n              trialDayMaxMap[day] += prepaid.maxRedeemers\r\n            for redeemer in (prepaid.redeemers ? [])\r\n              redeemDay = redeemer.date.substring(0, 10)\r\n              trialDayRedeemedMap[redeemDay] ?= 0\r\n              trialDayRedeemedMap[redeemDay]++\r\n          else if not prepaid.endDate? or new Date(prepaid.endDate) > new Date()\r\n            paidDayMaxMap[day] ?= 0\r\n            paidDayMaxMap[day] += prepaid.maxRedeemers\r\n            for redeemer in prepaid.redeemers\r\n              redeemDay = redeemer.date.substring(0, 10)\r\n              paidDayRedeemedMap[redeemDay] ?= 0\r\n              paidDayRedeemedMap[redeemDay]++\r\n        @dayEnrollmentsMap = {}\r\n        @paidCourseTotalEnrollments = []\r\n        for day, count of paidDayMaxMap\r\n          @paidCourseTotalEnrollments.push({day: day, count: count})\r\n          @dayEnrollmentsMap[day] ?= {paidIssued: 0, paidRedeemed: 0, trialIssued: 0, trialRedeemed: 0}\r\n          @dayEnrollmentsMap[day].paidIssued += count\r\n        @paidCourseTotalEnrollments.sort (a, b) -> a.day.localeCompare(b.day)\r\n        @paidCourseRedeemedEnrollments = []\r\n        for day, count of paidDayRedeemedMap\r\n          @paidCourseRedeemedEnrollments.push({day: day, count: count})\r\n          @dayEnrollmentsMap[day] ?= {paidIssued: 0, paidRedeemed: 0, trialIssued: 0, trialRedeemed: 0}\r\n          @dayEnrollmentsMap[day].paidRedeemed += count\r\n        @paidCourseRedeemedEnrollments.sort (a, b) -> a.day.localeCompare(b.day)\r\n        @trialCourseTotalEnrollments = []\r\n        for day, count of trialDayMaxMap\r\n          @trialCourseTotalEnrollments.push({day: day, count: count})\r\n          @dayEnrollmentsMap[day] ?= {paidIssued: 0, paidRedeemed: 0, trialIssued: 0, trialRedeemed: 0}\r\n          @dayEnrollmentsMap[day].trialIssued += count\r\n        @trialCourseTotalEnrollments.sort (a, b) -> a.day.localeCompare(b.day)\r\n        @trialCourseRedeemedEnrollments = []\r\n        for day, count of trialDayRedeemedMap\r\n          @trialCourseRedeemedEnrollments.push({day: day, count: count})\r\n          @dayEnrollmentsMap[day] ?= {paidIssued: 0, paidRedeemed: 0, trialIssued: 0, trialRedeemed: 0}\r\n          @dayEnrollmentsMap[day].trialRedeemed += count\r\n        @trialCourseRedeemedEnrollments.sort (a, b) -> a.day.localeCompare(b.day)\r\n        @updateEnrollmentsChartData()\r\n        @render?()\r\n    }, 0).load()\r\n\r\n    @courses = new CocoCollection([], { url: \"/db/course\", model: Course})\r\n    @listenToOnce @courses, 'sync', @onCoursesSync\r\n    @supermodel.loadCollection(@courses)\r\n\r\n  onCoursesSync: ->\r\n    @courses.remove(@courses.findWhere({releasePhase: 'beta'}))\r\n    sortedCourses = utils.sortCourses(@courses.models ? [])\r\n    @courseOrderMap = {}\r\n    @courseOrderMap[sortedCourses[i].get('_id')] = i for i in [0...sortedCourses.length]\r\n\r\n    startDay = new Date()\r\n    startDay.setUTCDate(startDay.getUTCDate() - @furthestCourseDayRange)\r\n    startDay = startDay.toISOString().substring(0, 10)\r\n    options =\r\n      url: '/db/course_instance/-/recent'\r\n      method: 'POST'\r\n      data: {startDay: startDay}\r\n    options.error = (models, response, options) =>\r\n      return if @destroyed\r\n      console.error 'Failed to get recent course instances', response\r\n    options.success = (data) =>\r\n      @onCourseInstancesSync(data)\r\n      @renderSelectors?('#furthest-course')\r\n    @supermodel.addRequestResource(options, 0).load()\r\n\r\n  onCourseInstancesSync: (data) ->\r\n    @courseDistributionsRecent = []\r\n    @courseDistributions = []\r\n    return unless data.courseInstances and data.students and data.prepaids\r\n\r\n    createCourseDistributions = (numDays) =>\r\n      # Find student furthest course\r\n      startDate = new Date()\r\n      startDate.setUTCDate(startDate.getUTCDate() - numDays)\r\n      teacherStudentsMap = {}\r\n      studentFurthestCourseMap = {}\r\n      studentPaidStatusMap = {}\r\n      for courseInstance in data.courseInstances\r\n        continue if utils.objectIdToDate(courseInstance._id) < startDate\r\n        courseID = courseInstance.courseID\r\n        unless @courseOrderMap[courseID]?\r\n          console.error \"ERROR: no course order for courseID=#{courseID}\"\r\n          continue\r\n        teacherID = courseInstance.ownerID\r\n        for studentID in courseInstance.members\r\n          studentPaidStatusMap[studentID] = 'free'\r\n          if not studentFurthestCourseMap[studentID] or studentFurthestCourseMap[studentID] < @courseOrderMap[courseID]\r\n            studentFurthestCourseMap[studentID] = @courseOrderMap[courseID]\r\n          teacherStudentsMap[teacherID] ?= []\r\n          teacherStudentsMap[teacherID].push(studentID)\r\n\r\n      # Find paid students\r\n      prepaidUserMap = {}\r\n      for user in data.students\r\n        continue unless studentPaidStatusMap[user._id]\r\n        if prepaidID = user.coursePrepaid?._id\r\n          studentPaidStatusMap[user._id] = 'paid'\r\n          prepaidUserMap[prepaidID] ?= []\r\n          prepaidUserMap[prepaidID].push(user._id)\r\n\r\n      # Find trial students\r\n      for prepaid in data.prepaids\r\n        continue unless prepaidUserMap[prepaid._id]\r\n        if prepaid.properties?.trialRequestID\r\n          for userID in prepaidUserMap[prepaid._id]\r\n            studentPaidStatusMap[userID] = 'trial'\r\n\r\n      # Find teacher furthest course and paid status based on their students\r\n      # Paid teacher: at least one paid student\r\n      # Trial teacher: at least one trial student in course instance, and no paid students\r\n      # Free teacher: no paid students, no trial students\r\n      # Teacher furthest course is furthest course of highest paid status student\r\n      teacherFurthestCourseMap = {}\r\n      teacherPaidStatusMap = {}\r\n      for teacher, students of teacherStudentsMap\r\n        for student in students\r\n          unless studentFurthestCourseMap[student]?\r\n            console.error \"ERROR: no student furthest map for teacher=#{teacher} student=#{student}\"\r\n            continue\r\n          if not teacherPaidStatusMap[teacher]\r\n            teacherPaidStatusMap[teacher] = studentPaidStatusMap[student]\r\n            teacherFurthestCourseMap[teacher] = studentFurthestCourseMap[student]\r\n          else if teacherPaidStatusMap[teacher] is 'paid'\r\n            if studentPaidStatusMap[student] is 'paid' and teacherFurthestCourseMap[teacher] < studentFurthestCourseMap[student]\r\n              teacherFurthestCourseMap[teacher] = studentFurthestCourseMap[student]\r\n          else if teacherPaidStatusMap[teacher] is 'trial'\r\n            if studentPaidStatusMap[student] is 'paid'\r\n              teacherPaidStatusMap[teacher] = studentPaidStatusMap[student]\r\n              teacherFurthestCourseMap[teacher] = studentFurthestCourseMap[student]\r\n            else if studentPaidStatusMap[student] is 'trial' and teacherFurthestCourseMap[teacher] < studentFurthestCourseMap[student]\r\n              teacherFurthestCourseMap[teacher] = studentFurthestCourseMap[student]\r\n          else # free teacher\r\n            if studentPaidStatusMap[student] in ['paid', 'trial']\r\n              teacherPaidStatusMap[teacher] = studentPaidStatusMap[student]\r\n              teacherFurthestCourseMap[teacher] = studentFurthestCourseMap[student]\r\n            else if studentPaidStatusMap[student] is 'free' and teacherFurthestCourseMap[teacher] < studentFurthestCourseMap[student]\r\n              teacherFurthestCourseMap[teacher] = studentFurthestCourseMap[student]\r\n\r\n      # Build table of student/teacher paid/trial/free totals\r\n      updateCourseTotalsMap = (courseTotalsMap, furthestCourseMap, paidStatusMap, columnSuffix) =>\r\n        for user, courseIndex of furthestCourseMap\r\n          courseName = @courses.models[courseIndex].get('name')\r\n          courseTotalsMap[courseName] ?= {}\r\n          columnName = switch paidStatusMap[user]\r\n            when 'paid' then 'Paid ' + columnSuffix\r\n            when 'trial' then 'Trial ' + columnSuffix\r\n            when 'free' then 'Free ' + columnSuffix\r\n          courseTotalsMap[courseName][columnName] ?= 0\r\n          courseTotalsMap[courseName][columnName]++\r\n          courseTotalsMap[courseName]['Total ' + columnSuffix] ?= 0\r\n          courseTotalsMap[courseName]['Total ' + columnSuffix]++\r\n          courseTotalsMap['All Courses']['Total ' + columnSuffix] ?= 0\r\n          courseTotalsMap['All Courses']['Total ' + columnSuffix]++\r\n          courseTotalsMap['All Courses'][columnName] ?= 0\r\n          courseTotalsMap['All Courses'][columnName]++\r\n      courseTotalsMap = {'All Courses': {}}\r\n      updateCourseTotalsMap(courseTotalsMap, teacherFurthestCourseMap, teacherPaidStatusMap, 'Teachers')\r\n      updateCourseTotalsMap(courseTotalsMap, studentFurthestCourseMap, studentPaidStatusMap, 'Students')\r\n\r\n      courseDistributions = []\r\n      for courseName, totals of courseTotalsMap\r\n        courseDistributions.push({courseName: courseName, totals: totals})\r\n      courseDistributions.sort (a, b) =>\r\n        if a.courseName.indexOf('All Courses') >= 0 and b.courseName.indexOf('All Courses') < 0 then return 1\r\n        else if b.courseName.indexOf('All Courses') >= 0 and a.courseName.indexOf('All Courses') < 0 then return -1\r\n        aID = @courses.findWhere({name: a.courseName}).id\r\n        bID = @courses.findWhere({name: b.courseName}).id\r\n        @courseOrderMap[aID] - @courseOrderMap[bID]\r\n\r\n      courseDistributions\r\n\r\n    @courseDistributionsRecent = createCourseDistributions(@furthestCourseDayRangeRecent)\r\n    @courseDistributions = createCourseDistributions(@furthestCourseDayRange)\r\n\r\n  createLineChartPoints: (days, data) ->\r\n    points = []\r\n    for entry, i in data\r\n      points.push\r\n        day: entry.day\r\n        y: entry.value\r\n\r\n    # Trim points preceding days\r\n    if points.length and days.length and points[0].day.localeCompare(days[0]) < 0\r\n      if points[points.length - 1].day.localeCompare(days[0]) < 0\r\n        points = []\r\n      else\r\n        for point, i in points\r\n          if point.day.localeCompare(days[0]) >= 0\r\n            points.splice(0, i)\r\n            break\r\n\r\n    # Ensure points for each day\r\n    for day, i in days\r\n      if points.length <= i or points[i]?.day isnt day\r\n        prevY = if i > 0 then points[i - 1].y else 0.0\r\n        points.splice i, 0,\r\n          day: day\r\n          y: prevY\r\n      points[i].x = i\r\n\r\n    points.splice(0, points.length - days.length) if points.length > days.length\r\n    points\r\n\r\n  createLineCharts: ->\r\n    visibleWidth = $('.kpi-recent-chart').width()\r\n    d3Utils.createLineChart('.kpi-recent-chart', @kpiRecentChartLines, visibleWidth)\r\n    d3Utils.createLineChart('.kpi-chart', @kpiChartLines, visibleWidth)\r\n    d3Utils.createLineChart('.active-classes-chart-90', @activeClassesChartLines90, visibleWidth)\r\n    d3Utils.createLineChart('.active-classes-chart-365', @activeClassesChartLines365, visibleWidth)\r\n    d3Utils.createLineChart('.classroom-daily-active-users-chart-90', @classroomDailyActiveUsersChartLines90, visibleWidth)\r\n    d3Utils.createLineChart('.classroom-monthly-active-users-chart-90', @classroomMonthlyActiveUsersChartLines90, visibleWidth)\r\n    d3Utils.createLineChart('.classroom-daily-active-users-chart-365', @classroomDailyActiveUsersChartLines365, visibleWidth)\r\n    d3Utils.createLineChart('.classroom-monthly-active-users-chart-365', @classroomMonthlyActiveUsersChartLines365, visibleWidth)\r\n    d3Utils.createLineChart('.campaign-daily-active-users-chart-90', @campaignDailyActiveUsersChartLines90, visibleWidth)\r\n    d3Utils.createLineChart('.campaign-monthly-active-users-chart-90', @campaignMonthlyActiveUsersChartLines90, visibleWidth)\r\n    d3Utils.createLineChart('.campaign-daily-active-users-chart-365', @campaignDailyActiveUsersChartLines365, visibleWidth)\r\n    d3Utils.createLineChart('.campaign-monthly-active-users-chart-365', @campaignMonthlyActiveUsersChartLines365, visibleWidth)\r\n    d3Utils.createLineChart('.campaign-vs-classroom-monthly-active-users-recent-chart.line-chart-container', @campaignVsClassroomMonthlyActiveUsersRecentChartLines, visibleWidth)\r\n    d3Utils.createLineChart('.campaign-vs-classroom-monthly-active-users-chart.line-chart-container', @campaignVsClassroomMonthlyActiveUsersChartLines, visibleWidth)\r\n    d3Utils.createLineChart('.paid-courses-chart', @enrollmentsChartLines, visibleWidth)\r\n    d3Utils.createLineChart('.recurring-daily-revenue-chart-90', @revenueDailyChartLines90Days, visibleWidth)\r\n    d3Utils.createLineChart('.recurring-monthly-revenue-chart-90', @revenueMonthlyChartLines90Days, visibleWidth)\r\n    d3Utils.createLineChart('.recurring-daily-revenue-chart-365', @revenueDailyChartLines365Days, visibleWidth)\r\n    d3Utils.createLineChart('.recurring-monthly-revenue-chart-365', @revenueMonthlyChartLines365Days, visibleWidth)\r\n\r\n  updateAllKPIChartData: ->\r\n    if @revenue?.length > 0\r\n      # For a given day, add monthly to current month, and yearly / 12 to this month and next 11 months\r\n      # Estimate current incomplete month by multiplying by total days / days so far\r\n      @yearMonthMrrMap = {}\r\n      thisMonth = new Date().toISOString().substring(0, 7)\r\n      currentMonthMultipler = 30 / new Date().getUTCDate()\r\n      for entry in @revenue\r\n        monthlySubAmount = entry.groups[@revenueGroups.indexOf('DRR monthly subs')] ? 0\r\n        currentYearMonth = entry.day.substring(0, 7)\r\n        @yearMonthMrrMap[currentYearMonth] ?= 0\r\n        if currentYearMonth is thisMonth\r\n          @yearMonthMrrMap[currentYearMonth] += monthlySubAmount * currentMonthMultipler\r\n        else\r\n          @yearMonthMrrMap[currentYearMonth] += monthlySubAmount\r\n\r\n        yearlySubAmount = (entry.groups[@revenueGroups.indexOf('DRR yearly subs')] ? 0) / 12\r\n        if yearlySubAmount > 0\r\n          currentYear = parseInt(entry.day.substring(0, 4))\r\n          currentMonth = parseInt(entry.day.substring(5, 7))\r\n          for i in [0...12]\r\n            if currentMonth > 9\r\n              currentYearMonth = \"#{currentYear}-#{currentMonth}\"\r\n            else\r\n              currentYearMonth = \"#{currentYear}-0#{currentMonth}\"\r\n            @yearMonthMrrMap[currentYearMonth] ?= 0\r\n            if currentYearMonth is thisMonth\r\n              @yearMonthMrrMap[currentYearMonth] += yearlySubAmount * currentMonthMultipler\r\n            else\r\n              @yearMonthMrrMap[currentYearMonth] += yearlySubAmount\r\n            currentMonth++\r\n            if currentMonth is 13\r\n              currentYear++\r\n              currentMonth = 1\r\n\r\n    @kpiRecentChartLines = []\r\n    @kpiChartLines = []\r\n    @updateKPIChartData(60, @kpiRecentChartLines)\r\n    @updateKPIChartData(365, @kpiChartLines)\r\n\r\n  updateKPIChartData: (timeframeDays, chartLines) ->\r\n    days = d3Utils.createContiguousDays(timeframeDays)\r\n\r\n    # Build active classes KPI line\r\n    if @activeClasses?.length > 0\r\n      data = []\r\n      for entry in @activeClasses\r\n        data.push\r\n          day: entry.day\r\n          value: entry.groups[entry.groups.length - 1]\r\n      data.reverse()\r\n      points = @createLineChartPoints(days, data)\r\n      chartLines.push\r\n        points: points\r\n        description: 'Monthly Active Classes'\r\n        lineColor: 'blue'\r\n        strokeWidth: 1\r\n        min: 0\r\n        max: _.max(points, 'y').y\r\n        showYScale: true\r\n\r\n    # Build recurring revenue KPI line\r\n    if @revenue?.length > 0\r\n      data = []\r\n      for entry in @revenue\r\n        currentMonth = entry.day.substring(0, 7)\r\n        value = @yearMonthMrrMap[currentMonth]\r\n        data.push\r\n          day: entry.day\r\n          value: value / 100 / 1000\r\n      data.reverse()\r\n      points = @createLineChartPoints(days, data)\r\n      chartLines.push\r\n        points: points\r\n        description: 'Monthly Recurring Revenue (in thousands)'\r\n        lineColor: 'green'\r\n        strokeWidth: 1\r\n        min: 0\r\n        max: _.max(points, 'y').y\r\n        showYScale: true\r\n\r\n    # Build campaign MAU KPI line\r\n    if @activeUsers?.length > 0\r\n      eventDayDataMap = {}\r\n      for entry in @activeUsers\r\n        day = entry.day\r\n        for event, count of entry.events\r\n          if event.indexOf('MAU campaign') >= 0\r\n            eventDayDataMap['MAU campaign'] ?= {}\r\n            eventDayDataMap['MAU campaign'][day] ?= 0\r\n            eventDayDataMap['MAU campaign'][day] += count\r\n\r\n      campaignData = []\r\n      for event, entry of eventDayDataMap\r\n        for day, count of entry\r\n          campaignData.push day: day, value: count / 1000\r\n      campaignData.reverse()\r\n\r\n      points = @createLineChartPoints(days, campaignData)\r\n      chartLines.push\r\n        points: points\r\n        description: 'Home Monthly Active Users (in thousands)'\r\n        lineColor: 'purple'\r\n        strokeWidth: 1\r\n        min: 0\r\n        max: _.max(points, 'y').y\r\n        showYScale: true\r\n\r\n  updateActiveClassesChartData: ->\r\n    @activeClassesChartLines90 = []\r\n    @activeClassesChartLines365 = []\r\n    return unless @activeClasses?.length\r\n\r\n    groupDayMap = {}\r\n    for entry in @activeClasses\r\n      for count, i in entry.groups\r\n        groupDayMap[@activeClassGroups[i]] ?= {}\r\n        groupDayMap[@activeClassGroups[i]][entry.day] ?= 0\r\n        groupDayMap[@activeClassGroups[i]][entry.day] += count\r\n\r\n    createActiveClassesChartLines = (lines, numDays) =>\r\n      days = d3Utils.createContiguousDays(numDays)\r\n      colorIndex = 0\r\n      totalMax = 0\r\n      for group, entries of groupDayMap\r\n        data = []\r\n        for day, count of entries\r\n          data.push\r\n            day: day\r\n            value: count\r\n        data.reverse()\r\n        points = @createLineChartPoints(days, data)\r\n        lines.push\r\n          points: points\r\n          description: group.replace('Active classes ', '')\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          showYScale: group is 'Total'\r\n        totalMax = _.max(points, 'y').y if group is 'Total'\r\n      line.max = totalMax for line in lines\r\n\r\n    createActiveClassesChartLines(@activeClassesChartLines90, 90)\r\n    createActiveClassesChartLines(@activeClassesChartLines365, 365)\r\n\r\n  updateActiveUsersChartData: ->\r\n    # Create chart lines for the active user events returned by active_users in analytics_perday_handler\r\n    @campaignDailyActiveUsersChartLines90 = []\r\n    @campaignMonthlyActiveUsersChartLines90 = []\r\n    @campaignDailyActiveUsersChartLines365 = []\r\n    @campaignMonthlyActiveUsersChartLines365 = []\r\n    @classroomDailyActiveUsersChartLines90 = []\r\n    @classroomMonthlyActiveUsersChartLines90 = []\r\n    @classroomDailyActiveUsersChartLines365 = []\r\n    @classroomMonthlyActiveUsersChartLines365 = []\r\n    return unless @activeUsers?.length\r\n\r\n    # Separate day/value arrays by event\r\n    eventDataMap = {}\r\n    for entry in @activeUsers\r\n      day = entry.day\r\n      for event, count of entry.events\r\n        eventDataMap[event] ?= []\r\n        eventDataMap[event].push\r\n          day: entry.day\r\n          value: count\r\n\r\n    createActiveUsersChartLines = (lines, numDays, eventPrefix) =>\r\n      days = d3Utils.createContiguousDays(numDays)\r\n      colorIndex = 0\r\n      lineMax = 0\r\n      showYScale = true\r\n      for event, data of eventDataMap\r\n        continue unless event.indexOf(eventPrefix) >= 0\r\n        points = @createLineChartPoints(days, _.cloneDeep(data).reverse())\r\n        lineMax = Math.max(_.max(points, 'y').y, lineMax)\r\n        lines.push\r\n          points: points\r\n          description: event\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          showYScale: showYScale\r\n        showYScale = false\r\n      for line in lines\r\n        line.description = line.description.replace 'campaign', 'home'\r\n        line.max = lineMax\r\n\r\n    createActiveUsersChartLines(@campaignDailyActiveUsersChartLines90, 90, 'DAU campaign')\r\n    createActiveUsersChartLines(@campaignMonthlyActiveUsersChartLines90, 90, 'MAU campaign')\r\n    createActiveUsersChartLines(@classroomDailyActiveUsersChartLines90, 90, 'DAU classroom')\r\n    createActiveUsersChartLines(@classroomMonthlyActiveUsersChartLines90, 90, 'MAU classroom')\r\n    createActiveUsersChartLines(@campaignDailyActiveUsersChartLines365, 365, 'DAU campaign')\r\n    createActiveUsersChartLines(@campaignMonthlyActiveUsersChartLines365, 365, 'MAU campaign')\r\n    createActiveUsersChartLines(@classroomDailyActiveUsersChartLines365, 365, 'DAU classroom')\r\n    createActiveUsersChartLines(@classroomMonthlyActiveUsersChartLines365, 365, 'MAU classroom')\r\n\r\n  updateCampaignVsClassroomActiveUsersChartData: ->\r\n    @campaignVsClassroomMonthlyActiveUsersRecentChartLines = []\r\n    @campaignVsClassroomMonthlyActiveUsersChartLines = []\r\n    return unless @activeUsers?.length\r\n\r\n    # Separate day/value arrays by event\r\n    eventDataMap = {}\r\n    for entry in @activeUsers\r\n      day = entry.day\r\n      for event, count of entry.events\r\n        eventDataMap[event] ?= []\r\n        eventDataMap[event].push\r\n          day: entry.day\r\n          value: count\r\n\r\n    days = d3Utils.createContiguousDays(90)\r\n    colorIndex = 0\r\n    max = 0\r\n    for event, data of eventDataMap\r\n      if event is 'MAU campaign paid'\r\n        points = @createLineChartPoints(days, _.cloneDeep(data).reverse())\r\n        max = Math.max(max, _.max(points, 'y').y)\r\n        @campaignVsClassroomMonthlyActiveUsersRecentChartLines.push\r\n          points: points\r\n          description: event\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          showYScale: true\r\n      else if event is 'MAU classroom paid'\r\n        points = @createLineChartPoints(days, _.cloneDeep(data).reverse())\r\n        max = Math.max(max, _.max(points, 'y').y)\r\n        @campaignVsClassroomMonthlyActiveUsersRecentChartLines.push\r\n          points: points\r\n          description: event\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          showYScale: false\r\n\r\n    for line in @campaignVsClassroomMonthlyActiveUsersRecentChartLines\r\n      line.max = max\r\n      line.description = line.description.replace 'campaign', 'home'\r\n\r\n    days = d3Utils.createContiguousDays(365)\r\n    colorIndex = 0\r\n    max = 0\r\n    for event, data of eventDataMap\r\n      if event is 'MAU campaign paid'\r\n        points = @createLineChartPoints(days, _.cloneDeep(data).reverse())\r\n        max = Math.max(max, _.max(points, 'y').y)\r\n        @campaignVsClassroomMonthlyActiveUsersChartLines.push\r\n          points: points\r\n          description: event\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          showYScale: true\r\n      else if event is 'MAU classroom paid'\r\n        points = @createLineChartPoints(days, _.cloneDeep(data).reverse())\r\n        max = Math.max(max, _.max(points, 'y').y)\r\n        @campaignVsClassroomMonthlyActiveUsersChartLines.push\r\n          points: points\r\n          description: event\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          showYScale: false\r\n\r\n    for line in @campaignVsClassroomMonthlyActiveUsersChartLines\r\n      line.max = max\r\n      line.description = line.description.replace 'campaign', 'home'\r\n\r\n  updateEnrollmentsChartData: ->\r\n    @enrollmentsChartLines = []\r\n    return unless @paidCourseTotalEnrollments?.length and @trialCourseTotalEnrollments?.length\r\n    days = d3Utils.createContiguousDays(90, false)\r\n    @enrollmentDays = _.cloneDeep(days)\r\n    @enrollmentDays.reverse()\r\n\r\n    colorIndex = 0\r\n    dailyMax = 0\r\n\r\n    data = []\r\n    for entry in @paidCourseTotalEnrollments\r\n      data.push\r\n        day: entry.day\r\n        value: entry.count\r\n    points = @createLineChartPoints(days, data)\r\n    @enrollmentsChartLines.push\r\n      points: points\r\n      description: 'Paid enrollments issued'\r\n      lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n      strokeWidth: 1\r\n      min: 0\r\n      max: _.max(points, 'y').y\r\n      showYScale: true\r\n    dailyMax = _.max([dailyMax, _.max(points, 'y').y])\r\n\r\n    data = []\r\n    for entry in @paidCourseRedeemedEnrollments\r\n      data.push\r\n        day: entry.day\r\n        value: entry.count\r\n    points = @createLineChartPoints(days, data)\r\n    @enrollmentsChartLines.push\r\n      points: points\r\n      description: 'Paid enrollments redeemed'\r\n      lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n      strokeWidth: 1\r\n      min: 0\r\n      max: _.max(points, 'y').y\r\n      showYScale: false\r\n    dailyMax = _.max([dailyMax, _.max(points, 'y').y])\r\n\r\n    data = []\r\n    for entry in @trialCourseTotalEnrollments\r\n      data.push\r\n        day: entry.day\r\n        value: entry.count\r\n    points = @createLineChartPoints(days, data, true)\r\n    @enrollmentsChartLines.push\r\n      points: points\r\n      description: 'Trial enrollments issued'\r\n      lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n      strokeWidth: 1\r\n      min: 0\r\n      max: _.max(points, 'y').y\r\n      showYScale: false\r\n    dailyMax = _.max([dailyMax, _.max(points, 'y').y])\r\n\r\n    data = []\r\n    for entry in @trialCourseRedeemedEnrollments\r\n      data.push\r\n        day: entry.day\r\n        value: entry.count\r\n    points = @createLineChartPoints(days, data)\r\n    @enrollmentsChartLines.push\r\n      points: points\r\n      description: 'Trial enrollments redeemed'\r\n      lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n      strokeWidth: 1\r\n      min: 0\r\n      max: _.max(points, 'y').y\r\n      showYScale: false\r\n    dailyMax = _.max([dailyMax, _.max(points, 'y').y])\r\n\r\n    line.max = dailyMax for line in @enrollmentsChartLines\r\n\r\n  updateRevenueChartData: ->\r\n    @revenueDailyChartLines90Days = []\r\n    @revenueMonthlyChartLines90Days = []\r\n    @revenueDailyChartLines365Days = []\r\n    @revenueMonthlyChartLines365Days = []\r\n    return unless @revenue?.length\r\n\r\n    groupDayMap = {}\r\n    for entry in @revenue\r\n      for count, i in entry.groups\r\n        groupDayMap[@revenueGroups[i]] ?= {}\r\n        groupDayMap[@revenueGroups[i]][entry.day] ?= 0\r\n        groupDayMap[@revenueGroups[i]][entry.day] += count\r\n\r\n    addRevenueChartLine = (days, eventPrefix, lines) =>\r\n      colorIndex = 0\r\n      dailyMax = 0\r\n      for group, entries of groupDayMap\r\n        continue unless group.indexOf(eventPrefix) >= 0\r\n        data = []\r\n        for day, count of entries\r\n          data.push\r\n            day: day\r\n            value: count / 100\r\n        data.reverse()\r\n        points = @createLineChartPoints(days, data)\r\n        lines.push\r\n          points: points\r\n          description: group.replace(eventPrefix + ' ', 'Daily ')\r\n          lineColor: @lineColors[colorIndex++ % @lineColors.length]\r\n          strokeWidth: 1\r\n          min: 0\r\n          max: _.max(points, 'y').y\r\n          showYScale: group is eventPrefix + ' Total'\r\n        dailyMax = _.max(points, 'y').y if group is eventPrefix + ' Total'\r\n        for line in lines\r\n          line.max = dailyMax\r\n\r\n    addRevenueChartLine(d3Utils.createContiguousDays(90), 'DRR', @revenueDailyChartLines90Days)\r\n    addRevenueChartLine(d3Utils.createContiguousDays(90), 'MRR', @revenueMonthlyChartLines90Days)\r\n    addRevenueChartLine(d3Utils.createContiguousDays(365), 'DRR', @revenueDailyChartLines365Days)\r\n    addRevenueChartLine(d3Utils.createContiguousDays(365), 'MRR', @revenueMonthlyChartLines365Days)\r\n"]}