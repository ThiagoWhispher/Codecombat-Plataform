{"version":3,"sources":["app/views/artisans/LevelConceptMap.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/artisans/LevelConceptMap.js","sourcesContent":["RootView = require 'views/core/RootView'\r\ntemplate = require 'templates/artisans/concept-map-view'\r\n\r\nLevel = require 'models/Level'\r\nCampaign = require 'models/Campaign'\r\n\r\nCocoCollection = require 'collections/CocoCollection'\r\nCampaigns = require 'collections/Campaigns'\r\nLevels = require 'collections/Levels'\r\ntagger = require 'lib/SolutionConceptTagger'\r\nconceptList =require 'schemas/concepts'\r\n\r\nunless typeof esper is 'undefined'\r\n  realm = new esper().realm\r\n  parser = realm.parser.bind(realm)\r\n\r\nmodule.exports = class LevelConceptMap extends RootView\r\n  template: template\r\n  id: 'solution-problems-view'\r\n  excludedCampaigns = [\r\n    # Misc. campaigns\r\n    'picoctf', 'auditions'\r\n\r\n    # Campaign-version campaigns\r\n    #'dungeon', 'forest', 'desert', 'mountain', 'glacier'\r\n\r\n    # Test campaigns\r\n    'dungeon-branching-test', 'forest-branching-test', 'desert-branching-test'\r\n\r\n    # Course-version campaigns\r\n    #'intro', 'course-2', 'course-3', 'course-4', 'course-5', 'course-6'\r\n  ]\r\n\r\n  includedLanguages = [\r\n    'javascript'\r\n  ]\r\n\r\n  excludedLevelSnippets = [\r\n    'treasure', 'brawl', 'siege'\r\n  ]\r\n\r\n  unloadedCampaigns: 0\r\n  campaignLevels: {}\r\n  loadedLevels: {}\r\n  data: {}\r\n  problemCount: 0\r\n\r\n  initialize: ->\r\n    @campaigns = new Campaigns([])\r\n    @listenTo(@campaigns, 'sync', @onCampaignsLoaded)\r\n    @supermodel.trackRequest(@campaigns.fetch(\r\n      data:\r\n        project:'slug'\r\n    ))\r\n\r\n  onCampaignsLoaded: (campCollection) ->\r\n    for campaign in campCollection.models\r\n      campaignSlug = campaign.get('slug')\r\n      continue if campaignSlug in excludedCampaigns\r\n      @unloadedCampaigns++\r\n\r\n      @campaignLevels[campaignSlug] = new Levels()\r\n      @listenTo(@campaignLevels[campaignSlug], 'sync', @onLevelsLoaded.bind @, campaignSlug)\r\n      @supermodel.trackRequest(@campaignLevels[campaignSlug].fetchForCampaign(campaignSlug,\r\n        data:\r\n          project: 'thangs,name,slug,campaign'\r\n      ))\r\n\r\n  onLevelsLoaded: (campaignSlug, lvlCollection) ->\r\n    for level, k in lvlCollection.models\r\n      level.campaign = campaignSlug\r\n      @loadedLevels[campaignSlug] = {} unless @loadedLevels[campaignSlug]?\r\n      ll = {} unless ll?\r\n      level.seqNo = lvlCollection.models.length - k\r\n      @loadedLevels[campaignSlug][level.get('slug')] = level\r\n    if --@unloadedCampaigns is 0\r\n      @onAllLevelsLoaded()\r\n\r\n  onAllLevelsLoaded: ->\r\n    for campaignSlug, campaign of @loadedLevels\r\n      for levelSlug, level of campaign\r\n        unless level?\r\n          console.error 'Level Slug doesn\\'t have associated Level', levelSlug\r\n          continue\r\n\r\n        isBad = false\r\n        for word in excludedLevelSnippets\r\n          if levelSlug.indexOf(word) isnt -1\r\n            isBad = true\r\n        continue if isBad\r\n        thangs = level.get 'thangs'\r\n        component = null\r\n        thangs = _.filter(thangs, (elem) ->\r\n          return _.findWhere(elem.components, (elem2) ->\r\n            if elem2.config?.programmableMethods?\r\n              component = elem2\r\n              return true\r\n          )\r\n        )\r\n\r\n        if thangs.length > 1\r\n          console.warn 'Level has more than 1 programmableMethod Thangs', levelSlug\r\n          continue\r\n\r\n        unless component?\r\n          console.error 'Level doesn\\'t have programmableMethod Thang', levelSlug\r\n          continue\r\n\r\n        plan = component.config.programmableMethods.plan\r\n        level.tags = @tagLevel _.find plan.solutions, (s) -> s.language is 'javascript'\r\n      @data[campaignSlug] = _.sortBy _.values(@loadedLevels[campaignSlug]), 'seqNo'\r\n\r\n    console.log @render, @loadedLevels\r\n    @render()\r\n\r\n  tagLevel: (src) ->\r\n    return [] if not src?.source?\r\n    try\r\n      ast = parser(src.source)\r\n      moreTags = tagger(src)\r\n    catch e\r\n      return ['parse error: ' + e.message]\r\n\r\n    tags = {}\r\n    process = (n) ->\r\n      return unless n?\r\n      switch n.type\r\n        when \"Program\", \"BlockStatement\"\r\n          process(n) for n in n.body\r\n        when \"FunctionDeclaration\"\r\n          tags['function-def'] = true\r\n          if n.params > 0\r\n            tags['function-params:' + n.params.length] = true\r\n          process(n.body)\r\n        when \"ExpressionStatement\"\r\n          process(n.expression)\r\n        when \"CallExpression\"\r\n          process(n.callee)\r\n        when \"MemberExpression\"\r\n          if n.object?.name is 'hero'\r\n            tags[\"hero.\" + n.property.name] = true\r\n        when \"WhileStatement\"\r\n          if n.test.type is 'Literal' and n.test.value is true\r\n            tags['while-true'] = true\r\n          else\r\n            tags['while'] = true\r\n            process(n.test)\r\n          process(n.body)\r\n        when \"ForStatement\"\r\n          tags['for'] = true\r\n          process(n.init)\r\n          process(n.test)\r\n          process(n.update)\r\n          process(n.body)\r\n        when \"IfStatement\"\r\n          tags['if'] = true\r\n          process(n.test)\r\n          process(n.consequent)\r\n          process(n.alternate)\r\n        when \"Literal\"\r\n          if n.value is true\r\n            tags['true'] = true\r\n          else\r\n            tags['literal:' + typeof n.value] = true\r\n        when \"BinaryExpression\",\"LogicalExpression\"\r\n          process(n.left)\r\n          process(n.right)\r\n          tags[n.operator] = true\r\n        when \"AssignmentExpression\"\r\n          tags['assign:' + n.operator] = true\r\n          process(n.right)\r\n        else\r\n          tags[n.type] = true\r\n\r\n\r\n\r\n    process ast\r\n    \r\n\r\n    Object.keys(tags).concat(moreTags)\r\n    _.map moreTags, (t) -> _.find(conceptList, (e) => e.concept is t)?.name\r\n"]}