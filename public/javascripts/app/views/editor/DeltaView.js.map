{"version":3,"sources":["app/views/editor/DeltaView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/DeltaView.js","sourcesContent":["CocoView = require 'views/core/CocoView'\r\ntemplate = require 'templates/editor/delta'\r\ndeltasLib = require 'core/deltas'\r\nrequire 'vendor/diffview'\r\nrequire 'vendor/difflib'\r\nrequire 'vendor/treema'\r\n\r\nTEXTDIFF_OPTIONS =\r\n  baseTextName: \"Old\"\r\n  newTextName: \"New\"\r\n  contextSize: 5\r\n  viewType: 1\r\n\r\nmodule.exports = class DeltaView extends CocoView\r\n\r\n  ###\r\n  Takes a CocoModel instance (model) and displays changes since the\r\n  last save (attributes vs _revertAttributes).\r\n\r\n  * If headModel is included, will look for and display conflicts with the changes in model.\r\n  * If comparisonModel is included, will show deltas between model and comparisonModel instead\r\n    of changes within model itself.\r\n\r\n  ###\r\n\r\n  @deltaCounter: 0\r\n  className: 'delta-view'\r\n  template: template\r\n\r\n  constructor: (options) ->\r\n    super(options)\r\n    @expandedDeltas = []\r\n    @skipPaths = options.skipPaths\r\n\r\n    for modelName in ['model', 'headModel', 'comparisonModel']\r\n      @[modelName] = options[modelName]\r\n      continue unless @[modelName] and options.loadModels\r\n      if not @[modelName].isLoaded\r\n        @[modelName] = @supermodel.loadModel(@[modelName]).model\r\n\r\n    @buildDeltas() if @supermodel.finished()\r\n\r\n  onLoaded: ->\r\n    @buildDeltas()\r\n    super()\r\n\r\n  buildDeltas: ->\r\n    if @comparisonModel\r\n      @expandedDeltas = @model.getExpandedDeltaWith(@comparisonModel)\r\n      @deltas = @model.getDeltaWith(@comparisonModel)\r\n    else\r\n      @expandedDeltas = @model.getExpandedDelta()\r\n      @deltas = @model.getDelta()\r\n    [@expandedDeltas, @skippedDeltas] = @filterDeltas(@expandedDeltas)\r\n\r\n    if @headModel\r\n      @headDeltas = @headModel.getExpandedDelta()\r\n      @headDeltas = @filterDeltas(@headDeltas)[0]\r\n      @conflicts = deltasLib.getConflicts(@headDeltas, @expandedDeltas)\r\n\r\n  filterDeltas: (deltas) ->\r\n    return [deltas, []] unless @skipPaths\r\n    for path, i in @skipPaths\r\n      @skipPaths[i] = [path] if _.isString(path)\r\n    newDeltas = []\r\n    skippedDeltas = []\r\n    for delta in deltas\r\n      skip = false\r\n      for skipPath in @skipPaths\r\n        if _.isEqual _.first(delta.dataPath, skipPath.length), skipPath\r\n          skip = true\r\n          break\r\n      if skip then skippedDeltas.push delta else newDeltas.push delta\r\n    [newDeltas, skippedDeltas]\r\n\r\n  afterRender: ->\r\n    expertView = @$el.find('.expert-view')\r\n    if expertView\r\n      expertView.html jsondiffpatch.formatters.html.format(@deltas)\r\n\r\n    DeltaView.deltaCounter += @expandedDeltas.length\r\n    deltas = @$el.find('.details')\r\n    for delta, i in deltas\r\n      deltaEl = $(delta)\r\n      deltaData = @expandedDeltas[i]\r\n      @expandDetails(deltaEl, deltaData)\r\n\r\n    conflictDeltas = @$el.find('.conflict-details')\r\n    conflicts = (delta.conflict for delta in @expandedDeltas when delta.conflict)\r\n    for delta, i in conflictDeltas\r\n      deltaEl = $(delta)\r\n      deltaData = conflicts[i]\r\n      @expandDetails(deltaEl, deltaData)\r\n\r\n  expandDetails: (deltaEl, deltaData) ->\r\n    treemaOptions = { schema: deltaData.schema or {}, readOnly: true }\r\n\r\n    if _.isObject(deltaData.left) and leftEl = deltaEl.find('.old-value')\r\n      options = _.defaults {data: _.merge({}, deltaData.left)}, treemaOptions\r\n      try\r\n        TreemaNode.make(leftEl, options).build()\r\n      catch error\r\n        console.error \"Couldn't show left details Treema for\", deltaData.left, treemaOptions\r\n\r\n    if _.isObject(deltaData.right) and rightEl = deltaEl.find('.new-value')\r\n      options = _.defaults {data: _.merge({}, deltaData.right)}, treemaOptions\r\n      try\r\n        TreemaNode.make(rightEl, options).build()\r\n      catch error\r\n        console.error \"Couldn't show right details Treema for\", deltaData.right, treemaOptions\r\n\r\n    if deltaData.action is 'text-diff'\r\n      return console.error \"Couldn't show diff for left: #{deltaData.left}, right: #{deltaData.right} of delta:\", deltaData unless deltaData.left? and deltaData.right?\r\n      left = difflib.stringAsLines deltaData.left\r\n      right = difflib.stringAsLines deltaData.right\r\n      sm = new difflib.SequenceMatcher(left, right)\r\n      opcodes = sm.get_opcodes()\r\n      el = deltaEl.find('.text-diff')\r\n      options = {baseTextLines: left, newTextLines: right, opcodes: opcodes}\r\n      args = _.defaults options, TEXTDIFF_OPTIONS\r\n      el.append(diffview.buildView(args))\r\n\r\n  getApplicableDelta: ->\r\n    delta = @model.getDelta()\r\n    delta = deltasLib.pruneConflictsFromDelta delta, @conflicts if @conflicts\r\n    delta = deltasLib.pruneExpandedDeltasFromDelta delta, @skippedDeltas if @skippedDeltas\r\n    delta\r\n"]}