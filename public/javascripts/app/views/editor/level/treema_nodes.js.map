{"version":3,"sources":["app/views/editor/level/treema_nodes.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/treema_nodes.js","sourcesContent":["WorldSelectModal = require './modals/WorldSelectModal'\r\nThangType = require '/models/ThangType'\r\nLevelComponent = require 'models/LevelComponent'\r\nCocoCollection = require 'collections/CocoCollection'\r\nrequire 'vendor/treema'\r\n\r\nmakeButton = -> $('<a class=\"btn btn-primary btn-xs treema-map-button\"><span class=\"glyphicon glyphicon-screenshot\"></span></a>')\r\nshorten = (f) -> parseFloat(f.toFixed(1))\r\nWIDTH = 924\r\n\r\nmodule.exports.WorldPointNode = class WorldPointNode extends TreemaNode.nodeMap.point2d\r\n  constructor: (args...) ->\r\n    super(args...)\r\n    console.error 'Point Treema node needs a World included in the settings.' unless @settings.world?\r\n    console.error 'Point Treema node needs a RootView included in the settings.' unless @settings.view?\r\n\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  onClick: (e) ->\r\n    btn = $(e.target).closest('.treema-map-button')\r\n    if btn.length then @openMap() else super(arguments...)\r\n\r\n  openMap: ->\r\n    modal = new WorldSelectModal(world: @settings.world, dataType: 'point', default: @getData(), supermodel: @settings.supermodel)\r\n    modal.callback = @callback\r\n    @settings.view.openModalView modal\r\n\r\n  callback: (e) =>\r\n    return unless e?.point?\r\n    @data.x = shorten(e.point.x)\r\n    @data.y = shorten(e.point.y)\r\n    @refreshDisplay()\r\n\r\nclass WorldRegionNode extends TreemaNode.nodeMap.object\r\n  # this class is not yet used, later will be used to configure the Physical component\r\n\r\n  constructor: (args...) ->\r\n    super(args...)\r\n    console.error 'Region Treema node needs a World included in the settings.' unless @settings.world?\r\n    console.error 'Region Treema node needs a RootView included in the settings.' unless @settings.view?\r\n\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  onClick: (e) ->\r\n    btn = $(e.target).closest('.treema-map-button')\r\n    if btn.length then @openMap() else super(arguments...)\r\n\r\n  openMap: ->\r\n    modal = new WorldSelectModal(world: @settings.world, dataType: 'region', default: @createWorldBounds(), supermodel: @settings.supermodel)\r\n    modal.callback = @callback\r\n    @settings.view.openModalView modal\r\n\r\n  callback: (e) =>\r\n    x = Math.min e.points[0].x, e.points[1].x\r\n    y = Math.min e.points[0].y, e.points[1].y\r\n    @data.pos = {x: x, y: y, z: 0}\r\n    @data.width = Math.abs e.points[0].x - e.points[1].x\r\n    @data.height = Math.min e.points[0].y - e.points[1].y\r\n    @refreshDisplay()\r\n\r\n  createWorldBounds: ->\r\n    # not yet written\r\n\r\nmodule.exports.WorldViewportNode = class WorldViewportNode extends TreemaNode.nodeMap.object\r\n  # selecting ratio'd dimensions in the world, ie the camera in level scripts\r\n  constructor: (args...) ->\r\n    super(args...)\r\n    console.error 'Viewport Treema node needs a World included in the settings.' unless @settings.world?\r\n    console.error 'Viewport Treema node needs a RootView included in the settings.' unless @settings.view?\r\n\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  onClick: (e) ->\r\n    btn = $(e.target).closest('.treema-map-button')\r\n    if btn.length then @openMap() else super(arguments...)\r\n\r\n  openMap: ->\r\n    # can't really get the bounds from this data, so will have to hack this solution\r\n    options = world: @settings.world, dataType: 'ratio-region'\r\n    data = @getData()\r\n    options.defaultFromZoom = data if data?.target?.x?\r\n    options.supermodel = @settings.supermodel\r\n    modal = new WorldSelectModal(options)\r\n    modal.callback = @callback\r\n    @settings.view.openModalView modal\r\n\r\n  callback: (e) =>\r\n    return unless e\r\n    target = {\r\n      x: shorten((e.points[0].x + e.points[1].x) / 2)\r\n      y: shorten((e.points[0].y + e.points[1].y) / 2)\r\n    }\r\n    @set('target', target)\r\n    bounds = e.camera.normalizeBounds(e.points)\r\n    @set('zoom', shorten(WIDTH / bounds.width))\r\n    @refreshDisplay()\r\n\r\nmodule.exports.WorldBoundsNode = class WorldBoundsNode extends TreemaNode.nodeMap.array\r\n  # selecting camera boundaries for a world\r\n  dataType: 'region'\r\n\r\n  constructor: (args...) ->\r\n    super(args...)\r\n    console.error 'Bounds Treema node needs a World included in the settings.' unless @settings.world?\r\n    console.error 'Bounds Treema node needs a RootView included in the settings.' unless @settings.view?\r\n\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('.treema-shortened').prepend(makeButton())\r\n\r\n  onClick: (e) ->\r\n    btn = $(e.target).closest('.treema-map-button')\r\n    if btn.length then @openMap() else super(arguments...)\r\n\r\n  openMap: ->\r\n    bounds = @getData() or [{x: 0, y: 0}, {x: 100, y: 80}]\r\n    modal = new WorldSelectModal(world: @settings.world, dataType: 'region', default: bounds, supermodel: @settings.supermodel)\r\n    modal.callback = @callback\r\n    @settings.view.openModalView modal\r\n\r\n  callback: (e) =>\r\n    return unless e\r\n    @set '/0', {x: shorten(e.points[0].x), y: shorten(e.points[0].y)}\r\n    @set '/1', {x: shorten(e.points[1].x), y: shorten(e.points[1].y)}\r\n\r\nmodule.exports.ThangNode = class ThangNode extends TreemaNode.nodeMap.string\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('input').autocomplete(source: @settings.thangIDs, minLength: 0, delay: 0, autoFocus: true)\r\n    valEl\r\n\r\nmodule.exports.TeamNode = class TeamNode extends TreemaNode.nodeMap.string\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('input').autocomplete(source: @settings.teams, minLength: 0, delay: 0, autoFocus: true)\r\n    valEl\r\n\r\nmodule.exports.SuperteamNode = class SuperteamNode extends TreemaNode.nodeMap.string\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.find('input').autocomplete(source: @settings.superteams, minLength: 0, delay: 0, autoFocus: true)\r\n    valEl\r\n\r\nmodule.exports.RadiansNode = class RadiansNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    deg = data / Math.PI * 180\r\n    valEl.text valEl.text() + \"rad (#{deg.toFixed(0)}˚)\"\r\n\r\nmodule.exports.MetersNode = class MetersNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.text valEl.text() + 'm'\r\n\r\nmodule.exports.KilogramsNode = class KilogramsNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.text valEl.text() + 'kg'\r\n\r\nmodule.exports.SecondsNode = class SecondsNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.text valEl.text() + 's'\r\n\r\nmodule.exports.MillisecondsNode = class MillisecondsNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.text valEl.text() + 'ms'\r\n\r\nmodule.exports.SpeedNode = class SpeedNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.text valEl.text() + 'm/s'\r\n\r\nmodule.exports.AccelerationNode = class AccelerationNode extends TreemaNode.nodeMap.number\r\n  buildValueForDisplay: (valEl, data) ->\r\n    super(valEl, data)\r\n    valEl.text valEl.text() + 'm/s^2'\r\n\r\nmodule.exports.ThangTypeNode = class ThangTypeNode extends TreemaNode.nodeMap.string\r\n  valueClass: 'treema-thang-type'\r\n  @thangTypes: null\r\n  @thangTypesCollection: null\r\n\r\n  constructor: (args...) ->\r\n    super args...\r\n    data = @getData()\r\n    @thangType = _.find @settings.supermodel.getModels(ThangType), (m) => m.get('original') is data if data\r\n\r\n  buildValueForDisplay: (valEl) ->\r\n    @buildValueForDisplaySimply(valEl, @thangType?.get('name') or 'None')\r\n\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    thangTypeNames = (m.get('name') for m in @settings.supermodel.getModels ThangType)\r\n    input = valEl.find('input').autocomplete(source: thangTypeNames, minLength: 0, delay: 0, autoFocus: true)\r\n    input.val(@thangType?.get('name') or 'None')\r\n    valEl\r\n\r\n  saveChanges: ->\r\n    thangTypeName = @$el.find('input').val()\r\n    @thangType = _.find @settings.supermodel.getModels(ThangType), (m) -> m.get('name') is thangTypeName\r\n    if @thangType\r\n      @data = @thangType.get('original')\r\n    else\r\n      @data = null\r\n\r\nmodule.exports.ThangTypeNode = ThangTypeNode = class ThangTypeNode extends TreemaNode.nodeMap.string\r\n  valueClass: 'treema-thang-type'\r\n  @thangTypesCollection: null  # Lives in ThangTypeNode parent class\r\n  @thangTypes: null  # Lives in ThangTypeNode or subclasses\r\n\r\n  constructor: ->\r\n    super(arguments...)\r\n    @getThangTypes()\r\n    unless ThangTypeNode.thangTypesCollection.loaded\r\n      f = -> \r\n        @refreshDisplay() unless @isEditing()\r\n        @getThangTypes()\r\n      ThangTypeNode.thangTypesCollection.once('sync', f, @)\r\n\r\n  buildValueForDisplay: (valEl, data) ->\r\n    @buildValueForDisplaySimply(valEl, @getCurrentThangType() or '')\r\n    valEl\r\n\r\n  buildValueForEditing: (valEl, data) ->\r\n    super(valEl, data)\r\n    input = valEl.find 'input'\r\n    source = (req, res) =>\r\n      { term } = req\r\n      term = term.toLowerCase()\r\n      return res([]) unless @constructor.thangTypes\r\n      return res(thangType.name for thangType in @constructor.thangTypes when _.string.contains(thangType.name.toLowerCase(), term))\r\n    input.autocomplete(source: source, minLength: 0, delay: 0, autoFocus: true)\r\n    input.val(@getCurrentThangType() or '')\r\n    valEl\r\n\r\n  filterThangType: (thangType) -> true\r\n\r\n  getCurrentThangType: ->\r\n    return null unless @constructor.thangTypes\r\n    return null unless original = @getData()\r\n    thangType = _.find @constructor.thangTypes, { original: original }\r\n    thangType?.name or '...'\r\n\r\n  getThangTypes: ->\r\n    if ThangTypeNode.thangTypesCollection\r\n      if not @constructor.thangTypes\r\n        @processThangTypes(ThangTypeNode.thangTypesCollection)\r\n      return\r\n    ThangTypeNode.thangTypesCollection = new CocoCollection([], {\r\n      url: '/db/thang.type'\r\n      project:['name', 'components', 'original']\r\n      model: ThangType\r\n    })\r\n    res = ThangTypeNode.thangTypesCollection.fetch()\r\n    ThangTypeNode.thangTypesCollection.once 'sync', => @processThangTypes(ThangTypeNode.thangTypesCollection)\r\n\r\n  processThangTypes: (thangTypeCollection) ->\r\n    @constructor.thangTypes = []\r\n    @processThangType thangType for thangType in thangTypeCollection.models\r\n\r\n  processThangType: (thangType) ->\r\n    @constructor.thangTypes.push name: thangType.get('name'), original: thangType.get('original')\r\n\r\n  saveChanges: ->\r\n    thangTypeName = @$el.find('input').val()\r\n    thangType = _.find(@constructor.thangTypes, {name: thangTypeName})\r\n    return @remove() unless thangType\r\n    @data = thangType.original\r\n\r\nmodule.exports.ItemThangTypeNode = ItemThangTypeNode = class ItemThangTypeNode extends ThangTypeNode\r\n  valueClass: 'treema-item-thang-type'\r\n\r\n  filterThangType: (thangType) ->\r\n    @keyForParent in thangType.slots\r\n\r\n  processThangType: (thangType) ->\r\n    return unless itemComponent = _.find thangType.get('components'), {original: LevelComponent.ItemID}\r\n    @constructor.thangTypes.push name: thangType.get('name'), original: thangType.get('original'), slots: itemComponent.config?.slots ? ['right-hand']\r\n"]}