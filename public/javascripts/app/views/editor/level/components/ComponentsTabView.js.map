{"version":3,"sources":["app/views/editor/level/components/ComponentsTabView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/components/ComponentsTabView.js","sourcesContent":["CocoView = require 'views/core/CocoView'\r\ntemplate = require 'templates/editor/level/components_tab'\r\nThangType = require 'models/ThangType'\r\nLevelComponent = require 'models/LevelComponent'\r\nLevelComponentEditView = require './LevelComponentEditView'\r\nLevelComponentNewView = require './NewLevelComponentModal'\r\nrequire 'vendor/treema'\r\n\r\nclass LevelComponentCollection extends Backbone.Collection\r\n  url: '/db/level.component'\r\n  model: LevelComponent\r\n\r\nmodule.exports = class ComponentsTabView extends CocoView\r\n  id: 'editor-level-components-tab-view'\r\n  template: template\r\n  className: 'tab-pane'\r\n\r\n  subscriptions:\r\n    'editor:level-component-editing-ended': 'onLevelComponentEditingEnded'\r\n\r\n  events:\r\n    'click #create-new-component-button': 'createNewLevelComponent'\r\n    'click #create-new-component-button-no-select': 'createNewLevelComponent'\r\n\r\n  onLoaded: ->\r\n\r\n  refreshLevelThangsTreema: (thangsData) ->\r\n    presentComponents = {}\r\n    for thang in thangsData\r\n      componentMap = {}\r\n      thangType = @supermodel.getModelByOriginal ThangType, thang.thangType\r\n      for component in thangType.get('components') ? []\r\n        componentMap[component.original] = component\r\n\r\n      for component in thang.components\r\n        componentMap[component.original] = component\r\n\r\n      for component in _.values(componentMap)\r\n        haveThisComponent = (presentComponents[component.original + '.' + (component.majorVersion ? 0)] ?= [])\r\n        haveThisComponent.push thang.id if haveThisComponent.length < 100  # for performance when adding many Thangs\r\n    return if _.isEqual presentComponents, @presentComponents\r\n    @presentComponents = presentComponents\r\n\r\n    componentModels = @supermodel.getModels LevelComponent\r\n    componentModelMap = {}\r\n    componentModelMap[comp.get('original')] = comp for comp in componentModels\r\n    components = ({original: key.split('.')[0], majorVersion: parseInt(key.split('.')[1], 10), thangs: value, count: value.length} for key, value of @presentComponents)\r\n    components = components.concat ({original: c.get('original'), majorVersion: c.get('version').major, thangs: [], count: 0} for c in componentModels when not @presentComponents[c.get('original') + '.' + c.get('version').major])\r\n    treemaData = _.sortBy components, (comp) =>\r\n      component = componentModelMap[comp.original]\r\n      res = [(if comp.count then 0 else 1), component.get('system'), component.get('name')]\r\n      return res\r\n\r\n    res = {}\r\n    res[treemaData[key].original] = treemaData[key] for key in [0 ... treemaData.length]\r\n    treemaData = (value for key, value of res)  # Removing duplicates from treemaData\r\n\r\n    treemaOptions =\r\n      supermodel: @supermodel\r\n      schema: {type: 'array', items: {type: 'object', format: 'level-component'}}\r\n      data: treemaData\r\n      callbacks:\r\n        select: @onTreemaComponentSelected\r\n      readOnly: true\r\n      nodeClasses: {'level-component': LevelComponentNode}\r\n    @componentsTreema = @$el.find('#components-treema').treema treemaOptions\r\n    @componentsTreema.build()\r\n    @componentsTreema.open()\r\n\r\n  onTreemaComponentSelected: (e, selected) =>\r\n    selected = if selected.length > 1 then selected[0].getLastSelectedTreema() else selected[0]\r\n    unless selected\r\n      @removeSubView @levelComponentEditView\r\n      @levelComponentEditView = null\r\n      return\r\n\r\n    @editLevelComponent original: selected.data.original, majorVersion: selected.data.majorVersion\r\n\r\n  createNewLevelComponent: (e) ->\r\n    levelComponentNewView = new LevelComponentNewView supermodel: @supermodel\r\n    @openModalView levelComponentNewView\r\n    Backbone.Mediator.publish 'editor:view-switched', {}\r\n\r\n  editLevelComponent: (e) ->\r\n    @levelComponentEditView = @insertSubView new LevelComponentEditView(original: e.original, majorVersion: e.majorVersion, supermodel: @supermodel)\r\n\r\n  onLevelComponentEditingEnded: (e) ->\r\n    @removeSubView @levelComponentEditView\r\n    @levelComponentEditView = null\r\n\r\n  destroy: ->\r\n    @componentsTreema?.destroy()\r\n    super()\r\n\r\nclass LevelComponentNode extends TreemaObjectNode\r\n  valueClass: 'treema-level-component'\r\n  collection: false\r\n  buildValueForDisplay: (valEl, data) ->\r\n    count = if data.count is 1 then data.thangs[0] else ((if data.count >= 100 then '100+' else data.count) + ' Thangs')\r\n    if data.original.match ':'\r\n      name = 'Old: ' + data.original.replace('systems/', '')\r\n    else\r\n      comp = _.find @settings.supermodel.getModels(LevelComponent), (m) =>\r\n        m.get('original') is data.original and m.get('version').major is data.majorVersion\r\n      name = \"#{comp.get('system')}.#{comp.get('name')} v#{comp.get('version').major}\"\r\n    result = @buildValueForDisplaySimply valEl, \"#{name} (#{count})\"\r\n    result.addClass 'not-present' unless data.count\r\n    result\r\n"]}