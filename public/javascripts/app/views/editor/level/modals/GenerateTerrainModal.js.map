{"version":3,"sources":["app/views/editor/level/modals/GenerateTerrainModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/modals/GenerateTerrainModal.js","sourcesContent":["ModalView = require 'views/core/ModalView'\r\ntemplate = require 'templates/editor/level/modal/generate-terrain-modal'\r\nCocoModel = require 'models/CocoModel'\r\n\r\nclusters = {\r\n  'hero': {\r\n    'thangs': ['Hero Placeholder']\r\n    'margin': 1\r\n  }\r\n  'rocks': {\r\n    'thangs': ['Rock 1', 'Rock 2', 'Rock 3', 'Rock 4', 'Rock 5', 'Rock Cluster 1', 'Rock Cluster 2', 'Rock Cluster 3']\r\n    'margin': 1\r\n  }\r\n  'trees': {\r\n    'thangs': ['Tree 1', 'Tree 2', 'Tree 3', 'Tree 4']\r\n    'margin': 0.5\r\n    }\r\n  'tree_stands': {\r\n    'thangs': ['Tree Stand 1', 'Tree Stand 2', 'Tree Stand 3', 'Tree Stand 4', 'Tree Stand 5', 'Tree Stand 6']\r\n    'margin': 3\r\n  }\r\n  'shrubs': {\r\n    'thangs': ['Shrub 1', 'Shrub 2', 'Shrub 3']\r\n    'margin': 0.5\r\n    }\r\n  'houses': {\r\n    'thangs': ['House 1', 'House 2', 'House 3', 'House 4']\r\n    'margin': 4\r\n    }\r\n  'animals': {\r\n    'thangs': ['Cow', 'Horse']\r\n    'margin': 1\r\n    }\r\n  'wood': {\r\n    'thangs': ['Firewood 1', 'Firewood 2', 'Firewood 3']\r\n    'margin': 1\r\n    }\r\n  'farm': {\r\n    'thangs': ['Farm']\r\n    'margin': 9\r\n    }\r\n  'cave': {\r\n    'thangs': ['Cave']\r\n    'margin': 5\r\n    }\r\n  'stone': {\r\n    'thangs': ['Gargoyle', 'Rock Cluster 1', 'Rock Cluster 2', 'Rock Cluster 3']\r\n    'margin': 1\r\n    }\r\n  'torch': {\r\n    'thangs': ['Torch']\r\n    'margin': 0\r\n  }\r\n  'chains': {\r\n    'thangs': ['Chains']\r\n    'margin': 0\r\n  }\r\n  'barrel': {\r\n    'thangs': ['Barrel']\r\n    'margin': 1\r\n  }\r\n  'doors': {\r\n    'thangs': ['Dungeon Door']\r\n    'margin': -1\r\n    }\r\n  'grass_floor': {\r\n    'thangs': ['Grass01', 'Grass02', 'Grass03', 'Grass04', 'Grass05']\r\n    'margin': -1\r\n    }\r\n  'dungeon_wall': {\r\n    'thangs': ['Dungeon Wall']\r\n    'margin': 2\r\n    }\r\n  'dungeon_floor': {\r\n    'thangs': ['Dungeon Floor']\r\n    'margin': -1\r\n    }\r\n  'indoor_wall': {\r\n    'thangs': ['Indoor Wall']\r\n    'margin': 2\r\n    }\r\n  'indoor_floor': {\r\n    'thangs': ['Indoor Floor']\r\n    'margin': -1\r\n    }\r\n  'furniture': {\r\n    'thangs': ['Bookshelf', 'Chair', 'Table', 'Candle', 'Treasure Chest']\r\n    'margin': -1\r\n    }\r\n  'desert_walls': {\r\n    'thangs': ['Desert Wall 1', 'Desert Wall 2', 'Desert Wall 3', 'Desert Wall 4', 'Desert Wall 5', 'Desert Wall 6', 'Desert Wall 7', 'Desert Wall 8']\r\n    'margin': 6\r\n  }\r\n  'desert_floor': {\r\n    'thangs': ['Sand 01', 'Sand 02', 'Sand 03', 'Sand 04', 'Sand 05', 'Sand 06']\r\n    'margin': -1\r\n  }\r\n  'oases': {\r\n    'thangs': ['Oasis 1', 'Oasis 2', 'Oasis 3']\r\n    'margin': 4\r\n  }\r\n  'mountain_floor': {\r\n    'thangs': ['Talus 1', 'Talus 2', 'Talus 3', 'Talus 4', 'Talus 5', 'Talus 6']\r\n    'margin': -1\r\n  }\r\n  'mountain_walls': {\r\n    'thangs': ['Mountain 1','Mountain 3']\r\n    'margin': 6\r\n  }\r\n  'glacier_floor': {\r\n    'thangs': ['Firn 1', 'Firn 2', 'Firn 3', 'Firn 4', 'Firn 5', 'Firn 6']\r\n    'margin': -1\r\n  }\r\n  'glacier_walls': {\r\n    'thangs': ['Ice Wall']\r\n    'margin': 2\r\n  }\r\n}\r\n\r\npresets = {\r\n  'dungeon': {\r\n    'terrainName': 'Dungeon'\r\n    'type':'dungeon'\r\n    'borders':'dungeon_wall'\r\n    'borderNoise':0\r\n    'borderSize':4\r\n    'borderThickness':1\r\n    'floors':'dungeon_floor'\r\n    'decorations': {\r\n      'Room': {\r\n        'num': [1,1]\r\n        'width': [12, 20]\r\n        'height': [8, 16]\r\n        'thickness': [2,2]\r\n        'cluster': 'dungeon_wall'\r\n      }\r\n      'hero': {\r\n        'num': [1, 1]\r\n        'width': 2\r\n        'height': 2\r\n        'clusters': {\r\n          'hero': [1, 1]\r\n        }\r\n      }\r\n      'Barrels': {\r\n        'num': [1,1]\r\n        'width': [8, 12]\r\n        'height': [8, 12]\r\n        'numBarrels': [4,6]\r\n        'cluster': 'barrel'\r\n      }\r\n      'cave': {\r\n        'num':[1,1]\r\n        'width': 10\r\n        'height': 10\r\n        'clusters': {\r\n          'cave':[1,1]\r\n          'stone':[2,4]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  'indoor': {\r\n    'terrainName': 'Indoor'\r\n    'type':'indoor'\r\n    'borders':'indoor_wall'\r\n    'borderNoise':0\r\n    'borderSize':4\r\n    'borderThickness':1\r\n    'floors':'indoor_floor'\r\n    'decorations': {\r\n      'Room': {\r\n        'num': [1,1]\r\n        'width': [12, 20]\r\n        'height': [8, 16]\r\n        'thickness': [2,2]\r\n        'cluster': 'indoor_wall'\r\n      }\r\n      'hero': {\r\n        'num': [1, 1]\r\n        'width': 2\r\n        'height': 2\r\n        'clusters': {\r\n          'hero': [1, 1]\r\n        }\r\n      }\r\n      'furniture': {\r\n        'num':[1,2]\r\n        'width': 15\r\n        'height': 15\r\n        'clusters': {\r\n          'furniture':[2,4]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  'grassy': {\r\n    'terrainName': 'Grass'\r\n    'type':'grassy'\r\n    'borders':'tree_stands'\r\n    'borderNoise':1\r\n    'borderSize':2\r\n    'borderThickness':2\r\n    'floors':'grass_floor'\r\n    'decorations': {\r\n      'hero': {\r\n        'num': [1, 1]\r\n        'width': 2\r\n        'height': 2\r\n        'clusters': {\r\n          'hero': [1, 1]\r\n        }\r\n      }\r\n      'house': {\r\n        'num':[1,2] #min-max\r\n        'width': 15\r\n        'height': 15\r\n        'clusters': {\r\n          'houses':[1,1]\r\n          'trees':[1,2]\r\n          'shrubs':[0,3]\r\n          'rocks':[1,2]\r\n        }\r\n      }\r\n      'farm': {\r\n        'num':[1,1] #min-max\r\n        'width': 25\r\n        'height': 15\r\n        'clusters': {\r\n          'farm':[1,1]\r\n          'shrubs':[2,3]\r\n          'wood':[2,4]\r\n          'animals':[2,3]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  'desert': {\r\n    'terrainName': 'Desert'\r\n    'type':'desert'\r\n    'borders':'desert_walls'\r\n    'borderNoise':2\r\n    'borderSize':4\r\n    'borderThickness':4\r\n    'floors':'desert_floor'\r\n    'decorations': {\r\n      'hero': {\r\n        'num': [1, 1]\r\n        'width': 2\r\n        'height': 2\r\n        'clusters': {\r\n          'hero': [1, 1]\r\n        }\r\n      }\r\n      'oasis': {\r\n        'num':[1,2] #min-max\r\n        'width': 10\r\n        'height': 10\r\n        'clusters': {\r\n          'oases':[1,1]\r\n          'shrubs':[0,5]\r\n          'rocks':[0,2]\r\n        }\r\n      }\r\n    }\r\n  },\r\n  'mountain': {\r\n    'terrainName': 'Mountain'\r\n    'type': 'mountain'\r\n    'floors': 'mountain_floor'\r\n    'borders': 'mountain_walls'\r\n    'borderNoise': 1\r\n    'borderSize': 1\r\n    'borderThickness': 1\r\n    'decorations': {\r\n      'hero': {\r\n        'num': [1, 1]\r\n        'width': 2\r\n        'height': 2\r\n        'clusters': {\r\n          'hero': [1, 1]\r\n        }\r\n      }\r\n    }\r\n  },\r\n  'glacier': {\r\n    'terrainName': 'Glacier'\r\n    'type': 'glacier'\r\n    'floors': 'glacier_floor'\r\n    'borders': 'glacier_walls'\r\n    'borderNoise': 0\r\n    'borderSize': 4\r\n    'borderThickness': 1\r\n    'decorations': {\r\n      'hero': {\r\n        'num': [1, 1]\r\n        'width': 2\r\n        'height': 2\r\n        'clusters': {\r\n          'hero': [1, 1]\r\n        }\r\n      }\r\n      'Room': {\r\n        'num': [1,1]\r\n        'width': [12, 20]\r\n        'height': [8, 16]\r\n        'thickness': [2,2]\r\n        'cluster': 'glacier_walls'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\npresetSizes = {\r\n  'small': {\r\n    'x':80\r\n    'y':68\r\n    'sizeFactor':1\r\n  }\r\n  'large': {\r\n    'x':160\r\n    'y':136\r\n    'sizeFactor':2\r\n  }\r\n}\r\n\r\nthangSizes = {\r\n  'floorSize': {\r\n    'x':20\r\n    'y':17\r\n  }\r\n  'borderSize': {\r\n    'x':4\r\n    'y':4\r\n  }}\r\n\r\n\r\nmodule.exports = class GenerateTerrainModal extends ModalView\r\n  id: 'generate-terrain-modal'\r\n  template: template\r\n  plain: true\r\n  modalWidthPercent: 90\r\n\r\n  events:\r\n    'click .choose-option': 'onGenerate'\r\n\r\n  constructor: (options) ->\r\n    super options\r\n    @presets = presets\r\n    @presetSizes = presetSizes\r\n\r\n  onRevertModel: (e) ->\r\n    id = $(e.target).val()\r\n    CocoModel.backedUp[id].revert()\r\n    $(e.target).closest('tr').remove()\r\n    @reloadOnClose = true\r\n\r\n  onGenerate: (e) ->\r\n    target = $(e.target)\r\n    presetType = target.attr 'data-preset-type'\r\n    presetSize = target.attr 'data-preset-size'\r\n    @generateThangs presetType, presetSize\r\n    Backbone.Mediator.publish 'editor:random-terrain-generated', thangs: @thangs, terrain: presets[presetType].terrainName\r\n    @hide()\r\n\r\n  generateThangs: (presetName, presetSize) ->\r\n    @falseCount = 0\r\n    preset = presets[presetName]\r\n    presetSize = presetSizes[presetSize]\r\n    @thangs = []\r\n    @rects = []\r\n    @generateFloor preset, presetSize\r\n    @generateBorder preset, presetSize, preset.borderNoise\r\n    @generateDecorations preset, presetSize\r\n\r\n  generateFloor: (preset, presetSize) ->\r\n    for i in _.range(0, presetSize.x, thangSizes.floorSize.x)\r\n      for j in _.range(0, presetSize.y, thangSizes.floorSize.y)\r\n        @thangs.push {\r\n          'id': @getRandomThang(clusters[preset.floors].thangs)\r\n          'pos': {\r\n            'x': i + thangSizes.floorSize.x/2\r\n            'y': j + thangSizes.floorSize.y/2\r\n          }\r\n          'margin': clusters[preset.floors].margin\r\n        }\r\n\r\n  generateBorder: (preset, presetSize, noiseFactor=1) ->\r\n    for i in _.range(0, presetSize.x, thangSizes.borderSize.x)\r\n      for j in _.range(preset.borderThickness)\r\n        # Bottom wall\r\n        while not @addThang {\r\n          'id': @getRandomThang(clusters[preset.borders].thangs)\r\n          'pos': {\r\n            'x': i + preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.x/2, thangSizes.borderSize.x/2)\r\n            'y': 0 + preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.y/2, thangSizes.borderSize.y)\r\n          }\r\n          'margin': clusters[preset.borders].margin\r\n        }\r\n          continue\r\n\r\n        # Top wall\r\n        while not @addThang {\r\n          'id': @getRandomThang(clusters[preset.borders].thangs)\r\n          'pos': {\r\n            'x': i + preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.x/2, thangSizes.borderSize.x/2)\r\n            'y': presetSize.y - preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.y, thangSizes.borderSize.y/2)\r\n          }\r\n          'margin': clusters[preset.borders].margin\r\n        }\r\n          continue\r\n\r\n        # Double wall on top\r\n        if preset.type is 'dungeon'\r\n          @addThang {\r\n            'id': @getRandomThang(clusters[preset.borders].thangs)\r\n            'pos': {\r\n              'x': i + preset.borderSize/2\r\n              'y': presetSize.y - 3 * preset.borderSize/2\r\n            }\r\n            'margin': clusters[preset.borders].margin\r\n          }\r\n          if ( i / preset.borderSize ) % 2 and i isnt presetSize.x - thangSizes.borderSize.x\r\n            @addThang {\r\n              'id': @getRandomThang(clusters['torch'].thangs)\r\n              'pos': {\r\n                'x': i + preset.borderSize\r\n                'y': presetSize.y - preset.borderSize / 2\r\n              }\r\n              'margin': clusters['torch'].margin\r\n            }\r\n          else if ( i / preset.borderSize ) % 2 is 0 and i and _.random(100) < 30\r\n            @addThang {\r\n              'id': @getRandomThang(clusters['chains'].thangs)\r\n              'pos': {\r\n                'x': i + preset.borderSize\r\n                'y': presetSize.y - preset.borderSize / 2\r\n              }\r\n              'margin': clusters['chains'].margin\r\n            }\r\n\r\n    for i in _.range(0, presetSize.y, thangSizes.borderSize.y)\r\n      for j in _.range(preset.borderThickness)\r\n        # Left wall\r\n        while not @addThang {\r\n          'id': @getRandomThang(clusters[preset.borders].thangs)\r\n          'pos': {\r\n            'x': 0 + preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.x/2, thangSizes.borderSize.x)\r\n            'y': i + preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.y/2, thangSizes.borderSize.y/2)\r\n          }\r\n          'margin': clusters[preset.borders].margin\r\n        }\r\n          continue\r\n\r\n        # Right wall\r\n        while not @addThang {\r\n          'id': @getRandomThang(clusters[preset.borders].thangs)\r\n          'pos': {\r\n            'x': presetSize.x - preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.x, thangSizes.borderSize.x/2)\r\n            'y': i + preset.borderSize/2 + noiseFactor * _.random(-thangSizes.borderSize.y/2, thangSizes.borderSize.y/2)\r\n          }\r\n          'margin': clusters[preset.borders].margin\r\n        }\r\n          continue\r\n\r\n  generateDecorations: (preset, presetSize)->\r\n    for name, decoration of preset.decorations\r\n      for num in _.range(presetSize.sizeFactor * _.random(decoration.num[0], decoration.num[1]))\r\n        if @['build'+name] isnt undefined\r\n          @['build'+name](preset, presetSize, decoration)\r\n          continue\r\n        while true\r\n          rect = {\r\n            'x':_.random(decoration.width/2 + preset.borderSize/2 + thangSizes.borderSize.x, presetSize.x - decoration.width/2 - preset.borderSize/2 - thangSizes.borderSize.x),\r\n            'y':_.random(decoration.height/2 + preset.borderSize/2 + thangSizes.borderSize.y, presetSize.y - decoration.height/2 - preset.borderSize/2 - thangSizes.borderSize.y)\r\n            'width':decoration.width\r\n            'height':decoration.height\r\n          }\r\n          break if @addRect rect\r\n\r\n        for cluster, range of decoration.clusters\r\n          for i in _.range(_.random(range[0], range[1]))\r\n            while not @addThang {\r\n              'id':@getRandomThang(clusters[cluster].thangs)\r\n              'pos':{\r\n                'x':_.random(rect.x - rect.width/2, rect.x + rect.width/2)\r\n                'y':_.random(rect.y - rect.height/2, rect.y + rect.height/2)\r\n              }\r\n              'margin':clusters[cluster].margin\r\n            }\r\n              continue\r\n\r\n  buildRoom: (preset, presetSize, room) ->\r\n    grid = preset.borderSize\r\n    while true\r\n      rect = {\r\n        'width':presetSize.sizeFactor * (room.width[0] + grid * _.random(0, (room.width[1] - room.width[0])/grid))\r\n        'height':presetSize.sizeFactor * (room.height[0] + grid * _.random(0, (room.height[1] - room.height[0])/grid))\r\n      }\r\n      # This logic isn't quite right--it makes the rooms bigger than intended--but it's snapping correctly, which is fine for now.\r\n      rect.width = Math.round((rect.width - grid) / (2 * grid)) * 2 * grid + grid\r\n      rect.height = Math.round((rect.height - grid) / (2 * grid)) * 2 * grid + grid\r\n      roomThickness = _.random(room.thickness[0], room.thickness[1])\r\n      rect.x = _.random(rect.width/2 + grid * (roomThickness+1.5), presetSize.x - rect.width/2 - grid * (roomThickness+1.5))\r\n      rect.y = _.random(rect.height/2 + grid * (roomThickness+2.5), presetSize.y - rect.height/2 - grid * (roomThickness+3.5))\r\n      # Snap room walls to the wall grid.\r\n      rect.x = Math.round((rect.x - grid / 2) / grid) * grid\r\n      rect.y = Math.round((rect.y - grid / 2) / grid) * grid\r\n      break if @addRect {\r\n        'x': rect.x\r\n        'y': rect.y\r\n        'width': rect.width + 2.5 * roomThickness * grid\r\n        'height': rect.height + 2.5 * roomThickness * grid\r\n      }\r\n\r\n    xRange = _.range(rect.x - rect.width/2 + grid, rect.x + rect.width/2, grid)\r\n    topDoor = _.random(1) > 0.5\r\n    topDoorX = xRange[_.random(0, xRange.length-1)]\r\n    bottomDoor = if not topDoor then true else _.random(1) > 0.5\r\n    bottomDoorX = xRange[_.random(0, xRange.length-1)]\r\n\r\n    for t in _.range(0, roomThickness+1)\r\n      for i in _.range(rect.x - rect.width/2 - (t-1) * grid, rect.x + rect.width/2 + t * grid, grid)\r\n        # Bottom wall\r\n        thang = {\r\n          'id': @getRandomThang(clusters[room.cluster].thangs)\r\n          'pos': {\r\n            'x': i\r\n            'y': rect.y - rect.height/2 - t * grid\r\n          }\r\n          'margin': clusters[room.cluster].margin\r\n        }\r\n        if i is bottomDoorX and bottomDoor\r\n          thang.id = @getRandomThang(clusters['doors'].thangs)\r\n          thang.pos.y -= grid/3\r\n        @addThang thang unless i is bottomDoorX and t isnt roomThickness and bottomDoor\r\n\r\n        if t is roomThickness and i isnt rect.x - rect.width/2 - (t-1) * grid and preset.type is 'dungeon'\r\n          if ( i isnt bottomDoorX and i isnt bottomDoorX + grid ) or not bottomDoor\r\n            @addThang {\r\n              'id': @getRandomThang(clusters['torch'].thangs)\r\n              'pos': {\r\n                'x': thang.pos.x - grid / 2\r\n                'y': thang.pos.y + grid\r\n              }\r\n              'margin': clusters['torch'].margin\r\n            }\r\n\r\n        # Top wall\r\n        thang = {\r\n          'id': @getRandomThang(clusters[room.cluster].thangs)\r\n          'pos': {\r\n            'x': i\r\n            'y': rect.y + rect.height/2 + t * grid\r\n          }\r\n          'margin': clusters[room.cluster].margin\r\n        }\r\n        if i is topDoorX and topDoor\r\n          thang.id = @getRandomThang(clusters['doors'].thangs)\r\n          thang.pos.y -= grid\r\n        @addThang thang unless i is topDoorX and t isnt roomThickness and topDoor\r\n\r\n    for t in _.range(0, roomThickness)\r\n      for i in _.range(rect.y - rect.height/2 - t * grid, rect.y + rect.height/2 + (t+1) * grid, grid)\r\n        # Left wall\r\n        @addThang {\r\n          'id': @getRandomThang(clusters[room.cluster].thangs)\r\n          'pos': {\r\n            'x': rect.x - rect.width/2 - t * grid\r\n            'y': i\r\n          }\r\n          'margin': clusters[room.cluster].margin\r\n        }\r\n\r\n        # Right wall\r\n        @addThang {\r\n          'id': @getRandomThang(clusters[room.cluster].thangs)\r\n          'pos': {\r\n            'x': rect.x + rect.width/2 + t * grid\r\n            'y': i\r\n          }\r\n          'margin': clusters[room.cluster].margin\r\n        }\r\n\r\n  buildBarrels: (preset, presetSize, decoration) ->\r\n    rect = {\r\n      'width':presetSize.sizeFactor * ( _.random( decoration.width[0], decoration.width[1] ) )\r\n      'height':presetSize.sizeFactor * ( _.random( decoration.height[0], decoration.height[1] ) )\r\n    }\r\n    x = [ rect.width/2 + preset.borderSize , presetSize.x - rect.width/2 - preset.borderSize ]\r\n    y = [ rect.height/2 + preset.borderSize , presetSize.y - rect.height/2 - 2 * preset.borderSize ]\r\n\r\n    for i in x\r\n      for j in y\r\n        if _.random(100) < 40\r\n          rect = {\r\n            'x': i\r\n            'y': j\r\n            'width': rect.width\r\n            'height': rect.height\r\n          }\r\n          if @addRect rect\r\n            for num in _.range( _.random( decoration.numBarrels[0], decoration.numBarrels[1] ) )\r\n              while not @addThang {\r\n                'id': @getRandomThang(clusters[decoration.cluster].thangs)\r\n                'pos': {\r\n                  'x': _.random(rect.x - rect.width/2, rect.x + rect.width/2)\r\n                  'y': _.random(rect.y - rect.height/2, rect.y + rect.height/2)\r\n                }\r\n                'margin': clusters[decoration.cluster].margin\r\n              }\r\n                continue\r\n\r\n  addThang: (thang) ->\r\n    if @falseCount > 100\r\n      console.log 'infinite loop', thang\r\n      @falseCount = 0\r\n      return true\r\n    for existingThang in @thangs\r\n      if existingThang.margin is -1 or thang.margin is -1\r\n        continue\r\n      if Math.abs(existingThang.pos.x - thang.pos.x) < thang.margin + existingThang.margin and Math.abs(existingThang.pos.y - thang.pos.y) < thang.margin + existingThang.margin\r\n        @falseCount++\r\n        return false\r\n    @thangs.push thang\r\n    true\r\n\r\n  addRect: (rect) ->\r\n    if @falseCount > 100\r\n      console.log 'infinite loop', rect\r\n      @falseCount = 0\r\n      return true\r\n    for existingRect in @rects\r\n      if Math.abs(existingRect.x - rect.x) <= rect.width/2 + existingRect.width/2 and Math.abs(existingRect.y - rect.y) <= rect.height/2 + existingRect.height/2\r\n        @falseCount++\r\n        return false\r\n    @rects.push rect\r\n    true\r\n\r\n  getRandomThang: (thangList) ->\r\n    return thangList[_.random(0, thangList.length-1)]\r\n\r\n  onHidden: ->\r\n    location.reload() if @reloadOnClose\r\n"]}