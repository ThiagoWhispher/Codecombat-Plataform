{"version":3,"sources":["app/views/editor/level/modals/LoadBranchModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/modals/LoadBranchModal.js","sourcesContent":["ModalView = require 'views/core/ModalView'\r\ntemplate = require 'templates/editor/level/modal/load-branch-modal'\r\nDeltaView = require 'views/editor/DeltaView'\r\ndeltasLib = require 'core/deltas'\r\nBranch = require 'models/Branch'\r\nBranches = require 'collections/Branches'\r\nLevelComponents = require 'collections/LevelComponents'\r\nLevelSystems = require 'collections/LevelSystems'\r\n\r\n\r\nmodule.exports = class LoadBranchModal extends ModalView\r\n  id: 'load-branch-modal'\r\n  template: template\r\n  modalWidthPercent: 99\r\n  events:\r\n    'click #load-branch-btn': 'onClickLoadBranchButton'\r\n    'click #unstash-branch-btn': 'onClickUnstashBranchButton'\r\n    'click #branches-list-group .list-group-item': 'onClickBranch'\r\n    'click .delete-branch-btn': 'onClickDeleteBranchButton'\r\n    \r\n\r\n  initialize: ({ @components, @systems }) ->\r\n    # Should be given all loaded, up to date systems and components with existing changes\r\n    \r\n    # Load existing branches\r\n    @branches = new Branches()\r\n    @branches.fetch({url: '/db/branches'})\r\n    .then(=>\r\n      @selectedBranch = @branches.first()\r\n      \r\n      # Load any patch target we don't already have\r\n      fetches = []\r\n      for branch in @branches.models\r\n        for patch in branch.get('patches')\r\n          collection = if patch.target.collection is 'level_component' then @components else @systems\r\n          model = collection.get(patch.target.id)\r\n          if not model\r\n            model = new collection.model({ _id: patch.target.id })\r\n            fetches.push(model.fetch())\r\n            model.once 'sync', -> @markToRevert()\r\n            collection.add(model)\r\n      return $.when(fetches...)\r\n      \r\n    ).then(=>\r\n\r\n      # Go through each branch and figure out what their patch statuses are\r\n      for branch in @branches.models\r\n        for patch in branch.get('patches')\r\n          patch.id = _.uniqueId()\r\n          collection = if patch.target.collection is 'level_component' then @components else @systems\r\n\r\n          # make a model that represents what the patch represented when it was made\r\n          originalChange = collection.get(patch.target.id).clone(false)\r\n          originalChange.markToRevert()\r\n          originalChange.applyDelta(patch.delta)\r\n          \r\n          # make a model that represents what will change locally\r\n          currentModel = collection.find (model) -> _.all([\r\n            model.get('original') is patch.target.original,\r\n            model.get('version').isLatestMajor\r\n          ])\r\n          postLoadChange = currentModel.clone()\r\n          postLoadChange.markToRevert() # includes whatever local changes we have now\r\n          \r\n          toApply = currentModel.clone(false)\r\n          applied = toApply.applyDelta(patch.delta)\r\n          if applied\r\n            postLoadChange.set(toApply.attributes)\r\n            for key in postLoadChange.keys()\r\n              if not toApply.has(key)\r\n                postLoadChange.unset(key)\r\n            # now postLoadChange has current state -> future state\r\n          \r\n          # properties used in rendering and loading\r\n          _.assign(patch, {\r\n            # the original target with patch applied\r\n            originalChange\r\n            \r\n            # the current target with local changes removed and patch applied (if successful)\r\n            # Whether the patch was applied or not, this is how the model will be after loading\r\n            postLoadChange\r\n            \r\n            # whether applying the patch to the current target was successful\r\n            applied\r\n            \r\n            # so we can label this part of the patch as overwriting local changes\r\n            currentModelHasLocalChanges: currentModel.hasLocalChanges()\r\n            \r\n            # so we can label changes being applied to a newer version of the model\r\n            modelHasChangedSincePatchCreated: originalChange.id isnt currentModel.id\r\n            \r\n            # the target model as it was passed into the modal, unchanged\r\n            currentModel\r\n          })\r\n    ).then(=> @render())\r\n    \r\n  afterRender: ->\r\n    super()\r\n    @renderSelectedBranch()\r\n\r\n  insertDeltaView: (model, changeEl, headModel) ->\r\n    try\r\n      deltaView = new DeltaView({model: model, headModel, skipPaths: deltasLib.DOC_SKIP_PATHS})\r\n      @insertSubView(deltaView, $(changeEl))\r\n      return deltaView\r\n    catch e\r\n      console.error 'Couldn\\'t create delta view:', e\r\n        \r\n  renderSelectedBranch: ->\r\n    # insert delta subviews for the selected branch, including the 'headComponent' which shows\r\n    # what, if any, conflicts the existing branch has with the client's local changes\r\n    \r\n    @removeSubView(view) for view in @selectedBranchDeltaViews if @selectedBranchDeltaViews\r\n    @selectedBranchDeltaViews = []\r\n    @renderSelectors('#selected-branch-col')\r\n    return unless @selectedBranch\r\n    for patch in @selectedBranch.get('patches')\r\n      originalChangeEl = @$(\".changes-stub[data-patch-id='#{patch.id}'][data-prop='original-change']\")\r\n      @insertDeltaView(patch.originalChange, originalChangeEl)\r\n      postLoadChangeEl = @$(\".changes-stub[data-patch-id='#{patch.id}'][data-prop='post-load-change']\")\r\n      @insertDeltaView(patch.postLoadChange, postLoadChangeEl)\r\n    \r\n  onClickBranch: (e) ->\r\n    $(e.currentTarget).closest('.list-group').find('.active').removeClass('active')\r\n    $(e.currentTarget).addClass('active')\r\n    branchCid = $(e.currentTarget).data('branch-cid')\r\n    @selectedBranch = @branches.get(branchCid)\r\n    @renderSelectedBranch()\r\n\r\n  onClickUnstashBranchButton: (e) ->\r\n    @loadBranch({deleteBranch: true})\r\n\r\n  onClickLoadBranchButton: (e) ->\r\n    @loadBranch({deleteBranch: false})\r\n\r\n  loadBranch: ({deleteBranch}) ->\r\n    selectedBranch = @$('#branches-list-group .active')\r\n    branchCid = selectedBranch.data('branch-cid')\r\n    branch = @branches.get(branchCid)\r\n    for patch in branch.get('patches')\r\n      continue if not patch.applied\r\n      { currentModel, postLoadChange } = patch\r\n      \r\n      currentModel.set(postLoadChange.attributes)\r\n      for key in currentModel.keys()\r\n        if not postLoadChange.has(key)\r\n          currentModel.unset(key)\r\n    if deleteBranch\r\n      Promise.resolve(branch.destroy()).catch((e) => noty text: 'Failed to delete branch after unstashing', layout: 'topCenter', type: 'error', killer: false)\r\n    @hide()\r\n\r\n  onClickDeleteBranchButton: (e) ->\r\n    e.preventDefault()\r\n    e.stopImmediatePropagation()\r\n    branchCid = $(e.currentTarget).closest('.list-group-item').data('branch-cid')\r\n    branch = @branches.get(branchCid)\r\n    return unless confirm('Really delete this branch?')\r\n    branch.destroy()\r\n    @branches.remove(branch)\r\n    if branch is @selectedBranch\r\n      @selectedBranch = null\r\n      @renderSelectedBranch()\r\n    $(e.currentTarget).closest('.list-group-item').remove()\r\n"]}