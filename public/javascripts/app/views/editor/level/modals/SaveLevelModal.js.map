{"version":3,"sources":["app/views/editor/level/modals/SaveLevelModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/modals/SaveLevelModal.js","sourcesContent":["SaveVersionModal = require 'views/editor/modal/SaveVersionModal'\r\ntemplate = require 'templates/editor/level/save-level-modal'\r\nforms = require 'core/forms'\r\nLevelComponent = require 'models/LevelComponent'\r\nLevelSystem = require 'models/LevelSystem'\r\nDeltaView = require 'views/editor/DeltaView'\r\nPatchModal = require 'views/editor/PatchModal'\r\ndeltasLib = require 'core/deltas'\r\nVerifierTest = require 'views/editor/verifier/VerifierTest'\r\nSuperModel = require 'models/SuperModel'\r\n\r\nmodule.exports = class SaveLevelModal extends SaveVersionModal\r\n  template: template\r\n  instant: false\r\n  modalWidthPercent: 60\r\n  plain: true\r\n\r\n  events:\r\n    'click #save-version-button': 'commitLevel'\r\n    'submit form': 'commitLevel'\r\n\r\n  constructor: (options) ->\r\n    super options\r\n    @level = options.level\r\n    @buildTime = options.buildTime\r\n\r\n  getRenderData: (context={}) ->\r\n    context = super(context)\r\n    context.level = @level\r\n    context.levelNeedsSave = @level.hasLocalChanges()\r\n    context.modifiedComponents = _.filter @supermodel.getModels(LevelComponent), @shouldSaveEntity\r\n    context.modifiedSystems = _.filter @supermodel.getModels(LevelSystem), @shouldSaveEntity\r\n    @hasChanges = (context.levelNeedsSave or context.modifiedComponents.length or context.modifiedSystems.length)\r\n    @lastContext = context\r\n    context\r\n\r\n  afterRender: ->\r\n    super(false)\r\n    changeEls = @$el.find('.changes-stub')\r\n    models = if @lastContext.levelNeedsSave then [@level] else []\r\n    models = models.concat @lastContext.modifiedComponents\r\n    models = models.concat @lastContext.modifiedSystems\r\n    models = (m for m in models when m.hasWriteAccess())\r\n    for changeEl, i in changeEls\r\n      model = models[i]\r\n      try\r\n        deltaView = new DeltaView({model: model, skipPaths: deltasLib.DOC_SKIP_PATHS})\r\n        @insertSubView(deltaView, $(changeEl))\r\n      catch e\r\n        console.error 'Couldn\\'t create delta view:', e\r\n    @verify() if me.isAdmin()\r\n\r\n  shouldSaveEntity: (m) ->\r\n    return false unless m.hasWriteAccess()\r\n    if m.get('system') is 'ai' and m.get('name') is 'Jitters' and m.type() is 'LevelComponent'\r\n      # Trying to debug the occasional phantom all-Components-must-be-saved bug\r\n      console.log \"Should we save\", m.get('system'), m.get('name'), m, \"? localChanges:\", m.hasLocalChanges(), \"version:\", m.get('version'), 'isPublished:', m.isPublished(), 'collection:', m.collection\r\n      return false\r\n    return true if m.hasLocalChanges()\r\n    console.error \"Trying to check major version of #{m.type()} #{m.get('name')}, but it doesn't have a version:\", m unless m.get('version')\r\n    return true if (m.get('version').major is 0 and m.get('version').minor is 0) or not m.isPublished() and not m.collection\r\n    # Sometimes we have two versions: one in a search collection and one with a URL. We only save changes to the latter.\r\n    false\r\n\r\n  commitLevel: (e) ->\r\n    e.preventDefault()\r\n    @level.set 'buildTime', @buildTime\r\n    modelsToSave = []\r\n    formsToSave = []\r\n    for form in @$el.find('form')\r\n      # Level form is first, then LevelComponents' forms, then LevelSystems' forms\r\n      fields = {}\r\n      for field in $(form).serializeArray()\r\n        fields[field.name] = if field.value is 'on' then true else field.value\r\n      isLevelForm = $(form).attr('id') is 'save-level-form'\r\n      if isLevelForm\r\n        model = @level\r\n      else\r\n        [kind, klass] = if $(form).hasClass 'component-form' then ['component', LevelComponent] else ['system', LevelSystem]\r\n        model = @supermodel.getModelByOriginalAndMajorVersion klass, fields[\"#{kind}-original\"], parseInt(fields[\"#{kind}-parent-major-version\"], 10)\r\n        console.log 'Couldn\\'t find model for', kind, fields, 'from', @supermodel.models unless model\r\n      newModel = if fields.major then model.cloneNewMajorVersion() else model.cloneNewMinorVersion()\r\n      newModel.set 'commitMessage', fields['commit-message']\r\n      modelsToSave.push newModel\r\n      if isLevelForm\r\n        @level = newModel\r\n        if fields['publish'] and not @level.isPublished()\r\n          @level.publish()\r\n      else if @level.isPublished() and not newModel.isPublished()\r\n        newModel.publish()  # Publish any LevelComponents that weren't published yet\r\n      formsToSave.push form\r\n\r\n    for model in modelsToSave\r\n      if errors = model.getValidationErrors()\r\n        messages = (\"\\t #{error.dataPath}: #{error.message}\" for error in errors)\r\n        messages = messages.join('<br />')\r\n        @$el.find('#errors-wrapper .errors').html(messages)\r\n        @$el.find('#errors-wrapper').removeClass('hide')\r\n        return\r\n\r\n    @showLoading()\r\n    tuples = _.zip(modelsToSave, formsToSave)\r\n    for [newModel, form] in tuples\r\n      newModel.updateI18NCoverage() if newModel.get('i18nCoverage')\r\n      res = newModel.save(null, {type: 'POST'})  # Override PUT so we can trigger postNewVersion logic\r\n      do (newModel, form) =>\r\n        res.error =>\r\n          @hideLoading()\r\n          console.log 'Got errors:', JSON.parse(res.responseText)\r\n          forms.applyErrorsToForm($(form), JSON.parse(res.responseText))\r\n        res.success =>\r\n          modelsToSave = _.without modelsToSave, newModel\r\n          oldModel = _.find @supermodel.models, (m) -> m.get('original') is newModel.get('original')\r\n          oldModel.clearBackup()  # Otherwise looking at old versions is confusing.\r\n          unless modelsToSave.length\r\n            url = \"/editor/level/#{@level.get('slug') or @level.id}\"\r\n            document.location.href = url\r\n            @hide()  # This will destroy everything, so do it last\r\n\r\n  verify: ->\r\n    return @$('#verifier-stub').hide() unless (solutions = @level.getSolutions()) and solutions.length\r\n    @running = @problems = @failed = @passedExceptFrames = @passed = 0\r\n    @waiting = solutions.length\r\n    @renderSelectors '#verifier-tests'\r\n    for solution in solutions\r\n      childSupermodel = new SuperModel()\r\n      childSupermodel.models = _.clone @supermodel.models\r\n      childSupermodel.collections = _.clone @supermodel.collections\r\n      test = new VerifierTest @level.get('slug'), @onVerifierTestUpate, childSupermodel, solution.language, {devMode: true}\r\n\r\n  onVerifierTestUpate: (e) =>\r\n    return if @destroyed\r\n    if e.state is 'running'\r\n      --@waiting\r\n      ++@running\r\n    else if e.state in ['complete', 'error', 'no-solution']\r\n      --@running\r\n      if e.state is 'complete'\r\n        if e.test.isSuccessful true\r\n          ++@passed\r\n        else if e.test.isSuccessful false\r\n          ++@passedExceptFrames\r\n        else\r\n          ++@failed\r\n      else if e.state is 'no-solution'\r\n        console.warn 'Solution problem for', e.test.language\r\n        ++@problems\r\n      else\r\n        ++@problems\r\n    @renderSelectors '#verifier-tests'\r\n"]}