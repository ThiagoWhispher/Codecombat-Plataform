{"version":3,"sources":["app/views/editor/level/modals/SaveBranchModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/modals/SaveBranchModal.js","sourcesContent":["ModalView = require 'views/core/ModalView'\r\ntemplate = require 'templates/editor/level/modal/save-branch-modal'\r\nDeltaView = require 'views/editor/DeltaView'\r\ndeltasLib = require 'core/deltas'\r\nBranch = require 'models/Branch'\r\nBranches = require 'collections/Branches'\r\nLevelComponents = require 'collections/LevelComponents'\r\nLevelSystems = require 'collections/LevelSystems'\r\n\r\n\r\nmodule.exports = class SaveBranchModal extends ModalView\r\n  id: 'save-branch-modal'\r\n  template: template\r\n  modalWidthPercent: 99\r\n  events:\r\n    'click #save-branch-btn': 'onClickSaveBranchButton'\r\n    'click #branches-list-group .list-group-item': 'onClickBranch'\r\n    'click .delete-branch-btn': 'onClickDeleteBranchButton'\r\n    'click #stash-branch-btn': 'onClickStashBranchButton'\r\n\r\n  initialize: ({ @components, @systems }) ->\r\n    # Should be given all loaded, up to date systems and components with existing changes\r\n    \r\n    # Create a list of components and systems we'll be saving a branch for\r\n    @componentsWithChanges = new LevelComponents(@components.filter((c) -> c.hasLocalChanges()))\r\n    @systemsWithChanges = new LevelSystems(@systems.filter((c) -> c.hasLocalChanges()))\r\n    \r\n    # Load existing branches\r\n    @branches = new Branches()\r\n    @branches.fetch({url: '/db/branches'})\r\n    .then(=>\r\n      \r\n      # Load any patch target we don't already have\r\n      fetches = []\r\n      for branch in @branches.models\r\n        for patch in branch.get('patches') or []\r\n          collection = if patch.target.collection is 'level_component' then @components else @systems\r\n          model = collection.get(patch.target.id)\r\n          if not model\r\n            model = new collection.model({ _id: patch.target.id })\r\n            fetches.push(model.fetch())\r\n            model.once 'sync', -> @markToRevert()\r\n            collection.add(model)\r\n      return $.when(fetches...)\r\n      \r\n    ).then(=>\r\n      \r\n      # Go through each branch and make clones of patch targets, with patches applied, so we can show the deltas\r\n      for branch in @branches.models\r\n        branch.components = new Backbone.Collection()\r\n        branch.systems = new Backbone.Collection()\r\n        for patch in branch.get('patches') or []\r\n          patch.id = _.uniqueId()\r\n          if patch.target.collection is 'level_component'\r\n            allModels = @components\r\n            changedModels = branch.components\r\n          else\r\n            allModels = @systems\r\n            changedModels = branch.systems\r\n          model = allModels.get(patch.target.id).clone(false)\r\n          model.markToRevert()\r\n          model.applyDelta(patch.delta)\r\n          changedModels.add(model)\r\n      @selectedBranch = @branches.first()\r\n      @render()\r\n    )\r\n\r\n  afterRender: ->\r\n    super()\r\n    @renderSelectedBranch()\r\n    \r\n    # insert all the Delta views for the systems/components which will form the branch\r\n    changeEls = @$el.find('.component-changes-stub')\r\n    for changeEl in changeEls\r\n      componentId = $(changeEl).data('component-id')\r\n      component = @componentsWithChanges.find((c) -> c.id is componentId)\r\n      @insertDeltaView(component, changeEl)\r\n\r\n    changeEls = @$el.find('.system-changes-stub')\r\n    for changeEl in changeEls\r\n      systemId = $(changeEl).data('system-id')\r\n      system = @systemsWithChanges.find((c) -> c.id is systemId)\r\n      @insertDeltaView(system, changeEl)\r\n      \r\n  insertDeltaView: (model, changeEl, headModel) ->\r\n    try\r\n      deltaView = new DeltaView({model: model, headModel, skipPaths: deltasLib.DOC_SKIP_PATHS})\r\n      @insertSubView(deltaView, $(changeEl))\r\n      return deltaView\r\n    catch e\r\n      console.error 'Couldn\\'t create delta view:', e\r\n        \r\n  renderSelectedBranch: ->\r\n    # insert delta subviews for the selected branch, including the 'headComponent' which shows\r\n    # what, if any, conflicts the existing branch has with the client's local changes\r\n    \r\n    @removeSubView(view) for view in @selectedBranchDeltaViews if @selectedBranchDeltaViews\r\n    @selectedBranchDeltaViews = []\r\n    @renderSelectors('#selected-branch-col')\r\n    changeEls = @$el.find('#selected-branch-col .component-changes-stub')\r\n    for changeEl in changeEls\r\n      componentId = $(changeEl).data('component-id')\r\n      component = @selectedBranch.components.get(componentId)\r\n      targetComponent = @components.find((c) -> c.get('original') is component.get('original') and c.get('version').isLatestMajor)\r\n      preBranchSave = component.clone()\r\n      preBranchSave.markToRevert()\r\n      componentDiff = targetComponent.clone()\r\n      preBranchSave.set(componentDiff.attributes)\r\n      @selectedBranchDeltaViews.push(@insertDeltaView(preBranchSave, changeEl))\r\n\r\n    changeEls = @$el.find('#selected-branch-col .system-changes-stub')\r\n    for changeEl in changeEls\r\n      systemId = $(changeEl).data('system-id')\r\n      system = @selectedBranch.systems.get(systemId)\r\n      targetSystem = @systems.find((c) -> c.get('original') is system.get('original') and c.get('version').isLatestMajor)\r\n      preBranchSave = system.clone()\r\n      preBranchSave.markToRevert()\r\n      systemDiff = targetSystem.clone()\r\n      preBranchSave.set(systemDiff.attributes)\r\n      @selectedBranchDeltaViews.push(@insertDeltaView(preBranchSave, changeEl))\r\n\r\n  onClickBranch: (e) ->\r\n    $(e.currentTarget).closest('.list-group').find('.active').removeClass('active')\r\n    $(e.currentTarget).addClass('active')\r\n    branchCid = $(e.currentTarget).data('branch-cid')\r\n    @selectedBranch = if branchCid then @branches.get(branchCid) else null\r\n    @renderSelectedBranch()\r\n\r\n  onClickStashBranchButton: (e) ->\r\n    @saveBranch(e, {deleteSavedChanges: true})\r\n\r\n  onClickSaveBranchButton: (e) ->\r\n    @saveBranch(e, {deleteSavedChanges: false})\r\n\r\n  saveBranch: (e, {deleteSavedChanges}) ->\r\n    if @selectedBranch\r\n      branch = @selectedBranch\r\n    else\r\n      name = @$('#new-branch-name-input').val()\r\n      if not name\r\n        return noty text: 'Name required', layout: 'topCenter', type: 'error', killer: false\r\n      slug = _.string.slugify(name)\r\n      if @branches.findWhere({slug})\r\n        return noty text: 'Name taken', layout: 'topCenter', type: 'error', killer: false\r\n      branch = new Branch({name})\r\n    \r\n    patches = []\r\n    toRevert = []\r\n    selectedComponents = _.map(@$('.component-checkbox:checked'), (checkbox) => @componentsWithChanges.get($(checkbox).data('component-id')))\r\n    for component in selectedComponents\r\n      patches.push(component.makePatch().toJSON())\r\n      toRevert.push(component)\r\n    \r\n    selectedSystems = _.map(@$('.system-checkbox:checked'), (checkbox) => @systemsWithChanges.get($(checkbox).data('system-id')))\r\n    for system in selectedSystems\r\n      patches.push(system.makePatch().toJSON())\r\n      toRevert.push(system)\r\n    branch.set({patches})\r\n    jqxhr = branch.save()\r\n    button = $(e.currentTarget)\r\n    if not jqxhr\r\n      return button.text('Save Failed (validation error)')\r\n      \r\n    button.attr('disabled', true).text('Saving...')\r\n    Promise.resolve(jqxhr)\r\n    .then =>\r\n      if deleteSavedChanges\r\n        model.revert() for model in toRevert\r\n      @hide()\r\n    .catch (e) =>\r\n      button.attr('disabled', false).text('Save Failed (network/runtime error)')\r\n      throw e\r\n\r\n  onClickDeleteBranchButton: (e) ->\r\n    e.preventDefault()\r\n    e.stopImmediatePropagation()\r\n    branchCid = $(e.currentTarget).closest('.list-group-item').data('branch-cid')\r\n    branch = @branches.get(branchCid)\r\n    return unless confirm('Really delete this branch?')\r\n    branch.destroy()\r\n    @branches.remove(branch)\r\n    if branch is @selectedBranch\r\n      @selectedBranch = null\r\n      @renderSelectedBranch()\r\n    $(e.currentTarget).closest('.list-group-item').remove()\r\n"]}