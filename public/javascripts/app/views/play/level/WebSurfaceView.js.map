{"version":3,"sources":["app/templates/play/level/web-surface-view.jade","app/views/play/level/WebSurfaceView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/play/level/WebSurfaceView.js","sourcesContent":["var __templateData = function anonymous(locals\n/**/) {\nvar buf = [];\nvar locals_ = (locals || {}),fullUnsafeContentHostname = locals_.fullUnsafeContentHostname;buf.push(\"<iframe\" + (jade.attrs({ 'src':(\"//\" + fullUnsafeContentHostname + \"/web-dev-iframe.html\") }, {\"src\":true})) + \"></iframe>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","CocoView = require 'views/core/CocoView'\r\ntemplate = require 'templates/play/level/web-surface-view'\r\nHtmlExtractor = require 'lib/HtmlExtractor'\r\n\r\nmodule.exports = class WebSurfaceView extends CocoView\r\n  id: 'web-surface-view'\r\n  template: template\r\n\r\n  subscriptions:\r\n    'tome:html-updated': 'onHTMLUpdated'\r\n    'web-dev:hover-line': 'onHoverLine'\r\n    'web-dev:stop-hovering-line': 'onStopHoveringLine'\r\n\r\n  initialize: (options) ->\r\n    @goals = (goal for goal in options.goalManager?.goals ? [] when goal.html)\r\n    # Consider https://www.npmjs.com/package/css-select to do this on virtualDom instead of in iframe on concreteDOM\r\n    super(options)\r\n\r\n  getRenderData: ->\r\n    _.merge super(), { fullUnsafeContentHostname: serverConfig.fullUnsafeContentHostname }\r\n\r\n  afterRender: ->\r\n    super()\r\n    @iframe = @$('iframe')[0]\r\n    $(@iframe).on 'load', (e) =>\r\n      window.addEventListener 'message', @onIframeMessage\r\n      @iframeLoaded = true\r\n      @onIframeLoaded?()\r\n      @onIframeLoaded = null\r\n\r\n  # TODO: make clicking Run actually trigger a 'create' update here (for resetting scripts)\r\n\r\n  onHTMLUpdated: (e) ->\r\n    unless @iframeLoaded\r\n      return @onIframeLoaded = => @onHTMLUpdated e unless @destroyed\r\n\r\n    # TODO: pull out the actual scripts, styles, and body/elements they are doing so we can merge them with our initial structure on the other side\r\n    { @virtualDom, styles, scripts } = HtmlExtractor.extractStylesAndScripts(e.html)\r\n    @cssSelectors = HtmlExtractor.extractCssSelectors(styles, scripts)\r\n    # TODO: Do something better than this hack for detecting which lines are CSS, which are HTML\r\n    @rawCssLines = HtmlExtractor.extractCssLines(styles)\r\n    @rawJQueryLines = HtmlExtractor.extractJQueryLines(scripts)\r\n\r\n    messageType = if e.create or not @virtualDom then 'create' else 'update'\r\n    @iframe.contentWindow.postMessage {type: messageType, dom: @virtualDom, styles, scripts, goals: @goals}, '*'\r\n\r\n  combineNodes: (type, nodes) ->\r\n    if _.any(nodes, (node) -> node.type isnt type)\r\n      throw new Error(\"Can't combine nodes of different types. (Got #{nodes.map (n) -> n.type})\")\r\n    children = nodes.map((n) -> n.children).reduce(((a,b) -> a.concat(b)), [])\r\n    if _.isEmpty(children)\r\n      deku.element(type, {})\r\n    else\r\n      deku.element(type, {}, children)\r\n\r\n  onStopHoveringLine: ->\r\n    @iframe.contentWindow.postMessage({ type: 'highlight-css-selector', selector: '' }, '*')\r\n\r\n  onHoverLine: ({ row, line }) ->\r\n    if _.contains(@rawCssLines, line)\r\n      # They're hovering over lines of CSS, not HTML\r\n      trimLine = (line.match(/\\s(.*)\\s*{/)?[1] or line).trim().split(/ +/).join(' ')\r\n      hoveredCssSelector = _.find @cssSelectors, (selector) ->\r\n        trimLine is selector\r\n    else if _.contains(@rawJQueryLines, line)\r\n      # It's a jQuery call\r\n      trimLine = (line.match(/\\$\\(\\s*['\"](.*)['\"]\\s*\\)/)?[1] or '').trim()\r\n      hoveredCssSelector = _.find @cssSelectors, (selector) ->\r\n        trimLine is selector\r\n    else\r\n      # They're not hovering over a line with a selector, so don't highlight anything\r\n      hoveredCssSelector = ''\r\n    @iframe.contentWindow.postMessage({ type: 'highlight-css-selector', selector: hoveredCssSelector }, '*')\r\n    null\r\n\r\n  onIframeMessage: (event) =>\r\n    origin = event.origin or event.originalEvent.origin\r\n    unless new RegExp(\"^https?:\\/\\/#{serverConfig.fullUnsafeContentHostname}$\").test origin\r\n      return console.log 'Ignoring message from bad origin:', origin\r\n    unless event.source is @iframe.contentWindow\r\n      return console.log 'Ignoring message from somewhere other than our iframe:', event.source\r\n    switch event.data.type\r\n      when 'goals-updated'\r\n        Backbone.Mediator.publish 'god:new-html-goal-states', goalStates: event.data.goalStates, overallStatus: event.data.overallStatus\r\n      when 'error'\r\n        # NOTE: The line number in this is relative to the script tag, not the user code. The offset is added in SpellView.\r\n        Backbone.Mediator.publish 'web-dev:error', _.pick(event.data, ['message', 'line', 'column', 'url'])\r\n      else\r\n        console.warn 'Unknown message type', event.data.type, 'for message', event, 'from origin', origin\r\n\r\n  destroy: ->\r\n    window.removeEventListener 'message', @onIframeMessage\r\n    super()\r\n"]}