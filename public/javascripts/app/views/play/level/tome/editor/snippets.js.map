{"version":3,"sources":["app/views/play/level/tome/editor/snippets.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/play/level/tome/editor/snippets.js","sourcesContent":["###\r\n  This is essentially a copy from the snippet completer from Ace's ext/language-tools.js\r\n  However this completer assigns a score to the snippets to ensure that snippet suggestions are\r\n  treated better in the autocomplete than local values\r\n###\r\n\r\n{score} = fuzzaldrin\r\n#score = (a, b) -> new Fuzziac(a).score b\r\nlineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g\r\nidentifierRegex = /[\\.a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/\r\nFuzziac = require './fuzziac' # https://github.com/stollcri/fuzziac.js\r\nace = require 'ace'\r\n\r\nmodule.exports = (SnippetManager, autoLineEndings) ->\r\n  {Range} = ace.require 'ace/range'\r\n  util = ace.require 'ace/autocomplete/util'\r\n  identifierRegexps: [identifierRegex]\r\n\r\n  # Cleanup surrounding text\r\n  baseInsertSnippet = SnippetManager.insertSnippet\r\n  SnippetManager.insertSnippet = (editor, snippet) ->\r\n    # Remove dangling snippet prefixes\r\n    # Examples:\r\n    #   \"self self.moveUp()\"\r\n    #   \"elf.self.moveUp()\"\r\n    #   \"ssefl.moveUp()\"\r\n    #   \"slef.moveUp()\"\r\n    # TODO: This function is a mess\r\n    # TODO: Can some of this nonsense be done upstream in scrubSnippet?\r\n    cursor = editor.getCursorPosition()\r\n    line = editor.session.getLine cursor.row\r\n    if cursor.column > 0\r\n      prevWord = util.retrievePrecedingIdentifier line, cursor.column - 1, identifierRegex\r\n      if prevWord.length > 0\r\n        # Remove previous word if it's at the beginning of the snippet\r\n        prevWordIndex = snippet.toLowerCase().indexOf prevWord.toLowerCase()\r\n        if prevWordIndex is 0\r\n          range = new Range cursor.row, cursor.column - 1 - prevWord.length, cursor.row, cursor.column\r\n          editor.session.remove range\r\n        else\r\n          # console.log \"Snippets cursor.column=#{cursor.column} snippet='#{snippet}' line='#{line}' prevWord='#{prevWord}'\"\r\n          # console.log \"Snippets prevWordIndex=#{prevWordIndex}\"\r\n\r\n          # Lookup original completion\r\n          # TODO: Can we identify correct completer somehow?\r\n          for completer in editor.completers\r\n            if completer.completions?\r\n              for completion in completer.completions\r\n                if completion.snippet is snippet\r\n                  originalCompletion = completion\r\n                  break\r\n              break if originalCompletion\r\n\r\n          if originalCompletion?\r\n            # console.log 'Snippets original completion', originalCompletion\r\n            # Get original snippet prefix (accounting for extra '\\n' and possibly autoLineEndings at end)\r\n            lang = editor.session.getMode()?.$id?.substr 'ace/mode/'.length\r\n            # console.log 'Snippets lang', lang, autoLineEndings[lang]?.length\r\n            extraEndLength = 1\r\n            extraEndLength += autoLineEndings[lang].length if autoLineEndings[lang]?\r\n            if snippetIndex = originalCompletion.content.indexOf snippet.substr(0, snippet.length - extraEndLength)\r\n              originalPrefix = originalCompletion.content.substring 0, snippetIndex\r\n            else\r\n              originalPrefix = ''\r\n            snippetStart = cursor.column - originalPrefix.length\r\n            # console.log \"Snippets originalPrefix='#{originalPrefix}' snippetStart=#{snippetStart}\"\r\n\r\n            if snippetStart > 0 and snippetStart <= line.length\r\n              extraIndex = snippetStart - 1\r\n              # console.log \"Snippets prev char='#{line[extraIndex]}'\"\r\n\r\n              if line[extraIndex] is '.'\r\n                # Fuzzy string match previous word before '.', and remove if a match to beginning of snippet\r\n                originalObject = originalCompletion.content.substring(0, originalCompletion.content.indexOf('.'))\r\n                prevObjectIndex = extraIndex - 1\r\n                # console.log \"Snippets prevObjectIndex=#{prevObjectIndex}\"\r\n                if prevObjectIndex >= 0 and /\\w/.test(line[prevObjectIndex])\r\n                  prevObjectIndex-- while prevObjectIndex >= 0 and /\\w/.test(line[prevObjectIndex])\r\n                  prevObjectIndex++ if prevObjectIndex < 0 or not /\\w/.test(line[prevObjectIndex])\r\n                  # console.log \"Snippets prevObjectIndex=#{prevObjectIndex} extraIndex=#{extraIndex}\"\r\n                  prevObject = line.substring prevObjectIndex, extraIndex\r\n\r\n                  #TODO: We use to use fuzziac here, but we forgot why.  Using\r\n                  # fuzzaldren for now.\r\n                  #fuzzer = {score: (n) -> score originalObject, n}\r\n                  fuzzer = new Fuzziac originalObject\r\n                  finalScore = 0\r\n                  if fuzzer\r\n                    finalScore = fuzzer.score prevObject\r\n\r\n                  # console.log \"Snippets originalObject='#{originalObject}' prevObject='#{prevObject}'\", finalScore\r\n                  if finalScore > 0.5\r\n                    range = new Range cursor.row, prevObjectIndex, cursor.row, snippetStart\r\n                    editor.session.remove range\r\n                  else if /^[^.]+\\./.test snippet\r\n                    # Remove the first part of the snippet, and use whats there.\r\n                    snippet = snippet.replace /^[^.]+\\./, ''\r\n\r\n              else if /\\w/.test(line[extraIndex])\r\n                # Remove any alphanumeric characters on this line immediately before prefix\r\n                extraIndex-- while extraIndex >= 0 and /\\w/.test(line[extraIndex])\r\n                extraIndex++ if extraIndex < 0 or not /\\w/.test(line[extraIndex])\r\n                range = new Range cursor.row, extraIndex, cursor.row, snippetStart\r\n                editor.session.remove range\r\n\r\n    #Remove anything that looks like an identifier after the completion\r\n    afterIndex = cursor.column\r\n    trailingText = line.substring afterIndex\r\n    match = trailingText.match /^[a-zA-Z_0-9]*(\\(\\s*\\))?/\r\n    afterIndex += match[0].length if match\r\n    afterRange = new Range cursor.row, cursor.column, cursor.row, afterIndex\r\n    editor.session.remove afterRange\r\n\r\n    baseInsertSnippet.call @, editor, snippet\r\n\r\n  getCompletions: (editor, session, pos, prefix, callback) ->\r\n    # console.log \"Snippets getCompletions pos.column=#{pos.column} prefix=#{prefix}\"\r\n    # Completion format:\r\n    # prefix: text that will be replaced by snippet\r\n    # caption: displayed left-justified in popup, and what's being matched\r\n    # snippet: what will be inserted into document\r\n    # score: used to order autocomplete snippet suggestions\r\n    # meta: displayed right-justfied in popup\r\n    lang = session.getMode()?.$id?.substr 'ace/mode/'.length\r\n    line = session.getLine pos.row\r\n    completions = []\r\n\r\n    #If the prefix is a member expression, supress completions\r\n    fullPrefix = getFullIdentifier session, pos\r\n    fullPrefixParts = fullPrefix.split /[.:]/g\r\n    word = getCurrentWord session, pos\r\n\r\n    if fullPrefixParts.length > 2\r\n      @completions = []\r\n      return callback null, completions\r\n\r\n    beginningOfLine = session.getLine(pos.row).substring(0,pos.column - prefix.length)\r\n\r\n    unless (fullPrefixParts.length < 3 and /^(hero|self|this|@)$/.test(fullPrefixParts[0]) ) or /^\\s*$/.test(beginningOfLine)\r\n      # console.log \"DEBUG: autocomplete bailing\", fullPrefixParts, '|', prefix, '|', beginningOfLine, '|', pos.column - prefix.length\r\n      @completions = completions\r\n      return callback null, completions\r\n\r\n    snippetMap = SnippetManager.snippetMap\r\n\r\n    SnippetManager.getActiveScopes(editor).forEach (scope) ->\r\n      snippets = snippetMap[scope] or []\r\n      for s in snippets\r\n        caption  = s.name or s.tabTrigger\r\n        continue unless caption\r\n        [snippet, fuzzScore] = scrubSnippet s.content, caption, line, prefix, pos, lang, autoLineEndings, s.captureReturn\r\n        completions.push\r\n          content: s.content  # Used internally by Snippets, not by ace autocomplete\r\n          caption: caption\r\n          snippet: snippet\r\n          score: fuzzScore * s.importance ? 1.0\r\n          meta: s.meta or (if s.tabTrigger and not s.name then s.tabTrigger + '\\u21E5' else 'snippets')\r\n    , @\r\n\r\n    #If the prefix is a reserved word, only exact prefix snippets match\r\n    keywords = session.getMode()?.$highlightRules?.$keywordList\r\n    if keywords and prefix in keywords\r\n      @completions = _.filter(completions, (x) -> x.caption.indexOf prefix is 0)\r\n      return callback null, @completions\r\n\r\n    # console.log 'Snippets snippet completions', completions\r\n    @completions = completions\r\n    callback null, completions\r\n\r\n  # TODO: This shim doesn't work because our version of ace isn't updated to this change:\r\n  # TODO: https://github.com/ajaxorg/ace/commit/7b01a4273e91985c9177f53d238d6b83fe99dc56\r\n  # TODO: But, if it was we could use this and pass a 'completer: @' property for each completion\r\n  # insertMatch: (editor, data) ->\r\n  #   console.log 'Snippets snippets insertMatch', editor, data\r\n  #   if data.snippet\r\n  #     SnippetManager.insertSnippet editor, data.snippet\r\n  #   else\r\n  #     editor.execCommand \"insertstring\", data.value || data\r\n\r\ngetCurrentWord = (doc, pos) ->\r\n  end = pos.column\r\n  start = end - 1\r\n  text = doc.getLine(pos.row)\r\n  start-- while start >= 0 and not text[start].match /\\s+|[\\.\\@]/\r\n  start++ if start >= 0\r\n  text.substring start, end\r\n\r\ngetFullIdentifier = (doc, pos) ->\r\n  end = pos.column\r\n  start = end - 1\r\n  text = doc.getLine(pos.row)\r\n  start-- while start >= 0 and not text[start].match /\\s+/\r\n  start++ if start >= 0\r\n  text.substring start, end\r\n\r\nscrubSnippet = (snippet, caption, line, input, pos, lang, autoLineEndings, captureReturn) ->\r\n  # console.log \"Snippets snippet=#{snippet} caption=#{caption} line=#{line} input=#{input} pos.column=#{pos.column} lang=#{lang}\"\r\n  fuzzScore = 0.1\r\n  snippetLineBreaks = (snippet.match(lineBreak) || []).length\r\n  # input will be replaced by snippet\r\n  # trim snippet prefix and suffix if already in the document (line)\r\n  if prefixStart = snippet.toLowerCase().indexOf(input.toLowerCase()) > -1\r\n    captionStart = snippet.indexOf caption\r\n\r\n    # Calculate snippet prefixes and suffixes. E.g. full snippet might be: \"self.\" + \"moveLeft\" + \"()\"\r\n    snippetPrefix = snippet.substring 0, captionStart\r\n    snippetSuffix = snippet.substring snippetPrefix.length + caption.length\r\n\r\n    # Calculate line prefixes and suffixes\r\n    # linePrefix: beginning portion of snippet that already exists\r\n    linePrefixIndex = pos.column - input.length - 1\r\n    if linePrefixIndex >= 0 and snippetPrefix.length > 0 and line[linePrefixIndex] is snippetPrefix[snippetPrefix.length - 1]\r\n      snippetPrefixIndex = snippetPrefix.length - 1\r\n      while line[linePrefixIndex] is snippetPrefix[snippetPrefixIndex]\r\n        break if linePrefixIndex is 0 or snippetPrefixIndex is 0\r\n        linePrefixIndex--\r\n        snippetPrefixIndex--\r\n      linePrefix = line.substr linePrefixIndex, pos.column - input.length - linePrefixIndex\r\n    else\r\n      linePrefix = ''\r\n    lineSuffix = line.substr pos.column, snippetSuffix.length - 1 + caption.length - input.length + 1\r\n    lineSuffix = '' if snippet.indexOf(lineSuffix) < 0\r\n\r\n    # TODO: This is broken for attack(find in Python, but seems ok in JavaScript.\r\n\r\n    # Don't eat existing matched parentheses\r\n    # console.log \"Snippets checking parentheses lineSuffix=#{lineSuffix} pos.column=#{pos.column} input.length=#{input.length}, prevChar=#{line[pos.column - input.length - 1]} line.length=#{line.length} nextChar=#{line[pos.column]}\"\r\n    if pos.column - input.length >= 0 and line[pos.column - input.length - 1] is '(' and pos.column < line.length and line[pos.column] is ')' and lineSuffix is ')'\r\n      lineSuffix = ''\r\n\r\n    # Score match before updating snippet\r\n    fuzzScore += score snippet, linePrefix + input + lineSuffix\r\n\r\n    # Update snippet based on surrounding document/line\r\n    snippet = snippet.slice snippetPrefix.length if snippetPrefix.length > 0 and snippetPrefix is linePrefix\r\n    snippet = snippet.slice 0, snippet.length - lineSuffix.length if lineSuffix.length > 0\r\n\r\n    # Append automatic line ending and newline\r\n    # If at end of line\r\n    # And, no parentheses are before snippet. E.g. 'if ('\r\n    # And, line doesn't start with whitespace followed by 'if ' or 'elif '\r\n    # console.log \"Snippets autoLineEndings linePrefixIndex='#{linePrefixIndex}'\"\r\n    if lineSuffix.length is 0 and /^\\s*$/.test line.slice pos.column\r\n      # console.log 'Snippets atLineEnd', pos.column, lineSuffix.length, line.slice(pos.column + lineSuffix.length), line\r\n      toLinePrefix = line.substring 0, linePrefixIndex\r\n      if linePrefixIndex < 0 or linePrefixIndex >= 0 and not /[\\(\\)]/.test(toLinePrefix) and not /^[ \\t]*(?:if\\b|elif\\b)/.test(toLinePrefix)\r\n        snippet += autoLineEndings[lang] if snippetLineBreaks is 0 and autoLineEndings[lang]\r\n        snippet += \"\\n\" if snippetLineBreaks is 0 and not /\\$\\{/.test(snippet)\r\n\r\n        if captureReturn and /^\\s*$/.test(toLinePrefix)\r\n          snippet = captureReturn + linePrefix + snippet\r\n\r\n    # console.log \"Snippets snippetPrefix=#{snippetPrefix} linePrefix=#{linePrefix} snippetSuffix=#{snippetSuffix} lineSuffix=#{lineSuffix} snippet=#{snippet} score=#{fuzzScore}\"\r\n  else\r\n    # Append automatic line ending and newline for simple scenario\r\n    if line.trim() is input\r\n      snippet += autoLineEndings[lang] if snippetLineBreaks is 0 and autoLineEndings[lang]\r\n      snippet += \"\\n\" if snippetLineBreaks is 0 and not /\\$\\{/.test(snippet)\r\n    fuzzScore += score snippet, input\r\n\r\n  startsWith = (string, searchString, position) ->\r\n    position = position or 0\r\n    return string.substr(position, searchString.length) is searchString\r\n\r\n  # Prefixing is twice as good as fuzzy mathing?\r\n  fuzzScore *= 2 if startsWith(caption, input)\r\n\r\n  # All things equal, a shorter snippet is better\r\n  fuzzScore -= caption.length / 500\r\n\r\n  # Exact match is really good.\r\n  fuzzScore = 10 if caption == input\r\n\r\n  [snippet, fuzzScore]\r\n"]}