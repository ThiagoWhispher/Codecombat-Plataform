{"version":3,"sources":["app/views/play/level/tome/editor/autocomplete.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/play/level/tome/editor/autocomplete.js","sourcesContent":["utils = require 'core/utils'\r\nace = require 'ace'\r\n\r\ndefaults =\r\n  autoLineEndings:\r\n    # Mapping ace mode language to line endings to automatically insert\r\n    # E.g. javascript: \";\"\r\n    {}\r\n  basic: true\r\n  snippetsLangDefaults: true\r\n  liveCompletion: true\r\n  language: 'javascript'\r\n  languagePrefixes: 'this.,@,self.'\r\n  completers:\r\n    snippets: true\r\n\r\n\r\n\r\n# TODO: Should we be hooking in completers differently?\r\n# TODO: https://github.com/ajaxorg/ace/blob/f133231df8c1f39156cc230ce31e66103ef4b1e2/lib/ace/ext/language_tools.js#L202\r\n\r\n# TODO: Should show popup if we have a snippet match in Autocomplete.filterCompletions\r\n# TODO: https://github.com/ajaxorg/ace/blob/695e24c41844c17fb2029f073d06338cd73ec33e/lib/ace/autocomplete.js#L449\r\n\r\n# TODO: Create list of manual test cases\r\n\r\nmodule.exports = class Autocomplete\r\n  Tokenizer = ''\r\n  BackgroundTokenizer = ''\r\n\r\n  constructor: (aceEditor, options) ->\r\n    {Tokenizer} = ace.require 'ace/tokenizer'\r\n    {BackgroundTokenizer} = ace.require 'ace/background_tokenizer'\r\n\r\n    @editor = aceEditor\r\n    config = ace.require 'ace/config'\r\n\r\n    options ?= {}\r\n\r\n    defaultsCopy = _.extend {}, defaults\r\n    @options = _.merge defaultsCopy, options\r\n\r\n\r\n    #TODO: Renable option validation if we care\r\n    #validationResult = optionsValidator @options\r\n    #unless validationResult.valid\r\n    #  throw new Error \"Invalid Autocomplete options: \" + JSON.stringify(validationResult.errors, null, 4)\r\n\r\n    ace.config.loadModule 'ace/ext/language_tools', () =>\r\n      @snippetManager = ace.require('ace/snippets').snippetManager\r\n\r\n      # Prevent tabbing a selection trigging an incorrect autocomplete\r\n      # E.g. Given this.moveRight() selecting \".moveRight\" from left to right and hitting tab yields this.this.moveRight()()\r\n      # TODO: Figure out how to intercept this properly\r\n      # TODO: Or, override expandSnippet command\r\n      # TODO: Or, SnippetManager's expandSnippetForSelection\r\n      @snippetManager.expandWithTab = -> return false\r\n\r\n      # Define a background tokenizer that constantly tokenizes the code\r\n      highlightRules = new (@editor.getSession().getMode().HighlightRules)()\r\n      tokenizer = new Tokenizer highlightRules.getRules()\r\n      @bgTokenizer = new BackgroundTokenizer tokenizer, @editor\r\n      aceDocument = @editor.getSession().getDocument()\r\n      @bgTokenizer.setDocument aceDocument\r\n      @bgTokenizer.start(0)\r\n\r\n      @setAceOptions()\r\n      @copyCompleters()\r\n      @activateCompleter()\r\n      @editor.commands.on 'afterExec', @doLiveCompletion\r\n\r\n  setAceOptions: () ->\r\n    aceOptions =\r\n      'enableLiveAutocompletion': @options.liveCompletion\r\n      'enableBasicAutocompletion': @options.basic\r\n      'enableSnippets': @options.completers.snippets\r\n\r\n    @editor.setOptions aceOptions\r\n    @editor.completer?.autoSelect = true\r\n\r\n  copyCompleters: () ->\r\n    @completers = {snippets: {}, text: {}, keywords: {}}\r\n    if @editor.completers?\r\n      [@completers.snippets.comp, @completers.text.comp, @completers.keywords.comp] = @editor.completers\r\n    if @options.completers.snippets\r\n      @completers.snippets = pos: 0\r\n      # Replace the default snippet completer with our custom one\r\n      @completers.snippets.comp = require('./snippets') @snippetManager, @options.autoLineEndings\r\n\r\n  activateCompleter: (comp) ->\r\n    if Array.isArray comp\r\n      @editor.completers = comp\r\n    else if typeof comp is 'string'\r\n      if @completers[comp]? and @editor.completers[@completers[comp].pos] isnt @completers[comp].comp\r\n        @editor.completers.splice(@completers[comp].pos, 0, @completers[comp].comp)\r\n    else\r\n      @editor.completers = []\r\n      for type, comparator of @completers\r\n        if @options.completers[type] is true\r\n          @activateCompleter type\r\n\r\n  addSnippets: (snippets, language) ->\r\n    @options.language = language\r\n    ace.config.loadModule 'ace/ext/language_tools', () =>\r\n      @snippetManager = ace.require('ace/snippets').snippetManager\r\n      snippetModulePath = 'ace/snippets/' + language\r\n      ace.config.loadModule snippetModulePath, (m) =>\r\n        if m?\r\n          @snippetManager.files[language] = m\r\n          @snippetManager.unregister m.snippets if m.snippets?.length > 0\r\n          @snippetManager.unregister @oldSnippets if @oldSnippets?\r\n          m.snippets = if @options.snippetsLangDefaults then @snippetManager.parseSnippetFile m.snippetText else []\r\n          m.snippets.push s for s in snippets\r\n          @snippetManager.register m.snippets\r\n          @oldSnippets = m.snippets\r\n\r\n  setLiveCompletion: (val) ->\r\n    if val is true or val is false\r\n      @options.liveCompletion = val\r\n      @setAceOptions()\r\n\r\n  set: (setting, value) ->\r\n    switch setting\r\n      when 'snippets' or 'completers.snippets'\r\n        return unless typeof value is 'boolean'\r\n        @options.completers.snippets = value\r\n        @setAceOptions()\r\n        @activateCompleter 'snippets'\r\n      when 'basic'\r\n        return unless typeof value is 'boolean'\r\n        @options.basic = value\r\n        @setAceOptions()\r\n        @activateCompleter()\r\n      when 'liveCompletion'\r\n        return unless typeof value is 'boolean'\r\n        @options.liveCompletion = value\r\n        @setAceOptions()\r\n        @activateCompleter()\r\n      when 'language'\r\n        return unless typeof value is 'string'\r\n        @options.language = value\r\n        @setAceOptions()\r\n        @activateCompleter()\r\n      when 'completers.keywords'\r\n        return unless typeof value is 'boolean'\r\n        @options.completers.keywords = value\r\n        @activateCompleter()\r\n      when 'completers.text'\r\n        return unless typeof value is 'boolean'\r\n        @options.completers.text = value\r\n        @activateCompleter()\r\n    return\r\n\r\n  on: -> @paused = false\r\n  off: -> @paused = true\r\n\r\n  doLiveCompletion: (e) =>\r\n    # console.log 'Autocomplete doLiveCompletion', e\r\n    return unless @options.basic or @options.liveCompletion or @options.completers.snippets\r\n    return if @paused\r\n\r\n    TokenIterator = TokenIterator or ace.require('ace/token_iterator').TokenIterator\r\n    editor = e.editor\r\n    text = e.args or \"\"\r\n    hasCompleter = editor.completer and editor.completer.activated\r\n\r\n    # We don't want to autocomplete with no prefix\r\n    if e.command.name is \"backspace\" or e.command.name is \"insertstring\"\r\n      pos = editor.getCursorPosition()\r\n      token = (new TokenIterator editor.getSession(), pos.row, pos.column).getCurrentToken()\r\n      if token? and token.type not in ['comment', 'string']\r\n        prefix = @getCompletionPrefix editor\r\n        # Bake a fresh autocomplete every keystroke\r\n        editor.completer?.detach() if hasCompleter\r\n\r\n        # Skip common single letter variable names\r\n        return if /^x$|^y$/i.test(prefix)\r\n\r\n        # Only autocomplete if there's a prefix that can be matched\r\n        if (prefix)\r\n          unless (editor.completer)\r\n\r\n            # Create new autocompleter\r\n            Autocomplete = ace.require('ace/autocomplete').Autocomplete\r\n\r\n            # Overwrite \"Shift-Return\" to Esc + Return instead\r\n            # https://github.com/ajaxorg/ace/blob/695e24c41844c17fb2029f073d06338cd73ec33e/lib/ace/autocomplete.js#L208\r\n            # TODO: Need a better way to update this command.  This is super shady.\r\n            # TODO: Shift-Return errors when Autocomplete is open, dying on this call:\r\n            # TODO: calls editor.completer.insertMatch(true) in lib/ace/autocomplete.js\r\n            if Autocomplete?.prototype?.commands?\r\n              exitAndReturn = (editor) =>\r\n                # TODO: Execute a proper Return that selects the Autocomplete if open\r\n                editor.completer.detach()\r\n                @editor.insert \"\\n\"\r\n              Autocomplete.prototype.commands[\"Shift-Return\"] = exitAndReturn\r\n\r\n            editor.completer = new Autocomplete()\r\n\r\n          # Disable autoInsert and show popup\r\n          editor.completer.autoSelect = true\r\n          editor.completer.autoInsert = false\r\n          editor.completer.showPopup(editor)\r\n\r\n          # Hide popup if too many suggestions\r\n          # TODO: Completions aren't asked for unless we show popup, so this is super hacky\r\n          # TODO: Backspacing to yield more suggestions does not close popup\r\n          if editor.completer?.completions?.filtered?.length > 20\r\n            editor.completer.detach()\r\n\r\n          # Update popup CSS after it's been launched\r\n          # TODO: Popup has original CSS on first load, and then visibly/weirdly changes based on these updates\r\n          # TODO: Find better way to extend popup.\r\n          else if editor.completer.popup?\r\n            $('.ace_autocomplete').find('.ace_content').css('cursor', 'pointer')\r\n            $('.ace_autocomplete').css('font-size', @options.popupFontSizePx + 'px') if @options.popupFontSizePx?\r\n            $('.ace_autocomplete').css('line-height', @options.popupLineHeightPx + 'px') if @options.popupLineHeightPx?\r\n            $('.ace_autocomplete').css('width', @options.popupWidthPx + 'px') if @options.popupWidthPx?\r\n            editor.completer.popup.resize?()\r\n\r\n            # TODO: Can't change padding before resize(), but changing it afterwards clears new padding\r\n            # TODO: Figure out how to hook into events rather than using setTimeout()\r\n            # fixStuff = =>\r\n            #   $('.ace_autocomplete').find('.ace_line').css('color', 'purple')\r\n            #   $('.ace_autocomplete').find('.ace_line').css('padding', '20px')\r\n            #   # editor.completer.popup.resize?(true)\r\n            # setTimeout fixStuff, 1000\r\n\r\n    # Update tokens for text completer\r\n    if @options.completers.text and e.command.name in ['backspace', 'del', 'insertstring', 'removetolinestart', 'Enter', 'Return', 'Space', 'Tab']\r\n      @bgTokenizer.fireUpdateEvent 0, @editor.getSession().getLength()\r\n\r\n  getCompletionPrefix: (editor) ->\r\n    # TODO: this is not used to get prefix that is passed to completer.getCompletions\r\n    # TODO: Autocomplete.gatherCompletions is using this (no regex 3rd param):\r\n    # TODO: var prefix = util.retrievePrecedingIdentifier(line, pos.column);\r\n    util = util or ace.require 'ace/autocomplete/util'\r\n    pos = editor.getCursorPosition()\r\n    line = editor.session.getLine pos.row\r\n    prefix = null\r\n    editor.completers?.forEach (completer) ->\r\n      if completer?.identifierRegexps\r\n        completer.identifierRegexps.forEach (identifierRegex) ->\r\n          if not prefix and identifierRegex\r\n            prefix = util.retrievePrecedingIdentifier line, pos.column, identifierRegex\r\n    prefix = util.retrievePrecedingIdentifier line, pos.column unless prefix?\r\n    prefix\r\n\r\n  addCodeCombatSnippets: (level, spellView, e) ->\r\n    snippetEntries = []\r\n    source = spellView.getSource()\r\n    haveFindNearestEnemy = false\r\n    haveFindNearest = false\r\n    for group, props of e.propGroups\r\n      for prop in props\r\n        if _.isString prop  # organizePalette\r\n          owner = group\r\n        else                # organizePaletteHero\r\n          owner = prop.owner\r\n          prop = prop.prop\r\n        doc = _.find (e.allDocs['__' + prop] ? []), (doc) ->\r\n          return true if doc.owner is owner\r\n          return (owner is 'this' or owner is 'more') and (not doc.owner? or doc.owner is 'this')\r\n        if doc?.snippets?[e.language]\r\n          name = doc.name\r\n          content = doc.snippets[e.language].code\r\n          if /loop/.test(content) and level.get 'moveRightLoopSnippet'\r\n            # Replace default loop snippet with an embedded moveRight()\r\n            content = switch e.language\r\n              when 'python' then 'loop:\\n    self.moveRight()\\n    ${1:}'\r\n              when 'javascript' then 'loop {\\n    this.moveRight();\\n    ${1:}\\n}'\r\n              else content\r\n          if /loop/.test(content) and level.isType('course', 'course-ladder')\r\n            # Temporary hackery to make it look like we meant while True: in our loop snippets until we can update everything\r\n            content = switch e.language\r\n              when 'python' then content.replace /loop:/, 'while True:'\r\n              when 'javascript' then content.replace /loop/, 'while (true)'\r\n              when 'lua' then content.replace /loop/, 'while true then'\r\n              when 'coffeescript' then content\r\n              else content\r\n            name = switch e.language\r\n              when 'python' then 'while True'\r\n              when 'coffeescript' then 'loop'\r\n              else 'while true'\r\n          # For now, update autocomplete to use hero instead of self/this, if hero is already used in the source.\r\n          # Later, we should make this happen all the time - or better yet update the snippets.\r\n          if /hero/.test(source) or not /(self[\\.\\:]|this\\.|\\@)/.test(source)\r\n            thisToken =\r\n              'python': /self/,\r\n              'javascript': /this/,\r\n              'lua': /self/\r\n            if thisToken[e.language] and thisToken[e.language].test(content)\r\n              content = content.replace thisToken[e.language], 'hero'\r\n\r\n          entry =\r\n            content: content\r\n            meta: $.i18n.t('keyboard_shortcuts.press_enter', defaultValue: 'press enter')\r\n            name: name\r\n            tabTrigger: doc.snippets[e.language].tab\r\n            importance: doc.autoCompletePriority ? 1.0\r\n          haveFindNearestEnemy ||= name is 'findNearestEnemy'\r\n          haveFindNearest ||= name is 'findNearest'\r\n          if name is 'attack'\r\n            # Postpone this until we know if findNearestEnemy is available\r\n            attackEntry = entry\r\n          else\r\n            snippetEntries.push entry\r\n\r\n          if doc.userShouldCaptureReturn\r\n            varName = doc.userShouldCaptureReturn.variableName ? 'result'\r\n            entry.captureReturn = switch e.language\r\n              when 'javascript' then 'var ' + varName + ' = '\r\n              #when 'lua' then 'local ' + varName + ' = '  # TODO: should we do this?\r\n              else varName + ' = '\r\n\r\n    # TODO: Generalize this snippet replacement\r\n    # TODO: Where should this logic live, and what format should it be in?\r\n    if attackEntry?\r\n      unless haveFindNearestEnemy or haveFindNearest or level.get('slug') in ['known-enemy', 'course-known-enemy']\r\n        # No findNearestEnemy, so update attack snippet to string-based target\r\n        # (On Known Enemy, we are introducing enemy2 = \"Gert\", so we want them to do attack(enemy2).)\r\n        attackEntry.content = attackEntry.content.replace '${1:enemy}', '\"${1:Enemy Name}\"'\r\n      snippetEntries.push attackEntry\r\n\r\n    # Update 'hero.' and 'game.' entries to include their prefixes\r\n    for entry in snippetEntries\r\n      if entry.content?.indexOf('hero.') is 0 and entry.name?.indexOf('hero.') < 0\r\n        entry.name = \"hero.#{entry.name}\"\r\n      else if entry.content?.indexOf('game.') is 0 and entry.name?.indexOf('game.') < 0\r\n        entry.name = \"game.#{entry.name}\"\r\n\r\n    if haveFindNearest and not haveFindNearestEnemy\r\n      spellView.translateFindNearest()\r\n\r\n    # window.AutocompleteInstance = @Autocomplete  # For debugging. Make sure to not leave active when committing.\r\n    # window.snippetEntries = snippetEntries\r\n    lang = utils.aceEditModes[e.language].substr 'ace/mode/'.length\r\n    @addSnippets snippetEntries, lang\r\n    spellView.editorLang = lang\r\n"]}