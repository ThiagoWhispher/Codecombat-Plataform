require.register("templates/play/campaign-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,campaign = locals_.campaign,features = locals_.features,serverConfig = locals_.serverConfig,levels = locals_.levels,i18n = locals_.i18n,translate = locals_.translate,levelStatusMap = locals_.levelStatusMap,editorMode = locals_.editorMode,levelDifficultyMap = locals_.levelDifficultyMap,levelPlayCountMap = locals_.levelPlayCountMap,marked = locals_.marked,picoCTF = locals_.picoCTF,me = locals_.me,adjacentCampaigns = locals_.adjacentCampaigns,_ = locals_._,campaigns = locals_.campaigns,levelsCompleted = locals_.levelsCompleted,levelsTotal = locals_.levelsTotal;if ( view.showAds())
{
buf.push("<!-- TODO: loading this multiple times yields script error:--><!-- Uncaught TagError: adsbygoogle.push() error: All ins elements in the DOM with class=adsbygoogle already have ads in them.--><div class=\"ad-container\">");
if ( campaign)
{
buf.push("<script async=\"async\" src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><ins style=\"display:inline-block;width:728px;height:90px\" data-ad-client=\"ca-pub-6640930638193614\" data-ad-slot=\"4924994487\" class=\"adsbygoogle\"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>");
}
else
{
buf.push("<script async=\"async\" src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><ins style=\"display:inline-block;width:728px;height:90px\" data-ad-client=\"ca-pub-6640930638193614\" data-ad-slot=\"4469166082\" class=\"adsbygoogle\"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});\n</script>");
}
buf.push("</div>");
}
buf.push("<!-- TODO: .gameplay-container causes world map buttons to briefly appear in top left of screen--><div class=\"gameplay-container\">");
if ( features.codePlay)
{
buf.push("<img src=\"/images/common/codeplay/CodePlay_Lockup.png\" class=\"small-nav-logo codeplay-logo\"/>");
}
else
{
buf.push("<a href=\"/\" class=\"picoctf-hide\"><img src=\"/images/pages/base/logo.png\" title=\"CodeCombat - Learn how to code by playing a game\" alt=\"CodeCombat\" class=\"small-nav-logo\"/></a><div class=\"picoctf-show\"><a href=\"http://staging.picoctf.com\" class=\"picoctf-logo\"><img src=\"/images/pages/play/picoctf-logo-white.png\" title=\"picoCTF home\" alt=\"picoCTF home\" class=\"small-nav-logo\"/></a><a href=\"http://codecombat.com\" class=\"picoctf-powered-by\"><em class=\"spr\">powered by</em><img src=\"/images/pages/base/logo.png\" title=\"Powered by CodeCombat - Learn how to code by playing a game \" alt=\"Powered by CodeCombat\"/></a></div>");
}
if ( serverConfig.codeNinjas)
{
buf.push("<a href=\"https://code.ninja\"><img src=\"/images/pages/base/code-ninjas-logo-right.png\" title=\"Code Ninjas home\" alt=\"Code Ninjas home\" class=\"small-nav-logo code-ninjas-logo\"/></a>");
}
if ( campaign)
{
buf.push("<div class=\"map\"><div class=\"gradient horizontal-gradient top-gradient\"></div><div class=\"gradient vertical-gradient right-gradient\"></div><div class=\"gradient horizontal-gradient bottom-gradient\"></div><div class=\"gradient vertical-gradient left-gradient\"></div><div alt=\"\" draggable=\"false\" class=\"map-background\"></div>");
// iterate levels
;(function(){
  var $$obj = levels;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var level = $$obj[$index];

if ((campaign.levelIsPractice(level) || !level.unlockedInSameCampaign) && level.hidden)
{
continue;
}
buf.push("<div" + (jade.attrs({ 'style':("left: " + (level.position.x) + "%; bottom: " + (level.position.y) + "%; background-color: " + (level.color) + ""), 'data-level-slug':(level.slug), 'data-level-original':(level.original), 'title':(i18n(level, 'name') + (level.disabled ? " (" + translate('common.coming_soon') + ")" : '')), "class": [("level" + (level.next ? " next" : "") + (level.disabled ? " disabled" : "") + (level.locked ? " locked" : "") + " " + (levelStatusMap[level.slug] || ""))] }, {"style":true,"class":true,"data-level-slug":true,"data-level-original":true,"title":true})) + ">");
if ( level.unlocksHero && (!level.purchasedHero || editorMode) && (level.hidden || levelStatusMap[level.slug] === 'complete'))
{
buf.push("<img" + (jade.attrs({ 'src':("/file/db/thang.type/" + (level.unlocksHero) + "/portrait.png"), "class": [('hero-portrait')] }, {"src":true})) + "/>");
}
buf.push("<a" + (jade.attrs({ 'href':(level.type == 'hero' ? '#' : level.disabled ? "/play" : "/play/" + (level.levelPath || 'level') + "/" + (level.slug) + ""), 'disabled':(level.disabled), 'data-level-slug':(level.slug), 'data-level-path':(level.levelPath || 'level'), 'data-level-name':(level.name) }, {"href":true,"disabled":true,"data-level-slug":true,"data-level-path":true,"data-level-name":true})) + "></a>");
if ( levelStatusMap[level.slug] === 'complete')
{
buf.push("<img src=\"/images/pages/play/star.png\" class=\"star\"/>");
}
if ( editorMode)
{
var kindKey = ((level.kind && level.kind[0]) || "").toUpperCase();
buf.push("<!--if kindKey--><div" + (jade.attrs({ "class": [("level-kind " + level.kind)] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = kindKey) ? "" : jade.interp)) + "</div>");
var acronym = level.name.replace(/(A |The )/g, '').replace(/[^A-Z]/g, '');
buf.push("<div class=\"level-acronym\">" + (jade.escape(null == (jade.interp = acronym) ? "" : jade.interp)) + "</div>");
}
if ( !level.hidden)
{
if ( level.replayable)
{
buf.push("<img src=\"/images/pages/play/level-banner-replayable.png\" class=\"banner\"/>");
}
else if ( level.type === 'hero-ladder' || level.type === 'course-ladder')
{
buf.push("<img src=\"/images/pages/play/level-banner-multiplayer.png\" class=\"banner\"/>");
}
else if ( ['kithgard-gates', 'siege-of-stonehold', 'clash-of-clones', 'summits-gate', 'kithgard-mastery'].indexOf(level.slug) !== -1 && levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-special.png\" class=\"banner\"/>");
}
else if ( level.unlocksHero && levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-unlock.png\" class=\"banner\"/><img" + (jade.attrs({ 'src':("/file/db/thang.type/" + (level.unlocksHero) + "/portrait.png"), "class": [('hero-portrait'),('hero-portrait-on-banner')] }, {"src":true})) + "/>");
}
else if ( level.unlocksItem && levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-unlock.png\" class=\"banner\"/><img" + (jade.attrs({ 'src':("/file/db/thang.type/" + (level.unlocksItem) + "/portrait.png"), "class": [('item-portrait'),('item-portrait-on-banner')] }, {"src":true})) + "/>");
}
else if ( levelStatusMap[level.slug] === 'started')
{
buf.push("<img src=\"/images/pages/play/level-banner-started.png\" class=\"banner\"/>");
}
else if ( levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-unstarted.png\" class=\"banner\"/>");
}
if ( levelDifficultyMap[level.slug])
{
buf.push("<div class=\"level-difficulty-banner-text\">" + (jade.escape(null == (jade.interp = levelDifficultyMap[level.slug]) ? "" : jade.interp)) + "</div>");
}
}
buf.push("</div><div" + (jade.attrs({ 'style':("left: " + (level.position.x) + "%; bottom: " + (level.position.y) + "%"), "class": [("level-shadow" + (level.next ? " next" : "") + (level.locked ? " locked" : "") + " " + (levelStatusMap[level.slug] || ""))] }, {"style":true,"class":true})) + "></div><div" + (jade.attrs({ 'data-level-slug':(level.slug), 'data-level-path':(level.levelPath || 'level'), 'data-level-name':(level.name), "class": [('level-info-container')] }, {"data-level-slug":true,"data-level-path":true,"data-level-name":true})) + ">");
var playCount = levelPlayCountMap[level.slug]
buf.push("<div class=\"progress progress-striped active hide\"><div style=\"width: 100%\" class=\"progress-bar\"></div></div>");
var showsLeaderboard = levelStatusMap[level.slug] === 'complete' && ((level.scoreTypes && level.scoreTypes.length) || ['hero-ladder', 'course-ladder'].indexOf(level.type) !== -1);
buf.push("<div" + (jade.attrs({ "class": [("level-info " + (levelStatusMap[level.slug] || "") + (level.requiresSubscription ? " premium" : "") + (showsLeaderboard ? " shows-leaderboard" : ""))] }, {"class":true})) + "><div class=\"level-status\"></div><h3>" + (jade.escape(null == (jade.interp = i18n(level, 'name') + (level.disabled ? " (" + translate('common.coming_soon') + ")" : (level.locked ? " (" + translate('play.locked') + ")" : ""))) ? "" : jade.interp)) + "</h3>");
var description = i18n(level, 'description') || level.description || ""
buf.push("<div class=\"level-description\">" + (null == (jade.interp = marked(description, {sanitize: !picoCTF})) ? "" : jade.interp) + "</div>");
if ( level.disabled)
{
buf.push("<p><span data-i18n=\"play.awaiting_levels_adventurer_prefix\" class=\"spr\">We release five levels per week.</span><a href=\"/contribute/adventurer\" class=\"spr\"><strong data-i18n=\"play.awaiting_levels_adventurer\">Sign up as an Adventurer</strong></a><span data-i18n=\"play.awaiting_levels_adventurer_suffix\" class=\"spl\">to be the first to play new levels.</span></p>");
}
if ( level.displayConcepts && level.displayConcepts.length)
{
buf.push("<p>");
// iterate level.displayConcepts
;(function(){
  var $$obj = level.displayConcepts;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var concept = $$obj[$index];

buf.push("<kbd" + (jade.attrs({ 'data-i18n':("concepts." + concept) }, {"data-i18n":true})) + "></kbd>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var concept = $$obj[$index];

buf.push("<kbd" + (jade.attrs({ 'data-i18n':("concepts." + concept) }, {"data-i18n":true})) + "></kbd>");
    }

  }
}).call(this);

buf.push("</p>");
}
if ( !level.disabled && !level.locked)
{
if ( playCount && playCount.sessions)
{
buf.push("<div class=\"play-counts hidden\"><span class=\"spl spr\">" + (jade.escape(null == (jade.interp = playCount.sessions) ? "" : jade.interp)) + "</span><span data-i18n=\"play.players\">players</span><span class=\"spr\">, " + (jade.escape((jade.interp = Math.round(playCount.playtime / 3600)) == null ? '' : jade.interp)) + "</span><span data-i18n=\"play.hours_played\">hours played</span></div>");
}
if ( showsLeaderboard)
{
buf.push("<button" + (jade.attrs({ 'data-level-slug':(level.slug), "class": [('btn'),('btn-warning'),('btn'),('btn-lg'),('btn-illustrated'),('view-solutions')] }, {"data-level-slug":true})) + "><span data-i18n=\"leaderboard.scores\"></span></button>");
}
buf.push("<button data-i18n=\"common.play\" class=\"btn btn-success btn btn-lg btn-illustrated start-level\">Play</button>");
if ( me.get('courseInstances') && me.get('courseInstances').length)
{
buf.push("<div" + (jade.attrs({ 'data-level-original':(level.original), "class": [('course-version'),('hidden')] }, {"data-level-original":true})) + "><em data-i18n=\"general.or\"></em>...<br/><button class=\"btn btn-primary btn btn-lg btn-illustrated\"><span data-i18n=\"play.play_classroom_version\">Play Classroom Version</span></button></div>");
}
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var level = $$obj[$index];

if ((campaign.levelIsPractice(level) || !level.unlockedInSameCampaign) && level.hidden)
{
continue;
}
buf.push("<div" + (jade.attrs({ 'style':("left: " + (level.position.x) + "%; bottom: " + (level.position.y) + "%; background-color: " + (level.color) + ""), 'data-level-slug':(level.slug), 'data-level-original':(level.original), 'title':(i18n(level, 'name') + (level.disabled ? " (" + translate('common.coming_soon') + ")" : '')), "class": [("level" + (level.next ? " next" : "") + (level.disabled ? " disabled" : "") + (level.locked ? " locked" : "") + " " + (levelStatusMap[level.slug] || ""))] }, {"style":true,"class":true,"data-level-slug":true,"data-level-original":true,"title":true})) + ">");
if ( level.unlocksHero && (!level.purchasedHero || editorMode) && (level.hidden || levelStatusMap[level.slug] === 'complete'))
{
buf.push("<img" + (jade.attrs({ 'src':("/file/db/thang.type/" + (level.unlocksHero) + "/portrait.png"), "class": [('hero-portrait')] }, {"src":true})) + "/>");
}
buf.push("<a" + (jade.attrs({ 'href':(level.type == 'hero' ? '#' : level.disabled ? "/play" : "/play/" + (level.levelPath || 'level') + "/" + (level.slug) + ""), 'disabled':(level.disabled), 'data-level-slug':(level.slug), 'data-level-path':(level.levelPath || 'level'), 'data-level-name':(level.name) }, {"href":true,"disabled":true,"data-level-slug":true,"data-level-path":true,"data-level-name":true})) + "></a>");
if ( levelStatusMap[level.slug] === 'complete')
{
buf.push("<img src=\"/images/pages/play/star.png\" class=\"star\"/>");
}
if ( editorMode)
{
var kindKey = ((level.kind && level.kind[0]) || "").toUpperCase();
buf.push("<!--if kindKey--><div" + (jade.attrs({ "class": [("level-kind " + level.kind)] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = kindKey) ? "" : jade.interp)) + "</div>");
var acronym = level.name.replace(/(A |The )/g, '').replace(/[^A-Z]/g, '');
buf.push("<div class=\"level-acronym\">" + (jade.escape(null == (jade.interp = acronym) ? "" : jade.interp)) + "</div>");
}
if ( !level.hidden)
{
if ( level.replayable)
{
buf.push("<img src=\"/images/pages/play/level-banner-replayable.png\" class=\"banner\"/>");
}
else if ( level.type === 'hero-ladder' || level.type === 'course-ladder')
{
buf.push("<img src=\"/images/pages/play/level-banner-multiplayer.png\" class=\"banner\"/>");
}
else if ( ['kithgard-gates', 'siege-of-stonehold', 'clash-of-clones', 'summits-gate', 'kithgard-mastery'].indexOf(level.slug) !== -1 && levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-special.png\" class=\"banner\"/>");
}
else if ( level.unlocksHero && levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-unlock.png\" class=\"banner\"/><img" + (jade.attrs({ 'src':("/file/db/thang.type/" + (level.unlocksHero) + "/portrait.png"), "class": [('hero-portrait'),('hero-portrait-on-banner')] }, {"src":true})) + "/>");
}
else if ( level.unlocksItem && levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-unlock.png\" class=\"banner\"/><img" + (jade.attrs({ 'src':("/file/db/thang.type/" + (level.unlocksItem) + "/portrait.png"), "class": [('item-portrait'),('item-portrait-on-banner')] }, {"src":true})) + "/>");
}
else if ( levelStatusMap[level.slug] === 'started')
{
buf.push("<img src=\"/images/pages/play/level-banner-started.png\" class=\"banner\"/>");
}
else if ( levelStatusMap[level.slug] !== 'complete')
{
buf.push("<img src=\"/images/pages/play/level-banner-unstarted.png\" class=\"banner\"/>");
}
if ( levelDifficultyMap[level.slug])
{
buf.push("<div class=\"level-difficulty-banner-text\">" + (jade.escape(null == (jade.interp = levelDifficultyMap[level.slug]) ? "" : jade.interp)) + "</div>");
}
}
buf.push("</div><div" + (jade.attrs({ 'style':("left: " + (level.position.x) + "%; bottom: " + (level.position.y) + "%"), "class": [("level-shadow" + (level.next ? " next" : "") + (level.locked ? " locked" : "") + " " + (levelStatusMap[level.slug] || ""))] }, {"style":true,"class":true})) + "></div><div" + (jade.attrs({ 'data-level-slug':(level.slug), 'data-level-path':(level.levelPath || 'level'), 'data-level-name':(level.name), "class": [('level-info-container')] }, {"data-level-slug":true,"data-level-path":true,"data-level-name":true})) + ">");
var playCount = levelPlayCountMap[level.slug]
buf.push("<div class=\"progress progress-striped active hide\"><div style=\"width: 100%\" class=\"progress-bar\"></div></div>");
var showsLeaderboard = levelStatusMap[level.slug] === 'complete' && ((level.scoreTypes && level.scoreTypes.length) || ['hero-ladder', 'course-ladder'].indexOf(level.type) !== -1);
buf.push("<div" + (jade.attrs({ "class": [("level-info " + (levelStatusMap[level.slug] || "") + (level.requiresSubscription ? " premium" : "") + (showsLeaderboard ? " shows-leaderboard" : ""))] }, {"class":true})) + "><div class=\"level-status\"></div><h3>" + (jade.escape(null == (jade.interp = i18n(level, 'name') + (level.disabled ? " (" + translate('common.coming_soon') + ")" : (level.locked ? " (" + translate('play.locked') + ")" : ""))) ? "" : jade.interp)) + "</h3>");
var description = i18n(level, 'description') || level.description || ""
buf.push("<div class=\"level-description\">" + (null == (jade.interp = marked(description, {sanitize: !picoCTF})) ? "" : jade.interp) + "</div>");
if ( level.disabled)
{
buf.push("<p><span data-i18n=\"play.awaiting_levels_adventurer_prefix\" class=\"spr\">We release five levels per week.</span><a href=\"/contribute/adventurer\" class=\"spr\"><strong data-i18n=\"play.awaiting_levels_adventurer\">Sign up as an Adventurer</strong></a><span data-i18n=\"play.awaiting_levels_adventurer_suffix\" class=\"spl\">to be the first to play new levels.</span></p>");
}
if ( level.displayConcepts && level.displayConcepts.length)
{
buf.push("<p>");
// iterate level.displayConcepts
;(function(){
  var $$obj = level.displayConcepts;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var concept = $$obj[$index];

buf.push("<kbd" + (jade.attrs({ 'data-i18n':("concepts." + concept) }, {"data-i18n":true})) + "></kbd>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var concept = $$obj[$index];

buf.push("<kbd" + (jade.attrs({ 'data-i18n':("concepts." + concept) }, {"data-i18n":true})) + "></kbd>");
    }

  }
}).call(this);

buf.push("</p>");
}
if ( !level.disabled && !level.locked)
{
if ( playCount && playCount.sessions)
{
buf.push("<div class=\"play-counts hidden\"><span class=\"spl spr\">" + (jade.escape(null == (jade.interp = playCount.sessions) ? "" : jade.interp)) + "</span><span data-i18n=\"play.players\">players</span><span class=\"spr\">, " + (jade.escape((jade.interp = Math.round(playCount.playtime / 3600)) == null ? '' : jade.interp)) + "</span><span data-i18n=\"play.hours_played\">hours played</span></div>");
}
if ( showsLeaderboard)
{
buf.push("<button" + (jade.attrs({ 'data-level-slug':(level.slug), "class": [('btn'),('btn-warning'),('btn'),('btn-lg'),('btn-illustrated'),('view-solutions')] }, {"data-level-slug":true})) + "><span data-i18n=\"leaderboard.scores\"></span></button>");
}
buf.push("<button data-i18n=\"common.play\" class=\"btn btn-success btn btn-lg btn-illustrated start-level\">Play</button>");
if ( me.get('courseInstances') && me.get('courseInstances').length)
{
buf.push("<div" + (jade.attrs({ 'data-level-original':(level.original), "class": [('course-version'),('hidden')] }, {"data-level-original":true})) + "><em data-i18n=\"general.or\"></em>...<br/><button class=\"btn btn-primary btn btn-lg btn-illustrated\"><span data-i18n=\"play.play_classroom_version\">Play Classroom Version</span></button></div>");
}
}
buf.push("</div></div>");
    }

  }
}).call(this);

// iterate adjacentCampaigns
;(function(){
  var $$obj = adjacentCampaigns;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var adjacentCampaign = $$obj[$index];

buf.push("<a" + (jade.attrs({ 'href':((editorMode ? "/editor/campaign/" : "/play/") + adjacentCampaign.slug) }, {"href":true})) + "><span" + (jade.attrs({ 'style':(adjacentCampaign.style), 'title':(adjacentCampaign.name), 'data-campaign-id':(adjacentCampaign.id), 'data-campaign-slug':(adjacentCampaign.slug), "class": [('glyphicon'),('glyphicon-share-alt'),('campaign-switch')] }, {"style":true,"title":true,"data-campaign-id":true,"data-campaign-slug":true})) + "></span></a>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var adjacentCampaign = $$obj[$index];

buf.push("<a" + (jade.attrs({ 'href':((editorMode ? "/editor/campaign/" : "/play/") + adjacentCampaign.slug) }, {"href":true})) + "><span" + (jade.attrs({ 'style':(adjacentCampaign.style), 'title':(adjacentCampaign.name), 'data-campaign-id':(adjacentCampaign.id), 'data-campaign-slug':(adjacentCampaign.slug), "class": [('glyphicon'),('glyphicon-share-alt'),('campaign-switch')] }, {"style":true,"title":true,"data-campaign-id":true,"data-campaign-slug":true})) + "></span></a>");
    }

  }
}).call(this);

buf.push("</div>");
}
else
{
buf.push("<div class=\"portal\"><div class=\"portals\">");
// iterate features.campaignSlugs || ['dungeon', 'beta-campaigns-1', 'forest', 'beta-campaigns-2', 'desert', 'mountain', 'glacier', 'volcano']
;(function(){
  var $$obj = features.campaignSlugs || ['dungeon', 'beta-campaigns-1', 'forest', 'beta-campaigns-2', 'desert', 'mountain', 'glacier', 'volcano'];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var campaignSlug = $$obj[$index];

if ( campaignSlug === 'beta-campaigns-1' || campaignSlug === 'beta-campaigns-2')
{
if (features.freeOnly) continue;
var betaSlugs = campaignSlug === 'beta-campaigns-1' ? _.shuffle(['campaign-game-dev-1', 'campaign-web-dev-1']) : _.shuffle(['campaign-game-dev-2', 'campaign-web-dev-2']);
buf.push("<div class=\"beta-container\">");
// iterate betaSlugs
;(function(){
  var $$obj = betaSlugs;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var campaignSlug = $$obj[$index];

var campaign = campaigns[campaignSlug];
if ( !campaign)
{
continue;
}
buf.push("<div" + (jade.attrs({ 'data-campaign-slug':(campaignSlug), "class": [("beta-campaign" + (campaign ? "" : " silhouette") + (campaign && campaign.locked && !godmode ? " locked" : ""))] }, {"class":true,"data-campaign-slug":true})) + "><div" + (jade.attrs({ "class": [('background-container'),("" + (campaignSlug) + "")] }, {"class":true})) + "></div><div class=\"campaign-label\"><h3 class=\"campaign-name\">");
if ( campaign)
{
buf.push("<span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span>");
if ( campaign.levelsTotal)
{
buf.push("<span class=\"spl\">" + (jade.escape(null == (jade.interp = campaign.levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = campaign.levelsTotal) ? "" : jade.interp)) + "</span>");
}
}
else
{
buf.push("<span>???</span>");
}
buf.push("</h3>");
if ( campaign && campaign.locked && !godmode)
{
buf.push("<h4 data-i18n=\"play.locked\" class=\"campaign-locked\">Locked</h4>");
}
else if ( campaign)
{
buf.push("<btn data-i18n=\"common.play\" class=\"btn btn-illustrated btn-lg btn-primary play-button\"></btn>");
}
if ( campaign && campaign.get('description'))
{
buf.push("<p class=\"campaign-description\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'description')) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var campaignSlug = $$obj[$index];

var campaign = campaigns[campaignSlug];
if ( !campaign)
{
continue;
}
buf.push("<div" + (jade.attrs({ 'data-campaign-slug':(campaignSlug), "class": [("beta-campaign" + (campaign ? "" : " silhouette") + (campaign && campaign.locked && !godmode ? " locked" : ""))] }, {"class":true,"data-campaign-slug":true})) + "><div" + (jade.attrs({ "class": [('background-container'),("" + (campaignSlug) + "")] }, {"class":true})) + "></div><div class=\"campaign-label\"><h3 class=\"campaign-name\">");
if ( campaign)
{
buf.push("<span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span>");
if ( campaign.levelsTotal)
{
buf.push("<span class=\"spl\">" + (jade.escape(null == (jade.interp = campaign.levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = campaign.levelsTotal) ? "" : jade.interp)) + "</span>");
}
}
else
{
buf.push("<span>???</span>");
}
buf.push("</h3>");
if ( campaign && campaign.locked && !godmode)
{
buf.push("<h4 data-i18n=\"play.locked\" class=\"campaign-locked\">Locked</h4>");
}
else if ( campaign)
{
buf.push("<btn data-i18n=\"common.play\" class=\"btn btn-illustrated btn-lg btn-primary play-button\"></btn>");
}
if ( campaign && campaign.get('description'))
{
buf.push("<p class=\"campaign-description\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'description')) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
else
{
var campaign = campaigns[campaignSlug];
var godmode = me.get('permissions', true).indexOf('godmode') != -1;
buf.push("<div" + (jade.attrs({ 'data-campaign-slug':(campaignSlug), "class": [("campaign " + (campaignSlug) + "" + (campaign ? "" : " silhouette") + (campaign && campaign.locked && !godmode ? " locked" : ""))] }, {"class":true,"data-campaign-slug":true})) + "><div class=\"campaign-label\"><h2 class=\"campaign-name\">");
if ( campaign)
{
buf.push("<span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span>");
}
else
{
buf.push("<span>???</span>");
}
buf.push("</h2>");
if ( campaign && campaign.levelsTotal)
{
buf.push("<h3 class=\"levels-completed\"><span>" + (jade.escape(null == (jade.interp = campaign.levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = campaign.levelsTotal) ? "" : jade.interp)) + "</span></h3>");
}
if ( campaign && campaign.locked && !godmode)
{
buf.push("<h3 data-i18n=\"play.locked\" class=\"campaign-locked\">Locked</h3>");
}
else if ( campaign)
{
buf.push("<btn data-i18n=\"common.play\" class=\"btn btn-illustrated btn-lg btn-success play-button\"></btn>");
}
if ( campaign && campaign.get('description'))
{
buf.push("<p class=\"campaign-description\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'description')) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div></div>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var campaignSlug = $$obj[$index];

if ( campaignSlug === 'beta-campaigns-1' || campaignSlug === 'beta-campaigns-2')
{
if (features.freeOnly) continue;
var betaSlugs = campaignSlug === 'beta-campaigns-1' ? _.shuffle(['campaign-game-dev-1', 'campaign-web-dev-1']) : _.shuffle(['campaign-game-dev-2', 'campaign-web-dev-2']);
buf.push("<div class=\"beta-container\">");
// iterate betaSlugs
;(function(){
  var $$obj = betaSlugs;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var campaignSlug = $$obj[$index];

var campaign = campaigns[campaignSlug];
if ( !campaign)
{
continue;
}
buf.push("<div" + (jade.attrs({ 'data-campaign-slug':(campaignSlug), "class": [("beta-campaign" + (campaign ? "" : " silhouette") + (campaign && campaign.locked && !godmode ? " locked" : ""))] }, {"class":true,"data-campaign-slug":true})) + "><div" + (jade.attrs({ "class": [('background-container'),("" + (campaignSlug) + "")] }, {"class":true})) + "></div><div class=\"campaign-label\"><h3 class=\"campaign-name\">");
if ( campaign)
{
buf.push("<span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span>");
if ( campaign.levelsTotal)
{
buf.push("<span class=\"spl\">" + (jade.escape(null == (jade.interp = campaign.levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = campaign.levelsTotal) ? "" : jade.interp)) + "</span>");
}
}
else
{
buf.push("<span>???</span>");
}
buf.push("</h3>");
if ( campaign && campaign.locked && !godmode)
{
buf.push("<h4 data-i18n=\"play.locked\" class=\"campaign-locked\">Locked</h4>");
}
else if ( campaign)
{
buf.push("<btn data-i18n=\"common.play\" class=\"btn btn-illustrated btn-lg btn-primary play-button\"></btn>");
}
if ( campaign && campaign.get('description'))
{
buf.push("<p class=\"campaign-description\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'description')) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var campaignSlug = $$obj[$index];

var campaign = campaigns[campaignSlug];
if ( !campaign)
{
continue;
}
buf.push("<div" + (jade.attrs({ 'data-campaign-slug':(campaignSlug), "class": [("beta-campaign" + (campaign ? "" : " silhouette") + (campaign && campaign.locked && !godmode ? " locked" : ""))] }, {"class":true,"data-campaign-slug":true})) + "><div" + (jade.attrs({ "class": [('background-container'),("" + (campaignSlug) + "")] }, {"class":true})) + "></div><div class=\"campaign-label\"><h3 class=\"campaign-name\">");
if ( campaign)
{
buf.push("<span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span>");
if ( campaign.levelsTotal)
{
buf.push("<span class=\"spl\">" + (jade.escape(null == (jade.interp = campaign.levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = campaign.levelsTotal) ? "" : jade.interp)) + "</span>");
}
}
else
{
buf.push("<span>???</span>");
}
buf.push("</h3>");
if ( campaign && campaign.locked && !godmode)
{
buf.push("<h4 data-i18n=\"play.locked\" class=\"campaign-locked\">Locked</h4>");
}
else if ( campaign)
{
buf.push("<btn data-i18n=\"common.play\" class=\"btn btn-illustrated btn-lg btn-primary play-button\"></btn>");
}
if ( campaign && campaign.get('description'))
{
buf.push("<p class=\"campaign-description\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'description')) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
else
{
var campaign = campaigns[campaignSlug];
var godmode = me.get('permissions', true).indexOf('godmode') != -1;
buf.push("<div" + (jade.attrs({ 'data-campaign-slug':(campaignSlug), "class": [("campaign " + (campaignSlug) + "" + (campaign ? "" : " silhouette") + (campaign && campaign.locked && !godmode ? " locked" : ""))] }, {"class":true,"data-campaign-slug":true})) + "><div class=\"campaign-label\"><h2 class=\"campaign-name\">");
if ( campaign)
{
buf.push("<span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span>");
}
else
{
buf.push("<span>???</span>");
}
buf.push("</h2>");
if ( campaign && campaign.levelsTotal)
{
buf.push("<h3 class=\"levels-completed\"><span>" + (jade.escape(null == (jade.interp = campaign.levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = campaign.levelsTotal) ? "" : jade.interp)) + "</span></h3>");
}
if ( campaign && campaign.locked && !godmode)
{
buf.push("<h3 data-i18n=\"play.locked\" class=\"campaign-locked\">Locked</h3>");
}
else if ( campaign)
{
buf.push("<btn data-i18n=\"common.play\" class=\"btn btn-illustrated btn-lg btn-success play-button\"></btn>");
}
if ( campaign && campaign.get('description'))
{
buf.push("<p class=\"campaign-description\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'description')) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div></div>");
}
    }

  }
}).call(this);

buf.push("</div></div>");
}
buf.push("<div class=\"game-controls header-font picoctf-hide\"><button data-i18n=\"[title]play.poll\" class=\"btn poll hidden\"></button>");
if ( !features.codePlay)
{
buf.push("<a href=\"/clans\" data-i18n=\"[title]clans.clans\" class=\"btn clans\"></a>");
}
buf.push("<button data-toggle=\"coco-modal\" data-target=\"play/modal/PlayItemsModal\" data-i18n=\"[title]play.items\" class=\"btn items\"></button><button data-toggle=\"coco-modal\" data-target=\"play/modal/PlayHeroesModal\" data-i18n=\"[title]play.heroes\" class=\"btn heroes\"></button><button data-toggle=\"coco-modal\" data-target=\"play/modal/PlayAchievementsModal\" data-i18n=\"[title]play.achievements\" class=\"btn achievements\"></button>");
if ( !me.get('anonymous', true) && !features.codePlay)
{
buf.push("<a href=\"/account/settings\" data-original-title=\"Configuração\" class=\"btn account\"></a>");
}
buf.push("</div><div class=\"user-status header-font picoctf-hide\"><div class=\"user-status-line\"><span class=\"gem gem-30\"></span><span id=\"gems-count\" class=\"spr\">" + (jade.escape(null == (jade.interp = me.gems()) ? "" : jade.interp)) + "</span><span data-i18n=\"general.player_level\" class=\"level-indicator\"></span><span class=\"player-level spr\">" + (jade.escape(null == (jade.interp = me.level()) ? "" : jade.interp)) + "</span><span class=\"player-hero-icon\"></span>");
if ( me.get('anonymous'))
{
buf.push("<span data-i18n=\"play.anonymous\" class=\"player-name spr\">Anonymous Player</span><button data-i18n=\"login.log_in\" class=\"btn btn-illustrated login-button btn-warning\"></button><button data-i18n=\"signup.sign_up\" class=\"btn btn-illustrated signup-button btn-danger\"></button>");
}
else
{
buf.push("<a href=\"/account/settings\" class=\"player-name spr\">" + (jade.escape(null == (jade.interp = me.get('name')) ? "" : jade.interp)) + "</a><button id=\"logout-button\" data-i18n=\"login.log_out\" class=\"btn btn-illustrated btn-warning\">Log Out</button>");
if ( me.isPremium())
{
buf.push("<button data-i18n=\"nav.contact\" data-toggle=\"coco-modal\" data-target=\"core/ContactModal\" class=\"btn btn-illustrated btn-primary\">Contact</button>");
}
}
buf.push("</div></div><button id=\"volume-button\" data-i18n=\"[title]play.adjust_volume\" title=\"Adjust volume\" class=\"btn btn-lg btn-inverse campaign-control-button picoctf-hide\"><div class=\"glyphicon glyphicon-volume-off\"></div><div class=\"glyphicon glyphicon-volume-down\"></div><div class=\"glyphicon glyphicon-volume-up\"></div></button>");
if ( campaign && !editorMode)
{
buf.push("<button id=\"back-button\" data-i18n=\"[title]resources.campaigns\" title=\"Campaigns\" class=\"btn btn-lg btn-inverse campaign-control-button picoctf-hide\"><div class=\"glyphicon glyphicon-globe\"></div></button>");
}
if ( editorMode)
{
buf.push("<button id=\"clear-storage-button\" data-i18n=\"[title]editor.clear_storage\" title=\"Clear your local changes\" class=\"btn btn-lg btn-inverse campaign-control-button\"><div class=\"glyphicon glyphicon-refresh\"></div></button>");
}
if ( campaign && campaign.loaded)
{
buf.push("<h1 id=\"campaign-status\" class=\"picoctf-hide\"><div class=\"campaign-status-background\"><div class=\"campaign-name\"><span>" + (jade.escape(null == (jade.interp = i18n(campaign.attributes, 'fullName')) ? "" : jade.interp)) + "</span></div><div class=\"levels-completed\"><span>" + (jade.escape(null == (jade.interp = levelsCompleted) ? "" : jade.interp)) + "</span>/<span>" + (jade.escape(null == (jade.interp = levelsTotal) ? "" : jade.interp)) + "</span></div></div></h1>");
}
buf.push("</div>");
if ( campaign && !me.finishedAnyLevels() && serverConfig.showCodePlayAds)
{
buf.push("<a href=\"https://lenovogamestate.com/\">");
var url = "/images/common/codeplay/NA_LevelsPage_Cube_160x480.png"
if ( me.isFromUk())
{
url = "/images/common/codeplay/UK_LevelsPage_Cube_160x480.png"
}
buf.push("<img" + (jade.attrs({ 'id':('codeplay-ad'), 'src':(url) }, {"src":true})) + "/></a>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/common/ladder_submission", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),lastSubmitted = locals_.lastSubmitted,simulateURL = locals_.simulateURL;buf.push("<button class=\"btn btn-lg btn-block btn-success rank-button btn-illustrated\"><span data-i18n=\"ladder.rank_no_code\" class=\"unavailable secret\">No New Code to Rank</span><span data-i18n=\"ladder.rank_my_game\" class=\"rank secret\">Rank My Game!</span><span data-i18n=\"ladder.rank_submitting\" class=\"submitting secret\">Submitting...</span><span data-i18n=\"ladder.rank_submitted\" class=\"submitted secret\">Submitted for Ranking</span><span data-i18n=\"ladder.rank_failed\" class=\"failed secret\">Failed to Rank</span><span data-i18n=\"ladder.rank_being_ranked\" class=\"ranking secret\">Game Being Ranked</span></button>");
if ( lastSubmitted)
{
buf.push("<div class=\"last-submitted secret\"><span data-i18n=\"ladder.rank_last_submitted\">submitted </span>" + (jade.escape((jade.interp = lastSubmitted) == null ? '' : jade.interp)) + "</div>");
}
buf.push("<a" + (jade.attrs({ 'href':(simulateURL), 'data-i18n':("ladder.help_simulate"), "class": [('help-simulate'),('secret')] }, {"href":true,"data-i18n":true})) + ">Help simulate games?</a><div class=\"clearfix\"></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/ladder/ladder-tab-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,me = locals_.me,_ = locals_._,moment = locals_.moment,onFacebook = locals_.onFacebook,onGPlus = locals_.onGPlus;var league = view.options.league
buf.push("<div class=\"row\">");
// iterate view.teams
;(function(){
  var $$obj = view.teams;
  if ('number' == typeof $$obj.length) {

    for (var teamIndex = 0, $$l = $$obj.length; teamIndex < $$l; teamIndex++) {
      var team = $$obj[teamIndex];

buf.push("<div class=\"column col-md-6\"><div" + (jade.attrs({ 'id':("histogram-display-" + (team.name) + ""), 'data-team-name':(team.name), "class": [("histogram-display")] }, {"id":true,"class":true,"data-team-name":true})) + "></div><table" + (jade.attrs({ 'data-team':(team.id), "class": [('table'),('table-bordered'),('table-condensed'),('table-hover'),('ladder-table')] }, {"data-team":true})) + ">");
var levelType = view.level.get('type', true)
var topSessions = team.leaderboard.topPlayers.models;
var showJustTop = team.leaderboard.inTopSessions() || me.get('anonymous');
if(!showJustTop && topSessions.length == 20) topSessions = topSessions.slice(0, 10);
buf.push("<thead><tr><th" + (jade.attrs({ 'colspan':(levelType == 'hero-ladder' ? 3 : 2) }, {"colspan":true})) + "></th><th" + (jade.attrs({ 'colspan':(4), 'style':("color: " + (team.primaryColor) + "") }, {"colspan":true,"style":true})) + "><span>" + (jade.escape(null == (jade.interp = team.displayName) ? "" : jade.interp)) + "</span><span data-i18n=\"ladder.leaderboard\" class=\"spl\">Leaderboard</span></th></tr><tr><th" + (jade.attrs({ 'colspan':(levelType == 'hero-ladder' ? 3 : 2) }, {"colspan":true})) + "></th><th data-i18n=\"general.score\">Score</th><th data-i18n=\"general.name\" class=\"name-col-cell\">Name</th><th data-i18n=\"general.when\">When</th><th></th><th class=\"iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></th></tr></thead><tbody>         ");
// iterate topSessions
;(function(){
  var $$obj = topSessions;
  if ('number' == typeof $$obj.length) {

    for (var rank = 0, $$l = $$obj.length; rank < $$l; rank++) {
      var session = $$obj[rank];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues') || [], {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), 'title':(view.capitalize(session.get('submittedCodeLanguage'))), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  } else {
    var $$l = 0;
    for (var rank in $$obj) {
      $$l++;      var session = $$obj[rank];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues') || [], {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), 'title':(view.capitalize(session.get('submittedCodeLanguage'))), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  }
}).call(this);

if ( !showJustTop && team.leaderboard.nearbySessions().length)
{
buf.push("<tr class=\"active\"><td colspan=\"4\" class=\"ellipsis-row\">...</td></tr>");
// iterate team.leaderboard.nearbySessions()
;(function(){
  var $$obj = team.leaderboard.nearbySessions();
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var session = $$obj[$index];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues'), {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = session.rank) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var session = $$obj[$index];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues'), {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = session.rank) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  }
}).call(this);

}
buf.push("</tbody></table>");
if ( teamIndex == 1)
{
buf.push("<div data-i18n=\"editor.more\" class=\"btn btn-sm load-more-ladder-entries\">More</div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var teamIndex in $$obj) {
      $$l++;      var team = $$obj[teamIndex];

buf.push("<div class=\"column col-md-6\"><div" + (jade.attrs({ 'id':("histogram-display-" + (team.name) + ""), 'data-team-name':(team.name), "class": [("histogram-display")] }, {"id":true,"class":true,"data-team-name":true})) + "></div><table" + (jade.attrs({ 'data-team':(team.id), "class": [('table'),('table-bordered'),('table-condensed'),('table-hover'),('ladder-table')] }, {"data-team":true})) + ">");
var levelType = view.level.get('type', true)
var topSessions = team.leaderboard.topPlayers.models;
var showJustTop = team.leaderboard.inTopSessions() || me.get('anonymous');
if(!showJustTop && topSessions.length == 20) topSessions = topSessions.slice(0, 10);
buf.push("<thead><tr><th" + (jade.attrs({ 'colspan':(levelType == 'hero-ladder' ? 3 : 2) }, {"colspan":true})) + "></th><th" + (jade.attrs({ 'colspan':(4), 'style':("color: " + (team.primaryColor) + "") }, {"colspan":true,"style":true})) + "><span>" + (jade.escape(null == (jade.interp = team.displayName) ? "" : jade.interp)) + "</span><span data-i18n=\"ladder.leaderboard\" class=\"spl\">Leaderboard</span></th></tr><tr><th" + (jade.attrs({ 'colspan':(levelType == 'hero-ladder' ? 3 : 2) }, {"colspan":true})) + "></th><th data-i18n=\"general.score\">Score</th><th data-i18n=\"general.name\" class=\"name-col-cell\">Name</th><th data-i18n=\"general.when\">When</th><th></th><th class=\"iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></th></tr></thead><tbody>         ");
// iterate topSessions
;(function(){
  var $$obj = topSessions;
  if ('number' == typeof $$obj.length) {

    for (var rank = 0, $$l = $$obj.length; rank < $$l; rank++) {
      var session = $$obj[rank];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues') || [], {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), 'title':(view.capitalize(session.get('submittedCodeLanguage'))), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  } else {
    var $$l = 0;
    for (var rank in $$obj) {
      $$l++;      var session = $$obj[rank];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues') || [], {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), 'title':(view.capitalize(session.get('submittedCodeLanguage'))), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  }
}).call(this);

if ( !showJustTop && team.leaderboard.nearbySessions().length)
{
buf.push("<tr class=\"active\"><td colspan=\"4\" class=\"ellipsis-row\">...</td></tr>");
// iterate team.leaderboard.nearbySessions()
;(function(){
  var $$obj = team.leaderboard.nearbySessions();
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var session = $$obj[$index];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues'), {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = session.rank) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var session = $$obj[$index];

var myRow = session.get('creator') == me.id
var sessionStats = league ? (_.find(session.get('leagues'), {leagueID: league.id}) || {}).stats || {} : session.attributes;
buf.push("<tr" + (jade.attrs({ 'data-player-id':(session.get('creator')), 'data-session-id':(session.id), "class": [(myRow ? "success" : "")] }, {"class":true,"data-player-id":true,"data-session-id":true})) + "><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + session.get('submittedCodeLanguage') + "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td>");
if ( levelType == 'hero-ladder')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + ((session.get('heroConfig') || {}).thangType || '529ffbf1cf1818f2be000001') + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td>");
}
buf.push("<td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = session.rank) ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = Math.round((sessionStats.totalScore || session.get('totalScore') / 2) * 100)) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ "class": [('name-col-cell' + ((new RegExp('(Simple|Shaman|Brawler|Chieftain|Thoktar) CPU')).test(session.get('creatorName')) ? ' ai' : ''))] }, {"class":true})) + ">" + (jade.escape(null == (jade.interp = session.get('creatorName') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"age-cell\">" + (jade.escape(null == (jade.interp = moment(session.get('submitDate')).fromNow().replace('a few ', '')) ? "" : jade.interp)) + "</td><td class=\"fight-cell\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "?team=" + (team.otherTeam) + "&opponent=" + (session.id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></td><td class=\"spectate-cell iconic-cell\"><div class=\"glyphicon glyphicon-eye-open\"></div></td></tr>");
    }

  }
}).call(this);

}
buf.push("</tbody></table>");
if ( teamIndex == 1)
{
buf.push("<div data-i18n=\"editor.more\" class=\"btn btn-sm load-more-ladder-entries\">More</div>");
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("<div class=\"column col-md-4 secret\"><h4 data-i18n=\"ladder.friends_playing\" class=\"friends-header\">Friends Playing</h4>");
if ( me.get('anonymous'))
{
buf.push("<div class=\"alert alert-info\"><a data-toggle=\"coco-modal\" data-target=\"core/CreateAccountModal\" data-i18n=\"ladder.log_in_for_friends\">Log in to play with your friends!</a></div>");
}
else
{
if ( !onFacebook || !onGPlus)
{
buf.push("<div class=\"connect-buttons\"><span data-i18n=\"ladder.social_connect_blurb\">Connect and play against your friends!</span><br/>");
if ( !onFacebook)
{
buf.push("<button data-i18n=\"community.facebook\" class=\"btn btn-sm connect-facebook\">Facebook</button>");
}
if ( !onGPlus)
{
buf.push("<button data-i18n=\"community.gplus\" class=\"btn btn-sm connect-google-plus\">Google+</button>");
}
buf.push("</div>");
}
if ( view.friends)
{
// iterate view.friends
;(function(){
  var $$obj = view.friends;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var friend = $$obj[$index];

buf.push("<p class=\"friend-entry\"><img" + (jade.attrs({ 'src':(friend.imageSource), "class": [('img-thumbnail')] }, {"src":true})) + "/><span>" + (jade.escape(null == (jade.interp = friend.creatorName + ' (' + friend.name + ')') ? "" : jade.interp)) + "</span><br/><span>" + (jade.escape(null == (jade.interp = Math.round(friend.totalScore * 100)) ? "" : jade.interp)) + "</span><span>: </span><span>" + (jade.escape(null == (jade.interp = friend.team) ? "" : jade.interp)) + "</span><br/><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "/?team=" + (friend.otherTeam) + "&opponent=" + (friend._id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></p>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var friend = $$obj[$index];

buf.push("<p class=\"friend-entry\"><img" + (jade.attrs({ 'src':(friend.imageSource), "class": [('img-thumbnail')] }, {"src":true})) + "/><span>" + (jade.escape(null == (jade.interp = friend.creatorName + ' (' + friend.name + ')') ? "" : jade.interp)) + "</span><br/><span>" + (jade.escape(null == (jade.interp = Math.round(friend.totalScore * 100)) ? "" : jade.interp)) + "</span><span>: </span><span>" + (jade.escape(null == (jade.interp = friend.team) ? "" : jade.interp)) + "</span><br/><a" + (jade.attrs({ 'href':("/play/level/" + (view.level.get('slug') || view.level.id) + "/?team=" + (friend.otherTeam) + "&opponent=" + (friend._id) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + "><span data-i18n=\"ladder.fight\">Fight!</span></a></p>");
    }

  }
}).call(this);

}
else if ( onFacebook || onGPlus)
{
buf.push("<p data-i18n=\"ladder.invite_friends_to_battle\">Invite your friends to join you in battle!</p>");
}
}
buf.push("</div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/ladder/ladder", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),features = locals_.features,me = locals_.me,view = locals_.view,i18n = locals_.i18n,_ = locals_._,usesSocialMedia = locals_.usesSocialMedia,isIE = locals_.isIE,fbRef = locals_.fbRef;buf.push("<div id=\"site-nav\"><a href=\"/\"><img id=\"nav-logo\" src=\"/images/pages/base/logo.png\" title=\"CodeCombat - Learn how to code by playing a game\" alt=\"CodeCombat\"/></a><div id=\"site-nav-links\"><a href=\"/\"><img id=\"small-nav-logo\" src=\"/images/pages/base/logo.png\" title=\"CodeCombat - Learn how to code by playing a game\" alt=\"CodeCombat\"/></a><a href=\"/\"><span class=\"glyphicon glyphicon-home\"></span></a>");
if ( !features.playViewsOnly)
{
buf.push("<a href=\"/play\" data-i18n=\"common.play\"></a><a href=\"/play/ladder\" data-i18n=\"game_menu.multiplayer_tab\"></a>");
if ( me.isStudent())
{
buf.push("<a href=\"/students\" data-i18n=\"nav.my_courses\"></a>");
}
if ( me.isTeacher())
{
buf.push("<a href=\"/teachers/classes\" data-i18n=\"nav.my_classrooms\"></a>");
}
buf.push("<a href=\"/about\" data-i18n=\"nav.about\"></a><a" + (jade.attrs({ 'href':(view.forumLink()), 'data-i18n':("nav.forum") }, {"href":true,"data-i18n":true})) + "></a><a href=\"/community\" data-i18n=\"nav.community\"></a>");
if ( me.get('anonymous') === false)
{
buf.push("<span class=\"dropdown\"><button href=\"#\" data-toggle=\"dropdown\" class=\"btn btn-sm header-font dropdown-toggle\">");
if ( me.get('photoURL'))
{
buf.push("<img" + (jade.attrs({ 'src':(me.getPhotoURL(18)), 'alt':(""), "class": [('account-settings-image')] }, {"src":true,"alt":true})) + "/>");
}
else
{
buf.push("<i class=\"glyphicon glyphicon-user\"></i>");
}
buf.push("<span data-i18n=\"nav.account\" href=\"/account\" class=\"spl spr\"></span><span class=\"caret\"></span></button><ul role=\"menu\" class=\"dropdown-menu\"><li class=\"user-dropdown-header\"><span class=\"user-level\">" + (jade.escape(null == (jade.interp = me.level()) ? "" : jade.interp)) + "</span><a" + (jade.attrs({ 'href':("/user/" + (me.getSlugOrID()) + "") }, {"href":true})) + "><div" + (jade.attrs({ 'style':("background-image: url(" + (me.getPhotoURL()) + ")"), "class": [('img-circle')] }, {"style":true})) + "></div></a><h3>" + (jade.escape(null == (jade.interp = me.broadName()) ? "" : jade.interp)) + "</h3></li><li><a" + (jade.attrs({ 'href':("/user/" + (me.getSlugOrID()) + ""), 'data-i18n':("nav.profile") }, {"href":true,"data-i18n":true})) + "></a></li><li><a href=\"/account/settings\" data-i18n=\"play.settings\"></a></li>");
if ( me.isAdmin() || !(me.isTeacher() || me.isStudent()))
{
buf.push("<li><a href=\"/account/payments\" data-i18n=\"account.payments\"></a></li>");
}
if ( me.isAdmin() || !(me.isTeacher() || me.isStudent()) || me.hasSubscription())
{
buf.push("<li><a href=\"/account/subscription\" data-i18n=\"account.subscription\"></a></li>");
}
if ( me.isAdmin() || !(me.isTeacher() || me.isStudent()))
{
buf.push("<li><a href=\"/account/prepaid\" data-i18n=\"account.prepaid_codes\"></a></li>");
}
buf.push("<li><a id=\"logout-button\" data-i18n=\"login.log_out\"></a></li></ul></span>");
}
else
{
buf.push("<button data-i18n=\"login.sign_up\" class=\"btn btn-sm btn-primary header-font signup-button\"></button><button data-i18n=\"login.log_in\" class=\"btn btn-sm btn-default header-font login-button\"></button>");
}
}
buf.push("<select class=\"language-dropdown form-control\"></select></div></div><div id=\"site-content-area\">");
var base = "/images/pages/play/ladder/prize_";
buf.push("<div id=\"ladder-top\">");
if ( view.leagueType === 'course' && view.course)
{
buf.push("<div id=\"course-header\"><div id=\"course-details-link\"><a" + (jade.attrs({ 'href':("/students/" + (view.course.id) + "/" + (view.league.id) + "") }, {"href":true})) + "><span class=\"glyphicon glyphicon-arrow-left\"></span><span class=\"spl\">Levels</span></a></div><div class=\"text-center\"><span id=\"course-name\"><span>" + (jade.escape(null == (jade.interp = i18n(view.course.attributes, 'name')) ? "" : jade.interp)) + "</span><span class=\"spl\">- Arena</span></span></div></div>");
}
buf.push("<div id=\"level-column\">");
if ( view.level.get('name') != 'Cavern Survival')
{
if ( view.levelDescription)
{
buf.push("<div>" + (null == (jade.interp = view.levelDescription) ? "" : jade.interp) + "</div>");
}
}
else
{
buf.push("<img src=\"/file/db/level/544437e0645c0c0000c3291d/OCT30-Cavern Survival.png\"/>");
}
if ( view.leagueType === 'clan')
{
buf.push("<h1 class=\"league-header\"><a" + (jade.attrs({ 'href':("/clans/" + (view.league.id) + "") }, {"href":true})) + ">" + (jade.escape(null == (jade.interp = view.league.get('name')) ? "" : jade.interp)) + "</a><span data-i18n=\"ladder.league\" class=\"spl\">League</span></h1>");
}
buf.push("</div>");
if ( view.level.get('name') == 'Greed')
{
buf.push("<div class=\"tournament-blurb\"><h2><span data-i18n=\"ladder.tournament_ended\">Tournament ended</span> " + (jade.escape((jade.interp = view.tournamentTimeLeft) == null ? '' : jade.interp)) + "</h2><p><span data-i18n=\"ladder.tournament_blurb\">Write code, collect gold, build armies, crush foes, win prizes, and upgrade your career in our $40,000 Greed tournament! Check out the details</span> <a href=\"http://blog.codecombat.com/a-31-trillion-390-billion-statement-programming-war-between-545-wizards\" data-i18n=\"ladder.tournament_blurb_blog\">on our blog</a>.</p><p><strong>Tournament ended! </strong><a href=\"#winners\">Behold the winners</a>. Thanks for playing! You can <strong>still play</strong> Greed and all of our other <a href=\"/play/ladder\">multiplayer arenas</a>.</p><p>Want to commiserate? Head over to <a href=\"http://discourse.codecombat.com/\">the forum</a> and discuss your strategies, your triumphs, and your turmoils.</p><div class=\"sponsor-logos\"><a href=\"https://heapanalytics.com/\"><img" + (jade.attrs({ 'src':(base + "heap.png") }, {"src":true})) + "/></a><a href=\"https://www.firebase.com/\"><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/></a><a href=\"https://onemonthrails.com/\"><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/></a><a href=\"http://www.jetbrains.com/webstorm/\"><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/></a><a href=\"http://shop.oreilly.com/category/ebooks.do\"><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/></a><a href=\"http://aws.amazon.com/\"><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/></a></div></div>");
}
if ( view.level.get('name') == 'Criss-Cross')
{
buf.push("<div class=\"tournament-blurb\"><h2><span data-i18n=\"ladder.tournament_ended\">Tournament ended</span> " + (jade.escape((jade.interp = view.tournamentTimeLeft) == null ? '' : jade.interp)) + "</h2><p><span data-i18n=\"ladder.tournament_blurb_criss_cross\">Win bids, construct paths, outwit opponents, grab gems, and upgrade your career in our Criss-Cross tournament! Check out the details</span> <a href=\"http://blog.codecombat.com/a-good-new-fashioned-programming-throwdown\" data-i18n=\"ladder.tournament_blurb_blog\">on our blog</a>.</p><p><strong>Tournament ended! </strong><a href=\"#winners\">Behold the winners</a>. Thanks for playing! You can <strong>still play</strong> Criss-Cross and all of our other <a href=\"/play/ladder\">multiplayer arenas</a>.</p><p>Want to commiserate? Head over to <a href=\"http://discourse.codecombat.com/\">the forum</a> and discuss your strategies, your triumphs, and your turmoils.</p></div>");
}
if ( view.level.get('name') == 'Zero Sum' && !view.league)
{
buf.push("<div class=\"tournament-blurb\"><h2><span> </span> Zero Sum - A destruição</h2><p><span></span> O \"Zero Sum\" é um modo de combate de feiticeiros que tem como objetivo\n aniquilar seu inimigo em dois minutos, entretanto um terceiro elemento surpresa\n aparece para atrapalhar o duelo sendo muito forte e ágil. Colete os itens\n disponivel no mapa para construir seu exército e ter forças para derrota-lo\n antes que seja seu fim.</p></div>");
}
if ( view.level.get('name') == 'Cavern Survival')
{
buf.push("<div class=\"tournament-blurb\"><h2><span></span> Cavern Survival - A sobrevivência</h2><p></p> O \"Cavern Survival\" é um modo de sobrevivência, no qual, o jogador que\n sobreviver por mais tempo vence. Seu personagem ficará em uma sala separada\n do seu inimigo, mas seu rival será outro. Uma série de ogros invadirá ambas\n as regiões com o objetivo de eliminar os dois players, utilize táticas defensivas\n para acabar de uma vez com as chances do seu oponente.<p></p> Essa é a unica arena que seus equipamentos e heróis serão levados em consideração,\n então compre seu arsenal e enfrente seu inimigo preparado.</div>");
}
if ( view.level.get('name') == 'Ace of Coders')
{
buf.push("<div class=\"tournament-blurb\"><h2><span></span> Ace of Coders - A arena</h2><p></p> O “Ace of coders” é um modo de confronto frontal em que os usuários escrevem\n seus códigos de combate e seus inimigos tentam vencer-los utilizando estratégias\n diferentes ou um código mais otimizado que pensem em situações diversas para\n neutralizar seu oponente. Alguns conceitos podem ser aprendidos fora da\n plataforma para aplicá-los em suas instruções, tornando-se algo divertido,\n desafiador e didático.</div>");
}
buf.push("<div id=\"columns\" class=\"row\"><div class=\"column col-md-2\"></div>");
if ( view.teams)
{
// iterate view.teams
;(function(){
  var $$obj = view.teams;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var team = $$obj[$index];

buf.push("<div class=\"column col-md-4\"><a" + (jade.attrs({ 'data-team':(team.id), "class": [("play-button btn btn-illustrated btn-block btn-lg " + (team.id == 'ogres' ? 'btn-primary' : 'btn-danger'))] }, {"class":true,"data-team":true})) + "><span data-i18n=\"play.play_as\">Play As</span> <span>" + (jade.escape(null == (jade.interp = team.displayName) ? "" : jade.interp)) + "</span></a></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var team = $$obj[$index];

buf.push("<div class=\"column col-md-4\"><a" + (jade.attrs({ 'data-team':(team.id), "class": [("play-button btn btn-illustrated btn-block btn-lg " + (team.id == 'ogres' ? 'btn-primary' : 'btn-danger'))] }, {"class":true,"data-team":true})) + "><span data-i18n=\"play.play_as\">Play As</span> <span>" + (jade.escape(null == (jade.interp = team.displayName) ? "" : jade.interp)) + "</span></a></div>");
    }

  }
}).call(this);

}
buf.push("<div class=\"column col-md-2\"></div></div>");
if ( view.leagueType !== 'course')
{
buf.push("<div class=\"spectate-button-container\"><a" + (jade.attrs({ 'href':("/play/spectate/" + (view.level.get('slug')) + "" + (view.league ? "?league=" + view.league.id : "")), "class": [('spectate-button'),('btn'),('btn-illustrated'),('btn-info'),('center')] }, {"href":true})) + "><span data-i18n=\"play.spectate\">Spectate</span></a></div>");
}
buf.push("</div><ul class=\"nav nav-pills\"><li class=\"active\"><a href=\"#ladder\" data-toggle=\"tab\" data-i18n=\"general.ladder\">Ladder</a></li>");
if ( !me.get('anonymous'))
{
buf.push("<li><a href=\"#my-matches\" data-toggle=\"tab\" data-i18n=\"ladder.my_matches\">My Matches</a></li>");
if ( view.leagueType !== 'course')
{
buf.push("<li><a href=\"#simulate\" data-toggle=\"tab\" data-i18n=\"ladder.simulate\">Simulate</a></li>");
}
}
if ( view.level.get('name') == 'Greed')
{
buf.push("<li><a href=\"#prizes\" data-toggle=\"tab\" data-i18n=\"ladder_prizes.prizes\">Prizes</a></li>");
}
if ( view.level.get('name') == 'Greed')
{
buf.push("<li><a href=\"#rules\" data-toggle=\"tab\" data-i18n=\"ladder.rules\">Rules</a></li>");
}
buf.push("</ul><div class=\"tab-content\"><div id=\"ladder\" class=\"tab-pane active well\"><div id=\"ladder-tab-view\"></div></div><div id=\"my-matches\" class=\"tab-pane well\"><div id=\"my-matches-tab-view\"></div></div><div id=\"simulate\" class=\"tab-pane well\"><div id=\"simulate-tab-view\"></div></div>");
if ( view.level.get('name') == 'Greed')
{
buf.push("<div id=\"prizes\" class=\"tab-pane well\"><h1 data-i18n=\"ladder_prizes.title\">Tournament Prizes</h1><p><span data-i18n=\"ladder_prizes.blurb_1\">These prizes will be awarded according to</span> <a href=\"#rules\" data-i18n=\"ladder_prizes.blurb_2\">the tournament rules</a> <span data-i18n=\"ladder_prizes.blurb_3\">to the top human and ogre players.</span> <strong data-i18n=\"ladder_prizes.blurb_4\">Two teams means double the prizes!</strong> <span data-i18n=\"ladder_prizes.blurb_5\">(There will be two first place winners, two second-place winners, etc.)</span></p><table id=\"prize_table\" class=\"table\"><thead><tr><td data-i18n=\"ladder_prizes.rank\">Rank</td><td data-i18n=\"ladder_prizes.prizes\">Prizes</td><td data-i18n=\"ladder_prizes.total_value\">Total Value</td></tr></thead><tbody><tr> <td>1st</td><td> <ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash1.png") }, {"src":true})) + "/><span>$512 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "custom_wizard.png") }, {"src":true})) + "/><span data-i18n=\"ladder_prizes.custom_wizard\">Custom CodeCombat Wizard</span></li><li><img" + (jade.attrs({ 'src':(base + "custom_avatar.png") }, {"src":true})) + "/><span data-i18n=\"ladder_prizes.custom_avatar\">Custom CodeCombat avatar</span></li><li><img" + (jade.attrs({ 'src':(base + "heap.png") }, {"src":true})) + "/><span><a href=\"https://heapanalytics.com/\">Heap Analytics</a> <span data-i18n=\"ladder_prizes.heap\">for six months of \"Startup\" access</span> - $354</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_coupon\">coupon: choose either Rails or HTML</span> - $99</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$2054</td></tr><tr> <td>2nd</td><td> <ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash2.png") }, {"src":true})) + "/><span>$256 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "custom_avatar.png") }, {"src":true})) + "/><span data-i18n=\"ladder_prizes.custom_avatar\">Custom CodeCombat avatar</span></li><li><img" + (jade.attrs({ 'src':(base + "heap.png") }, {"src":true})) + "/><span><a href=\"https://heapanalytics.com/\">Heap Analytics</a> <span data-i18n=\"ladder_prizes.heap\">for six months of \"Startup\" access</span> - $354</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$1229</td></tr><tr> <td>3rd</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash2.png") }, {"src":true})) + "/><span>$128 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "custom_avatar.png") }, {"src":true})) + "/><span data-i18n=\"ladder_prizes.custom_avatar\">Custom CodeCombat avatar</span></li><li><img" + (jade.attrs({ 'src':(base + "heap.png") }, {"src":true})) + "/><span><a href=\"https://heapanalytics.com/\">Heap Analytics</a> <span data-i18n=\"ladder_prizes.heap\">for six months of \"Startup\" access</span> - $354</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$1101</td></tr><tr> <td>4th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$64 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "heap.png") }, {"src":true})) + "/><span><a href=\"https://heapanalytics.com/\">Heap Analytics</a> <span data-i18n=\"ladder_prizes.heap\">for six months of \"Startup\" access</span> - $354</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$887</td></tr><tr> <td>5th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$32 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "heap.png") }, {"src":true})) + "/><span><a href=\"https://heapanalytics.com/\">Heap Analytics</a> <span data-i18n=\"ladder_prizes.heap\">for six months of \"Startup\" access</span> - $354</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$855</td></tr><tr> <td>6th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$16 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$485</td></tr><tr> <td>7th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$8 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$477</td></tr><tr> <td>8th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$4 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$473</td></tr><tr> <td>9th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$2 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$471</td></tr><tr> <td>10th</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "cash3.png") }, {"src":true})) + "/><span>$1 </span><span data-i18n=\"ladder_prizes.in_cash\">in cash</span></li><li><img" + (jade.attrs({ 'src':(base + "firebase.png") }, {"src":true})) + "/><span><a href=\"https://www.firebase.com/\">Firebase</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $300</span></li><li><img" + (jade.attrs({ 'src':(base + "one_month.png") }, {"src":true})) + "/><span><a href=\"https://onemonthrails.com/\">One Month Rails</a> <span data-i18n=\"ladder_prizes.one_month_discount\">discount, 30% off: choose either Rails or HTML</span> - $30</span></li><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$470</td></tr><tr> <td>11 - 40</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "webstorm.png") }, {"src":true})) + "/><span><a href=\"http://www.jetbrains.com/webstorm/\">Webstorm</a> <span data-i18n=\"ladder_prizes.license\">license</span> - $49</span></li><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$139</td></tr><tr> <td>41 - 100</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "oreilly.png") }, {"src":true})) + "/><span><a href=\"http://shop.oreilly.com/category/ebooks.do\">O'Reilly</a> <span data-i18n=\"ladder_prizes.oreilly\">ebook of your choice</span> - $40</span></li><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$90</td></tr><tr> <td>101+</td><td><ul class=\"list-unstyled\"><li><img" + (jade.attrs({ 'src':(base + "aws.png") }, {"src":true})) + "/><span><a href=\"http://aws.amazon.com/\">Amazon Web Services</a> <span data-i18n=\"ladder_prizes.credits\">credits</span> - $50</span></li></ul></td><td>$50</td></tr></tbody></table></div>");
}
if ( view.level.get('name') == 'Greed')
{
buf.push("<div id=\"rules\" class=\"tab-pane well\"><h1 data-i18n=\"ladder.tournament_rules\">Tournament Rules</h1><h2>General</h2><p>You don't have to buy anything to participate in the tournament, and trying to pay us won't increase your odds of winning. Although we don't anticipate the rules changing, they are subject to change.</p><h2>Dates and Times</h2><p>The tournament starts on Tuesday, May 20 at 8:30AM and ends on Tuesday, June 10 at 5:00PM PDT. After the tournament finishes, we will check the games manually to prevent duplicate entries and cheating. We will email all the winners within two weeks of the end date.</p><h2>Eligilibity</h2><p>The tournament is open to anyone over the age of 13. Players are allowed to form teams to compete, but we will only be rewarding submissions, so if a team of 10 wins, they will need to split the prize.</p><p>The tournament is NOT open to people who live in countries or states that prohibit participating or receiving a prize in a challenge (these include, but are not limited to Brazil, Quebec, Italy, Cuba, Sudan, Iran, North Korea, and Syria). To clarify, people from the aforementioned places are welcome to play the Greed level, but cannot receive prizes. Organizations involved in putting the tournament together (namely CodeCombat and all of our employees) are excluded from participating/winning prizes.</p><h2>Submission Requirements</h2><p> \nTo be eligible to win prizes, players must submit their code to the Greed ladder for ranking AND defeat our default AI. Every player that submits their code to the ladder and beats our default AI will receive $50 in AWS credits as described on the <a href=\"#prizes\" data-i18n=\"ladder_prizes.tournament_prizes\">Tournament Prizes</a> page.</p><p>There are some restrictions regarding who can use the AWS credits. Please see the additional rules of use on <a href=\"https://aws.amazon.com/awscredits\">Amazon's AWS credits page.</a></p><h2>Submission Rights</h2><p>We reserve the right to use your submission and site identity (including username, avatar, and any information you mark as public) to promote the tournament. This is in keeping with our overall site terms of service.</p><h2>Judging Criteria</h2><p>We will calculate final rankings by running the top games from the public leaderboard from both teams against each other and sorting solutions by wins and losses. The number of games from each side to be used in the final ranking is yet to be determined, but is probably around 150. The final ranking will be performed with a snapshot of solutions taken the end of the contest. The final ranking methedology is subject to change. We will not be evaluating code in any manual way for common traits like adequate documentation, cleanliness, etc. We reserve the right to disqualify any player for any reason. The public leaderboards are a good proxy for your final rank, but are not guaranteed to be accurate. To repeat, <strong>the leaderboards are only a preliminary proxy for your final rank</strong>.</p><p>Your rank will change as players submit more solutions and more matches are played according to <a href=\"https://github.com/codecombat/bayesian-battle\">our open-source ranking library, Bayesian Battle</a>, but our final ranking will use an exhaustive pairwise matching round amongst the top players as described above.</p><h2>Prizes</h2><p> \nPrizes will be awarded to everyone that achieves a rank covered on the <a href=\"#prizes\" data-i18n=\"ladder.prizes\">Tournament Prizes</a> page.</p><p>Please remember that the player ranks listed on the prize page refer to ranks WITHIN a leaderboard. So if you are the #2 Ogre player, you will win the #2 prize. Similarly, if you are the #3 Human player, you will receive the #3 prize. If you have submissions on both leaderboards, we will only count your highest submission for the purposes of distributing prizes. As a result, your final ranking may be higher than your preliminary ranking due to removing duplicate submissions above you.</p><h2>Verifying Potential Winners</h2><p>We may ask players to identify themselves so that we can detect duplicate entries. This may be done in the form of a Facebook, Google+, or LinkedIn profile, but we may need more information. All players eligible for prizes agree that refusing to provide us with identifying information may lead to ineligibility for prizes. </p><p>On a related note, if we have reason to believe that a player has intentionally submitted duplicate entries for the purpose of receiving more prizes or manipulating the leaderboards in any way, we will remove that player and all submissions we believe to be associated with them. We want this to be fair for everyone.</p><h2>Prize Distribution</h2><p>Different sponsors require different ways of claiming their prizes, and we will work with winners to ensure they are able to redeem their prizes in a timely fashion. For cash prizes, we will deliver the money via PayPal. We will not ship checks, money orders, or cash through the mail. We will assume reasonable international money transfer costs to deliver cash prizes through Paypal.</p><p>Winners are responsible for any taxes associated with claiming their prizes. CodeCombat is not responsible for filing paperwork on behalf of winners for tax claims. </p><h2>Contact</h2><p>If you have any questions or would like to get in touch with us for any other reason, we can be reached at team@codecombat.com. You can also post to our public <a href=\"http://discourse.codecombat.com/\">Discourse forum</a>.</p></div>");
}
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<div id=\"winners\" class=\"tab-pane well\"><h1 data-i18n=\"ladder.winners\">Winners</h1><table class=\"table table-hover table-condensed\"><thead><tr><th data-i18n=\"ladder_prizes.rank\">Rank</th>");
if ( view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<th></th>");
}
buf.push("<th>Human</th>");
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Zero Sum')
{
buf.push("<th>Human wins/losses/ties</th>");
}
else
{
buf.push("<th>Human score</th>");
}
if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<th></th>");
}
if ( view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<th></th>");
}
buf.push("<th>Ogre</th>");
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Zero Sum')
{
buf.push("<th>Ogre wins/losses/ties</th>");
}
else
{
buf.push("<th>Ogre score</th>");
}
buf.push("<th data-i18n=\"play.spectate\">Spectate</th></tr></thead><tbody>");
// iterate view.winners.humans
;(function(){
  var $$obj = view.winners.humans;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var human = $$obj[index];

var ogre = view.winners.ogres[index]
buf.push("<tr> <td>" + (jade.escape(null == (jade.interp = human.rank) ? "" : jade.interp)) + "</td>");
if ( view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + human.codeLanguage + "_icon.png)"), 'title':(_.string.capitalize(human.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
}
buf.push("<td>" + (jade.escape(null == (jade.interp = human.name) ? "" : jade.interp)) + "</td>");
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td><span class=\"win\">" + (jade.escape(null == (jade.interp = human.wins) ? "" : jade.interp)) + "</span> - <span class=\"loss\">" + (jade.escape(null == (jade.interp = human.losses) ? "" : jade.interp)) + "</span> - ");
if ( view.level.get('name') == 'Greed')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = 377 - human.wins - human.losses) ? "" : jade.interp)) + "</span>");
}
else if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = 108 - human.wins - human.losses) ? "" : jade.interp)) + "</span>");
}
buf.push("</td>");
}
else
{
buf.push("<td><span>" + (jade.escape(null == (jade.interp = Math.round(100 * human.score)) ? "" : jade.interp)) + "</span></td>");
}
if ( ogre)
{
if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<td>" + (jade.escape(null == (jade.interp = ogre.rank) ? "" : jade.interp)) + "</td>");
}
if ( view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + ogre.codeLanguage + "_icon.png)"), 'title':(_.string.capitalize(ogre.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
}
buf.push("<td>" + (jade.escape(null == (jade.interp = ogre.name) ? "" : jade.interp)) + "</td>");
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td><span class=\"win\">" + (jade.escape(null == (jade.interp = ogre.wins) ? "" : jade.interp)) + "</span> - <span class=\"loss\">" + (jade.escape(null == (jade.interp = ogre.losses) ? "" : jade.interp)) + "</span> - ");
if ( view.level.get('name') == 'Greed')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = 407 - ogre.wins - ogre.losses) ? "" : jade.interp)) + "</span>");
}
else if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = Math.max(0, 163 - ogre.wins - ogre.losses)) ? "" : jade.interp)) + "</span>");
}
buf.push("</td>");
}
else
{
buf.push("<td><span>" + (jade.escape(null == (jade.interp = Math.round(100 * ogre.score)) ? "" : jade.interp)) + "</span></td>");
}
buf.push("<td><a" + (jade.attrs({ 'href':("/play/spectate/" + view.level.get('slug') + "?session-one=" + human.sessionID + "&session-two=" + ogre.sessionID), 'data-i18n':("ladder.watch_battle") }, {"href":true,"data-i18n":true})) + ">Watch the battle</a></td>");
}
else
{
buf.push("<td></td><td></td><td></td>");
}
buf.push("</tr>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var human = $$obj[index];

var ogre = view.winners.ogres[index]
buf.push("<tr> <td>" + (jade.escape(null == (jade.interp = human.rank) ? "" : jade.interp)) + "</td>");
if ( view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + human.codeLanguage + "_icon.png)"), 'title':(_.string.capitalize(human.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
}
buf.push("<td>" + (jade.escape(null == (jade.interp = human.name) ? "" : jade.interp)) + "</td>");
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td><span class=\"win\">" + (jade.escape(null == (jade.interp = human.wins) ? "" : jade.interp)) + "</span> - <span class=\"loss\">" + (jade.escape(null == (jade.interp = human.losses) ? "" : jade.interp)) + "</span> - ");
if ( view.level.get('name') == 'Greed')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = 377 - human.wins - human.losses) ? "" : jade.interp)) + "</span>");
}
else if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = 108 - human.wins - human.losses) ? "" : jade.interp)) + "</span>");
}
buf.push("</td>");
}
else
{
buf.push("<td><span>" + (jade.escape(null == (jade.interp = Math.round(100 * human.score)) ? "" : jade.interp)) + "</span></td>");
}
if ( ogre)
{
if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<td>" + (jade.escape(null == (jade.interp = ogre.rank) ? "" : jade.interp)) + "</td>");
}
if ( view.level.get('name') == 'Criss-Cross' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + ogre.codeLanguage + "_icon.png)"), 'title':(_.string.capitalize(ogre.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td>");
}
buf.push("<td>" + (jade.escape(null == (jade.interp = ogre.name) ? "" : jade.interp)) + "</td>");
if ( view.level.get('name') == 'Greed' || view.level.get('name') == 'Zero Sum')
{
buf.push("<td><span class=\"win\">" + (jade.escape(null == (jade.interp = ogre.wins) ? "" : jade.interp)) + "</span> - <span class=\"loss\">" + (jade.escape(null == (jade.interp = ogre.losses) ? "" : jade.interp)) + "</span> - ");
if ( view.level.get('name') == 'Greed')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = 407 - ogre.wins - ogre.losses) ? "" : jade.interp)) + "</span>");
}
else if ( view.level.get('name') == 'Zero Sum')
{
buf.push("<span class=\"tie\">" + (jade.escape(null == (jade.interp = Math.max(0, 163 - ogre.wins - ogre.losses)) ? "" : jade.interp)) + "</span>");
}
buf.push("</td>");
}
else
{
buf.push("<td><span>" + (jade.escape(null == (jade.interp = Math.round(100 * ogre.score)) ? "" : jade.interp)) + "</span></td>");
}
buf.push("<td><a" + (jade.attrs({ 'href':("/play/spectate/" + view.level.get('slug') + "?session-one=" + human.sessionID + "&session-two=" + ogre.sessionID), 'data-i18n':("ladder.watch_battle") }, {"href":true,"data-i18n":true})) + ">Watch the battle</a></td>");
}
else
{
buf.push("<td></td><td></td><td></td>");
}
buf.push("</tr>");
    }

  }
}).call(this);

buf.push("</tbody></table></div>");
}
if ( view.level.get('name') == 'Ace of Coders')
{
buf.push("<div id=\"winners\" class=\"tab-pane well\"><h1 data-i18n=\"ladder.winners\">Winners</h1><table class=\"table table-hover table-condensed\"><thead><tr><th data-i18n=\"ladder_prizes.rank\">Rank</th><th></th><th data-i18n=\"general.player\">Player</th><th>Wins</th><th>Losses</th><th data-i18n=\"play.spectate\">Spectate</th></tr></thead><tbody>");
// iterate view.winners.humans
;(function(){
  var $$obj = view.winners.humans;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var player = $$obj[$index];

buf.push("<tr> <td>" + (jade.escape(null == (jade.interp = player.rank) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + player.codeLanguage + "_icon.png)"), 'title':(_.string.capitalize(player.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td><td>" + (jade.escape(null == (jade.interp = player.name) ? "" : jade.interp)) + "</td><td><span class=\"win\">" + (jade.escape(null == (jade.interp = player.wins) ? "" : jade.interp)) + "</span></td><td><span class=\"loss\">" + (jade.escape(null == (jade.interp = player.losses) ? "" : jade.interp)) + "</span></td><td>");
if ( player.team == "ogres")
{
buf.push("<a" + (jade.attrs({ 'href':("/play/spectate/" + view.level.get('slug') + "?session-one=55df8c9207d920b7e4262f33" + "&session-two=" + player.sessionID), 'data-i18n':("ladder.watch_battle") }, {"href":true,"data-i18n":true})) + ">Watch the battle</a>");
}
else
{
buf.push("<a" + (jade.attrs({ 'href':("/play/spectate/" + view.level.get('slug') + "?session-one=" + player.sessionID + "&session-two=55e1d23686c019bc47b640fe"), 'data-i18n':("ladder.watch_battle") }, {"href":true,"data-i18n":true})) + ">Watch the battle</a>");
}
buf.push("</td></tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var player = $$obj[$index];

buf.push("<tr> <td>" + (jade.escape(null == (jade.interp = player.rank) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + player.codeLanguage + "_icon.png)"), 'title':(_.string.capitalize(player.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td><td>" + (jade.escape(null == (jade.interp = player.name) ? "" : jade.interp)) + "</td><td><span class=\"win\">" + (jade.escape(null == (jade.interp = player.wins) ? "" : jade.interp)) + "</span></td><td><span class=\"loss\">" + (jade.escape(null == (jade.interp = player.losses) ? "" : jade.interp)) + "</span></td><td>");
if ( player.team == "ogres")
{
buf.push("<a" + (jade.attrs({ 'href':("/play/spectate/" + view.level.get('slug') + "?session-one=55df8c9207d920b7e4262f33" + "&session-two=" + player.sessionID), 'data-i18n':("ladder.watch_battle") }, {"href":true,"data-i18n":true})) + ">Watch the battle</a>");
}
else
{
buf.push("<a" + (jade.attrs({ 'href':("/play/spectate/" + view.level.get('slug') + "?session-one=" + player.sessionID + "&session-two=55e1d23686c019bc47b640fe"), 'data-i18n':("ladder.watch_battle") }, {"href":true,"data-i18n":true})) + ">Watch the battle</a>");
}
buf.push("</td></tr>");
    }

  }
}).call(this);

buf.push("</tbody></table></div>");
}
buf.push("</div></div><div class=\"achievement-corner\"></div><div id=\"site-footer\"><img id=\"footer-background\" src=\"/images/pages/base/nav_background.png\"/><div" + (jade.attrs({ 'id':('footer-links'), "class": [(features.playViewsOnly ? 'hide' : '')] }, {"class":true})) + "><a href=\"/about\" data-i18n=\"nav.about\"></a>");
if ( !me.isStudent())
{
buf.push("<a tabindex=\"-1\" data-i18n=\"nav.contact\" class=\"contact-modal\"></a>");
}
buf.push("<a href=\"http://blog.codecombat.com/\" data-i18n=\"nav.blog\"></a><a href=\"https://jobs.lever.co/codecombat\" tabindex=\"-1\" data-i18n=\"nav.careers\"></a><a href=\"/legal\" tabindex=\"-1\" data-i18n=\"nav.legal\"></a><a href=\"/privacy\" tabindex=\"-1\" data-i18n=\"legal.privacy_title\"></a><a href=\"/contribute\" tabindex=\"-1\" data-i18n=\"nav.contribute\"></a>");
if ( !me.isStudent())
{
buf.push("<a href=\"/play/ladder\" tabindex=\"-1\" data-i18n=\"game_menu.multiplayer_tab\"></a>");
}
if ( me.isAdmin())
{
buf.push("<a href=\"/admin\">Admin</a>");
}
if ( usesSocialMedia)
{
buf.push("<div class=\"share-buttons\">");
if ( !isIE)
{
buf.push("<div data-href=\"http://codecombat.com\" data-size=\"medium\" class=\"g-plusone\"></div>");
}
buf.push("<div" + (jade.attrs({ 'data-href':("https://www.facebook.com/codecombat"), 'data-send':("false"), 'data-layout':("button_count"), 'data-width':("350"), 'data-show-faces':("true"), 'data-ref':("coco_footer_" + (fbRef) + ""), "class": [('fb-like')] }, {"data-href":true,"data-send":true,"data-layout":true,"data-width":true,"data-show-faces":true,"data-ref":true})) + "></div>");
if ( !isIE)
{
buf.push("<a href=\"https://twitter.com/CodeCombat\" data-show-count=\"true\" data-show-screen-name=\"false\" data-dnt=\"true\" data-align=\"right\" data-i18n=\"nav.twitter_follow\" class=\"twitter-follow-button\"></a><iframe src=\"https://ghbtns.com/github-btn.html?user=codecombat&amp;repo=codecombat&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\" class=\"github-star-button\"></iframe>");
}
buf.push("</div>");
}
buf.push("</div><div id=\"footer-credits\"><span><span>© All Rights Reserved</span><br/><span>CodeCombat 2015</span></span><img id=\"footer-logo\" src=\"/images/pages/base/logo.png\" alt=\"CodeCombat\"/><span><span>Site Design by</span><br/><a href=\"http://www.fullyillustrated.com/\">Fully Illustrated</a></span><!--a.firebase-bade(href=\"https://www.firebase.com/\")  // Not using right now--><!--  img(src=\"/images/pages/base/firebase.png\", alt=\"Powered by Firebase\")--></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/ladder/my_matches_tab", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"row\">");
// iterate view.teams
;(function(){
  var $$obj = view.teams;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var team = $$obj[$index];

buf.push("<div class=\"matches-column col-md-6\"><table class=\"table table-bordered table-condensed my-matches-table\"><tr><th" + (jade.attrs({ 'colspan':(5), 'style':("color: " + (team.primaryColor) + "") }, {"colspan":true,"style":true})) + "><span data-i18n=\"ladder.summary_your\">Your </span>" + (jade.escape((jade.interp = team.displayName) == null ? '' : jade.interp)) + "\n <span data-i18n=\"ladder.summary_matches\">Matches - </span>" + (jade.escape((jade.interp = team.wins) == null ? '' : jade.interp)) + "<span data-i18n=\"ladder.summary_wins\"> Wins, </span>" + (jade.escape((jade.interp = team.losses) == null ? '' : jade.interp)) + "<span data-i18n=\"ladder.summary_losses\"> Losses </span></th></tr>");
if ( team.session)
{
buf.push("<tr><th colspan=\"5\"><div" + (jade.attrs({ 'data-session-id':(team.session.id), "class": [('ladder-submission-view')] }, {"data-session-id":true})) + "></div></th></tr>");
}
if ( team.scoreHistory)
{
buf.push("<tr><th" + (jade.attrs({ 'colspan':(5), 'style':("color: " + (team.primaryColor) + "") }, {"colspan":true,"style":true})) + "><div" + (jade.attrs({ 'data-team-name':(team.name), 'id':("score-chart-" + (team.name) + ""), "class": [("score-chart-wrapper")] }, {"class":true,"data-team-name":true,"id":true})) + "></div></th></tr>");
}
buf.push("<tr><th data-i18n=\"general.result\">Result</th><th></th><th data-i18n=\"general.opponent\">Opponent</th><th data-i18n=\"general.when\">When</th><th></th></tr>");
// iterate team.matches
;(function(){
  var $$obj = team.matches;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var match = $$obj[$index];

buf.push("<tr" + (jade.attrs({ 'title':(match.simulator), "class": [((match.stale ? "stale " : "") + (match.fresh ? "fresh " : "") + match.state)] }, {"class":true,"title":true})) + "><td class=\"state-cell\">");
if ( match.state === 'win')
{
buf.push("<span data-i18n=\"general.win\" class=\"win\">Win</span>");
}
if ( match.state === 'loss')
{
buf.push("<span data-i18n=\"general.loss\" class=\"loss\">Loss</span>");
}
if ( match.state === 'tie')
{
buf.push("<span data-i18n=\"general.tie\" class=\"tie\">Tie</span>");
}
buf.push("</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + match.codeLanguage +  "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td><td class=\"name-cell\">" + (jade.escape(null == (jade.interp = match.opponentName || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"time-cell\">" + (jade.escape(null == (jade.interp = match.when) ? "" : jade.interp)) + "</td><td class=\"battle-cell\">");
var levelID = view.level.get('slug') || view.level.id
var league = view.options.league
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (levelID) + "?team=" + (team.id) + "&opponent=" + (match.sessionID) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + ">");
if ( (match.state === 'win'))
{
buf.push("<span data-i18n=\"ladder.watch_victory\">Watch your victory</span>");
}
else
{
buf.push("<span data-i18n=\"ladder.defeat_the\">Defeat the</span> \n" + (jade.escape((jade.interp = team.otherTeamDisplayName) == null ? '' : jade.interp)) + "");
}
buf.push("</a></td></tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var match = $$obj[$index];

buf.push("<tr" + (jade.attrs({ 'title':(match.simulator), "class": [((match.stale ? "stale " : "") + (match.fresh ? "fresh " : "") + match.state)] }, {"class":true,"title":true})) + "><td class=\"state-cell\">");
if ( match.state === 'win')
{
buf.push("<span data-i18n=\"general.win\" class=\"win\">Win</span>");
}
if ( match.state === 'loss')
{
buf.push("<span data-i18n=\"general.loss\" class=\"loss\">Loss</span>");
}
if ( match.state === 'tie')
{
buf.push("<span data-i18n=\"general.tie\" class=\"tie\">Tie</span>");
}
buf.push("</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + match.codeLanguage +  "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td><td class=\"name-cell\">" + (jade.escape(null == (jade.interp = match.opponentName || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"time-cell\">" + (jade.escape(null == (jade.interp = match.when) ? "" : jade.interp)) + "</td><td class=\"battle-cell\">");
var levelID = view.level.get('slug') || view.level.id
var league = view.options.league
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (levelID) + "?team=" + (team.id) + "&opponent=" + (match.sessionID) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + ">");
if ( (match.state === 'win'))
{
buf.push("<span data-i18n=\"ladder.watch_victory\">Watch your victory</span>");
}
else
{
buf.push("<span data-i18n=\"ladder.defeat_the\">Defeat the</span> \n" + (jade.escape((jade.interp = team.otherTeamDisplayName) == null ? '' : jade.interp)) + "");
}
buf.push("</a></td></tr>");
    }

  }
}).call(this);

if ( !team.matches.length)
{
buf.push("<tr>");
if ( team.isRanking)
{
buf.push("<td colspan=\"4\" class=\"alert alert-info\"><span data-i18n=\"ladder.code_being_simulated\">Your new code is being simulated by other players for ranking.\nThis will refresh as new matches come in.</span></td>");
}
else
{
buf.push("<td colspan=\"4\" class=\"alert alert-warning\"><span data-i18n=\"ladder.no_ranked_matches_pre\">No ranked matches for the</span>" + (jade.escape((jade.interp = team.name) == null ? '' : jade.interp)) + "<span data-i18n=\"ladder.no_ranked_matches_post\">team! Play against some competitors and then come back here to get your game ranked.</span></td>");
}
buf.push("</tr>");
}
buf.push("</table></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var team = $$obj[$index];

buf.push("<div class=\"matches-column col-md-6\"><table class=\"table table-bordered table-condensed my-matches-table\"><tr><th" + (jade.attrs({ 'colspan':(5), 'style':("color: " + (team.primaryColor) + "") }, {"colspan":true,"style":true})) + "><span data-i18n=\"ladder.summary_your\">Your </span>" + (jade.escape((jade.interp = team.displayName) == null ? '' : jade.interp)) + "\n <span data-i18n=\"ladder.summary_matches\">Matches - </span>" + (jade.escape((jade.interp = team.wins) == null ? '' : jade.interp)) + "<span data-i18n=\"ladder.summary_wins\"> Wins, </span>" + (jade.escape((jade.interp = team.losses) == null ? '' : jade.interp)) + "<span data-i18n=\"ladder.summary_losses\"> Losses </span></th></tr>");
if ( team.session)
{
buf.push("<tr><th colspan=\"5\"><div" + (jade.attrs({ 'data-session-id':(team.session.id), "class": [('ladder-submission-view')] }, {"data-session-id":true})) + "></div></th></tr>");
}
if ( team.scoreHistory)
{
buf.push("<tr><th" + (jade.attrs({ 'colspan':(5), 'style':("color: " + (team.primaryColor) + "") }, {"colspan":true,"style":true})) + "><div" + (jade.attrs({ 'data-team-name':(team.name), 'id':("score-chart-" + (team.name) + ""), "class": [("score-chart-wrapper")] }, {"class":true,"data-team-name":true,"id":true})) + "></div></th></tr>");
}
buf.push("<tr><th data-i18n=\"general.result\">Result</th><th></th><th data-i18n=\"general.opponent\">Opponent</th><th data-i18n=\"general.when\">When</th><th></th></tr>");
// iterate team.matches
;(function(){
  var $$obj = team.matches;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var match = $$obj[$index];

buf.push("<tr" + (jade.attrs({ 'title':(match.simulator), "class": [((match.stale ? "stale " : "") + (match.fresh ? "fresh " : "") + match.state)] }, {"class":true,"title":true})) + "><td class=\"state-cell\">");
if ( match.state === 'win')
{
buf.push("<span data-i18n=\"general.win\" class=\"win\">Win</span>");
}
if ( match.state === 'loss')
{
buf.push("<span data-i18n=\"general.loss\" class=\"loss\">Loss</span>");
}
if ( match.state === 'tie')
{
buf.push("<span data-i18n=\"general.tie\" class=\"tie\">Tie</span>");
}
buf.push("</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + match.codeLanguage +  "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td><td class=\"name-cell\">" + (jade.escape(null == (jade.interp = match.opponentName || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"time-cell\">" + (jade.escape(null == (jade.interp = match.when) ? "" : jade.interp)) + "</td><td class=\"battle-cell\">");
var levelID = view.level.get('slug') || view.level.id
var league = view.options.league
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (levelID) + "?team=" + (team.id) + "&opponent=" + (match.sessionID) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + ">");
if ( (match.state === 'win'))
{
buf.push("<span data-i18n=\"ladder.watch_victory\">Watch your victory</span>");
}
else
{
buf.push("<span data-i18n=\"ladder.defeat_the\">Defeat the</span> \n" + (jade.escape((jade.interp = team.otherTeamDisplayName) == null ? '' : jade.interp)) + "");
}
buf.push("</a></td></tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var match = $$obj[$index];

buf.push("<tr" + (jade.attrs({ 'title':(match.simulator), "class": [((match.stale ? "stale " : "") + (match.fresh ? "fresh " : "") + match.state)] }, {"class":true,"title":true})) + "><td class=\"state-cell\">");
if ( match.state === 'win')
{
buf.push("<span data-i18n=\"general.win\" class=\"win\">Win</span>");
}
if ( match.state === 'loss')
{
buf.push("<span data-i18n=\"general.loss\" class=\"loss\">Loss</span>");
}
if ( match.state === 'tie')
{
buf.push("<span data-i18n=\"general.tie\" class=\"tie\">Tie</span>");
}
buf.push("</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + match.codeLanguage +  "_icon.png)"), "class": [('code-language-cell')] }, {"style":true})) + "></td><td class=\"name-cell\">" + (jade.escape(null == (jade.interp = match.opponentName || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"time-cell\">" + (jade.escape(null == (jade.interp = match.when) ? "" : jade.interp)) + "</td><td class=\"battle-cell\">");
var levelID = view.level.get('slug') || view.level.id
var league = view.options.league
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (levelID) + "?team=" + (team.id) + "&opponent=" + (match.sessionID) + "" + (league ? "&league=" + league.id : "")) }, {"href":true})) + ">");
if ( (match.state === 'win'))
{
buf.push("<span data-i18n=\"ladder.watch_victory\">Watch your victory</span>");
}
else
{
buf.push("<span data-i18n=\"ladder.defeat_the\">Defeat the</span> \n" + (jade.escape((jade.interp = team.otherTeamDisplayName) == null ? '' : jade.interp)) + "");
}
buf.push("</a></td></tr>");
    }

  }
}).call(this);

if ( !team.matches.length)
{
buf.push("<tr>");
if ( team.isRanking)
{
buf.push("<td colspan=\"4\" class=\"alert alert-info\"><span data-i18n=\"ladder.code_being_simulated\">Your new code is being simulated by other players for ranking.\nThis will refresh as new matches come in.</span></td>");
}
else
{
buf.push("<td colspan=\"4\" class=\"alert alert-warning\"><span data-i18n=\"ladder.no_ranked_matches_pre\">No ranked matches for the</span>" + (jade.escape((jade.interp = team.name) == null ? '' : jade.interp)) + "<span data-i18n=\"ladder.no_ranked_matches_post\">team! Play against some competitors and then come back here to get your game ranked.</span></td>");
}
buf.push("</tr>");
}
buf.push("</table></div>");
    }

  }
}).call(this);

buf.push("</div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/ladder/play_modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 data-i18n=\"ladder.choose_opponent\">Choose an Opponent</h3></div><div class=\"modal-body\">");
if ( !view.level.isType('course-ladder'))
{
buf.push("<h4 data-i18n=\"ladder.select_your_language\" class=\"language-selection\">Select your language!</h4><div class=\"form-group select-group\"><select id=\"tome-language\" name=\"language\">");
// iterate view.languages
;(function(){
  var $$obj = view.languages;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

buf.push("<option" + (jade.attrs({ 'value':(option.id), 'selected':((view.language === option.id)) }, {"value":true,"selected":true})) + ">" + (jade.escape(null == (jade.interp = option.name) ? "" : jade.interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

buf.push("<option" + (jade.attrs({ 'value':(option.id), 'selected':((view.language === option.id)) }, {"value":true,"selected":true})) + ">" + (jade.escape(null == (jade.interp = option.name) ? "" : jade.interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</select></div>");
}
buf.push("<div id=\"noob-view\" class=\"secret\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.levelID) + "-tutorial" + (view.options.league ? "?league=" + view.options.league.id : "")), "class": [('btn'),('btn-success'),('btn-block'),('btn-lg')] }, {"href":true})) + "><p><strong data-i18n=\"ladder.tutorial_play\">Play Tutorial</strong></p><span data-i18n=\"ladder.tutorial_recommended\">Recommended if you've never played before</span></a><span id=\"skip-tutorial-button\" data-i18n=\"ladder.tutorial_skip\" class=\"btn btn-primary btn-block btn-lg\">Skip Tutorial</span></div><div id=\"normal-view\">");
if ( view.tutorialLevelExists)
{
buf.push("<p class=\"tutorial-suggestion\"><strong data-i18n=\"ladder.tutorial_not_sure\">Not sure what's going on?</strong> <a" + (jade.attrs({ 'href':("/play/level/" + (view.levelID) + "-tutorial" + (view.options.league ? "?league=" + view.options.league.id : "")), 'data-i18n':("ladder.tutorial_play_first") }, {"href":true,"data-i18n":true})) + ">Play the tutorial first.</a></p>");
}
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (view.levelID) + "?team=" + (view.team) + "" + (view.options.league ? "&league=" + view.options.league.id : "")) }, {"href":true})) + "><div class=\"play-option\"><img" + (jade.attrs({ 'src':(view.myPortrait), "class": [('my-icon'),('only-one')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.team) + "_ladder_tutorial.png"), 'style':("border: 1px solid " + (view.teamColor) + "; background: " + (view.teamBackgroundColor) + ""), "class": [('my-team-icon'),('img-circle'),('only-one')] }, {"src":true,"style":true})) + "/><img" + (jade.attrs({ 'src':(view.genericPortrait), "class": [('opponent-icon')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.otherTeam) + "_ladder_tutorial.png"), 'style':("border: 1px solid " + (view.opponentTeamColor) + "; background: " + (view.opponentTeamBackgroundColor) + ""), "class": [('opponent-team-icon'),('img-circle')] }, {"src":true,"style":true})) + "/><div class=\"my-name name-label only-one\"><span>" + (jade.escape(null == (jade.interp = view.myName) ? "" : jade.interp)) + "</span></div><div class=\"opponent-name name-label\"><span data-i18n=\"ladder.simple_ai\"></span><!--span.code-language(style=\"background-image: url(/images/common/code_languages/javascript_small.png)\")--></div><div class=\"difficulty\"><span data-i18n=\"ladder.warmup\">Warmup</span></div></div></a>");
if ( view.challengers && view.challengers.easy)
{
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (view.levelID) + "?team=" + (view.team) + "&opponent=" + (view.challengers.easy.sessionID) + "" + (view.options.league ? "&league=" + view.options.league.id : "")) }, {"href":true})) + "><div class=\"play-option easy-option\"><img" + (jade.attrs({ 'src':(view.myPortrait), "class": [('my-icon'),('only-one')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.team) + "_ladder_easy.png"), 'style':("border: 1px solid " + (view.teamColor) + "; background: " + (view.teamBackgroundColor) + ""), "class": [('my-team-icon'),('img-circle'),('only-one')] }, {"src":true,"style":true})) + "/><img" + (jade.attrs({ 'src':(view.challengers.easy.opponentImageSource||view.genericPortrait), "class": [('opponent-icon')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.otherTeam) + "_ladder_easy.png"), 'style':("border: 1px solid " + (view.opponentTeamColor) + "; background: " + (view.opponentTeamBackgroundColor) + ""), "class": [('opponent-team-icon'),('img-circle')] }, {"src":true,"style":true})) + "/><div class=\"my-name name-label only-one\"><span>" + (jade.escape(null == (jade.interp = view.myName) ? "" : jade.interp)) + "</span></div><div class=\"opponent-name name-label\"><span>" + (jade.escape(null == (jade.interp = view.challengers.easy.opponentName) ? "" : jade.interp)) + "</span>");
if ( view.challengers.easy.codeLanguage)
{
buf.push("<span" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + (view.challengers.easy.codeLanguage) + "_small.png)"), "class": [('code-language')] }, {"style":true})) + "></span>");
}
buf.push("</div><div class=\"difficulty\"><span data-i18n=\"general.easy\">Easy</span></div></div></a>");
}
if ( view.challengers && view.challengers.medium)
{
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (view.levelID) + "?team=" + (view.team) + "&opponent=" + (view.challengers.medium.sessionID) + "" + (view.options.league ? "&league=" + view.options.league.id : "")) }, {"href":true})) + "><div class=\"play-option medium-option\"><img" + (jade.attrs({ 'src':(view.myPortrait), "class": [('my-icon'),('only-one')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.team) + "_ladder_medium.png"), 'style':("border: 1px solid " + (view.teamColor) + "; background: " + (view.teamBackgroundColor) + ""), "class": [('my-team-icon'),('img-circle'),('only-one')] }, {"src":true,"style":true})) + "/><img" + (jade.attrs({ 'src':(view.challengers.medium.opponentImageSource||view.genericPortrait), "class": [('opponent-icon')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.otherTeam) + "_ladder_medium.png"), 'style':("border: 1px solid " + (view.opponentTeamColor) + "; background: " + (view.opponentTeamBackgroundColor) + ""), "class": [('opponent-team-icon'),('img-circle')] }, {"src":true,"style":true})) + "/><div class=\"my-name name-label only-one\"><span>" + (jade.escape(null == (jade.interp = view.myName) ? "" : jade.interp)) + "</span></div><div class=\"opponent-name name-label\"><span>" + (jade.escape(null == (jade.interp = view.challengers.medium.opponentName) ? "" : jade.interp)) + "</span>");
if ( view.challengers.medium.codeLanguage)
{
buf.push("<span" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + (view.challengers.medium.codeLanguage) + "_small.png)"), "class": [('code-language')] }, {"style":true})) + "></span>");
}
buf.push("</div><div class=\"difficulty\"><span data-i18n=\"general.medium\">Medium</span></div></div></a>");
}
if ( view.challengers && view.challengers.hard)
{
buf.push("<a" + (jade.attrs({ 'href':("/play/level/" + (view.levelID) + "?team=" + (view.team) + "&opponent=" + (view.challengers.hard.sessionID) + "" + (view.options.league ? "&league=" + view.options.league.id : "")) }, {"href":true})) + "><div class=\"play-option hard-option\"><img" + (jade.attrs({ 'src':(view.myPortrait), "class": [('my-icon'),('only-one')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.team) + "_ladder_hard.png"), 'style':("border: 1px solid " + (view.teamColor) + "; background: " + (view.teamBackgroundColor) + ""), "class": [('my-team-icon'),('img-circle'),('only-one')] }, {"src":true,"style":true})) + "/><img" + (jade.attrs({ 'src':(view.challengers.hard.opponentImageSource||view.genericPortrait), "class": [('opponent-icon')] }, {"src":true})) + "/><img" + (jade.attrs({ 'src':("/images/pages/play/ladder/" + (view.otherTeam) + "_ladder_hard.png"), 'style':("border: 1px solid " + (view.opponentTeamColor) + "; background: " + (view.opponentTeamBackgroundColor) + ""), "class": [('opponent-team-icon'),('img-circle')] }, {"src":true,"style":true})) + "/><div class=\"my-name name-label only-one\"><span>" + (jade.escape(null == (jade.interp = view.myName) ? "" : jade.interp)) + "</span></div><div class=\"opponent-name name-label\"><span>" + (jade.escape(null == (jade.interp = view.challengers.hard.opponentName) ? "" : jade.interp)) + "</span>");
if ( view.challengers.hard.codeLanguage)
{
buf.push("<span" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + (view.challengers.hard.codeLanguage) + "_small.png)"), "class": [('code-language')] }, {"style":true})) + "></span>");
}
buf.push("</div><div class=\"difficulty\"><span data-i18n=\"general.hard\">Hard</span></div></div></a>");
}
buf.push("</div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/ladder/simulate_tab", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,me = locals_.me;buf.push("<p id=\"simulation-status-text\">");
if ( view.simulationStatus)
{
buf.push("" + (jade.escape((jade.interp = view.simulationStatus) == null ? '' : jade.interp)) + "");
}
else
{
buf.push("<span data-i18n=\"ladder.simulation_explanation\">By simulating games you can get your game ranked faster!</span><span data-i18n=\"ladder.simulation_explanation_leagues\" class=\"spl\">You will mainly help simulate games for allied players in your clans and courses.</span>");
}
buf.push("</p><p><button data-i18n=\"ladder.simulate_games\" id=\"simulate-button\" class=\"btn btn-warning btn-lg highlight\">Simulate Games!</button></p><p class=\"simulation-count\"><span data-i18n=\"ladder.games_simulated_by\" class=\"spr\">Games simulated by you:</span><span id=\"simulated-by-you\">" + (jade.escape(null == (jade.interp = me.get('simulatedBy') || 0) ? "" : jade.interp)) + "</span></p><!--p.simulation-count--><!--  span.spr(data-i18n=\"ladder.games_simulated_for\") Games simulated for you:--><!--  span#simulated-for-you= me.get('simulatedFor') || 0--><!--p.simulation-count--><!--  span.spr(data-i18n=\"ladder.games_in_queue\") Games currently in the queue:--><!--  span#games-in-queue= view.simulatorsLeaderboardData.numberOfGamesInQueue || 0-->");
if ( view.simulatorsLeaderboardData)
{
var topSimulators = view.simulatorsLeaderboardData.topSimulators.models;
var showJustTop = view.simulatorsLeaderboardData.inTopSimulators() || me.get('anonymous');
if(!showJustTop) topSimulators = topSimulators.slice(0, 10);
buf.push("<table class=\"table table-bordered table-condensed table-hover\"><thead><tr><th></th><th data-i18n=\"general.player\" class=\"name-col-cell\">Player</th><th data-i18n=\"ladder.games_simulated\">Games simulated</th><!--th(data-i18n=\"ladder.games_played\") Games played--><!--th(data-i18n=\"ladder.ratio\") Ratio--></tr></thead><tbody>");
// iterate topSimulators
;(function(){
  var $$obj = topSimulators;
  if ('number' == typeof $$obj.length) {

    for (var rank = 0, $$l = $$obj.length; rank < $$l; rank++) {
      var user = $$obj[rank];

var myRow = user.id == me.id
buf.push("<tr" + (jade.attrs({ "class": [(myRow ? "success" : "")] }, {"class":true})) + "><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td class=\"name-col-cell\">" + (jade.escape(null == (jade.interp = user.get('name') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = user.get('simulatedBy')) ? "" : jade.interp)) + "</td><!--td.simulator-leaderboard-cell= user.get('simulatedFor')--><!--td.simulator-leaderboard-cell= Math.round((user.get('simulatedBy') / user.get('simulatedFor')) * 10) / 10--></tr>");
    }

  } else {
    var $$l = 0;
    for (var rank in $$obj) {
      $$l++;      var user = $$obj[rank];

var myRow = user.id == me.id
buf.push("<tr" + (jade.attrs({ "class": [(myRow ? "success" : "")] }, {"class":true})) + "><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td class=\"name-col-cell\">" + (jade.escape(null == (jade.interp = user.get('name') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = user.get('simulatedBy')) ? "" : jade.interp)) + "</td><!--td.simulator-leaderboard-cell= user.get('simulatedFor')--><!--td.simulator-leaderboard-cell= Math.round((user.get('simulatedBy') / user.get('simulatedFor')) * 10) / 10--></tr>");
    }

  }
}).call(this);

var nearbySimulators = view.simulatorsLeaderboardData.nearbySimulators()
if ( !showJustTop && nearbySimulators)
{
buf.push("<tr class=\"active\"><td colspan=\"5\" class=\"ellipsis-row\">...</td></tr>");
// iterate nearbySimulators
;(function(){
  var $$obj = nearbySimulators;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var user = $$obj[$index];

var myRow = user.id == me.id
var ratio = user.get('simulatedBy') / user.get('simulatedFor');
buf.push("<tr" + (jade.attrs({ "class": [(myRow ? "success" : "")] }, {"class":true})) + "><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = user.rank) ? "" : jade.interp)) + "</td><td class=\"name-col-cell\">" + (jade.escape(null == (jade.interp = user.get('name') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = user.get('simulatedBy')) ? "" : jade.interp)) + "</td><!--td.simulator-leaderboard-cell= user.get('simulatedFor')--><!--td.simulator-leaderboard-cell= _.isNaN(ratio) || ratio == Infinity ? '' : ratio.toFixed(1)--></tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var user = $$obj[$index];

var myRow = user.id == me.id
var ratio = user.get('simulatedBy') / user.get('simulatedFor');
buf.push("<tr" + (jade.attrs({ "class": [(myRow ? "success" : "")] }, {"class":true})) + "><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = user.rank) ? "" : jade.interp)) + "</td><td class=\"name-col-cell\">" + (jade.escape(null == (jade.interp = user.get('name') || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"simulator-leaderboard-cell\">" + (jade.escape(null == (jade.interp = user.get('simulatedBy')) ? "" : jade.interp)) + "</td><!--td.simulator-leaderboard-cell= user.get('simulatedFor')--><!--td.simulator-leaderboard-cell= _.isNaN(ratio) || ratio == Infinity ? '' : ratio.toFixed(1)--></tr>");
    }

  }
}).call(this);

}
buf.push("</tbody></table>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/ladder_home", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),features = locals_.features,me = locals_.me,view = locals_.view,usesSocialMedia = locals_.usesSocialMedia,isIE = locals_.isIE,fbRef = locals_.fbRef;buf.push("<div id=\"site-nav\"><a href=\"/\"><img id=\"nav-logo\" src=\"/images/pages/base/logo.png\" title=\"CodeCombat - Learn how to code by playing a game\" alt=\"CodeCombat\"/></a><div id=\"site-nav-links\"><a href=\"/\"><img id=\"small-nav-logo\" src=\"/images/pages/base/logo.png\" title=\"CodeCombat - Learn how to code by playing a game\" alt=\"CodeCombat\"/></a><a href=\"/\"><span class=\"glyphicon glyphicon-home\"></span></a>");
if ( !features.playViewsOnly)
{
buf.push("<a href=\"/play\" data-i18n=\"common.play\"></a><a href=\"/play/ladder\" data-i18n=\"game_menu.multiplayer_tab\"></a>");
if ( me.isStudent())
{
buf.push("<a href=\"/students\" data-i18n=\"nav.my_courses\"></a>");
}
if ( me.isTeacher())
{
buf.push("<a href=\"/teachers/classes\" data-i18n=\"nav.my_classrooms\"></a>");
}
buf.push("<a href=\"/about\" data-i18n=\"nav.about\"></a><a" + (jade.attrs({ 'href':(view.forumLink()), 'data-i18n':("nav.forum") }, {"href":true,"data-i18n":true})) + "></a><a href=\"/community\" data-i18n=\"nav.community\"></a>");
if ( me.get('anonymous') === false)
{
buf.push("<span class=\"dropdown\"><button href=\"#\" data-toggle=\"dropdown\" class=\"btn btn-sm header-font dropdown-toggle\">");
if ( me.get('photoURL'))
{
buf.push("<img" + (jade.attrs({ 'src':(me.getPhotoURL(18)), 'alt':(""), "class": [('account-settings-image')] }, {"src":true,"alt":true})) + "/>");
}
else
{
buf.push("<i class=\"glyphicon glyphicon-user\"></i>");
}
buf.push("<span data-i18n=\"nav.account\" href=\"/account\" class=\"spl spr\"></span><span class=\"caret\"></span></button><ul role=\"menu\" class=\"dropdown-menu\"><li class=\"user-dropdown-header\"><span class=\"user-level\">" + (jade.escape(null == (jade.interp = me.level()) ? "" : jade.interp)) + "</span><a" + (jade.attrs({ 'href':("/user/" + (me.getSlugOrID()) + "") }, {"href":true})) + "><div" + (jade.attrs({ 'style':("background-image: url(" + (me.getPhotoURL()) + ")"), "class": [('img-circle')] }, {"style":true})) + "></div></a><h3>" + (jade.escape(null == (jade.interp = me.broadName()) ? "" : jade.interp)) + "</h3></li><li><a" + (jade.attrs({ 'href':("/user/" + (me.getSlugOrID()) + ""), 'data-i18n':("nav.profile") }, {"href":true,"data-i18n":true})) + "></a></li><li><a href=\"/account/settings\" data-i18n=\"play.settings\"></a></li>");
if ( me.isAdmin() || !(me.isTeacher() || me.isStudent()))
{
buf.push("<li><a href=\"/account/payments\" data-i18n=\"account.payments\"></a></li>");
}
if ( me.isAdmin() || !(me.isTeacher() || me.isStudent()) || me.hasSubscription())
{
buf.push("<li><a href=\"/account/subscription\" data-i18n=\"account.subscription\"></a></li>");
}
if ( me.isAdmin() || !(me.isTeacher() || me.isStudent()))
{
buf.push("<li><a href=\"/account/prepaid\" data-i18n=\"account.prepaid_codes\"></a></li>");
}
buf.push("<li><a id=\"logout-button\" data-i18n=\"login.log_out\"></a></li></ul></span>");
}
else
{
buf.push("<button data-i18n=\"login.sign_up\" class=\"btn btn-sm btn-primary header-font signup-button\"></button><button data-i18n=\"login.log_in\" class=\"btn btn-sm btn-default header-font login-button\"></button>");
}
}
buf.push("<select class=\"language-dropdown form-control\"></select></div></div><div id=\"site-content-area\">");
// iterate view.campaigns
;(function(){
  var $$obj = view.campaigns;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var campaign = $$obj[$index];

buf.push("<div class=\"campaign-container\"><h1><a" + (jade.attrs({ 'href':("/play/" + (campaign.levels[0].levelPath || 'level') + "/" + (campaign.levels[0].id) + ""), 'data-i18n':("play.campaign_" + (campaign.id) + "") }, {"href":true,"data-i18n":true})) + ">" + (jade.escape(null == (jade.interp = campaign.name) ? "" : jade.interp)) + "</a></h1><p" + (jade.attrs({ 'data-i18n':("[html]play.campaign_" + (campaign.id) + "_description"), "class": [('campaign-description')] }, {"data-i18n":true})) + ">" + (null == (jade.interp = campaign.description) ? "" : jade.interp) + "</p>");
// iterate campaign.levels
;(function(){
  var $$obj = campaign.levels;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var level = $$obj[$index];

if ( level.id === 'ace-of-coders' || level.id === 'zero-sum' || level.id === 'cavern-survival')
{
buf.push("<a" + (jade.attrs({ 'href':(level.disabled ? "/play/ladder" : "/play/ladder/" + (level.id) + ""), 'disabled':(level.disabled), 'title':(level.description), "class": [(view.levelStatusMap[level.id] || '')] }, {"href":true,"disabled":true,"class":true,"title":true})) + "><div class=\"level\">");
if ( level.image)
{
buf.push("<img" + (jade.attrs({ 'src':("" + (level.image) + ""), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/>");
}
else
{
buf.push("<img" + (jade.attrs({ 'src':("/images/pages/play/ladder/multiplayer_notext.jpg"), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/><h3 class=\"dynamic-level-name\">" + (jade.escape(null == (jade.interp = level.name + (level.disabled ? " (Coming soon!)" : "")) ? "" : jade.interp)) + "</h3>");
}
buf.push("<div class=\"overlay-text level-difficulty\"><span data-i18n=\"play.level_difficulty\">Difficulty: </span>");
// iterate Array(level.difficulty)
;(function(){
  var $$obj = Array(level.difficulty);
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var i = $$obj[$index];

buf.push("★");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var i = $$obj[$index];

buf.push("★");
    }

  }
}).call(this);

var playCount = view.levelPlayCountMap[level.id]
if ( playCount)
{
buf.push("<span class=\"spl spr\">- " + (jade.escape((jade.interp = playCount.sessions) == null ? '' : jade.interp)) + "</span><span data-i18n=\"play.players\">players</span>");
if ( (view.levelStatusMap[level.id]=='complete'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.complete_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
else if ( (view.levelStatusMap[level.id]=='started'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.started_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
}
buf.push("</div><div class=\"play-text-container\"><div data-i18n=\"common.play\" class=\"overlay-text play-text\">Play</div></div></div></a>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var level = $$obj[$index];

if ( level.id === 'ace-of-coders' || level.id === 'zero-sum' || level.id === 'cavern-survival')
{
buf.push("<a" + (jade.attrs({ 'href':(level.disabled ? "/play/ladder" : "/play/ladder/" + (level.id) + ""), 'disabled':(level.disabled), 'title':(level.description), "class": [(view.levelStatusMap[level.id] || '')] }, {"href":true,"disabled":true,"class":true,"title":true})) + "><div class=\"level\">");
if ( level.image)
{
buf.push("<img" + (jade.attrs({ 'src':("" + (level.image) + ""), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/>");
}
else
{
buf.push("<img" + (jade.attrs({ 'src':("/images/pages/play/ladder/multiplayer_notext.jpg"), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/><h3 class=\"dynamic-level-name\">" + (jade.escape(null == (jade.interp = level.name + (level.disabled ? " (Coming soon!)" : "")) ? "" : jade.interp)) + "</h3>");
}
buf.push("<div class=\"overlay-text level-difficulty\"><span data-i18n=\"play.level_difficulty\">Difficulty: </span>");
// iterate Array(level.difficulty)
;(function(){
  var $$obj = Array(level.difficulty);
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var i = $$obj[$index];

buf.push("★");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var i = $$obj[$index];

buf.push("★");
    }

  }
}).call(this);

var playCount = view.levelPlayCountMap[level.id]
if ( playCount)
{
buf.push("<span class=\"spl spr\">- " + (jade.escape((jade.interp = playCount.sessions) == null ? '' : jade.interp)) + "</span><span data-i18n=\"play.players\">players</span>");
if ( (view.levelStatusMap[level.id]=='complete'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.complete_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
else if ( (view.levelStatusMap[level.id]=='started'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.started_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
}
buf.push("</div><div class=\"play-text-container\"><div data-i18n=\"common.play\" class=\"overlay-text play-text\">Play</div></div></div></a>");
}
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var campaign = $$obj[$index];

buf.push("<div class=\"campaign-container\"><h1><a" + (jade.attrs({ 'href':("/play/" + (campaign.levels[0].levelPath || 'level') + "/" + (campaign.levels[0].id) + ""), 'data-i18n':("play.campaign_" + (campaign.id) + "") }, {"href":true,"data-i18n":true})) + ">" + (jade.escape(null == (jade.interp = campaign.name) ? "" : jade.interp)) + "</a></h1><p" + (jade.attrs({ 'data-i18n':("[html]play.campaign_" + (campaign.id) + "_description"), "class": [('campaign-description')] }, {"data-i18n":true})) + ">" + (null == (jade.interp = campaign.description) ? "" : jade.interp) + "</p>");
// iterate campaign.levels
;(function(){
  var $$obj = campaign.levels;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var level = $$obj[$index];

if ( level.id === 'ace-of-coders' || level.id === 'zero-sum' || level.id === 'cavern-survival')
{
buf.push("<a" + (jade.attrs({ 'href':(level.disabled ? "/play/ladder" : "/play/ladder/" + (level.id) + ""), 'disabled':(level.disabled), 'title':(level.description), "class": [(view.levelStatusMap[level.id] || '')] }, {"href":true,"disabled":true,"class":true,"title":true})) + "><div class=\"level\">");
if ( level.image)
{
buf.push("<img" + (jade.attrs({ 'src':("" + (level.image) + ""), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/>");
}
else
{
buf.push("<img" + (jade.attrs({ 'src':("/images/pages/play/ladder/multiplayer_notext.jpg"), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/><h3 class=\"dynamic-level-name\">" + (jade.escape(null == (jade.interp = level.name + (level.disabled ? " (Coming soon!)" : "")) ? "" : jade.interp)) + "</h3>");
}
buf.push("<div class=\"overlay-text level-difficulty\"><span data-i18n=\"play.level_difficulty\">Difficulty: </span>");
// iterate Array(level.difficulty)
;(function(){
  var $$obj = Array(level.difficulty);
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var i = $$obj[$index];

buf.push("★");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var i = $$obj[$index];

buf.push("★");
    }

  }
}).call(this);

var playCount = view.levelPlayCountMap[level.id]
if ( playCount)
{
buf.push("<span class=\"spl spr\">- " + (jade.escape((jade.interp = playCount.sessions) == null ? '' : jade.interp)) + "</span><span data-i18n=\"play.players\">players</span>");
if ( (view.levelStatusMap[level.id]=='complete'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.complete_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
else if ( (view.levelStatusMap[level.id]=='started'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.started_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
}
buf.push("</div><div class=\"play-text-container\"><div data-i18n=\"common.play\" class=\"overlay-text play-text\">Play</div></div></div></a>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var level = $$obj[$index];

if ( level.id === 'ace-of-coders' || level.id === 'zero-sum' || level.id === 'cavern-survival')
{
buf.push("<a" + (jade.attrs({ 'href':(level.disabled ? "/play/ladder" : "/play/ladder/" + (level.id) + ""), 'disabled':(level.disabled), 'title':(level.description), "class": [(view.levelStatusMap[level.id] || '')] }, {"href":true,"disabled":true,"class":true,"title":true})) + "><div class=\"level\">");
if ( level.image)
{
buf.push("<img" + (jade.attrs({ 'src':("" + (level.image) + ""), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/>");
}
else
{
buf.push("<img" + (jade.attrs({ 'src':("/images/pages/play/ladder/multiplayer_notext.jpg"), 'alt':("" + (level.name) + ""), "class": [('level-image'),('img-rounded')] }, {"src":true,"alt":true})) + "/><h3 class=\"dynamic-level-name\">" + (jade.escape(null == (jade.interp = level.name + (level.disabled ? " (Coming soon!)" : "")) ? "" : jade.interp)) + "</h3>");
}
buf.push("<div class=\"overlay-text level-difficulty\"><span data-i18n=\"play.level_difficulty\">Difficulty: </span>");
// iterate Array(level.difficulty)
;(function(){
  var $$obj = Array(level.difficulty);
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var i = $$obj[$index];

buf.push("★");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var i = $$obj[$index];

buf.push("★");
    }

  }
}).call(this);

var playCount = view.levelPlayCountMap[level.id]
if ( playCount)
{
buf.push("<span class=\"spl spr\">- " + (jade.escape((jade.interp = playCount.sessions) == null ? '' : jade.interp)) + "</span><span data-i18n=\"play.players\">players</span>");
if ( (view.levelStatusMap[level.id]=='complete'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.complete_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
else if ( (view.levelStatusMap[level.id]=='started'))
{
buf.push("<span class=\"spl spr\">-</span><span" + (jade.attrs({ 'data-i18n':("clans.started_2"), "class": [("level-status-" + (view.levelStatusMap[level.id]) + "")] }, {"class":true,"data-i18n":true})) + "></span>");
}
}
buf.push("</div><div class=\"play-text-container\"><div data-i18n=\"common.play\" class=\"overlay-text play-text\">Play</div></div></div></a>");
}
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div><div class=\"achievement-corner\"></div><div id=\"site-footer\"><img id=\"footer-background\" src=\"/images/pages/base/nav_background.png\"/><div" + (jade.attrs({ 'id':('footer-links'), "class": [(features.playViewsOnly ? 'hide' : '')] }, {"class":true})) + "><a href=\"/about\" data-i18n=\"nav.about\"></a>");
if ( !me.isStudent())
{
buf.push("<a tabindex=\"-1\" data-i18n=\"nav.contact\" class=\"contact-modal\"></a>");
}
buf.push("<a href=\"http://blog.codecombat.com/\" data-i18n=\"nav.blog\"></a><a href=\"https://jobs.lever.co/codecombat\" tabindex=\"-1\" data-i18n=\"nav.careers\"></a><a href=\"/legal\" tabindex=\"-1\" data-i18n=\"nav.legal\"></a><a href=\"/privacy\" tabindex=\"-1\" data-i18n=\"legal.privacy_title\"></a><a href=\"/contribute\" tabindex=\"-1\" data-i18n=\"nav.contribute\"></a>");
if ( !me.isStudent())
{
buf.push("<a href=\"/play/ladder\" tabindex=\"-1\" data-i18n=\"game_menu.multiplayer_tab\"></a>");
}
if ( me.isAdmin())
{
buf.push("<a href=\"/admin\">Admin</a>");
}
if ( usesSocialMedia)
{
buf.push("<div class=\"share-buttons\">");
if ( !isIE)
{
buf.push("<div data-href=\"http://codecombat.com\" data-size=\"medium\" class=\"g-plusone\"></div>");
}
buf.push("<div" + (jade.attrs({ 'data-href':("https://www.facebook.com/codecombat"), 'data-send':("false"), 'data-layout':("button_count"), 'data-width':("350"), 'data-show-faces':("true"), 'data-ref':("coco_footer_" + (fbRef) + ""), "class": [('fb-like')] }, {"data-href":true,"data-send":true,"data-layout":true,"data-width":true,"data-show-faces":true,"data-ref":true})) + "></div>");
if ( !isIE)
{
buf.push("<a href=\"https://twitter.com/CodeCombat\" data-show-count=\"true\" data-show-screen-name=\"false\" data-dnt=\"true\" data-align=\"right\" data-i18n=\"nav.twitter_follow\" class=\"twitter-follow-button\"></a><iframe src=\"https://ghbtns.com/github-btn.html?user=codecombat&amp;repo=codecombat&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\" class=\"github-star-button\"></iframe>");
}
buf.push("</div>");
}
buf.push("</div><div id=\"footer-credits\"><span><span>© All Rights Reserved</span><br/><span>CodeCombat 2015</span></span><img id=\"footer-logo\" src=\"/images/pages/base/logo.png\" alt=\"CodeCombat\"/><span><span>Site Design by</span><br/><a href=\"http://www.fullyillustrated.com/\">Fully Illustrated</a></span><!--a.firebase-bade(href=\"https://www.firebase.com/\")  // Not using right now--><!--  img(src=\"/images/pages/base/firebase.png\", alt=\"Powered by Firebase\")--></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/chat", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"closed-chat-area\"><table><tbody></tbody></table></div><div class=\"open-chat-area secret\"><table><tbody></tbody></table></div><textarea></textarea><i class=\"icon-comment icon-white\"></i>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/control-bar-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),homeLink = locals_.homeLink,me = locals_.me,ladderGame = locals_.ladderGame,view = locals_.view,i18n = locals_.i18n,difficultyTitle = locals_.difficultyTitle,worldName = locals_.worldName,levelDifficulty = locals_.levelDifficulty,observing = locals_.observing,spectateGame = locals_.spectateGame;buf.push("<div class=\"left-cap\"></div><div class=\"right-cap\"></div><div class=\"center-chain\"></div><div class=\"right-chain\"></div><div class=\"wood-background\"></div><div class=\"levels-link-area\"><a" + (jade.attrs({ 'href':(homeLink || "/"), "class": [('levels-link')] }, {"href":true})) + "><div class=\"glyphicon glyphicon-play\"></div><span" + (jade.attrs({ 'data-i18n':(me.isSessionless() ? "nav.courses" : (ladderGame ? "general.ladder" : "nav.play")), "class": [('home-text')] }, {"data-i18n":true})) + "></span></a></div><div class=\"level-name-area-container\"><div class=\"level-name-area\">");
if ( view.course)
{
buf.push("<div class=\"level-label\">" + (jade.escape(null == (jade.interp = i18n(view.course.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("<div" + (jade.attrs({ 'title':(difficultyTitle || ""), "class": [('level-name')] }, {"title":true})) + "><span>" + (jade.escape((jade.interp = view.levelNumber ? view.levelNumber + '. ' : '') == null ? '' : jade.interp)) + "" + (jade.escape((jade.interp = worldName.replace('Course: ', '')) == null ? '' : jade.interp)) + "</span>");
if ( levelDifficulty)
{
buf.push("<sup class=\"level-difficulty\">" + (jade.escape(null == (jade.interp = levelDifficulty) ? "" : jade.interp)) + "</sup>");
}
buf.push("</div></div></div><div class=\"buttons-area\">");
if ( !observing)
{
buf.push("<button id=\"game-menu-button\" data-i18n=\"[title]play_level.show_menu\" title=\"Show game menu\" class=\"btn btn-inverse\"><div class=\"hamburger\"><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span></div><span data-i18n=\"play_level.game_menu\" class=\"game-menu-text\">Game Menu</span></button>");
}
if ( spectateGame)
{
buf.push("<button id=\"next-game-button\" data-i18n=\"play_level.next_game\" class=\"btn btn-xs btn-inverse banner\">Next game</button>");
}
if ( !observing)
{
buf.push("<button id=\"level-done-button\" data-i18n=\"play_level.done\" class=\"btn btn-xs btn-primary banner\">Done</button>");
}
if ( me.get('anonymous'))
{
buf.push("<button id=\"control-bar-sign-up-button\" data-toggle=\"coco-modal\" data-target=\"core/CreateAccountModal\" data-i18n=\"signup.sign_up\" class=\"btn btn-xs btn-primary banner\"></button>");
}
if ( me.isAdmin())
{
var otherVersion = view.course ? 'Home' : 'Classroom'
buf.push("<button id=\"version-switch-button\" class=\"btn btn-xs btn-inverse banner\"><span>" + (jade.escape(null == (jade.interp = otherVersion) ? "" : jade.interp)) + "</span><span>" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "</span><span data-code-language=\"javascript\" class=\"code-language-selector\">JS</span><span>" + (jade.escape(null == (jade.interp = ' | ') ? "" : jade.interp)) + "</span><span data-code-language=\"python\" class=\"code-language-selector\">PY</span></button>");
}
buf.push("</div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/duel-stats-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;// iterate view.players
;(function(){
  var $$obj = view.players;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var player = $$obj[$index];

buf.push("<div" + (jade.attrs({ "class": [("player-container team-" + player.team)] }, {"class":true})) + "><div class=\"player-portrait\"><div class=\"thang-avatar-placeholder\"></div></div><div class=\"player-info\"><div class=\"name-and-power\">");
if ( view.showsPower)
{
buf.push("<div class=\"player-power\"><div class=\"power-icon\"></div><div class=\"power-value\"></div></div>");
}
if ( view.showsGold)
{
buf.push("<div class=\"player-gold\"><div class=\"gold-icon\"></div><div class=\"gold-value\"></div></div>");
}
buf.push("<div class=\"player-name\">" + (jade.escape(null == (jade.interp = player.name || 'Anonymous') ? "" : jade.interp)) + "</div></div><div class=\"player-health\"><div class=\"health-icon\"></div><div class=\"health-bar-container\"><div class=\"health-bar\"></div></div><div class=\"health-value\"></div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var player = $$obj[$index];

buf.push("<div" + (jade.attrs({ "class": [("player-container team-" + player.team)] }, {"class":true})) + "><div class=\"player-portrait\"><div class=\"thang-avatar-placeholder\"></div></div><div class=\"player-info\"><div class=\"name-and-power\">");
if ( view.showsPower)
{
buf.push("<div class=\"player-power\"><div class=\"power-icon\"></div><div class=\"power-value\"></div></div>");
}
if ( view.showsGold)
{
buf.push("<div class=\"player-gold\"><div class=\"gold-icon\"></div><div class=\"gold-value\"></div></div>");
}
buf.push("<div class=\"player-name\">" + (jade.escape(null == (jade.interp = player.name || 'Anonymous') ? "" : jade.interp)) + "</div></div><div class=\"player-health\"><div class=\"health-icon\"></div><div class=\"health-bar-container\"><div class=\"health-bar\"></div></div><div class=\"health-value\"></div></div></div></div>");
    }

  }
}).call(this);
;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/goals", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<ul id=\"primary-goals-list\"></ul><div class=\"goals-status\"><span data-i18n=\"play_level.goals\">Goals</span><span class=\"spr\">:</span><span data-i18n=\"play_level.running\" class=\"secret goal-status running\">Running...</span><span data-i18n=\"play_level.success\" class=\"secret goal-status success\">Success!</span><span data-i18n=\"play_level.incomplete\" class=\"secret goal-status incomplete\">Incomplete</span><span data-i18n=\"play_level.timed_out\" class=\"secret goal-status timed-out\">Ran out of time</span><span data-i18n=\"play_level.failing\" class=\"secret goal-status failure\">Failing</span></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/gold", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/hints-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<button class=\"close-hint-btn btn btn-illustrated btn-danger\"><span class=\"glyphicon glyphicon-remove\"></span></button><h1 class=\"text-center hint-title\"><span>" + (jade.escape(null == (jade.interp = view.state.get('hintsTitle')) ? "" : jade.interp)) + "</span></h1><div class=\"hint-body\">" + (null == (jade.interp = view.getProcessedHint()) ? "" : jade.interp) + "</div><div class=\"row btn-area\"><div class=\"col-md-4\">");
if ( view.state.get('hintIndex') > 0)
{
buf.push("<button data-i18n=\"about.previous\" class=\"previous-btn btn btn-illustrated pull-left\"></button>");
}
buf.push("</div><div class=\"col-md-4\"><h2 class=\"text-center hint-pagination\">" + (jade.escape((jade.interp = view.state.get('hintIndex')+1) == null ? '' : jade.interp)) + " / " + (jade.escape((jade.interp = view.hintsState.get('total')) == null ? '' : jade.interp)) + "</h2></div><div class=\"col-md-4\">");
if ( view.state.get('hintIndex') < view.hintsState.get('total') - 1)
{
buf.push("<button data-i18n=\"play.next\" class=\"next-btn btn btn-illustrated pull-right\"></button>");
}
buf.push("</div></div><div class=\"clearfix\"></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/hud", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"wood-background\"></div><div class=\"hinge hinge-0\"></div><div class=\"hinge hinge-1\"></div><div class=\"hinge hinge-2\"></div><div class=\"hinge hinge-3\"></div><div class=\"avatar-wrapper-container\"><div class=\"thang-canvas-wrapper thang-elem\"><canvas class=\"thang-canvas\"></canvas></div></div><div class=\"center\"><div class=\"thang-name\"></div><div class=\"thang-props thang-elem\"></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/hud_prop", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),prop = locals_.prop,hasIcon = locals_.hasIcon,hasBar = locals_.hasBar;buf.push("<div" + (jade.attrs({ 'name':("" + (prop) + ""), "class": [('prop')] }, {"name":true})) + ">");
if ( hasIcon)
{
buf.push("<span" + (jade.attrs({ "class": [("prop-label prop-label-icon prop-label-icon-" + (prop) + "")] }, {"class":true})) + "></span>");
}
else
{
buf.push("<span class=\"prop-label\">" + (jade.escape((jade.interp = prop) == null ? '' : jade.interp)) + ": </span>");
}
if ( hasBar)
{
buf.push("<span class=\"prop-value bar-prop\"><div class=\"bar\"></div></span><span class=\"prop-value bar-prop-value\"></span>");
}
else
{
buf.push("<span class=\"prop-value\"></span>");
}
buf.push("</div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/level-dialogue-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"dialogue-area\"><p class=\"bubble dialogue-bubble\"></p></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/level-flags-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<button title=\"G: Place a green flag\" class=\"flag-button btn btn-lg green-flag\"><span class=\"glyphicon glyphicon-flag\"></span><span class=\"flag-caption\"><span class=\"flag-shortcut\">G</span>reen</span></button><button title=\"B: Place a black flag\" class=\"flag-button btn btn-lg black-flag\"><span class=\"glyphicon glyphicon-flag\"></span><span class=\"flag-caption\"><span class=\"flag-shortcut\">B</span>lack</span></button><button title=\"V: Place a violet flag\" class=\"flag-button btn btn-lg violet-flag\"><span class=\"glyphicon glyphicon-flag\"></span><span class=\"flag-caption\"><span class=\"flag-shortcut\">V</span>iolet</span></button>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/level-playback-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<button id=\"play-button\" title=\"Ctrl/Cmd + P: Toggle level play/pause\" class=\"btn btn-xs btn-inverse paused\"><div class=\"glyphicon glyphicon-play\"></div><div class=\"glyphicon glyphicon-pause\"></div><div class=\"glyphicon glyphicon-repeat\"></div></button><button id=\"volume-button\" title=\"Adjust volume\" class=\"btn btn-xs btn-inverse picoctf-hide\"><div class=\"glyphicon glyphicon-volume-off\"></div><div class=\"glyphicon glyphicon-volume-down\"></div><div class=\"glyphicon glyphicon-volume-up\"></div></button><button id=\"music-button\" title=\"Toggle Music\" class=\"btn btn-xs btn-inverse picoctf-hide\"><span>♫</span></button>");
if ( !view.options.level.isType('game-dev'))
{
buf.push("<div class=\"scrubber\"><div class=\"scrubber-inner\"><div id=\"timeProgress\" class=\"progress secret\"><div class=\"progress-bar\"><div class=\"scrubber-handle\"></div><div id=\"timePopover\" class=\"popover fade top in\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div></div></div></div></div>");
}
buf.push("<div id=\"playback-settings\" class=\"btn-group dropup\"><button title=\"Toggle fullscreen\" class=\"btn btn-xs btn-inverse toggle-fullscreen\"><div class=\"glyphicon glyphicon-fullscreen\"></div></button><button id=\"zoom-in-button\" title=\"Zoom In (or scroll down)\" class=\"btn btn-xs btn-inverse\"><div class=\"glyphicon glyphicon-zoom-in\"></div></button><button id=\"zoom-out-button\" title=\"Zoom Out (or scroll up)\" class=\"btn btn-xs btn-inverse\"><div class=\"glyphicon glyphicon-zoom-out\"></div></button></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/level_loading", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),me = locals_.me;buf.push("<div class=\"left-wing\"></div><div class=\"right-wing\"></div><div id=\"loading-details\" class=\"loading-container\"><div class=\"level-loading-goals secret\"><div data-i18n=\"play_level.goals\" class=\"goals-title\">Goals</div><ul class=\"list-unstyled\"></ul></div><div class=\"errors\"></div><div class=\"intro-doc hidden\"><div class=\"nano\"><div class=\"nano-content\"><div class=\"intro-doc-content\"></div></div></div></div><div class=\"progress-or-start-container\"><button data-i18n=\"play_level.loading_start\" class=\"start-level-button btn btn-lg btn-success btn-illustrated header-font needsclick\">Start Level</button><div class=\"load-progress\"><div class=\"progress\"><div class=\"progress-background\"></div><div class=\"progress-bar-container\"><div class=\"progress-bar progress-bar-success\"></div></div><div class=\"rim\"></div></div></div><div class=\"could-not-load\"><span data-i18n=\"loading_error.could_not_load\">Error loading from server</span></div><div class=\"subscription-required\"><span data-i18n=\"subscribe.subscription_required_to_play\">You'll need a subscription to play this level.</span><button data-i18n=\"subscribe.subscribe\" class=\"start-subscription-button btn btn-lg btn-warning\">Subscribe</button></div><div class=\"course-membership-required\"><span data-i18n=\"courses.course_membership_required_to_play\">You'll need to join a course to play this level.</span><a data-i18n=\"courses.go_to_courses\" href=\"/students\" class=\"btn btn-lg btn-warning\">Go To Courses</a></div></div><div id=\"tip-wrapper\" class=\"picoctf-hide\"><strong data-i18n=\"play_level.tip_toggle_play\" class=\"tip\">Toggle play/paused with Ctrl+P.</strong><strong data-i18n=\"play_level.tip_scrub_shortcut\" class=\"tip\">Ctrl+[ and Ctrl+] rewind and fast-forward.</strong><strong data-i18n=\"play_level.tip_guide_exists\" class=\"tip\">Click the guide, inside game menu (at the top of the page), for useful info.</strong><strong data-i18n=\"play_level.tip_open_source\" class=\"tip\">CodeCombat is 100% open source!</strong><strong data-i18n=\"play_level.tip_tell_friends\" class=\"tip\">Enjoying CodeCombat? Tell your friends about us!</strong><strong data-i18n=\"play_level.tip_beta_launch\" class=\"tip\">CodeCombat launched its beta in October, 2013.</strong><strong data-i18n=\"play_level.tip_think_solution\" class=\"tip\">Think of the solution, not the problem.</strong><strong data-i18n=\"play_level.tip_theory_practice\" class=\"tip\">In theory there is no difference between theory and practice; in practice there is. - Yogi Berra</strong><strong data-i18n=\"play_level.tip_error_free\" class=\"tip\">There are two ways to write error-free programs; only the third one works. - Alan Perlis</strong><strong data-i18n=\"play_level.tip_debugging_program\" class=\"tip\">If debugging is the process of removing bugs, then programming must be the process of putting them in. - Edsger W. Dijkstra</strong><strong data-i18n=\"play_level.tip_forums\" class=\"tip\">Head over to the forums and tell us what you think!</strong><strong data-i18n=\"play_level.tip_impossible\" class=\"tip\">It always seems impossible until it's done. - Nelson Mandela</strong><strong data-i18n=\"play_level.tip_move_forward\" class=\"tip\">Whatever you do, keep moving forward. - Martin Luther King Jr.</strong><strong data-i18n=\"play_level.tip_google\" class=\"tip\">Have a problem you can't solve? Google it!</strong><strong data-i18n=\"play_level.tip_solve_then_write\" class=\"tip\">First, solve the problem. Then, write the code. — John Johnson</strong><strong data-i18n=\"play_level.tip_mistakes_proof_of_trying\" class=\"tip\">Mistakes in your code are just proof that you are trying.</strong><strong data-i18n=\"play_level.tip_baby_coders\" class=\"tip rare\">In the future, even babies will be Archmages.</strong><strong data-i18n=\"play_level.tip_hardware_problem\" class=\"tip rare\">Q: How many programmers does it take to change a light bulb?  A: None, it's a hardware problem.</strong><strong data-i18n=\"play_level.tip_morale_improves\" class=\"tip rare\">Loading will continue until morale improves.</strong><strong data-i18n=\"play_level.tip_all_species\" class=\"tip rare\">We believe in equal opportunities to learn programming for all species.</strong><strong data-i18n=\"play_level.tip_reticulating\" class=\"tip rare\">Reticulating spines.</strong><strong data-i18n=\"play_level.tip_great_responsibility\" class=\"tip rare\">With great coding skill comes great debug responsibility.</strong><strong data-i18n=\"play_level.tip_munchkin\" class=\"tip rare\">If you don't eat your vegetables, a munchkin will come after you while you're asleep.</strong><strong data-i18n=\"play_level.tip_binary\" class=\"tip rare\">There are only 10 types of people in the world: those who understand binary, and those who don't.</strong><strong data-i18n=\"play_level.tip_commitment_yoda\" class=\"tip rare\">A programmer must have the deepest commitment, the most serious mind. ~ Yoda</strong><strong data-i18n=\"play_level.tip_no_try\" class=\"tip rare\">Do. Or do not. There is no try. - Yoda</strong><strong data-i18n=\"play_level.tip_patience\" class=\"tip rare\">Patience you must have, young Padawan. - Yoda</strong><strong data-i18n=\"play_level.tip_documented_bug\" class=\"tip rare\">A documented bug is not a bug; it is a feature.</strong><strong data-i18n=\"play_level.tip_talk_is_cheap\" class=\"tip rare\">Talk is cheap. Show me the code. - Linus Torvalds</strong><strong data-i18n=\"play_level.tip_first_language\" class=\"tip rare\">The most disastrous thing that you can ever learn is your first programming language. - Alan Kay</strong><strong data-i18n=\"play_level.tip_hofstadters_law\" class=\"tip rare\">Hofstadter's Law: It always takes longer than you expect, even when you take into account Hofstadter's Law.</strong><strong data-i18n=\"play_level.tip_premature_optimization\" class=\"tip rare\">Premature optimization is the root of all evil - Donald Knuth</strong><strong data-i18n=\"play_level.tip_brute_force\" class=\"tip rare\">When in doubt, use brute force. - Ken Thompson</strong><strong data-i18n=\"play_level.tip_extrapolation\" class=\"tip rare\">There are only two kinds of people: those that can extrapolate from incomplete data...</strong><strong data-i18n=\"play_level.tip_superpower\" class=\"tip rare\">Coding is the closest thing we have to a superpower</strong><strong data-i18n=\"play_level.tip_source_code\" class=\"tip rare\">I want to change the world but they would not give me the source code.</strong><strong data-i18n=\"play_level.tip_javascript_java\" class=\"tip rare\">Java is to JavaScript what Car is to Carpet. - Chris Heilmann</strong><strong class=\"tip rare\"><span data-i18n=\"play_level.tip_harry\" class=\"spr\">Yer a Wizard,</span><span>" + (jade.escape(null == (jade.interp = me.get('name', true)) ? "" : jade.interp)) + "</span></strong><strong data-i18n=\"play_level.tip_control_destiny\" class=\"tip rare\">In real open source, you have the right to control your own destiny. - Linus Torvalds</strong><strong data-i18n=\"play_level.tip_no_code\" class=\"tip rare\">No code is faster than no code.</strong><strong data-i18n=\"play_level.tip_code_never_lies\" class=\"tip rare\">Code never lies, comments sometimes do. — Ron Jeffries</strong><strong data-i18n=\"play_level.tip_reusable_software\" class=\"tip rare\">Before software can be reusable it first has to be usable.</strong><strong data-i18n=\"play_level.tip_optimization_operator\" class=\"tip rare\">Every language has an optimization operator. In most languages that operator is ‘//’</strong><strong data-i18n=\"play_level.tip_lines_of_code\" class=\"tip rare\">Measuring programming progress by lines of code is like measuring aircraft building progress by weight. — Bill Gates</strong><strong data-i18n=\"play_level.tip_adding_evil\" class=\"tip rare\">Adding a pinch of evil.</strong><strong data-i18n=\"play_level.tip_adding_orgres\" class=\"tip rare\">Rounding up ogres.</strong><strong data-i18n=\"play_level.tip_sharpening_swords\" class=\"tip rare\">Sharpening the swords.</strong><strong data-i18n=\"play_level.tip_hate_computers\" class=\"tip rare\">That's the thing about people who think they hate computers. What they really hate is lousy programmers. - Larry Niven</strong><strong class=\"tip rare\"><a href=\"https://github.com/codecombat/codecombat/wiki\" data-i18n=\"play_level.tip_open_source_contribute\">You can help CodeCombat improve!</a></strong><strong data-i18n=\"play_level.tip_recurse\" class=\"tip rare\">To iterate is human, to recurse divine. - L. Peter Deutsch</strong><strong data-i18n=\"play_level.tip_free_your_mind\" class=\"tip rare\">You have to let it all go, Neo. Fear, doubt, and disbelief. Free your mind. - Morpheus</strong><strong data-i18n=\"play_level.tip_strong_opponents\" class=\"tip rare\">Even the strongest of opponents always has a weakness. - Itachi Uchiha</strong><strong data-i18n=\"play_level.tip_paper_and_pen\" class=\"tip rare\">Before you start coding, you can always plan with a sheet of paper and a pen.</strong><strong data-i18n=\"play_level.tip_compiler_ignores_comments\" class=\"tip rare\">Sometimes I think that the compiler ignores my comments.</strong><strong data-i18n=\"play_level.tip_understand_recursion\" class=\"tip rare\">The only way to understand recursion is to understand recursion.</strong><strong data-i18n=\"play_level.tip_open_source_and_polymorphism\" class=\"tip rare\">Open Source projects are like totally polymorphic heterogeneous structures: All types are welcome.</strong><strong data-i18n=\"play_level.tip_ratatouille\" class=\"tip rare\">You must not let anyone define your limits because of where you come from. Your only limit is your soul. - Gusteau, Ratatouille</strong><strong data-i18n=\"play_level.tip_nemo\" class=\"tip rare\">When life gets you down, want to know what you've gotta do? Just keep swimming, just keep swimming. - Dory, Finding Nemo</strong><strong data-i18n=\"play_level.tip_internet_weather\" class=\"tip rare\">Just move to the internet, it's great here. We get to live inside where the weather is always awesome. - John Green</strong><strong data-i18n=\"play_level.tip_nerds\" class=\"tip rare\">Nerds are allowed to love stuff, like jump-up-and-down-in-the-chair-can't-control-yourself love it. - John Green</strong><strong data-i18n=\"play_level.tip_self_taught\" class=\"tip rare\">I taught myself 90% of what I've learned. And that's normal! - Hank Green</strong><strong data-i18n=\"play_level.tip_luna_lovegood\" class=\"tip rare\">Don't worry, you're just as sane as I am. - Luna Lovegood</strong><strong data-i18n=\"play_level.tip_good_idea\" class=\"tip rare\">The best way to have a good idea is to have a lot of ideas. - Linus Pauling</strong><strong data-i18n=\"play_level.tip_programming_not_about_computers\" class=\"tip rare\">Computer Science is no more about computers than astronomy is about telescopes. - Edsger Dijkstra</strong><strong data-i18n=\"play_level.tip_mulan\" class=\"tip rare\">Believe you can, then you will. - Mulan</strong></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/course-victory-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"modal-dialog\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-body\"></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/game-dev-victory-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content style-flat\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 class=\"text-center\">You beat the game!</h3></div><div class=\"modal-body\"><div class=\"text-center\">Share this level so your friends and family can play it:</div><div class=\"share-row text-center\"><input" + (jade.attrs({ 'id':('copy-url-input'), 'value':(view.shareURL), "class": [('text-h4'),('semibold'),('form-control'),('input-lg')] }, {"value":true})) + "/><button id=\"copy-url-btn\" class=\"btn btn-lg btn-navy-alt\"><span data-i18n=\"sharing.copy_url\"></span></button></div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><div class=\"text-center\"><button id=\"replay-game-btn\" data-dismiss=\"modal\" class=\"btn btn-navy btn-lg\">Replay Game</button><a id=\"play-more-codecombat-btn\" href=\"/\" class=\"btn btn-navy btn-lg\">Play More CodeCombat</a></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/hero-victory-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,me = locals_.me,victoryText = locals_.victoryText,isCourseLevel = locals_.isCourseLevel,currentCourseName = locals_.currentCourseName,currentLevelName = locals_.currentLevelName,nextLevelName = locals_.nextLevelName,level = locals_.level,achievements = locals_.achievements,thangTypes = locals_.thangTypes,i18n = locals_.i18n,features = locals_.features,readyToRank = locals_.readyToRank,showHourOfCodeDoneButton = locals_.showHourOfCodeDoneButton,showLeaderboard = locals_.showLeaderboard,showReturnToCourse = locals_.showReturnToCourse,document = locals_.document;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<div id=\"victory-header\" class=\"out\"><div id=\"victory-title\">");
if ( !me.get('preferredLanguage') || me.get('preferredLanguage').split('-')[0] == 'en')
{
buf.push("<img src=\"/images/pages/play/level/modal/victory_word.png\" draggable=\"false\"/>");
}
else
{
buf.push("<h1 data-i18n=\"play_level.victory\">Victory</h1>");
}
buf.push("</div></div></div><div class=\"modal-body\">");
if ( victoryText)
{
buf.push("<div id=\"victory-text\">" + (jade.escape(null == (jade.interp = victoryText) ? "" : jade.interp)) + "</div>");
}
if ( isCourseLevel)
{
buf.push("<div class=\"course-name-container\">");
if ( currentCourseName)
{
buf.push("<p><span data-i18n=\"play_level.course\" class=\"spr level-title\"></span><span class=\"level-name\">" + (jade.escape(null == (jade.interp = currentCourseName) ? "" : jade.interp)) + "</span></p>");
}
buf.push("</div><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-6\">");
if ( currentLevelName)
{
buf.push("<div data-i18n=\"play_level.completed_level\" class=\"level-title\"></div><div class=\"level-name\">" + (jade.escape(null == (jade.interp = currentLevelName.replace('Course: ', '')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div><div class=\"col-md-6\">");
if ( nextLevelName)
{
buf.push("<div data-i18n=\"play_level.next_level\" class=\"level-title\"></div><div class=\"level-name\">" + (jade.escape(null == (jade.interp = nextLevelName.replace('Course: ', '')) ? "" : jade.interp)) + "</div>");
}
else
{
buf.push("<div data-i18n=\"play_level.course\" class=\"level-title\"></div><div data-i18n=\"play_level.victory_title_suffix\" class=\"level-name\"></div>");
}
buf.push("</div></div></div><br/>");
}
buf.push("<div id=\"level-feedback\"><div class=\"rating secret\"><div data-i18n=\"play_level.victory_rate_the_level\" class=\"rating-label\">Rate the level:</div><i class=\"glyphicon glyphicon-star-empty\"></i><i class=\"glyphicon glyphicon-star-empty\"></i><i class=\"glyphicon glyphicon-star-empty\"></i><i class=\"glyphicon glyphicon-star-empty\"></i><i class=\"glyphicon glyphicon-star-empty\"></i></div>");
if ( !me.get('anonymous'))
{
buf.push("<span data-i18n=\"play_level.victory_review\" class=\"review-label secret\">Tell us more!</span><div class=\"review secret\"><br/><textarea data-i18n=\"[placeholder]play_level.victory_review_placeholder\"></textarea></div>");
}
buf.push("<div class=\"clearfix\"></div></div>");
if ( level.isType('hero', 'hero-ladder', 'game-dev', 'web-dev'))
{
// iterate achievements
;(function(){
  var $$obj = achievements;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var achievement = $$obj[$index];

if ( achievement.get('hidden'))
{
continue;
}
var animate = achievement.completed && !achievement.completedAWhileAgo
buf.push("<div" + (jade.attrs({ 'data-achievement-id':(achievement.id), 'data-animate':(animate), "class": [('achievement-panel'),(achievement.completedAWhileAgo ? 'earned' : '')] }, {"class":true,"data-achievement-id":true,"data-animate":true})) + ">");
var rewards = achievement.get('rewards') || {};
buf.push("<div class=\"achievement-description\">" + (jade.escape(null == (jade.interp = achievement.description) ? "" : jade.interp)) + "</div><div class=\"achievement-rewards\">");
var worth = achievement.worth;
var previousWorth = achievement.previousWorth;
var gems = achievement.gems;
var previousGems = achievement.previousGems;
if ( worth)
{
buf.push("<div" + (jade.attrs({ 'data-number':(worth), 'data-number-unit':('xp'), 'data-previous-number':(previousWorth || 0), "class": [('reward-panel'),('numerical'),('xp')] }, {"data-number":true,"data-number-unit":true,"data-previous-number":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img src=\"/images/pages/play/level/modal/reward_icon_xp.png\"/></div><div class=\"reward-text\">" + (jade.escape(null == (jade.interp = animate ? '+0' : '+'+worth) ? "" : jade.interp)) + "</div></div>");
}
if ( gems)
{
buf.push("<div" + (jade.attrs({ 'data-number':(gems), 'data-number-unit':('gem'), 'data-previous-number':(previousGems || 0), "class": [('reward-panel'),('numerical'),('gems')] }, {"data-number":true,"data-number-unit":true,"data-previous-number":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img src=\"/images/pages/play/level/modal/reward_icon_gems.png\"/></div><div class=\"reward-text\">" + (jade.escape(null == (jade.interp = animate ? '+0' : '+'+gems) ? "" : jade.interp)) + "</div></div>");
}
if ( rewards.heroes)
{
// iterate rewards.heroes
;(function(){
  var $$obj = rewards.heroes;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var hero = $$obj[$index];

var hero = thangTypes[hero];
buf.push("<div" + (jade.attrs({ 'data-hero-thang-type':(hero.get('original')), "class": [('reward-panel'),('hero')] }, {"data-hero-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(hero.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_hero\" class=\"reward-text\">New Hero</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(hero.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var hero = $$obj[$index];

var hero = thangTypes[hero];
buf.push("<div" + (jade.attrs({ 'data-hero-thang-type':(hero.get('original')), "class": [('reward-panel'),('hero')] }, {"data-hero-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(hero.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_hero\" class=\"reward-text\">New Hero</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(hero.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  }
}).call(this);

}
if ( rewards.items)
{
// iterate rewards.items
;(function(){
  var $$obj = rewards.items;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

var item = thangTypes[item];
buf.push("<div" + (jade.attrs({ 'data-item-thang-type':(item.get('original')), "class": [('reward-panel'),('item')] }, {"data-item-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(item.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_item\" class=\"reward-text\">New Item</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(item.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

var item = thangTypes[item];
buf.push("<div" + (jade.attrs({ 'data-item-thang-type':(item.get('original')), "class": [('reward-panel'),('item')] }, {"data-item-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(item.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_item\" class=\"reward-text\">New Item</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(item.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  }
}).call(this);

}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var achievement = $$obj[$index];

if ( achievement.get('hidden'))
{
continue;
}
var animate = achievement.completed && !achievement.completedAWhileAgo
buf.push("<div" + (jade.attrs({ 'data-achievement-id':(achievement.id), 'data-animate':(animate), "class": [('achievement-panel'),(achievement.completedAWhileAgo ? 'earned' : '')] }, {"class":true,"data-achievement-id":true,"data-animate":true})) + ">");
var rewards = achievement.get('rewards') || {};
buf.push("<div class=\"achievement-description\">" + (jade.escape(null == (jade.interp = achievement.description) ? "" : jade.interp)) + "</div><div class=\"achievement-rewards\">");
var worth = achievement.worth;
var previousWorth = achievement.previousWorth;
var gems = achievement.gems;
var previousGems = achievement.previousGems;
if ( worth)
{
buf.push("<div" + (jade.attrs({ 'data-number':(worth), 'data-number-unit':('xp'), 'data-previous-number':(previousWorth || 0), "class": [('reward-panel'),('numerical'),('xp')] }, {"data-number":true,"data-number-unit":true,"data-previous-number":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img src=\"/images/pages/play/level/modal/reward_icon_xp.png\"/></div><div class=\"reward-text\">" + (jade.escape(null == (jade.interp = animate ? '+0' : '+'+worth) ? "" : jade.interp)) + "</div></div>");
}
if ( gems)
{
buf.push("<div" + (jade.attrs({ 'data-number':(gems), 'data-number-unit':('gem'), 'data-previous-number':(previousGems || 0), "class": [('reward-panel'),('numerical'),('gems')] }, {"data-number":true,"data-number-unit":true,"data-previous-number":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img src=\"/images/pages/play/level/modal/reward_icon_gems.png\"/></div><div class=\"reward-text\">" + (jade.escape(null == (jade.interp = animate ? '+0' : '+'+gems) ? "" : jade.interp)) + "</div></div>");
}
if ( rewards.heroes)
{
// iterate rewards.heroes
;(function(){
  var $$obj = rewards.heroes;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var hero = $$obj[$index];

var hero = thangTypes[hero];
buf.push("<div" + (jade.attrs({ 'data-hero-thang-type':(hero.get('original')), "class": [('reward-panel'),('hero')] }, {"data-hero-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(hero.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_hero\" class=\"reward-text\">New Hero</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(hero.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var hero = $$obj[$index];

var hero = thangTypes[hero];
buf.push("<div" + (jade.attrs({ 'data-hero-thang-type':(hero.get('original')), "class": [('reward-panel'),('hero')] }, {"data-hero-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(hero.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_hero\" class=\"reward-text\">New Hero</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(hero.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  }
}).call(this);

}
if ( rewards.items)
{
// iterate rewards.items
;(function(){
  var $$obj = rewards.items;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

var item = thangTypes[item];
buf.push("<div" + (jade.attrs({ 'data-item-thang-type':(item.get('original')), "class": [('reward-panel'),('item')] }, {"data-item-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(item.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_item\" class=\"reward-text\">New Item</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(item.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

var item = thangTypes[item];
buf.push("<div" + (jade.attrs({ 'data-item-thang-type':(item.get('original')), "class": [('reward-panel'),('item')] }, {"data-item-thang-type":true})) + "><div" + (jade.attrs({ "class": [('reward-image-container'),(animate ? 'pending-reward-image' : 'show')] }, {"class":true})) + "><img" + (jade.attrs({ 'src':(item.getPortraitURL()) }, {"src":true})) + "/></div>");
if ( animate)
{
buf.push("<div data-i18n=\"play_level.victory_new_item\" class=\"reward-text\">New Item</div>");
}
else
{
buf.push("<div class=\"reward-text\">" + (jade.escape(null == (jade.interp = i18n(item.attributes, 'name')) ? "" : jade.interp)) + "</div>");
}
buf.push("</div>");
    }

  }
}).call(this);

}
buf.push("</div></div>");
    }

  }
}).call(this);

}
buf.push("</div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><div id=\"totals\"><div id=\"xp-wrapper\" class=\"total-wrapper\"><div id=\"xp-total\" class=\"total-count\">0</div><div class=\"total-label\"><span data-i18n=\"play_level.victory_experience_gained\" class=\"spr\">XP Gained</span>-<span data-i18n=\"general.player_level\" class=\"spl spr\">Level</span><span class=\"level\">" + (jade.escape(null == (jade.interp = me.level()) ? "" : jade.interp)) + "</span></div><div class=\"xp-bar-outer\"><div class=\"xp-bar-already-achieved\"></div><div class=\"xp-bar-total\"></div></div></div><div id=\"gem-wrapper\" class=\"total-wrapper\"><div id=\"gem-total\" class=\"total-count\">0</div><div data-i18n=\"play_level.victory_gems_gained\" class=\"total-label\">Gems Gained</div></div></div>");
if ( view.shareURL)
{
buf.push("<div id=\"share-level-container\"><span class=\"share-level-label\"><span data-i18n=\"sharing.victory_share_prefix\">Share this link to invite your friends & family to</span><span>" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "</span><a" + (jade.attrs({ 'href':(view.shareURL), 'target':('_blank') }, {"href":true,"target":true})) + ">");
if ( view.level.isType('game-dev'))
{
buf.push("<span data-i18n=\"sharing.victory_share_game\">play your game level</span>");
}
else
{
buf.push("<span data-i18n=\"sharing.victory_share_web\">view your webpage</span>");
}
buf.push("</a><span data-i18n=\"sharing.victory_share_suffix\"></span></span><div class=\"row\"><div class=\"col-sm-9\"><input" + (jade.attrs({ 'id':('share-level-input'), 'value':(view.shareURL), "class": [('text-h4'),('semibold'),('form-control'),('input-md')] }, {"value":true})) + "/></div><div class=\"col-sm-3\"><button id=\"share-level-btn\" class=\"btn btn-md btn-success btn-illustrated\"><span data-i18n=\"sharing.copy_url\">Copy URL</span></button></div></div></div>");
}
if ( features.codePlay)
{
buf.push("<img id=\"sweepstakes-entry\" src=\"/images/common/codeplay/SweepstakesEntry.png\"/>");
}
if ( me.get('anonymous'))
{
buf.push("<div class=\"sign-up-poke hide\"><div data-i18n=\"play_level.victory_sign_up_poke\" class=\"sign-up-blurb\">Want to save your code? Create a free account!</div><button data-dismiss=\"modal\" data-i18n=\"play_level.victory_sign_up\" class=\"btn btn-illustrated btn-warning sign-up-button btn-lg\">Sign Up to Save Progress</button></div>");
}
buf.push("<button id=\"saving-progress-label\" disabled=\"disabled\" data-i18n=\"play_level.victory_saving_progress\" class=\"btn btn-illustrated btn-lg btn-warning hide\">Saving Progress</button><div class=\"next-level-buttons\">");
if ( view.showHoc2016ExploreButton)
{
buf.push("<button id=\"continue-button\" data-i18n=\"play_level.explore_codecombat\" class=\"btn btn-illustrated btn-success btn-lg world-map-button next-level-button hide\"></button>");
}
else if ( readyToRank)
{
buf.push("<div class=\"ladder-submission-view\"></div>");
}
else if ( level.isType('hero-ladder'))
{
buf.push("<button" + (jade.attrs({ 'data-href':("/play/ladder/" + (level.get('slug')) + "#my-matches"), 'data-dismiss':("modal"), 'data-i18n':("play_level.victory_return_to_ladder"), "class": [('btn'),('btn-illustrated'),('btn-primary'),('btn-lg'),('return-to-ladder-button')] }, {"data-href":true,"data-dismiss":true,"data-i18n":true})) + ">Return to Ladder</button>");
}
else
{
buf.push("<button id=\"continue-button\" data-i18n=\"common.continue\" class=\"btn btn-illustrated btn-success btn-lg world-map-button next-level-button hide\">Continue</button>");
}
buf.push("</div>");
if ( !me.get('anonymous') && !showHourOfCodeDoneButton && !features.codePlay && showLeaderboard)
{
buf.push("<button data-dismiss=\"modal\" data-i18n=\"leaderboard.view_other_solutions\" class=\"btn btn-illustrated btn-success leaderboard-button btn-lg\">View Other Solutions</button>");
}
else if ( showReturnToCourse)
{
buf.push("<button data-dismiss=\"modal\" data-i18n=\"play_level.victory_go_home\" class=\"btn btn-illustrated btn-warning return-to-course-button btn-lg\">Go Home</button>");
}
if ( showHourOfCodeDoneButton)
{
buf.push("<div class=\"hour-of-code-done\"><div data-i18n=\"play_level.get_certificate\" class=\"hoc-label\"></div><a href=\"https://code.org/api/hour/finish\" data-i18n=\"play_level.finished_hoc\" class=\"btn btn-md btn-illustrated\"></a></div>");
}
if ( view.level.get('slug') == 'lost-viking')
{
buf.push("<div class=\"offer lost-viking\"><p><img src=\"/file/db/level/55144b509f0c4854051769c1/viking1.png\" class=\"pull-left\"/><img src=\"/file/db/level/55144b509f0c4854051769c1/viking_2.png\" class=\"pull-right\"/><span data-i18n=\"play_level.victory_viking_code_school\"></span></p><button data-i18n=\"play_level.victory_become_a_viking\" class=\"btn btn-illustrated btn-primary btn-lg world-map-button continue-from-offer-button\">Become a Viking</button></div>");
}
if ( features.codePlay)
{
buf.push("<a" + (jade.attrs({ 'href':(document.location.protocol + "//lenovogamestate.com/pages/products/") }, {"href":true})) + ">");
var url = "/images/common/codeplay/NA_VictoryPage_Y710_735x100_VictoryPage.png"
if ( me.isFromUk())
{
url = "/images/common/codeplay/UK_VictoryPage_Miix510_735x100_VictoryPage.png"
}
buf.push("<img" + (jade.attrs({ 'id':('lenovo-link'), 'src':(url) }, {"src":true})) + "/></a>");
}
buf.push("</div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/image-gallery-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,state = locals_.state,utils = locals_.utils;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content style-flat\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("</div><div class=\"modal-body\"><div class=\"row modal-body-content\"><div class=\"image-list-container col-sm-7\"><h3>" + (jade.escape(null == (jade.interp = '1. ') ? "" : jade.interp)) + "<span data-i18n=\"web_dev.select_an_image\"></span></h3><ul class=\"image-list\">");
// iterate view.images
;(function(){
  var $$obj = view.images;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var image = $$obj[$index];

var selectedState = state.get('selectedUrl') === image.portraitURL ? 'selected' : ''
buf.push("<li" + (jade.attrs({ 'data-portrait-url':(image.portraitURL), 'selected':(selectedState), "class": [('image-list-item'),('render'),(selectedState)] }, {"class":true,"data-portrait-url":true,"selected":true})) + "><img" + (jade.attrs({ 'src':(image.portraitURL) }, {"src":true})) + "/></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var image = $$obj[$index];

var selectedState = state.get('selectedUrl') === image.portraitURL ? 'selected' : ''
buf.push("<li" + (jade.attrs({ 'data-portrait-url':(image.portraitURL), 'selected':(selectedState), "class": [('image-list-item'),('render'),(selectedState)] }, {"class":true,"data-portrait-url":true,"selected":true})) + "><img" + (jade.attrs({ 'src':(image.portraitURL) }, {"src":true})) + "/></li>");
    }

  }
}).call(this);

buf.push("</ul><div class=\"small text-center\"><span data-i18n=\"web_dev.scroll_down_for_more_images\"></span></div></div><div class=\"col-sm-5 flex-col render\"><h3>" + (jade.escape(null == (jade.interp = '2. ') ? "" : jade.interp)) + "<span data-i18n=\"web_dev.copy_the_url\"></span></h3><div data-i18n=\"web_dev.copy_the_url_description\" class=\"text-h3 subtitle\"></div><div class=\"copy-row m-t-1\"><div class=\"copy-textarea-col\"><textarea class=\"image-url copyable\">");
if ( view.state.get('selectedUrl'))
{
buf.push(jade.escape(null == (jade.interp = utils.pathToUrl(view.state.get('selectedUrl'))) ? "" : jade.interp));
}
buf.push("</textarea></div><div class=\"copy-button-col\"><button class=\"btn btn-forest copy-url-button\"><span data-i18n=\"web_dev.copy_url\"></span></button></div></div><div class=\"hr-text m-t-1\"><hr/><span data-i18n=\"general.or\"></span></div><h3 data-i18n=\"web_dev.copy_the_img_tag\"></h3><div data-i18n=\"web_dev.copy_the_img_tag_description\" class=\"text-h3 subtitle\"></div><div class=\"copy-row m-t-1\"><div class=\"copy-textarea-col\"><textarea class=\"image-tag copyable\">");
if ( view.state.get('selectedUrl'))
{
buf.push(jade.escape(null == (jade.interp = '<img src="' + utils.pathToUrl(view.state.get('selectedUrl')) + '"/>') ? "" : jade.interp));
}
buf.push("</textarea></div><div class=\"copy-button-col\"><button class=\"btn btn-forest copy-tag-button\"><span data-i18n=\"web_dev.copy_img\"></span></button></div></div><div class=\"how-to-copy-paste m-t-3\"><div class=\"m-b-1 text-center\"><span data-i18n=\"web_dev.how_to_copy_paste\"></span></div><div class=\"windows-only\"><span data-i18n=\"web_dev.copy\"></span>: Control–C<br/><span data-i18n=\"web_dev.paste\"></span>: Control–V</div><div class=\"mac-only hidden\"><span data-i18n=\"web_dev.copy\"></span>: Command ⌘–C<br/><span data-i18n=\"web_dev.paste\"></span>: Command ⌘–V</div></div><div class=\"close-button\"><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"web_dev.back_to_editing\" class=\"btn btn-lg btn-primary\"></a></div></div></div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/infinite_loop", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
if ( view.options.nonUserCodeProblem)
{
buf.push("<h3 data-i18n=\"play_level.non_user_code_problem_title\">Unable to Load Level</h3>");
}
else
{
buf.push("<h3 data-i18n=\"play_level.infinite_loop_title\">Infinite Loop Detected</h3>");
}
buf.push("</div><div class=\"modal-body\"><div class=\"modal-body\"><p data-i18n=\"play_level.infinite_loop_description\">The initial code to build the world never finished running. It's probably either really slow or has an infinite loop. Or there might be a bug. You can either try running this code again or reset the code to the default state. If that doesn't fix it, please let us know.</p><p><span data-i18n=\"play_level.check_dev_console\" class=\"spr\">You can also open the developer console to see what might be going wrong.</span><a href=\"http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers/77337#77337\" data-i18n=\"play_level.check_dev_console_link\" target=\"_blank\">(instructions)</a></p></div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"play_level.infinite_loop_try_again\" id=\"restart-level-infinite-loop-retry-button\" class=\"btn\">Try Again</a><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"play_level.infinite_loop_reset_level\" id=\"restart-level-infinite-loop-confirm-button\" class=\"btn btn-danger\">Reset Level</a><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"play_level.infinite_loop_comment_out\" id=\"restart-level-infinite-loop-comment-button\" class=\"btn btn-primary\">Comment Out My Code</a></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/keyboard_shortcuts", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,ctrl = locals_.ctrl,ctrlName = locals_.ctrlName,alt = locals_.alt,altName = locals_.altName,shift = locals_.shift,enter = locals_.enter,space = locals_.space,escapeKey = locals_.escapeKey;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 data-i18n=\"keyboard_shortcuts.keyboard_shortcuts\">Keyboard Shortcuts</h3></div><div class=\"modal-body\"><dl class=\"dl-horizontal\"><dt><kbd>" + (jade.escape(null == (jade.interp = ctrl) ? "" : jade.interp)) + "</kbd></dt><dd>" + (jade.escape(null == (jade.interp = ctrlName) ? "" : jade.interp)) + "</dd></dl><dl class=\"dl-horizontal\"><dt><kbd>" + (jade.escape(null == (jade.interp = alt) ? "" : jade.interp)) + "</kbd></dt><dd>" + (jade.escape(null == (jade.interp = altName) ? "" : jade.interp)) + "</dd></dl><dl class=\"dl-horizontal\"><dt><kbd>⇧</kbd></dt><dd>" + (jade.escape(null == (jade.interp = shift) ? "" : jade.interp)) + "</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(shift + " " + enter) }, {"title":true})) + "><kbd>⇧ " + (jade.escape((jade.interp = enter) == null ? '' : jade.interp)) + "</kbd></dt><dd data-i18n=\"keyboard_shortcuts.run_code\">Run current code.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " " + shift + " " + enter) }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " ⇧ " + (jade.escape((jade.interp = enter) == null ? '' : jade.interp)) + "</kbd></dt><dd data-i18n=\"keyboard_shortcuts.run_real_time\">Run in real time.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(shift + " " + space) }, {"title":true})) + "><kbd>⇧ " + (jade.escape((jade.interp = space) == null ? '' : jade.interp)) + "</kbd></dt><dd data-i18n=\"keyboard_shortcuts.continue_script\">Continue past current script.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(escapeKey) }, {"title":true})) + "><kbd>Esc</kbd></dt><dd data-i18n=\"keyboard_shortcuts.skip_scripts\">Skip past all skippable scripts.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " P") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " P</kbd></dt><dd data-i18n=\"keyboard_shortcuts.toggle_playback\">Toggle play/pause.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " [, " + ctrlName + " ]") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " [</kbd>, <kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " ]</kbd></dt><dd data-i18n=\"keyboard_shortcuts.scrub_playback\">Scrub back and forward through time.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " [, " + ctrlName + " ]") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " ⇧ [</kbd>, <kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " ⇧ ]</kbd></dt><dd data-i18n=\"keyboard_shortcuts.single_scrub_playback\">Scrub back and forward through time by a single frame.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " " + altName + " [, " + ctrlName + " " + altName + " ]") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " " + (jade.escape((jade.interp = alt) == null ? '' : jade.interp)) + " [</kbd>, <kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " " + (jade.escape((jade.interp = alt) == null ? '' : jade.interp)) + " ]</kbd></dt><dd data-i18n=\"keyboard_shortcuts.scrub_execution\">Scrub through current spell execution.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " \\") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " \\</kbd></dt><dd data-i18n=\"keyboard_shortcuts.toggle_debug\">Toggle debug display.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " G") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " G</kbd></dt><dd data-i18n=\"keyboard_shortcuts.toggle_grid\">Toggle grid overlay.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " O") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " O</kbd></dt><dd data-i18n=\"keyboard_shortcuts.toggle_pathfinding\">Toggle pathfinding overlay.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " " + shift + " B") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " ⇧ B</kbd></dt><dd data-i18n=\"keyboard_shortcuts.beautify\">Beautify your code by standardizing its formatting.</dd></dl><dl class=\"dl-horizontal\"><dt" + (jade.attrs({ 'title':(ctrlName + " " + shift + " M") }, {"title":true})) + "><kbd>" + (jade.escape((jade.interp = ctrl) == null ? '' : jade.interp)) + " ⇧ M</kbd></dt><dd data-i18n=\"keyboard_shortcuts.maximize_editor\">Maximize/minimize code editor.</dd></dl></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"modal.close\" class=\"btn btn-primary\">Close</a></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/new-item-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,i18n = locals_.i18n;buf.push("<div class=\"modal-header\"><div id=\"close-modal\" data-dismiss=\"modal\" class=\"btn well well-sm well-parchment\"><span class=\"glyphicon glyphicon-remove\"></span></div><div class=\"well well-sm well-parchment\"><h1 data-i18n=\"play_level.victory_new_item\"></h1></div></div><div class=\"modal-body\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-sm-5 text-center\"><img" + (jade.attrs({ 'src':(view.item.getPortraitURL()), "class": [('img-rounded'),('img-prize')] }, {"src":true})) + "/><h3 id=\"item-header\"><div id=\"item-label\" class=\"label label-banner\">" + (jade.escape(null == (jade.interp = i18n(view.item.attributes, 'name')) ? "" : jade.interp)) + "</div></h3></div><div class=\"col-sm-7\"><div class=\"well well-parchment\">" + (jade.escape(null == (jade.interp = i18n(view.item.attributes, 'description')) ? "" : jade.interp)) + "</div></div></div><div class=\"row\"><div class=\"col-sm-3 col-sm-offset-9\"><button id=\"continue-btn\" data-i18n=\"common.continue\" class=\"btn btn-illustrated btn-primary btn-block btn-lg text-uppercase\"></button></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/picoctf-victory-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),me = locals_.me,view = locals_.view;buf.push("<div class=\"modal-dialog\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\"><div id=\"close-modal\" data-dismiss=\"modal\" class=\"well well-sm well-parchment\"><span class=\"glyphicon glyphicon-remove\"></span></div><div id=\"victory-header\"><div id=\"victory-title\">");
if ( !me.get('preferredLanguage') || me.get('preferredLanguage').split('-')[0] == 'en')
{
buf.push("<img src=\"/images/pages/play/level/modal/victory_word.png\" draggable=\"false\"/>");
}
else
{
buf.push("<h1 data-i18n=\"play_level.victory\">Victory</h1>");
}
buf.push("</div></div></div><div class=\"modal-body\"><div class=\"container-fluid\"><div class=\"row\">");
var victoryText = view.level.get('victory');
if ( victoryText && victoryText.body)
{
buf.push("<div class=\"well well-sm well-parchment\"><h3>" + (jade.escape(null == (jade.interp = victoryText.body) ? "" : jade.interp)) + "</h3></div>");
}
buf.push("</div><div class=\"row\">");
if ( view.nextLevel && view.nextLevel.get('slug'))
{
buf.push("<div class=\"col-sm-5 col-sm-offset-2\"><a href=\"/play/picoctf\" id=\"done-btn\" class=\"btn btn-illustrated btn-primary btn-block btn-lg text-uppercase\">Done</a></div><div class=\"col-sm-5\"><a" + (jade.attrs({ 'href':("/play/level/" + (view.nextLevel.get('slug')) + ""), 'id':('continue-button'), "class": [('btn'),('btn-illustrated'),('btn-success'),('btn-block'),('btn-lg'),('text-uppercase')] }, {"href":true})) + ">Continue</a></div>");
}
else
{
buf.push("<div class=\"col-sm-5 col-sm-offset-2\"></div><div class=\"col-sm-5\"><a href=\"/play/picoctf\" id=\"done-btn\" class=\"btn btn-illustrated btn-primary btn-block btn-lg text-uppercase\">Done</a></div>");
}
buf.push("</div></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/progress-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,i18n = locals_.i18n,me = locals_.me;buf.push("<div class=\"modal-header\"><div id=\"close-modal\" data-dismiss=\"modal\" class=\"btn well well-sm well-parchment\"><span class=\"glyphicon glyphicon-remove\"></span></div><div class=\"well well-sm well-parchment\"><h1 data-i18n=\"play_level.level_complete\"></h1></div></div><div class=\"modal-body\"><div class=\"container-fluid\"><div class=\"row\">");
var colClass = !view.nextLevel.isNew() ? 'col-sm-7' : 'col-sm-12'
buf.push("<div" + (jade.attrs({ "class": [(colClass)] }, {"class":true})) + "><div class=\"well well-sm well-parchment\"><h3 data-i18n=\"play_level.completed_level\" class=\"text-uppercase\"></h3><h2 class=\"text-uppercase text-center\">" + (jade.escape(null == (jade.interp = i18n(view.level.attributes, 'name')) ? "" : jade.interp)) + "</h2></div><div class=\"well well-sm well-parchment\">");
if ( me.isSessionless())
{
buf.push("<h3 class=\"course-title\"><span data-i18n=\"play_level.course\" class=\"text-uppercase spr\"></span><span class=\"text-uppercase text-center\">" + (jade.escape(null == (jade.interp = i18n(view.course.attributes, 'name')) ? "" : jade.interp)) + "</span></h3><span data-i18n=\"play_level.victory_no_progress_for_teachers\"></span>");
}
else
{
buf.push("<h3 data-i18n=\"play_level.course\" class=\"text-uppercase\"></h3><div class=\"row\"><div class=\"col-sm-8\"><h3 class=\"text-uppercase text-center\">" + (jade.escape(null == (jade.interp = i18n(view.course.attributes, 'name')) ? "" : jade.interp)) + "</h3></div><div class=\"col-sm-4\">");
var stats = view.classroom.statsForSessions(view.levelSessions, view.course.id)
buf.push("<h1><span>" + (jade.escape((jade.interp = stats.levels.numDone) == null ? '' : jade.interp)) + "/" + (jade.escape((jade.interp = stats.levels.size) == null ? '' : jade.interp)) + "</span></h1></div></div>");
}
buf.push("</div></div>");
if ( !view.nextLevel.isNew())
{
buf.push("<div class=\"col-sm-5\"><div class=\"well well-sm well-parchment\"><h3 class=\"text-uppercase\"><span data-i18n=\"play_level.next_level\"></span><span>:</span></h3><h2 class=\"text-uppercase\">" + (jade.escape(null == (jade.interp = i18n(view.nextLevel.attributes, 'name').replace('Course: ', '')) ? "" : jade.interp)) + "</h2><div class=\"next-level-description\">" + (null == (jade.interp = view.nextLevelDescription) ? "" : jade.interp) + "</div></div></div>");
}
buf.push("</div>");
if ( view.shareURL)
{
buf.push("<div class=\"well well-sm well-parchment\"><h3 class=\"text-uppercase\">");
if ( view.level.isType('game-dev'))
{
buf.push("<span data-i18n=\"sharing.share_game\"></span>");
}
else
{
buf.push("<span data-i18n=\"sharing.share_web\"></span>");
}
buf.push("</h3><p><span data-i18n=\"sharing.victory_course_share_prefix\"></span><span>" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "</span><a" + (jade.attrs({ 'href':(view.shareURL), 'target':('_blank') }, {"href":true,"target":true})) + ">");
if ( view.level.isType('game-dev'))
{
buf.push("<span data-i18n=\"sharing.victory_course_share_game\"></span>");
}
else
{
buf.push("<span data-i18n=\"sharing.victory_course_share_web\"></span>");
}
buf.push("</a><span>" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "</span><span data-i18n=\"sharing.victory_course_share_suffix\"></span></p>");
if ( view.session.isFake())
{
buf.push("<div data-i18n=\"sharing.unavailable\" class=\"alert alert-warning\"></div>");
}
else
{
buf.push("<div class=\"row\"><div class=\"col-sm-9\"><input" + (jade.attrs({ 'id':('share-level-input'), 'value':(view.shareURL), "class": [('text-h4'),('semibold'),('form-control'),('input-lg')] }, {"value":true})) + "/></div><div class=\"col-sm-3\"><button id=\"share-level-btn\" class=\"btn btn-lg btn-success btn-illustrated\"><span data-i18n=\"sharing.copy_url\"></span></button></div></div>");
}
buf.push("</div>");
}
buf.push("<div class=\"row\"><div class=\"col-sm-5 col-sm-offset-2\"><!-- TODO: Add rest of campaign functionality-->");
if ( view.level.get('type') === 'course-ladder')
{
buf.push("<button id=\"ladder-btn\" class=\"btn btn-illustrated btn-default btn-block btn-lg text-uppercase\">Ladder</button>");
}
buf.push("</div><div class=\"col-sm-5\">");
if ( !view.nextLevel.isNew())
{
buf.push("<button id=\"next-level-btn\" data-i18n=\"play_level.next_level\" class=\"btn btn-illustrated btn-primary btn-block btn-lg text-uppercase\"></button>");
}
else
{
buf.push("<button id=\"done-btn\" data-i18n=\"play_level.done\" class=\"btn btn-illustrated btn-primary btn-block btn-lg text-uppercase\"></button>");
}
buf.push("</div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/reload-level-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 data-i18n=\"play_level.reload_title\">Reload All Code?</h3></div><div class=\"modal-body\"><p data-i18n=\"play_level.reload_really\">Are you sure you want to reload this level back to the beginning?</p></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"modal.close\" class=\"btn\">Close</a><a href=\"#\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"play_level.reload_confirm\" id=\"restart-level-confirm-button\" class=\"btn btn-primary\">Reload All</a></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/modal/victory", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,levelName = locals_.levelName,body = locals_.body,readyToRank = locals_.readyToRank,level = locals_.level,me = locals_.me,fbRef = locals_.fbRef;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3><span data-i18n=\"play_level.victory_title_prefix\"></span><span>" + (jade.escape(null == (jade.interp = levelName) ? "" : jade.interp)) + "</span><span data-i18n=\"play_level.victory_title_suffix\">Complete</span></h3></div><div class=\"modal-body\"><img src=\"/images/level/victory.png\" alt=\"\" class=\"victory-banner\"/><div>" + (null == (jade.interp = body) ? "" : jade.interp) + "</div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\">");
if ( readyToRank)
{
buf.push("<div class=\"ladder-submission-view\"></div>");
}
else if ( level.isType('ladder'))
{
buf.push("<a" + (jade.attrs({ 'href':("/play/ladder/" + (level.get('slug')) + "#my-matches"), 'data-dismiss':("modal"), 'data-i18n':("play_level.victory_return_to_ladder"), "class": [('btn'),('btn-primary')] }, {"href":true,"data-dismiss":true,"data-i18n":true})) + ">Return to Ladder</a>");
}
else
{
buf.push("<a href=\"/\" data-dismiss=\"modal\" data-i18n=\"play_level.victory_go_home\" class=\"btn btn-primary\">Go Home</a>");
}
if ( me.get('anonymous'))
{
buf.push("<p class=\"sign-up-poke\"><button data-dismiss=\"modal\" data-i18n=\"play_level.victory_sign_up\" class=\"btn btn-success sign-up-button btn-large\">Sign Up to Save Progress</button><span data-i18n=\"play_level.victory_sign_up_poke\">Want to save your code? Create a free account!</span></p><p class=\"clearfix\"></p>");
}
else
{
buf.push("<div class=\"rating secret\"><span data-i18n=\"play_level.victory_rate_the_level\">Rate the level:</span><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i></div>");
}
if ( !me.get('anonymous'))
{
buf.push("<div class=\"review secret\"><span data-i18n=\"play_level.victory_review\">Tell us more!</span><br/><textarea></textarea></div>");
}
buf.push("<div class=\"share-buttons\"><div data-href=\"http://codecombat.com\" data-size=\"medium\" class=\"g-plusone\"></div><div" + (jade.attrs({ 'data-href':("https://www.facebook.com/codecombat"), 'data-send':("false"), 'data-layout':("button_count"), 'data-width':("350"), 'data-show-faces':("true"), 'data-ref':("coco_victory_" + (fbRef) + ""), "class": [('fb-like')] }, {"data-href":true,"data-send":true,"data-layout":true,"data-width":true,"data-show-faces":true,"data-ref":true})) + "></div><a href=\"https://twitter.com/CodeCombat\" data-show-count=\"true\" data-show-screen-name=\"false\" data-dnt=\"true\" data-align=\"right\" data-i18n=\"nav.twitter_follow\" class=\"twitter-follow-button\">Follow</a><iframe src=\"https://ghbtns.com/github-btn.html?user=codecombat&amp;repo=codecombat&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\" class=\"github-star-button\"></iframe></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/play-game-dev-level-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;var ready = !(view.state.get('errorMessage') || view.state.get('loading'))
buf.push("<div class=\"container-fluid style-flat\"><div id=\"game-row\" class=\"row\"><div class=\"col-xs-9\"><div id=\"canvas-wrapper\"><canvas width=\"924\" height=\"589\" id=\"webgl-surface\"></canvas><canvas width=\"924\" height=\"589\" id=\"normal-surface\"></canvas></div></div><div id=\"info-col\" class=\"col-xs-3\"><div class=\"panel panel-default\"><div class=\"panel-body text-center\">");
if ( view.state.get('errorMessage'))
{
buf.push("<div class=\"alert alert-danger\">" + (jade.escape(null == (jade.interp = view.state.get('errorMessage')) ? "" : jade.interp)) + "</div>");
}
if ( view.level.id && view.session.id)
{
buf.push("<h3 class=\"m-y-1\">" + (jade.escape(null == (jade.interp = view.level.get('name')) ? "" : jade.interp)) + "</h3><h4>" + (jade.escape(null == (jade.interp = view.state.get('creatorString')) ? "" : jade.interp)) + "</h4><hr/>");
}
if ( view.state.get('loading'))
{
buf.push("<h1 data-i18n=\"common.loading\" class=\"m-y-1\"></h1><div class=\"progress\"><div" + (jade.attrs({ 'style':("width: " + (view.state.get('progress')) + ""), "class": [('progress-bar')] }, {"style":true})) + "></div></div>");
}
if ( ready)
{
buf.push("<h3><span data-i18n=\"play_level.directions\"></span>:</h3><p>" + (null == (jade.interp = view.howToPlayText) ? "" : jade.interp) + "</p><hr/>");
}
buf.push("</div>");
if ( ready)
{
buf.push("<div class=\"panel-footer\">");
var playing = view.state.get('playing')
if ( playing)
{
buf.push("<button id=\"play-btn\" data-i18n=\"play_game_dev_level.restart\" class=\"btn btn-lg btn-burgandy btn-block\"></button>");
}
else
{
buf.push("<button id=\"play-btn\" data-i18n=\"play_game_dev_level.play\" class=\"btn btn-lg btn-forest btn-block\"></button>");
}
if ( view.state.get('isOwner'))
{
buf.push("<br/><button id=\"edit-level-btn\" data-i18n=\"play_level.edit_level\" class=\"btn btn-lg btn-warning btn-block\"></button>");
}
buf.push("</div>");
}
buf.push("</div></div></div><div id=\"share-row\" class=\"m-t-3\">");
if ( ready)
{
buf.push("<div class=\"panel panel-default\"><div id=\"share-panel-body\" class=\"panel-body\"><div id=\"share-text-div\" class=\"text-right\"><b data-i18n=\"sharing.share_game\"></b></div><input" + (jade.attrs({ 'id':('copy-url-input'), 'value':(view.state.get('shareURL')), "class": [('text-h4'),('semibold'),('form-control'),('input-lg')] }, {"value":true})) + "/><div id=\"copy-url-div\"><button id=\"copy-url-btn\" class=\"btn btn-lg btn-navy-alt\"><span data-i18n=\"sharing.copy_url\"></span></button></div></div>");
if ( !view.state.get('isOwner'))
{
buf.push("<div class=\"panel-body\"><a id=\"play-more-codecombat-btn\" href=\"/\" data-i18n=\"play_game_dev_level.play_more_codecombat\" class=\"btn btn-lg btn-navy-alt pull-right\"></a></div>");
}
buf.push("</div>");
}
buf.push("</div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/play-web-dev-level-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div id=\"web-surface-view\"></div><div id=\"info-bar\" class=\"style-flat\">");
if ( !view.supermodel.finished())
{
buf.push("<h1 data-i18n=\"common.loading\"></h1>");
}
else
{
buf.push("<h1><span data-i18n=\"game_dev.creator\"></span><span>" + (jade.escape(null == (jade.interp = ': ') ? "" : jade.interp)) + "</span>" + (jade.escape((jade.interp = view.session.get('creatorName')) == null ? '' : jade.interp)) + "</h1>");
}
buf.push("</div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/team_gold", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),team = locals_.team;buf.push("<div" + (jade.attrs({ "class": [("team-gold team-" + team)] }, {"class":true})) + "><img src=\"/images/level/gold_icon.png\" alt=\"\" draggable=\"false\"/><div" + (jade.attrs({ "class": [("gold-amount team-" + team)] }, {"class":true})) + "></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/thang_avatar", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),thang = locals_.thang,avatarURL = locals_.avatarURL,includeName = locals_.includeName;buf.push("<div" + (jade.attrs({ "class": [('thang-avatar-wrapper'),("team-" + (thang.team || "neutral"))] }, {"class":true})) + "><!--canvas(width=100, height=100, title=thang.id + \" - \" + thang.team)--><img" + (jade.attrs({ 'src':(avatarURL), 'draggable':("false"), "class": [('avatar')] }, {"src":true,"draggable":true})) + "/><img src=\"/images/level/thang_avatar_frame.png\" draggable=\"false\" class=\"avatar-frame\"/><div class=\"badge problems\"></div><div class=\"badge shared-thangs\"></div></div>");
if ( includeName)
{
buf.push("<div class=\"thang-name\">" + (jade.escape(null == (jade.interp = thang.id) ? "" : jade.interp)) + "</div>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/cast-button-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;if ( view.options.level.isType('game-dev'))
{
buf.push("<button class=\"btn btn-lg btn-illustrated btn-success game-dev-play-btn\"><span data-i18n=\"play_level.test_level\"></span></button><button class=\"btn btn-lg btn-illustrated btn-success done-button secret\"><span data-i18n=\"play_level.done\"></span></button>");
}
else
{
buf.push("<button" + (jade.attrs({ 'title':(view.castVerbose()), "class": [('btn'),('btn-lg'),('btn-illustrated'),('cast-button')] }, {"title":true})) + "><span data-i18n=\"play_level.tome_cast_button_ran\">Ran</span></button>");
if ( !view.observing)
{
if ( view.mirror)
{
buf.push("<div class=\"ladder-submission-view\"></div>");
}
else
{
buf.push("<button" + (jade.attrs({ 'title':(view.castRealTimeVerbose()), "class": [('btn'),('btn-lg'),('btn-illustrated'),('submit-button')] }, {"title":true})) + "><span data-i18n=\"play_level.tome_submit_button\">Submit</span><span class=\"spl secret submit-again-time\"></span></button><button class=\"btn btn-lg btn-illustrated btn-success done-button secret\"><span data-i18n=\"play_level.done\">Done</span></button>");
if ( view.autoSubmitsToLadder)
{
buf.push("<div class=\"hidden\"><div class=\"ladder-submission-view\"></div></div>");
}
}
}
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/problem_alert", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<button type=\"button\" class=\"close\">&times;</button><h3 data-i18n=\"play_level.problem_alert_title\" class=\"problem-alert-title\">Fix Your Code</h3>");
if ( view.hint)
{
buf.push("<span class=\"problem-title\">" + (null == (jade.interp = view.hint) ? "" : jade.interp) + "</span><br/><span class=\"problem-subtitle\">" + (null == (jade.interp = view.message) ? "" : jade.interp) + "</span>");
}
else
{
buf.push("<span class=\"problem-title\">" + (null == (jade.interp = view.message) ? "" : jade.interp) + "</span>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell-palette-thang-entry", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<!--span.doc-title(data-property-name=view.doc.name)= view.doc.title--><img" + (jade.attrs({ 'src':(view.thang.getPortraitURL()) }, {"src":true})) + "/>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell-palette-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),_ = locals_._,view = locals_.view,tabs = locals_.tabs,isIE = locals_.isIE;var header_mixin = function(label, name){
var block = this.block, attributes = this.attributes || {}, escaped = this.escaped || {};
buf.push("<a" + (jade.attrs({ 'role':("button"), 'id':("#palette-header-" + _.string.slugify(label)), 'data-panel':("#palette-tab-" + _.string.slugify(label)), "class": [('section-header'),('btn'),('btn-small'),('btn-illustrated'),('btn-warning')] }, {"role":true,"id":true,"data-panel":true})) + ">" + (jade.escape((jade.interp = name) == null ? '' : jade.interp)) + "");
if ( label == 'api-area')
{
buf.push("<div style=\"float: right\" class=\"glyphicon glyphicon-chevron-down\"></div>");
}
else
{
buf.push("<div style=\"float: right\" class=\"glyphicon glyphicon-chevron-right\"></div>");
}
buf.push("</a>");
};
buf.push("<div class=\"container\"><div class=\"left nano\"><div id=\"spell-palette-api-bar\" class=\"nano-content panel-group\">");
if ( view.level.get('type') == 'web-dev')
{
header_mixin('api-area', 'HTML');
}
else
{
header_mixin('api-area', 'Methods');
}
buf.push("<div id=\"palette-tab-api-area\" class=\"apis panel-collapse collapse in\"><div class=\"properties properties-this\"></div></div>");
if ( tabs)
{
// iterate tabs
;(function(){
  var $$obj = tabs;
  if ('number' == typeof $$obj.length) {

    for (var tab = 0, $$l = $$obj.length; tab < $$l; tab++) {
      var entries = $$obj[tab];

header_mixin(tab, tab);
buf.push("<div" + (jade.attrs({ 'id':("palette-tab-" + _.string.slugify(tab)), "class": [('panel-collapse'),('collapse')] }, {"id":true})) + "><div" + (jade.attrs({ "class": [("properties properties-" + _.string.slugify(tab))] }, {"class":true})) + "></div></div>");
    }

  } else {
    var $$l = 0;
    for (var tab in $$obj) {
      $$l++;      var entries = $$obj[tab];

header_mixin(tab, tab);
buf.push("<div" + (jade.attrs({ 'id':("palette-tab-" + _.string.slugify(tab)), "class": [('panel-collapse'),('collapse')] }, {"id":true})) + "><div" + (jade.attrs({ "class": [("properties properties-" + _.string.slugify(tab))] }, {"class":true})) + "></div></div>");
    }

  }
}).call(this);

}
header_mixin('events', 'Events');
buf.push("<div id=\"palette-tab-events\" class=\"apis panel-collapse collapse\"></div>");
header_mixin('stuff-area', 'Spawnable');
buf.push("<div id=\"palette-tab-stuff-area\" class=\"apis panel-collapse collapse\"></div></div></div><div class=\"right\"><div class=\"closeBtn btn btn-illustrated btn-danger\"><span class=\"glyphicon glyphicon-remove\"></span></div>");
if ( isIE)
{
buf.push("<div class=\"scrollArea always-scroll-y\"><div class=\"scrollableArea\"><div class=\"rightContentTarget content\"></div></div></div>");
}
else
{
buf.push("<div class=\"scrollArea\"><div class=\"scrollableArea\"><div class=\"rightContentTarget content\"></div></div></div>");
}
buf.push("</div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell-top-bar-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),features = locals_.features,me = locals_.me,maximizeShortcutVerbose = locals_.maximizeShortcutVerbose,codeLanguage = locals_.codeLanguage,beautifyShortcutVerbose = locals_.beautifyShortcutVerbose,view = locals_.view,i18nName = locals_.i18nName,translate = locals_.translate;if ( features.codePlay)
{
buf.push("<img id=\"codeplay-powered-by-banner\" src=\"/images/common/codeplay/CodePlay.png\"/>");
}
buf.push("<div class=\"hinge hinge-0\"></div><div class=\"hinge hinge-1\"></div><div class=\"hinge hinge-2\"></div><div class=\"hinge hinge-3\"></div><div class=\"spell-tool-buttons\"><div data-i18n=\"[title]play_level.tome_reload_method\" class=\"btn btn-small btn-illustrated btn-warning reload-code\"><div class=\"glyphicon glyphicon-repeat\"></div>");
if ( !features.codePlay)
{
buf.push("<span data-i18n=\"play_level.restart\" class=\"spl\"></span>");
}
buf.push("</div>");
if ( me.level() >= 15)
{
buf.push("<div" + (jade.attrs({ 'title':(maximizeShortcutVerbose), "class": [('btn'),('btn-small'),('btn-illustrated'),('fullscreen-code')] }, {"title":true})) + "><div class=\"glyphicon glyphicon-fullscreen\"></div><div class=\"glyphicon glyphicon-resize-small\"></div></div>");
}
if ( codeLanguage === 'javascript' && me.level() >= 15)
{
buf.push("<div" + (jade.attrs({ 'title':(beautifyShortcutVerbose), "class": [('btn'),('btn-small'),('btn-illustrated'),('beautify-code')] }, {"title":true})) + "><div class=\"glyphicon glyphicon-magnet\"></div></div>");
}
if ( view.hintsState && view.hintsState.get('total') > 0)
{
buf.push("<div class=\"btn btn-small btn-illustrated hints-button\"><span data-i18n=\"play_level.hints\"></span></div>");
}
if ( view.options.level.isType('web-dev'))
{
buf.push("<div class=\"btn btn-small btn-illustrated image-gallery-button\"><span data-i18n=\"web_dev.image_gallery_title\"></span></div>");
}
if ( view.options.level.get('shareable'))
{
i18nName = view.options.level.isType('game-dev') ? 'sharing.game' : 'sharing.webpage'
if ( view.options.session.isFake())
{
buf.push("<button" + (jade.attrs({ 'data-i18n':(i18nName), 'data-toggle':("popover"), 'data-placement':("bottom"), 'data-content':(translate('sharing.your_students_preview')), 'data-trigger':("hover"), "class": [('btn'),('btn-small'),('btn-illustrated')] }, {"data-i18n":true,"data-toggle":true,"data-placement":true,"data-content":true,"data-trigger":true})) + "></button>");
}
else
{
var url = '/play/' + view.options.level.get('type') + '-level/' + view.options.level.get('slug') + '/' + view.options.session.id;
if (view.options.courseID) url += '?course=' + view.options.courseID;
buf.push("<a" + (jade.attrs({ 'href':(url), 'data-i18n':(i18nName), "class": [('btn'),('btn-small'),('btn-illustrated')] }, {"href":true,"data-i18n":true})) + "></a>");
}
}
buf.push("<div class=\"clearfix\"></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<img src=\"/images/level/code_editor_background.png\" class=\"code-background\"/><span class=\"code-background\"></span><div class=\"ace\"></div><div data-i18n=\"play_level.code_saved\" class=\"save-status\"></div><div class=\"programming-language-container\">");
if ( view.spell.level.isType('web-dev'))
{
var campaign = view.spell.level.get('campaign') || '';
if ( campaign.indexOf('web-dev-1') >= 0)
{
buf.push("<span data-i18n=\"teacher.language\" class=\"programming-language-label\"></span><span class=\"programming-language-label spr\">:</span><span class=\"programming-language\">HTML</span>");
}
else
{
buf.push("<span data-i18n=\"play_level.languages\" class=\"programming-language-label\"></span><span class=\"programming-language-label spr\">:</span><span class=\"programming-language spr\">HTML</span><span class=\"programming-language-label spr\">/</span><span class=\"programming-language\">JavaScript</span>");
}
}
else
{
buf.push("<span data-i18n=\"play_level.programming_language\" class=\"programming-language-label\"></span><span class=\"programming-language-label spr\">:</span><span class=\"programming-language\">" + (jade.escape(null == (jade.interp = view.spell.displayCodeLanguage) ? "" : jade.interp)) + "</span>");
}
buf.push("</div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell_debug", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"progress\"><div role=\"progressbar\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\" class=\"progress-bar\"><span>Inspecting variable...</span></div></div><pre><code></code></pre>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell_palette_entry", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<span" + (jade.attrs({ 'data-property-name':(view.doc.name), "class": [('doc-title')] }, {"data-property-name":true})) + ">" + (jade.escape(null == (jade.interp = view.doc.title) ? "" : jade.interp)) + "</span>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell_palette_entry_popover", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),doc = locals_.doc,_ = locals_._,writable = locals_.writable,marked = locals_.marked,cooldowns = locals_.cooldowns,selectedMethod = locals_.selectedMethod,argumentExamples = locals_.argumentExamples,language = locals_.language,docName = locals_.docName,value = locals_.value,item = locals_.item;buf.push("<h4><span class=\"prop-name\">" + (jade.escape(null == (jade.interp = doc.shortName) ? "" : jade.interp)) + "</span> - ");
var skillType = (doc.type == 'function' && doc.owner == 'this' ? 'method' : doc.type)
buf.push("<code" + (jade.attrs({ 'data-i18n':('skill_docs.' + skillType), "class": [('prop-type')] }, {"data-i18n":true})) + "><!-- In case there's no translation in en.coffee because we missed one-->" + (jade.escape(null == (jade.interp = skillType) ? "" : jade.interp)) + "</code><!-- Redundant in case some tag docs are missing an owner-->");
if ( !_.contains(['function', 'basic tag', 'spawnable', 'event'], doc.type) && doc.owner != 'HTML')
{
buf.push(" (");
if ( writable)
{
buf.push("<span data-i18n=\"skill_docs.writable\">writable</span>");
}
else
{
buf.push("<span data-i18n=\"skill_docs.read_only\">read-only</span>");
}
buf.push(")");
}
buf.push("</h4>");
if ( doc.translatedShortName)
{
buf.push("<h5><span class=\"translated-name\">" + (jade.escape(null == (jade.interp = doc.translatedShortName) ? "" : jade.interp)) + "</span></h5>");
}
buf.push("<div class=\"description\"><p>" + (null == (jade.interp = marked(doc.description || 'Still undocumented, sorry.')) ? "" : jade.interp) + "</p><div style=\"clear: both\" class=\"clear\"></div>");
if ( cooldowns && (cooldowns.cooldown || cooldowns.specificCooldown))
{
buf.push("<p><span>");
if ( cooldowns.type == 'spell')
{
buf.push("<span data-i18n=\"skill_docs.spell\">Spell</span>");
}
else
{
buf.push("<span data-i18n=\"skill_docs.action\">Action</span>");
}
buf.push("<span data-i18n=\"skill_docs.action_name\" class=\"spl\">name</span><span class=\"spr\">:</span><code>\"" + (jade.escape((jade.interp = cooldowns.name) == null ? '' : jade.interp)) + "\"</code>.</span><span class=\"spl\"><span data-i18n=\"skill_docs.action_cooldown\">Takes</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = cooldowns.cooldown) ? "" : jade.interp)) + "</code>s.</span>");
if ( cooldowns.specificCooldown)
{
buf.push("<span class=\"spl\"><span data-i18n=\"skill_docs.action_specific_cooldown\">Cooldown</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = cooldowns.specificCooldown) ? "" : jade.interp)) + "</code>s.</span>");
}
if ( cooldowns.damage)
{
buf.push("<span class=\"spl\"><span data-i18n=\"skill_docs.action_damage\">Damage</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = cooldowns.damage) ? "" : jade.interp)) + "</code>.</span>");
}
if ( cooldowns.range)
{
buf.push("<span class=\"spl\"><span data-i18n=\"skill_docs.action_range\">Range</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = cooldowns.range) ? "" : jade.interp)) + "</code>m.</span>");
}
if ( cooldowns.radius)
{
buf.push("<span class=\"spl\"><span data-i18n=\"skill_docs.action_radius\">Radius</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = cooldowns.radius) ? "" : jade.interp)) + "</code>m.</span>");
}
if ( cooldowns.duration)
{
buf.push("<span class=\"spl\"><span data-i18n=\"skill_docs.action_duration\">Duration</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = cooldowns.duration) ? "" : jade.interp)) + "</code>s.</span>");
}
buf.push("</p>");
}
buf.push("</div>");
if ( !selectedMethod)
{
if ( doc.example)
{
buf.push("<p class=\"example\"><strong><span data-i18n=\"skill_docs.example\">Example</span>:</strong><div class=\"docs-ace-container\"><div class=\"docs-ace\">" + (jade.escape(null == (jade.interp = doc.example) ? "" : jade.interp)) + "</div></div></p>");
}
else if ( doc.type == 'function' && argumentExamples.length)
{
buf.push("<p class=\"example\"><strong><span data-i18n=\"skill_docs.example\">Example</span>:</strong><div><div class=\"docs-ace-container\"><div class=\"docs-ace\">");
if ( language == 'javascript')
{
buf.push("<span>" + (jade.escape(null == (jade.interp = doc.owner + '.' + docName + '(' + argumentExamples.join(', ') + ');') ? "" : jade.interp)) + "</span>");
}
else if ( language == 'coffeescript')
{
buf.push("<span>" + (jade.escape(null == (jade.interp = doc.ownerName + (doc.ownerName == '@' ? '' : '.') + docName + ' ' + argumentExamples.join(', ')) ? "" : jade.interp)) + "</span>");
}
else if ( language == 'python')
{
buf.push("<span>" + (jade.escape(null == (jade.interp = doc.ownerName + '.' + docName + '(' + argumentExamples.join(', ') + ')') ? "" : jade.interp)) + "</span>");
}
else if ( language == 'clojure')
{
buf.push("<span>" + (jade.escape(null == (jade.interp = '(.' + docName + ' ' + doc.ownerName + ' ' + argumentExamples.join(', ') + ')') ? "" : jade.interp)) + "</span>");
}
else if ( language == 'lua')
{
buf.push("<span>" + (jade.escape(null == (jade.interp = doc.ownerName + ':' + docName + '(' + argumentExamples.join(', ') + ')') ? "" : jade.interp)) + "</span>");
}
else if ( language == 'io')
{
buf.push("<span>" + (jade.escape(null == (jade.interp = (doc.ownerName == 'this' ? '' : doc.ownerName + ' ') + docName + '(' + argumentExamples.join(', ') + ')') ? "" : jade.interp)) + "</span>");
}
buf.push("</div></div></div></p>");
}
}
if ( (doc.type != 'function' && doc.type != 'snippet' && doc.type != 'spawnable' && doc.type != 'event' && !_.contains(['HTML', 'CSS', 'WebJavaScript', 'jQuery'], doc.owner)) || doc.name == 'now')
{
buf.push("<p class=\"value\"><strong><span data-i18n=\"skill_docs.current_value\">Current Value</span><span class=\"spr\">:</span></strong><pre><code" + (jade.attrs({ 'data-prop':(doc.name), "class": [('current-value')] }, {"data-prop":true})) + ">" + (jade.escape(null == (jade.interp = value) ? "" : jade.interp)) + "</code></pre></p>");
}
var argumentEntry_mixin = function(arg){
var block = this.block, attributes = this.attributes || {}, escaped = this.escaped || {};
buf.push("<div><code>" + (jade.escape(null == (jade.interp = arg.name) ? "" : jade.interp)) + "</code><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = arg.type) ? "" : jade.interp)) + "</code>");
if ( arg.example)
{
buf.push(" (<span data-i18n=\"skill_docs.ex\">ex</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = arg.example) ? "" : jade.interp)) + "</code>)");
}
if ( arg.description)
{
buf.push("<div>" + (null == (jade.interp = marked(arg.description)) ? "" : jade.interp) + "</div>");
}
if ( arg.default)
{
buf.push("<div><em><span data-i18n=\"skill_docs.default_value\">Default value</span><span class=\"spr\">:</span></em><code>" + (jade.escape(null == (jade.interp = arg.default) ? "" : jade.interp)) + "</code></div>");
}
buf.push("</div>");
};
if ( doc.args && doc.args.length)
{
var hasOptionalArguments = _.any(doc.args, function(arg){ return arg.optional })
buf.push("<p class=\"args\"><strong>");
if ( hasOptionalArguments)
{
buf.push("<span data-i18n=\"skill_docs.required_parameters\">Required Parameters</span>");
}
else
{
buf.push("<span data-i18n=\"skill_docs.parameters\">Parameters</span>");
}
buf.push("<span class=\"spr\">:</span></strong>");
// iterate doc.args
;(function(){
  var $$obj = doc.args;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var arg = $$obj[$index];

if (!( arg.optional))
{
argumentEntry_mixin(arg);
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var arg = $$obj[$index];

if (!( arg.optional))
{
argumentEntry_mixin(arg);
}
    }

  }
}).call(this);

buf.push("</p>");
if ( hasOptionalArguments)
{
buf.push("<p class=\"args\"><strong><span data-i18n=\"skill_docs.optional_parameters\">Optional Parameters</span><span class=\"spr\">:</span></strong>");
// iterate doc.args
;(function(){
  var $$obj = doc.args;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var arg = $$obj[$index];

if ( arg.optional)
{
argumentEntry_mixin(arg);
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var arg = $$obj[$index];

if ( arg.optional)
{
argumentEntry_mixin(arg);
}
    }

  }
}).call(this);

buf.push("</p>");
}
}
if ( doc.returns)
{
buf.push("<p class=\"returns\"><strong><span data-i18n=\"skill_docs.returns\">Returns</span><span class=\"spr\">:</span></strong><div><code>" + (jade.escape(null == (jade.interp = doc.returns.type) ? "" : jade.interp)) + "</code>");
if ( doc.returns.example)
{
buf.push(" (<span data-i18n=\"skill_docs.ex\">ex</span><span class=\"spr\">:</span><code>" + (jade.escape(null == (jade.interp = doc.returns.example) ? "" : jade.interp)) + "</code>)");
}
if ( doc.returns.description)
{
buf.push("<div>" + (null == (jade.interp = marked(doc.returns.description)) ? "" : jade.interp) + "</div>");
}
buf.push("</div></p>");
}
if ( item)
{
buf.push("<p><em><span data-i18n=\"skill_docs.granted_by\" class=\"spr\">Granted by</span>" + (jade.escape((jade.interp = item.get('name')) == null ? '' : jade.interp)) + ".</em></p>");
}
if ( selectedMethod)
{
buf.push("<p><em>Write the body of this method below.</em></p>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell_toolbar", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"flow\"><div class=\"spell-progress\"><div class=\"progress\"><div class=\"progress-bar\"><div class=\"scrubber-handle\"></div></div></div></div><div class=\"btn-group steppers\"><button title=\"Ctrl/Cmd + Alt + [: Step Backward\" class=\"btn btn-mini btn-inverse banner step-backward\"><i class=\"icon-arrow-left icon-white\"></i></button><button title=\"Ctrl/Cmd + Alt + ]: Step Forward\" class=\"btn btn-mini btn-inverse banner step-forward\"><i class=\"icon-arrow-right icon-white\"></i></button></div><div class=\"metrics\"><div class=\"statements-metric\">Statement <span class=\"metric statement-index\"></span> / <span class=\"metric statements-executed\"></span><span class=\"metric statements-executed-total\"></span></div><div class=\"calls-metric\">Call <span class=\"metric call-index\"></span> / <span class=\"metric calls-executed\"></span></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/spell_translation", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<pre><code></code></pre>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/tome/tome", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div id=\"spell-top-bar-view\"></div><div id=\"cast-button-view\"></div><div id=\"spell-view\"></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/level/web-surface-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),fullUnsafeContentHostname = locals_.fullUnsafeContentHostname;buf.push("<iframe" + (jade.attrs({ 'src':("//" + fullUnsafeContentHostname + "/web-dev-iframe.html") }, {"src":true})) + "></iframe>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/menu/game-menu-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,submenus = locals_.submenus,showTab = locals_.showTab,iconMap = locals_.iconMap,me = locals_.me;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"><img src=\"/images/pages/play/modal/game-menu-background.png\" draggable=\"false\" id=\"game-menu-background\"/><div id=\"close-modal\"><span class=\"glyphicon glyphicon-remove\"></span></div><ul id=\"game-menu-nav\" class=\"nav nav-pills nav-stacked\">");
if ( view.showsChooseHero())
{
buf.push("<li><a id=\"change-hero-tab\"><span class=\"glyphicon glyphicon-user\"></span><span data-i18n=\"[title]game_menu.choose_hero_caption;play.change_hero\"></span></a></li>");
}
// iterate submenus
;(function(){
  var $$obj = submenus;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var submenu = $$obj[index];

buf.push("<li" + (jade.attrs({ "class": [(submenu === showTab ? "active" : "")] }, {"class":true})) + "><a" + (jade.attrs({ 'href':('#' + submenu + '-view'), 'data-toggle':('tab') }, {"href":true,"data-toggle":true})) + "><span" + (jade.attrs({ "class": [('glyphicon'),("glyphicon-"+iconMap[submenu])] }, {"class":true})) + "></span>");
var i18nKey = 'game_menu.' + submenu.replace('-', '_');
buf.push("<span" + (jade.attrs({ 'data-i18n':('[title]' + i18nKey + '_caption;' + i18nKey + '_tab') }, {"data-i18n":true})) + "></span></a></li>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var submenu = $$obj[index];

buf.push("<li" + (jade.attrs({ "class": [(submenu === showTab ? "active" : "")] }, {"class":true})) + "><a" + (jade.attrs({ 'href':('#' + submenu + '-view'), 'data-toggle':('tab') }, {"href":true,"data-toggle":true})) + "><span" + (jade.attrs({ "class": [('glyphicon'),("glyphicon-"+iconMap[submenu])] }, {"class":true})) + "></span>");
var i18nKey = 'game_menu.' + submenu.replace('-', '_');
buf.push("<span" + (jade.attrs({ 'data-i18n':('[title]' + i18nKey + '_caption;' + i18nKey + '_tab') }, {"data-i18n":true})) + "></span></a></li>");
    }

  }
}).call(this);

if ( me.get('anonymous'))
{
buf.push("<li data-toggle=\"coco-modal\" data-target=\"core/CreateAccountModal\" class=\"auth-tab\"><a data-toggle=\"coco-modal\" data-target=\"core/CreateAccountModal\"><span class=\"glyphicon glyphicon-pencil\"></span><span data-i18n=\"[title]game_menu.auth_caption;game_menu.auth_tab\"></span></a></li>");
}
buf.push("</ul><div class=\"tab-content game-menu-tab-content\">");
// iterate submenus
;(function(){
  var $$obj = submenus;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var submenu = $$obj[index];

buf.push("<div" + (jade.attrs({ 'id':(submenu + '-view'), "class": [('tab-pane')] }, {"id":true})) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var submenu = $$obj[index];

buf.push("<div" + (jade.attrs({ 'id':(submenu + '-view'), "class": [('tab-pane')] }, {"id":true})) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/menu/guide-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),docs = locals_.docs,showVideo = locals_.showVideo,videoLocked = locals_.videoLocked;if ( docs.length === 1)
{
if ( showVideo)
{
buf.push("<h3 id=\"help-video-heading\" data-i18n=\"game_menu.guide_video_tutorial\"></h3>");
if ( videoLocked)
{
buf.push("<p data-i18n=\"subscribe.unlock_help_videos\">Subscribe to unlock all video tutorials.</p><button data-i18n=\"subscribe.subscribe_title\" class=\"start-subscription-button btn btn-lg btn-success\">Subscribe</button>");
}
else
{
buf.push("<div id=\"help-video-player\"></div>");
}
}
buf.push("<h3 data-i18n=\"game_menu.guide_tips\"></h3><div>" + (null == (jade.interp = docs[0].html) ? "" : jade.interp) + "</div>");
}
else
{
buf.push("<ul class=\"nav nav-tabs\">");
if ( showVideo)
{
buf.push("<li><a data-target=\"#docs_tab_help_video\" data-toggle=\"tab\" data-i18n=\"game_menu.guide_video_tutorial\"></a></li>");
}
// iterate docs
;(function(){
  var $$obj = docs;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var doc = $$obj[$index];

buf.push("<li><a" + (jade.attrs({ 'data-target':("#docs_tab_" + (doc.slug) + ""), 'data-toggle':("tab") }, {"data-target":true,"data-toggle":true})) + ">" + (jade.escape((jade.interp = doc.name) == null ? '' : jade.interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var doc = $$obj[$index];

buf.push("<li><a" + (jade.attrs({ 'data-target':("#docs_tab_" + (doc.slug) + ""), 'data-toggle':("tab") }, {"data-target":true,"data-toggle":true})) + ">" + (jade.escape((jade.interp = doc.name) == null ? '' : jade.interp)) + "</a></li>");
    }

  }
}).call(this);

buf.push("</ul><div class=\"tab-content\">");
if ( showVideo)
{
buf.push("<div id=\"docs_tab_help_video\" class=\"tab-pane\">");
if ( videoLocked)
{
buf.push("<p data-i18n=\"subscribe.unlock_help_videos\">Subscribe to unlock all video tutorials.</p><button data-i18n=\"subscribe.subscribe_title\" class=\"start-subscription-button btn btn-lg btn-success\">Subscribe</button>");
}
else
{
buf.push("<div id=\"help-video-player\"></div>");
}
buf.push("</div>");
}
// iterate docs
;(function(){
  var $$obj = docs;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var doc = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'id':("docs_tab_" + (doc.slug) + ""), "class": [('tab-pane')] }, {"id":true})) + ">" + (null == (jade.interp = doc.html) ? "" : jade.interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var doc = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'id':("docs_tab_" + (doc.slug) + ""), "class": [('tab-pane')] }, {"id":true})) + ">" + (null == (jade.interp = doc.html) ? "" : jade.interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/menu/inventory-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),gems = locals_.gems,selectedHero = locals_.selectedHero,equipment = locals_.equipment,itemGroups = locals_.itemGroups,selectedHeroClass = locals_.selectedHeroClass;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"><img src=\"/images/pages/play/modal/inventory-background.png\" draggable=\"false\" id=\"play-items-modal-narrow-bg\"/><h1 data-i18n=\"game_menu.inventory_tab\"></h1><div id=\"gems-count-container\"><span id=\"gems-count\" class=\"big-font\">" + (jade.escape(null == (jade.interp = gems) ? "" : jade.interp)) + "</span></div><div id=\"close-modal\"><span class=\"glyphicon glyphicon-remove\"></span></div><div id=\"equipped\">");
if ( selectedHero && selectedHero.get('featureImages'))
{
var featureImages = selectedHero.get('featureImages');
buf.push("<img" + (jade.attrs({ 'src':("/file/"+featureImages.body), 'draggable':("false"), 'id':('hero-image') }, {"src":true,"draggable":true})) + "/><img" + (jade.attrs({ 'src':("/file/"+featureImages.head), 'draggable':("false"), 'id':('hero-image-head') }, {"src":true,"draggable":true})) + "/><img" + (jade.attrs({ 'src':("/file/"+featureImages.hair), 'draggable':("false"), 'id':('hero-image-hair') }, {"src":true,"draggable":true})) + "/><img" + (jade.attrs({ 'src':("/file/"+featureImages.thumb), 'draggable':("false"), 'id':('hero-image-thumb') }, {"src":true,"draggable":true})) + "/>");
}
// iterate ['head', 'eyes', 'neck', 'torso', 'gloves', 'wrists', 'left-hand', 'right-hand', 'waist', 'feet', 'left-ring', 'right-ring', 'minion', 'flag', 'pet', 'programming-book', 'misc-0', 'misc-1']
;(function(){
  var $$obj = ['head', 'eyes', 'neck', 'torso', 'gloves', 'wrists', 'left-hand', 'right-hand', 'waist', 'feet', 'left-ring', 'right-ring', 'minion', 'flag', 'pet', 'programming-book', 'misc-0', 'misc-1'];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var slot = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'data-slot':(slot), "class": [('item-slot')] }, {"data-slot":true})) + "><div class=\"placeholder\"></div>");
if ( equipment[slot])
{
buf.push("<img" + (jade.attrs({ 'src':(equipment[slot].getPortraitURL()), 'data-item-id':(equipment[slot].id), "class": [('item')] }, {"src":true,"data-item-id":true})) + "/>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var slot = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'data-slot':(slot), "class": [('item-slot')] }, {"data-slot":true})) + "><div class=\"placeholder\"></div>");
if ( equipment[slot])
{
buf.push("<img" + (jade.attrs({ 'src':(equipment[slot].getPortraitURL()), 'data-item-id':(equipment[slot].id), "class": [('item')] }, {"src":true,"data-item-id":true})) + "/>");
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div><div id=\"unequipped\"><div class=\"nano\"><div class=\"nano-content\">");
if ( itemGroups)
{
if ( itemGroups.requiredPurchaseItems.models.length)
{
buf.push("<h4 id=\"required-purchase-description\" data-i18n=\"inventory.required_purchase_title\"></h4>");
// iterate itemGroups.requiredPurchaseItems.models
;(function(){
  var $$obj = itemGroups.requiredPurchaseItems.models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img draggable=\"false\"/></div>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img draggable=\"false\"/></div>");
}
    }

  }
}).call(this);

buf.push("<div class=\"clearfix\"></div>");
}
if ( itemGroups.availableItems.models.length)
{
buf.push("<h4 id=\"available-description\" data-i18n=\"inventory.available_item\"></h4>");
// iterate itemGroups.availableItems.models
;(function(){
  var $$obj = itemGroups.availableItems.models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),('available'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img/><button data-i18n=\"inventory.equip\" class=\"btn equip-item\"></button></div>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),('available'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img/><button data-i18n=\"inventory.equip\" class=\"btn equip-item\"></button></div>");
}
    }

  }
}).call(this);

buf.push("<div class=\"clearfix\"></div>");
}
buf.push("<div id=\"double-click-hint\" class=\"alert alert-info\"><span class=\"glyphicon glyphicon-info-sign spr\"></span><span data-i18n=\"inventory.should_equip\"></span></div>");
if ( itemGroups.restrictedItems.models.length)
{
buf.push("<h4 id=\"restricted-description\" data-i18n=\"inventory.restricted_title\"></h4>");
// iterate itemGroups.restrictedItems.models
;(function(){
  var $$obj = itemGroups.restrictedItems.models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img draggable=\"false\"/></div>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img draggable=\"false\"/></div>");
}
    }

  }
}).call(this);

buf.push("<div class=\"clearfix\"></div>");
}
if ( itemGroups.lockedItems.models.length)
{
buf.push("<h4 id=\"locked-description\" data-i18n=\"play.locked\"></h4>");
// iterate itemGroups.lockedItems.models
;(function(){
  var $$obj = itemGroups.lockedItems.models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img draggable=\"false\"/></div>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

if ( selectedHeroClass && item.classes.indexOf(selectedHeroClass) > -1)
{
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [('item'),(item.classes)] }, {"class":true,"data-item-id":true})) + "><img draggable=\"false\"/></div>");
}
    }

  }
}).call(this);

buf.push("<div class=\"clearfix\"></div>");
}
}
buf.push("</div></div></div><div id=\"item-details-view\"></div><div id=\"item-details-extra\"><button id=\"equip-item-viewed\" data-i18n=\"inventory.equip\" class=\"btn secret\"></button><button id=\"unequip-item-viewed\" data-i18n=\"inventory.unequip\" class=\"btn secret\"></button><div id=\"restricted-item-viewed\" data-i18n=\"inventory.restricted\" class=\"alert alert-danger secret\"></div></div><button id=\"choose-hero-button\" data-i18n=\"play.change_hero\" class=\"btn btn-lg btn-primary choose-inventory-active\">Change Hero</button><button id=\"play-level-button\" data-i18n=\"common.play\" class=\"btn btn-lg btn-success choose-inventory-active\">Play</button></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/menu/item-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),item = locals_.item,includes = locals_.includes,props = locals_.props,stats = locals_.stats;buf.push("<img" + (jade.attrs({ 'src':(item.getPortraitURL()) }, {"src":true})) + "/><div class=\"item-info\">");
if ( includes.name)
{
buf.push("<h4>" + (jade.escape(null == (jade.interp = item.get('name')) ? "" : jade.interp)) + "</h4>");
}
if ( includes.stats || (includes.props && props.length))
{
buf.push("<ul class=\"list-unstyled\">");
if ( includes.stats)
{
// iterate stats
;(function(){
  var $$obj = stats;
  if ('number' == typeof $$obj.length) {

    for (var prop = 0, $$l = $$obj.length; prop < $$l; prop++) {
      var stat = $$obj[prop];

if ( stat.display == 'true')
{
buf.push("<li>" + (jade.escape(null == (jade.interp = stat.name) ? "" : jade.interp)) + "</li>");
}
else
{
buf.push("<li>" + (jade.escape((jade.interp = stat.name) == null ? '' : jade.interp)) + ": " + (jade.escape((jade.interp = stat.display) == null ? '' : jade.interp)) + "</li>");
}
    }

  } else {
    var $$l = 0;
    for (var prop in $$obj) {
      $$l++;      var stat = $$obj[prop];

if ( stat.display == 'true')
{
buf.push("<li>" + (jade.escape(null == (jade.interp = stat.name) ? "" : jade.interp)) + "</li>");
}
else
{
buf.push("<li>" + (jade.escape((jade.interp = stat.name) == null ? '' : jade.interp)) + ": " + (jade.escape((jade.interp = stat.display) == null ? '' : jade.interp)) + "</li>");
}
    }

  }
}).call(this);

}
if ( includes.props && props.length)
{
buf.push("<li>Grants:");
// iterate props
;(function(){
  var $$obj = props;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var prop = $$obj[$index];

buf.push(" <code>" + (jade.escape(null == (jade.interp = prop) ? "" : jade.interp)) + "</code>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var prop = $$obj[$index];

buf.push(" <code>" + (jade.escape(null == (jade.interp = prop) ? "" : jade.interp)) + "</code>");
    }

  }
}).call(this);

buf.push("</li>");
}
buf.push("</ul>");
}
buf.push("<span class=\"status-message\"><span data-i18n=\"inventory.should_equip\" class=\"spl should-equip-message\"></span><span data-i18n=\"inventory.equipped\" class=\"spl equipped-message\"></span><span data-i18n=\"inventory.locked\" class=\"spl locked-message\"></span><span data-i18n=\"inventory.restricted\" class=\"spl restricted-message\"></span></span></div><div class=\"clearfix\"></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/menu/options-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),me = locals_.me,music = locals_.music,aceConfig = locals_.aceConfig;buf.push("<div id=\"player-avatar-container\" title=\"Click to change your avatar\">");
if ( !me.get('photoURL'))
{
buf.push("<div class=\"editable-icon glyphicon glyphicon-pencil\"></div>");
}
buf.push("<img" + (jade.attrs({ 'src':(me.getPhotoURL(230)), 'draggable':("false"), "class": [('profile-photo')] }, {"src":true,"draggable":true})) + "/><div class=\"form-group\"><input" + (jade.attrs({ 'id':('player-name'), 'name':("playerName"), 'type':("text"), 'value':(me.get('name', true)), "class": [('profile-caption')] }, {"name":true,"type":true,"value":true})) + "/></div></div><div class=\"form\"><h3 data-i18n=\"options.general_options\">General Options</h3><div id=\"volume-group\" class=\"form-group slider-group\"><span class=\"glyphicon glyphicon-volume-down\"></span><div id=\"option-volume\" class=\"slider spr spl\"></div><span class=\"glyphicon glyphicon-volume-up\"></span></div><div class=\"form-group checkbox\"><label for=\"option-music\" class=\"control-label\"><input" + (jade.attrs({ 'id':('option-music'), 'name':("option-music"), 'type':("checkbox"), 'checked':(music) }, {"name":true,"type":true,"checked":true})) + "/><span class=\"custom-checkbox\"><div class=\"glyphicon glyphicon-ok\"></div></span><span data-i18n=\"options.music_label\">Music</span></label><span data-i18n=\"options.music_description\" class=\"help-block\">Turn background music on/off.</span></div><img src=\"/images/pages/play/modal/hr.png\" draggable=\"false\" class=\"hr\"/><h3 data-i18n=\"options.editor_config_title\">Editor Configuration</h3><div class=\"form-group checkbox\"><label for=\"option-live-completion\"><input" + (jade.attrs({ 'id':('option-live-completion'), 'name':("liveCompletion"), 'type':("checkbox"), 'checked':(aceConfig.liveCompletion) }, {"name":true,"type":true,"checked":true})) + "/><span class=\"custom-checkbox\"><div class=\"glyphicon glyphicon-ok\"></div></span><span data-i18n=\"options.editor_config_livecompletion_label\">Live Autocompletion</span></label><span data-i18n=\"options.editor_config_livecompletion_description\" class=\"help-block\">Displays autocomplete suggestions while typing.</span></div><div class=\"form-group checkbox\"><label for=\"option-invisibles\"><input" + (jade.attrs({ 'id':('option-invisibles'), 'name':("invisibles"), 'type':("checkbox"), 'checked':(aceConfig.invisibles) }, {"name":true,"type":true,"checked":true})) + "/><span class=\"custom-checkbox\"><div class=\"glyphicon glyphicon-ok\"></div></span><span data-i18n=\"options.editor_config_invisibles_label\">Show Invisibles</span></label><span data-i18n=\"options.editor_config_invisibles_description\" class=\"help-block\">Displays invisibles such as spaces or tabs.</span></div><div class=\"form-group checkbox\"><label for=\"option-indent-guides\"><input" + (jade.attrs({ 'id':('option-indent-guides'), 'name':("indentGuides"), 'type':("checkbox"), 'checked':(aceConfig.indentGuides) }, {"name":true,"type":true,"checked":true})) + "/><span class=\"custom-checkbox\"><div class=\"glyphicon glyphicon-ok\"></div></span><span data-i18n=\"options.editor_config_indentguides_label\">Show Indent Guides</span></label><span data-i18n=\"options.editor_config_indentguides_description\" class=\"help-block\">Displays vertical lines to see indentation better.</span></div><div class=\"form-group checkbox\"><label for=\"option-behaviors\"><input" + (jade.attrs({ 'id':('option-behaviors'), 'name':("behaviors"), 'type':("checkbox"), 'checked':(aceConfig.behaviors) }, {"name":true,"type":true,"checked":true})) + "/><span class=\"custom-checkbox\"><div class=\"glyphicon glyphicon-ok\"></div></span><span data-i18n=\"options.editor_config_behaviors_label\">Smart Behaviors</span></label><span data-i18n=\"options.editor_config_behaviors_description\" class=\"help-block\">Autocompletes brackets, braces, and quotes.</span></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/menu/save-load-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"row\"><div class=\"col-sm-4\"><div data-toggle=\"buttons\" id=\"save-granularity-toggle\" class=\"btn-group\"><label class=\"btn btn-primary active\"><input type=\"radio\" checked=\"checked\" value=\"level-sessions\"/><span data-i18n=\"save_load.granularity_saved_games\" title=\"Manage your saved games\"></span></label><label class=\"btn btn-primary\"><input type=\"radio\" value=\"change-history\"/><span data-i18n=\"save_load.granularity_change_history\" title=\"See your autosaved code edit history\"></span></label></div><div class=\"save-list level-sessions\"><ul class=\"list-group\"><li class=\"list-group-item\">Save 001</li><li class=\"list-group-item\">Greedy Algorithm</li><li class=\"list-group-item\">Defensive Strategy</li></ul></div><div class=\"save-list change-history secret\"><ul class=\"list-group\"><li class=\"list-group-item\">--item switches yeah--</li><li class=\"list-group-item\">Autosaved 17:05</li><li class=\"list-group-item\">Autosaved 14:45</li><li class=\"list-group-item\">Autosaved 16:40</li><li class=\"list-group-item\">Autosaved 5:05</li><li class=\"list-group-item\">Autosaved 5:00</li><li class=\"list-group-item\">--item switches yeah--</li><li class=\"list-group-item\">Autosaved 4:50</li><li class=\"list-group-item\">Autosaved 7/7/14</li><li class=\"list-group-item\">Autosaved 7/7/14</li></ul></div></div><div class=\"col-sm-8\"><div class=\"save-pane level-sessions\"><img src=\"/images/pages/game-menu/save-load-stub.png\"/><h3>Interactions:</h3><ul><li>On the left is a flat list of saves for this level. Click one and the stuff on the right appears.</li><li>There are name and description input boxes. Editing them auto updates the save on the left.</li><li>There are also items showing what the current equipment is, and below the current code. Neither are editable.</li><li>If you click the red box on any save, or click the delete button for the selected save, it asks for confirmation, then deletes.</li><li>Click the new save button: current code, items and empty name/description appear on the right, and a new save slot appears at the top of the list on the left, which is selected. Works like editing otherwise.</li></ul></div><div class=\"save-pane change-history secret\"><img src=\"/images/pages/game-menu/save-load-history-stub.png\"/><h3>Interactions</h3><ul><li>Similar to WebStorm. Click ‘history’ tab in the upper left of the save/load screen to switch to this view.</li><li>Click the left row of VCS versions, and the hero, language, items and code for it shows on the right.</li><li>Click revert to set the code back to the version of the code on the left. Modal closes with the new code.</li><li>Might experiment with showing diffs with difflib. More of an interface issue than a showing-diff issue.</li></ul></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/buy-gems-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,me = locals_.me;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"> ");
if ( view.state === 'purchasing')
{
buf.push("<div data-i18n=\"buy_gems.purchasing\" class=\"alert alert-info\"></div>");
}
else if ( view.state === 'retrying')
{
buf.push("<div id=\"retrying-alert\" data-i18n=\"buy_gems.retrying\" class=\"alert alert-danger\"></div>");
}
else
{
if ( (me.get('preferredLanguage',true) || 'en-US').split('-')[0] == 'nl')
{
buf.push("<img src=\"/images/pages/play/modal/lang-nl/buy-gems-background-NL.png\" id=\"buy-gems-background\"/>");
}
else
{
buf.push("<img src=\"/images/pages/play/modal/buy-gems-background.png\" id=\"buy-gems-background\"/>");
}
buf.push("<h1 data-i18n=\"play.buy_gems\"> </h1><div id=\"products\">");
if ( view.supermodel.finished())
{
// iterate view.products.models
;(function(){
  var $$obj = view.products.models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var product = $$obj[$index];

buf.push("<div class=\"product\"><h4>x" + (jade.escape((jade.interp = product.get('gems')) == null ? '' : jade.interp)) + "</h4><h3" + (jade.attrs({ 'data-i18n':(product.get('i18n')) }, {"data-i18n":true})) + "></h3><button" + (jade.attrs({ 'value':(product.get('name')), "class": [('btn'),('btn-illustrated'),('btn-lg')] }, {"value":true})) + "><span>" + (jade.escape(null == (jade.interp = product.get('priceString')) ? "" : jade.interp)) + "</span></button></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var product = $$obj[$index];

buf.push("<div class=\"product\"><h4>x" + (jade.escape((jade.interp = product.get('gems')) == null ? '' : jade.interp)) + "</h4><h3" + (jade.attrs({ 'data-i18n':(product.get('i18n')) }, {"data-i18n":true})) + "></h3><button" + (jade.attrs({ 'value':(product.get('name')), "class": [('btn'),('btn-illustrated'),('btn-lg')] }, {"value":true})) + "><span>" + (jade.escape(null == (jade.interp = product.get('priceString')) ? "" : jade.interp)) + "</span></button></div>");
    }

  }
}).call(this);

if ( (me.get('preferredLanguage',true) || 'en-US').split('-')[0] == 'nl')
{
buf.push("<div class=\"product\"><h4 class=\"subscription-gem-amount\">x{{gems}} / mo</h4><h3> \n1, 3, 6 OF 12 <br/>MAANDEN</h3><a href=\"http://www.codecombat.nl/kopen\" target=\"_blank\"><button class=\"btn btn-ideal btn-illustrated btn-lg btn-succes\">PREPAID CODES</button></a></div>");
}
buf.push("<div class=\"product\"><h4 class=\"subscription-gem-amount\">x{{gems}} / mo</h4><h3 data-i18n=\"account.subscription\"></h3>");
if ( me.hasSubscription())
{
buf.push("<button class=\"disabled start-subscription-button btn btn-lg btn-illustrated btn-success\">✓ <span data-i18n=\"account.subscribed\"></span></button>");
}
else
{
buf.push("<button data-i18n=\"subscribe.subscribe_title\" class=\"start-subscription-button btn btn-lg btn-illustrated btn-success\">Subscribe</button>");
}
buf.push("</div>");
}
buf.push("</div>");
if ( view.state === 'declined')
{
buf.push("<div id=\"declined-alert\" class=\"alert alert-danger alert-dismissible\"><span data-i18n=\"buy_gems.declined\"></span><button type=\"button\" data-dismiss=\"alert\" class=\"close\"><span aria-hidden=\"true\">&times;      </span></button></div>");
}
if ( view.state === 'unknown_error')
{
buf.push("<div id=\"error-alert\" class=\"alert alert-danger alert-dismissible\"><button type=\"button\" data-dismiss=\"alert\" class=\"close\"><span aria-hidden=\"true\">&times;</span></button><p data-i18n=\"loading_error.unknown\"></p><p>" + (jade.escape(null == (jade.interp = view.stateMessage) ? "" : jade.interp)) + "</p></div>");
}
if ( view.state === 'recovered_charge')
{
buf.push("<div id=\"recovered-alert\" class=\"alert alert-danger alert-dismissible\"><span data-i18n=\"buy_gems.recovered\"></span><button type=\"button\" data-dismiss=\"alert\" class=\"close\"><span aria-hidden=\"true\">&times;</span></button></div>");
}
buf.push("<div id=\"close-modal\"><span class=\"glyphicon glyphicon-remove\"></span></div>");
}
buf.push("</div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/buy-gems-prompt", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div role=\"tooltip\" class=\"popover buy-gems-prompt\"><div class=\"arrow\"></div><h2 data-i18n=\"buy_gems.prompt_title\">Not Enough Gems</h2><p data-i18n=\"buy_gems.prompt_body\">Do you want to get more?</p><button data-i18n=\"buy_gems.prompt_button\" class=\"btn btn-success btn-illustrated btn-lg buy-gems-prompt-button\">Enter Shop</button></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/item-details-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),item = locals_.item,stats = locals_.stats,me = locals_.me,props = locals_.props;buf.push("<div id=\"item-title\"><h2 class=\"one-line big-font\">" + (jade.escape(null == (jade.interp = item ? item.name : '') ? "" : jade.interp)) + "</h2></div><div id=\"item-details-body\">");
if ( item)
{
buf.push("<div class=\"nano\"><div class=\"nano-content\"><div id=\"item-container\"><img" + (jade.attrs({ 'src':(item.getPortraitURL()), 'draggable':("false"), "class": [('item-img')] }, {"src":true,"draggable":true})) + "/><img" + (jade.attrs({ 'src':(item.getPortraitURL()), 'draggable':("false"), "class": [('item-shadow')] }, {"src":true,"draggable":true})) + "/></div><img src=\"/images/pages/play/modal/hr.png\" draggable=\"false\" class=\"hr\"/>");
// iterate stats
;(function(){
  var $$obj = stats;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var stat = $$obj[$index];

buf.push("<div" + (jade.attrs({ "class": [("stat-row big-font" + (/^en/.test(me.get('preferredLanguage')) && stat.matchedShortName ? " short-name" : ""))] }, {"class":true})) + "><div class=\"stat-label\">" + (jade.escape(null == (jade.interp = stat.name) ? "" : jade.interp)) + "</div><div class=\"stat\">" + (jade.escape(null == (jade.interp = stat.display) ? "" : jade.interp)) + "</div></div><img" + (jade.attrs({ 'src':("/images/pages/play/modal/hr.png"), 'draggable':("false"), "class": [('hr'),(stat.isLast ? "" : "faded")] }, {"class":true,"src":true,"draggable":true})) + "/>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var stat = $$obj[$index];

buf.push("<div" + (jade.attrs({ "class": [("stat-row big-font" + (/^en/.test(me.get('preferredLanguage')) && stat.matchedShortName ? " short-name" : ""))] }, {"class":true})) + "><div class=\"stat-label\">" + (jade.escape(null == (jade.interp = stat.name) ? "" : jade.interp)) + "</div><div class=\"stat\">" + (jade.escape(null == (jade.interp = stat.display) ? "" : jade.interp)) + "</div></div><img" + (jade.attrs({ 'src':("/images/pages/play/modal/hr.png"), 'draggable':("false"), "class": [('hr'),(stat.isLast ? "" : "faded")] }, {"class":true,"src":true,"draggable":true})) + "/>");
    }

  }
}).call(this);

if ( item.description)
{
buf.push("<div class=\"item-description\">" + (jade.escape(null == (jade.interp = item.description) ? "" : jade.interp)) + "</div>");
}
if ( props.length)
{
buf.push("<div id=\"skills\"><h3 data-i18n=\"play.skills_granted\" class=\"big-font\"></h3>");
// iterate props
;(function(){
  var $$obj = props;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var prop = $$obj[$index];

buf.push("<p><strong>" + (jade.escape(null == (jade.interp = prop.name) ? "" : jade.interp)) + "</strong><span class=\"spr\">:</span><span>" + (null == (jade.interp = prop.description) ? "" : jade.interp) + "</span></p>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var prop = $$obj[$index];

buf.push("<p><strong>" + (jade.escape(null == (jade.interp = prop.name) ? "" : jade.interp)) + "</strong><span class=\"spr\">:</span><span>" + (null == (jade.interp = prop.description) ? "" : jade.interp) + "</span></p>");
    }

  }
}).call(this);

buf.push("</div>");
}
if ( item.comingSoon)
{
buf.push("<div class=\"text-center\"><h3>This item has no stats.</h3><p>Only admins will see it for now.</p></div>");
}
buf.push("</div></div>");
}
buf.push("</div>");
if ( item && !item.owned)
{
if ( item.unequippable)
{
buf.push("<button class=\"btn big-font disabled unequippable\">" + (jade.escape((jade.interp = item.get('heroClass')) == null ? '' : jade.interp)) + " Only</button>");
}
else
{
buf.push("<button" + (jade.attrs({ 'id':('selected-item-unlock-button'), 'data-item-id':(item.id), "class": [('btn'),('big-font'),('unlock-button')] }, {"data-item-id":true})) + "><span data-i18n=\"play.unlock\">Unlock</span><span class=\"spl\">" + (jade.escape(null == (jade.interp = '('+item.get('gems')) ? "" : jade.interp)) + "</span><img src=\"/images/common/gem.png\" draggable=\"false\"/><span>)</span></button>");
}
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/leaderboard-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),levelName = locals_.levelName,submenus = locals_.submenus;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"><img src=\"/images/pages/play/modal/leaderboard-background.png\" draggable=\"false\" id=\"leaderboard-background\"/><h1 class=\"level-title\">" + (jade.escape(null == (jade.interp = levelName) ? "" : jade.interp)) + "</h1><div id=\"close-modal\"><span class=\"glyphicon glyphicon-remove\"></span></div><ul id=\"leaderboard-nav\" class=\"nav nav-pills nav-stacked\">");
var lastScoreType = null;
// iterate submenus
;(function(){
  var $$obj = submenus;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var submenu = $$obj[index];

if ( lastScoreType && submenu.scoreType != lastScoreType)
{
buf.push("<br/>");
}
buf.push("<li" + (jade.attrs({ "class": [(index ? "" : "active")] }, {"class":true})) + "><a" + (jade.attrs({ 'href':('#' + submenu.scoreType + '-' + submenu.timespan + '-view'), 'data-toggle':('tab') }, {"href":true,"data-toggle":true})) + ">");
if ( submenu.scoreType != lastScoreType)
{
buf.push("<div" + (jade.attrs({ 'data-i18n':('leaderboard.' + submenu.scoreType.replace('-', '_')), "class": [('scoreType')] }, {"data-i18n":true})) + ">" + (jade.escape(null == (jade.interp = submenu.scoreType) ? "" : jade.interp)) + "</div>");
}
else
{
buf.push("<div class=\"scoreType\">&nbsp;</div>");
}
buf.push("<div" + (jade.attrs({ 'data-i18n':('leaderboard.' + submenu.timespan), "class": [('timespan')] }, {"data-i18n":true})) + "></div>");
lastScoreType = submenu.scoreType;
buf.push("</a></li>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var submenu = $$obj[index];

if ( lastScoreType && submenu.scoreType != lastScoreType)
{
buf.push("<br/>");
}
buf.push("<li" + (jade.attrs({ "class": [(index ? "" : "active")] }, {"class":true})) + "><a" + (jade.attrs({ 'href':('#' + submenu.scoreType + '-' + submenu.timespan + '-view'), 'data-toggle':('tab') }, {"href":true,"data-toggle":true})) + ">");
if ( submenu.scoreType != lastScoreType)
{
buf.push("<div" + (jade.attrs({ 'data-i18n':('leaderboard.' + submenu.scoreType.replace('-', '_')), "class": [('scoreType')] }, {"data-i18n":true})) + ">" + (jade.escape(null == (jade.interp = submenu.scoreType) ? "" : jade.interp)) + "</div>");
}
else
{
buf.push("<div class=\"scoreType\">&nbsp;</div>");
}
buf.push("<div" + (jade.attrs({ 'data-i18n':('leaderboard.' + submenu.timespan), "class": [('timespan')] }, {"data-i18n":true})) + "></div>");
lastScoreType = submenu.scoreType;
buf.push("</a></li>");
    }

  }
}).call(this);

buf.push("</ul><div class=\"tab-content leaderboard-tab-content\">");
// iterate submenus
;(function(){
  var $$obj = submenus;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var submenu = $$obj[index];

buf.push("<div" + (jade.attrs({ 'id':(submenu.scoreType + '-' + submenu.timespan + '-view'), "class": [('tab-pane')] }, {"id":true})) + "><div class=\"leaderboard-tab-view\"></div></div>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var submenu = $$obj[index];

buf.push("<div" + (jade.attrs({ 'id':(submenu.scoreType + '-' + submenu.timespan + '-view'), "class": [('tab-pane')] }, {"id":true})) + "><div class=\"leaderboard-tab-view\"></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/leaderboard-tab-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),scoreType = locals_.scoreType,timespan = locals_.timespan,topScores = locals_.topScores,me = locals_.me,_ = locals_._,loading = locals_.loading;buf.push("<h1><span data-i18n=\"leaderboard.top_players\" class=\"spr\">Top Players by</span><span" + (jade.attrs({ 'data-i18n':("leaderboard." + (scoreType.replace('-', '_')) + "") }, {"data-i18n":true})) + "></span><span class=\"spr\">,</span><span" + (jade.attrs({ 'data-i18n':("leaderboard." + (timespan) + "") }, {"data-i18n":true})) + "></span></h1>");
if ( topScores)
{
buf.push("<table class=\"table table-bordered table-condensed table-hover\"><thead><tr><th colspan=\"4\" data-i18n=\"general.player\"></th><th data-i18n=\"general.score\"></th><th data-i18n=\"general.when\"></th><th></th></tr></thead><tbody>");
// iterate topScores
;(function(){
  var $$obj = topScores;
  if ('number' == typeof $$obj.length) {

    for (var rank = 0, $$l = $$obj.length; rank < $$l; rank++) {
      var row = $$obj[rank];

var isMyRow = row.creator == me.id
var viewable = rank >= 5 || me.isAdmin();
buf.push("<tr" + (jade.attrs({ 'data-player-id':(row.creator), 'data-session-id':(row.session), 'title':(viewable ? "View solution" : "Can't view top 5 solutions"), "class": [(isMyRow ? "success" : "" + (viewable ? " viewable" : ""))] }, {"class":true,"data-player-id":true,"data-session-id":true,"title":true})) + "><td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + (row.codeLanguage) + "_small.png)"), 'title':(_.string.capitalize(row.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td><td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + (row.hero) + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td><td class=\"name-col-cell\">" + (jade.escape(null == (jade.interp = row.creatorName || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = row.score) ? "" : jade.interp)) + "</td><td class=\"ago-cell\">" + (jade.escape(null == (jade.interp = row.ago) ? "" : jade.interp)) + "</td><td class=\"viewable-cell\">");
if ( viewable)
{
if ( (me.get('preferredLanguage', true) || 'en-US').substr(0, 2) == 'en')
{
buf.push("<div class=\"btn btn-xs btn-info\">Watch</div>");
}
else
{
buf.push("<div class=\"glyphicon glyphicon-eye-open\"></div>");
}
}
else
{
buf.push("<div class=\"glyphicon glyphicon-eye-close\"></div>");
}
buf.push("</td></tr>");
    }

  } else {
    var $$l = 0;
    for (var rank in $$obj) {
      $$l++;      var row = $$obj[rank];

var isMyRow = row.creator == me.id
var viewable = rank >= 5 || me.isAdmin();
buf.push("<tr" + (jade.attrs({ 'data-player-id':(row.creator), 'data-session-id':(row.session), 'title':(viewable ? "View solution" : "Can't view top 5 solutions"), "class": [(isMyRow ? "success" : "" + (viewable ? " viewable" : ""))] }, {"class":true,"data-player-id":true,"data-session-id":true,"title":true})) + "><td class=\"rank-cell\">" + (jade.escape(null == (jade.interp = rank + 1) ? "" : jade.interp)) + "</td><td" + (jade.attrs({ 'style':("background-image: url(/images/common/code_languages/" + (row.codeLanguage) + "_small.png)"), 'title':(_.string.capitalize(row.codeLanguage)), "class": [('code-language-cell')] }, {"style":true,"title":true})) + "></td><td" + (jade.attrs({ 'style':("background-image: url(/file/db/thang.type/" + (row.hero) + "/portrait.png)"), "class": [('hero-portrait-cell')] }, {"style":true})) + "></td><td class=\"name-col-cell\">" + (jade.escape(null == (jade.interp = row.creatorName || "Anonymous") ? "" : jade.interp)) + "</td><td class=\"score-cell\">" + (jade.escape(null == (jade.interp = row.score) ? "" : jade.interp)) + "</td><td class=\"ago-cell\">" + (jade.escape(null == (jade.interp = row.ago) ? "" : jade.interp)) + "</td><td class=\"viewable-cell\">");
if ( viewable)
{
if ( (me.get('preferredLanguage', true) || 'en-US').substr(0, 2) == 'en')
{
buf.push("<div class=\"btn btn-xs btn-info\">Watch</div>");
}
else
{
buf.push("<div class=\"glyphicon glyphicon-eye-open\"></div>");
}
}
else
{
buf.push("<div class=\"glyphicon glyphicon-eye-close\"></div>");
}
buf.push("</td></tr>");
    }

  }
}).call(this);

buf.push("</tbody></table>");
}
else if ( loading)
{
buf.push("<h3 data-i18n=\"common.loading\"></h3>");
}
else
{
buf.push("<h3>No scores yet.</h3>");
};return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/play-account-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 data-i18n=\"nav.account\">Account</h3></div><div class=\"modal-body\"><div id=\"account-settings-view\"></div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><div id=\"save-button\" data-i18n=\"delta.no_changes\" disabled=\"true\" class=\"btn-lg btn disabled\">No Changes</div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/play-achievements-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,moment = locals_.moment,rewards = locals_.rewards,worth = locals_.worth;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 data-i18n=\"play.achievements\">Achievements</h3></div><div class=\"modal-body\">");
// iterate view.achievements.models
;(function(){
  var $$obj = view.achievements.models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var achievement = $$obj[$index];

buf.push("<div" + (jade.attrs({ "class": [('panel'),(achievement.earned ? 'earned' : '')] }, {"class":true})) + "><div class=\"panel-body\"><img" + (jade.attrs({ 'src':(achievement.getImageURL()), 'draggable':("false"), "class": [('icon')] }, {"src":true,"draggable":true})) + "/><h3>" + (jade.escape(null == (jade.interp = achievement.name + (achievement.earned && achievement.earned.get('achievedAmount') ? (' - ' + achievement.earned.get('achievedAmount') + 'x') : '')) ? "" : jade.interp)) + "</h3><p>" + (jade.escape(null == (jade.interp = achievement.description) ? "" : jade.interp)) + "</p></div>");
if ( achievement.earnedDate)
{
buf.push("<div class=\"created\">" + (jade.escape(null == (jade.interp = moment(achievement.earnedDate).fromNow()) ? "" : jade.interp)) + "</div>");
}
else
{
buf.push("<div data-i18n=\"user.status_unfinished\" class=\"created\"></div>");
}
buf.push("<div class=\"rewards\">");
rewards = achievement.get('rewards');
if ( rewards && rewards.gems)
{
buf.push("<span class=\"gems label label-default\"><span>" + (jade.escape(null == (jade.interp = achievement.earnedGems || rewards.gems) ? "" : jade.interp)) + "</span><img src=\"/images/common/gem.png\" draggable=\"false\" class=\"gem\"/></span>");
}
worth = achievement.get('worth');
if ( worth)
{
buf.push("<span class=\"worth label label-default\"><span>" + (jade.escape((jade.interp = achievement.earnedPoints || worth) == null ? '' : jade.interp)) + "xp</span></span>");
}
buf.push("<!-- maybe add more icons/numbers for items, heroes, levels, xp?--></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var achievement = $$obj[$index];

buf.push("<div" + (jade.attrs({ "class": [('panel'),(achievement.earned ? 'earned' : '')] }, {"class":true})) + "><div class=\"panel-body\"><img" + (jade.attrs({ 'src':(achievement.getImageURL()), 'draggable':("false"), "class": [('icon')] }, {"src":true,"draggable":true})) + "/><h3>" + (jade.escape(null == (jade.interp = achievement.name + (achievement.earned && achievement.earned.get('achievedAmount') ? (' - ' + achievement.earned.get('achievedAmount') + 'x') : '')) ? "" : jade.interp)) + "</h3><p>" + (jade.escape(null == (jade.interp = achievement.description) ? "" : jade.interp)) + "</p></div>");
if ( achievement.earnedDate)
{
buf.push("<div class=\"created\">" + (jade.escape(null == (jade.interp = moment(achievement.earnedDate).fromNow()) ? "" : jade.interp)) + "</div>");
}
else
{
buf.push("<div data-i18n=\"user.status_unfinished\" class=\"created\"></div>");
}
buf.push("<div class=\"rewards\">");
rewards = achievement.get('rewards');
if ( rewards && rewards.gems)
{
buf.push("<span class=\"gems label label-default\"><span>" + (jade.escape(null == (jade.interp = achievement.earnedGems || rewards.gems) ? "" : jade.interp)) + "</span><img src=\"/images/common/gem.png\" draggable=\"false\" class=\"gem\"/></span>");
}
worth = achievement.get('worth');
if ( worth)
{
buf.push("<span class=\"worth label label-default\"><span>" + (jade.escape((jade.interp = achievement.earnedPoints || worth) == null ? '' : jade.interp)) + "xp</span></span>");
}
buf.push("<!-- maybe add more icons/numbers for items, heroes, levels, xp?--></div></div>");
    }

  }
}).call(this);

buf.push("</div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/play-heroes-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),gems = locals_.gems,heroes = locals_.heroes,isIE = locals_.isIE,visibleHero = locals_.visibleHero,codeLanguages = locals_.codeLanguages,codeLanguage = locals_.codeLanguage,confirmButtonI18N = locals_.confirmButtonI18N,me = locals_.me,serverConfig = locals_.serverConfig;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"><img src=\"/images/pages/play/modal/heroes-background.png\" draggable=\"false\" id=\"play-heroes-background\"/><h1 data-i18n=\"choose_hero.choose_hero\"></h1><div id=\"gems-count-container\"><span id=\"gems-count\"><div class=\"gem gem-20\"></div><span class=\"spl\">" + (jade.escape(null == (jade.interp = gems) ? "" : jade.interp)) + "</span></span></div><div id=\"close-modal\"><span class=\"glyphicon glyphicon-remove\"></span></div><div id=\"hero-carousel\" data-interval='0' class=\"carousel slide\"><div class=\"carousel-indicator-container\"><ol class=\"carousel-indicators\">");
// iterate heroes
;(function(){
  var $$obj = heroes;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var hero = $$obj[index];

buf.push("<li" + (jade.attrs({ 'data-hero-id':(hero.get('original')), 'title':(hero.name), 'data-slide-to':(index), 'data-target':("#hero-carousel"), "class": [("hero-indicator hero-index-" + index + (hero.locked ? " locked" : "") + (hero.purchasable ? " purchasable" : "") + (hero.restricted ? " restricted" : ""))] }, {"data-hero-id":true,"title":true,"data-slide-to":true,"data-target":true,"class":true})) + "><div class=\"hero-avatar\"></div>");
if ( hero.locked && !hero.purchasable)
{
if ( isIE)
{
buf.push("<img src=\"/images/pages/game-menu/lock-processed.png\" draggable=\"false\" class=\"lock-indicator\"/>");
}
else
{
buf.push("<img src=\"/images/pages/game-menu/lock.png\" draggable=\"false\" class=\"lock-indicator\"/>");
}
}
buf.push("</li>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var hero = $$obj[index];

buf.push("<li" + (jade.attrs({ 'data-hero-id':(hero.get('original')), 'title':(hero.name), 'data-slide-to':(index), 'data-target':("#hero-carousel"), "class": [("hero-indicator hero-index-" + index + (hero.locked ? " locked" : "") + (hero.purchasable ? " purchasable" : "") + (hero.restricted ? " restricted" : ""))] }, {"data-hero-id":true,"title":true,"data-slide-to":true,"data-target":true,"class":true})) + "><div class=\"hero-avatar\"></div>");
if ( hero.locked && !hero.purchasable)
{
if ( isIE)
{
buf.push("<img src=\"/images/pages/game-menu/lock-processed.png\" draggable=\"false\" class=\"lock-indicator\"/>");
}
else
{
buf.push("<img src=\"/images/pages/game-menu/lock.png\" draggable=\"false\" class=\"lock-indicator\"/>");
}
}
buf.push("</li>");
    }

  }
}).call(this);

buf.push("</ol></div><div class=\"carousel-inner\">");
// iterate heroes
;(function(){
  var $$obj = heroes;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var hero = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'data-hero-id':(hero.get('original')), "class": [("item hero-item" + (hero.locked ? " locked" : "") + (hero.purchasable ? " purchasable" : "") + (hero.restricted ? " restricted" : ""))] }, {"class":true,"data-hero-id":true})) + "><canvas class=\"hero-canvas\"></canvas><div class=\"hero-pose-image\"><img draggable=\"false\"/></div><div class=\"hero-stats\"><h2>" + (jade.escape(null == (jade.interp = hero.name) ? "" : jade.interp)) + "</h2><div class=\"hero-description\">" + (jade.escape(null == (jade.interp = hero.description) ? "" : jade.interp)) + "</div><div class=\"hero-stat-row\"><div data-i18n=\"choose_hero.status\" class=\"stat-label\"></div><div" + (jade.attrs({ 'data-i18n':(hero.restricted ? 'inventory.restricted_title' : (hero.purchasable ? 'play.purchasable' : (hero.locked ? 'play.locked' : 'play.available'))), "class": [('stat-value'),('hero-status-value')] }, {"data-i18n":true})) + "></div></div><div class=\"hero-stat-row\"><div data-i18n=\"editor.level_components_type\" class=\"stat-label\"> </div><div" + (jade.attrs({ 'data-i18n':('general.' +hero.class), "class": [('stat-value')] }, {"data-i18n":true})) + "></div></div><div class=\"hero-stat-row\"><div data-i18n=\"choose_hero.weapons\" class=\"stat-label\"></div><div" + (jade.attrs({ 'data-i18n':('choose_hero.weapons_'+hero.class), "class": [('stat-value')] }, {"data-i18n":true})) + "></div></div>");
if ( hero.stats)
{
if ( hero.stats.skills.length)
{
buf.push("<div class=\"hero-stat-row\"><div data-i18n=\"choose_hero.skills\" class=\"stat-label\"></div><div class=\"stat-value\">" + (jade.escape(null == (jade.interp = hero.stats.skills.join(', ')) ? "" : jade.interp)) + "</div></div>");
}
// iterate ['attack', 'health', 'speed']
;(function(){
  var $$obj = ['attack', 'health', 'speed'];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var stat = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'title':(hero.stats[stat].description), "class": [('hero-stat-row'),(stat)] }, {"class":true,"title":true})) + "><div" + (jade.attrs({ 'data-i18n':('choose_hero.'+stat), "class": [('stat-label')] }, {"data-i18n":true})) + "></div><div class=\"stat-value\"><div class=\"stat-progress\"><div" + (jade.attrs({ 'style':("width: " + (parseInt(hero.stats[stat].relative * 100)) + "%"), "class": [('stat-progress-bar')] }, {"style":true})) + "></div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var stat = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'title':(hero.stats[stat].description), "class": [('hero-stat-row'),(stat)] }, {"class":true,"title":true})) + "><div" + (jade.attrs({ 'data-i18n':('choose_hero.'+stat), "class": [('stat-label')] }, {"data-i18n":true})) + "></div><div class=\"stat-value\"><div class=\"stat-progress\"><div" + (jade.attrs({ 'style':("width: " + (parseInt(hero.stats[stat].relative * 100)) + "%"), "class": [('stat-progress-bar')] }, {"style":true})) + "></div></div></div></div>");
    }

  }
}).call(this);

}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var hero = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'data-hero-id':(hero.get('original')), "class": [("item hero-item" + (hero.locked ? " locked" : "") + (hero.purchasable ? " purchasable" : "") + (hero.restricted ? " restricted" : ""))] }, {"class":true,"data-hero-id":true})) + "><canvas class=\"hero-canvas\"></canvas><div class=\"hero-pose-image\"><img draggable=\"false\"/></div><div class=\"hero-stats\"><h2>" + (jade.escape(null == (jade.interp = hero.name) ? "" : jade.interp)) + "</h2><div class=\"hero-description\">" + (jade.escape(null == (jade.interp = hero.description) ? "" : jade.interp)) + "</div><div class=\"hero-stat-row\"><div data-i18n=\"choose_hero.status\" class=\"stat-label\"></div><div" + (jade.attrs({ 'data-i18n':(hero.restricted ? 'inventory.restricted_title' : (hero.purchasable ? 'play.purchasable' : (hero.locked ? 'play.locked' : 'play.available'))), "class": [('stat-value'),('hero-status-value')] }, {"data-i18n":true})) + "></div></div><div class=\"hero-stat-row\"><div data-i18n=\"editor.level_components_type\" class=\"stat-label\"> </div><div" + (jade.attrs({ 'data-i18n':('general.' +hero.class), "class": [('stat-value')] }, {"data-i18n":true})) + "></div></div><div class=\"hero-stat-row\"><div data-i18n=\"choose_hero.weapons\" class=\"stat-label\"></div><div" + (jade.attrs({ 'data-i18n':('choose_hero.weapons_'+hero.class), "class": [('stat-value')] }, {"data-i18n":true})) + "></div></div>");
if ( hero.stats)
{
if ( hero.stats.skills.length)
{
buf.push("<div class=\"hero-stat-row\"><div data-i18n=\"choose_hero.skills\" class=\"stat-label\"></div><div class=\"stat-value\">" + (jade.escape(null == (jade.interp = hero.stats.skills.join(', ')) ? "" : jade.interp)) + "</div></div>");
}
// iterate ['attack', 'health', 'speed']
;(function(){
  var $$obj = ['attack', 'health', 'speed'];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var stat = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'title':(hero.stats[stat].description), "class": [('hero-stat-row'),(stat)] }, {"class":true,"title":true})) + "><div" + (jade.attrs({ 'data-i18n':('choose_hero.'+stat), "class": [('stat-label')] }, {"data-i18n":true})) + "></div><div class=\"stat-value\"><div class=\"stat-progress\"><div" + (jade.attrs({ 'style':("width: " + (parseInt(hero.stats[stat].relative * 100)) + "%"), "class": [('stat-progress-bar')] }, {"style":true})) + "></div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var stat = $$obj[$index];

buf.push("<div" + (jade.attrs({ 'title':(hero.stats[stat].description), "class": [('hero-stat-row'),(stat)] }, {"class":true,"title":true})) + "><div" + (jade.attrs({ 'data-i18n':('choose_hero.'+stat), "class": [('stat-label')] }, {"data-i18n":true})) + "></div><div class=\"stat-value\"><div class=\"stat-progress\"><div" + (jade.attrs({ 'style':("width: " + (parseInt(hero.stats[stat].relative * 100)) + "%"), "class": [('stat-progress-bar')] }, {"style":true})) + "></div></div></div></div>");
    }

  }
}).call(this);

}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div><a role=\"button\" data-slide=\"prev\" href=\"#hero-carousel\" class=\"left\"><span class=\"glyphicon glyphicon-play\"></span></a><a role=\"button\" data-slide=\"next\" href=\"#hero-carousel\" class=\"right\"><span class=\"glyphicon glyphicon-play\"></span></a></div><div id=\"hero-footer\">");
if ( visibleHero)
{
if ( !visibleHero.get('original'))
{
buf.push("<div id=\"loading-hero-explanation\"><h2 data-i18n=\"common.loading\">Loading...</h2></div>");
}
else if ( visibleHero.restricted)
{
buf.push("<div id=\"restricted-hero-explanation\"><h2><span>" + (jade.escape(null == (jade.interp = visibleHero.name) ? "" : jade.interp)) + "</span><span data-i18n=\"inventory.restricted_title\" class=\"spl\">Restricted</span></h2><span data-i18n=\"choose_hero.restricted_to_certain_heroes\" class=\"spr\">Only certain heroes can play this level.</span></div><button id=\"restricted-hero-button\" data-i18n=\"inventory.restricted_title\" class=\"btn disabled btn-illustrated\">Restricted</button>");
}
else if ( visibleHero.purchasable)
{
buf.push("<div id=\"purchasable-hero-explanation\"><h2 data-i18n=\"choose_hero.available_for_purchase\">Available for Purchase</h2></div><button id=\"purchase-hero-button\" class=\"btn unlock-button\"><span data-i18n=\"play.unlock\" class=\"spr\">Unlock</span>");
if(!visibleHero.get('gems')) {
console.error('Huh, we loaded the hero with no gem cost.');
visibleHero.set('gems', {ninja: 400, librarian: 630, samurai: 1000, trapper: 1400, "potion-master": 1800, "forest-archer": 2500, sorcerer: 3400, raiser: 4600, necromancer: 6300, pixie: 8500, goliath: 12000, guardian: 16000, "dark-wizard": 21000, assassin: 29000}[visibleHero.get('slug')] || 99999);
}
buf.push("<span>" + (jade.escape(null == (jade.interp = visibleHero.get('gems')) ? "" : jade.interp)) + "</span><span class=\"gem gem-20\"></span></button>");
}
else if ( visibleHero.locked)
{
buf.push("<div id=\"locked-hero-explanation\"><h2><span>" + (jade.escape(null == (jade.interp = visibleHero.name) ? "" : jade.interp)) + "</span><span data-i18n=\"play.locked\" class=\"spl\">Locked</span></h2><span data-i18n=\"choose_hero.level_to_unlock\" class=\"spr\">Level to unlock:</span><strong>" + (jade.escape(null == (jade.interp = visibleHero.unlockLevelName || '???') ? "" : jade.interp)) + "</strong></div>");
}
else if ( visibleHero.loaded)
{
buf.push("<div class=\"form\"><div class=\"form-group select-group\"><span data-i18n=\"choose_hero.programming_language_description\" class=\"help-block\">Which programming language do you want to use?</span><select id=\"option-code-language\" name=\"code-language\">");
// iterate codeLanguages
;(function(){
  var $$obj = codeLanguages;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

buf.push("<option" + (jade.attrs({ 'value':(option.id), 'selected':(codeLanguage === option.id) }, {"value":true,"selected":true})) + ">" + (jade.escape(null == (jade.interp = option.name) ? "" : jade.interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

buf.push("<option" + (jade.attrs({ 'value':(option.id), 'selected':(codeLanguage === option.id) }, {"value":true,"selected":true})) + ">" + (jade.escape(null == (jade.interp = option.name) ? "" : jade.interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</select></div></div><a" + (jade.attrs({ 'id':('confirm-button'), 'data-i18n':(confirmButtonI18N) }, {"data-i18n":true})) + "></a>");
}
}
buf.push("</div>");
if ( !me.finishedAnyLevels() && serverConfig.showCodePlayAds)
{
buf.push("<a href=\"https://lenovogamestate.com/\">");
var url = "/images/common/codeplay/NA_ChooseHeroPage_Yoga520_800x90.png"
if ( me.isFromUk())
{
url = "/images/common/codeplay/UK_ChooseHeroPage_Yoga510_800x90.png"
}
buf.push("<img" + (jade.attrs({ 'id':('codeplay-choose-hero-ad'), 'src':(url) }, {"src":true})) + "/></a>");
}
buf.push("</div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/play-items-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),gems = locals_.gems,itemCategories = locals_.itemCategories,itemCategoryNames = locals_.itemCategoryNames,itemCategoryCollections = locals_.itemCategoryCollections,me = locals_.me;buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"><img src=\"/images/pages/play/modal/items-background.png\" draggable=\"false\" id=\"play-items-modal-bg\"/><img src=\"/images/pages/play/modal/items-background-narrow.png\" draggable=\"false\" id=\"play-items-modal-narrow-bg\"/><h1 data-i18n=\"play.items\" class=\"big-font\"></h1><div id=\"gems-count-container\"><span id=\"gems-count\" class=\"big-font\">" + (jade.escape(null == (jade.interp = gems) ? "" : jade.interp)) + "</span></div><div id=\"close-modal\"><span class=\"glyphicon glyphicon-remove\"></span></div><ul class=\"nav nav-pills nav-stacked\">");
// iterate itemCategories
;(function(){
  var $$obj = itemCategories;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var category = $$obj[index];

buf.push("<li" + (jade.attrs({ 'id':(category + '-tab'), "class": [(index ? "" : "active")] }, {"class":true,"id":true})) + "><a" + (jade.attrs({ 'href':("#item-category-" + category), 'data-toggle':("tab"), "class": [('one-line')] }, {"href":true,"data-toggle":true})) + "><img" + (jade.attrs({ 'src':("/images/pages/play/modal/item-icon-"+category+".png"), 'draggable':("false"), "class": [('tab-icon')] }, {"src":true,"draggable":true})) + "/><span class=\"big-font\">" + (jade.escape(null == (jade.interp = itemCategoryNames[index]) ? "" : jade.interp)) + "</span></a></li>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var category = $$obj[index];

buf.push("<li" + (jade.attrs({ 'id':(category + '-tab'), "class": [(index ? "" : "active")] }, {"class":true,"id":true})) + "><a" + (jade.attrs({ 'href':("#item-category-" + category), 'data-toggle':("tab"), "class": [('one-line')] }, {"href":true,"data-toggle":true})) + "><img" + (jade.attrs({ 'src':("/images/pages/play/modal/item-icon-"+category+".png"), 'draggable':("false"), "class": [('tab-icon')] }, {"src":true,"draggable":true})) + "/><span class=\"big-font\">" + (jade.escape(null == (jade.interp = itemCategoryNames[index]) ? "" : jade.interp)) + "</span></a></li>");
    }

  }
}).call(this);

buf.push("</ul><div id=\"hero-type-select\" data-toggle=\"buttons\" class=\"btn-group\"><label id=\"all\" class=\"btn active\"><input type=\"radio\" name=\"hero-class-select\" autocomplete=\"off\"/><span data-i18n=\"editor.level_tab_thangs_all\"></span></label><label id=\"warrior\" class=\"btn\"><input type=\"radio\" name=\"hero-class-select\" autocomplete=\"off\"/><span data-i18n=\"general.warrior\"></span></label><label id=\"ranger\" class=\"btn\"><input type=\"radio\" name=\"hero-class-select\" autocomplete=\"off\"/><span data-i18n=\"general.ranger\"></span></label><label id=\"wizard\" class=\"btn\"><input type=\"radio\" name=\"hero-class-select\" autocomplete=\"off\"/><span data-i18n=\"general.wizard\"></span></label></div><div class=\"tab-content\">");
// iterate itemCategories
;(function(){
  var $$obj = itemCategories;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var category = $$obj[index];

buf.push("<div" + (jade.attrs({ 'id':("item-category-" + category), "class": [('tab-pane'),(index ? "" : "active")] }, {"class":true,"id":true})) + "><div class=\"nano\"><div class=\"nano-content\">");
// iterate itemCategoryCollections[category].models
;(function(){
  var $$obj = itemCategoryCollections[category].models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

var hidden = item.comingSoon && !me.isAdmin()
hidden = hidden || (!item.get('gems') && !item.owned)
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [("item " + item.get('heroClass') + (hidden ? " hide" : "") + (item.silhouetted && !item.owned ? " silhouetted" : ""))] }, {"class":true,"data-item-id":true})) + ">");
if ( item.silhouetted && !item.owned)
{
buf.push("<span class=\"glyphicon glyphicon-lock bolder\"></span><span class=\"glyphicon glyphicon-lock\"></span><img draggable=\"false\" class=\"item-silhouette\"/>");
if ( item.level)
{
buf.push("<div class=\"required-level\"><div data-i18n=\"general.player_level\"></div><div>" + (jade.escape(null == (jade.interp = item.level) ? "" : jade.interp)) + "</div></div>");
}
}
else
{
buf.push("<strong class=\"big-font\">" + (jade.escape(null == (jade.interp = item.name) ? "" : jade.interp)) + "</strong><img draggable=\"false\" class=\"item-img\"/>");
}
if ( item.owned)
{
buf.push("<span data-i18n=\"play.owned\" class=\"big-font owned\"></span>");
}
else if ( item.silhouetted)
{
buf.push("<span data-i18n=\"play.locked\" class=\"big-font locked\"></span>");
}
else
{
buf.push("<span class=\"cost\"><img src=\"/images/common/gem.png\" draggable=\"false\"/><span class=\"big-font\">" + (jade.escape(null == (jade.interp = item.get('gems')) ? "" : jade.interp)) + "</span></span>");
if ( item.unequippable)
{
buf.push("<span class=\"big-font unequippable\">" + (jade.escape(null == (jade.interp = item.get('heroClass')) ? "" : jade.interp)) + "</span>");
}
else
{
buf.push("<button" + (jade.attrs({ 'data-i18n':("play.unlock"), 'data-item-id':(item.id), "class": [('btn'),('unlock-button'),('big-font')] }, {"data-i18n":true,"data-item-id":true})) + "></button>");
}
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

var hidden = item.comingSoon && !me.isAdmin()
hidden = hidden || (!item.get('gems') && !item.owned)
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [("item " + item.get('heroClass') + (hidden ? " hide" : "") + (item.silhouetted && !item.owned ? " silhouetted" : ""))] }, {"class":true,"data-item-id":true})) + ">");
if ( item.silhouetted && !item.owned)
{
buf.push("<span class=\"glyphicon glyphicon-lock bolder\"></span><span class=\"glyphicon glyphicon-lock\"></span><img draggable=\"false\" class=\"item-silhouette\"/>");
if ( item.level)
{
buf.push("<div class=\"required-level\"><div data-i18n=\"general.player_level\"></div><div>" + (jade.escape(null == (jade.interp = item.level) ? "" : jade.interp)) + "</div></div>");
}
}
else
{
buf.push("<strong class=\"big-font\">" + (jade.escape(null == (jade.interp = item.name) ? "" : jade.interp)) + "</strong><img draggable=\"false\" class=\"item-img\"/>");
}
if ( item.owned)
{
buf.push("<span data-i18n=\"play.owned\" class=\"big-font owned\"></span>");
}
else if ( item.silhouetted)
{
buf.push("<span data-i18n=\"play.locked\" class=\"big-font locked\"></span>");
}
else
{
buf.push("<span class=\"cost\"><img src=\"/images/common/gem.png\" draggable=\"false\"/><span class=\"big-font\">" + (jade.escape(null == (jade.interp = item.get('gems')) ? "" : jade.interp)) + "</span></span>");
if ( item.unequippable)
{
buf.push("<span class=\"big-font unequippable\">" + (jade.escape(null == (jade.interp = item.get('heroClass')) ? "" : jade.interp)) + "</span>");
}
else
{
buf.push("<button" + (jade.attrs({ 'data-i18n':("play.unlock"), 'data-item-id':(item.id), "class": [('btn'),('unlock-button'),('big-font')] }, {"data-i18n":true,"data-item-id":true})) + "></button>");
}
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("<div class=\"clearfix\"></div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var category = $$obj[index];

buf.push("<div" + (jade.attrs({ 'id':("item-category-" + category), "class": [('tab-pane'),(index ? "" : "active")] }, {"class":true,"id":true})) + "><div class=\"nano\"><div class=\"nano-content\">");
// iterate itemCategoryCollections[category].models
;(function(){
  var $$obj = itemCategoryCollections[category].models;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

var hidden = item.comingSoon && !me.isAdmin()
hidden = hidden || (!item.get('gems') && !item.owned)
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [("item " + item.get('heroClass') + (hidden ? " hide" : "") + (item.silhouetted && !item.owned ? " silhouetted" : ""))] }, {"class":true,"data-item-id":true})) + ">");
if ( item.silhouetted && !item.owned)
{
buf.push("<span class=\"glyphicon glyphicon-lock bolder\"></span><span class=\"glyphicon glyphicon-lock\"></span><img draggable=\"false\" class=\"item-silhouette\"/>");
if ( item.level)
{
buf.push("<div class=\"required-level\"><div data-i18n=\"general.player_level\"></div><div>" + (jade.escape(null == (jade.interp = item.level) ? "" : jade.interp)) + "</div></div>");
}
}
else
{
buf.push("<strong class=\"big-font\">" + (jade.escape(null == (jade.interp = item.name) ? "" : jade.interp)) + "</strong><img draggable=\"false\" class=\"item-img\"/>");
}
if ( item.owned)
{
buf.push("<span data-i18n=\"play.owned\" class=\"big-font owned\"></span>");
}
else if ( item.silhouetted)
{
buf.push("<span data-i18n=\"play.locked\" class=\"big-font locked\"></span>");
}
else
{
buf.push("<span class=\"cost\"><img src=\"/images/common/gem.png\" draggable=\"false\"/><span class=\"big-font\">" + (jade.escape(null == (jade.interp = item.get('gems')) ? "" : jade.interp)) + "</span></span>");
if ( item.unequippable)
{
buf.push("<span class=\"big-font unequippable\">" + (jade.escape(null == (jade.interp = item.get('heroClass')) ? "" : jade.interp)) + "</span>");
}
else
{
buf.push("<button" + (jade.attrs({ 'data-i18n':("play.unlock"), 'data-item-id':(item.id), "class": [('btn'),('unlock-button'),('big-font')] }, {"data-i18n":true,"data-item-id":true})) + "></button>");
}
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

var hidden = item.comingSoon && !me.isAdmin()
hidden = hidden || (!item.get('gems') && !item.owned)
buf.push("<div" + (jade.attrs({ 'data-item-id':(item.id), "class": [("item " + item.get('heroClass') + (hidden ? " hide" : "") + (item.silhouetted && !item.owned ? " silhouetted" : ""))] }, {"class":true,"data-item-id":true})) + ">");
if ( item.silhouetted && !item.owned)
{
buf.push("<span class=\"glyphicon glyphicon-lock bolder\"></span><span class=\"glyphicon glyphicon-lock\"></span><img draggable=\"false\" class=\"item-silhouette\"/>");
if ( item.level)
{
buf.push("<div class=\"required-level\"><div data-i18n=\"general.player_level\"></div><div>" + (jade.escape(null == (jade.interp = item.level) ? "" : jade.interp)) + "</div></div>");
}
}
else
{
buf.push("<strong class=\"big-font\">" + (jade.escape(null == (jade.interp = item.name) ? "" : jade.interp)) + "</strong><img draggable=\"false\" class=\"item-img\"/>");
}
if ( item.owned)
{
buf.push("<span data-i18n=\"play.owned\" class=\"big-font owned\"></span>");
}
else if ( item.silhouetted)
{
buf.push("<span data-i18n=\"play.locked\" class=\"big-font locked\"></span>");
}
else
{
buf.push("<span class=\"cost\"><img src=\"/images/common/gem.png\" draggable=\"false\"/><span class=\"big-font\">" + (jade.escape(null == (jade.interp = item.get('gems')) ? "" : jade.interp)) + "</span></span>");
if ( item.unequippable)
{
buf.push("<span class=\"big-font unequippable\">" + (jade.escape(null == (jade.interp = item.get('heroClass')) ? "" : jade.interp)) + "</span>");
}
else
{
buf.push("<button" + (jade.attrs({ 'data-i18n':("play.unlock"), 'data-item-id':(item.id), "class": [('btn'),('unlock-button'),('big-font')] }, {"data-i18n":true,"data-item-id":true})) + "></button>");
}
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("<div class=\"clearfix\"></div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div><div id=\"item-details-view\"></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/play-settings-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h3 data-i18n=\"play.settings\">Settings</h3></div><div class=\"modal-body\"><p>TODO: show all dem settings</p></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"modal.okay\" class=\"btn btn-primary\">Okay</button></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/poll-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,i18n = locals_.i18n,poll = locals_.poll,marked = locals_.marked,me = locals_.me;buf.push("<div class=\"modal-dialog game\"><div class=\"background-wrapper\"><div class=\"modal-content\"><div class=\"modal-header\">");
if ( view.closeButton)
{
buf.push("<div type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"button close\">&times;</div>");
}
buf.push("<h1><span>" + (jade.escape(null == (jade.interp = i18n(poll.attributes, "name")) ? "" : jade.interp)) + "</span></h1></div><div class=\"modal-body\"><div class=\"description\">");
if ( poll.get("description"))
{
buf.push("<div>" + (null == (jade.interp = marked(i18n(poll.attributes, "description"))) ? "" : jade.interp) + "</div>");
}
else
{
buf.push("<div>&nbsp;</div>");
}
buf.push("</div><div class=\"answers-container-wrapper\"><div class=\"answers-container\"><table class=\"table table-hover\">");
// iterate poll.get("answers") || []
;(function(){
  var $$obj = poll.get("answers") || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var answer = $$obj[$index];

buf.push("<tr" + (jade.attrs({ 'data-answer':(answer.key), "class": [("answer")] }, {"class":true,"data-answer":true})) + "><td>" + (null == (jade.interp = marked(i18n(answer, "text"))) ? "" : jade.interp) + "</td><td class=\"graph-cell\"><div class=\"progress\"><div class=\"progress-bar\"></div></div></td><td class=\"votes-cell\"><span class=\"badge vote-percentage\"></span></td>");
if ( me.isAdmin())
{
buf.push("<td class=\"votes-cell\"><span class=\"badge vote-count\"></span></td>");
}
buf.push("</tr>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var answer = $$obj[$index];

buf.push("<tr" + (jade.attrs({ 'data-answer':(answer.key), "class": [("answer")] }, {"class":true,"data-answer":true})) + "><td>" + (null == (jade.interp = marked(i18n(answer, "text"))) ? "" : jade.interp) + "</td><td class=\"graph-cell\"><div class=\"progress\"><div class=\"progress-bar\"></div></div></td><td class=\"votes-cell\"><span class=\"badge vote-percentage\"></span></td>");
if ( me.isAdmin())
{
buf.push("<td class=\"votes-cell\"><span class=\"badge vote-count\"></span></td>");
}
buf.push("</tr>");
    }

  }
}).call(this);

buf.push("</table></div></div><div class=\"random-gems-container-wrapper\"><div class=\"random-gems-container\"><code class=\"random-gems-code\"><span>randomNumber = Math.random()                   </span><span id=\"random-number-comment\" class=\"comment\"></span></code><code class=\"random-gems-code\"><span>gems = Math.ceil(2 * randomNumber * me.level)  </span><span id=\"random-gems-comment\" class=\"comment\"></span></code><code class=\"random-gems-code\"><span>me.gems += gems                                </span><span id=\"total-gems-comment\" class=\"comment\"></span></code></div></div></div><div class=\"modal-body wait secret\"><h3>Reticulating Splines...</h3><div class=\"progress progress-striped active\"><div class=\"progress-bar\"></div></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" aria-hidden=\"true\" data-i18n=\"play_level.done\" class=\"btn btn-illustrated btn-lg done-button\">Done</button></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/modal/share-progress-modal", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div class=\"modal-dialog\"><div class=\"modal-content\"><img src=\"/images/pages/play/modal/parental_prompt_modal_background.png\" class=\"background-img\"/><img src=\"/images/pages/play/modal/parental_nudge_wizard.png\" class=\"wizard-img\"/><div class=\"blurb-container\"> <h1 data-i18n=\"share_progress_modal.title\"></h1><p data-i18n=\"share_progress_modal.blurb\"></p><div class=\"container-fluid send-container\"><div class=\"row\"><div class=\"col-xs-12 email-form\"><p data-i18n=\"share_progress_modal.form_blurb\"></p><div><label data-i18n=\"share_progress_modal.form_label\"></label><input type=\"email\" data-i18n=\"[placeholder]share_progress_modal.placeholder\" class=\"form-control email-input\"/></div></div></div><div class=\"row\"><div class=\"col-xs-8\"><div data-i18n=\"share_progress_modal.email_invalid\" class=\"email-invalid\"></div></div><div class=\"col-xs-4 text-right\"><button data-i18n=\"common.send\" class=\"btn btn-illustrated send-btn\"></button></div></div><div class=\"row continue-container\"><div class=\"col-xs-12 text-left\"><a data-i18n=\"common.continue\" class=\"continue-link\"></a></div></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/play-level-view", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
var locals_ = (locals || {}),view = locals_.view,features = locals_.features,document = locals_.document,me = locals_.me;if ( view.showAds())
{
buf.push("<!-- TODO: loading this multiple times yields script error:--><!-- Uncaught TagError: adsbygoogle.push() error: All ins elements in the DOM with class=adsbygoogle already have ads in them.--><div class=\"ad-container\"><script async=\"async\" src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><ins style=\"display:inline-block;width:728px;height:90px\" data-ad-client=\"ca-pub-6640930638193614\" data-ad-slot=\"5527096883\" class=\"adsbygoogle\"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});\n</script></div>");
}
buf.push("<div class=\"game-container\"><div id=\"level-loading-view\"></div><div class=\"level-content\"><div id=\"control-bar-view\"></div><div id=\"fullscreen-editor-background-screen\" title=\"Click to minimize the code editor\"></div><div id=\"code-area\"><div id=\"code-area-gradient\" class=\"gradient\"></div><div id=\"tome-view\"></div></div><div id=\"spell-palette-view\"></div><div id=\"problem-alert-view\"></div><div id=\"game-area\"><div id=\"canvas-wrapper\"><canvas width=\"924\" height=\"589\" id=\"webgl-surface\"></canvas><canvas width=\"924\" height=\"589\" id=\"normal-surface\"></canvas><div id=\"web-surface-view\"></div><div id=\"ascii-surface\"></div><div id=\"canvas-left-gradient\" class=\"gradient\"></div><div id=\"canvas-top-gradient\" class=\"gradient\"></div><div id=\"goals-view\"></div></div><div id=\"level-flags-view\"></div><div id=\"gold-view\"></div><div id=\"level-chat-view\"></div><div id=\"multiplayer-status-view\"></div><div id=\"duel-stats-view\"></div><div id=\"playback-view\"></div><div id=\"thang-hud\"></div><div id=\"level-dialogue-view\"></div></div>");
if ( features.codePlay)
{
buf.push("<a" + (jade.attrs({ 'href':(document.location.protocol+"//lenovogamestate.com/pages/products/") }, {"href":true})) + ">");
var url = "/images/common/codeplay/NA_InLevelPage_Y700_1132X283_ingameProduct.png"
if ( me.isFromUk())
{
url = "/images/common/codeplay/UK_InLevelPage_Y700_1132X283_ingameProduct.png"
}
buf.push("<img" + (jade.attrs({ 'id':('codeplay-product-banner'), 'src':(url) }, {"src":true})) + "/></a>");
}
buf.push("<button id=\"stop-real-time-playback-button\" title=\"Stop real-time playback\" class=\"btn btn-lg btn-warning banner header-font\">");
if ( view.level && view.level.isType('game-dev'))
{
buf.push("<span data-i18n=\"play_level.edit_level\"></span>");
}
else
{
buf.push("<span data-i18n=\"play_level.skip\"></span>");
}
buf.push("</button><div id=\"how-to-play-game-dev-panel\" class=\"panel panel-default hide style-flat\"><div class=\"panel-heading\"><h3 class=\"panel-title\"><span data-i18n=\"play_level.directions\"></span>:</h3></div><div class=\"panel-body\">" + (null == (jade.interp = view.howToPlayText) ? "" : jade.interp) + "</div></div><div class=\"hints-view hide\"></div></div><div id=\"level-footer-shadow\"></div><div id=\"level-footer-background\"></div>");
if ( !me.get('anonymous') && !me.isStudent() && !features.codePlay)
{
buf.push("<div" + (jade.attrs({ 'id':('play-footer'), "class": [(me.isPremium() ? "premium" : "")] }, {"class":true})) + "><p class=\"footer-link-text picoctf-hide\"><a title=\"Send CodeCombat a message\" tabindex=\"-1\" data-i18n=\"nav.contact\" class=\"contact-link\"></a></p></div>");
}
buf.push("</div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/play/spectate", function(exports, require, module) {
var __templateData = function anonymous(locals
/**/) {
var buf = [];
buf.push("<div id=\"level-loading-view\"></div><div class=\"level-content\"><div id=\"control-bar-view\"></div><div id=\"canvas-wrapper\"><canvas width=\"924\" height=\"589\" id=\"webgl-surface\"></canvas><canvas width=\"924\" height=\"589\" id=\"normal-surface\"></canvas><div id=\"canvas-left-gradient\" class=\"gradient\"></div><div id=\"canvas-top-gradient\" class=\"gradient\"></div></div><div id=\"gold-view\" class=\"secret expanded\"></div><div id=\"level-chat-view\"></div><div id=\"duel-stats-view\"></div><div id=\"playback-view\"></div><div id=\"thang-hud\"></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("views/play/CampaignView", function(exports, require, module) {
var AudioPlayer, Campaign, CampaignView, CampaignsCollection, CocoCollection, CourseInstance, CreateAccountModal, EarnedAchievement, LeaderboardModal, Level, LevelSession, LevelSessionsCollection, LevelSetupManager, MusicPlayer, ParticleMan, Poll, PollModal, RootView, ShareProgressModal, SubscribeModal, ThangType, UserPollsRecord, storage, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

RootView = require('views/core/RootView');

template = require('templates/play/campaign-view');

LevelSession = require('models/LevelSession');

EarnedAchievement = require('models/EarnedAchievement');

CocoCollection = require('collections/CocoCollection');

Campaign = require('models/Campaign');

AudioPlayer = require('lib/AudioPlayer');

LevelSetupManager = require('lib/LevelSetupManager');

ThangType = require('models/ThangType');

MusicPlayer = require('lib/surface/MusicPlayer');

storage = require('core/storage');

CreateAccountModal = require('views/core/CreateAccountModal');

SubscribeModal = require('views/core/SubscribeModal');

LeaderboardModal = require('views/play/modal/LeaderboardModal');

Level = require('models/Level');

utils = require('core/utils');

require('vendor/three');

ParticleMan = require('core/ParticleMan');

ShareProgressModal = require('views/play/modal/ShareProgressModal');

UserPollsRecord = require('models/UserPollsRecord');

Poll = require('models/Poll');

PollModal = require('views/play/modal/PollModal');

CourseInstance = require('models/CourseInstance');

require('game-libraries');

LevelSessionsCollection = (function(superClass) {
  extend(LevelSessionsCollection, superClass);

  LevelSessionsCollection.prototype.url = '';

  LevelSessionsCollection.prototype.model = LevelSession;

  function LevelSessionsCollection(model) {
    LevelSessionsCollection.__super__.constructor.call(this);
    this.url = "/db/user/" + me.id + "/level.sessions?project=state.complete,levelID,state.difficulty,playtime";
  }

  return LevelSessionsCollection;

})(CocoCollection);

CampaignsCollection = (function(superClass) {
  extend(CampaignsCollection, superClass);

  function CampaignsCollection() {
    return CampaignsCollection.__super__.constructor.apply(this, arguments);
  }

  CampaignsCollection.prototype.url = '/db/campaign/-/overworld?project=slug,adjacentCampaigns,name,fullName,description,i18n,color,levels';

  CampaignsCollection.prototype.model = Campaign;

  return CampaignsCollection;

})(CocoCollection);

module.exports = CampaignView = (function(superClass) {
  extend(CampaignView, superClass);

  CampaignView.prototype.id = 'campaign-view';

  CampaignView.prototype.template = template;

  CampaignView.prototype.subscriptions = {
    'subscribe-modal:subscribed': 'onSubscribed'
  };

  CampaignView.prototype.events = {
    'click .map-background': 'onClickMap',
    'click .level a': 'onClickLevel',
    'dblclick .level a': 'onDoubleClickLevel',
    'click .level-info-container .start-level': 'onClickStartLevel',
    'click .level-info-container .view-solutions': 'onClickViewSolutions',
    'click .level-info-container .course-version button': 'onClickCourseVersion',
    'click #volume-button': 'onToggleVolume',
    'click #back-button': 'onClickBack',
    'click #clear-storage-button': 'onClickClearStorage',
    'click .portal .campaign': 'onClickPortalCampaign',
    'click .portal .beta-campaign': 'onClickPortalCampaign',
    'click a .campaign-switch': 'onClickCampaignSwitch',
    'mouseenter .portals': 'onMouseEnterPortals',
    'mouseleave .portals': 'onMouseLeavePortals',
    'mousemove .portals': 'onMouseMovePortals',
    'click .poll': 'showPoll'
  };

  CampaignView.prototype.shortcuts = {
    'shift+s': 'onShiftS'
  };

  function CampaignView(options, terrain1) {
    var musicDelay, pixelCode, ref, ref1, shouldReturnToGameDevHoc;
    this.terrain = terrain1;
    this.onWindowResize = bind(this.onWindowResize, this);
    this.onMouseMovePortals = bind(this.onMouseMovePortals, this);
    CampaignView.__super__.constructor.call(this, options);
    if (window.serverConfig.picoCTF) {
      this.terrain = 'picoctf';
    }
    this.editorMode = options != null ? options.editorMode : void 0;
    this.requiresSubscription = !me.isPremium();
    if (this.editorMode) {
      if (this.terrain == null) {
        this.terrain = 'dungeon';
      }
    }
    this.levelStatusMap = {};
    this.levelPlayCountMap = {};
    this.levelDifficultyMap = {};
    if (utils.getQueryVariable('hour_of_code')) {
      me.set('hourOfCode', true);
      me.patch();
      pixelCode = this.terrain === 'game-dev-hoc' ? 'code_combat_gamedev' : 'code_combat';
      $('body').append($("<img src='https://code.org/api/hour/begin_" + pixelCode + ".png' style='visibility: hidden;'>"));
    }
    shouldReturnToGameDevHoc = this.terrain === 'game-dev-hoc';
    storage.save('should-return-to-game-dev-hoc', shouldReturnToGameDevHoc);
    if (window.serverConfig.picoCTF) {
      this.supermodel.addRequestResource({
        url: '/picoctf/problems',
        success: (function(_this) {
          return function(picoCTFProblems) {
            _this.picoCTFProblems = picoCTFProblems;
          };
        })(this)
      }).load();
    } else {
      if (!this.editorMode) {
        this.sessions = this.supermodel.loadCollection(new LevelSessionsCollection(), 'your_sessions', {
          cache: false
        }, 0).model;
        this.listenToOnce(this.sessions, 'sync', this.onSessionsLoaded);
      }
      if (!this.terrain) {
        this.campaigns = this.supermodel.loadCollection(new CampaignsCollection(), 'campaigns', null, 1).model;
        this.listenToOnce(this.campaigns, 'sync', this.onCampaignsLoaded);
        return;
      }
    }
    this.campaign = new Campaign({
      _id: this.terrain
    });
    this.campaign = this.supermodel.loadModel(this.campaign).model;
    this.earnedAchievements = new CocoCollection([], {
      url: '/db/earned_achievement',
      model: EarnedAchievement,
      project: ['earnedRewards']
    });
    this.listenToOnce(this.earnedAchievements, 'sync', function() {
      var earned, group, j, len, loadedEarned, m, ref, results, reward;
      earned = me.get('earned');
      ref = this.earnedAchievements.models;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        m = ref[j];
        if (!(loadedEarned = m.get('earnedRewards'))) {
          continue;
        }
        results.push((function() {
          var k, len1, ref1, results1;
          ref1 = ['heroes', 'levels', 'items'];
          results1 = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            group = ref1[k];
            if (!loadedEarned[group]) {
              continue;
            }
            results1.push((function() {
              var len2, n, ref2, results2;
              ref2 = loadedEarned[group];
              results2 = [];
              for (n = 0, len2 = ref2.length; n < len2; n++) {
                reward = ref2[n];
                if (indexOf.call(earned[group], reward) < 0) {
                  console.warn('Filling in a gap for reward', group, reward);
                  results2.push(earned[group].push(reward));
                } else {
                  results2.push(void 0);
                }
              }
              return results2;
            })());
          }
          return results1;
        })());
      }
      return results;
    });
    this.supermodel.loadCollection(this.earnedAchievements, 'achievements', {
      cache: false
    });
    this.listenToOnce(this.campaign, 'sync', this.getLevelPlayCounts);
    $(window).on('resize', this.onWindowResize);
    this.probablyCachedMusic = storage.load("loaded-menu-music");
    musicDelay = this.probablyCachedMusic ? 1000 : 10000;
    this.playMusicTimeout = _.delay(((function(_this) {
      return function() {
        if (!_this.destroyed) {
          return _this.playMusic();
        }
      };
    })(this)), musicDelay);
    this.hadEverChosenHero = (ref = me.get('heroConfig')) != null ? ref.thangType : void 0;
    this.listenTo(me, 'change:purchased', function() {
      return this.renderSelectors('#gems-count');
    });
    this.listenTo(me, 'change:spent', function() {
      return this.renderSelectors('#gems-count');
    });
    this.listenTo(me, 'change:earned', function() {
      return this.renderSelectors('#gems-count');
    });
    this.listenTo(me, 'change:heroConfig', function() {
      return this.updateHero();
    });
    if ((ref1 = window.tracker) != null) {
      ref1.trackEvent('Loaded World Map', {
        category: 'World Map',
        label: this.terrain
      });
    }
  }

  CampaignView.prototype.destroy = function() {
    var ambientSound, ref, ref1, ref2;
    if ((ref = this.setupManager) != null) {
      ref.destroy();
    }
    this.$el.find('.ui-draggable').off().draggable('destroy');
    $(window).off('resize', this.onWindowResize);
    if (ambientSound = this.ambientSound) {
      createjs.Tween.get(ambientSound).to({
        volume: 0.0
      }, 1500).call(function() {
        return ambientSound.stop();
      });
    }
    if ((ref1 = this.musicPlayer) != null) {
      ref1.destroy();
    }
    clearTimeout(this.playMusicTimeout);
    if ((ref2 = this.particleMan) != null) {
      ref2.destroy();
    }
    clearInterval(this.portalScrollInterval);
    return CampaignView.__super__.destroy.call(this);
  };

  CampaignView.prototype.showLoading = function($el) {
    if (!this.campaign) {
      this.$el.find('.game-controls, .user-status').addClass('hidden');
      return this.$el.find('.portal .campaign-name span').text($.i18n.t('common.loading'));
    }
  };

  CampaignView.prototype.hideLoading = function() {
    if (!this.campaign) {
      return this.$el.find('.game-controls, .user-status').removeClass('hidden');
    }
  };

  CampaignView.prototype.getLevelPlayCounts = function() {
    var level, levelID, levelPlayCountsRequest, levelSlugs, success;
    if (!me.isAdmin()) {
      return;
    }
    return;
    success = (function(_this) {
      return function(levelPlayCounts) {
        var j, len, level;
        if (_this.destroyed) {
          return;
        }
        for (j = 0, len = levelPlayCounts.length; j < len; j++) {
          level = levelPlayCounts[j];
          _this.levelPlayCountMap[level._id] = {
            playtime: level.playtime,
            sessions: level.sessions
          };
        }
        if (_this.fullyRendered) {
          return _this.render();
        }
      };
    })(this);
    levelSlugs = (function() {
      var ref, results;
      ref = this.campaign.get('levels');
      results = [];
      for (levelID in ref) {
        level = ref[levelID];
        results.push(level.slug);
      }
      return results;
    }).call(this);
    levelPlayCountsRequest = this.supermodel.addRequestResource('play_counts', {
      url: '/db/level/-/play_counts',
      data: {
        ids: levelSlugs
      },
      method: 'POST',
      success: success
    }, 0);
    return levelPlayCountsRequest.load();
  };

  CampaignView.prototype.onLoaded = function() {
    var ref, ref1, ref2;
    if (this.fullyRendered) {
      return;
    }
    this.fullyRendered = true;
    this.render();
    if (!((ref = me.get('heroConfig')) != null ? ref.thangType : void 0)) {
      this.preloadTopHeroes();
    }
    if (this.terrain !== 'dungeon') {
      this.$el.find('#campaign-status').delay(4000).animate({
        top: "-=58"
      }, 1000);
    }
    if (!me.get('hourOfCode') && this.terrain) {
      if (me.get('anonymous') && me.get('lastLevel') === 'shadow-guard' && me.level() < 4) {
        return this.openModalView(new CreateAccountModal({
          supermodel: this.supermodel,
          showSignupRationale: true
        }));
      } else if (me.get('name') && ((ref1 = me.get('lastLevel')) === 'forgetful-gemsmith' || ref1 === 'signs-and-portents') && me.level() < 5 && !((ref2 = me.get('ageRange')) === '18-24' || ref2 === '25-34' || ref2 === '35-44' || ref2 === '45-100') && !storage.load('sent-parent-email') && !me.isPremium()) {
        return this.openModalView(new ShareProgressModal());
      }
    }
  };

  CampaignView.prototype.setCampaign = function(campaign1) {
    this.campaign = campaign1;
    return this.render();
  };

  CampaignView.prototype.onSubscribed = function() {
    this.requiresSubscription = false;
    return this.render();
  };

  CampaignView.prototype.getRenderData = function(context) {
    var ac, acID, campaign, count, j, k, len, len1, levels, ref, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, reject;
    if (context == null) {
      context = {};
    }
    context = CampaignView.__super__.getRenderData.call(this, context);
    context.campaign = this.campaign;
    context.levels = _.values($.extend(true, {}, (ref = (ref1 = this.campaign) != null ? ref1.get('levels') : void 0) != null ? ref : {}));
    if (me.level() < 12 && this.terrain === 'dungeon' && !this.editorMode) {
      reject = me.getFourthLevelGroup() === 'signs-and-portents' ? 'forgetful-gemsmith' : 'signs-and-portents';
      context.levels = _.reject(context.levels, {
        slug: reject
      });
    }
    if (features.freeOnly) {
      context.levels = _.reject(context.levels, 'requiresSubscription');
    }
    this.annotateLevels(context.levels);
    count = this.countLevels(context.levels);
    context.levelsCompleted = count.completed;
    context.levelsTotal = count.total;
    if (((ref2 = this.sessions) != null ? ref2.loaded : void 0) || this.editorMode) {
      this.determineNextLevel(context.levels);
    }
    context.levels = (_.sortBy(context.levels, function(l) {
      return l.position.y;
    })).reverse();
    if (this.campaign) {
      this.campaign.renderedLevels = context.levels;
    }
    context.levelStatusMap = this.levelStatusMap;
    context.levelDifficultyMap = this.levelDifficultyMap;
    context.levelPlayCountMap = this.levelPlayCountMap;
    context.isIPadApp = application.isIPadApp;
    context.picoCTF = window.serverConfig.picoCTF;
    context.requiresSubscription = this.requiresSubscription;
    context.editorMode = this.editorMode;
    context.adjacentCampaigns = _.filter(_.values(_.cloneDeep(((ref3 = this.campaign) != null ? ref3.get('adjacentCampaigns') : void 0) || {})), (function(_this) {
      return function(ac) {
        var ref4, styles;
        if (ac.showIfUnlocked && !_this.editorMode) {
          if (_.isString(ac.showIfUnlocked) && (ref4 = ac.showIfUnlocked, indexOf.call(me.levels(), ref4) < 0)) {
            return false;
          }
          if (_.isArray(ac.showIfUnlocked) && _.intersection(ac.showIfUnlocked, me.levels()).length <= 0) {
            return false;
          }
        }
        ac.name = utils.i18n(ac, 'name');
        styles = [];
        if (ac.color) {
          styles.push("color: " + ac.color);
        }
        if (ac.rotation) {
          styles.push("transform: rotate(" + ac.rotation + "deg)");
        }
        if (ac.position == null) {
          ac.position = {
            x: 10,
            y: 10
          };
        }
        styles.push("left: " + ac.position.x + "%");
        styles.push("top: " + ac.position.y + "%");
        ac.style = styles.join('; ');
        return true;
      };
    })(this));
    context.marked = marked;
    context.i18n = utils.i18n;
    if (this.campaigns) {
      context.campaigns = {};
      ref4 = this.campaigns.models;
      for (j = 0, len = ref4.length; j < len; j++) {
        campaign = ref4[j];
        if (!(campaign.get('slug') !== 'auditions')) {
          continue;
        }
        context.campaigns[campaign.get('slug')] = campaign;
        if ((ref5 = this.sessions) != null ? ref5.loaded : void 0) {
          levels = _.values($.extend(true, {}, (ref6 = campaign.get('levels')) != null ? ref6 : {}));
          count = this.countLevels(levels);
          campaign.levelsTotal = count.total;
          campaign.levelsCompleted = count.completed;
          if (campaign.get('slug') === 'dungeon') {
            campaign.locked = false;
          } else if (!campaign.levelsTotal) {
            campaign.locked = true;
          } else {
            campaign.locked = true;
          }
        }
      }
      ref7 = this.campaigns.models;
      for (k = 0, len1 = ref7.length; k < len1; k++) {
        campaign = ref7[k];
        ref9 = (ref8 = campaign.get('adjacentCampaigns')) != null ? ref8 : {};
        for (acID in ref9) {
          ac = ref9[acID];
          if (_.isString(ac.showIfUnlocked)) {
            if (ref10 = ac.showIfUnlocked, indexOf.call(me.levels(), ref10) >= 0) {
              if ((ref11 = _.find(this.campaigns.models, {
                id: acID
              })) != null) {
                ref11.locked = false;
              }
            }
          } else if (_.isArray(ac.showIfUnlocked)) {
            if (_.intersection(ac.showIfUnlocked, me.levels()).length > 0) {
              if ((ref12 = _.find(this.campaigns.models, {
                id: acID
              })) != null) {
                ref12.locked = false;
              }
            }
          }
        }
      }
    }
    return context;
  };

  CampaignView.prototype.afterRender = function() {
    var ref, view;
    CampaignView.__super__.afterRender.call(this);
    this.onWindowResize();
    if (!application.isIPadApp) {
      _.defer((function(_this) {
        return function() {
          var ref;
          return (ref = _this.$el) != null ? ref.find('.game-controls .btn:not(.poll)').addClass('has-tooltip').tooltip() : void 0;
        };
      })(this));
      view = this;
      this.$el.find('.level, .campaign-switch').addClass('has-tooltip').tooltip().each(function() {
        if (!(me.isAdmin() && view.editorMode)) {
          return;
        }
        return $(this).draggable().on('dragstop', function() {
          var bg, e, x, y;
          bg = $('.map-background');
          x = ($(this).offset().left - bg.offset().left + $(this).outerWidth() / 2) / bg.width();
          y = 1 - ($(this).offset().top - bg.offset().top + $(this).outerHeight() / 2) / bg.height();
          e = {
            position: {
              x: 100 * x,
              y: 100 * y
            },
            levelOriginal: $(this).data('level-original'),
            campaignID: $(this).data('campaign-id')
          };
          if (e.levelOriginal) {
            view.trigger('level-moved', e);
          }
          if (e.campaignID) {
            return view.trigger('adjacent-campaign-moved', e);
          }
        });
      });
    }
    this.updateVolume();
    this.updateHero();
    if (!(window.currentModal || !this.fullyRendered)) {
      this.highlightElement('.level.next', {
        delay: 500,
        duration: 60000,
        rotation: 0,
        sides: ['top']
      });
      if (this.editorMode) {
        this.createLines();
      }
      if (this.options.showLeaderboard) {
        this.showLeaderboard((ref = this.options.justBeatLevel) != null ? ref.get('slug') : void 0);
      }
    }
    this.applyCampaignStyles();
    return this.testParticles();
  };

  CampaignView.prototype.onShiftS = function(e) {
    if (this.editorMode) {
      return this.generateCompletionRates();
    }
  };

  CampaignView.prototype.generateCompletionRates = function() {
    var endDay, j, len, level, ref, ref1, ref2, request, results, startDay;
    if (!me.isAdmin()) {
      return;
    }
    startDay = utils.getUTCDay(-14);
    endDay = utils.getUTCDay(-1);
    $(".map-background").css('background-image', 'none');
    $(".gradient").remove();
    $("#campaign-view").css("background-color", "black");
    ref2 = (ref = (ref1 = this.campaign) != null ? ref1.renderedLevels : void 0) != null ? ref : [];
    results = [];
    for (j = 0, len = ref2.length; j < len; j++) {
      level = ref2[j];
      $("div[data-level-slug=" + level.slug + "] .level-kind").text("Loading...");
      request = this.supermodel.addRequestResource('level_completions', {
        url: '/db/analytics_perday/-/level_completions',
        data: {
          startDay: startDay,
          endDay: endDay,
          slug: level.slug
        },
        method: 'POST',
        success: this.onLevelCompletionsLoaded.bind(this, level)
      }, 0);
      results.push(request.load());
    }
    return results;
  };

  CampaignView.prototype.onLevelCompletionsLoaded = function(level, data) {
    var color, day, finished, j, len, offset, rateDisplay, ratio, ref, ref1, started;
    if (this.destroyed) {
      return;
    }
    started = 0;
    finished = 0;
    for (j = 0, len = data.length; j < len; j++) {
      day = data[j];
      started += (ref = day.started) != null ? ref : 0;
      finished += (ref1 = day.finished) != null ? ref1 : 0;
    }
    if (started === 0) {
      ratio = 0;
    } else {
      ratio = finished / started;
    }
    rateDisplay = (ratio * 100).toFixed(1) + '%';
    $("div[data-level-slug=" + level.slug + "] .level-kind").html((started < 1000 ? started : (started / 1000).toFixed(1) + "k") + "<br>" + rateDisplay);
    if (ratio <= 0.5) {
      color = "rgb(255, 0, 0)";
    } else if (ratio > 0.5 && ratio <= 0.85) {
      offset = (ratio - 0.5) / 0.35;
      color = "rgb(255, " + (Math.round(256 * offset)) + ", 0)";
    } else if (ratio > 0.85 && ratio <= 0.95) {
      offset = (ratio - 0.85) / 0.1;
      color = "rgb(" + (Math.round(256 * (1 - offset))) + ", 256, 0)";
    } else {
      color = "rgb(0, 256, 0)";
    }
    $("div[data-level-slug=" + level.slug + "] .level-kind").css({
      "color": color,
      "width": 256 + "px",
      "transform": "translateX(-50%) translateX(15px)"
    });
    return $("div[data-level-slug=" + level.slug + "]").css("background-color", color);
  };

  CampaignView.prototype.afterInsert = function() {
    var campaignSlug;
    CampaignView.__super__.afterInsert.call(this);
    if (this.getQueryVariable('signup') && !me.get('email')) {
      return this.promptForSignup();
    }
    if (!me.isPremium() && (this.isPremiumCampaign() || (this.options.worldComplete && !features.freeOnly))) {
      if (!me.get('email')) {
        return this.promptForSignup();
      }
      campaignSlug = window.location.pathname.split('/')[2];
      return this.promptForSubscription(campaignSlug, 'premium campaign visited');
    }
  };

  CampaignView.prototype.promptForSignup = function() {
    var authModal;
    this.endHighlight();
    authModal = new CreateAccountModal({
      supermodel: this.supermodel
    });
    authModal.mode = 'signup';
    return this.openModalView(authModal);
  };

  CampaignView.prototype.promptForSubscription = function(slug, label) {
    var ref;
    this.endHighlight();
    this.openModalView(new SubscribeModal());
    return (ref = window.tracker) != null ? ref.trackEvent('Show subscription modal', {
      category: 'Subscription',
      label: label,
      level: slug,
      levelID: slug
    }) : void 0;
  };

  CampaignView.prototype.isPremiumCampaign = function(slug) {
    slug || (slug = window.location.pathname.split('/')[2]);
    return /campaign-(game|web)-dev-\d/.test(slug);
  };

  CampaignView.prototype.showAds = function() {
    return false;
    if (application.isProduction() && !me.isPremium() && !me.isTeacher() && !window.serverConfig.picoCTF) {
      return me.getCampaignAdsGroup() === 'leaderboard-ads';
    }
    return false;
  };

  CampaignView.prototype.annotateLevels = function(orderedLevels) {
    var j, k, len, len1, len2, level, levelIndex, maxConcepts, n, otherLevel, previousIncompletePracticeLevel, problem, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, reward;
    previousIncompletePracticeLevel = false;
    results = [];
    for (levelIndex = j = 0, len = orderedLevels.length; j < len; levelIndex = ++j) {
      level = orderedLevels[levelIndex];
      if (level.position == null) {
        level.position = {
          x: 10,
          y: 10
        };
      }
      level.locked = !me.ownsLevel(level.original) || previousIncompletePracticeLevel;
      if (level.slug === 'kithgard-mastery' && this.calculateExperienceScore() === 0) {
        level.locked = true;
      }
      if (level.requiresSubscription && this.requiresSubscription && me.get('hourOfCode')) {
        level.locked = true;
      }
      if (ref = level.slug, indexOf.call(me.getDungeonLevelsHidden(), ref) >= 0) {
        level.locked = true;
      }
      if ((ref1 = this.levelStatusMap[level.slug]) === 'started' || ref1 === 'complete') {
        level.locked = false;
      }
      if (this.editorMode) {
        level.locked = false;
      }
      if ((ref2 = (ref3 = this.campaign) != null ? ref3.get('name') : void 0) === 'Auditions' || ref2 === 'Intro') {
        level.locked = false;
      }
      if (me.isInGodMode()) {
        level.locked = false;
      }
      if (level.adminOnly && ((ref4 = this.levelStatusMap[level.slug]) !== 'started' && ref4 !== 'complete')) {
        level.disabled = true;
      }
      if (me.isInGodMode()) {
        level.disabled = false;
      }
      level.color = 'rgb(255, 80, 60)';
      if (level.requiresSubscription) {
        level.color = 'rgb(80, 130, 200)';
      }
      if (level.adventurer) {
        level.color = 'rgb(200, 80, 200)';
      }
      if (level.locked) {
        level.color = 'rgb(193, 193, 193)';
      }
      level.unlocksHero = (ref5 = _.find(level.rewards, 'hero')) != null ? ref5.hero : void 0;
      if (level.unlocksHero) {
        level.purchasedHero = (ref6 = level.unlocksHero, indexOf.call(((ref7 = me.get('purchased')) != null ? ref7.heroes : void 0) || [], ref6) >= 0);
      }
      level.unlocksItem = (ref8 = _.find(level.rewards, 'item')) != null ? ref8.item : void 0;
      if (window.serverConfig.picoCTF) {
        if (problem = _.find(this.picoCTFProblems || [], {
          pid: level.picoCTFProblem
        })) {
          if (problem.unlocked || level.slug === 'digital-graffiti') {
            level.locked = false;
          }
          level.description = "### " + problem.name + "\n" + (level.description || problem.description) + "\n\n" + problem.category + " - " + problem.score + " points";
          if (problem.solved) {
            level.color = 'rgb(80, 130, 200)';
          }
        }
      }
      if (((ref9 = this.campaign) != null ? ref9.levelIsPractice(level) : void 0) && !level.locked && this.levelStatusMap[level.slug] !== 'complete' && (!level.requiresSubscription || level.adventurer || !this.requiresSubscription)) {
        previousIncompletePracticeLevel = true;
      }
      level.hidden = level.locked;
      if ((ref10 = level.concepts) != null ? ref10.length : void 0) {
        level.displayConcepts = level.concepts;
        maxConcepts = 6;
        if (level.displayConcepts.length > maxConcepts) {
          level.displayConcepts = level.displayConcepts.slice(-maxConcepts);
        }
      }
      level.unlockedInSameCampaign = levelIndex < 5;
      for (k = 0, len1 = orderedLevels.length; k < len1; k++) {
        otherLevel = orderedLevels[k];
        if (!level.unlockedInSameCampaign && otherLevel !== level) {
          ref12 = (ref11 = otherLevel.rewards) != null ? ref11 : [];
          for (n = 0, len2 = ref12.length; n < len2; n++) {
            reward = ref12[n];
            if (reward.level) {
              level.unlockedInSameCampaign || (level.unlockedInSameCampaign = reward.level === level.original);
            }
          }
        }
      }
      if (ref13 = level.slug, indexOf.call(me.getDungeonLevelsHidden(), ref13) >= 0) {
        results.push(level.unlockedInSameCampaign = false);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  CampaignView.prototype.countLevels = function(orderedLevels) {
    var completed, count, j, k, len, len1, level, levelIndex, ref, ref1, started;
    count = {
      total: 0,
      completed: 0
    };
    if (((ref = this.campaign) != null ? ref.get('slug') : void 0) === 'game-dev-hoc') {
      orderedLevels = _.sortBy(orderedLevels, function(level) {
        return level.position.x;
      });
      for (j = 0, len = orderedLevels.length; j < len; j++) {
        level = orderedLevels[j];
        if (this.levelStatusMap[level.slug] === 'complete') {
          count.completed++;
        }
      }
      count.total = orderedLevels.length;
      return count;
    }
    for (levelIndex = k = 0, len1 = orderedLevels.length; k < len1; levelIndex = ++k) {
      level = orderedLevels[levelIndex];
      if (level.locked == null) {
        this.annotateLevels(orderedLevels);
      }
      if (level.disabled) {
        continue;
      }
      completed = this.levelStatusMap[level.slug] === 'complete';
      started = this.levelStatusMap[level.slug] === 'started';
      if ((level.unlockedInSameCampaign || !level.locked) && (started || completed || !((ref1 = this.campaign) != null ? ref1.levelIsPractice(level) : void 0))) {
        ++count.total;
      }
      if (completed) {
        ++count.completed;
      }
    }
    return count;
  };

  CampaignView.prototype.showLeaderboard = function(levelSlug) {
    var leaderboardModal;
    leaderboardModal = new LeaderboardModal({
      supermodel: this.supermodel,
      levelSlug: levelSlug
    });
    return this.openModalView(leaderboardModal);
  };

  CampaignView.prototype.determineNextLevel = function(orderedLevels) {
    var dontPointTo, findNextLevel, foundNext, j, k, len, len1, len2, level, levelIndex, n, nextLevel, nextLevelIndex, ref, reward, subscriptionPrompts;
    dontPointTo = ['lost-viking', 'kithgard-mastery'];
    subscriptionPrompts = [
      {
        slug: 'boom-and-bust',
        unless: 'defense-of-plainswood'
      }
    ];
    if (((ref = this.campaign) != null ? ref.get('slug') : void 0) === 'game-dev-hoc') {
      orderedLevels = _.sortBy(orderedLevels, function(level) {
        return level.position.x;
      });
      for (j = 0, len = orderedLevels.length; j < len; j++) {
        level = orderedLevels[j];
        if (this.levelStatusMap[level.slug] !== 'complete') {
          level.next = true;
          level.locked = false;
          level.hidden = level.locked;
          level.disabled = false;
          level.color = 'rgb(255, 80, 60)';
          return;
        }
      }
    }
    findNextLevel = (function(_this) {
      return function(nextLevels, practiceOnly) {
        var k, len1, nextLevel, nextLevelOriginal, ref1, timesPointedOut;
        for (k = 0, len1 = nextLevels.length; k < len1; k++) {
          nextLevelOriginal = nextLevels[k];
          nextLevel = _.find(orderedLevels, {
            original: nextLevelOriginal
          });
          if (!nextLevel || nextLevel.locked) {
            continue;
          }
          if (practiceOnly && !_this.campaign.levelIsPractice(nextLevel)) {
            continue;
          }
          if (nextLevel.slug === 'kithgard-mastery' && !_this.levelStatusMap[nextLevel.slug] && _this.calculateExperienceScore() >= 3) {
            if (!((timesPointedOut = storage.load("pointed-out-" + nextLevel.slug) || 0) > 3)) {
              dontPointTo = _.without(dontPointTo, nextLevel.slug);
              storage.save("pointed-out-" + nextLevel.slug, timesPointedOut + 1);
            }
          }
          if (!nextLevel.disabled && _this.levelStatusMap[nextLevel.slug] !== 'complete' && (ref1 = nextLevel.slug, indexOf.call(dontPointTo, ref1) < 0) && !nextLevel.replayable && (me.isPremium() || !nextLevel.requiresSubscription || nextLevel.adventurer || _.any(subscriptionPrompts, function(prompt) {
            return nextLevel.slug === prompt.slug && !_this.levelStatusMap[prompt.unless];
          }))) {
            nextLevel.next = true;
            return true;
          }
        }
        return false;
      };
    })(this);
    foundNext = false;
    for (levelIndex = k = 0, len1 = orderedLevels.length; k < len1; levelIndex = ++k) {
      level = orderedLevels[levelIndex];
      if (this.campaign.get('type') === 'course') {
        level.nextLevels = [];
        for (nextLevelIndex = n = 0, len2 = orderedLevels.length; n < len2; nextLevelIndex = ++n) {
          nextLevel = orderedLevels[nextLevelIndex];
          if (!(nextLevelIndex > levelIndex)) {
            continue;
          }
          if (nextLevel.practice && level.nextLevels.length) {
            continue;
          }
          if (level.practice && !nextLevel.practice) {
            break;
          }
          level.nextLevels.push(nextLevel.original);
          if (!nextLevel.practice) {
            break;
          }
        }
      } else {
        level.nextLevels = (function() {
          var len3, o, ref1, ref2, results;
          ref2 = (ref1 = level.rewards) != null ? ref1 : [];
          results = [];
          for (o = 0, len3 = ref2.length; o < len3; o++) {
            reward = ref2[o];
            if (reward.level) {
              results.push(reward.level);
            }
          }
          return results;
        })();
      }
      if (!foundNext) {
        foundNext = findNextLevel(level.nextLevels, true);
      }
      if (!foundNext) {
        foundNext = findNextLevel(level.nextLevels, false);
      }
    }
    if (!foundNext && orderedLevels[0] && !orderedLevels[0].locked && this.levelStatusMap[orderedLevels[0].slug] !== 'complete') {
      return orderedLevels[0].next = true;
    }
  };

  CampaignView.prototype.calculateExperienceScore = function() {
    var adultPoint, experienceScore, j, len, levelSlug, ref, ref1, ref2, ref3, ref4, speedPoints, speedThreshold;
    adultPoint = (ref = me.get('ageRange')) === '18-24' || ref === '25-34' || ref === '35-44' || ref === '45-100';
    speedPoints = 0;
    ref1 = [['dungeons-of-kithgard', 50], ['gems-in-the-deep', 55], ['shadow-guard', 55], ['forgetful-gemsmith', 40], ['true-names', 40]];
    for (j = 0, len = ref1.length; j < len; j++) {
      ref2 = ref1[j], levelSlug = ref2[0], speedThreshold = ref2[1];
      if (((ref3 = _.find((ref4 = this.sessions) != null ? ref4.models : void 0, function(session) {
        return session.get('levelID') === levelSlug;
      })) != null ? ref3.attributes.playtime : void 0) <= speedThreshold) {
        ++speedPoints;
      }
    }
    experienceScore = adultPoint + speedPoints;
    return experienceScore;
  };

  CampaignView.prototype.createLines = function() {
    var j, len, level, nextLevel, nextLevelOriginal, ref, ref1, ref2, results;
    ref2 = (ref = (ref1 = this.campaign) != null ? ref1.renderedLevels : void 0) != null ? ref : [];
    results = [];
    for (j = 0, len = ref2.length; j < len; j++) {
      level = ref2[j];
      results.push((function() {
        var k, len1, ref3, ref4, results1;
        ref4 = (ref3 = level.nextLevels) != null ? ref3 : [];
        results1 = [];
        for (k = 0, len1 = ref4.length; k < len1; k++) {
          nextLevelOriginal = ref4[k];
          if (nextLevel = _.find(this.campaign.renderedLevels, {
            original: nextLevelOriginal
          })) {
            results1.push(this.createLine(level.position, nextLevel.position));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  CampaignView.prototype.createLine = function(o1, o2) {
    var angle, length, line, mapHeight, mapWidth, p1, p2, ratio, transform;
    mapHeight = parseFloat($(".map").css("height"));
    mapWidth = parseFloat($(".map").css("width"));
    if (!(mapHeight > 0)) {
      return;
    }
    ratio = mapWidth / mapHeight;
    p1 = {
      x: o1.x,
      y: o1.y / ratio
    };
    p2 = {
      x: o2.x,
      y: o2.y / ratio
    };
    length = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
    angle = Math.atan2(p1.y - p2.y, p2.x - p1.x) * 180 / Math.PI;
    transform = "translateY(-50%) translateX(-50%) rotate(" + angle + "deg) translateX(50%)";
    line = $('<div>').appendTo('.map').addClass('next-level-line').css({
      transform: transform,
      width: length + '%',
      left: o1.x + '%',
      bottom: (o1.y - 0.5) + '%'
    });
    return line.append($('<div class="line">')).append($('<div class="point">'));
  };

  CampaignView.prototype.applyCampaignStyles = function() {
    var background, backgroundColor, backgroundColorTransparent, backgrounds, i, j, k, len, len1, pos, ref, ref1, rule, rules;
    if (!((ref = this.campaign) != null ? ref.loaded : void 0)) {
      return;
    }
    if ((backgrounds = this.campaign.get('backgroundImage')) && backgrounds.length) {
      backgrounds = _.sortBy(backgrounds, 'width');
      backgrounds.reverse();
      rules = [];
      for (i = j = 0, len = backgrounds.length; j < len; i = ++j) {
        background = backgrounds[i];
        rule = "#campaign-view .map-background { background-image: url(/file/" + background.image + "); }";
        if (i) {
          rule = "@media screen and (max-width: " + background.width + "px) { " + rule + " }";
        }
        rules.push(rule);
      }
      utils.injectCSS(rules.join('\n'));
    }
    if (backgroundColor = this.campaign.get('backgroundColor')) {
      backgroundColorTransparent = this.campaign.get('backgroundColorTransparent');
      this.$el.css('background-color', backgroundColor);
      ref1 = ['top', 'right', 'bottom', 'left'];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        pos = ref1[k];
        this.$el.find("." + pos + "-gradient").css('background-image', "linear-gradient(to " + pos + ", " + backgroundColorTransparent + " 0%, " + backgroundColor + " 100%)");
      }
    }
    return this.playAmbientSound();
  };

  CampaignView.prototype.testParticles = function() {
    var j, len, level, particleKey, ref, ref1, ref2, ref3, ref4, results, terrain;
    if (!(((ref = this.campaign) != null ? ref.loaded : void 0) && $.browser.chrome)) {
      return;
    }
    if (this.particleMan == null) {
      this.particleMan = new ParticleMan();
    }
    this.particleMan.removeEmitters();
    this.particleMan.attach(this.$el.find('.map'));
    ref2 = (ref1 = this.campaign.renderedLevels) != null ? ref1 : {};
    results = [];
    for (j = 0, len = ref2.length; j < len; j++) {
      level = ref2[j];
      if (level.hidden && (this.campaign.levelIsPractice(level) || !level.unlockedInSameCampaign)) {
        continue;
      }
      terrain = this.terrain.replace('-branching-test', '').replace(/(campaign-)?(game|web)-dev-\d/, 'forest').replace(/(intro|game-dev-hoc)/, 'dungeon');
      particleKey = ['level', terrain];
      if (level.type && !((ref3 = level.type) === 'hero' || ref3 === 'course')) {
        particleKey.push(level.type);
      }
      if (level.replayable) {
        particleKey.push('replayable');
      }
      if (level.requiresSubscription) {
        particleKey.push('premium');
      }
      if ((ref4 = level.slug) === 'kithgard-gates' || ref4 === 'siege-of-stonehold' || ref4 === 'clash-of-clones' || ref4 === 'summits-gate') {
        particleKey.push('gate');
      }
      if (level.unlocksHero && !level.unlockedHero) {
        particleKey.push('hero');
      }
      if (particleKey.length === 2) {
        continue;
      }
      if (!(level.hidden || _.intersection(particleKey, ['item', 'hero-ladder', 'replayable', 'game-dev']).length)) {
        continue;
      }
      results.push(this.particleMan.addEmitter(level.position.x / 100, level.position.y / 100, particleKey.join('-')));
    }
    return results;
  };

  CampaignView.prototype.onMouseEnterPortals = function(e) {
    var ref, ref1;
    if (!(((ref = this.campaigns) != null ? ref.loaded : void 0) && ((ref1 = this.sessions) != null ? ref1.loaded : void 0))) {
      return;
    }
    this.portalScrollInterval = setInterval(this.onMouseMovePortals, 100);
    return this.onMouseMovePortals(e);
  };

  CampaignView.prototype.onMouseLeavePortals = function(e) {
    if (!this.portalScrollInterval) {
      return;
    }
    clearInterval(this.portalScrollInterval);
    return this.portalScrollInterval = null;
  };

  CampaignView.prototype.onMouseMovePortals = function(e) {
    var $portal, $portals, bodyWidth, direction, fraction, magnitude, portalsWidth, scrollTo;
    if (!this.portalScrollInterval) {
      return;
    }
    $portal = this.$el.find('.portal');
    $portals = this.$el.find('.portals');
    if (e) {
      this.portalOffsetX = Math.round(Math.max(0, e.clientX - $portal.offset().left));
    }
    bodyWidth = $('body').innerWidth();
    fraction = this.portalOffsetX / bodyWidth;
    if ((0.2 < fraction && fraction < 0.8)) {
      return;
    }
    direction = fraction < 0.5 ? 1 : -1;
    magnitude = 0.2 * bodyWidth * (direction === -1 ? fraction - 0.8 : 0.2 - fraction) / 0.2;
    portalsWidth = 2536;
    scrollTo = $portals.offset().left + direction * magnitude;
    scrollTo = Math.max(bodyWidth - portalsWidth, scrollTo);
    scrollTo = Math.min(0, scrollTo);
    return $portals.stop().animate({
      marginLeft: scrollTo
    }, 100, 'linear');
  };

  CampaignView.prototype.onSessionsLoaded = function(e) {
    var j, len, ref, ref1, ref2, session;
    if (this.editorMode) {
      return;
    }
    ref = this.sessions.models;
    for (j = 0, len = ref.length; j < len; j++) {
      session = ref[j];
      if (this.levelStatusMap[session.get('levelID')] !== 'complete') {
        this.levelStatusMap[session.get('levelID')] = ((ref1 = session.get('state')) != null ? ref1.complete : void 0) ? 'complete' : 'started';
      }
      if ((ref2 = session.get('state')) != null ? ref2.difficulty : void 0) {
        this.levelDifficultyMap[session.get('levelID')] = session.get('state').difficulty;
      }
    }
    this.render();
    if (!(me.get('anonymous') || window.serverConfig.picoCTF)) {
      return this.loadUserPollsRecord();
    }
  };

  CampaignView.prototype.onCampaignsLoaded = function(e) {
    return this.render();
  };

  CampaignView.prototype.preloadLevel = function(levelSlug) {
    var level, levelURL, sessionURL;
    levelURL = "/db/level/" + levelSlug;
    level = new Level().setURL(levelURL);
    level = this.supermodel.loadModel(level, null, 0).model;
    sessionURL = "/db/level/" + levelSlug + "/session";
    this.preloadedSession = new LevelSession().setURL(sessionURL);
    this.listenToOnce(this.preloadedSession, 'sync', this.onSessionPreloaded);
    this.preloadedSession = this.supermodel.loadModel(this.preloadedSession, {
      cache: false
    }).model;
    return this.preloadedSession.levelSlug = levelSlug;
  };

  CampaignView.prototype.onSessionPreloaded = function(session) {
    var badge, difficulty, levelElement, ref;
    session.url = function() {
      return '/db/level.session/' + this.id;
    };
    levelElement = this.$el.find('.level-info-container:visible');
    if (session.levelSlug !== levelElement.data('level-slug')) {
      return;
    }
    if (!(difficulty = (ref = session.get('state')) != null ? ref.difficulty : void 0)) {
      return;
    }
    badge = $("<span class='badge'>" + difficulty + "</span>");
    levelElement.find('.start-level .badge').remove();
    return levelElement.find('.start-level').append(badge);
  };

  CampaignView.prototype.onClickMap = function(e) {
    var ref, ref1;
    if ((ref = this.$levelInfo) != null) {
      ref.hide();
    }
    if (((ref1 = this.sessions) != null ? ref1.models.length : void 0) < 3) {
      return this.highlightElement('.level.next', {
        delay: 500,
        duration: 60000,
        rotation: 0,
        sides: ['top']
      });
    }
  };

  CampaignView.prototype.onClickLevel = function(e) {
    var levelElement, levelOriginal, levelSlug, ref;
    e.preventDefault();
    e.stopPropagation();
    if ((ref = this.$levelInfo) != null) {
      ref.hide();
    }
    levelElement = $(e.target).parents('.level');
    levelSlug = levelElement.data('level-slug');
    levelOriginal = levelElement.data('level-original');
    if (this.editorMode) {
      return this.trigger('level-clicked', levelOriginal);
    }
    this.$levelInfo = this.$el.find(".level-info-container[data-level-slug=" + levelSlug + "]").show();
    this.checkForCourseOption(levelOriginal);
    this.adjustLevelInfoPosition(e);
    this.endHighlight();
    return this.preloadLevel(levelSlug);
  };

  CampaignView.prototype.onDoubleClickLevel = function(e) {
    var levelElement, levelOriginal;
    if (!this.editorMode) {
      return;
    }
    levelElement = $(e.target).parents('.level');
    levelOriginal = levelElement.data('level-original');
    return this.trigger('level-double-clicked', levelOriginal);
  };

  CampaignView.prototype.onClickStartLevel = function(e) {
    var canPlayAnyway, level, levelElement, levelOriginal, levelSlug, ref, ref1, requiresSubscription;
    levelElement = $(e.target).parents('.level-info-container');
    levelSlug = levelElement.data('level-slug');
    levelOriginal = levelElement.data('level-original');
    level = _.find(_.values(this.campaign.get('levels')), {
      slug: levelSlug
    });
    requiresSubscription = level.requiresSubscription || (me.isOnPremiumServer() && !((ref = level.slug) === 'dungeons-of-kithgard' || ref === 'gems-in-the-deep' || ref === 'shadow-guard' || ref === 'forgetful-gemsmith' || ref === 'signs-and-portents' || ref === 'true-names'));
    canPlayAnyway = !this.requiresSubscription || level.adventurer || this.levelStatusMap[level.slug];
    if (requiresSubscription && !canPlayAnyway) {
      return this.promptForSubscription(levelSlug, 'map level clicked');
    } else {
      this.startLevel(levelElement);
      return (ref1 = window.tracker) != null ? ref1.trackEvent('Clicked Start Level', {
        category: 'World Map',
        levelID: levelSlug
      }) : void 0;
    }
  };

  CampaignView.prototype.onClickCourseVersion = function(e) {
    var courseID, courseInstanceID, levelSlug, url;
    levelSlug = $(e.target).parents('.level-info-container').data('level-slug');
    courseID = $(e.target).parents('.course-version').data('course-id');
    courseInstanceID = $(e.target).parents('.course-version').data('course-instance-id');
    url = "/play/level/" + levelSlug + "?course=" + courseID + "&course-instance=" + courseInstanceID;
    return Backbone.Mediator.publish('router:navigate', {
      route: url
    });
  };

  CampaignView.prototype.startLevel = function(levelElement) {
    var levelSlug, ref, ref1, ref2, session;
    if ((ref = this.setupManager) != null) {
      ref.destroy();
    }
    levelSlug = levelElement.data('level-slug');
    if (((ref1 = this.preloadedSession) != null ? ref1.loaded : void 0) && this.preloadedSession.levelSlug === levelSlug) {
      session = this.preloadedSession;
    }
    this.setupManager = new LevelSetupManager({
      supermodel: this.supermodel,
      levelID: levelSlug,
      levelPath: levelElement.data('level-path'),
      levelName: levelElement.data('level-name'),
      hadEverChosenHero: this.hadEverChosenHero,
      parent: this,
      session: session
    });
    if (!((ref2 = this.setupManager) != null ? ref2.navigatingToPlay : void 0)) {
      this.$levelInfo.find('.level-info, .progress').toggleClass('hide');
      this.listenToOnce(this.setupManager, 'open', function() {
        var ref3, ref4;
        if ((ref3 = this.$levelInfo) != null) {
          ref3.find('.level-info, .progress').toggleClass('hide');
        }
        return (ref4 = this.$levelInfo) != null ? ref4.hide() : void 0;
      });
      return this.setupManager.open();
    }
  };

  CampaignView.prototype.onClickViewSolutions = function(e) {
    var level, levelElement, levelSlug, ref;
    levelElement = $(e.target).parents('.level-info-container');
    levelSlug = levelElement.data('level-slug');
    level = _.find(_.values(this.campaign.get('levels')), {
      slug: levelSlug
    });
    if ((ref = level.type) === 'hero-ladder' || ref === 'course-ladder') {
      return Backbone.Mediator.publish('router:navigate', {
        route: "/play/ladder/" + levelSlug,
        viewClass: 'views/ladder/LadderView',
        viewArgs: [
          {
            supermodel: this.supermodel
          }, levelSlug
        ]
      });
    } else {
      return this.showLeaderboard(levelSlug);
    }
  };

  CampaignView.prototype.adjustLevelInfoPosition = function(e) {
    var height, mapOffset, mapX, mapY, margin, top, width;
    if (!this.$levelInfo) {
      return;
    }
    if (this.$map == null) {
      this.$map = this.$el.find('.map');
    }
    mapOffset = this.$map.offset();
    mapX = e.pageX - mapOffset.left;
    mapY = e.pageY - mapOffset.top;
    margin = 20;
    width = this.$levelInfo.outerWidth();
    this.$levelInfo.css('left', Math.min(Math.max(margin, mapX - width / 2), this.$map.width() - width - margin));
    height = this.$levelInfo.outerHeight();
    top = mapY - this.$levelInfo.outerHeight() - 60;
    if (top < 100) {
      top = mapY + 60;
    }
    return this.$levelInfo.css('top', top);
  };

  CampaignView.prototype.onWindowResize = function(e) {
    var adContainerHeight, aspectRatio, heightRatio, iPadHeight, mapHeight, mapWidth, pageHeight, pageWidth, resultingHeight, resultingMarginX, resultingMarginY, resultingWidth, widthRatio;
    mapHeight = iPadHeight = 1536;
    mapWidth = {
      dungeon: 2350,
      forest: 2500,
      auditions: 2500,
      desert: 2350,
      mountain: 2422,
      glacier: 2421
    }[this.terrain] || 2350;
    aspectRatio = mapWidth / mapHeight;
    pageWidth = this.$el.width();
    pageHeight = this.$el.height();
    if (adContainerHeight = $('.ad-container').outerHeight()) {
      pageHeight -= adContainerHeight;
    }
    widthRatio = pageWidth / mapWidth;
    heightRatio = pageHeight / mapHeight;
    if (heightRatio <= widthRatio) {
      resultingHeight = pageHeight;
      resultingWidth = resultingHeight * aspectRatio;
    } else {
      resultingWidth = pageWidth;
      resultingHeight = resultingWidth / aspectRatio;
    }
    resultingMarginX = (pageWidth - resultingWidth) / 2;
    resultingMarginY = (pageHeight - resultingHeight) / 2;
    this.$el.find('.map').css({
      width: resultingWidth,
      height: resultingHeight,
      'margin-left': resultingMarginX,
      'margin-top': resultingMarginY
    });
    if (this.particleMan) {
      return this.testParticles();
    }
  };

  CampaignView.prototype.playAmbientSound = function() {
    var file, ref, ref1, ref2, src;
    if (!me.get('volume')) {
      return;
    }
    if (this.ambientSound) {
      return;
    }
    if (!(file = (ref = this.campaign) != null ? (ref1 = ref.get('ambientSound')) != null ? ref1[AudioPlayer.ext.substr(1)] : void 0 : void 0)) {
      return;
    }
    src = "/file/" + file;
    if (!((ref2 = AudioPlayer.getStatus(src)) != null ? ref2.loaded : void 0)) {
      AudioPlayer.preloadSound(src);
      Backbone.Mediator.subscribeOnce('audio-player:loaded', this.playAmbientSound, this);
      return;
    }
    this.ambientSound = createjs.Sound.play(src, {
      loop: -1,
      volume: 0.1
    });
    return createjs.Tween.get(this.ambientSound).to({
      volume: 0.5
    }, 1000);
  };

  CampaignView.prototype.playMusic = function() {
    var musicFile;
    this.musicPlayer = new MusicPlayer();
    musicFile = '/music/music-menu';
    Backbone.Mediator.publish('music-player:play-music', {
      play: true,
      file: musicFile
    });
    if (!this.probablyCachedMusic) {
      return storage.save("loaded-menu-music", true);
    }
  };

  CampaignView.prototype.checkForCourseOption = function(levelOriginal) {
    var courseInstances, ref;
    if (!((ref = me.get('courseInstances')) != null ? ref.length : void 0)) {
      return;
    }
    if (this.courseOptionsChecked == null) {
      this.courseOptionsChecked = {};
    }
    if (this.courseOptionsChecked[levelOriginal]) {
      return;
    }
    this.courseOptionsChecked[levelOriginal] = true;
    courseInstances = new CocoCollection([], {
      url: "/db/course_instance/-/find_by_level/" + levelOriginal,
      model: CourseInstance
    });
    courseInstances.comparator = function(ci) {
      var ref1;
      return -((ref1 = ci.get('members')) != null ? ref1 : []).length;
    };
    this.supermodel.loadCollection(courseInstances, 'course_instances');
    return this.listenToOnce(courseInstances, 'sync', (function(_this) {
      return function() {
        var courseInstance;
        if (_this.destroyed) {
          return;
        }
        if (!(courseInstance = courseInstances.models[0])) {
          return;
        }
        return _this.$el.find(".course-version[data-level-original='" + levelOriginal + "']").removeClass('hidden').data({
          'course-id': courseInstance.get('courseID'),
          'course-instance-id': courseInstance.id
        });
      };
    })(this));
  };

  CampaignView.prototype.preloadTopHeroes = function() {
    var fullHero, heroID, j, len, ref, results, url;
    if (window.serverConfig.picoCTF) {
      return;
    }
    ref = ['captain', 'knight'];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      heroID = ref[j];
      url = "/db/thang.type/" + ThangType.heroes[heroID] + "/version";
      if (this.supermodel.getModel(url)) {
        continue;
      }
      fullHero = new ThangType();
      fullHero.setURL(url);
      results.push(this.supermodel.loadModel(fullHero));
    }
    return results;
  };

  CampaignView.prototype.updateVolume = function(volume) {
    var button, classes, ref;
    if (volume == null) {
      volume = (ref = me.get('volume')) != null ? ref : 1.0;
    }
    classes = ['vol-off', 'vol-down', 'vol-up'];
    button = $('#volume-button', this.$el);
    button.toggleClass('vol-off', volume <= 0.0);
    button.toggleClass('vol-down', (0.0 < volume && volume < 1.0));
    button.toggleClass('vol-up', volume >= 1.0);
    createjs.Sound.setVolume(volume === 1 ? 0.6 : volume);
    if (volume !== me.get('volume')) {
      me.set('volume', volume);
      me.patch();
      if (volume) {
        return this.playAmbientSound();
      }
    }
  };

  CampaignView.prototype.onToggleVolume = function(e) {
    var button, classes, i, j, len, newI, oldClass, volumes;
    button = $(e.target).closest('#volume-button');
    classes = ['vol-off', 'vol-down', 'vol-up'];
    volumes = [0, 0.4, 1.0];
    for (i = j = 0, len = classes.length; j < len; i = ++j) {
      oldClass = classes[i];
      if (button.hasClass(oldClass)) {
        newI = (i + 1) % classes.length;
        break;
      } else if (i === classes.length - 1) {
        newI = 2;
      }
    }
    return this.updateVolume(volumes[newI]);
  };

  CampaignView.prototype.onClickBack = function(e) {
    return Backbone.Mediator.publish('router:navigate', {
      route: "/play",
      viewClass: CampaignView,
      viewArgs: [
        {
          supermodel: this.supermodel
        }
      ]
    });
  };

  CampaignView.prototype.onClickClearStorage = function(e) {
    localStorage.clear();
    return noty({
      text: 'Local storage cleared. Reload to view the original campaign.',
      layout: 'topCenter',
      timeout: 5000,
      type: 'information'
    });
  };

  CampaignView.prototype.updateHero = function() {
    var hero, original, ref, ref1, slug;
    if (!(hero = (ref = me.get('heroConfig')) != null ? ref.thangType : void 0)) {
      return;
    }
    ref1 = ThangType.heroes;
    for (slug in ref1) {
      original = ref1[slug];
      if (!(original === hero)) {
        continue;
      }
      this.$el.find('.player-hero-icon').removeClass().addClass('player-hero-icon ' + slug);
      return;
    }
    return console.error("CampaignView hero update couldn't find hero slug for original:", hero);
  };

  CampaignView.prototype.onClickPortalCampaign = function(e) {
    var campaign, campaignSlug;
    campaign = $(e.target).closest('.campaign, .beta-campaign');
    if (campaign.is('.locked') || campaign.is('.silhouette')) {
      return;
    }
    campaignSlug = campaign.data('campaign-slug');
    if (this.isPremiumCampaign(campaignSlug) && !me.isPremium()) {
      return this.promptForSubscription(campaignSlug, 'premium campaign clicked');
    }
    return Backbone.Mediator.publish('router:navigate', {
      route: "/play/" + campaignSlug,
      viewClass: CampaignView,
      viewArgs: [
        {
          supermodel: this.supermodel
        }, campaignSlug
      ]
    });
  };

  CampaignView.prototype.onClickCampaignSwitch = function(e) {
    var campaignSlug;
    campaignSlug = $(e.target).data('campaign-slug');
    console.log(campaignSlug, this.isPremiumCampaign(campaignSlug));
    if (this.isPremiumCampaign(campaignSlug) && !me.isPremium()) {
      e.preventDefault();
      e.stopImmediatePropagation();
      return this.promptForSubscription(campaignSlug, 'premium campaign switch clicked');
    }
  };

  CampaignView.prototype.loadUserPollsRecord = function() {
    var onRecordSync, url;
    url = "/db/user.polls.record/-/user/" + me.id;
    this.userPollsRecord = new UserPollsRecord().setURL(url);
    onRecordSync = function() {
      var interval, lastVoted;
      if (this.destroyed) {
        return;
      }
      this.userPollsRecord.url = function() {
        return '/db/user.polls.record/' + this.id;
      };
      lastVoted = new Date(this.userPollsRecord.get('changed') || 0);
      interval = new Date() - lastVoted;
      if (interval > 22 * 60 * 60 * 1000) {
        return this.loadPoll();
      } else {
        return console.log('Poll will be ready in', (22 * 60 * 60 * 1000 - interval) / (60 * 60 * 1000), 'hours.');
      }
    };
    this.listenToOnce(this.userPollsRecord, 'sync', onRecordSync);
    this.userPollsRecord = this.supermodel.loadModel(this.userPollsRecord, null, 0).model;
    if (this.userPollsRecord.loaded) {
      return onRecordSync.call(this);
    }
  };

  CampaignView.prototype.loadPoll = function() {
    var onPollError, onPollSync, url;
    url = "/db/poll/" + this.userPollsRecord.id + "/next";
    this.poll = new Poll().setURL(url);
    onPollSync = function() {
      if (this.destroyed) {
        return;
      }
      this.poll.url = function() {
        return '/db/poll/' + this.id;
      };
      return _.delay(((function(_this) {
        return function() {
          return typeof _this.activatePoll === "function" ? _this.activatePoll() : void 0;
        };
      })(this)), 1000);
    };
    onPollError = function(poll, response, request) {
      if (response.status === 404) {
        console.log('There are no more polls left.');
      } else {
        console.error("Couldn't load poll:", response.status, response.statusText);
      }
      return delete this.poll;
    };
    this.listenToOnce(this.poll, 'sync', onPollSync);
    this.listenToOnce(this.poll, 'error', onPollError);
    this.poll = this.supermodel.loadModel(this.poll, null, 0).model;
    if (this.poll.loaded) {
      return onPollSync.call(this);
    }
  };

  CampaignView.prototype.activatePoll = function() {
    var $pollButton, pollTitle;
    pollTitle = utils.i18n(this.poll.attributes, 'name');
    $pollButton = this.$el.find('button.poll').removeClass('hidden').addClass('highlighted').attr({
      title: pollTitle
    }).addClass('has-tooltip').tooltip({
      title: pollTitle
    });
    if (me.get('lastLevel') === 'shadow-guard') {
      return this.showPoll();
    } else {
      return $pollButton.tooltip('show');
    }
  };

  CampaignView.prototype.showPoll = function() {
    var $pollButton, pollModal;
    pollModal = new PollModal({
      supermodel: this.supermodel,
      poll: this.poll,
      userPollsRecord: this.userPollsRecord
    });
    this.openModalView(pollModal);
    $pollButton = this.$el.find('button.poll');
    return pollModal.on('vote-updated', function() {
      return $pollButton.removeClass('highlighted').tooltip('hide');
    });
  };

  return CampaignView;

})(RootView);
});

;require.register("views/play/SpectateView", function(exports, require, module) {
var Article, AudioPlayer, Camera, ChatView, ControlBarView, DuelStatsView, GoalManager, GoalsView, God, GoldView, HUDView, InfiniteLoopModal, Level, LevelComponent, LevelLoader, LevelSession, LoadingView, PROFILE_ME, PlaybackView, RootView, ScriptManager, SpectateLevelView, Surface, ThangType, TomeView, VictoryModal, World, me, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RootView = require('views/core/RootView');

template = require('templates/play/spectate');

me = require('core/auth').me;

ThangType = require('models/ThangType');

utils = require('core/utils');

World = require('lib/world/world');

Surface = require('lib/surface/Surface');

God = require('lib/God');

GoalManager = require('lib/world/GoalManager');

ScriptManager = require('lib/scripts/ScriptManager');

LevelLoader = require('lib/LevelLoader');

LevelSession = require('models/LevelSession');

Level = require('models/Level');

LevelComponent = require('models/LevelComponent');

Article = require('models/Article');

Camera = require('lib/surface/Camera');

AudioPlayer = require('lib/AudioPlayer');

LoadingView = require('./level/LevelLoadingView');

TomeView = require('./level/tome/TomeView');

ChatView = require('./level/LevelChatView');

HUDView = require('./level/LevelHUDView');

ControlBarView = require('./level/ControlBarView');

PlaybackView = require('./level/LevelPlaybackView');

GoalsView = require('./level/LevelGoalsView');

GoldView = require('./level/LevelGoldView');

DuelStatsView = require('./level/DuelStatsView');

VictoryModal = require('./level/modal/VictoryModal');

InfiniteLoopModal = require('./level/modal/InfiniteLoopModal');

require('game-libraries');

PROFILE_ME = false;

module.exports = SpectateLevelView = (function(superClass) {
  extend(SpectateLevelView, superClass);

  SpectateLevelView.prototype.id = 'spectate-level-view';

  SpectateLevelView.prototype.template = template;

  SpectateLevelView.prototype.cache = false;

  SpectateLevelView.prototype.isEditorPreview = false;

  SpectateLevelView.prototype.subscriptions = {
    'level:set-volume': function(e) {
      return createjs.Sound.setVolume(e.volume === 1 ? 0.6 : e.volume);
    },
    'god:new-world-created': 'onNewWorld',
    'god:streaming-world-updated': 'onNewWorld',
    'god:infinite-loop': 'onInfiniteLoop',
    'level:next-game-pressed': 'onNextGamePressed',
    'level:started': 'onLevelStarted',
    'level:loading-view-unveiled': 'onLoadingViewUnveiled'
  };

  function SpectateLevelView(options, levelID) {
    this.levelID = levelID;
    this.saveScreenshot = bind(this.saveScreenshot, this);
    this.onSupermodelLoadedOne = bind(this.onSupermodelLoadedOne, this);
    if (PROFILE_ME) {
      if (typeof console.profile === "function") {
        console.profile();
      }
    }
    SpectateLevelView.__super__.constructor.call(this, options);
    this.sessionOne = this.getQueryVariable('session-one');
    this.sessionTwo = this.getQueryVariable('session-two');
    if (options.spectateSessions) {
      this.sessionOne = options.spectateSessions.sessionOne;
      this.sessionTwo = options.spectateSessions.sessionTwo;
    }
    if (!this.sessionOne || !this.sessionTwo) {
      this.fetchRandomSessionPair((function(_this) {
        return function(err, data) {
          if (err != null) {
            return console.log("There was an error fetching the random session pair: " + data);
          }
          _this.sessionOne = data[0]._id;
          _this.sessionTwo = data[1]._id;
          return _this.load();
        };
      })(this));
    } else {
      this.load();
    }
  }

  SpectateLevelView.prototype.setLevel = function(level, supermodel) {
    var ref, serializedLevel;
    this.level = level;
    this.supermodel = supermodel;
    serializedLevel = this.level.serialize({
      supermodel: this.supermodel,
      session: this.session,
      otherSession: this.otherSession,
      headless: false,
      sessionless: false
    });
    if ((ref = this.god) != null) {
      ref.setLevel(serializedLevel);
    }
    if (this.world) {
      return this.world.loadFromLevel(serializedLevel, false);
    } else {
      return this.load();
    }
  };

  SpectateLevelView.prototype.load = function() {
    this.levelLoader = new LevelLoader({
      supermodel: this.supermodel,
      levelID: this.levelID,
      sessionID: this.sessionOne,
      opponentSessionID: this.sessionTwo,
      spectateMode: true,
      team: this.getQueryVariable('team')
    });
    return this.god = new God({
      maxAngels: 1,
      spectate: true
    });
  };

  SpectateLevelView.prototype.getRenderData = function() {
    var c;
    c = SpectateLevelView.__super__.getRenderData.call(this);
    c.world = this.world;
    return c;
  };

  SpectateLevelView.prototype.afterRender = function() {
    var ref, ref1;
    if (typeof window.onPlayLevelViewLoaded === "function") {
      window.onPlayLevelViewLoaded(this);
    }
    this.insertSubView(this.loadingView = new LoadingView({
      autoUnveil: true,
      level: (ref = (ref1 = this.levelLoader) != null ? ref1.level : void 0) != null ? ref : this.level
    }));
    this.$el.find('#level-done-button').hide();
    SpectateLevelView.__super__.afterRender.call(this);
    return $('body').addClass('is-playing');
  };

  SpectateLevelView.prototype.onLoaded = function() {
    return _.defer((function(_this) {
      return function() {
        return _this.onLevelLoaderLoaded();
      };
    })(this));
  };

  SpectateLevelView.prototype.onLevelLoaderLoaded = function() {
    var team;
    this.grabLevelLoaderData();
    team = this.world.teamForPlayer(0);
    this.loadOpponentTeam(team);
    this.god.setLevel(this.level.serialize({
      supermodel: this.supermodel,
      session: this.session,
      otherSession: this.otherSession,
      headless: false,
      sessionless: false
    }));
    this.god.setLevelSessionIDs(this.otherSession ? [this.session.id, this.otherSession.id] : [this.session.id]);
    this.god.setWorldClassMap(this.world.classMap);
    this.setTeam(team);
    this.initSurface();
    this.initGoalManager();
    this.initScriptManager();
    this.insertSubviews();
    this.initVolume();
    this.originalSessionState = $.extend(true, {}, this.session.get('state'));
    this.register();
    this.controlBar.setBus(this.bus);
    return this.surface.showLevel();
  };

  SpectateLevelView.prototype.grabLevelLoaderData = function() {
    this.session = this.levelLoader.session;
    this.world = this.levelLoader.world;
    this.level = this.levelLoader.level;
    this.otherSession = this.levelLoader.opponentSession;
    this.levelLoader.destroy();
    return this.levelLoader = null;
  };

  SpectateLevelView.prototype.loadOpponentTeam = function(myTeam) {
    var c, i, len, myCode, opponentCode, opponentSpells, ref, ref1, ref2, ref3, ref4, ref5, ref6, spell, spellTeam, spells, thang;
    opponentSpells = [];
    ref3 = (ref = (ref1 = this.session.get('teamSpells')) != null ? ref1 : (ref2 = this.otherSession) != null ? ref2.get('teamSpells') : void 0) != null ? ref : {};
    for (spellTeam in ref3) {
      spells = ref3[spellTeam];
      if (spellTeam === myTeam || !myTeam) {
        continue;
      }
      opponentSpells = opponentSpells.concat(spells);
    }
    opponentCode = ((ref4 = this.otherSession) != null ? ref4.get('code') : void 0) || {};
    myCode = this.session.get('code') || {};
    for (i = 0, len = opponentSpells.length; i < len; i++) {
      spell = opponentSpells[i];
      ref5 = spell.split('/'), thang = ref5[0], spell = ref5[1];
      c = (ref6 = opponentCode[thang]) != null ? ref6[spell] : void 0;
      if (myCode[thang] == null) {
        myCode[thang] = {};
      }
      if (c) {
        myCode[thang][spell] = c;
      } else {
        delete myCode[thang][spell];
      }
    }
    return this.session.set('code', myCode);
  };

  SpectateLevelView.prototype.onLevelStarted = function(e) {
    var go;
    go = (function(_this) {
      return function() {
        var ref, ref1;
        if ((ref = _this.loadingView) != null) {
          ref.startUnveiling();
        }
        return (ref1 = _this.loadingView) != null ? ref1.unveil(true) : void 0;
      };
    })(this);
    return _.delay(go, 1000);
  };

  SpectateLevelView.prototype.onLoadingViewUnveiled = function(e) {
    Backbone.Mediator.publish('level:set-playing', {
      playing: false
    });
    return Backbone.Mediator.publish('level:set-time', {
      time: 1
    });
  };

  SpectateLevelView.prototype.onSupermodelLoadedOne = function() {
    if (this.modelsLoaded == null) {
      this.modelsLoaded = 0;
    }
    this.modelsLoaded += 1;
    return this.updateInitString();
  };

  SpectateLevelView.prototype.updateInitString = function() {
    var canvas, ctx;
    if (this.surface) {
      return;
    }
    if (this.modelsLoaded == null) {
      this.modelsLoaded = 0;
    }
    canvas = this.$el.find('#surface')[0];
    ctx = canvas.getContext('2d');
    ctx.font = '20px Georgia';
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    return ctx.fillText("Loaded " + this.modelsLoaded + " thingies", 50, 50);
  };

  SpectateLevelView.prototype.insertSubviews = function() {
    var ref;
    this.insertSubView(this.tome = new TomeView({
      levelID: this.levelID,
      session: this.session,
      otherSession: this.otherSession,
      thangs: this.world.thangs,
      supermodel: this.supermodel,
      spectateView: true,
      spectateOpponentCodeLanguage: (ref = this.otherSession) != null ? ref.get('submittedCodeLanguage') : void 0,
      level: this.level,
      god: this.god
    }));
    this.insertSubView(new PlaybackView({
      session: this.session,
      level: this.level
    }));
    this.insertSubView(new GoldView({}));
    this.insertSubView(new HUDView({
      level: this.level
    }));
    if (this.level.isType('hero-ladder', 'course-ladder')) {
      this.insertSubView(new DuelStatsView({
        level: this.level,
        session: this.session,
        otherSession: this.otherSession,
        supermodel: this.supermodel,
        thangs: this.world.thangs
      }));
    }
    return this.insertSubView(this.controlBar = new ControlBarView({
      worldName: utils.i18n(this.level.attributes, 'name'),
      session: this.session,
      level: this.level,
      supermodel: this.supermodel,
      spectateGame: true
    }));
  };

  SpectateLevelView.prototype.onInfiniteLoop = function(e) {
    var ref;
    if (!(e.firstWorld && e.god === this.god)) {
      return;
    }
    this.openModalView(new InfiniteLoopModal());
    return (ref = window.tracker) != null ? ref.trackEvent('Saw Initial Infinite Loop', {
      level: this.world.name,
      label: this.world.name
    }) : void 0;
  };

  SpectateLevelView.prototype.initSurface = function() {
    var bounds, normalSurface, webGLSurface, worldBounds, zoom;
    webGLSurface = $('canvas#webgl-surface', this.$el);
    normalSurface = $('canvas#normal-surface', this.$el);
    this.surface = new Surface(this.world, normalSurface, webGLSurface, {
      thangTypes: this.supermodel.getModels(ThangType),
      spectateGame: true,
      playerNames: this.findPlayerNames(),
      levelType: this.level.get('type', true)
    });
    worldBounds = this.world.getBounds();
    bounds = [
      {
        x: worldBounds.left,
        y: worldBounds.top
      }, {
        x: worldBounds.right,
        y: worldBounds.bottom
      }
    ];
    this.surface.camera.setBounds(bounds);
    zoom = (function(_this) {
      return function() {
        return _this.surface.camera.zoomTo({
          x: (worldBounds.right - worldBounds.left) / 2,
          y: (worldBounds.top - worldBounds.bottom) / 2
        }, 0.1, 0);
      };
    })(this);
    return _.delay(zoom, 4000);
  };

  SpectateLevelView.prototype.findPlayerNames = function() {
    var i, len, playerNames, ref, session;
    playerNames = {};
    ref = [this.session, this.otherSession];
    for (i = 0, len = ref.length; i < len; i++) {
      session = ref[i];
      if (session != null ? session.get('team') : void 0) {
        playerNames[session.get('team')] = session.get('creatorName') || 'Anonymous';
      }
    }
    return playerNames;
  };

  SpectateLevelView.prototype.initGoalManager = function() {
    this.goalManager = new GoalManager(this.world, this.level.get('goals'));
    return this.god.setGoalManager(this.goalManager);
  };

  SpectateLevelView.prototype.initScriptManager = function() {
    var nonVictoryPlaybackScripts;
    if (this.world.scripts) {
      nonVictoryPlaybackScripts = _.reject(this.world.scripts, function(script) {
        return script.id.indexOf('Set Camera Boundaries') === -1;
      });
    } else {
      console.log('World scripts don\'t exist!');
      nonVictoryPlaybackScripts = [];
    }
    this.scriptManager = new ScriptManager({
      scripts: nonVictoryPlaybackScripts,
      view: this,
      session: this.session
    });
    return this.scriptManager.loadFromSession();
  };

  SpectateLevelView.prototype.initVolume = function() {
    var volume;
    volume = me.get('volume');
    if (volume == null) {
      volume = 1.0;
    }
    return Backbone.Mediator.publish('level:set-volume', {
      volume: volume
    });
  };

  SpectateLevelView.prototype.register = function() {};

  SpectateLevelView.prototype.onSessionWillSave = function(e) {
    return console.log('Session is saving but shouldn\'t save!!!!!!!');
  };

  SpectateLevelView.prototype.saveScreenshot = function(session) {
    var ref, screenshot;
    if (!(screenshot = (ref = this.surface) != null ? ref.screenshot() : void 0)) {
      return;
    }
    return session.save({
      screenshot: screenshot
    }, {
      patch: true,
      type: 'PUT'
    });
  };

  SpectateLevelView.prototype.setTeam = function(team) {
    if (!_.isString(team)) {
      team = team != null ? team.team : void 0;
    }
    if (team == null) {
      team = 'humans';
    }
    me.team = team;
    return Backbone.Mediator.publish('level:team-set', {
      team: team
    });
  };

  SpectateLevelView.prototype.onNewWorld = function(e) {
    var i, len, message, ref, ref1, ref2, results, scripts, sound, spriteName, startFrame, thangType, thangTypes;
    if (this.headless) {
      return;
    }
    scripts = this.world.scripts;
    this.world = e.world;
    this.world.scripts = scripts;
    thangTypes = this.supermodel.getModels(ThangType);
    startFrame = (ref = this.lastWorldFramesLoaded) != null ? ref : 0;
    if (this.world.frames.length === this.world.totalFrames) {
      this.lastWorldFramesLoaded = 0;
      if (this.getQueryVariable('autoplay') !== false) {
        Backbone.Mediator.publish('level:set-playing', {
          playing: true
        });
      }
    } else {
      this.lastWorldFramesLoaded = this.world.frames.length;
    }
    ref1 = this.world.thangDialogueSounds(startFrame);
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      ref2 = ref1[i], spriteName = ref2[0], message = ref2[1];
      if (!(thangType = _.find(thangTypes, function(m) {
        return m.get('name') === spriteName;
      }))) {
        continue;
      }
      if (!(sound = AudioPlayer.soundForDialogue(message, thangType.get('soundTriggers')))) {
        continue;
      }
      results.push(AudioPlayer.preloadSoundReference(sound));
    }
    return results;
  };

  SpectateLevelView.prototype.onNextGamePressed = function(e) {
    return this.fetchRandomSessionPair((function(_this) {
      return function(err, data) {
        var leagueID, url;
        if (_this.destroyed) {
          return;
        }
        if (err != null) {
          return console.log("There was an error fetching the random session pair: " + data);
        }
        _this.sessionOne = data[0]._id;
        _this.sessionTwo = data[1]._id;
        url = "/play/spectate/" + _this.levelID + "?session-one=" + _this.sessionOne + "&session-two=" + _this.sessionTwo;
        if (leagueID = _this.getQueryVariable('league')) {
          url += "&league=" + leagueID;
        }
        Backbone.Mediator.publish('router:navigate', {
          route: url,
          viewClass: SpectateLevelView,
          viewArgs: [
            {
              spectateSessions: {
                sessionOne: _this.sessionOne,
                sessionTwo: _this.sessionTwo
              },
              supermodel: _this.supermodel
            }, _this.levelID
          ]
        });
        return typeof history !== "undefined" && history !== null ? typeof history.pushState === "function" ? history.pushState({}, '', url) : void 0 : void 0;
      };
    })(this));
  };

  SpectateLevelView.prototype.fetchRandomSessionPair = function(cb) {
    var randomSessionPairURL;
    console.log('Fetching random session pair!');
    randomSessionPairURL = "/db/level/" + this.levelID + "/random_session_pair";
    return $.ajax({
      url: randomSessionPairURL,
      type: 'GET',
      cache: false,
      complete: function(jqxhr, textStatus) {
        if (textStatus !== 'success') {
          return cb('error', jqxhr.statusText);
        } else {
          return cb(null, $.parseJSON(jqxhr.responseText));
        }
      }
    });
  };

  SpectateLevelView.prototype.destroy = function() {
    var ref, ref1, ref2, ref3, ref4;
    if ((ref = this.levelLoader) != null) {
      ref.destroy();
    }
    if ((ref1 = this.surface) != null) {
      ref1.destroy();
    }
    if ((ref2 = this.god) != null) {
      ref2.destroy();
    }
    if ((ref3 = this.goalManager) != null) {
      ref3.destroy();
    }
    if ((ref4 = this.scriptManager) != null) {
      ref4.destroy();
    }
    delete window.world;
    if (PROFILE_ME) {
      if (typeof console.profileEnd === "function") {
        console.profileEnd();
      }
    }
    return SpectateLevelView.__super__.destroy.call(this);
  };

  return SpectateLevelView;

})(RootView);
});

;require.register("views/play/common/LadderSubmissionView", function(exports, require, module) {
var CocoView, LadderSubmissionView, LevelSession, createAetherOptions, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/common/ladder_submission');

createAetherOptions = require('lib/aether_utils').createAetherOptions;

LevelSession = require('models/LevelSession');

module.exports = LadderSubmissionView = (function(superClass) {
  extend(LadderSubmissionView, superClass);

  LadderSubmissionView.prototype.className = 'ladder-submission-view';

  LadderSubmissionView.prototype.template = template;

  LadderSubmissionView.prototype.events = {
    'click .rank-button': 'rankSession',
    'click .help-simulate': 'onHelpSimulate'
  };

  function LadderSubmissionView(options) {
    LadderSubmissionView.__super__.constructor.call(this, options);
    this.session = options.session;
    this.mirrorSession = options.mirrorSession;
    this.level = options.level;
  }

  LadderSubmissionView.prototype.getRenderData = function() {
    var ctx, ref, ref1, ref2, submitDate;
    ctx = LadderSubmissionView.__super__.getRenderData.call(this);
    ctx.readyToRank = (ref = this.session) != null ? ref.readyToRank() : void 0;
    ctx.isRanking = (ref1 = this.session) != null ? ref1.get('isRanking') : void 0;
    ctx.simulateURL = "/play/ladder/" + (this.level.get('slug')) + "#simulate";
    if (submitDate = (ref2 = this.session) != null ? ref2.get('submitDate') : void 0) {
      ctx.lastSubmitted = moment(submitDate).fromNow();
    }
    return ctx;
  };

  LadderSubmissionView.prototype.afterRender = function() {
    LadderSubmissionView.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    this.rankButton = this.$el.find('.rank-button');
    return this.updateButton();
  };

  LadderSubmissionView.prototype.updateButton = function() {
    var rankingState, ref, ref1;
    rankingState = 'unavailable';
    if ((ref = this.session) != null ? ref.readyToRank() : void 0) {
      rankingState = 'rank';
    } else if ((ref1 = this.session) != null ? ref1.get('isRanking') : void 0) {
      rankingState = 'ranking';
    }
    return this.setRankingButtonText(rankingState);
  };

  LadderSubmissionView.prototype.setRankingButtonText = function(spanClass) {
    var helpSimulate, showLastSubmitted;
    this.rankButton.find('span').hide();
    this.rankButton.find("." + spanClass).show();
    this.rankButton.toggleClass('disabled', spanClass !== 'rank');
    helpSimulate = spanClass === 'submitted' || spanClass === 'ranking';
    this.$el.find('.help-simulate').toggle(helpSimulate, 'slow');
    showLastSubmitted = !(spanClass === 'submitting');
    return this.$el.find('.last-submitted').toggle(showLastSubmitted);
  };

  LadderSubmissionView.prototype.showApologeticSignupModal = function() {
    var CreateAccountModal;
    CreateAccountModal = require('views/core/CreateAccountModal');
    return this.openModalView(new CreateAccountModal({
      showRequiredError: true
    }));
  };

  LadderSubmissionView.prototype.rankSession = function(e) {
    var failure, success;
    if (!this.session.readyToRank()) {
      return;
    }
    if (me.get('anonymous')) {
      return this.showApologeticSignupModal();
    }
    this.playSound('menu-button-click');
    this.setRankingButtonText('submitting');
    success = (function(_this) {
      return function() {
        if (!_this.destroyed) {
          _this.setRankingButtonText('submitted');
        }
        return Backbone.Mediator.publish('ladder:game-submitted', {
          session: _this.session,
          level: _this.level
        });
      };
    })(this);
    failure = (function(_this) {
      return function(jqxhr, textStatus, errorThrown) {
        console.log(jqxhr.responseText);
        if (!_this.destroyed) {
          return _this.setRankingButtonText('failed');
        }
      };
    })(this);
    return this.session.save(null, {
      success: (function(_this) {
        return function() {
          var ajaxData, ajaxOptions, mirrorAjaxData, mirrorAjaxOptions, mirrorCode;
          ajaxData = {
            session: _this.session.id,
            levelID: _this.level.id,
            originalLevelID: _this.level.get('original'),
            levelMajorVersion: _this.level.get('version').major
          };
          ajaxOptions = {
            type: 'POST',
            data: ajaxData,
            success: success,
            error: failure
          };
          if (_this.mirrorSession && _this.mirrorSession.get('submittedCode')) {
            mirrorAjaxData = _.clone(ajaxData);
            mirrorAjaxData.session = _this.mirrorSession.id;
            mirrorCode = _this.mirrorSession.get('code');
            if (_this.session.get('team') === 'humans') {
              mirrorCode['hero-placeholder-1'] = _this.session.get('code')['hero-placeholder'];
            } else {
              mirrorCode['hero-placeholder'] = _this.session.get('code')['hero-placeholder-1'];
            }
            mirrorAjaxOptions = _.clone(ajaxOptions);
            mirrorAjaxOptions.data = mirrorAjaxData;
            ajaxOptions.success = function() {
              var patch, tempSession;
              patch = {
                code: mirrorCode,
                codeLanguage: _this.session.get('codeLanguage')
              };
              tempSession = new LevelSession({
                _id: _this.mirrorSession.id
              });
              return tempSession.save(patch, {
                patch: true,
                type: 'PUT',
                success: function() {
                  return $.ajax('/queue/scoring', mirrorAjaxOptions);
                }
              });
            };
          }
          return $.ajax('/queue/scoring', ajaxOptions);
        };
      })(this)
    });
  };

  LadderSubmissionView.prototype.onHelpSimulate = function() {
    this.playSound('menu-button-click');
    return $('a[href="#simulate"]').tab('show');
  };

  return LadderSubmissionView;

})(CocoView);
});

;require.register("views/play/level/ControlBarView", function(exports, require, module) {
var Campaign, Classroom, CocoView, ControlBarView, Course, CourseInstance, GameMenuModal, LevelSetupManager, me, storage, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

storage = require('core/storage');

CocoView = require('views/core/CocoView');

template = require('templates/play/level/control-bar-view');

me = require('core/auth').me;

Campaign = require('models/Campaign');

Classroom = require('models/Classroom');

Course = require('models/Course');

CourseInstance = require('models/CourseInstance');

GameMenuModal = require('views/play/menu/GameMenuModal');

LevelSetupManager = require('lib/LevelSetupManager');

module.exports = ControlBarView = (function(superClass) {
  extend(ControlBarView, superClass);

  ControlBarView.prototype.id = 'control-bar-view';

  ControlBarView.prototype.template = template;

  ControlBarView.prototype.subscriptions = {
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'ipad:memory-warning': 'onIPadMemoryWarning'
  };

  ControlBarView.prototype.events = {
    'click #next-game-button': function() {
      return Backbone.Mediator.publish('level:next-game-pressed', {});
    },
    'click #game-menu-button': 'showGameMenuModal',
    'click': function() {
      return Backbone.Mediator.publish('tome:focus-editor', {});
    },
    'click .levels-link-area': 'onClickHome',
    'click .home a': 'onClickHome',
    'click #control-bar-sign-up-button': 'onClickSignupButton',
    'click #version-switch-button': 'onClickVersionSwitchButton',
    'click #version-switch-button .code-language-selector': 'onClickVersionSwitchButton'
  };

  function ControlBarView(options) {
    var jqxhr, ref;
    this.supermodel = options.supermodel;
    this.courseID = options.courseID;
    this.courseInstanceID = options.courseInstanceID;
    this.worldName = options.worldName;
    this.session = options.session;
    this.level = options.level;
    this.levelSlug = this.level.get('slug');
    this.levelID = this.levelSlug || this.level.id;
    this.spectateGame = (ref = options.spectateGame) != null ? ref : false;
    this.observing = options.session.get('creator') !== me.id;
    this.levelNumber = '';
    if (this.level.isType('course', 'game-dev', 'web-dev') && (this.level.get('campaignIndex') != null)) {
      this.levelNumber = this.level.get('campaignIndex') + 1;
    }
    if (this.courseInstanceID) {
      this.courseInstance = new CourseInstance({
        _id: this.courseInstanceID
      });
      jqxhr = this.courseInstance.fetch();
      this.supermodel.trackRequest(jqxhr);
      new Promise(jqxhr.then).then((function(_this) {
        return function() {
          _this.classroom = new Classroom({
            _id: _this.courseInstance.get('classroomID')
          });
          return _this.supermodel.trackRequest(_this.classroom.fetch());
        };
      })(this));
    } else if (this.courseID) {
      this.course = new Course({
        _id: this.courseID
      });
      jqxhr = this.course.fetch();
      this.supermodel.trackRequest(jqxhr);
      new Promise(jqxhr.then).then((function(_this) {
        return function() {
          _this.campaign = new Campaign({
            _id: _this.course.get('campaignID')
          });
          return _this.supermodel.trackRequest(_this.campaign.fetch());
        };
      })(this));
    }
    ControlBarView.__super__.constructor.call(this, options);
    if (this.level.get('replayable')) {
      this.listenTo(this.session, 'change-difficulty', this.onSessionDifficultyChanged);
    }
  }

  ControlBarView.prototype.onLoaded = function() {
    if (this.classroom) {
      this.levelNumber = this.classroom.getLevelNumber(this.level.get('original'), this.levelNumber);
    } else if (this.campaign) {
      this.levelNumber = this.campaign.getLevelNumber(this.level.get('original'), this.levelNumber);
    }
    return ControlBarView.__super__.onLoaded.call(this);
  };

  ControlBarView.prototype.setBus = function(bus) {
    this.bus = bus;
  };

  ControlBarView.prototype.getRenderData = function(c) {
    var campaign, gameDevHoc, leagueID, leagueType, levelID, ref, ref1, ref2;
    if (c == null) {
      c = {};
    }
    ControlBarView.__super__.getRenderData.call(this, c);
    c.worldName = this.worldName;
    c.ladderGame = this.level.isType('ladder', 'hero-ladder', 'course-ladder');
    if (this.level.get('replayable')) {
      c.levelDifficulty = (ref = (ref1 = this.session.get('state')) != null ? ref1.difficulty : void 0) != null ? ref : 0;
      if (this.observing) {
        c.levelDifficulty = Math.max(0, c.levelDifficulty - 1);
      }
      c.difficultyTitle = "" + ($.i18n.t('play.level_difficulty')) + c.levelDifficulty;
      this.lastDifficulty = c.levelDifficulty;
    }
    c.spectateGame = this.spectateGame;
    c.observing = this.observing;
    this.homeViewArgs = [
      {
        supermodel: this.hasReceivedMemoryWarning ? null : this.supermodel
      }
    ];
    gameDevHoc = storage.load('should-return-to-game-dev-hoc');
    if (gameDevHoc) {
      this.homeLink = "/play/game-dev-hoc";
      this.homeViewClass = 'views/play/CampaignView';
      this.homeViewArgs.push('game-dev-hoc');
    } else if (me.isSessionless()) {
      this.homeLink = "/teachers/courses";
      this.homeViewClass = "views/courses/TeacherCoursesView";
    } else if (this.level.isType('ladder', 'ladder-tutorial', 'hero-ladder', 'course-ladder')) {
      levelID = ((ref2 = this.level.get('slug')) != null ? ref2.replace(/\-tutorial$/, '') : void 0) || this.level.id;
      this.homeLink = "/play/ladder/" + levelID;
      this.homeViewClass = 'views/ladder/LadderView';
      this.homeViewArgs.push(levelID);
      if (leagueID = this.getQueryVariable('league') || this.getQueryVariable('course-instance')) {
        leagueType = this.level.isType('course-ladder') ? 'course' : 'clan';
        this.homeViewArgs.push(leagueType);
        this.homeViewArgs.push(leagueID);
        this.homeLink += "/" + leagueType + "/" + leagueID;
      }
    } else if (this.level.isType('course') || this.courseID) {
      this.homeLink = '/students';
      this.homeViewClass = 'views/courses/CoursesView';
      if (this.courseID) {
        this.homeLink += "/" + this.courseID;
        this.homeViewArgs.push(this.courseID);
        this.homeViewClass = 'views/courses/CourseDetailsView';
        if (this.courseInstanceID) {
          this.homeLink += "/" + this.courseInstanceID;
          this.homeViewArgs.push(this.courseInstanceID);
        }
      }
    } else if (this.level.isType('hero', 'hero-coop', 'game-dev', 'web-dev') || window.serverConfig.picoCTF) {
      this.homeLink = '/play';
      this.homeViewClass = 'views/play/CampaignView';
      campaign = this.level.get('campaign');
      this.homeLink += '/' + campaign;
      this.homeViewArgs.push(campaign);
    } else {
      this.homeLink = '/';
      this.homeViewClass = 'views/HomeView';
    }
    c.editorLink = "/editor/level/" + (this.level.get('slug') || this.level.id);
    c.homeLink = this.homeLink;
    return c;
  };

  ControlBarView.prototype.showGameMenuModal = function(e, tab) {
    var gameMenuModal;
    if (tab == null) {
      tab = null;
    }
    gameMenuModal = new GameMenuModal({
      level: this.level,
      session: this.session,
      supermodel: this.supermodel,
      showTab: tab
    });
    this.openModalView(gameMenuModal);
    return this.listenToOnce(gameMenuModal, 'change-hero', function() {
      var ref;
      if ((ref = this.setupManager) != null) {
        ref.destroy();
      }
      this.setupManager = new LevelSetupManager({
        supermodel: this.supermodel,
        level: this.level,
        levelID: this.levelID,
        parent: this,
        session: this.session,
        courseID: this.courseID,
        courseInstanceID: this.courseInstanceID
      });
      return this.setupManager.open();
    });
  };

  ControlBarView.prototype.onClickHome = function(e) {
    var category, ref;
    if (this.level.isType('course')) {
      category = me.isTeacher() ? 'Teachers' : 'Students';
      if ((ref = window.tracker) != null) {
        ref.trackEvent('Play Level Back To Levels', {
          category: category,
          levelSlug: this.levelSlug
        }, ['Mixpanel']);
      }
    }
    e.preventDefault();
    e.stopImmediatePropagation();
    return Backbone.Mediator.publish('router:navigate', {
      route: this.homeLink,
      viewClass: this.homeViewClass,
      viewArgs: this.homeViewArgs
    });
  };

  ControlBarView.prototype.onClickSignupButton = function(e) {
    var ref;
    return (ref = window.tracker) != null ? ref.trackEvent('Started Signup', {
      category: 'Play Level',
      label: 'Control Bar',
      level: this.levelID
    }) : void 0;
  };

  ControlBarView.prototype.onClickVersionSwitchButton = function(e) {
    var codeLanguage, otherVersionLink;
    if (this.destroyed) {
      return;
    }
    otherVersionLink = "/play/level/" + (this.level.get('slug')) + "?dev=true";
    if (!this.course) {
      otherVersionLink += '&course=560f1a9f22961295f9427742';
    }
    if (codeLanguage = $(e.target).data('code-language')) {
      otherVersionLink += "&codeLanguage=" + codeLanguage;
    }
    return document.location.href = otherVersionLink;
  };

  ControlBarView.prototype.onDisableControls = function(e) {
    return this.toggleControls(e, false);
  };

  ControlBarView.prototype.onEnableControls = function(e) {
    return this.toggleControls(e, true);
  };

  ControlBarView.prototype.toggleControls = function(e, enabled) {
    if (e.controls && !(indexOf.call(e.controls, 'level') >= 0)) {
      return;
    }
    if (enabled === this.controlsEnabled) {
      return;
    }
    this.controlsEnabled = enabled;
    return this.$el.toggleClass('controls-disabled', !enabled);
  };

  ControlBarView.prototype.onIPadMemoryWarning = function(e) {
    return this.hasReceivedMemoryWarning = true;
  };

  ControlBarView.prototype.onSessionDifficultyChanged = function() {
    var ref;
    if (((ref = this.session.get('state')) != null ? ref.difficulty : void 0) === this.lastDifficulty) {
      return;
    }
    return this.render();
  };

  ControlBarView.prototype.destroy = function() {
    var ref;
    if ((ref = this.setupManager) != null) {
      ref.destroy();
    }
    return ControlBarView.__super__.destroy.call(this);
  };

  return ControlBarView;

})(CocoView);
});

;require.register("views/play/level/DialogueAnimator", function(exports, require, module) {
var DialogueAnimator;

module.exports = DialogueAnimator = (function() {
  DialogueAnimator.prototype.jqueryElement = null;

  DialogueAnimator.prototype.childrenToAdd = null;

  DialogueAnimator.prototype.charsToAdd = null;

  DialogueAnimator.prototype.childAnimator = null;

  function DialogueAnimator(html, jqueryElement) {
    var d;
    this.jqueryElement = jqueryElement;
    d = $('<div></div>').html(html);
    this.childrenToAdd = _.map(d[0].childNodes, function(e) {
      return e;
    });
    this.t0 = new Date();
    this.charsAdded = 0;
    this.charsPerSecond = 25;
  }

  DialogueAnimator.prototype.tick = function() {
    if (!this.charsToAdd && !this.childAnimator) {
      this.addNextElement();
    }
    if (this.charsToAdd) {
      this.addSingleChar();
      return;
    }
    if (this.childAnimator) {
      this.childAnimator.tick();
      if (this.childAnimator.done()) {
        return this.childAnimator = null;
      }
    }
  };

  DialogueAnimator.prototype.addNextElement = function() {
    var newElem, nextElem, value;
    if (!this.childrenToAdd.length) {
      return;
    }
    nextElem = this.childrenToAdd[0];
    this.childrenToAdd = this.childrenToAdd.slice(1);
    if (nextElem.nodeName === '#text') {
      return this.charsToAdd = nextElem.nodeValue;
    } else {
      value = nextElem.innerHTML;
      newElem = $(nextElem).html('');
      this.jqueryElement.append(newElem);
      if (value) {
        if (this.childAnimator) {
          this.charsAdded += this.childAnimator.getCharsAdded();
        }
        return this.childAnimator = new DialogueAnimator(value, newElem);
      }
    }
  };

  DialogueAnimator.prototype.addSingleChar = function() {
    var elapsed, nAdded, nToAdd, nToHaveBeenAdded;
    elapsed = (new Date()) - this.t0;
    nAdded = this.getCharsAdded();
    nToHaveBeenAdded = Math.round(this.charsPerSecond * elapsed / 1000);
    nToAdd = Math.min(nToHaveBeenAdded - nAdded, this.charsToAdd.length);
    this.jqueryElement.html(this.jqueryElement.html() + this.charsToAdd.slice(0, nToAdd));
    this.charsToAdd = this.charsToAdd.slice(nToAdd);
    if (this.charsToAdd.length === 0) {
      this.charsToAdd = null;
    }
    return this.charsAdded += nToAdd;
  };

  DialogueAnimator.prototype.getCharsAdded = function() {
    var ref, ref1;
    return this.charsAdded + ((ref = (ref1 = this.childAnimator) != null ? ref1.charsAdded : void 0) != null ? ref : 0);
  };

  DialogueAnimator.prototype.done = function() {
    if (this.childrenToAdd.length > 0) {
      return false;
    }
    if (this.charsToAdd) {
      return false;
    }
    if (this.childAnimator) {
      return false;
    }
    return true;
  };

  return DialogueAnimator;

})();
});

;require.register("views/play/level/DuelStatsView", function(exports, require, module) {
var CocoView, DuelStatsView, ThangAvatarView, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/duel-stats-view');

ThangAvatarView = require('views/play/level/ThangAvatarView');

utils = require('core/utils');

module.exports = DuelStatsView = (function(superClass) {
  extend(DuelStatsView, superClass);

  DuelStatsView.prototype.id = 'duel-stats-view';

  DuelStatsView.prototype.template = template;

  DuelStatsView.prototype.subscriptions = {
    'surface:gold-changed': 'onGoldChanged',
    'god:new-world-created': 'onNewWorld',
    'god:streaming-world-updated': 'onNewWorld',
    'surface:frame-changed': 'onFrameChanged'
  };

  function DuelStatsView(options) {
    var ref, ref1, team;
    DuelStatsView.__super__.constructor.call(this, options);
    options.thangs = _.filter(options.thangs, 'inThangList');
    if (!options.otherSession) {
      options.otherSession = {
        get: function(prop) {
          return {
            creatorName: $.i18n.t('ladder.simple_ai'),
            team: options.session.get('team') === 'humans' ? 'ogres' : 'humans',
            heroConfig: options.session.get('heroConfig')
          }[prop];
        }
      };
    }
    this.showsGold = (ref = options.level.get('slug')) === 'wakka-maul';
    this.showsPower = (ref1 = options.level.get('slug')) !== 'wakka-maul' && ref1 !== 'dueling-grounds' && ref1 !== 'cavern-survival' && ref1 !== 'multiplayer-treasure-grove';
    this.teamGold = {};
    this.players = (function() {
      var i, len, ref2, results;
      ref2 = ['humans', 'ogres'];
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        team = ref2[i];
        results.push(this.formatPlayer(team));
      }
      return results;
    }).call(this);
  }

  DuelStatsView.prototype.formatPlayer = function(team) {
    var p, ref, session;
    p = {
      team: team
    };
    session = _.find([this.options.session, this.options.otherSession], function(s) {
      return s.get('team') === team;
    });
    p.name = session.get('creatorName');
    p.heroThangType = ((ref = session.get('heroConfig')) != null ? ref : {}).thangType || '529ffbf1cf1818f2be000001';
    p.heroID = team === 'ogres' ? 'Hero Placeholder 1' : 'Hero Placeholder';
    return p;
  };

  DuelStatsView.prototype.afterRender = function() {
    var i, len, player, ref;
    DuelStatsView.__super__.afterRender.call(this);
    ref = this.players;
    for (i = 0, len = ref.length; i < len; i++) {
      player = ref[i];
      this.buildAvatar(player.heroID, player.team);
    }
    return this.$el.css('display', 'flex');
  };

  DuelStatsView.prototype.buildAvatar = function(heroID, team) {
    var avatar, thang;
    if (this.avatars == null) {
      this.avatars = {};
    }
    if (this.avatars[team]) {
      return;
    }
    thang = _.find(this.options.thangs, {
      id: heroID
    });
    this.avatars[team] = avatar = new ThangAvatarView({
      thang: thang,
      includeName: false,
      supermodel: this.supermodel
    });
    this.$find(team, '.thang-avatar-placeholder').replaceWith(avatar.$el);
    return avatar.render();
  };

  DuelStatsView.prototype.onNewWorld = function(e) {
    return this.options.thangs = _.filter(e.world.thangs, 'inThangList');
  };

  DuelStatsView.prototype.onFrameChanged = function(e) {
    return this.update();
  };

  DuelStatsView.prototype.update = function() {
    var i, len, player, ref, thang;
    ref = this.players;
    for (i = 0, len = ref.length; i < len; i++) {
      player = ref[i];
      thang = _.find(this.options.thangs, {
        id: this.avatars[player.team].thang.id
      });
      this.updateHealth(thang);
    }
    if (this.showsPower) {
      return this.updatePower();
    }
  };

  DuelStatsView.prototype.updateHealth = function(thang) {
    var $health;
    $health = this.$find(thang.team, '.player-health');
    $health.find('.health-bar').css('width', Math.max(0, Math.min(100, 100 * thang.health / thang.maxHealth)) + '%');
    return utils.replaceText($health.find('.health-value'), Math.round(thang.health));
  };

  DuelStatsView.prototype.updatePower = function() {
    var i, j, len, len1, player, powers, ref, ref1, results, thang;
    if (this.costTable == null) {
      this.costTable = {
        soldier: 20,
        archer: 25,
        decoy: 25,
        'griffin-rider': 50,
        paladin: 80,
        artillery: 75,
        'arrow-tower': 100,
        palisade: 10,
        peasant: 50,
        thrower: 9,
        scout: 18
      };
    }
    powers = {
      humans: 0,
      ogres: 0
    };
    ref = this.options.thangs;
    for (i = 0, len = ref.length; i < len; i++) {
      thang = ref[i];
      if (thang.health > 0 && thang.exists) {
        if (powers[thang.team] != null) {
          powers[thang.team] += this.costTable[thang.type] || 0;
        }
      }
    }
    ref1 = this.players;
    results = [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      player = ref1[j];
      results.push(utils.replaceText(this.$find(player.team, '.power-value'), powers[player.team]));
    }
    return results;
  };

  DuelStatsView.prototype.$find = function(team, selector) {
    return this.$el.find((".player-container.team-" + team + " ") + selector);
  };

  DuelStatsView.prototype.destroy = function() {
    var avatar, ref, ref1, team;
    ref1 = (ref = this.avatars) != null ? ref : {};
    for (team in ref1) {
      avatar = ref1[team];
      avatar.destroy();
    }
    return DuelStatsView.__super__.destroy.call(this);
  };

  DuelStatsView.prototype.onGoldChanged = function(e) {
    if (!this.showsGold) {
      return;
    }
    if (this.teamGold[e.team] === e.gold) {
      return;
    }
    this.teamGold[e.team] = e.gold;
    return utils.replaceText(this.$find(e.team, '.gold-value'), '' + e.gold);
  };

  return DuelStatsView;

})(CocoView);
});

;require.register("views/play/level/HintsState", function(exports, require, module) {
var Article, HintsState,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Article = require('models/Article');

module.exports = HintsState = (function(superClass) {
  extend(HintsState, superClass);

  function HintsState() {
    return HintsState.__super__.constructor.apply(this, arguments);
  }

  HintsState.prototype.initialize = function(attributes, options) {
    this.level = options.level, this.session = options.session, this.supermodel = options.supermodel;
    this.listenTo(this.level, 'change:documentation', this.update);
    return this.update();
  };

  HintsState.prototype.getHint = function(index) {
    var ref;
    return (ref = this.get('hints')) != null ? ref[index] : void 0;
  };

  HintsState.prototype.update = function() {
    var articles, doc, docs, general, hints, ref, specific, total;
    articles = this.supermodel.getModels(Article);
    docs = (ref = this.level.get('documentation')) != null ? ref : {};
    general = _.filter((function() {
      var i, len, ref1, ref2, results;
      ref1 = docs.generalArticles || [];
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        doc = ref1[i];
        results.push((ref2 = _.find(articles, function(article) {
          return article.get('original') === doc.original;
        })) != null ? ref2.attributes : void 0);
      }
      return results;
    })());
    specific = docs.specificArticles || [];
    hints = (docs.hintsB || docs.hints || []).concat(specific).concat(general);
    hints = _.sortBy(hints, function(doc) {
      if (doc.name === 'Intro') {
        return -1;
      }
      return 0;
    });
    total = _.size(hints);
    return this.set({
      hints: hints,
      total: total
    });
  };

  return HintsState;

})(Backbone.Model);
});

;require.register("views/play/level/HintsView", function(exports, require, module) {
var CocoView, HintsView, State, ace, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

State = require('models/State');

ace = require('ace');

utils = require('core/utils');

module.exports = HintsView = (function(superClass) {
  extend(HintsView, superClass);

  function HintsView() {
    this.incrementHintViewTime = bind(this.incrementHintViewTime, this);
    return HintsView.__super__.constructor.apply(this, arguments);
  }

  HintsView.prototype.template = require('templates/play/level/hints-view');

  HintsView.prototype.className = 'hints-view';

  HintsView.prototype.hintUsedThresholdSeconds = 10;

  HintsView.prototype.events = {
    'click .next-btn': 'onClickNextButton',
    'click .previous-btn': 'onClickPreviousButton',
    'click .close-hint-btn': 'hideView'
  };

  HintsView.prototype.subscriptions = {
    'level:show-victory': 'hideView',
    'tome:manual-cast': 'hideView'
  };

  HintsView.prototype.initialize = function(options) {
    var debouncedRender;
    this.level = options.level, this.session = options.session, this.hintsState = options.hintsState;
    this.state = new State({
      hintIndex: 0,
      hintsViewTime: {},
      hintsUsed: {}
    });
    this.updateHint();
    debouncedRender = _.debounce(this.render);
    this.listenTo(this.state, 'change', debouncedRender);
    this.listenTo(this.hintsState, 'change', debouncedRender);
    this.listenTo(this.state, 'change:hintIndex', this.updateHint);
    return this.listenTo(this.hintsState, 'change:hidden', this.visibilityChanged);
  };

  HintsView.prototype.destroy = function() {
    clearInterval(this.timerIntervalID);
    return HintsView.__super__.destroy.call(this);
  };

  HintsView.prototype.afterRender = function() {
    var aceEditors, codeLanguage, i, len, oldEditor, ref, ref1, ref2;
    this.$el.toggleClass('hide', this.hintsState.get('hidden'));
    HintsView.__super__.afterRender.call(this);
    this.playSound('game-menu-open');
    this.$('a').attr('target', '_blank');
    codeLanguage = this.options.session.get('codeLanguage') || ((ref = me.get('aceConfig')) != null ? ref.language : void 0) || 'python';
    ref2 = (ref1 = this.aceEditors) != null ? ref1 : [];
    for (i = 0, len = ref2.length; i < len; i++) {
      oldEditor = ref2[i];
      oldEditor.destroy();
    }
    this.aceEditors = [];
    aceEditors = this.aceEditors;
    return this.$el.find('pre:has(code[class*="lang-"])').each(function() {
      var aceEditor;
      aceEditor = utils.initializeACE(this, codeLanguage);
      return aceEditors.push(aceEditor);
    });
  };

  HintsView.prototype.getProcessedHint = function() {
    var filtered, hint, language, markedUp, translated;
    language = this.session.get('codeLanguage');
    hint = this.state.get('hint');
    if (!hint) {
      return;
    }
    translated = utils.i18n(hint, 'body');
    filtered = utils.filterMarkdownCodeLanguages(translated, language);
    markedUp = marked(filtered);
    return markedUp;
  };

  HintsView.prototype.updateHint = function() {
    var hintsTitle, index;
    index = this.state.get('hintIndex');
    hintsTitle = $.i18n.t('play_level.hints_title').replace('{{number}}', index + 1);
    return this.state.set({
      hintsTitle: hintsTitle,
      hint: this.hintsState.getHint(index)
    });
  };

  HintsView.prototype.onClickNextButton = function() {
    var max, ref, ref1, ref2;
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Hints Next Clicked', {
        category: 'Students',
        levelSlug: this.level.get('slug'),
        hintCount: (ref1 = (ref2 = this.hintsState.get('hints')) != null ? ref2.length : void 0) != null ? ref1 : 0,
        hintCurrent: this.state.get('hintIndex')
      }, []);
    }
    max = this.hintsState.get('total') - 1;
    this.state.set('hintIndex', Math.min(this.state.get('hintIndex') + 1, max));
    this.playSound('menu-button-click');
    return this.updateHintTimer();
  };

  HintsView.prototype.onClickPreviousButton = function() {
    var ref, ref1, ref2;
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Hints Previous Clicked', {
        category: 'Students',
        levelSlug: this.level.get('slug'),
        hintCount: (ref1 = (ref2 = this.hintsState.get('hints')) != null ? ref2.length : void 0) != null ? ref1 : 0,
        hintCurrent: this.state.get('hintIndex')
      }, []);
    }
    this.state.set('hintIndex', Math.max(this.state.get('hintIndex') - 1, 0));
    this.playSound('menu-button-click');
    return this.updateHintTimer();
  };

  HintsView.prototype.hideView = function() {
    var ref;
    if ((ref = this.hintsState) != null) {
      ref.set('hidden', true);
    }
    return this.playSound('game-menu-close');
  };

  HintsView.prototype.visibilityChanged = function(e) {
    return this.updateHintTimer();
  };

  HintsView.prototype.updateHintTimer = function() {
    var ref;
    clearInterval(this.timerIntervalID);
    if (!(this.hintsState.get('hidden') || ((ref = this.state.get('hintsUsed')) != null ? ref[this.state.get('hintIndex')] : void 0))) {
      return this.timerIntervalID = setInterval(this.incrementHintViewTime, 1000);
    }
  };

  HintsView.prototype.incrementHintViewTime = function() {
    var hintIndex, hintsUsed, hintsViewTime, ref, ref1, ref2;
    hintIndex = this.state.get('hintIndex');
    hintsViewTime = this.state.get('hintsViewTime');
    if (hintsViewTime[hintIndex] == null) {
      hintsViewTime[hintIndex] = 0;
    }
    hintsViewTime[hintIndex]++;
    hintsUsed = this.state.get('hintsUsed');
    if (hintsViewTime[hintIndex] > this.hintUsedThresholdSeconds && !hintsUsed[hintIndex]) {
      if ((ref = window.tracker) != null) {
        ref.trackEvent('Hint Used', {
          category: 'Students',
          levelSlug: this.level.get('slug'),
          hintCount: (ref1 = (ref2 = this.hintsState.get('hints')) != null ? ref2.length : void 0) != null ? ref1 : 0,
          hintCurrent: hintIndex
        }, []);
      }
      hintsUsed[hintIndex] = true;
      this.state.set('hintsUsed', hintsUsed);
      clearInterval(this.timerIntervalID);
    }
    return this.state.set('hintsViewTime', hintsViewTime);
  };

  return HintsView;

})(CocoView);
});

;require.register("views/play/level/LevelChatView", function(exports, require, module) {
var CocoView, LevelBus, LevelChatView, me, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/chat');

me = require('core/auth').me;

LevelBus = require('lib/LevelBus');

module.exports = LevelChatView = (function(superClass) {
  extend(LevelChatView, superClass);

  LevelChatView.prototype.id = 'level-chat-view';

  LevelChatView.prototype.template = template;

  LevelChatView.prototype.open = false;

  LevelChatView.prototype.events = {
    'keypress textarea': 'onChatKeydown',
    'click i': 'onIconClick'
  };

  LevelChatView.prototype.subscriptions = {
    'bus:new-message': 'onNewMessage'
  };

  function LevelChatView(options) {
    this.clearOldMessages = bind(this.clearOldMessages, this);
    this.levelID = options.levelID;
    this.session = options.session;
    this.listenTo(this.session, 'change:multiplayer', this.updateMultiplayerVisibility);
    this.sessionID = options.sessionID;
    this.bus = LevelBus.get(this.levelID, this.sessionID);
    LevelChatView.__super__.constructor.call(this);
    this.regularlyClearOldMessages();
    this.playNoise = _.debounce(this.playNoise, 100);
  }

  LevelChatView.prototype.updateMultiplayerVisibility = function() {
    var e, error;
    if (this.$el == null) {
      return;
    }
    try {
      return this.$el.toggle(Boolean(this.session.get('multiplayer')));
    } catch (error) {
      e = error;
      return console.error("Couldn't toggle the style on the LevelChatView to " + (Boolean(this.session.get('multiplayer'))) + " because of an error:", e);
    }
  };

  LevelChatView.prototype.afterRender = function() {
    this.chatTables = $('table', this.$el);
    return this.updateMultiplayerVisibility();
  };

  LevelChatView.prototype.regularlyClearOldMessages = function() {
    return this.clearOldMessagesInterval = setInterval(this.clearOldMessages, 5000);
  };

  LevelChatView.prototype.clearOldMessages = function() {
    var added, j, len, results, row, rows;
    rows = $('.closed-chat-area tr');
    results = [];
    for (j = 0, len = rows.length; j < len; j++) {
      row = rows[j];
      row = $(row);
      added = row.data('added');
      if (new Date().getTime() - added > 60 * 1000) {
        results.push(row.fadeOut(1000, function() {
          return $(this).remove();
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  LevelChatView.prototype.onNewMessage = function(e) {
    if (!e.message.system) {
      this.$el.show();
    }
    this.addOne(e.message);
    this.trimClosedPanel();
    if (e.message.authorID !== me.id) {
      return this.playNoise();
    }
  };

  LevelChatView.prototype.playNoise = function() {
    return this.playSound('chat_received');
  };

  LevelChatView.prototype.messageObjectToJQuery = function(message) {
    var content, td, tr;
    td = $('<td></td>');
    content = message.content;
    content = _.string.escapeHTML(content);
    content = content.replace(/\n/g, '<br/>');
    content = content.replace(RegExp('  ', 'g'), '&nbsp; ');
    if (_.string.startsWith(content, '/me')) {
      content = message.authorName + content.slice(3);
    }
    if (message.system) {
      td.append($('<span class="system"></span>').html(content));
    } else if (_.string.startsWith(content, '/me')) {
      td.append($('<span class="action"></span>').html(content));
    } else {
      td.append($('<strong></strong>').text(message.authorName + ': '));
      td.append($('<span></span>').html(content));
    }
    tr = $('<tr></tr>');
    if (message.authorID === me.id) {
      tr.addClass('me');
    }
    return tr.append(td);
  };

  LevelChatView.prototype.addOne = function(message) {
    var distanceFromBottom, doScroll, height, openPanel, tr;
    if (message.system && message.authorID === me.id) {
      return;
    }
    if (this.open) {
      openPanel = $('.open-chat-area', this.$el);
      height = openPanel.outerHeight();
      distanceFromBottom = openPanel[0].scrollHeight - height - openPanel[0].scrollTop;
      doScroll = distanceFromBottom < 10;
    }
    tr = this.messageObjectToJQuery(message);
    tr.data('added', new Date().getTime());
    this.chatTables.append(tr);
    if (doScroll) {
      return this.scrollDown();
    }
  };

  LevelChatView.prototype.trimClosedPanel = function() {
    var closedPanel, i, j, len, limit, results, row, rows;
    closedPanel = $('.closed-chat-area', this.$el);
    limit = 5;
    rows = $('tr', closedPanel);
    results = [];
    for (i = j = 0, len = rows.length; j < len; i = ++j) {
      row = rows[i];
      if (rows.length - i <= limit) {
        break;
      }
      results.push(row.remove());
    }
    return results;
  };

  LevelChatView.prototype.onChatKeydown = function(e) {
    var message;
    if (key.isPressed('enter')) {
      message = _.string.strip($(e.target).val());
      if (!message) {
        return false;
      }
      this.bus.sendMessage(message);
      $(e.target).val('');
      return false;
    }
  };

  LevelChatView.prototype.onIconClick = function() {
    var closedPanel, openPanel, sel;
    this.open = !this.open;
    openPanel = $('.open-chat-area', this.$el).toggle(this.open);
    closedPanel = $('.closed-chat-area', this.$el).toggle(!this.open);
    if (this.open) {
      this.scrollDown();
    }
    if (window.getSelection != null) {
      sel = window.getSelection();
      if (typeof sel.empty === "function") {
        sel.empty();
      }
      return typeof sel.removeAllRanges === "function" ? sel.removeAllRanges() : void 0;
    } else {
      return document.selection.empty();
    }
  };

  LevelChatView.prototype.scrollDown = function() {
    var openPanel;
    openPanel = $('.open-chat-area', this.$el)[0];
    return openPanel.scrollTop = openPanel.scrollHeight || 1000000;
  };

  LevelChatView.prototype.destroy = function() {
    key.deleteScope('level');
    if (this.clearOldMessagesInterval) {
      clearInterval(this.clearOldMessagesInterval);
    }
    return LevelChatView.__super__.destroy.call(this);
  };

  return LevelChatView;

})(CocoView);
});

;require.register("views/play/level/LevelDialogueView", function(exports, require, module) {
var CocoView, DialogueAnimator, LevelDialogueView, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/level-dialogue-view');

DialogueAnimator = require('./DialogueAnimator');

module.exports = LevelDialogueView = (function(superClass) {
  extend(LevelDialogueView, superClass);

  LevelDialogueView.prototype.id = 'level-dialogue-view';

  LevelDialogueView.prototype.template = template;

  LevelDialogueView.prototype.subscriptions = {
    'sprite:speech-updated': 'onSpriteDialogue',
    'level:sprite-clear-dialogue': 'onSpriteClearDialogue',
    'level:shift-space-pressed': 'onShiftSpacePressed',
    'level:escape-pressed': 'onEscapePressed',
    'sprite:dialogue-sound-completed': 'onDialogueSoundCompleted'
  };

  LevelDialogueView.prototype.events = {
    'click': 'onClick',
    'click a': 'onClickLink'
  };

  function LevelDialogueView(options) {
    this.animateEnterButton = bind(this.animateEnterButton, this);
    this.addMoreMessage = bind(this.addMoreMessage, this);
    LevelDialogueView.__super__.constructor.call(this, options);
    this.level = options.level;
    this.sessionID = options.sessionID;
  }

  LevelDialogueView.prototype.onClick = function(e) {
    return Backbone.Mediator.publish('tome:focus-editor', {});
  };

  LevelDialogueView.prototype.onClickLink = function(e) {
    var PlayItemsModal, route;
    route = $(e.target).attr('href');
    if (route && /item-store/.test(route)) {
      PlayItemsModal = require('views/play/modal/PlayItemsModal');
      this.openModalView(new PlayItemsModal({
        supermodel: this.supermodal
      }));
      return e.stopPropagation();
    }
  };

  LevelDialogueView.prototype.onSpriteDialogue = function(e) {
    var ref;
    if (!e.message) {
      return;
    }
    this.$el.addClass('active speaking');
    $('body').addClass('dialogue-view-active');
    this.setMessage(e.message, e.mood, e.responses);
    return (ref = window.tracker) != null ? ref.trackEvent('Heard Sprite', {
      message: e.message,
      label: e.message,
      ls: this.sessionID
    }) : void 0;
  };

  LevelDialogueView.prototype.onDialogueSoundCompleted = function() {
    return this.$el.removeClass('speaking');
  };

  LevelDialogueView.prototype.onSpriteClearDialogue = function() {
    this.$el.removeClass('active speaking');
    return $('body').removeClass('dialogue-view-active');
  };

  LevelDialogueView.prototype.setMessage = function(message, mood, responses) {
    var button, group, j, len, response, s, sk;
    message = marked(message);
    message = message.replace(/&lt;i class=&#39;(.+?)&#39;&gt;&lt;\/i&gt;/, "<i class='$1'></i>");
    if (this.messageInterval) {
      clearInterval(this.messageInterval);
    }
    this.bubble = $('.dialogue-bubble', this.$el);
    if (this.lastMood) {
      this.bubble.removeClass(this.lastMood);
    }
    this.lastMood = mood;
    this.bubble.text('');
    group = $('<div class="enter secret"></div>');
    this.bubble.append(group);
    if (responses) {
      this.lastResponses = responses;
      for (j = 0, len = responses.length; j < len; j++) {
        response = responses[j];
        button = $('<button class="btn btn-small banner"></button>').text(response.text);
        if (response.buttonClass) {
          button.addClass(response.buttonClass);
        }
        group.append(button);
        response.button = $('button:last', group);
      }
    } else {
      s = $.i18n.t('common.continue', {
        defaultValue: 'Continue'
      });
      sk = $.i18n.t('play_level.skip_tutorial', {
        defaultValue: 'skip: esc'
      });
      if (!this.escapePressed && !this.isFullScreen()) {
        group.append('<span class="hud-hint">' + sk + '</span>');
      }
      group.append($('<button class="btn btn-small banner with-dot">' + s + ' <div class="dot"></div></button>'));
      this.lastResponses = null;
    }
    this.animator = new DialogueAnimator(message, this.bubble);
    return this.messageInterval = setInterval(this.addMoreMessage, 1000 / 30);
  };

  LevelDialogueView.prototype.isFullScreen = function() {
    return document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;
  };

  LevelDialogueView.prototype.addMoreMessage = function() {
    var buttons, channel, f, i, j, len, ref, response;
    if (this.animator.done()) {
      clearInterval(this.messageInterval);
      this.messageInterval = null;
      $('.enter', this.bubble).removeClass('secret').css('opacity', 0.0).delay(500).animate({
        opacity: 1.0
      }, 500, this.animateEnterButton);
      if (this.lastResponses) {
        buttons = $('.enter button');
        ref = this.lastResponses;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          response = ref[i];
          channel = response.channel.replace('level-set-playing', 'level:set-playing');
          f = (function(_this) {
            return function(r) {
              return function() {
                return setTimeout((function() {
                  return Backbone.Mediator.publish(channel, r.event || {});
                }), 10);
              };
            };
          })(this);
          $(buttons[i]).click(f(response));
        }
      } else {
        $('.enter', this.bubble).click(function() {
          return Backbone.Mediator.publish('script:end-current-script', {});
        });
      }
      return;
    }
    return this.animator.tick();
  };

  LevelDialogueView.prototype.onShiftSpacePressed = function(e) {
    var channel, r, ref;
    this.shiftSpacePressed = (this.shiftSpacePressed || 0) + 1;
    if (!((ref = this.lastResponses) != null ? ref.length : void 0)) {
      return;
    }
    r = this.lastResponses[this.lastResponses.length - 1];
    channel = r.channel.replace('level-set-playing', 'level:set-playing');
    return _.delay((function() {
      return Backbone.Mediator.publish(channel, r.event || {});
    }), 10);
  };

  LevelDialogueView.prototype.onEscapePressed = function(e) {
    return this.escapePressed = true;
  };

  LevelDialogueView.prototype.animateEnterButton = function() {
    var button, dot;
    if (!this.bubble) {
      return;
    }
    button = $('.enter', this.bubble);
    dot = $('.dot', button);
    return dot.animate({
      opacity: 0.2
    }, 300).animate({
      opacity: 1.9
    }, 600, this.animateEnterButton);
  };

  LevelDialogueView.prototype.destroy = function() {
    if (this.messageInterval) {
      clearInterval(this.messageInterval);
    }
    return LevelDialogueView.__super__.destroy.call(this);
  };

  return LevelDialogueView;

})(CocoView);
});

;require.register("views/play/level/LevelFlagsView", function(exports, require, module) {
var CocoView, LevelFlagsView, me, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/level-flags-view');

me = require('core/auth').me;

module.exports = LevelFlagsView = (function(superClass) {
  extend(LevelFlagsView, superClass);

  LevelFlagsView.prototype.id = 'level-flags-view';

  LevelFlagsView.prototype.template = template;

  LevelFlagsView.prototype.className = 'secret';

  LevelFlagsView.prototype.subscriptions = {
    'playback:real-time-playback-started': 'onRealTimePlaybackStarted',
    'playback:real-time-playback-ended': 'onRealTimePlaybackEnded',
    'surface:stage-mouse-down': 'onStageMouseDown',
    'god:new-world-created': 'onNewWorld',
    'god:streaming-world-updated': 'onNewWorld',
    'surface:remove-flag': 'onRemoveFlag'
  };

  LevelFlagsView.prototype.events = {
    'click .green-flag': function() {
      return this.onFlagSelected({
        color: 'green',
        source: 'button'
      });
    },
    'click .black-flag': function() {
      return this.onFlagSelected({
        color: 'black',
        source: 'button'
      });
    },
    'click .violet-flag': function() {
      return this.onFlagSelected({
        color: 'violet',
        source: 'button'
      });
    }
  };

  LevelFlagsView.prototype.shortcuts = {
    'g': function() {
      return this.onFlagSelected({
        color: 'green',
        source: 'shortcut'
      });
    },
    'b': function() {
      return this.onFlagSelected({
        color: 'black',
        source: 'shortcut'
      });
    },
    'v': function() {
      return this.onFlagSelected({
        color: 'violet',
        source: 'shortcut'
      });
    },
    'esc': function() {
      return this.onFlagSelected({
        color: null,
        source: 'shortcut'
      });
    },
    'delete, del, backspace': 'onDeletePressed'
  };

  function LevelFlagsView(options) {
    LevelFlagsView.__super__.constructor.call(this, options);
    this.levelID = options.levelID;
    this.world = options.world;
  }

  LevelFlagsView.prototype.onRealTimePlaybackStarted = function(e) {
    this.realTime = true;
    this.$el.show();
    this.flags = {};
    return this.flagHistory = [];
  };

  LevelFlagsView.prototype.onRealTimePlaybackEnded = function(e) {
    this.onFlagSelected({
      color: null
    });
    this.realTime = false;
    return this.$el.hide();
  };

  LevelFlagsView.prototype.onFlagSelected = function(e) {
    var color;
    if (!this.realTime) {
      return;
    }
    if (e.color) {
      this.playSound('menu-button-click');
    }
    color = e.color === this.flagColor ? null : e.color;
    this.flagColor = color;
    Backbone.Mediator.publish('level:flag-color-selected', {
      color: color
    });
    this.$el.find('.flag-button').removeClass('active');
    if (color) {
      return this.$el.find("." + color + "-flag").addClass('active');
    }
  };

  LevelFlagsView.prototype.onStageMouseDown = function(e) {
    var flag, now, pos, ref;
    if (!(this.flagColor && this.realTime)) {
      return;
    }
    this.playSound('menu-button-click');
    pos = {
      x: e.worldPos.x,
      y: e.worldPos.y
    };
    now = this.world.dt * this.world.frames.length;
    flag = {
      player: me.id,
      team: me.team,
      color: this.flagColor,
      pos: pos,
      time: now,
      active: true,
      source: 'click'
    };
    this.flags[this.flagColor] = flag;
    this.flagHistory.push(flag);
    if ((ref = this.realTimeFlags) != null) {
      ref.create(flag);
    }
    return Backbone.Mediator.publish('level:flag-updated', flag);
  };

  LevelFlagsView.prototype.onDeletePressed = function(e) {
    if (!this.realTime) {
      return;
    }
    return Backbone.Mediator.publish('surface:remove-selected-flag', {});
  };

  LevelFlagsView.prototype.onRemoveFlag = function(e) {
    var flag, now;
    delete this.flags[e.color];
    now = this.world.dt * this.world.frames.length;
    flag = {
      player: me.id,
      team: me.team,
      color: e.color,
      time: now,
      active: false,
      source: 'click'
    };
    this.flagHistory.push(flag);
    return Backbone.Mediator.publish('level:flag-updated', flag);
  };

  LevelFlagsView.prototype.onNewWorld = function(event) {
    if (event.world.name !== this.world.name) {
      return;
    }
    return this.world = this.options.world = event.world;
  };

  return LevelFlagsView;

})(CocoView);
});

;require.register("views/play/level/LevelGoalsView", function(exports, require, module) {
var CocoView, LevelGoalsView, me, stateIconMap, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/goals');

me = require('core/auth').me;

utils = require('core/utils');

stateIconMap = {
  success: 'glyphicon-ok',
  failure: 'glyphicon-remove'
};

module.exports = LevelGoalsView = (function(superClass) {
  extend(LevelGoalsView, superClass);

  LevelGoalsView.prototype.id = 'goals-view';

  LevelGoalsView.prototype.template = template;

  LevelGoalsView.prototype.className = 'secret expanded';

  LevelGoalsView.prototype.playbackEnded = false;

  LevelGoalsView.prototype.subscriptions = {
    'goal-manager:new-goal-states': 'onNewGoalStates',
    'tome:cast-spells': 'onTomeCast',
    'level:set-letterbox': 'onSetLetterbox',
    'level:set-playing': 'onSetPlaying',
    'surface:playback-restarted': 'onSurfacePlaybackRestarted',
    'surface:playback-ended': 'onSurfacePlaybackEnded'
  };

  LevelGoalsView.prototype.events = {
    'mouseenter': function() {
      this.mouseEntered = true;
      return this.updatePlacement();
    },
    'mouseleave': function() {
      this.mouseEntered = false;
      return this.updatePlacement();
    }
  };

  function LevelGoalsView(options) {
    this.playToggleSound = bind(this.playToggleSound, this);
    LevelGoalsView.__super__.constructor.call(this, options);
    this.level = options.level;
  }

  LevelGoalsView.prototype.onNewGoalStates = function(e) {
    var classToShow, completed, dead, firstRun, goal, goals, i, iconClass, len, li, list, ref, state, targeted, text;
    firstRun = this.previousGoalStatus == null;
    if (this.previousGoalStatus == null) {
      this.previousGoalStatus = {};
    }
    this.$el.find('.goal-status').addClass('secret');
    classToShow = null;
    if (e.overallStatus === 'success') {
      classToShow = 'success';
    }
    if (e.overallStatus === 'failure') {
      classToShow = 'failure';
    }
    if (e.timedOut) {
      if (classToShow == null) {
        classToShow = 'timed-out';
      }
    }
    if (classToShow == null) {
      classToShow = 'incomplete';
    }
    this.$el.find('.goal-status.' + classToShow).removeClass('secret');
    list = $('#primary-goals-list', this.$el);
    list.empty();
    goals = [];
    ref = e.goals;
    for (i = 0, len = ref.length; i < len; i++) {
      goal = ref[i];
      state = e.goalStates[goal.id];
      if (goal.optional && this.level.isType('course') && state.status !== 'success') {
        continue;
      }
      if (goal.hiddenGoal) {
        if (goal.optional && state.status !== 'success') {
          continue;
        }
        if (!goal.optional && state.status !== 'failure') {
          continue;
        }
      }
      if (goal.team && me.team !== goal.team) {
        continue;
      }
      text = utils.i18n(goal, 'name');
      if (state.killed) {
        dead = _.filter(_.values(state.killed)).length;
        targeted = _.values(state.killed).length;
        if (targeted > 1) {
          if (goal.isPositive) {
            completed = dead;
          } else {
            completed = targeted - dead;
          }
          text = text + (" (" + completed + "/" + targeted + ")");
        }
      }
      li = $('<li></li>').addClass("status-" + state.status).text(text);
      iconClass = stateIconMap[state.status];
      li.prepend($('<i></i>').addClass("glyphicon " + (iconClass || '')));
      list.append(li);
      goals.push(goal);
      if (!firstRun && state.status === 'success' && this.previousGoalStatus[goal.id] !== 'success') {
        this.soundToPlayWhenPlaybackEnded = 'goal-success';
      } else if (!firstRun && state.status !== 'success' && this.previousGoalStatus[goal.id] === 'success') {
        this.soundToPlayWhenPlaybackEnded = 'goal-incomplete-again';
      } else {
        this.soundToPlayWhenPlaybackEnded = null;
      }
      this.previousGoalStatus[goal.id] = state.status;
    }
    if (goals.length > 0 && this.$el.hasClass('secret')) {
      this.$el.removeClass('secret');
      this.lastSizeTweenTime = new Date();
    }
    return this.updatePlacement();
  };

  LevelGoalsView.prototype.onTomeCast = function(e) {
    if (e.preload) {
      return;
    }
    this.$el.find('.goal-status').addClass('secret');
    return this.$el.find('.goal-status.running').removeClass('secret');
  };

  LevelGoalsView.prototype.onSetPlaying = function(e) {
    if (!e.playing) {
      return;
    }
    this.mouseEntered = false;
    this.expanded = true;
    return this.updatePlacement();
  };

  LevelGoalsView.prototype.onSurfacePlaybackRestarted = function() {
    this.playbackEnded = false;
    this.$el.removeClass('brighter');
    this.lastSizeTweenTime = new Date();
    return this.updatePlacement();
  };

  LevelGoalsView.prototype.onSurfacePlaybackEnded = function() {
    if (this.level.isType('game-dev')) {
      return;
    }
    this.playbackEnded = true;
    this.updateHeight();
    this.$el.addClass('brighter');
    this.lastSizeTweenTime = new Date();
    this.updatePlacement();
    if (this.soundToPlayWhenPlaybackEnded) {
      return this.playSound(this.soundToPlayWhenPlaybackEnded);
    }
  };

  LevelGoalsView.prototype.updateHeight = function() {
    if (this.$el.hasClass('brighter') || this.$el.hasClass('secret')) {
      return;
    }
    if ((new Date() - this.lastSizeTweenTime) < 500) {
      return;
    }
    return this.normalHeight = this.$el.outerHeight();
  };

  LevelGoalsView.prototype.updatePlacement = function() {
    var expand, height, sound, top;
    expand = this.playbackEnded !== this.mouseEntered;
    if (expand === this.expanded) {
      return;
    }
    this.updateHeight();
    sound = expand ? 'goals-expand' : 'goals-collapse';
    if (expand) {
      top = -5;
    } else {
      height = this.normalHeight;
      if (!height || this.playbackEnded) {
        height = this.$el.outerHeight();
      }
      top = 41 - height;
    }
    this.$el.css('top', top);
    if (this.soundTimeout) {
      clearTimeout(this.soundTimeout);
      this.soundTimeout = null;
    } else if (this.expanded != null) {
      this.soundTimeout = _.delay(this.playToggleSound, 500, sound);
    }
    return this.expanded = expand;
  };

  LevelGoalsView.prototype.playToggleSound = function(sound) {
    if (this.destroyed) {
      return;
    }
    if (!this.options.level.isType('game-dev')) {
      this.playSound(sound);
    }
    return this.soundTimeout = null;
  };

  LevelGoalsView.prototype.onSetLetterbox = function(e) {
    this.$el.toggle(!e.on);
    return this.updatePlacement();
  };

  return LevelGoalsView;

})(CocoView);
});

;require.register("views/play/level/LevelGoldView", function(exports, require, module) {
var CocoView, LevelGoldView, teamTemplate, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/gold');

teamTemplate = require('templates/play/level/team_gold');

module.exports = LevelGoldView = (function(superClass) {
  extend(LevelGoldView, superClass);

  LevelGoldView.prototype.id = 'gold-view';

  LevelGoldView.prototype.template = template;

  LevelGoldView.prototype.subscriptions = {
    'surface:gold-changed': 'onGoldChanged',
    'level:set-letterbox': 'onSetLetterbox'
  };

  function LevelGoldView(options) {
    LevelGoldView.__super__.constructor.call(this, options);
    this.teamGold = {};
    this.teamGoldEarned = {};
    this.shownOnce = false;
  }

  LevelGoldView.prototype.onGoldChanged = function(e) {
    var goldEl, teamEl, text;
    if (this.teamGold[e.team] === e.gold && this.teamGoldEarned[e.team] === e.goldEarned) {
      return;
    }
    this.teamGold[e.team] = e.gold;
    this.teamGoldEarned[e.team] = e.goldEarned;
    goldEl = this.$el.find('.gold-amount.team-' + e.team);
    if (!goldEl.length) {
      teamEl = teamTemplate({
        team: e.team
      });
      this.$el[e.team === 'humans' ? 'prepend' : 'append'](teamEl);
      goldEl = this.$el.find('.gold-amount.team-' + e.team);
    }
    text = '' + e.gold;
    if (e.goldEarned && e.goldEarned > e.gold) {
      text += " (" + e.goldEarned + ")";
    }
    goldEl.text(text);
    this.updateTitle();
    this.$el.show();
    return this.shownOnce = true;
  };

  LevelGoldView.prototype.updateTitle = function() {
    var gold, ref, strings, team;
    strings = [];
    ref = this.teamGold;
    for (team in ref) {
      gold = ref[team];
      if (this.teamGoldEarned[team]) {
        strings.push("Team '" + team + "' has " + gold + " now of " + this.teamGoldEarned[team] + " gold earned.");
      } else {
        strings.push("Team '" + team + "' has " + gold + " gold.");
      }
    }
    return this.$el.attr('title', strings.join(' '));
  };

  LevelGoldView.prototype.onSetLetterbox = function(e) {
    if (this.shownOnce) {
      return this.$el.toggle(!e.on);
    }
  };

  return LevelGoldView;

})(CocoView);
});

;require.register("views/play/level/LevelHUDView", function(exports, require, module) {
var CocoView, LevelHUDView, prop_template, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CocoView = require('views/core/CocoView');

template = require('templates/play/level/hud');

prop_template = require('templates/play/level/hud_prop');

utils = require('core/utils');

module.exports = LevelHUDView = (function(superClass) {
  extend(LevelHUDView, superClass);

  function LevelHUDView() {
    return LevelHUDView.__super__.constructor.apply(this, arguments);
  }

  LevelHUDView.prototype.id = 'thang-hud';

  LevelHUDView.prototype.template = template;

  LevelHUDView.prototype.subscriptions = {
    'surface:frame-changed': 'onFrameChanged',
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'surface:sprite-selected': 'onSpriteSelected',
    'sprite:thang-began-talking': 'onThangBeganTalking',
    'sprite:thang-finished-talking': 'onThangFinishedTalking',
    'god:new-world-created': 'onNewWorld'
  };

  LevelHUDView.prototype.events = {
    'click': 'onClick'
  };

  LevelHUDView.prototype.afterRender = function() {
    LevelHUDView.__super__.afterRender.call(this);
    this.$el.addClass('no-selection');
    if (this.options.level.get('hidesHUD')) {
      this.hidesHUD = true;
      return this.$el.addClass('hide-hud-properties');
    }
  };

  LevelHUDView.prototype.onClick = function(e) {
    if (!$(e.target).parents('.thang-props').length) {
      return Backbone.Mediator.publish('tome:focus-editor', {});
    }
  };

  LevelHUDView.prototype.onFrameChanged = function(e) {
    this.timeProgress = e.progress;
    return this.update();
  };

  LevelHUDView.prototype.onDisableControls = function(e) {
    if (e.controls && !(indexOf.call(e.controls, 'hud') >= 0)) {
      return;
    }
    this.disabled = true;
    return this.$el.addClass('controls-disabled');
  };

  LevelHUDView.prototype.onEnableControls = function(e) {
    if (e.controls && !(indexOf.call(e.controls, 'hud') >= 0)) {
      return;
    }
    this.disabled = false;
    return this.$el.removeClass('controls-disabled');
  };

  LevelHUDView.prototype.onSpriteSelected = function(e) {
    var ref;
    if (this.disabled) {
      return;
    }
    return this.setThang(e.thang, (ref = e.sprite) != null ? ref.thangType : void 0);
  };

  LevelHUDView.prototype.onNewWorld = function(e) {
    var hadThang;
    hadThang = this.thang;
    if (this.thang) {
      this.thang = e.world.thangMap[this.thang.id];
    }
    if (hadThang && !this.thang) {
      return this.setThang(null, null);
    }
  };

  LevelHUDView.prototype.setThang = function(thang, thangType) {
    if ((thang == null) && (this.thang == null)) {
      return;
    }
    if ((thang != null) && (this.thang != null) && thang.id === this.thang.id) {
      return;
    }
    if ((thang != null) && this.hidesHUD && thang.id !== 'Hero Placeholder') {
      return;
    }
    if (!thang) {
      return;
    }
    this.thang = thang;
    this.thangType = thangType;
    if (!this.thang) {
      return;
    }
    this.createAvatar(thangType, this.thang);
    this.createProperties();
    return this.update();
  };

  LevelHUDView.prototype.createAvatar = function(thangType, thang, colorConfig) {
    var args, newCanvas, options, ref, ref1, stage, team, wrapper;
    if (!thangType.isFullyLoaded()) {
      args = arguments;
      if (!this.listeningToCreateAvatar) {
        this.listenToOnce(thangType, 'sync', function() {
          return this.createAvatar.apply(this, args);
        });
        this.listeningToCreateAvatar = true;
      }
      return;
    }
    this.listeningToCreateAvatar = false;
    options = thang.getLankOptions() || {};
    options.async = false;
    if (colorConfig) {
      options.colorConfig = colorConfig;
    }
    wrapper = this.$el.find('.thang-canvas-wrapper');
    team = (ref = this.thang) != null ? ref.team : void 0;
    wrapper.removeClass(function(i, css) {
      return (css.match(/\bteam-\S+/g) || []).join(' ');
    });
    wrapper.addClass("team-" + team);
    if (thangType.get('raster')) {
      wrapper.empty().append($('<img draggable="false"/>').addClass('avatar').attr('src', '/file/' + thangType.get('raster')));
    } else {
      if (!(stage = thangType.getPortraitStage(options, 100))) {
        return;
      }
      newCanvas = $(stage.canvas).addClass('thang-canvas avatar');
      wrapper.empty().append(newCanvas);
      stage.update();
      if ((ref1 = this.stage) != null) {
        ref1.stopTalking();
      }
      this.stage = stage;
    }
    return wrapper.append($('<img draggable="false" />').addClass('avatar-frame').attr('src', '/images/level/thang_avatar_frame.png'));
  };

  LevelHUDView.prototype.onThangBeganTalking = function(e) {
    var ref;
    if (!(this.stage && this.thang === e.thang)) {
      return;
    }
    return (ref = this.stage) != null ? ref.startTalking() : void 0;
  };

  LevelHUDView.prototype.onThangFinishedTalking = function(e) {
    var ref;
    if (!(this.stage && this.thang === e.thang)) {
      return;
    }
    return (ref = this.stage) != null ? ref.stopTalking() : void 0;
  };

  LevelHUDView.prototype.createProperties = function() {
    var i, j, len, name, pel, prop, propNames, props, ref, ref1, ref2;
    if (this.options.level.isType('game-dev')) {
      name = 'Game';
    } else if ((ref = this.thang.id) === 'Hero Placeholder' || ref === 'Hero Placeholder 1') {
      name = ((ref1 = this.thangType) != null ? ref1.getHeroShortName() : void 0) || 'Hero';
    } else {
      name = this.thang.hudName || (this.thang.type ? this.thang.id + " - " + this.thang.type : this.thang.id);
    }
    utils.replaceText(this.$el.find('.thang-name'), name);
    props = this.$el.find('.thang-props');
    props.find('.prop').remove();
    propNames = this.thang.hudProperties;
    ref2 = propNames != null ? propNames : [];
    for (i = j = 0, len = ref2.length; j < len; i = ++j) {
      prop = ref2[i];
      pel = this.createPropElement(prop);
      if (pel == null) {
        continue;
      }
      if (pel.find('.bar').is('*') && props.find('.bar').is('*')) {
        props.find('.bar-prop').last().after(pel);
      } else {
        props.append(pel);
      }
    }
    return null;
  };

  LevelHUDView.prototype.update = function() {
    var j, len, prop, ref, ref1, results;
    if (!this.thang) {
      return;
    }
    this.$el.find('.thang-props-column').toggleClass('nonexistent', !this.thang.exists);
    if (this.thang.exists) {
      ref1 = (ref = this.thang.hudProperties) != null ? ref : [];
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        prop = ref1[j];
        results.push(this.updatePropElement(prop, this.thang[prop]));
      }
      return results;
    }
  };

  LevelHUDView.prototype.createPropElement = function(prop) {
    var context;
    if (prop === 'maxHealth') {
      return null;
    }
    context = {
      prop: prop,
      hasIcon: prop === 'health' || prop === 'pos' || prop === 'target' || prop === 'collectedThangIDs' || prop === 'gold' || prop === 'bountyGold' || prop === 'value' || prop === 'visualRange' || prop === 'attackDamage' || prop === 'attackRange' || prop === 'maxSpeed' || prop === 'attackNearbyEnemyRange',
      hasBar: prop === 'health'
    };
    return $(prop_template(context));
  };

  LevelHUDView.prototype.updatePropElement = function(prop, val) {
    var cooldown, dps, labelText, max, pel, percent, regen, s;
    pel = this.$el.find('.thang-props *[name=' + prop + ']');
    if (prop === 'maxHealth') {
      return;
    }
    if (prop === 'health') {
      max = this.thang['max' + prop.charAt(0).toUpperCase() + prop.slice(1)];
      regen = this.thang[prop + 'ReplenishRate'];
      percent = Math.round(100 * val / max);
      pel.find('.bar').css('width', percent + '%');
      labelText = prop + ': ' + this.formatValue(prop, val) + ' / ' + this.formatValue(prop, max);
      if (regen) {
        labelText += ' (+' + this.formatValue(prop, regen) + '/s)';
      }
      utils.replaceText(pel.find('.bar-prop-value'), Math.round(val));
    } else {
      s = this.formatValue(prop, val);
      labelText = prop + ": " + s;
      if (prop === 'attackDamage') {
        cooldown = this.thang.actions.attack.cooldown;
        dps = this.thang.attackDamage / cooldown;
        labelText += " / " + (cooldown.toFixed(2)) + "s (DPS: " + (dps.toFixed(2)) + ")";
      }
      utils.replaceText(pel.find('.prop-value'), s);
    }
    pel.attr('title', labelText);
    return pel;
  };

  LevelHUDView.prototype.formatValue = function(prop, val) {
    if (prop === 'target' && !val) {
      val = this.thang['targetPos'];
      if (val != null ? val.isZero() : void 0) {
        val = null;
      }
    }
    if (prop === 'rotation') {
      return (val * 180 / Math.PI).toFixed(0) + '˚';
    }
    if (prop.search(/Range$/) !== -1) {
      return val + 'm';
    }
    if (typeof val === 'number') {
      if (Math.round(val) === val || prop === 'gold') {
        return val.toFixed(0);
      }
      if ((-10 < val && val < 10)) {
        return val.toFixed(2);
      }
      if ((-100 < val && val < 100)) {
        return val.toFixed(1);
      }
      return val.toFixed(0);
    }
    if (val && typeof val === 'object') {
      if (val.id) {
        return val.id;
      } else if (val.x && val.y) {
        return "x: " + (val.x.toFixed(0)) + " y: " + (val.y.toFixed(0));
      }
    } else if (val == null) {
      return 'No ' + prop;
    }
    return val;
  };

  LevelHUDView.prototype.destroy = function() {
    var ref;
    if ((ref = this.stage) != null) {
      ref.stopTalking();
    }
    return LevelHUDView.__super__.destroy.call(this);
  };

  return LevelHUDView;

})(CocoView);
});

;require.register("views/play/level/LevelLoadingView", function(exports, require, module) {
var CocoView, LevelLoadingView, SubscribeModal, ace, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/level_loading');

ace = require('ace');

utils = require('core/utils');

SubscribeModal = require('views/core/SubscribeModal');

module.exports = LevelLoadingView = (function(superClass) {
  extend(LevelLoadingView, superClass);

  function LevelLoadingView() {
    this.onWindowResize = bind(this.onWindowResize, this);
    this.onUnveilEnded = bind(this.onUnveilEnded, this);
    this.unveilIntro = bind(this.unveilIntro, this);
    this.onClickStartLevel = bind(this.onClickStartLevel, this);
    this.finishShowingReady = bind(this.finishShowingReady, this);
    return LevelLoadingView.__super__.constructor.apply(this, arguments);
  }

  LevelLoadingView.prototype.id = 'level-loading-view';

  LevelLoadingView.prototype.template = template;

  LevelLoadingView.prototype.events = {
    'mousedown .start-level-button': 'startUnveiling',
    'click .start-level-button': 'onClickStartLevel',
    'click .start-subscription-button': 'onClickStartSubscription'
  };

  LevelLoadingView.prototype.subscriptions = {
    'level:loaded': 'onLevelLoaded',
    'level:session-loaded': 'onSessionLoaded',
    'level:subscription-required': 'onSubscriptionRequired',
    'level:course-membership-required': 'onCourseMembershipRequired',
    'subscribe-modal:subscribed': 'onSubscribed'
  };

  LevelLoadingView.prototype.shortcuts = {
    'enter': 'onEnterPressed'
  };

  LevelLoadingView.prototype.afterRender = function() {
    var ref, ref1, tip, tips;
    LevelLoadingView.__super__.afterRender.call(this);
    if (!((ref = this.level) != null ? ref.get('loadingTip') : void 0)) {
      if (_.random(1, 10) < 9) {
        this.$el.find('.tip.rare').remove();
      }
      tips = this.$el.find('.tip').addClass('to-remove');
      tip = _.sample(tips);
      $(tip).removeClass('to-remove').addClass('secret');
      this.$el.find('.to-remove').remove();
    }
    if ((ref1 = this.options.level) != null ? ref1.get('goals') : void 0) {
      this.onLevelLoaded({
        level: this.options.level
      });
    }
    return this.configureACEEditors();
  };

  LevelLoadingView.prototype.configureACEEditors = function() {
    var aceEditors, codeLanguage, i, len, oldEditor, ref, ref1, ref2, ref3;
    codeLanguage = ((ref = this.session) != null ? ref.get('codeLanguage') : void 0) || ((ref1 = me.get('aceConfig')) != null ? ref1.language : void 0) || 'python';
    ref3 = (ref2 = this.aceEditors) != null ? ref2 : [];
    for (i = 0, len = ref3.length; i < len; i++) {
      oldEditor = ref3[i];
      oldEditor.destroy();
    }
    this.aceEditors = [];
    aceEditors = this.aceEditors;
    return this.$el.find('pre:has(code[class*="lang-"])').each(function() {
      var aceEditor;
      aceEditor = utils.initializeACE(this, codeLanguage);
      return aceEditors.push(aceEditor);
    });
  };

  LevelLoadingView.prototype.afterInsert = function() {
    return LevelLoadingView.__super__.afterInsert.call(this);
  };

  LevelLoadingView.prototype.onLevelLoaded = function(e) {
    if (this.level) {
      return;
    }
    this.level = e.level;
    this.prepareGoals(e);
    this.prepareTip();
    return this.prepareIntro();
  };

  LevelLoadingView.prototype.onSessionLoaded = function(e) {
    if (this.session) {
      return;
    }
    if (e.session.get('creator') === me.id) {
      return this.session = e.session;
    }
  };

  LevelLoadingView.prototype.prepareGoals = function(e) {
    var goal, goalContainer, goalCount, goalID, goalList, name, ref;
    goalContainer = this.$el.find('.level-loading-goals');
    goalList = goalContainer.find('ul');
    goalCount = 0;
    ref = this.level.get('goals');
    for (goalID in ref) {
      goal = ref[goalID];
      if (!((!goal.team || goal.team === (e.team || 'humans')) && !goal.hiddenGoal)) {
        continue;
      }
      if (goal.optional && this.level.isType('course')) {
        continue;
      }
      name = utils.i18n(goal, 'name');
      goalList.append($('<li>').text(name));
      ++goalCount;
    }
    if (goalCount) {
      goalContainer.removeClass('secret');
      if (goalCount === 1) {
        return goalContainer.find('.panel-heading').text($.i18n.t('play_level.goal'));
      }
    }
  };

  LevelLoadingView.prototype.prepareTip = function() {
    var loadingTip, tip;
    tip = this.$el.find('.tip');
    if (this.level.get('loadingTip')) {
      loadingTip = utils.i18n(this.level.attributes, 'loadingTip');
      loadingTip = marked(loadingTip);
      tip.html(loadingTip).removeAttr('data-i18n');
    }
    return tip.removeClass('secret');
  };

  LevelLoadingView.prototype.prepareIntro = function() {
    var ref, specific;
    this.docs = (ref = this.level.get('documentation')) != null ? ref : {};
    specific = this.docs.specificArticles || [];
    this.intro = _.find(specific, {
      name: 'Intro'
    });
    if (window.serverConfig.picoCTF) {
      return this.intro != null ? this.intro : this.intro = {
        body: ''
      };
    }
  };

  LevelLoadingView.prototype.showReady = function() {
    if (this.shownReady) {
      return;
    }
    this.shownReady = true;
    return _.delay(this.finishShowingReady, 100);
  };

  LevelLoadingView.prototype.finishShowingReady = function() {
    var autoUnveil, ref, showIntro;
    if (this.destroyed) {
      return;
    }
    showIntro = this.getQueryVariable('intro');
    autoUnveil = !showIntro && (this.options.autoUnveil || ((ref = this.session) != null ? ref.get('state').complete : void 0));
    if (autoUnveil) {
      this.startUnveiling();
      return this.unveil(true);
    } else {
      this.playSound('level_loaded', 0.75);
      this.$el.find('.progress').hide();
      this.$el.find('.start-level-button').show();
      return this.unveil(false);
    }
  };

  LevelLoadingView.prototype.startUnveiling = function(e) {
    this.playSound('menu-button-click');
    this.unveiling = true;
    Backbone.Mediator.publish('level:loading-view-unveiling', {});
    return _.delay(this.onClickStartLevel, 1000);
  };

  LevelLoadingView.prototype.onClickStartLevel = function(e) {
    if (this.destroyed) {
      return;
    }
    return this.unveil(true);
  };

  LevelLoadingView.prototype.onEnterPressed = function(e) {
    if (!(this.shownReady && !this.unveiled)) {
      return;
    }
    this.startUnveiling();
    return this.onClickStartLevel();
  };

  LevelLoadingView.prototype.unveil = function(full) {
    var duration;
    if (this.destroyed || this.unveiled) {
      return;
    }
    this.unveiled = full;
    this.$loadingDetails = this.$el.find('#loading-details');
    duration = parseFloat(this.$loadingDetails.css('transition-duration')) * 1000;
    if (!this.$el.hasClass('unveiled')) {
      this.$el.addClass('unveiled');
      this.unveilWings(duration);
    }
    if (full) {
      this.unveilLoadingFull();
      return _.delay(this.onUnveilEnded, duration);
    } else {
      return this.unveilLoadingPreview(duration);
    }
  };

  LevelLoadingView.prototype.unveilLoadingFull = function() {
    if (!this.unveiling) {
      Backbone.Mediator.publish('level:loading-view-unveiling', {});
      this.unveiling = true;
    }
    if (this.$el.hasClass('preview-screen')) {
      this.$loadingDetails.css('right', -this.$loadingDetails.outerWidth(true));
    } else {
      this.$loadingDetails.css('top', -this.$loadingDetails.outerHeight(true));
    }
    this.$el.removeClass('preview-screen');
    return $('#canvas-wrapper').removeClass('preview-overlay');
  };

  LevelLoadingView.prototype.unveilLoadingPreview = function(duration) {
    if (this.$el.hasClass('preview-screen')) {
      return;
    }
    $('#canvas-wrapper').addClass('preview-overlay');
    this.$el.addClass('preview-screen');
    this.$loadingDetails.addClass('preview');
    this.resize();
    this.onWindowResize = _.debounce(this.onWindowResize, 700);
    $(window).on('resize', this.onWindowResize);
    if (this.intro) {
      this.$el.find('.progress-or-start-container').addClass('intro-footer');
      this.$el.find('#tip-wrapper').remove();
      return _.delay(this.unveilIntro, duration);
    }
  };

  LevelLoadingView.prototype.resize = function() {
    var $intro, maxHeight, minHeight;
    maxHeight = $('#page-container').outerHeight(true);
    minHeight = $('#code-area').outerHeight(true);
    minHeight -= 20;
    this.$el.css({
      height: maxHeight
    });
    this.$loadingDetails.css({
      minHeight: minHeight,
      maxHeight: maxHeight
    });
    if (this.intro) {
      $intro = this.$el.find('.intro-doc');
      $intro.css({
        height: minHeight - $intro.offset().top - this.$el.find('.progress-or-start-container').outerHeight() - 30 - 20
      });
      return _.defer(function() {
        return $intro.find('.nano').nanoScroller({
          alwaysVisible: true
        });
      });
    }
  };

  LevelLoadingView.prototype.unveilWings = function(duration) {
    var ref;
    this.playSound('loading-view-unveil', 0.5);
    this.$el.find('.left-wing').css({
      left: '-100%',
      backgroundPosition: 'right -400px top 0'
    });
    this.$el.find('.right-wing').css({
      right: '-100%',
      backgroundPosition: 'left -400px top 0'
    });
    if (!((ref = this.level) != null ? ref.isType('web-dev') : void 0)) {
      return $('#level-footer-background').detach().appendTo('#page-container').slideDown(duration);
    }
  };

  LevelLoadingView.prototype.unveilIntro = function() {
    var html, language, problem, ref;
    if (this.destroyed || !this.intro || this.unveiled) {
      return;
    }
    if (window.serverConfig.picoCTF && (problem = this.level.picoCTFProblem)) {
      html = marked("### " + problem.name + "\n\n" + this.intro.body + "\n\n" + problem.description + "\n\n" + problem.category + " - " + problem.score + " points", {
        sanitize: false
      });
    } else {
      language = (ref = this.session) != null ? ref.get('codeLanguage') : void 0;
      html = marked(utils.filterMarkdownCodeLanguages(utils.i18n(this.intro, 'body'), language));
    }
    this.$el.find('.intro-doc').removeClass('hidden').find('.intro-doc-content').html(html);
    this.resize();
    return this.configureACEEditors();
  };

  LevelLoadingView.prototype.onUnveilEnded = function() {
    if (this.destroyed) {
      return;
    }
    return Backbone.Mediator.publish('level:loading-view-unveiled', {
      view: this
    });
  };

  LevelLoadingView.prototype.onWindowResize = function(e) {
    if (this.destroyed) {
      return;
    }
    this.$loadingDetails.css({
      transition: 'none'
    });
    return this.resize();
  };

  LevelLoadingView.prototype.onSubscriptionRequired = function(e) {
    this.$el.find('.level-loading-goals, .tip, .load-progress').hide();
    return this.$el.find('.subscription-required').show();
  };

  LevelLoadingView.prototype.onCourseMembershipRequired = function(e) {
    this.$el.find('.level-loading-goals, .tip, .load-progress').hide();
    return this.$el.find('.course-membership-required').show();
  };

  LevelLoadingView.prototype.onLoadError = function(resource) {
    this.$el.find('.level-loading-goals, .tip, .load-progress').hide();
    return this.$el.find('.could-not-load').show();
  };

  LevelLoadingView.prototype.onClickStartSubscription = function(e) {
    var levelSlug, ref, ref1, ref2;
    this.openModalView(new SubscribeModal());
    levelSlug = ((ref = this.level) != null ? ref.get('slug') : void 0) || ((ref1 = this.options.level) != null ? ref1.get('slug') : void 0);
    return (ref2 = window.tracker) != null ? ref2.trackEvent('Show subscription modal', {
      category: 'Subscription',
      label: 'level loading',
      level: levelSlug,
      levelID: levelSlug
    }) : void 0;
  };

  LevelLoadingView.prototype.onSubscribed = function() {
    return document.location.reload();
  };

  LevelLoadingView.prototype.destroy = function() {
    $(window).off('resize', this.onWindowResize);
    return LevelLoadingView.__super__.destroy.call(this);
  };

  return LevelLoadingView;

})(CocoView);
});

;require.register("views/play/level/LevelPlaybackView", function(exports, require, module) {
var CocoView, HoverPopup, LevelPlaybackView, me, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CocoView = require('views/core/CocoView');

template = require('templates/play/level/level-playback-view');

me = require('core/auth').me;

module.exports = LevelPlaybackView = (function(superClass) {
  extend(LevelPlaybackView, superClass);

  LevelPlaybackView.prototype.id = 'playback-view';

  LevelPlaybackView.prototype.template = template;

  LevelPlaybackView.prototype.subscriptions = {
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'level:set-playing': 'onSetPlaying',
    'level:toggle-playing': 'onTogglePlay',
    'level:scrub-forward': 'onScrubForward',
    'level:scrub-back': 'onScrubBack',
    'level:set-volume': 'onSetVolume',
    'surface:frame-changed': 'onFrameChanged',
    'god:new-world-created': 'onNewWorld',
    'god:streaming-world-updated': 'onNewWorld',
    'level:set-letterbox': 'onSetLetterbox',
    'tome:cast-spells': 'onTomeCast',
    'playback:real-time-playback-ended': 'onRealTimePlaybackEnded',
    'playback:stop-real-time-playback': 'onStopRealTimePlayback'
  };

  LevelPlaybackView.prototype.events = {
    'click #music-button': 'onToggleMusic',
    'click #zoom-in-button': function() {
      if (!this.shouldIgnore()) {
        return Backbone.Mediator.publish('camera:zoom-in', {});
      }
    },
    'click #zoom-out-button': function() {
      if (!this.shouldIgnore()) {
        return Backbone.Mediator.publish('camera:zoom-out', {});
      }
    },
    'click #volume-button': 'onToggleVolume',
    'click #play-button': 'onTogglePlay',
    'click': function() {
      if (!this.realTime) {
        return Backbone.Mediator.publish('tome:focus-editor', {});
      }
    },
    'mouseenter #timeProgress': 'onProgressEnter',
    'mouseleave #timeProgress': 'onProgressLeave',
    'mousemove #timeProgress': 'onProgressHover',
    'tapstart #timeProgress': 'onProgressTapStart',
    'tapend #timeProgress': 'onProgressTapEnd',
    'tapmove #timeProgress': 'onProgressTapMove'
  };

  LevelPlaybackView.prototype.shortcuts = {
    '⌘+p, p, ctrl+p': 'onTogglePlay',
    '⌘+[, ctrl+[': 'onScrubBack',
    '⌘+⇧+[, ctrl+⇧+[': 'onSingleScrubBack',
    '⌘+], ctrl+]': 'onScrubForward',
    '⌘+⇧+], ctrl+⇧+]': 'onSingleScrubForward'
  };

  function LevelPlaybackView() {
    this.onWindowResize = bind(this.onWindowResize, this);
    this.formatTime = bind(this.formatTime, this);
    LevelPlaybackView.__super__.constructor.apply(this, arguments);
    me.on('change:music', this.updateMusicButton, this);
  }

  LevelPlaybackView.prototype.afterRender = function() {
    var t, ua;
    LevelPlaybackView.__super__.afterRender.call(this);
    this.$progressScrubber = $('.scrubber .progress', this.$el);
    if (!this.options.level.isType('game-dev')) {
      this.hookUpScrubber();
    }
    this.updateMusicButton();
    $(window).on('resize', this.onWindowResize);
    ua = navigator.userAgent.toLowerCase();
    if (/safari/.test(ua) && !/chrome/.test(ua)) {
      this.$el.find('.toggle-fullscreen').hide();
    }
    if (this.timePopup == null) {
      this.timePopup = new HoverPopup;
    }
    t = $.i18n.t;
    this.second = t('units.second');
    this.seconds = t('units.seconds');
    this.minute = t('units.minute');
    this.minutes = t('units.minutes');
    this.goto = t('play_level.time_goto');
    this.current = t('play_level.time_current');
    this.total = t('play_level.time_total');
    if (this.options.level.get('hidesPlayButton')) {
      return this.$el.find('#play-button').css('visibility', 'hidden');
    }
  };

  LevelPlaybackView.prototype.updatePopupContent = function() {
    var ref;
    return (ref = this.timePopup) != null ? ref.updateContent("<h2>" + (this.timeToString(this.newTime)) + "</h2>" + (this.formatTime(this.current, this.currentTime)) + "<br/>" + (this.formatTime(this.total, this.totalTime))) : void 0;
  };

  LevelPlaybackView.prototype.pad2 = function(num) {
    if ((num == null) || num === 0) {
      return '00';
    } else {
      return (num < 10 ? '0' : '') + num;
    }
  };

  LevelPlaybackView.prototype.formatTime = function(text, time) {
    return text + "\t" + (this.timeToString(time));
  };

  LevelPlaybackView.prototype.timeToString = function(time, withUnits) {
    var mins, ret, secs;
    if (time == null) {
      time = 0;
    }
    if (withUnits == null) {
      withUnits = false;
    }
    mins = Math.floor(time / 60);
    secs = (time - mins * 60).toFixed(1);
    if (withUnits) {
      ret = '';
      if (mins > 0) {
        ret = mins + ' ' + (mins === 1 ? this.minute : this.minutes);
      }
      if (secs > 0 || mins === 0) {
        return ret = ret + ' ' + secs + ' ' + (secs === 1 ? this.second : this.seconds);
      }
    } else {
      return mins + ":" + (this.pad2(secs));
    }
  };

  LevelPlaybackView.prototype.updateMusicButton = function() {
    return this.$el.find('#music-button').toggleClass('music-on', me.get('music'));
  };

  LevelPlaybackView.prototype.onSetLetterbox = function(e) {
    if (this.realTime) {
      return;
    }
    this.togglePlaybackControls(!e.on);
    return this.disabled = e.on;
  };

  LevelPlaybackView.prototype.togglePlaybackControls = function(to) {
    var buttons;
    buttons = this.$el.find('#play-button, .scrubber-handle');
    return buttons.css('visibility', to ? 'visible' : 'hidden');
  };

  LevelPlaybackView.prototype.onTomeCast = function(e) {
    if (!e.realTime) {
      return;
    }
    this.realTime = true;
    this.togglePlaybackControls(false);
    Backbone.Mediator.publish('playback:real-time-playback-started', {});
    return this.playSound('real-time-playback-start');
  };

  LevelPlaybackView.prototype.onWindowResize = function() {
    var s;
    s = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return this.barWidth = $('.progress', this.$el).width();
  };

  LevelPlaybackView.prototype.onNewWorld = function(e) {
    return this.updateBarWidth(e.world.frames.length, e.world.maxTotalFrames, e.world.dt);
  };

  LevelPlaybackView.prototype.updateBarWidth = function(loadedFrameCount, maxTotalFrames, dt) {
    var pct;
    this.totalTime = (loadedFrameCount - 1) * dt;
    pct = parseInt(100 * loadedFrameCount / (maxTotalFrames - 1)) + '%';
    this.barWidth = $('.progress', this.$el).css('width', pct).show().width();
    $('.scrubber .progress', this.$el).slider('enable', true);
    this.newTime = 0;
    this.currentTime = 0;
    return this.lastLoadedFrameCount = loadedFrameCount;
  };

  LevelPlaybackView.prototype.onDisableControls = function(e) {
    var error, error1, ref;
    if (!e.controls || (indexOf.call(e.controls, 'playback') >= 0)) {
      this.disabled = true;
      $('button', this.$el).addClass('disabled');
      try {
        this.$progressScrubber.slider('disable', true);
      } catch (error1) {
        error = error1;
        console.warn('error disabling scrubber', error);
      }
      if ((ref = this.timePopup) != null) {
        ref.disable();
      }
      $('#volume-button', this.$el).removeClass('disabled');
      return this.$el.addClass('controls-disabled');
    }
  };

  LevelPlaybackView.prototype.onEnableControls = function(e) {
    var error, error1, ref;
    if (this.realTime) {
      return;
    }
    if (!e.controls || (indexOf.call(e.controls, 'playback') >= 0)) {
      this.disabled = false;
      $('button', this.$el).removeClass('disabled');
      try {
        this.$progressScrubber.slider('enable', true);
      } catch (error1) {
        error = error1;
        console.warn('error enabling scrubber', error);
      }
      if ((ref = this.timePopup) != null) {
        ref.enable();
      }
      return this.$el.removeClass('controls-disabled');
    }
  };

  LevelPlaybackView.prototype.onSetPlaying = function(e) {
    var bar, button, changed, ended, ref;
    this.playing = (ref = (e != null ? e : {}).playing) != null ? ref : true;
    button = this.$el.find('#play-button');
    ended = button.hasClass('ended');
    changed = button.hasClass('playing') !== this.playing;
    button.toggleClass('playing', this.playing && !ended).toggleClass('paused', !this.playing && !ended);
    if (!this.options.level.isType('game-dev')) {
      this.playSound((this.playing ? 'playback-play' : 'playback-pause'));
    }
    return;
    bar = this.$el.find('.scrubber .progress');
    return bar.toggleClass('progress-striped', this.playing && !ended).toggleClass('active', this.playing && !ended);
  };

  LevelPlaybackView.prototype.onSetVolume = function(e) {
    var button, c, classes, j, len;
    classes = ['vol-off', 'vol-down', 'vol-up'];
    button = $('#volume-button', this.$el);
    for (j = 0, len = classes.length; j < len; j++) {
      c = classes[j];
      button.removeClass(c);
    }
    if (e.volume <= 0.0) {
      button.addClass(classes[0]);
    }
    if (e.volume > 0.0 && e.volume < 1.0) {
      button.addClass(classes[1]);
    }
    if (e.volume >= 1.0) {
      return button.addClass(classes[2]);
    }
  };

  LevelPlaybackView.prototype.onScrub = function(e, options) {
    if (e != null) {
      if (typeof e.preventDefault === "function") {
        e.preventDefault();
      }
    }
    options.scrubDuration = 500;
    return Backbone.Mediator.publish('level:set-time', options);
  };

  LevelPlaybackView.prototype.onScrubForward = function(e) {
    return this.onScrub(e, {
      ratioOffset: 0.05
    });
  };

  LevelPlaybackView.prototype.onSingleScrubForward = function(e) {
    return this.onScrub(e, {
      frameOffset: 1
    });
  };

  LevelPlaybackView.prototype.onScrubBack = function(e) {
    return this.onScrub(e, {
      ratioOffset: -0.05
    });
  };

  LevelPlaybackView.prototype.onSingleScrubBack = function(e) {
    return this.onScrub(e, {
      frameOffset: -1
    });
  };

  LevelPlaybackView.prototype.onFrameChanged = function(e) {
    var ref;
    if (e.progress !== this.lastProgress) {
      this.currentTime = e.frame / e.world.frameRate;
      if ((ref = this.timePopup) != null ? ref.shown : void 0) {
        this.updatePopupContent();
      }
      this.updateProgress(e.progress, e.world);
      this.updatePlayButton(e.progress);
    }
    return this.lastProgress = e.progress;
  };

  LevelPlaybackView.prototype.onProgressEnter = function(e) {
    var ref;
    return (ref = this.timePopup) != null ? ref.enter(this.timePopup) : void 0;
  };

  LevelPlaybackView.prototype.onProgressLeave = function(e) {
    var ref;
    return (ref = this.timePopup) != null ? ref.leave(this.timePopup) : void 0;
  };

  LevelPlaybackView.prototype.onProgressHover = function(e, offsetX) {
    var ref, timeRatio;
    timeRatio = this.$progressScrubber.width() / this.totalTime;
    if (offsetX == null) {
      offsetX = e.clientX - $(e.target).closest('#timeProgress').offset().left;
    }
    offsetX = Math.max(0, offsetX);
    this.newTime = offsetX / timeRatio;
    this.updatePopupContent();
    if ((ref = this.timePopup) != null) {
      ref.onHover(e);
    }
    if (this.timePopup && Math.abs(this.currentTime - this.newTime) < 1 && !this.timePopup.shown) {
      return this.timePopup.show();
    }
  };

  LevelPlaybackView.prototype.onProgressTapStart = function(e, touchData) {
    var offsetX, ref, ref1, screenOffsetX;
    if (!application.isIPadApp) {
      return;
    }
    this.onProgressEnter(e);
    screenOffsetX = (ref = (ref1 = e.clientX) != null ? ref1 : touchData != null ? touchData.position.x : void 0) != null ? ref : 0;
    offsetX = screenOffsetX - $(e.target).closest('#timeProgress').offset().left;
    offsetX = Math.max(offsetX, 0);
    this.scrubTo(offsetX / this.$progressScrubber.width());
    if (this.$el.find('#play-button').hasClass('playing')) {
      return this.onTogglePlay();
    }
  };

  LevelPlaybackView.prototype.onProgressTapEnd = function(e, touchData) {
    if (!application.isIPadApp) {
      return;
    }
    return this.onProgressLeave(e);
  };

  LevelPlaybackView.prototype.onProgressTapMove = function(e, touchData) {
    var offsetX, ref, ref1, screenOffsetX;
    if (!application.isIPadApp) {
      return;
    }
    screenOffsetX = (ref = (ref1 = e.clientX) != null ? ref1 : touchData != null ? touchData.position.x : void 0) != null ? ref : 0;
    offsetX = screenOffsetX - $(e.target).closest('#timeProgress').offset().left;
    offsetX = Math.max(offsetX, 0);
    this.onProgressHover(e, offsetX);
    return this.scrubTo(offsetX / this.$progressScrubber.width());
  };

  LevelPlaybackView.prototype.updateProgress = function(progress, world) {
    var wasLoaded;
    if (world.frames.length !== this.lastLoadedFrameCount) {
      this.updateBarWidth(world.frames.length, world.maxTotalFrames, world.dt);
    }
    wasLoaded = this.worldCompletelyLoaded;
    this.worldCompletelyLoaded = world.frames.length === world.totalFrames;
    if (this.realTime && this.worldCompletelyLoaded && !wasLoaded) {
      Backbone.Mediator.publish('playback:real-time-playback-ended', {});
      Backbone.Mediator.publish('level:set-letterbox', {
        on: false
      });
    }
    return $('.scrubber .progress-bar', this.$el).css('width', (progress * 100) + "%");
  };

  LevelPlaybackView.prototype.updatePlayButton = function(progress) {
    var isEnded, playButton, wasEnded;
    playButton = this.$el.find('#play-button');
    wasEnded = playButton.hasClass('ended');
    if (this.worldCompletelyLoaded && progress >= 0.99 && this.lastProgress < 0.99) {
      playButton.removeClass('playing').removeClass('paused').addClass('ended');
      if (this.realTime) {
        Backbone.Mediator.publish('level:set-letterbox', {
          on: false
        });
      }
      if (this.realTime) {
        Backbone.Mediator.publish('playback:real-time-playback-ended', {});
      }
    }
    if (progress < 0.99 && this.lastProgress >= 0.99) {
      playButton.removeClass('ended');
      playButton.addClass(this.playing ? 'playing' : 'paused');
    }
    isEnded = playButton.hasClass('ended');
    if (wasEnded !== isEnded) {
      return Backbone.Mediator.publish('playback:ended-changed', {
        ended: isEnded
      });
    }
  };

  LevelPlaybackView.prototype.onRealTimePlaybackEnded = function(e) {
    if (!this.realTime) {
      return;
    }
    this.realTime = false;
    this.togglePlaybackControls(true);
    return this.playSound('real-time-playback-end');
  };

  LevelPlaybackView.prototype.onStopRealTimePlayback = function(e) {
    Backbone.Mediator.publish('level:set-letterbox', {
      on: false
    });
    return Backbone.Mediator.publish('playback:real-time-playback-ended', {});
  };

  LevelPlaybackView.prototype.hookUpScrubber = function() {
    this.sliderIncrements = 500;
    return this.$progressScrubber.slider({
      max: this.sliderIncrements,
      animate: 'slow',
      slide: (function(_this) {
        return function(event, ui) {
          var oldRatio, ratioChange, sound;
          if (_this.shouldIgnore()) {
            return;
          }
          ++_this.slideCount;
          oldRatio = _this.getScrubRatio();
          _this.scrubTo(ui.value / _this.sliderIncrements);
          if (ratioChange = _this.getScrubRatio() - oldRatio) {
            sound = "playback-scrub-slide-" + (ratioChange > 0 ? 'forward' : 'back') + "-" + (_this.slideCount % 3);
            if (!/back/.test(sound)) {
              return _this.playSound(sound, Math.min(1, Math.abs(ratioChange * 50)));
            }
          }
        };
      })(this),
      start: (function(_this) {
        return function(event, ui) {
          if (_this.shouldIgnore()) {
            return;
          }
          _this.slideCount = 0;
          _this.wasPlaying = _this.playing && !$('#play-button').hasClass('ended');
          Backbone.Mediator.publish('level:set-playing', {
            playing: false
          });
          return _this.playSound('playback-scrub-start', 0.5);
        };
      })(this),
      stop: (function(_this) {
        return function(event, ui) {
          if (_this.shouldIgnore()) {
            return;
          }
          _this.actualProgress = ui.value / _this.sliderIncrements;
          Backbone.Mediator.publish('playback:manually-scrubbed', {
            ratio: _this.actualProgress
          });
          Backbone.Mediator.publish('level:set-playing', {
            playing: _this.wasPlaying
          });
          if (_this.slideCount < 3) {
            _this.wasPlaying = false;
            Backbone.Mediator.publish('level:set-playing', {
              playing: false
            });
            return _this.$el.find('.scrubber-handle').effect('bounce', {
              times: 2
            });
          } else {
            return _this.playSound('playback-scrub-end', 0.5);
          }
        };
      })(this)
    });
  };

  LevelPlaybackView.prototype.getScrubRatio = function() {
    return this.$progressScrubber.find('.progress-bar').width() / this.$progressScrubber.width();
  };

  LevelPlaybackView.prototype.scrubTo = function(ratio, duration) {
    if (duration == null) {
      duration = 0;
    }
    if (this.shouldIgnore()) {
      return;
    }
    return Backbone.Mediator.publish('level:set-time', {
      ratio: ratio,
      scrubDuration: duration
    });
  };

  LevelPlaybackView.prototype.shouldIgnore = function() {
    return this.disabled || this.realTime;
  };

  LevelPlaybackView.prototype.onTogglePlay = function(e) {
    var button, willPlay;
    if (e != null) {
      if (typeof e.preventDefault === "function") {
        e.preventDefault();
      }
    }
    if (this.shouldIgnore()) {
      return;
    }
    button = $('#play-button');
    willPlay = button.hasClass('paused') || button.hasClass('ended');
    Backbone.Mediator.publish('level:set-playing', {
      playing: willPlay
    });
    return $(document.activeElement).blur();
  };

  LevelPlaybackView.prototype.onToggleVolume = function(e) {
    var button, classes, i, j, len, newI, oldClass, volumes;
    button = $(e.target).closest('#volume-button');
    classes = ['vol-off', 'vol-down', 'vol-up'];
    volumes = [0, 0.4, 1.0];
    for (i = j = 0, len = classes.length; j < len; i = ++j) {
      oldClass = classes[i];
      if (button.hasClass(oldClass)) {
        newI = (i + 1) % classes.length;
        break;
      } else if (i === classes.length - 1) {
        newI = 2;
      }
    }
    Backbone.Mediator.publish('level:set-volume', {
      volume: volumes[newI]
    });
    return $(document.activeElement).blur();
  };

  LevelPlaybackView.prototype.onToggleMusic = function(e) {
    if (e != null) {
      e.preventDefault();
    }
    me.set('music', !me.get('music', true));
    me.patch();
    return $(document.activeElement).blur();
  };

  LevelPlaybackView.prototype.destroy = function() {
    me.off('change:music', this.updateMusicButton, this);
    $(window).off('resize', this.onWindowResize);
    this.onWindowResize = null;
    return LevelPlaybackView.__super__.destroy.call(this);
  };

  return LevelPlaybackView;

})(CocoView);

HoverPopup = (function(superClass) {
  extend(HoverPopup, superClass);

  function HoverPopup() {
    this.enabled = true;
    this.shown = false;
    this.type = 'HoverPopup';
    this.options = {
      placement: 'top',
      container: 'body',
      animation: true,
      html: true,
      delay: {
        show: 400
      }
    };
    this.$element = $('#timeProgress');
    this.$tip = $('#timePopover');
    this.content = '';
  }

  HoverPopup.prototype.getContent = function() {
    return this.content;
  };

  HoverPopup.prototype.show = function() {
    if (!this.shown) {
      HoverPopup.__super__.show.call(this);
      return this.shown = true;
    }
  };

  HoverPopup.prototype.updateContent = function(content) {
    this.content = content;
    this.setContent();
    return this.$tip.addClass('fade top in');
  };

  HoverPopup.prototype.onHover = function(e1) {
    var actualHeight, actualWidth, calculatedOffset, pos;
    this.e = e1;
    pos = this.getPosition();
    actualWidth = this.$tip[0].offsetWidth;
    actualHeight = this.$tip[0].offsetHeight;
    calculatedOffset = {
      top: pos.top - actualHeight,
      left: pos.left + pos.width / 2 - actualWidth / 2
    };
    return this.applyPlacement(calculatedOffset, 'top');
  };

  HoverPopup.prototype.getPosition = function() {
    return {
      top: this.$element.offset().top,
      left: this.e != null ? this.e.pageX : this.$element.offset().left,
      height: 0,
      width: 0
    };
  };

  HoverPopup.prototype.hide = function() {
    HoverPopup.__super__.hide.call(this);
    return this.shown = false;
  };

  HoverPopup.prototype.disable = function() {
    HoverPopup.__super__.disable.call(this);
    return this.hide();
  };

  return HoverPopup;

})($.fn.popover.Constructor);
});

;require.register("views/play/level/PlayGameDevLevelView", function(exports, require, module) {
var Course, GameDevVictoryModal, GameUIState, GoalManager, God, Level, LevelLoader, LevelSession, PlayGameDevLevelView, RootView, ScriptManager, State, Surface, TEAM, ThangType, urls, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RootView = require('views/core/RootView');

GameUIState = require('models/GameUIState');

God = require('lib/God');

LevelLoader = require('lib/LevelLoader');

GoalManager = require('lib/world/GoalManager');

ScriptManager = require('lib/scripts/ScriptManager');

Surface = require('lib/surface/Surface');

ThangType = require('models/ThangType');

Level = require('models/Level');

LevelSession = require('models/LevelSession');

State = require('models/State');

utils = require('core/utils');

urls = require('core/urls');

Course = require('models/Course');

GameDevVictoryModal = require('./modal/GameDevVictoryModal');

require('game-libraries');

TEAM = 'humans';

module.exports = PlayGameDevLevelView = (function(superClass) {
  extend(PlayGameDevLevelView, superClass);

  function PlayGameDevLevelView() {
    return PlayGameDevLevelView.__super__.constructor.apply(this, arguments);
  }

  PlayGameDevLevelView.prototype.id = 'play-game-dev-level-view';

  PlayGameDevLevelView.prototype.template = require('templates/play/level/play-game-dev-level-view');

  PlayGameDevLevelView.prototype.subscriptions = {
    'god:new-world-created': 'onNewWorld'
  };

  PlayGameDevLevelView.prototype.events = {
    'click #edit-level-btn': 'onEditLevelButton',
    'click #play-btn': 'onClickPlayButton',
    'click #copy-url-btn': 'onClickCopyURLButton',
    'click #play-more-codecombat-btn': 'onClickPlayMoreCodeCombatButton'
  };

  PlayGameDevLevelView.prototype.initialize = function(options, levelID, sessionID) {
    this.options = options;
    this.levelID = levelID;
    this.sessionID = sessionID;
    this.state = new State({
      loading: true,
      progress: 0,
      creatorString: '',
      isOwner: false
    });
    this.supermodel.on('update-progress', (function(_this) {
      return function(progress) {
        return _this.state.set({
          progress: (progress * 100).toFixed(1) + '%'
        });
      };
    })(this));
    this.level = new Level();
    this.session = new LevelSession();
    this.gameUIState = new GameUIState();
    this.courseID = this.getQueryVariable('course');
    this.god = new God({
      gameUIState: this.gameUIState,
      indefiniteLength: true
    });
    this.levelLoader = new LevelLoader({
      supermodel: this.supermodel,
      levelID: this.levelID,
      sessionID: this.sessionID,
      observing: true,
      team: TEAM,
      courseID: this.courseID
    });
    this.supermodel.setMaxProgress(1);
    this.listenTo(this.state, 'change', _.debounce(this.renderAllButCanvas));
    return this.levelLoader.loadWorldNecessities().then((function(_this) {
      return function(levelLoader) {
        _this.level = levelLoader.level, _this.session = levelLoader.session, _this.world = levelLoader.world;
        _this.god.setLevel(_this.level.serialize({
          supermodel: _this.supermodel,
          session: _this.session
        }));
        _this.god.setWorldClassMap(_this.world.classMap);
        _this.goalManager = new GoalManager(_this.world, _this.level.get('goals'), _this.team);
        _this.god.setGoalManager(_this.goalManager);
        _this.god.angelsShare.firstWorld = false;
        me.team = TEAM;
        _this.session.set('team', TEAM);
        _this.scriptManager = new ScriptManager({
          scripts: _this.world.scripts || [],
          view: _this,
          session: _this.session,
          levelID: _this.level.get('slug')
        });
        _this.scriptManager.loadFromSession();
        _this.howToPlayText = utils.i18n(_this.level.attributes, 'studentPlayInstructions');
        if (_this.howToPlayText == null) {
          _this.howToPlayText = $.i18n.t('play_game_dev_level.default_student_instructions');
        }
        _this.howToPlayText = marked(_this.howToPlayText, {
          sanitize: true
        });
        _this.renderAllButCanvas();
        return _this.supermodel.finishLoading();
      };
    })(this)).then((function(_this) {
      return function(supermodel) {
        var bounds, course, goal, goalNames, normalSurface, ref, shareURL, webGLSurface, worldBounds;
        _this.levelLoader.destroy();
        _this.levelLoader = null;
        webGLSurface = _this.$('canvas#webgl-surface');
        normalSurface = _this.$('canvas#normal-surface');
        _this.surface = new Surface(_this.world, normalSurface, webGLSurface, {
          thangTypes: _this.supermodel.getModels(ThangType),
          levelType: _this.level.get('type', true),
          gameUIState: _this.gameUIState,
          resizeStrategy: 'wrapper-size'
        });
        _this.listenTo(_this.surface, 'resize', _this.onSurfaceResize);
        worldBounds = _this.world.getBounds();
        bounds = [
          {
            x: worldBounds.left,
            y: worldBounds.top
          }, {
            x: worldBounds.right,
            y: worldBounds.bottom
          }
        ];
        _this.surface.camera.setBounds(bounds);
        _this.surface.camera.zoomTo({
          x: 0,
          y: 0
        }, 0.1, 0);
        _this.surface.setWorld(_this.world);
        _this.scriptManager.initializeCamera();
        _this.renderSelectors('#info-col');
        _this.spells = _this.session.generateSpellsObject({
          level: _this.level
        });
        goalNames = (function() {
          var i, len, ref, results;
          ref = this.goalManager.goals;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            goal = ref[i];
            results.push(utils.i18n(goal, 'name'));
          }
          return results;
        }).call(_this);
        course = _this.courseID ? new Course({
          _id: _this.courseID
        }) : null;
        shareURL = urls.playDevLevel({
          level: _this.level,
          session: _this.session,
          course: course
        });
        _this.state.set({
          loading: false,
          goalNames: goalNames,
          shareURL: shareURL,
          creatorString: $.i18n.t('play_game_dev_level.created_by').replace('{{name}}', _this.session.get('creatorName')),
          isOwner: me.id === _this.session.get('creator')
        });
        _this.eventProperties = {
          category: 'Play GameDev Level',
          courseID: _this.courseID,
          sessionID: _this.session.id,
          levelID: _this.level.id,
          levelSlug: _this.level.get('slug')
        };
        if ((ref = window.tracker) != null) {
          ref.trackEvent('Play GameDev Level - Load', _this.eventProperties, ['Mixpanel']);
        }
        return _this.god.createWorld(_this.spells, false, false, true);
      };
    })(this))["catch"]((function(_this) {
      return function(e) {
        if (e.stack) {
          throw e;
        }
        return _this.state.set('errorMessage', e.message);
      };
    })(this));
  };

  PlayGameDevLevelView.prototype.onEditLevelButton = function() {
    var route, viewClass;
    viewClass = 'views/play/level/PlayLevelView';
    route = "/play/level/" + (this.level.get('slug'));
    return Backbone.Mediator.publish('router:navigate', {
      route: route,
      viewClass: viewClass,
      viewArgs: [{}, this.levelID]
    });
  };

  PlayGameDevLevelView.prototype.onClickPlayButton = function() {
    var action, ref;
    this.god.createWorld(this.spells, false, true);
    Backbone.Mediator.publish('playback:real-time-playback-started', {});
    Backbone.Mediator.publish('level:set-playing', {
      playing: true
    });
    action = this.state.get('playing') ? 'Play GameDev Level - Restart Level' : 'Play GameDev Level - Start Level';
    if ((ref = window.tracker) != null) {
      ref.trackEvent(action, this.eventProperties, ['Mixpanel']);
    }
    return this.state.set('playing', true);
  };

  PlayGameDevLevelView.prototype.onClickCopyURLButton = function() {
    var ref;
    this.$('#copy-url-input').val(this.state.get('shareURL')).select();
    this.tryCopy();
    return (ref = window.tracker) != null ? ref.trackEvent('Play GameDev Level - Copy URL', this.eventProperties, ['Mixpanel']) : void 0;
  };

  PlayGameDevLevelView.prototype.onClickPlayMoreCodeCombatButton = function() {
    var ref;
    return (ref = window.tracker) != null ? ref.trackEvent('Play GameDev Level - Click Play More CodeCombat', this.eventProperties, ['Mixpanel']) : void 0;
  };

  PlayGameDevLevelView.prototype.onSurfaceResize = function(arg) {
    var height;
    height = arg.height;
    return this.state.set('surfaceHeight', height);
  };

  PlayGameDevLevelView.prototype.renderAllButCanvas = function() {
    var height;
    this.renderSelectors('#info-col', '#share-row');
    height = this.state.get('surfaceHeight');
    if (height) {
      return this.$el.find('#info-col').css('height', this.state.get('surfaceHeight'));
    }
  };

  PlayGameDevLevelView.prototype.onNewWorld = function(e) {
    var modal;
    if (this.goalManager.checkOverallStatus() === 'success') {
      modal = new GameDevVictoryModal({
        shareURL: this.state.get('shareURL'),
        eventProperties: this.eventProperties
      });
      this.openModalView(modal);
      return modal.once('replay', this.onClickPlayButton, this);
    }
  };

  PlayGameDevLevelView.prototype.destroy = function() {
    var ref, ref1, ref2, ref3, ref4;
    if ((ref = this.levelLoader) != null) {
      ref.destroy();
    }
    if ((ref1 = this.surface) != null) {
      ref1.destroy();
    }
    if ((ref2 = this.god) != null) {
      ref2.destroy();
    }
    if ((ref3 = this.goalManager) != null) {
      ref3.destroy();
    }
    if ((ref4 = this.scriptManager) != null) {
      ref4.destroy();
    }
    delete window.world;
    return PlayGameDevLevelView.__super__.destroy.call(this);
  };

  return PlayGameDevLevelView;

})(RootView);
});

;require.register("views/play/level/PlayLevelView", function(exports, require, module) {
var Article, AudioPlayer, Camera, ChatView, ContactModal, ControlBarView, CourseVictoryModal, DuelStatsView, GameUIState, GoalManager, GoalsView, God, GoldView, HUDView, HeroVictoryModal, HintsState, HintsView, InfiniteLoopModal, Level, LevelBus, LevelComponent, LevelDialogueView, LevelFlagsView, LevelLoader, LevelLoadingView, LevelPlaybackView, LevelSession, LevelSetupManager, PROFILE_ME, PicoCTFVictoryModal, PlayLevelView, ProblemAlertView, RootView, ScriptManager, Simulator, SpellPaletteView, Surface, ThangType, TomeView, VictoryModal, WebSurfaceView, createAetherOptions, me, storage, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

RootView = require('views/core/RootView');

template = require('templates/play/play-level-view');

me = require('core/auth').me;

ThangType = require('models/ThangType');

utils = require('core/utils');

storage = require('core/storage');

createAetherOptions = require('lib/aether_utils').createAetherOptions;

Surface = require('lib/surface/Surface');

God = require('lib/God');

GoalManager = require('lib/world/GoalManager');

ScriptManager = require('lib/scripts/ScriptManager');

LevelBus = require('lib/LevelBus');

LevelLoader = require('lib/LevelLoader');

LevelSession = require('models/LevelSession');

Level = require('models/Level');

LevelComponent = require('models/LevelComponent');

Article = require('models/Article');

Camera = require('lib/surface/Camera');

AudioPlayer = require('lib/AudioPlayer');

Simulator = require('lib/simulator/Simulator');

GameUIState = require('models/GameUIState');

LevelLoadingView = require('./LevelLoadingView');

ProblemAlertView = require('./tome/ProblemAlertView');

TomeView = require('./tome/TomeView');

ChatView = require('./LevelChatView');

HUDView = require('./LevelHUDView');

LevelDialogueView = require('./LevelDialogueView');

ControlBarView = require('./ControlBarView');

LevelPlaybackView = require('./LevelPlaybackView');

GoalsView = require('./LevelGoalsView');

LevelFlagsView = require('./LevelFlagsView');

GoldView = require('./LevelGoldView');

DuelStatsView = require('./DuelStatsView');

VictoryModal = require('./modal/VictoryModal');

HeroVictoryModal = require('./modal/HeroVictoryModal');

CourseVictoryModal = require('./modal/CourseVictoryModal');

PicoCTFVictoryModal = require('./modal/PicoCTFVictoryModal');

InfiniteLoopModal = require('./modal/InfiniteLoopModal');

LevelSetupManager = require('lib/LevelSetupManager');

ContactModal = require('views/core/ContactModal');

HintsView = require('./HintsView');

HintsState = require('./HintsState');

WebSurfaceView = require('./WebSurfaceView');

SpellPaletteView = require('./tome/SpellPaletteView');

require('game-libraries');

PROFILE_ME = false;

module.exports = PlayLevelView = (function(superClass) {
  extend(PlayLevelView, superClass);

  PlayLevelView.prototype.id = 'level-view';

  PlayLevelView.prototype.template = template;

  PlayLevelView.prototype.cache = false;

  PlayLevelView.prototype.shortcutsEnabled = true;

  PlayLevelView.prototype.isEditorPreview = false;

  PlayLevelView.prototype.subscriptions = {
    'level:set-volume': 'onSetVolume',
    'level:show-victory': 'onShowVictory',
    'level:restart': 'onRestartLevel',
    'level:highlight-dom': 'onHighlightDOM',
    'level:end-highlight-dom': 'onEndHighlight',
    'level:focus-dom': 'onFocusDom',
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'god:world-load-progress-changed': 'onWorldLoadProgressChanged',
    'god:new-world-created': 'onNewWorld',
    'god:streaming-world-updated': 'onNewWorld',
    'god:infinite-loop': 'onInfiniteLoop',
    'level:reload-from-data': 'onLevelReloadFromData',
    'level:reload-thang-type': 'onLevelReloadThangType',
    'level:started': 'onLevelStarted',
    'level:loading-view-unveiling': 'onLoadingViewUnveiling',
    'level:loading-view-unveiled': 'onLoadingViewUnveiled',
    'level:loaded': 'onLevelLoaded',
    'level:session-loaded': 'onSessionLoaded',
    'playback:real-time-playback-started': 'onRealTimePlaybackStarted',
    'playback:real-time-playback-ended': 'onRealTimePlaybackEnded',
    'ipad:memory-warning': 'onIPadMemoryWarning',
    'store:item-purchased': 'onItemPurchased'
  };

  PlayLevelView.prototype.events = {
    'click #level-done-button': 'onDonePressed',
    'click #stop-real-time-playback-button': function() {
      return Backbone.Mediator.publish('playback:stop-real-time-playback', {});
    },
    'click #fullscreen-editor-background-screen': function(e) {
      return Backbone.Mediator.publish('tome:toggle-maximize', {});
    },
    'click .contact-link': 'onContactClicked'
  };

  PlayLevelView.prototype.shortcuts = {
    'ctrl+s': 'onCtrlS',
    'esc': 'onEscapePressed'
  };

  function PlayLevelView(options, levelID) {
    var f, ref, ref1;
    this.levelID = levelID;
    this.onSubmissionComplete = bind(this.onSubmissionComplete, this);
    this.onWindowResize = bind(this.onWindowResize, this);
    if (PROFILE_ME) {
      if (typeof console.profile === "function") {
        console.profile();
      }
    }
    PlayLevelView.__super__.constructor.call(this, options);
    this.courseID = options.courseID || this.getQueryVariable('course');
    this.courseInstanceID = options.courseInstanceID || this.getQueryVariable('course-instance');
    this.isEditorPreview = this.getQueryVariable('dev');
    this.sessionID = this.getQueryVariable('session');
    this.observing = this.getQueryVariable('observing');
    this.opponentSessionID = this.getQueryVariable('opponent');
    if (this.opponentSessionID == null) {
      this.opponentSessionID = this.options.opponent;
    }
    this.gameUIState = new GameUIState();
    $('flying-focus').remove();
    $(window).on('resize', this.onWindowResize);
    if ((ref = application.tracker) != null) {
      ref.enableInspectletJS(this.levelID);
    }
    if (this.isEditorPreview) {
      this.supermodel.shouldSaveBackups = function(model) {
        var ref1;
        return (ref1 = model.constructor.className) === 'Level' || ref1 === 'LevelComponent' || ref1 === 'LevelSystem' || ref1 === 'ThangType';
      };
      f = (function(_this) {
        return function() {
          if (!_this.levelLoader) {
            return _this.load();
          }
        };
      })(this);
      setTimeout(f, 100);
    } else {
      this.load();
      if (!this.observing) {
        if ((ref1 = application.tracker) != null) {
          ref1.trackEvent('Started Level Load', {
            category: 'Play Level',
            level: this.levelID,
            label: this.levelID
          });
        }
      }
    }
  }

  PlayLevelView.prototype.setLevel = function(level, givenSupermodel) {
    var ref, serializedLevel;
    this.level = level;
    this.supermodel.models = givenSupermodel.models;
    this.supermodel.collections = givenSupermodel.collections;
    this.supermodel.shouldSaveBackups = givenSupermodel.shouldSaveBackups;
    serializedLevel = this.level.serialize({
      supermodel: this.supermodel,
      session: this.session,
      otherSession: this.otherSession,
      headless: false,
      sessionless: false
    });
    if ((ref = this.god) != null) {
      ref.setLevel(serializedLevel);
    }
    if (this.world) {
      return this.world.loadFromLevel(serializedLevel, false);
    } else {
      return this.load();
    }
  };

  PlayLevelView.prototype.load = function() {
    var levelLoaderOptions;
    this.loadStartTime = new Date();
    levelLoaderOptions = {
      supermodel: this.supermodel,
      levelID: this.levelID,
      sessionID: this.sessionID,
      opponentSessionID: this.opponentSessionID,
      team: this.getQueryVariable('team'),
      observing: this.observing,
      courseID: this.courseID,
      courseInstanceID: this.courseInstanceID
    };
    if (me.isSessionless()) {
      levelLoaderOptions.fakeSessionConfig = {};
    }
    this.levelLoader = new LevelLoader(levelLoaderOptions);
    this.listenToOnce(this.levelLoader, 'world-necessities-loaded', this.onWorldNecessitiesLoaded);
    return this.listenTo(this.levelLoader, 'world-necessity-load-failed', this.onWorldNecessityLoadFailed);
  };

  PlayLevelView.prototype.onLevelLoaded = function(e) {
    if (this.destroyed) {
      return;
    }
    if ((me.isStudent() || me.isTeacher()) && !this.courseID && !e.level.isType('course-ladder')) {
      return _.defer(function() {
        return application.router.redirectHome();
      });
    }
    if (!e.level.isType('web-dev')) {
      this.god = new God({
        gameUIState: this.gameUIState,
        indefiniteLength: e.level.isType('game-dev')
      });
    }
    if (this.waitingToSetUpGod) {
      return this.setupGod();
    }
  };

  PlayLevelView.prototype.trackLevelLoadEnd = function() {
    var ref, ref1;
    if (this.isEditorPreview) {
      return;
    }
    this.loadEndTime = new Date();
    this.loadDuration = this.loadEndTime - this.loadStartTime;
    console.debug("Level unveiled after " + ((this.loadDuration / 1000).toFixed(2)) + "s");
    if (!this.observing) {
      if ((ref = application.tracker) != null) {
        ref.trackEvent('Finished Level Load', {
          category: 'Play Level',
          label: this.levelID,
          level: this.levelID,
          loadDuration: this.loadDuration
        });
      }
      return (ref1 = application.tracker) != null ? ref1.trackTiming(this.loadDuration, 'Level Load Time', this.levelID, this.levelID) : void 0;
    }
  };

  PlayLevelView.prototype.isCourseMode = function() {
    return this.courseID && this.courseInstanceID;
  };

  PlayLevelView.prototype.showAds = function() {
    return false;
    if (application.isProduction() && !me.isPremium() && !me.isTeacher() && !window.serverConfig.picoCTF && !this.isCourseMode()) {
      return me.getCampaignAdsGroup() === 'leaderboard-ads';
    }
    return false;
  };

  PlayLevelView.prototype.getRenderData = function() {
    var c;
    c = PlayLevelView.__super__.getRenderData.call(this);
    c.world = this.world;
    return c;
  };

  PlayLevelView.prototype.toggleSpellPalette = function() {
    this.$el.toggleClass('no-api');
    return $(window).trigger('resize');
  };

  PlayLevelView.prototype.afterRender = function() {
    var ref, ref1, ref2, ref3;
    PlayLevelView.__super__.afterRender.call(this);
    if (typeof window.onPlayLevelViewLoaded === "function") {
      window.onPlayLevelViewLoaded(this);
    }
    this.insertSubView(this.loadingView = new LevelLoadingView({
      autoUnveil: this.options.autoUnveil || this.observing,
      level: (ref = (ref1 = this.levelLoader) != null ? ref1.level : void 0) != null ? ref : this.level,
      session: (ref2 = (ref3 = this.levelLoader) != null ? ref3.session : void 0) != null ? ref2 : this.session
    }));
    this.$el.find('#level-done-button').hide();
    $('body').addClass('is-playing');
    if (this.isIPadApp()) {
      return $('body').bind('touchmove', false);
    }
  };

  PlayLevelView.prototype.afterInsert = function() {
    return PlayLevelView.__super__.afterInsert.call(this);
  };

  PlayLevelView.prototype.onWorldNecessitiesLoaded = function() {
    var ref, ref1, ref2, ref3, team;
    this.grabLevelLoaderData();
    team = (ref = (ref1 = (ref2 = this.getQueryVariable('team')) != null ? ref2 : this.session.get('team')) != null ? ref1 : (ref3 = this.world) != null ? ref3.teamForPlayer(0) : void 0) != null ? ref : 'humans';
    this.loadOpponentTeam(team);
    this.setupGod();
    this.setTeam(team);
    this.initGoalManager();
    this.insertSubviews();
    this.initVolume();
    this.register();
    this.controlBar.setBus(this.bus);
    return this.initScriptManager();
  };

  PlayLevelView.prototype.onWorldNecessityLoadFailed = function(resource) {
    return this.loadingView.onLoadError(resource);
  };

  PlayLevelView.prototype.grabLevelLoaderData = function() {
    var i, percent;
    this.session = this.levelLoader.session;
    this.level = this.levelLoader.level;
    if (this.level.isType('web-dev')) {
      this.$el.addClass('web-dev');
      return;
    }
    this.world = this.levelLoader.world;
    if (this.level.isType('game-dev')) {
      this.$el.addClass('game-dev');
      this.howToPlayText = utils.i18n(this.level.attributes, 'studentPlayInstructions');
      if (this.howToPlayText == null) {
        this.howToPlayText = $.i18n.t('play_game_dev_level.default_student_instructions');
      }
      this.howToPlayText = marked(this.howToPlayText, {
        sanitize: true
      });
      this.renderSelectors('#how-to-play-game-dev-panel');
    }
    if (this.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev')) {
      this.$el.addClass('hero');
    }
    if (_.any(this.world.thangs, function(t) {
      var ref;
      return (t.programmableProperties && indexOf.call(t.programmableProperties, 'findFlags') >= 0) || ((ref = t.inventory) != null ? ref.flag : void 0);
    }) || this.level.get('slug') === 'sky-span') {
      this.$el.addClass('flags');
    }
    this.otherSession = this.levelLoader.opponentSession;
    if (!this.level.isType('game-dev')) {
      this.worldLoadFakeResources = [];
      for (percent = i = 1; i <= 100; percent = ++i) {
        this.worldLoadFakeResources.push(this.supermodel.addSomethingResource(1));
      }
    }
    return this.renderSelectors('#stop-real-time-playback-button');
  };

  PlayLevelView.prototype.onWorldLoadProgressChanged = function(e) {
    var i, percent, ref, ref1, worldLoadPercent;
    if (e.god !== this.god) {
      return;
    }
    if (!this.worldLoadFakeResources) {
      return;
    }
    if (this.lastWorldLoadPercent == null) {
      this.lastWorldLoadPercent = 0;
    }
    worldLoadPercent = Math.floor(100 * e.progress);
    for (percent = i = ref = this.lastWorldLoadPercent + 1, ref1 = worldLoadPercent; i <= ref1; percent = i += 1) {
      this.worldLoadFakeResources[percent - 1].markLoaded();
    }
    this.lastWorldLoadPercent = worldLoadPercent;
    if (worldLoadPercent === 100) {
      return this.worldFakeLoadResources = null;
    }
  };

  PlayLevelView.prototype.loadOpponentTeam = function(myTeam) {
    var c, i, len, myCode, opponentCode, opponentSpells, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, spell, spellTeam, spells, thang;
    opponentSpells = [];
    ref3 = (ref = (ref1 = this.session.get('teamSpells')) != null ? ref1 : (ref2 = this.otherSession) != null ? ref2.get('teamSpells') : void 0) != null ? ref : {};
    for (spellTeam in ref3) {
      spells = ref3[spellTeam];
      if (spellTeam === myTeam || !myTeam) {
        continue;
      }
      opponentSpells = opponentSpells.concat(spells);
    }
    if ((!this.session.get('teamSpells')) && ((ref4 = this.otherSession) != null ? ref4.get('teamSpells') : void 0)) {
      this.session.set('teamSpells', this.otherSession.get('teamSpells'));
    }
    opponentCode = ((ref5 = this.otherSession) != null ? ref5.get('code') : void 0) || {};
    myCode = this.session.get('code') || {};
    for (i = 0, len = opponentSpells.length; i < len; i++) {
      spell = opponentSpells[i];
      ref6 = spell.split('/'), thang = ref6[0], spell = ref6[1];
      c = (ref7 = opponentCode[thang]) != null ? ref7[spell] : void 0;
      if (myCode[thang] == null) {
        myCode[thang] = {};
      }
      if (c) {
        myCode[thang][spell] = c;
      } else {
        delete myCode[thang][spell];
      }
    }
    return this.session.set('code', myCode);
  };

  PlayLevelView.prototype.setupGod = function() {
    if (this.level.isType('web-dev')) {
      return;
    }
    if (!this.god) {
      return this.waitingToSetUpGod = true;
    }
    this.waitingToSetUpGod = void 0;
    this.god.setLevel(this.level.serialize({
      supermodel: this.supermodel,
      session: this.session,
      otherSession: this.otherSession,
      headless: false,
      sessionless: false
    }));
    this.god.setLevelSessionIDs(this.otherSession ? [this.session.id, this.otherSession.id] : [this.session.id]);
    return this.god.setWorldClassMap(this.world.classMap);
  };

  PlayLevelView.prototype.setTeam = function(team) {
    if (!_.isString(team)) {
      team = team != null ? team.team : void 0;
    }
    if (team == null) {
      team = 'humans';
    }
    me.team = team;
    this.session.set('team', team);
    Backbone.Mediator.publish('level:team-set', {
      team: team
    });
    return this.team = team;
  };

  PlayLevelView.prototype.initGoalManager = function() {
    var ref;
    this.goalManager = new GoalManager(this.world, this.level.get('goals'), this.team);
    return (ref = this.god) != null ? ref.setGoalManager(this.goalManager) : void 0;
  };

  PlayLevelView.prototype.updateGoals = function(goals) {
    this.level.set('goals', goals);
    this.goalManager.destroy();
    return this.initGoalManager();
  };

  PlayLevelView.prototype.updateSpellPalette = function(thang, spell) {
    var ref, ref1, useHero;
    if (!(thang && ((ref = this.spellPaletteView) != null ? ref.thang : void 0) !== thang && (thang.programmableProperties || thang.apiProperties || thang.programmableHTMLProperties))) {
      return;
    }
    useHero = /hero/.test(spell.getSource()) || !/(self[\.\:]|this\.|\@)/.test(spell.getSource());
    return this.spellPaletteView = this.insertSubView(new SpellPaletteView({
      thang: thang,
      supermodel: this.supermodel,
      programmable: spell != null ? spell.canRead() : void 0,
      language: (ref1 = spell != null ? spell.language : void 0) != null ? ref1 : this.session.get('codeLanguage'),
      session: this.session,
      level: this.level,
      courseID: this.courseID,
      courseInstanceID: this.courseInstanceID,
      useHero: useHero
    }));
  };

  PlayLevelView.prototype.insertSubviews = function() {
    var ref, ref1, ref2;
    this.hintsState = new HintsState({
      hidden: true
    }, {
      session: this.session,
      level: this.level,
      supermodel: this.supermodel
    });
    this.insertSubView(this.tome = new TomeView({
      levelID: this.levelID,
      session: this.session,
      otherSession: this.otherSession,
      playLevelView: this,
      thangs: (ref = (ref1 = this.world) != null ? ref1.thangs : void 0) != null ? ref : [],
      supermodel: this.supermodel,
      level: this.level,
      observing: this.observing,
      courseID: this.courseID,
      courseInstanceID: this.courseInstanceID,
      god: this.god,
      hintsState: this.hintsState
    }));
    if (!this.level.isType('web-dev')) {
      this.insertSubView(new LevelPlaybackView({
        session: this.session,
        level: this.level
      }));
    }
    this.insertSubView(new GoalsView({
      level: this.level
    }));
    if (this.$el.hasClass('flags')) {
      this.insertSubView(new LevelFlagsView({
        levelID: this.levelID,
        world: this.world
      }));
    }
    if (!this.level.isType('web-dev')) {
      if ((ref2 = this.level.get('slug')) !== 'wakka-maul') {
        this.insertSubView(new GoldView({}));
      }
    }
    if (!this.level.isType('web-dev')) {
      this.insertSubView(new HUDView({
        level: this.level
      }));
    }
    this.insertSubView(new LevelDialogueView({
      level: this.level,
      sessionID: this.session.id
    }));
    this.insertSubView(new ChatView({
      levelID: this.levelID,
      sessionID: this.session.id,
      session: this.session
    }));
    this.insertSubView(new ProblemAlertView({
      session: this.session,
      level: this.level,
      supermodel: this.supermodel
    }));
    if (this.level.isType('hero-ladder', 'course-ladder')) {
      this.insertSubView(new DuelStatsView({
        level: this.level,
        session: this.session,
        otherSession: this.otherSession,
        supermodel: this.supermodel,
        thangs: this.world.thangs
      }));
    }
    this.insertSubView(this.controlBar = new ControlBarView({
      worldName: utils.i18n(this.level.attributes, 'name'),
      session: this.session,
      level: this.level,
      supermodel: this.supermodel,
      courseID: this.courseID,
      courseInstanceID: this.courseInstanceID
    }));
    this.insertSubView(this.hintsView = new HintsView({
      session: this.session,
      level: this.level,
      hintsState: this.hintsState
    }), this.$('.hints-view'));
    if (this.level.isType('web-dev')) {
      return this.insertSubView(this.webSurface = new WebSurfaceView({
        level: this.level,
        goalManager: this.goalManager
      }));
    }
  };

  PlayLevelView.prototype.initVolume = function() {
    var volume;
    volume = me.get('volume');
    if (volume == null) {
      volume = 1.0;
    }
    return Backbone.Mediator.publish('level:set-volume', {
      volume: volume
    });
  };

  PlayLevelView.prototype.initScriptManager = function() {
    if (this.level.isType('web-dev')) {
      return;
    }
    this.scriptManager = new ScriptManager({
      scripts: this.world.scripts || [],
      view: this,
      session: this.session,
      levelID: this.level.get('slug')
    });
    return this.scriptManager.loadFromSession();
  };

  PlayLevelView.prototype.register = function() {
    this.bus = LevelBus.get(this.levelID, this.session.id);
    this.bus.setSession(this.session);
    return this.bus.setSpells(this.tome.spells);
  };

  PlayLevelView.prototype.onSessionLoaded = function(e) {
    var goliath, lightseeker, raider, ref, ref1, ref2, ref3, ref4, sorcerer, wizard;
    if (this.session) {
      return;
    }
    Backbone.Mediator.publish("ipad:language-chosen", {
      language: (ref = e.session.get('codeLanguage')) != null ? ref : "python"
    });
    if (e.level.get('slug') === 'zero-sum') {
      sorcerer = '52fd1524c7e6cf99160e7bc9';
      if (e.session.get('creator') === '532dbc73a622924444b68ed9') {
        sorcerer = '53e126a4e06b897606d38bef';
      }
      return e.session.set('heroConfig', {
        "thangType": sorcerer,
        "inventory": {
          "misc-0": "53e2396a53457600003e3f0f",
          "programming-book": "546e266e9df4a17d0d449be5",
          "minion": "54eb5dbc49fa2d5c905ddf56",
          "feet": "53e214f153457600003e3eab",
          "right-hand": "54eab7f52b7506e891ca7202",
          "left-hand": "5463758f3839c6e02811d30f",
          "wrists": "54693797a2b1f53ce79443e9",
          "gloves": "5469425ca2b1f53ce7944421",
          "torso": "546d4a549df4a17d0d449a97",
          "neck": "54693274a2b1f53ce79443c9",
          "eyes": "546941fda2b1f53ce794441d",
          "head": "546d4ca19df4a17d0d449abf"
        }
      });
    } else if (e.level.get('slug') === 'the-gauntlet-kr') {
      lightseeker = '583d2cca6ffa3e65d170f29f';
      return e.session.set('heroConfig', {
        "thangType": lightseeker,
        "inventory": {
          "feet": "53e237bf53457600003e3f05",
          "head": "546d38269df4a17d0d4499ff",
          "eyes": "53e238df53457600003e3f0b",
          "torso": "53e22eac53457600003e3efc",
          "right-hand": "53e218d853457600003e3ebe",
          "programming-book": "53e4108204c00d4607a89f78"
        }
      });
    } else if (e.level.get('slug') === 'woodland-cleaver-kr') {
      lightseeker = '583d2cca6ffa3e65d170f29f';
      return e.session.set('heroConfig', {
        "thangType": lightseeker,
        "inventory": {
          "eyes": "53e238df53457600003e3f0b",
          "head": "546d38269df4a17d0d4499ff",
          "torso": "545d3f0b2d03e700001b5a5d",
          "right-hand": "544d7d1f8494308424f564a3",
          "wrists": "53e2396a53457600003e3f0f",
          "programming-book": "546e25d99df4a17d0d449be1",
          "left-hand": "544c310ae0017993fce214bf"
        }
      });
    } else if (e.level.get('slug') === 'crossroads-kr') {
      lightseeker = '583d2cca6ffa3e65d170f29f';
      return e.session.set('heroConfig', {
        "thangType": lightseeker,
        "inventory": {
          "wrists": "53e2396a53457600003e3f0f",
          "eyes": "53e2167653457600003e3eb3",
          "feet": "546d4d589df4a17d0d449ac9",
          "left-hand": "544d7bb88494308424f56493",
          "right-hand": "54694ba3a2b1f53ce794444d",
          "waist": "5437002a7beba4a82024a97d",
          "programming-book": "546e25d99df4a17d0d449be1",
          "gloves": "5469425ca2b1f53ce7944421",
          "head": "546d390b9df4a17d0d449a0b",
          "torso": "546aaf1b3777d6186329285e",
          "neck": "54693140a2b1f53ce79443bc"
        }
      });
    } else if ((ref1 = e.level.get('slug')) === 'ace-of-coders' || ref1 === 'elemental-wars') {
      goliath = '55e1a6e876cb0948c96af9f8';
      return e.session.set('heroConfig', {
        "thangType": goliath,
        "inventory": {
          "eyes": "53eb99f41a100989a40ce46e",
          "neck": "54693274a2b1f53ce79443c9",
          "wrists": "54693797a2b1f53ce79443e9",
          "feet": "546d4d8e9df4a17d0d449acd",
          "minion": "54eb5bf649fa2d5c905ddf4a",
          "programming-book": "557871261ff17fef5abee3ee"
        }
      });
    } else if (e.level.get('slug') === 'the-battle-of-sky-span') {
      wizard = '52fc1460b2b91c0d5a7b6af3';
      return e.session.set('heroConfig', {
        "thangType": wizard,
        "inventory": {}
      });
    } else if (e.level.get('slug') === 'assembly-speed') {
      raider = '55527eb0b8abf4ba1fe9a107';
      return e.session.set('heroConfig', {
        "thangType": raider,
        "inventory": {}
      });
    } else if (e.level.isType('hero', 'hero-ladder', 'hero-coop') && !_.size((ref2 = (ref3 = e.session.get('heroConfig')) != null ? ref3.inventory : void 0) != null ? ref2 : {})) {
      if ((ref4 = this.setupManager) != null) {
        ref4.destroy();
      }
      this.setupManager = new LevelSetupManager({
        supermodel: this.supermodel,
        level: e.level,
        levelID: this.levelID,
        parent: this,
        session: e.session,
        courseID: this.courseID,
        courseInstanceID: this.courseInstanceID
      });
      return this.setupManager.open();
    }
  };

  PlayLevelView.prototype.onLoaded = function() {
    return _.defer((function(_this) {
      return function() {
        return _this.onLevelLoaderLoaded();
      };
    })(this));
  };

  PlayLevelView.prototype.onLevelLoaderLoaded = function() {
    var ref;
    if (this.levelLoader.progress() !== 1) {
      return;
    }
    if (!this.observing && !(this.levelLoader.level.isType('ladder', 'ladder-tutorial'))) {
      me.set('lastLevel', this.levelID);
      me.save();
      if ((ref = application.tracker) != null) {
        ref.identify();
      }
    }
    if (this.otherSession) {
      this.saveRecentMatch();
    }
    this.levelLoader.destroy();
    this.levelLoader = null;
    if (this.level.isType('web-dev')) {
      return Backbone.Mediator.publish('level:started', {});
    } else {
      return this.initSurface();
    }
  };

  PlayLevelView.prototype.saveRecentMatch = function() {
    var allRecentlyPlayedMatches, recentlyPlayedMatches, ref, ref1;
    allRecentlyPlayedMatches = (ref = storage.load('recently-played-matches')) != null ? ref : {};
    recentlyPlayedMatches = (ref1 = allRecentlyPlayedMatches[this.levelID]) != null ? ref1 : [];
    allRecentlyPlayedMatches[this.levelID] = recentlyPlayedMatches;
    if (!_.find(recentlyPlayedMatches, {
      otherSessionID: this.otherSession.id
    })) {
      recentlyPlayedMatches.unshift({
        yourTeam: me.team,
        otherSessionID: this.otherSession.id,
        opponentName: this.otherSession.get('creatorName')
      });
    }
    recentlyPlayedMatches.splice(8);
    return storage.save('recently-played-matches', allRecentlyPlayedMatches);
  };

  PlayLevelView.prototype.initSurface = function() {
    var bounds, normalSurface, surfaceOptions, webGLSurface, worldBounds;
    webGLSurface = $('canvas#webgl-surface', this.$el);
    normalSurface = $('canvas#normal-surface', this.$el);
    surfaceOptions = {
      thangTypes: this.supermodel.getModels(ThangType),
      observing: this.observing,
      playerNames: this.findPlayerNames(),
      levelType: this.level.get('type', true),
      stayVisible: this.showAds(),
      gameUIState: this.gameUIState,
      level: this.level
    };
    this.surface = new Surface(this.world, normalSurface, webGLSurface, surfaceOptions);
    worldBounds = this.world.getBounds();
    bounds = [
      {
        x: worldBounds.left,
        y: worldBounds.top
      }, {
        x: worldBounds.right,
        y: worldBounds.bottom
      }
    ];
    this.surface.camera.setBounds(bounds);
    this.surface.camera.zoomTo({
      x: 0,
      y: 0
    }, 0.1, 0);
    return this.listenTo(this.surface, 'resize', function(arg) {
      var height;
      height = arg.height;
      this.$('#stop-real-time-playback-button').css({
        top: height - 30
      });
      return this.$('#how-to-play-game-dev-panel').css({
        height: height
      });
    });
  };

  PlayLevelView.prototype.findPlayerNames = function() {
    var i, len, playerNames, ref, session;
    if (!this.level.isType('ladder', 'hero-ladder', 'course-ladder')) {
      return {};
    }
    playerNames = {};
    ref = [this.session, this.otherSession];
    for (i = 0, len = ref.length; i < len; i++) {
      session = ref[i];
      if (session != null ? session.get('team') : void 0) {
        playerNames[session.get('team')] = session.get('creatorName') || 'Anonymous';
      }
    }
    return playerNames;
  };

  PlayLevelView.prototype.onLevelStarted = function() {
    var ref, ref1;
    if (!((this.surface != null) || (this.webSurface != null))) {
      return;
    }
    this.loadingView.showReady();
    this.trackLevelLoadEnd();
    if (window.currentModal && !window.currentModal.destroyed && window.currentModal.constructor !== VictoryModal) {
      return Backbone.Mediator.subscribeOnce('modal:closed', this.onLevelStarted, this);
    }
    if ((ref = this.surface) != null) {
      ref.showLevel();
    }
    Backbone.Mediator.publish('level:set-time', {
      time: 0
    });
    if ((this.isEditorPreview || this.observing) && !this.getQueryVariable('intro')) {
      this.loadingView.startUnveiling();
      return this.loadingView.unveil(true);
    } else {
      return (ref1 = this.scriptManager) != null ? ref1.initializeCamera() : void 0;
    }
  };

  PlayLevelView.prototype.onLoadingViewUnveiling = function(e) {
    return this.selectHero();
  };

  PlayLevelView.prototype.onLoadingViewUnveiled = function(e) {
    var ref, ref1;
    if (this.level.isType('course-ladder', 'hero-ladder') || this.observing) {
      Backbone.Mediator.publish('level:set-playing', {
        playing: true
      });
    }
    this.loadingView.$el.remove();
    this.removeSubView(this.loadingView);
    this.loadingView = null;
    this.playAmbientSound();
    if (!this.observing) {
      if ((ref = application.tracker) != null) {
        ref.trackEvent('Started Level', {
          category: 'Play Level',
          levelID: this.levelID,
          ls: (ref1 = this.session) != null ? ref1.get('_id') : void 0
        });
      }
    }
    $(window).trigger('resize');
    return _.delay(((function(_this) {
      return function() {
        return typeof _this.perhapsStartSimulating === "function" ? _this.perhapsStartSimulating() : void 0;
      };
    })(this)), 10 * 1000);
  };

  PlayLevelView.prototype.onSetVolume = function(e) {
    createjs.Sound.setVolume(e.volume === 1 ? 0.6 : e.volume);
    if (e.volume && !this.ambientSound) {
      return this.playAmbientSound();
    }
  };

  PlayLevelView.prototype.playAmbientSound = function() {
    var file, ref, src;
    if (this.destroyed) {
      return;
    }
    if (this.ambientSound) {
      return;
    }
    if (!me.get('volume')) {
      return;
    }
    if (!(file = {
      Dungeon: 'ambient-dungeon',
      Grass: 'ambient-grass'
    }[this.level.get('terrain')])) {
      return;
    }
    src = "/file/interface/" + file + AudioPlayer.ext;
    if (!((ref = AudioPlayer.getStatus(src)) != null ? ref.loaded : void 0)) {
      AudioPlayer.preloadSound(src);
      Backbone.Mediator.subscribeOnce('audio-player:loaded', this.playAmbientSound, this);
      return;
    }
    this.ambientSound = createjs.Sound.play(src, {
      loop: -1,
      volume: 0.1
    });
    return createjs.Tween.get(this.ambientSound).to({
      volume: 1.0
    }, 10000);
  };

  PlayLevelView.prototype.selectHero = function() {
    var ref;
    Backbone.Mediator.publish('level:suppress-selection-sounds', {
      suppress: true
    });
    Backbone.Mediator.publish('tome:select-primary-sprite', {});
    Backbone.Mediator.publish('level:suppress-selection-sounds', {
      suppress: false
    });
    return (ref = this.surface) != null ? ref.focusOnHero() : void 0;
  };

  PlayLevelView.prototype.perhapsStartSimulating = function() {
    if (!this.shouldSimulate()) {
      return;
    }
    return console.error("Should not auto-simulate until we fix how these languages are loaded");
    return this.simulateNextGame();
  };

  PlayLevelView.prototype.simulateNextGame = function() {
    var fetchAndSimulateOneGameOriginal, simulatorOptions;
    if (this.simulator) {
      return this.simulator.fetchAndSimulateOneGame();
    }
    simulatorOptions = {
      background: true,
      leagueID: this.courseInstanceID
    };
    if (this.level.isType('course-ladder', 'hero-ladder')) {
      simulatorOptions.levelID = this.level.get('slug');
    }
    this.simulator = new Simulator(simulatorOptions);
    fetchAndSimulateOneGameOriginal = this.simulator.fetchAndSimulateOneGame;
    this.simulator.fetchAndSimulateOneGame = (function(_this) {
      return function() {
        if (_this.simulator.simulatedByYou >= 10) {
          console.log('------------------- Destroying Simulator and making a new one -----------------');
          _this.simulator.destroy();
          _this.simulator = null;
          return _this.simulateNextGame();
        } else {
          return fetchAndSimulateOneGameOriginal.apply(_this.simulator);
        }
      };
    })(this);
    return this.simulator.fetchAndSimulateOneGame();
  };

  PlayLevelView.prototype.shouldSimulate = function() {
    var cores, defaultCores, defaultHeapLimit, gamesSimulated, heapLimit, ref, ref1, ref2, ref3, ref4, ref5, ref6, stillBuggy;
    if (this.getQueryVariable('simulate') === true) {
      return true;
    }
    if (this.getQueryVariable('simulate') === false) {
      return false;
    }
    stillBuggy = true;
    defaultCores = 2;
    cores = window.navigator.hardwareConcurrency || defaultCores;
    defaultHeapLimit = 793000000;
    heapLimit = ((ref = window.performance) != null ? (ref1 = ref.memory) != null ? ref1.jsHeapSizeLimit : void 0 : void 0) || defaultHeapLimit;
    gamesSimulated = me.get('simulatedBy');
    console.debug("Should we start simulating? Cores:", window.navigator.hardwareConcurrency, "Heap limit:", (ref2 = window.performance) != null ? (ref3 = ref2.memory) != null ? ref3.jsHeapSizeLimit : void 0 : void 0, "Load duration:", this.loadDuration);
    if (!((ref4 = $.browser) != null ? ref4.desktop : void 0)) {
      return false;
    }
    if (((ref5 = $.browser) != null ? ref5.msie : void 0) || ((ref6 = $.browser) != null ? ref6.msedge : void 0)) {
      return false;
    }
    if ($.browser.linux) {
      return false;
    }
    if (me.level() < 8) {
      return false;
    }
    if (this.level.isType('course', 'game-dev', 'web-dev')) {
      return false;
    } else if (this.level.isType('hero') && gamesSimulated) {
      if (stillBuggy) {
        return false;
      }
      if (cores < 8) {
        return false;
      }
      if (heapLimit < defaultHeapLimit) {
        return false;
      }
      if (this.loadDuration > 10000) {
        return false;
      }
    } else if (this.level.isType('hero-ladder') && gamesSimulated) {
      if (stillBuggy) {
        return false;
      }
      if (cores < 4) {
        return false;
      }
      if (heapLimit < defaultHeapLimit) {
        return false;
      }
      if (this.loadDuration > 15000) {
        return false;
      }
    } else if (this.level.isType('hero-ladder') && !gamesSimulated) {
      if (stillBuggy) {
        return false;
      }
      if (cores < 8) {
        return false;
      }
      if (heapLimit <= defaultHeapLimit) {
        return false;
      }
      if (this.loadDuration > 20000) {
        return false;
      }
    } else if (this.level.isType('course-ladder')) {
      if (cores <= defaultCores) {
        return false;
      }
      if (heapLimit < defaultHeapLimit) {
        return false;
      }
      if (this.loadDuration > 18000) {
        return false;
      }
    } else {
      console.warn("Unwritten level type simulation heuristics; fill these in for new level type " + (this.level.get('type')) + "?");
      if (stillBuggy) {
        return false;
      }
      if (cores < 8) {
        return false;
      }
      if (heapLimit < defaultHeapLimit) {
        return false;
      }
      if (this.loadDuration > 10000) {
        return false;
      }
    }
    console.debug("We should have the power. Begin background ladder simulation.");
    return true;
  };

  PlayLevelView.prototype.onCtrlS = function(e) {
    return e.preventDefault();
  };

  PlayLevelView.prototype.onEscapePressed = function(e) {
    if (!this.$el.hasClass('real-time')) {
      return;
    }
    return Backbone.Mediator.publish('playback:stop-real-time-playback', {});
  };

  PlayLevelView.prototype.onLevelReloadFromData = function(e) {
    var isReload, model, ref, url;
    isReload = Boolean(this.world);
    if (isReload) {
      ref = this.supermodel.models;
      for (url in ref) {
        model = ref[url];
        if (!e.supermodel.models[url]) {
          e.supermodel.registerModel(model);
        }
      }
    }
    this.setLevel(e.level, e.supermodel);
    if (isReload) {
      this.scriptManager.setScripts(e.level.get('scripts'));
      this.updateGoals(e.level.get('goals'));
      return Backbone.Mediator.publish('tome:cast-spell', {});
    }
  };

  PlayLevelView.prototype.onLevelReloadThangType = function(e) {
    var key, model, ref, ref1, tt, url, val;
    tt = e.thangType;
    ref = this.supermodel.models;
    for (url in ref) {
      model = ref[url];
      if (model.id === tt.id) {
        ref1 = tt.attributes;
        for (key in ref1) {
          val = ref1[key];
          model.attributes[key] = val;
        }
        break;
      }
    }
    return Backbone.Mediator.publish('tome:cast-spell', {});
  };

  PlayLevelView.prototype.onWindowResize = function(e) {
    return this.endHighlight();
  };

  PlayLevelView.prototype.onDisableControls = function(e) {
    if (e.controls && !(indexOf.call(e.controls, 'level') >= 0)) {
      return;
    }
    this.shortcutsEnabled = false;
    this.wasFocusedOn = document.activeElement;
    return $('body').focus();
  };

  PlayLevelView.prototype.onEnableControls = function(e) {
    if ((e.controls != null) && !(indexOf.call(e.controls, 'level') >= 0)) {
      return;
    }
    this.shortcutsEnabled = true;
    if (this.wasFocusedOn) {
      $(this.wasFocusedOn).focus();
    }
    return this.wasFocusedOn = null;
  };

  PlayLevelView.prototype.onDonePressed = function() {
    return this.showVictory();
  };

  PlayLevelView.prototype.onShowVictory = function(e) {
    var ref, ref1, ref2, victoryTime;
    if (e == null) {
      e = {};
    }
    if (!this.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev', 'web-dev')) {
      $('#level-done-button').show();
    }
    if (e.showModal) {
      this.showVictory(_.pick(e, 'manual'));
    }
    if (this.victorySeen) {
      return;
    }
    this.victorySeen = true;
    victoryTime = (new Date()) - this.loadEndTime;
    if (!this.observing && victoryTime > 10 * 1000) {
      if ((ref = application.tracker) != null) {
        ref.trackEvent('Saw Victory', {
          category: 'Play Level',
          level: this.level.get('name'),
          label: this.level.get('name'),
          levelID: this.levelID,
          ls: (ref1 = this.session) != null ? ref1.get('_id') : void 0
        });
      }
      return (ref2 = application.tracker) != null ? ref2.trackTiming(victoryTime, 'Level Victory Time', this.levelID, this.levelID) : void 0;
    }
  };

  PlayLevelView.prototype.showVictory = function(options) {
    var ModalClass, ref, victoryModal;
    if (options == null) {
      options = {};
    }
    if (this.level.hasLocalChanges()) {
      return;
    }
    if (this.level.isType('game-dev') && this.level.get('shareable') && !options.manual) {
      return;
    }
    this.endHighlight();
    options = {
      level: this.level,
      supermodel: this.supermodel,
      session: this.session,
      hasReceivedMemoryWarning: this.hasReceivedMemoryWarning,
      courseID: this.courseID,
      courseInstanceID: this.courseInstanceID,
      world: this.world
    };
    ModalClass = this.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev', 'web-dev') ? HeroVictoryModal : VictoryModal;
    if (this.isCourseMode() || me.isSessionless()) {
      ModalClass = CourseVictoryModal;
    }
    if (this.level.isType('course-ladder')) {
      ModalClass = CourseVictoryModal;
      options.courseInstanceID = this.getQueryVariable('course-instance') || this.getQueryVariable('league');
    }
    if (window.serverConfig.picoCTF) {
      ModalClass = PicoCTFVictoryModal;
    }
    victoryModal = new ModalClass(options);
    this.openModalView(victoryModal);
    if (me.get('anonymous')) {
      return window.nextURL = '/play/' + ((ref = this.level.get('campaign')) != null ? ref : '');
    }
  };

  PlayLevelView.prototype.onRestartLevel = function() {
    var ref;
    this.tome.reloadAllCode();
    Backbone.Mediator.publish('level:restarted', {});
    $('#level-done-button', this.$el).hide();
    if (!this.observing) {
      return (ref = application.tracker) != null ? ref.trackEvent('Confirmed Restart', {
        category: 'Play Level',
        level: this.level.get('name'),
        label: this.level.get('name')
      }) : void 0;
    }
  };

  PlayLevelView.prototype.onInfiniteLoop = function(e) {
    var ref;
    if (!(e.firstWorld && e.god === this.god)) {
      return;
    }
    this.openModalView(new InfiniteLoopModal({
      nonUserCodeProblem: e.nonUserCodeProblem
    }));
    if (!this.observing) {
      return (ref = application.tracker) != null ? ref.trackEvent('Saw Initial Infinite Loop', {
        category: 'Play Level',
        level: this.level.get('name'),
        label: this.level.get('name')
      }) : void 0;
    }
  };

  PlayLevelView.prototype.onHighlightDOM = function(e) {
    return this.highlightElement(e.selector, {
      delay: e.delay,
      sides: e.sides,
      offset: e.offset,
      rotation: e.rotation
    });
  };

  PlayLevelView.prototype.onEndHighlight = function() {
    return this.endHighlight();
  };

  PlayLevelView.prototype.onFocusDom = function(e) {
    return $(e.selector).focus();
  };

  PlayLevelView.prototype.onContactClicked = function(e) {
    var body, contactModal, screenshot;
    if (me.isStudent()) {
      console.error("Student clicked contact modal.");
      return;
    }
    Backbone.Mediator.publish('level:contact-button-pressed', {});
    this.openModalView(contactModal = new ContactModal({
      levelID: this.level.get('slug') || this.level.id,
      courseID: this.courseID,
      courseInstanceID: this.courseInstanceID
    }));
    screenshot = this.surface.screenshot(1, 'image/png', 1.0, 1);
    body = {
      b64png: screenshot.replace('data:image/png;base64,', ''),
      filename: "screenshot-" + this.levelID + "-" + (_.string.slugify((new Date()).toString())) + ".png",
      path: "db/user/" + me.id,
      mimetype: 'image/png'
    };
    contactModal.screenshotURL = "http://codecombat.com/file/" + body.path + "/" + body.filename;
    window.screenshot = screenshot;
    window.screenshotURL = contactModal.screenshotURL;
    return $.ajax('/file', {
      type: 'POST',
      data: body,
      success: function(e) {
        return typeof contactModal.updateScreenshot === "function" ? contactModal.updateScreenshot() : void 0;
      }
    });
  };

  PlayLevelView.prototype.onNewWorld = function(e) {
    var finishedLoading, i, len, message, ref, ref1, ref2, results, scripts, sound, spriteName, startFrame, thangType, thangTypes;
    if (this.headless) {
      return;
    }
    scripts = this.world.scripts;
    this.world = e.world;
    this.world.scripts = scripts;
    thangTypes = this.supermodel.getModels(ThangType);
    startFrame = (ref = this.lastWorldFramesLoaded) != null ? ref : 0;
    finishedLoading = this.world.frames.length === this.world.totalFrames;
    if (finishedLoading) {
      this.lastWorldFramesLoaded = 0;
      if (this.waitingForSubmissionComplete) {
        _.defer(this.onSubmissionComplete);
        this.waitingForSubmissionComplete = false;
      }
    } else {
      this.lastWorldFramesLoaded = this.world.frames.length;
    }
    ref1 = this.world.thangDialogueSounds(startFrame);
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      ref2 = ref1[i], spriteName = ref2[0], message = ref2[1];
      if (!(thangType = _.find(thangTypes, function(m) {
        return m.get('name') === spriteName;
      }))) {
        continue;
      }
      if (!(sound = AudioPlayer.soundForDialogue(message, thangType.get('soundTriggers')))) {
        continue;
      }
      results.push(AudioPlayer.preloadSoundReference(sound));
    }
    return results;
  };

  PlayLevelView.prototype.onRealTimePlaybackStarted = function(e) {
    this.$el.addClass('real-time').focus();
    if (this.level.isType('game-dev')) {
      this.$('#how-to-play-game-dev-panel').removeClass('hide');
    }
    return this.onWindowResize();
  };

  PlayLevelView.prototype.onRealTimePlaybackEnded = function(e) {
    var ref;
    if (!this.$el.hasClass('real-time')) {
      return;
    }
    if (this.level.isType('game-dev')) {
      this.$('#how-to-play-game-dev-panel').addClass('hide');
    }
    this.$el.removeClass('real-time');
    this.onWindowResize();
    if (this.world.frames.length === this.world.totalFrames && !((ref = this.surface.countdownScreen) != null ? ref.showing : void 0)) {
      return _.delay(this.onSubmissionComplete, 750);
    } else {
      return this.waitingForSubmissionComplete = true;
    }
  };

  PlayLevelView.prototype.onSubmissionComplete = function() {
    var showModalFn;
    if (this.destroyed) {
      return;
    }
    Backbone.Mediator.publish('level:set-time', {
      ratio: 1
    });
    if (this.level.hasLocalChanges()) {
      return;
    }
    if (this.goalManager.checkOverallStatus() === 'success') {
      showModalFn = function() {
        return Backbone.Mediator.publish('level:show-victory', {
          showModal: true
        });
      };
      this.session.recordScores(this.world.scores, this.level);
      if (this.level.get('replayable')) {
        return this.session.increaseDifficulty(showModalFn);
      } else {
        return showModalFn();
      }
    }
  };

  PlayLevelView.prototype.destroy = function() {
    var ambientSound, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
    if ((ref = this.levelLoader) != null) {
      ref.destroy();
    }
    if ((ref1 = this.surface) != null) {
      ref1.destroy();
    }
    if ((ref2 = this.god) != null) {
      ref2.destroy();
    }
    if ((ref3 = this.goalManager) != null) {
      ref3.destroy();
    }
    if ((ref4 = this.scriptManager) != null) {
      ref4.destroy();
    }
    if ((ref5 = this.setupManager) != null) {
      ref5.destroy();
    }
    if ((ref6 = this.simulator) != null) {
      ref6.destroy();
    }
    if (ambientSound = this.ambientSound) {
      createjs.Tween.get(ambientSound).to({
        volume: 0.0
      }, 1500).call(function() {
        return ambientSound.stop();
      });
    }
    $(window).off('resize', this.onWindowResize);
    delete window.world;
    if ((ref7 = this.bus) != null) {
      ref7.destroy();
    }
    delete window.nextURL;
    if (PROFILE_ME) {
      if (typeof console.profileEnd === "function") {
        console.profileEnd();
      }
    }
    if ((ref8 = application.tracker) != null) {
      ref8.disableInspectletJS();
    }
    return PlayLevelView.__super__.destroy.call(this);
  };

  PlayLevelView.prototype.onIPadMemoryWarning = function(e) {
    return this.hasReceivedMemoryWarning = true;
  };

  PlayLevelView.prototype.onItemPurchased = function(e) {
    var heroConfig, inventory, ref, ref1, ref2, slot;
    heroConfig = (ref = this.session.get('heroConfig')) != null ? ref : {};
    inventory = (ref1 = heroConfig.inventory) != null ? ref1 : {};
    slot = e.item.getAllowedSlots()[0];
    if (slot && !inventory[slot]) {
      if ((ref2 = this.setupManager) != null) {
        ref2.destroy();
      }
      this.setupManager = new LevelSetupManager({
        supermodel: this.supermodel,
        level: this.level,
        levelID: this.levelID,
        parent: this,
        session: this.session,
        hadEverChosenHero: true
      });
      return this.setupManager.open();
    }
  };

  return PlayLevelView;

})(RootView);
});

;require.register("views/play/level/PlayWebDevLevelView", function(exports, require, module) {
var Level, LevelSession, PlayWebDevLevelView, RootView, WebSurfaceView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RootView = require('views/core/RootView');

Level = require('models/Level');

LevelSession = require('models/LevelSession');

WebSurfaceView = require('./WebSurfaceView');

require('game-libraries');

module.exports = PlayWebDevLevelView = (function(superClass) {
  extend(PlayWebDevLevelView, superClass);

  function PlayWebDevLevelView() {
    return PlayWebDevLevelView.__super__.constructor.apply(this, arguments);
  }

  PlayWebDevLevelView.prototype.id = 'play-web-dev-level-view';

  PlayWebDevLevelView.prototype.template = require('templates/play/level/play-web-dev-level-view');

  PlayWebDevLevelView.prototype.initialize = function(options, levelID, sessionID) {
    this.options = options;
    this.levelID = levelID;
    this.sessionID = sessionID;
    this.courseID = this.getQueryVariable('course');
    this.level = this.supermodel.loadModel(new Level({
      _id: this.levelID
    })).model;
    return this.session = this.supermodel.loadModel(new LevelSession({
      _id: this.sessionID
    })).model;
  };

  PlayWebDevLevelView.prototype.onLoaded = function() {
    var ref, ref1;
    PlayWebDevLevelView.__super__.onLoaded.call(this);
    this.insertSubView(this.webSurface = new WebSurfaceView({
      level: this.level
    }));
    Backbone.Mediator.publish('tome:html-updated', {
      html: (ref = this.getHTML()) != null ? ref : '<h1>Player has no HTML</h1>',
      create: true
    });
    this.$el.find('#info-bar').delay(4000).fadeOut(2000);
    $('body').css('overflow', 'hidden');
    this.eventProperties = {
      category: 'Play WebDev Level',
      courseID: this.courseID,
      sessionID: this.session.id,
      levelID: this.level.id,
      levelSlug: this.level.get('slug')
    };
    return (ref1 = window.tracker) != null ? ref1.trackEvent('Play WebDev Level - Load', this.eventProperties) : void 0;
  };

  PlayWebDevLevelView.prototype.showError = function(jqxhr) {
    return $('h1').text(jqxhr.statusText);
  };

  PlayWebDevLevelView.prototype.getHTML = function() {
    var hero, playerHTML, programmableConfig, ref, ref1;
    playerHTML = (ref = this.session.get('code')) != null ? (ref1 = ref['hero-placeholder']) != null ? ref1.plan : void 0 : void 0;
    if (!(hero = _.find(this.level.get('thangs'), {
      id: 'Hero Placeholder'
    }))) {
      return playerHTML;
    }
    if (!(programmableConfig = _.find(hero.components, function(component) {
      var ref2;
      return (ref2 = component.config) != null ? ref2.programmableMethods : void 0;
    }).config)) {
      return playerHTML;
    }
    return programmableConfig.programmableMethods.plan.languages.html.replace(/<playercode>[\s\S]*<\/playercode>/, playerHTML);
  };

  PlayWebDevLevelView.prototype.destroy = function() {
    var ref;
    if ((ref = this.webSurface) != null) {
      ref.destroy();
    }
    $('body').css('overflow', 'initial');
    return PlayWebDevLevelView.__super__.destroy.call(this);
  };

  return PlayWebDevLevelView;

})(RootView);
});

;require.register("views/play/level/ThangAvatarView", function(exports, require, module) {
var CocoView, ThangAvatarView, ThangType, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/thang_avatar');

ThangType = require('models/ThangType');

module.exports = ThangAvatarView = (function(superClass) {
  extend(ThangAvatarView, superClass);

  ThangAvatarView.prototype.className = 'thang-avatar-view';

  ThangAvatarView.prototype.template = template;

  ThangAvatarView.prototype.subscriptions = {
    'tome:problems-updated': 'onProblemsUpdated',
    'god:new-world-created': 'onNewWorld'
  };

  function ThangAvatarView(options) {
    ThangAvatarView.__super__.constructor.call(this, options);
    this.thang = options.thang;
    this.includeName = options.includeName;
    this.thangType = this.getSpriteThangType();
    if (!this.thangType) {
      console.error('Thang avatar view expected a thang type to be provided.');
      return;
    }
    if (!(this.thangType.isFullyLoaded() || this.thangType.loading)) {
      this.thangType.fetch();
    }
    this.listenTo(this.thangType, 'sync', this.render);
    this.listenTo(this.thangType, 'build-complete', this.render);
  }

  ThangAvatarView.prototype.getSpriteThangType = function() {
    var loadedThangs, t, thangs;
    thangs = this.supermodel.getModels(ThangType);
    thangs = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = thangs.length; i < len; i++) {
        t = thangs[i];
        if (t.get('name') === this.thang.spriteName) {
          results.push(t);
        }
      }
      return results;
    }).call(this);
    loadedThangs = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = thangs.length; i < len; i++) {
        t = thangs[i];
        if (t.isFullyLoaded()) {
          results.push(t);
        }
      }
      return results;
    })();
    return loadedThangs[0] || thangs[0];
  };

  ThangAvatarView.prototype.getRenderData = function(context) {
    var options, ref;
    if (context == null) {
      context = {};
    }
    context = ThangAvatarView.__super__.getRenderData.call(this, context);
    context.thang = this.thang;
    options = ((ref = this.thang) != null ? ref.getLankOptions() : void 0) || {};
    if (!this.thangType.loading) {
      context.avatarURL = this.thangType.getPortraitSource(options);
    }
    context.includeName = this.includeName;
    return context;
  };

  ThangAvatarView.prototype.setProblems = function(problemCount, level) {
    var badge;
    badge = this.$el.find('.badge.problems').text(problemCount ? 'x' : '');
    badge.removeClass('error warning info');
    if (level) {
      return badge.addClass(level);
    }
  };

  ThangAvatarView.prototype.setSharedThangs = function(sharedThangCount) {
    var badge;
    return badge = this.$el.find('.badge.shared-thangs').text(sharedThangCount > 1 ? sharedThangCount : '');
  };

  ThangAvatarView.prototype.setSelected = function(selected) {
    return this.$el.toggleClass('selected', Boolean(selected));
  };

  ThangAvatarView.prototype.onProblemsUpdated = function(e) {
    var aether, i, len, level, myProblems, ref, ref1, ref2, ref3, worstLevel;
    if (((ref = this.thang) != null ? ref.id : void 0) !== ((ref1 = e.spell.thang) != null ? ref1.thang.id : void 0)) {
      return;
    }
    aether = e.spell.thang.castAether;
    myProblems = (ref2 = aether != null ? aether.getAllProblems() : void 0) != null ? ref2 : [];
    worstLevel = null;
    ref3 = ['error', 'warning', 'info'];
    for (i = 0, len = ref3.length; i < len; i++) {
      level = ref3[i];
      if (!(_.some(myProblems, {
        level: level
      }))) {
        continue;
      }
      worstLevel = level;
      break;
    }
    return this.setProblems(myProblems.length, worstLevel);
  };

  ThangAvatarView.prototype.onNewWorld = function(e) {
    if (this.thang && e.world.thangMap[this.thang.id]) {
      return this.options.thang = this.thang = e.world.thangMap[this.thang.id];
    }
  };

  ThangAvatarView.prototype.destroy = function() {
    return ThangAvatarView.__super__.destroy.call(this);
  };

  return ThangAvatarView;

})(CocoView);
});

;require.register("views/play/level/WebSurfaceView", function(exports, require, module) {
var CocoView, HtmlExtractor, WebSurfaceView, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/web-surface-view');

HtmlExtractor = require('lib/HtmlExtractor');

module.exports = WebSurfaceView = (function(superClass) {
  extend(WebSurfaceView, superClass);

  function WebSurfaceView() {
    this.onIframeMessage = bind(this.onIframeMessage, this);
    return WebSurfaceView.__super__.constructor.apply(this, arguments);
  }

  WebSurfaceView.prototype.id = 'web-surface-view';

  WebSurfaceView.prototype.template = template;

  WebSurfaceView.prototype.subscriptions = {
    'tome:html-updated': 'onHTMLUpdated',
    'web-dev:hover-line': 'onHoverLine',
    'web-dev:stop-hovering-line': 'onStopHoveringLine'
  };

  WebSurfaceView.prototype.initialize = function(options) {
    var goal;
    this.goals = (function() {
      var i, len, ref, ref1, ref2, results;
      ref2 = (ref = (ref1 = options.goalManager) != null ? ref1.goals : void 0) != null ? ref : [];
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        goal = ref2[i];
        if (goal.html) {
          results.push(goal);
        }
      }
      return results;
    })();
    return WebSurfaceView.__super__.initialize.call(this, options);
  };

  WebSurfaceView.prototype.getRenderData = function() {
    return _.merge(WebSurfaceView.__super__.getRenderData.call(this), {
      fullUnsafeContentHostname: serverConfig.fullUnsafeContentHostname
    });
  };

  WebSurfaceView.prototype.afterRender = function() {
    WebSurfaceView.__super__.afterRender.call(this);
    this.iframe = this.$('iframe')[0];
    return $(this.iframe).on('load', (function(_this) {
      return function(e) {
        window.addEventListener('message', _this.onIframeMessage);
        _this.iframeLoaded = true;
        if (typeof _this.onIframeLoaded === "function") {
          _this.onIframeLoaded();
        }
        return _this.onIframeLoaded = null;
      };
    })(this));
  };

  WebSurfaceView.prototype.onHTMLUpdated = function(e) {
    var messageType, ref, scripts, styles;
    if (!this.iframeLoaded) {
      return this.onIframeLoaded = (function(_this) {
        return function() {
          if (!_this.destroyed) {
            return _this.onHTMLUpdated(e);
          }
        };
      })(this);
    }
    ref = HtmlExtractor.extractStylesAndScripts(e.html), this.virtualDom = ref.virtualDom, styles = ref.styles, scripts = ref.scripts;
    this.cssSelectors = HtmlExtractor.extractCssSelectors(styles, scripts);
    this.rawCssLines = HtmlExtractor.extractCssLines(styles);
    this.rawJQueryLines = HtmlExtractor.extractJQueryLines(scripts);
    messageType = e.create || !this.virtualDom ? 'create' : 'update';
    return this.iframe.contentWindow.postMessage({
      type: messageType,
      dom: this.virtualDom,
      styles: styles,
      scripts: scripts,
      goals: this.goals
    }, '*');
  };

  WebSurfaceView.prototype.combineNodes = function(type, nodes) {
    var children;
    if (_.any(nodes, function(node) {
      return node.type !== type;
    })) {
      throw new Error("Can't combine nodes of different types. (Got " + (nodes.map(function(n) {
        return n.type;
      })) + ")");
    }
    children = nodes.map(function(n) {
      return n.children;
    }).reduce((function(a, b) {
      return a.concat(b);
    }), []);
    if (_.isEmpty(children)) {
      return deku.element(type, {});
    } else {
      return deku.element(type, {}, children);
    }
  };

  WebSurfaceView.prototype.onStopHoveringLine = function() {
    return this.iframe.contentWindow.postMessage({
      type: 'highlight-css-selector',
      selector: ''
    }, '*');
  };

  WebSurfaceView.prototype.onHoverLine = function(arg) {
    var hoveredCssSelector, line, ref, ref1, row, trimLine;
    row = arg.row, line = arg.line;
    if (_.contains(this.rawCssLines, line)) {
      trimLine = (((ref = line.match(/\s(.*)\s*{/)) != null ? ref[1] : void 0) || line).trim().split(/ +/).join(' ');
      hoveredCssSelector = _.find(this.cssSelectors, function(selector) {
        return trimLine === selector;
      });
    } else if (_.contains(this.rawJQueryLines, line)) {
      trimLine = (((ref1 = line.match(/\$\(\s*['"](.*)['"]\s*\)/)) != null ? ref1[1] : void 0) || '').trim();
      hoveredCssSelector = _.find(this.cssSelectors, function(selector) {
        return trimLine === selector;
      });
    } else {
      hoveredCssSelector = '';
    }
    this.iframe.contentWindow.postMessage({
      type: 'highlight-css-selector',
      selector: hoveredCssSelector
    }, '*');
    return null;
  };

  WebSurfaceView.prototype.onIframeMessage = function(event) {
    var origin;
    origin = event.origin || event.originalEvent.origin;
    if (!new RegExp("^https?:\/\/" + serverConfig.fullUnsafeContentHostname + "$").test(origin)) {
      return console.log('Ignoring message from bad origin:', origin);
    }
    if (event.source !== this.iframe.contentWindow) {
      return console.log('Ignoring message from somewhere other than our iframe:', event.source);
    }
    switch (event.data.type) {
      case 'goals-updated':
        return Backbone.Mediator.publish('god:new-html-goal-states', {
          goalStates: event.data.goalStates,
          overallStatus: event.data.overallStatus
        });
      case 'error':
        return Backbone.Mediator.publish('web-dev:error', _.pick(event.data, ['message', 'line', 'column', 'url']));
      default:
        return console.warn('Unknown message type', event.data.type, 'for message', event, 'from origin', origin);
    }
  };

  WebSurfaceView.prototype.destroy = function() {
    window.removeEventListener('message', this.onIframeMessage);
    return WebSurfaceView.__super__.destroy.call(this);
  };

  return WebSurfaceView;

})(CocoView);
});

;require.register("views/play/level/modal/CourseVictoryModal", function(exports, require, module) {
var Classroom, Course, CourseVictoryModal, Level, LevelSessions, ModalView, ProgressView, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/level/modal/course-victory-modal');

Level = require('models/Level');

Course = require('models/Course');

LevelSessions = require('collections/LevelSessions');

ProgressView = require('./ProgressView');

Classroom = require('models/Classroom');

utils = require('core/utils');

module.exports = CourseVictoryModal = (function(superClass) {
  extend(CourseVictoryModal, superClass);

  function CourseVictoryModal() {
    return CourseVictoryModal.__super__.constructor.apply(this, arguments);
  }

  CourseVictoryModal.prototype.id = 'course-victory-modal';

  CourseVictoryModal.prototype.template = template;

  CourseVictoryModal.prototype.closesOnClickOutside = false;

  CourseVictoryModal.prototype.initialize = function(options) {
    var ref;
    this.courseID = options.courseID;
    this.courseInstanceID = options.courseInstanceID || this.getQueryVariable('course-instance') || this.getQueryVariable('league');
    this.views = [];
    this.session = options.session;
    this.level = options.level;
    if (this.courseInstanceID) {
      this.classroom = new Classroom();
      this.supermodel.trackRequest(this.classroom.fetchForCourseInstance(this.courseInstanceID));
    }
    this.playSound('victory');
    this.nextLevel = new Level();
    this.nextLevelRequest = this.supermodel.trackRequest(this.nextLevel.fetchNextForCourse({
      levelOriginalID: this.level.get('original'),
      courseInstanceID: this.courseInstanceID,
      courseID: this.courseID,
      sessionID: this.session.id
    }));
    this.course = options.course;
    if (this.courseID && !this.course) {
      this.course = new Course().setURL("/db/course/" + this.courseID);
      this.course = this.supermodel.loadModel(this.course).model;
    }
    if (this.courseInstanceID) {
      this.levelSessions = new LevelSessions();
      this.levelSessions.fetchForCourseInstance(this.courseInstanceID);
      this.levelSessions = this.supermodel.loadCollection(this.levelSessions, 'sessions', {
        data: {
          project: 'state.complete level.original playtime changed'
        }
      }).model;
      if (!this.course) {
        this.course = new Course();
        this.supermodel.trackRequest(this.course.fetchForCourseInstance(this.courseInstanceID));
      }
    }
    return (ref = window.tracker) != null ? ref.trackEvent('Play Level Victory Modal Loaded', {
      category: 'Students',
      levelSlug: this.level.get('slug')
    }, []) : void 0;
  };

  CourseVictoryModal.prototype.onResourceLoadFailed = function(e) {
    if (e.resource.jqxhr === this.nextLevelRequest) {
      return;
    }
    return CourseVictoryModal.__super__.onResourceLoadFailed.apply(this, arguments);
  };

  CourseVictoryModal.prototype.onLoaded = function() {
    var i, len, progressView, ref, ref1, ref2, view;
    CourseVictoryModal.__super__.onLoaded.call(this);
    if (this.courseID == null) {
      this.courseID = this.course.id;
    }
    this.views = [];
    if ((ref = this.levelSessions) != null) {
      ref.remove(this.session);
    }
    if ((ref1 = this.levelSessions) != null) {
      ref1.add(this.session);
    }
    progressView = new ProgressView({
      level: this.level,
      nextLevel: this.nextLevel,
      course: this.course,
      classroom: this.classroom,
      levelSessions: this.levelSessions,
      session: this.session
    });
    progressView.once('done', this.onDone, this);
    progressView.once('next-level', this.onNextLevel, this);
    progressView.once('ladder', this.onLadder, this);
    ref2 = this.views;
    for (i = 0, len = ref2.length; i < len; i++) {
      view = ref2[i];
      view.on('continue', this.onViewContinue, this);
    }
    this.views.push(progressView);
    return this.showView(_.first(this.views));
  };

  CourseVictoryModal.prototype.afterRender = function() {
    CourseVictoryModal.__super__.afterRender.call(this);
    return this.showView(this.currentView);
  };

  CourseVictoryModal.prototype.showView = function(view) {
    if (!view) {
      return;
    }
    view.setElement(this.$('.modal-content'));
    view.$el.attr('id', view.id);
    view.$el.addClass(view.className);
    view.render();
    return this.currentView = view;
  };

  CourseVictoryModal.prototype.onViewContinue = function() {
    var index;
    index = _.indexOf(this.views, this.currentView);
    return this.showView(this.views[index + 1]);
  };

  CourseVictoryModal.prototype.onNextLevel = function() {
    var link, ref;
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Play Level Victory Modal Next Level', {
        category: 'Students',
        levelSlug: this.level.get('slug'),
        nextLevelSlug: this.nextLevel.get('slug')
      }, []);
    }
    if (me.isSessionless()) {
      link = "/play/level/" + (this.nextLevel.get('slug')) + "?course=" + this.courseID + "&codeLanguage=" + (utils.getQueryVariable('codeLanguage', 'python'));
    } else {
      link = "/play/level/" + (this.nextLevel.get('slug')) + "?course=" + this.courseID + "&course-instance=" + this.courseInstanceID;
      if (this.level.get('primerLanguage')) {
        link += "&codeLanguage=" + this.level.get('primerLanguage');
      }
    }
    return application.router.navigate(link, {
      trigger: true
    });
  };

  CourseVictoryModal.prototype.onDone = function() {
    var link, ref;
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Play Level Victory Modal Done', {
        category: 'Students',
        levelSlug: this.level.get('slug')
      }, []);
    }
    if (me.isSessionless()) {
      link = '/teachers/courses';
    } else {
      link = '/students';
    }
    return application.router.navigate(link, {
      trigger: true
    });
  };

  CourseVictoryModal.prototype.onLadder = function() {
    var ladderURL, leagueID, leagueType, viewArgs;
    viewArgs = [
      {
        supermodel: this.options.hasReceivedMemoryWarning ? null : this.supermodel
      }, this.level.get('slug')
    ];
    ladderURL = "/play/ladder/" + (this.level.get('slug') || this.level.id);
    if (leagueID = this.courseInstanceID || this.getQueryVariable('league')) {
      leagueType = this.level.get('type') === 'course-ladder' ? 'course' : 'clan';
      viewArgs.push(leagueType);
      viewArgs.push(leagueID);
      ladderURL += "/" + leagueType + "/" + leagueID;
    }
    ladderURL += '#my-matches';
    return Backbone.Mediator.publish('router:navigate', {
      route: ladderURL,
      viewClass: 'views/ladder/LadderView',
      viewArgs: viewArgs
    });
  };

  return CourseVictoryModal;

})(ModalView);
});

;require.register("views/play/level/modal/GameDevVictoryModal", function(exports, require, module) {
var GameDevVictoryModal, ModalView, category,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

category = 'Play GameDev Level';

module.exports = GameDevVictoryModal = (function(superClass) {
  extend(GameDevVictoryModal, superClass);

  function GameDevVictoryModal() {
    return GameDevVictoryModal.__super__.constructor.apply(this, arguments);
  }

  GameDevVictoryModal.prototype.id = 'game-dev-victory-modal';

  GameDevVictoryModal.prototype.template = require('templates/play/level/modal/game-dev-victory-modal');

  GameDevVictoryModal.prototype.events = {
    'click #replay-game-btn': 'onClickReplayButton',
    'click #copy-url-btn': 'onClickCopyURLButton',
    'click #play-more-codecombat-btn': 'onClickPlayMoreCodeCombatButton'
  };

  GameDevVictoryModal.prototype.initialize = function(arg) {
    this.shareURL = arg.shareURL, this.eventProperties = arg.eventProperties;
  };

  GameDevVictoryModal.prototype.onClickReplayButton = function() {
    return this.trigger('replay');
  };

  GameDevVictoryModal.prototype.onClickCopyURLButton = function() {
    var ref;
    this.$('#copy-url-input').val(this.shareURL).select();
    this.tryCopy();
    return (ref = window.tracker) != null ? ref.trackEvent('Play GameDev Victory Modal - Copy URL', this.eventProperties, ['Mixpanel']) : void 0;
  };

  GameDevVictoryModal.prototype.onClickPlayMoreCodeCombatButton = function() {
    var ref;
    return (ref = window.tracker) != null ? ref.trackEvent('Play GameDev Victory Modal - Click Play More CodeCombat', this.eventProperties, ['Mixpanel']) : void 0;
  };

  return GameDevVictoryModal;

})(ModalView);
});

;require.register("views/play/level/modal/HeroVictoryModal", function(exports, require, module) {
var Achievement, AudioPlayer, CocoCollection, Course, CreateAccountModal, EarnedAchievement, HeroVictoryModal, LadderSubmissionView, Level, LevelFeedback, LocalMongo, ModalView, ThangType, User, campaignEndLevels, storage, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ModalView = require('views/core/ModalView');

CreateAccountModal = require('views/core/CreateAccountModal');

template = require('templates/play/level/modal/hero-victory-modal');

Achievement = require('models/Achievement');

EarnedAchievement = require('models/EarnedAchievement');

CocoCollection = require('collections/CocoCollection');

LocalMongo = require('lib/LocalMongo');

utils = require('core/utils');

ThangType = require('models/ThangType');

LadderSubmissionView = require('views/play/common/LadderSubmissionView');

AudioPlayer = require('lib/AudioPlayer');

User = require('models/User');

utils = require('core/utils');

Course = require('models/Course');

Level = require('models/Level');

LevelFeedback = require('models/LevelFeedback');

storage = require('core/storage');

module.exports = HeroVictoryModal = (function(superClass) {
  extend(HeroVictoryModal, superClass);

  HeroVictoryModal.prototype.id = 'hero-victory-modal';

  HeroVictoryModal.prototype.template = template;

  HeroVictoryModal.prototype.closeButton = false;

  HeroVictoryModal.prototype.closesOnClickOutside = false;

  HeroVictoryModal.prototype.subscriptions = {
    'ladder:game-submitted': 'onGameSubmitted'
  };

  HeroVictoryModal.prototype.events = {
    'click #continue-button': 'onClickContinue',
    'click .leaderboard-button': 'onClickLeaderboard',
    'click .return-to-course-button': 'onClickReturnToCourse',
    'click .return-to-ladder-button': 'onClickReturnToLadder',
    'click .sign-up-button': 'onClickSignupButton',
    'click .continue-from-offer-button': 'onClickContinueFromOffer',
    'click .skip-offer-button': 'onClickSkipOffer',
    'click #share-level-btn': 'onClickShareLevelButton',
    'mouseover .rating i': function(e) {
      return this.showStars(this.starNum($(e.target)));
    },
    'mouseout .rating i': function() {
      return this.showStars();
    },
    'click .rating i': function(e) {
      this.setStars(this.starNum($(e.target)));
      return this.$el.find('.review, .review-label').show();
    },
    'keypress .review textarea': function() {
      return this.saveReviewEventually();
    }
  };

  function HeroVictoryModal(options) {
    this.tickSequentialAnimation = bind(this.tickSequentialAnimation, this);
    var achievements;
    HeroVictoryModal.__super__.constructor.call(this, options);
    this.courseID = options.courseID;
    this.courseInstanceID = options.courseInstanceID;
    this.session = options.session;
    this.level = options.level;
    this.thangTypes = {};
    if (this.level.isType('hero', 'hero-ladder', 'course', 'course-ladder', 'game-dev', 'web-dev')) {
      achievements = new CocoCollection([], {
        url: "/db/achievement?related=" + (this.session.get('level').original),
        model: Achievement
      });
      this.achievements = this.supermodel.loadCollection(achievements, 'achievements').model;
      this.listenToOnce(this.achievements, 'sync', this.onAchievementsLoaded);
      this.readyToContinue = false;
      this.waitingToContinueSince = new Date();
      this.previousXP = me.get('points', true);
      this.previousLevel = me.level();
    } else {
      this.readyToContinue = true;
    }
    this.playSound('victory');
    if (this.level.isType('course', 'course-ladder')) {
      this.saveReviewEventually = _.debounce(this.saveReviewEventually, 2000);
      this.loadExistingFeedback();
    }
    if (this.level.get('shareable') === 'project') {
      this.shareURL = window.location.origin + "/play/" + (this.level.get('type')) + "-level/" + (this.level.get('slug')) + "/" + this.session.id;
    }
  }

  HeroVictoryModal.prototype.destroy = function() {
    var ref;
    clearInterval(this.sequentialAnimationInterval);
    if (this.$el.find('.review textarea').val()) {
      this.saveReview();
    }
    if ((ref = this.feedback) != null) {
      ref.off();
    }
    return HeroVictoryModal.__super__.destroy.call(this);
  };

  HeroVictoryModal.prototype.onHidden = function() {
    Backbone.Mediator.publish('music-player:exit-menu', {});
    return HeroVictoryModal.__super__.onHidden.call(this);
  };

  HeroVictoryModal.prototype.loadExistingFeedback = function() {
    var url;
    url = "/db/level/" + this.level.id + "/feedback";
    this.feedback = new LevelFeedback();
    this.feedback.setURL(url);
    this.feedback.fetch({
      cache: false
    });
    this.listenToOnce(this.feedback, 'sync', function() {
      return this.onFeedbackLoaded();
    });
    return this.listenToOnce(this.feedback, 'error', function() {
      return this.onFeedbackNotFound();
    });
  };

  HeroVictoryModal.prototype.onFeedbackLoaded = function() {
    this.feedback.url = function() {
      return '/db/level.feedback/' + this.id;
    };
    this.$el.find('.review textarea').val(this.feedback.get('review'));
    this.$el.find('.review, .review-label').show();
    return this.showStars();
  };

  HeroVictoryModal.prototype.onFeedbackNotFound = function() {
    this.feedback = new LevelFeedback();
    this.feedback.set('levelID', this.level.get('slug') || this.level.id);
    this.feedback.set('levelName', this.level.get('name') || '');
    this.feedback.set('level', {
      majorVersion: this.level.get('version').major,
      original: this.level.get('original')
    });
    return this.showStars();
  };

  HeroVictoryModal.prototype.onAchievementsLoaded = function() {
    var achievement, achievementIDs, ea, hadOneCompleted, i, j, k, len, len1, len2, ref, ref1, rewards, thangType, thangTypeOriginal, thangTypeOriginals;
    this.achievements.models = _.filter(this.achievements.models, function(m) {
      var ref;
      return !((ref = m.get('query')) != null ? ref.ladderAchievementDifficulty : void 0);
    });
    this.$el.toggleClass('full-achievements', this.achievements.models.length === 3);
    thangTypeOriginals = [];
    achievementIDs = [];
    ref = this.achievements.models;
    for (i = 0, len = ref.length; i < len; i++) {
      achievement = ref[i];
      rewards = achievement.get('rewards') || {};
      thangTypeOriginals.push(rewards.heroes || []);
      thangTypeOriginals.push(rewards.items || []);
      achievement.completed = LocalMongo.matchesQuery(this.session.attributes, achievement.get('query'));
      if (achievement.completed) {
        achievementIDs.push(achievement.id);
      }
    }
    thangTypeOriginals = _.uniq(_.flatten(thangTypeOriginals));
    for (j = 0, len1 = thangTypeOriginals.length; j < len1; j++) {
      thangTypeOriginal = thangTypeOriginals[j];
      thangType = new ThangType();
      thangType.url = "/db/thang.type/" + thangTypeOriginal + "/version";
      thangType.project = ['original', 'rasterIcon', 'name', 'slug', 'soundTriggers', 'featureImages', 'gems', 'heroClass', 'description', 'components', 'extendedName', 'unlockLevelName', 'i18n'];
      this.thangTypes[thangTypeOriginal] = this.supermodel.loadModel(thangType).model;
    }
    this.newEarnedAchievements = [];
    hadOneCompleted = false;
    ref1 = this.achievements.models;
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      achievement = ref1[k];
      if (!achievement.completed) {
        continue;
      }
      hadOneCompleted = true;
      ea = new EarnedAchievement({
        collection: achievement.get('collection'),
        triggeredBy: this.session.id,
        achievement: achievement.id
      });
      ea.save();
      this.newEarnedAchievements.push(ea);
      this.listenToOnce(ea, 'sync', function() {
        if (_.all((function() {
          var l, len3, ref2, results;
          ref2 = this.newEarnedAchievements;
          results = [];
          for (l = 0, len3 = ref2.length; l < len3; l++) {
            ea = ref2[l];
            results.push(ea.id);
          }
          return results;
        }).call(this))) {
          this.newEarnedAchievementsResource.markLoaded();
          this.listenToOnce(me, 'sync', function() {
            this.readyToContinue = true;
            return this.updateSavingProgressStatus();
          });
          if (!me.loading) {
            return me.fetch({
              cache: false
            });
          }
        }
      });
    }
    if (!hadOneCompleted) {
      this.readyToContinue = true;
    }
    if (this.newEarnedAchievements.length) {
      return this.newEarnedAchievementsResource = this.supermodel.addSomethingResource('earned achievements');
    }
  };

  HeroVictoryModal.prototype.getRenderData = function() {
    var achievedAmount, achievement, c, earnedAchievement, earnedAchievementMap, elapsed, enough, func, gameDevHoc, i, j, lastLevel, lastLevelOriginal, len, len1, pixelCode, previousAmount, proportionalTo, ref, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rewards, showDone, tooMuch;
    c = HeroVictoryModal.__super__.getRenderData.call(this);
    c.levelName = utils.i18n(this.level.attributes, 'name');
    if (this.level.isType('hero', 'game-dev', 'web-dev')) {
      c.victoryText = utils.i18n((ref = this.level.get('victory')) != null ? ref : {}, 'body');
    }
    earnedAchievementMap = _.indexBy(this.newEarnedAchievements || [], function(ea) {
      return ea.get('achievement');
    });
    ref2 = ((ref1 = this.achievements) != null ? ref1.models : void 0) || [];
    for (i = 0, len = ref2.length; i < len; i++) {
      achievement = ref2[i];
      earnedAchievement = earnedAchievementMap[achievement.id];
      if (earnedAchievement) {
        achievement.completedAWhileAgo = new Date().getTime() - Date.parse(earnedAchievement.attributes.changed) > 30 * 1000;
      }
      achievement.worth = achievement.get('worth', true);
      achievement.gems = (ref3 = achievement.get('rewards')) != null ? ref3.gems : void 0;
    }
    c.achievements = ((ref4 = this.achievements) != null ? ref4.models.slice() : void 0) || [];
    ref5 = c.achievements;
    for (j = 0, len1 = ref5.length; j < len1; j++) {
      achievement = ref5[j];
      achievement.description = utils.i18n(achievement.attributes, 'description');
      if (!(this.supermodel.finished() && (proportionalTo = achievement.get('proportionalTo')))) {
        continue;
      }
      achievedAmount = utils.getByPath(this.session.attributes, proportionalTo);
      previousAmount = Math.max(0, achievedAmount - 1);
      func = achievement.getExpFunction();
      achievement.previousWorth = ((ref6 = achievement.get('worth')) != null ? ref6 : 0) * func(previousAmount);
      achievement.worth = ((ref7 = achievement.get('worth')) != null ? ref7 : 0) * func(achievedAmount);
      rewards = achievement.get('rewards');
      if (rewards != null ? rewards.gems : void 0) {
        achievement.gems = (rewards != null ? rewards.gems : void 0) * func(achievedAmount);
      }
      if (rewards != null ? rewards.gems : void 0) {
        achievement.previousGems = (rewards != null ? rewards.gems : void 0) * func(previousAmount);
      }
    }
    c.thangTypes = this.thangTypes;
    c.me = me;
    c.readyToRank = this.level.isType('hero-ladder', 'course-ladder') && this.session.readyToRank();
    c.level = this.level;
    c.i18n = utils.i18n;
    elapsed = new Date() - new Date(me.get('dateCreated'));
    if (me.get('hourOfCode')) {
      gameDevHoc = storage.load('should-return-to-game-dev-hoc');
      lastLevelOriginal = gameDevHoc ? '57ee6f5786cf4e1f00afca2c' : '541c9a30c6362edfb0f34479';
      lastLevel = this.level.get('original') === lastLevelOriginal;
      enough = elapsed >= 20 * 60 * 1000 || lastLevel;
      tooMuch = elapsed > 120 * 60 * 1000;
      showDone = (elapsed >= 30 * 60 * 1000 && !tooMuch) || lastLevel;
      if (enough && !tooMuch && !me.get('hourOfCodeComplete')) {
        pixelCode = gameDevHoc ? 'code_combat_gamedev' : 'code_combat';
        $('body').append($("<img src='https://code.org/api/hour/finish_" + pixelCode + ".png' style='visibility: hidden;'>"));
        me.set('hourOfCodeComplete', true);
        me.patch();
        if ((ref8 = window.tracker) != null) {
          ref8.trackEvent('Hour of Code Finish');
        }
      }
      c.showHourOfCodeDoneButton = showDone;
      this.showHoc2016ExploreButton = gameDevHoc && lastLevel;
    }
    c.showLeaderboard = ((ref9 = this.level.get('scoreTypes')) != null ? ref9.length : void 0) > 0 && !this.level.isType('course');
    c.showReturnToCourse = !c.showLeaderboard && !me.get('anonymous') && this.level.isType('course', 'course-ladder');
    c.isCourseLevel = this.level.isType('course');
    c.currentCourseName = (ref10 = this.course) != null ? ref10.get('name') : void 0;
    c.currentLevelName = (ref11 = this.level) != null ? ref11.get('name') : void 0;
    c.nextLevelName = (ref12 = this.nextLevel) != null ? ref12.get('name') : void 0;
    return c;
  };

  HeroVictoryModal.prototype.afterRender = function() {
    var hero, original, ref;
    HeroVictoryModal.__super__.afterRender.call(this);
    this.$el.toggleClass('with-achievements', this.level.isType('hero', 'hero-ladder', 'game-dev', 'web-dev'));
    if (!this.supermodel.finished()) {
      return;
    }
    ref = this.thangTypes;
    for (original in ref) {
      hero = ref[original];
      this.playSelectionSound(hero, true);
    }
    this.updateSavingProgressStatus();
    this.initializeAnimations();
    if (this.level.isType('hero-ladder', 'course-ladder')) {
      this.ladderSubmissionView = new LadderSubmissionView({
        session: this.session,
        level: this.level
      });
      return this.insertSubView(this.ladderSubmissionView, this.$el.find('.ladder-submission-view'));
    }
  };

  HeroVictoryModal.prototype.initializeAnimations = function() {
    var complete, i, len, panel, panels;
    if (!this.level.isType('hero', 'hero-ladder', 'game-dev', 'web-dev')) {
      return this.endSequentialAnimations();
    }
    this.updateXPBars(0);
    this.$el.find('#victory-header').delay(250).queue(function() {
      return $(this).removeClass('out').dequeue();
    });
    complete = _.once(_.bind(this.beginSequentialAnimations, this));
    this.animatedPanels = $();
    panels = this.$el.find('.achievement-panel');
    for (i = 0, len = panels.length; i < len; i++) {
      panel = panels[i];
      panel = $(panel);
      if (!panel.data('animate')) {
        continue;
      }
      this.animatedPanels = this.animatedPanels.add(panel);
      panel.delay(500);
      panel.queue(function() {
        $(this).addClass('earned');
        return $(this).dequeue();
      });
      panel.delay(500);
      panel.queue(function() {
        $(this).find('.reward-image-container').addClass('show');
        return $(this).dequeue();
      });
      panel.delay(500);
      panel.queue(function() {
        return complete();
      });
    }
    this.animationComplete = !this.animatedPanels.length;
    if (this.animationComplete) {
      return complete();
    }
  };

  HeroVictoryModal.prototype.beginSequentialAnimations = function() {
    var i, j, len, len1, panel, ref, ref1;
    if (this.destroyed) {
      return;
    }
    if (!this.level.isType('hero', 'hero-ladder', 'game-dev', 'web-dev')) {
      return;
    }
    this.sequentialAnimatedPanels = _.map(this.animatedPanels.find('.reward-panel'), function(panel) {
      return {
        number: $(panel).data('number'),
        previousNumber: $(panel).data('previous-number'),
        textEl: $(panel).find('.reward-text'),
        rootEl: $(panel),
        unit: $(panel).data('number-unit'),
        hero: $(panel).data('hero-thang-type'),
        item: $(panel).data('item-thang-type')
      };
    });
    this.totalXP = 0;
    ref = this.sequentialAnimatedPanels;
    for (i = 0, len = ref.length; i < len; i++) {
      panel = ref[i];
      if (panel.unit === 'xp') {
        this.totalXP += panel.number;
      }
    }
    this.totalGems = 0;
    ref1 = this.sequentialAnimatedPanels;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      panel = ref1[j];
      if (panel.unit === 'gem') {
        this.totalGems += panel.number;
      }
    }
    this.gemEl = $('#gem-total');
    this.XPEl = $('#xp-total');
    this.totalXPAnimated = this.totalGemsAnimated = this.lastTotalXP = this.lastTotalGems = 0;
    this.sequentialAnimationStart = new Date();
    return this.sequentialAnimationInterval = setInterval(this.tickSequentialAnimation, 1000 / 60);
  };

  HeroVictoryModal.prototype.tickSequentialAnimation = function() {
    var duration, gemTrigger, newGems, newXP, panel, ratio, thangType, totalGems, totalXP, xpTrigger;
    if (!(panel = this.sequentialAnimatedPanels[0])) {
      return this.endSequentialAnimations();
    }
    if (panel.number) {
      duration = Math.log(panel.number + 1) / Math.LN10 * 1000;
    } else {
      duration = 1000;
    }
    ratio = this.getEaseRatio(new Date() - this.sequentialAnimationStart, duration);
    if (panel.unit === 'xp') {
      newXP = Math.floor(ratio * (panel.number - panel.previousNumber));
      totalXP = this.totalXPAnimated + newXP;
      if (totalXP !== this.lastTotalXP) {
        panel.textEl.text('+' + newXP);
        this.XPEl.text(totalXP);
        this.updateXPBars(totalXP);
        xpTrigger = 'xp-' + (totalXP % 6);
        this.playSound(xpTrigger, 0.5 + ratio / 2);
        if (totalXP >= 1000 && this.lastTotalXP < 1000) {
          this.XPEl.addClass('four-digits');
        }
        if (totalXP >= 10000 && this.lastTotalXP < 10000) {
          this.XPEl.addClass('five-digits');
        }
        this.lastTotalXP = totalXP;
      }
    } else if (panel.unit === 'gem') {
      newGems = Math.floor(ratio * (panel.number - panel.previousNumber));
      totalGems = this.totalGemsAnimated + newGems;
      if (totalGems !== this.lastTotalGems) {
        panel.textEl.text('+' + newGems);
        this.gemEl.text(totalGems);
        gemTrigger = 'gem-' + (parseInt(panel.number * ratio) % 4);
        this.playSound(gemTrigger, 0.5 + ratio / 2);
        if (totalGems >= 1000 && this.lastTotalGems < 1000) {
          this.gemEl.addClass('four-digits');
        }
        if (totalGems >= 10000 && this.lastTotalGems < 10000) {
          this.gemEl.addClass('five-digits');
        }
        this.lastTotalGems = totalGems;
      }
    } else if (panel.item) {
      thangType = this.thangTypes[panel.item];
      panel.textEl.text(utils.i18n(thangType.attributes, 'name'));
      if ((0.5 < ratio && ratio < 0.6)) {
        this.playSound('item-unlocked');
      }
    } else if (panel.hero) {
      thangType = this.thangTypes[panel.hero];
      panel.textEl.text(utils.i18n(thangType.attributes, 'name'));
      if ((0.5 < ratio && ratio < 0.6)) {
        this.playSelectionSound(thangType);
      }
    }
    if (ratio === 1) {
      panel.rootEl.removeClass('animating').find('.reward-image-container img').removeClass('pulse');
      this.sequentialAnimationStart = new Date();
      if (panel.unit === 'xp') {
        this.totalXPAnimated += panel.number - panel.previousNumber;
      } else if (panel.unit === 'gem') {
        this.totalGemsAnimated += panel.number - panel.previousNumber;
      }
      this.sequentialAnimatedPanels.shift();
      return;
    }
    return panel.rootEl.addClass('animating').find('.reward-image-container').removeClass('pending-reward-image').find('img').addClass('pulse');
  };

  HeroVictoryModal.prototype.getEaseRatio = function(timeSinceStart, duration) {
    var t;
    timeSinceStart = Math.min(timeSinceStart, duration);
    t = 2 * timeSinceStart / duration;
    if (t < 1) {
      return 0.5 * t * t;
    }
    --t;
    return -0.5 * (t * (t - 2) - 1);
  };

  HeroVictoryModal.prototype.updateXPBars = function(achievedXP) {
    var alreadyAchievedPercentage, currentLevel, currentLevelXP, currentXP, levelLabel, leveledUp, newlyAchievedPercentage, nextLevel, nextLevelXP, previousLevel, previousXP, totalXPNeeded, xpBarJustEarned, xpBarTotal, xpEl;
    previousXP = this.previousXP;
    if (me.isInGodMode()) {
      previousXP = previousXP + 1000000;
    }
    previousLevel = this.previousLevel;
    currentXP = previousXP + achievedXP;
    currentLevel = User.levelFromExp(currentXP);
    currentLevelXP = User.expForLevel(currentLevel);
    nextLevel = currentLevel + 1;
    nextLevelXP = User.expForLevel(nextLevel);
    leveledUp = currentLevel > previousLevel;
    totalXPNeeded = nextLevelXP - currentLevelXP;
    alreadyAchievedPercentage = 100 * (previousXP - currentLevelXP) / totalXPNeeded;
    if (alreadyAchievedPercentage < 0) {
      alreadyAchievedPercentage = 0;
    }
    if (leveledUp) {
      newlyAchievedPercentage = 100 * (currentXP - currentLevelXP) / totalXPNeeded;
    } else {
      newlyAchievedPercentage = 100 * achievedXP / totalXPNeeded;
    }
    xpEl = $('#xp-wrapper');
    xpBarJustEarned = xpEl.find('.xp-bar-already-achieved').css('width', alreadyAchievedPercentage + '%');
    xpBarTotal = xpEl.find('.xp-bar-total').css('width', (alreadyAchievedPercentage + newlyAchievedPercentage) + '%');
    levelLabel = xpEl.find('.level');
    utils.replaceText(levelLabel, currentLevel);
    if (leveledUp && (!this.displayedLevel || currentLevel > this.displayedLevel)) {
      this.playSound('level-up');
    }
    return this.displayedLevel = currentLevel;
  };

  HeroVictoryModal.prototype.endSequentialAnimations = function() {
    clearInterval(this.sequentialAnimationInterval);
    this.animationComplete = true;
    this.updateSavingProgressStatus();
    return Backbone.Mediator.publish('music-player:enter-menu', {
      terrain: this.level.get('terrain', true) || 'forest'
    });
  };

  HeroVictoryModal.prototype.updateSavingProgressStatus = function() {
    this.$el.find('#saving-progress-label').toggleClass('hide', this.readyToContinue);
    this.$el.find('.next-level-button').toggleClass('hide', !this.readyToContinue);
    return this.$el.find('.sign-up-poke').toggleClass('hide', !this.readyToContinue);
  };

  HeroVictoryModal.prototype.onGameSubmitted = function(e) {
    return this.returnToLadder();
  };

  HeroVictoryModal.prototype.returnToLadder = function() {
    var ladderURL, leagueID, leagueType, viewArgs;
    viewArgs = [
      {
        supermodel: this.options.hasReceivedMemoryWarning ? null : this.supermodel
      }, this.level.get('slug')
    ];
    ladderURL = "/play/ladder/" + (this.level.get('slug') || this.level.id);
    if (leagueID = this.courseInstanceID || this.getQueryVariable('league')) {
      leagueType = this.level.isType('course-ladder') ? 'course' : 'clan';
      viewArgs.push(leagueType);
      viewArgs.push(leagueID);
      ladderURL += "/" + leagueType + "/" + leagueID;
    }
    ladderURL += '#my-matches';
    return Backbone.Mediator.publish('router:navigate', {
      route: ladderURL,
      viewClass: 'views/ladder/LadderView',
      viewArgs: viewArgs
    });
  };

  HeroVictoryModal.prototype.playSelectionSound = function(hero, preload) {
    var name, ref, sound, sounds;
    if (preload == null) {
      preload = false;
    }
    if (!(sounds = (ref = hero.get('soundTriggers')) != null ? ref.selected : void 0)) {
      return;
    }
    if (!(sound = sounds[Math.floor(Math.random() * sounds.length)])) {
      return;
    }
    name = AudioPlayer.nameForSoundReference(sound);
    if (preload) {
      return AudioPlayer.preloadSoundReference(sound);
    } else {
      return AudioPlayer.playSound(name, 1);
    }
  };

  HeroVictoryModal.prototype.getNextLevelCampaign = function() {
    var campaign, ref, ref1;
    campaign = this.level.get('campaign');
    if (ref = this.level.get('slug'), indexOf.call(campaignEndLevels, ref) >= 0) {
      campaign = '';
    }
    if ((campaign === 'dungeon' || ((ref1 = this.level.get('slug')) === 'kithgard-gates' || ref1 === 'game-grove')) && storage.load('should-return-to-game-dev-hoc')) {
      campaign = 'game-dev-hoc';
    }
    return campaign;
  };

  HeroVictoryModal.prototype.getNextLevelLink = function(returnToCourse) {
    var link, nextCampaign;
    if (returnToCourse == null) {
      returnToCourse = false;
    }
    if (this.level.isType('course')) {
      link = "/students";
      if (this.courseID) {
        link += "/" + this.courseID;
        if (this.courseInstanceID) {
          link += "/" + this.courseInstanceID;
        }
      }
    } else {
      link = '/play';
      nextCampaign = this.getNextLevelCampaign();
      link += '/' + nextCampaign;
    }
    return link;
  };

  HeroVictoryModal.prototype.onClickContinue = function(e, extraOptions) {
    var leagueID, navigationEvent, nextLevelLink, options, ref, ref1, viewArgs, viewClass;
    if (extraOptions == null) {
      extraOptions = null;
    }
    this.playSound('menu-button-click');
    nextLevelLink = this.getNextLevelLink(extraOptions != null ? extraOptions.returnToCourse : void 0);
    options = {
      justBeatLevel: this.level,
      supermodel: this.options.hasReceivedMemoryWarning ? null : this.supermodel
    };
    if (extraOptions) {
      _.merge(options, extraOptions);
    }
    if (this.showHoc2016ExploreButton) {
      nextLevelLink = '/play';
      viewClass = 'views/play/CampaignView';
      viewArgs = [options];
    } else if (this.level.isType('course') && this.nextLevel && !options.returnToCourse) {
      viewClass = 'views/play/level/PlayLevelView';
      options.courseID = this.courseID;
      options.courseInstanceID = this.courseInstanceID;
      viewArgs = [options, this.nextLevel.get('slug')];
    } else if (this.level.isType('course')) {
      viewClass = 'views/courses/CoursesView';
      viewArgs = [options];
      if (this.courseID) {
        viewClass = 'views/courses/CourseDetailsView';
        viewArgs.push(this.courseID);
        if (this.courseInstanceID) {
          viewArgs.push(this.courseInstanceID);
        }
      }
    } else if (this.level.isType('course-ladder')) {
      leagueID = this.courseInstanceID || this.getQueryVariable('league');
      nextLevelLink = "/play/ladder/" + (this.level.get('slug'));
      if (leagueID) {
        nextLevelLink += "/course/" + leagueID;
      }
      viewClass = 'views/ladder/LadderView';
      viewArgs = [options, this.level.get('slug')];
      if (leagueID) {
        viewArgs = viewArgs.concat(['course', leagueID]);
      }
    } else {
      if (ref = this.level.get('slug'), indexOf.call(campaignEndLevels, ref) >= 0) {
        options.worldComplete = this.level.get('campaign') || true;
      }
      viewClass = 'views/play/CampaignView';
      viewArgs = [options, this.getNextLevelCampaign()];
    }
    navigationEvent = {
      route: nextLevelLink,
      viewClass: viewClass,
      viewArgs: viewArgs
    };
    if (this.level.get('slug') === 'lost-viking' && !((ref1 = me.get('age')) === '0-13' || ref1 === '14-17')) {
      return this.showOffer(navigationEvent);
    } else {
      return Backbone.Mediator.publish('router:navigate', navigationEvent);
    }
  };

  HeroVictoryModal.prototype.onClickLeaderboard = function(e) {
    return this.onClickContinue(e, {
      showLeaderboard: true
    });
  };

  HeroVictoryModal.prototype.onClickReturnToCourse = function(e) {
    return this.onClickContinue(e, {
      returnToCourse: true
    });
  };

  HeroVictoryModal.prototype.onClickReturnToLadder = function(e) {
    this.playSound('menu-button-click');
    e.preventDefault();
    return this.returnToLadder();
  };

  HeroVictoryModal.prototype.onClickSignupButton = function(e) {
    var ref;
    e.preventDefault();
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Started Signup', {
        category: 'Play Level',
        label: 'Hero Victory Modal',
        level: this.level.get('slug')
      });
    }
    return this.openModalView(new CreateAccountModal());
  };

  HeroVictoryModal.prototype.showOffer = function(navigationEventUponCompletion) {
    this.navigationEventUponCompletion = navigationEventUponCompletion;
    this.$el.find('.modal-footer > *').hide();
    return this.$el.find(".modal-footer > .offer." + (this.level.get('slug'))).show();
  };

  HeroVictoryModal.prototype.onClickContinueFromOffer = function(e) {
    var url;
    url = {
      'lost-viking': 'http://www.vikingcodeschool.com/codecombat?utm_source=codecombat&utm_medium=viking_level&utm_campaign=affiliate&ref=Code+Combat+Elite'
    }[this.level.get('slug')];
    Backbone.Mediator.publish('router:navigate', this.navigationEventUponCompletion);
    if (url) {
      return window.open(url, '_blank');
    }
  };

  HeroVictoryModal.prototype.onClickSkipOffer = function(e) {
    return Backbone.Mediator.publish('router:navigate', this.navigationEventUponCompletion);
  };

  HeroVictoryModal.prototype.onClickShareLevelButton = function() {
    this.$('#share-level-input').val(this.shareURL).select();
    return this.tryCopy();
  };

  HeroVictoryModal.prototype.starNum = function(starEl) {
    return starEl.prevAll('i').length + 1;
  };

  HeroVictoryModal.prototype.showStars = function(num) {
    var ref, stars;
    this.$el.find('.rating').show();
    if (num == null) {
      num = ((ref = this.feedback) != null ? ref.get('rating') : void 0) || 0;
    }
    stars = this.$el.find('.rating i');
    stars.removeClass('glyphicon-star').addClass('glyphicon-star-empty');
    return stars.slice(0, num).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
  };

  HeroVictoryModal.prototype.setStars = function(num) {
    this.feedback.set('rating', num);
    return this.feedback.save();
  };

  HeroVictoryModal.prototype.saveReviewEventually = function() {
    return this.saveReview();
  };

  HeroVictoryModal.prototype.saveReview = function() {
    this.feedback.set('review', this.$el.find('.review textarea').val());
    return this.feedback.save();
  };

  return HeroVictoryModal;

})(ModalView);

campaignEndLevels = ['kithgard-gates', 'kithgard-mastery', 'tabula-rasa', 'wanted-poster', 'siege-of-stonehold', 'go-fetch', 'palimpsest', 'quizlet', 'clash-of-clones', 'summits-gate'];
});

;require.register("views/play/level/modal/ImageGalleryModal", function(exports, require, module) {
var ImageGalleryModal, ModalView, State, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

State = require('models/State');

utils = require('core/utils');

module.exports = ImageGalleryModal = (function(superClass) {
  extend(ImageGalleryModal, superClass);

  function ImageGalleryModal() {
    return ImageGalleryModal.__super__.constructor.apply(this, arguments);
  }

  ImageGalleryModal.prototype.id = 'image-gallery-modal';

  ImageGalleryModal.prototype.template = require('templates/play/level/modal/image-gallery-modal');

  ImageGalleryModal.prototype.events = {
    'click .image-list-item': 'onClickImageListItem',
    'click .copy-url-button': 'onClickCopyUrlButton',
    'click .copy-tag-button': 'onClickCopyTagButton'
  };

  ImageGalleryModal.prototype.getRenderData = function() {
    return _.merge(ImageGalleryModal.__super__.getRenderData.apply(this, arguments), {
      utils: utils
    });
  };

  ImageGalleryModal.prototype.initialize = function() {
    this.state = new State();
    return this.listenTo(this.state, 'all', (function(_this) {
      return function() {
        _this.renderSelectors('.render');
        return _this.afterRender();
      };
    })(this));
  };

  ImageGalleryModal.prototype.afterRender = function() {
    if (utils.userAgent().indexOf("Mac") > -1) {
      this.$('.windows-only').addClass('hidden');
      return this.$('.mac-only').removeClass('hidden');
    }
  };

  ImageGalleryModal.prototype.onClickImageListItem = function(e) {
    var selectedUrl;
    selectedUrl = $(e.currentTarget).data('portrait-url');
    return this.state.set({
      selectedUrl: selectedUrl
    });
  };

  ImageGalleryModal.prototype.onClickCopyUrlButton = function(e) {
    $('.image-url').select();
    return this.tryCopy();
  };

  ImageGalleryModal.prototype.onClickCopyTagButton = function(e) {
    $('.image-tag').select();
    return this.tryCopy();
  };

  ImageGalleryModal.prototype.images = [
    {
      slug: 'archer-f',
      name: 'Archer F',
      original: '529ab1a24b67a988ad000002',
      portraitURL: '/file/db/thang.type/529ab1a24b67a988ad000002/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'archer-m',
      name: 'Archer M',
      original: '52cee45a76ebd5196b00003a',
      portraitURL: '/file/db/thang.type/52cee45a76ebd5196b00003a/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'artist',
      name: 'Artist',
      original: '56d0c4f601476e2100de76c0',
      portraitURL: '/file/db/thang.type/56d0c4f601476e2100de76c0/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'assassin',
      name: 'Assassin',
      original: '566a2202e132c81f00f38c81',
      portraitURL: '/file/db/thang.type/566a2202e132c81f00f38c81/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'baby-griffin',
      name: 'baby griffin',
      original: '57586f0a22179b2800efda37',
      portraitURL: '/file/db/thang.type/57586f0a22179b2800efda37/portrait.png',
      kind: 'Item'
    }, {
      slug: 'basic-flags',
      name: 'Basic Flags',
      original: '545bacb41e649a4495f887da',
      portraitURL: '/file/db/thang.type/545bacb41e649a4495f887da/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boom-ball',
      name: 'Boom Ball',
      original: '54eb540b49fa2d5c905ddf1a',
      portraitURL: '/file/db/thang.type/54eb540b49fa2d5c905ddf1a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'breaker',
      name: 'Breaker',
      original: '56d0dd5b441ddd2f002ba3d8',
      portraitURL: '/file/db/thang.type/56d0dd5b441ddd2f002ba3d8/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'burl',
      name: 'Burl',
      original: '530e5926c06854403ba68693',
      portraitURL: '/file/db/thang.type/530e5926c06854403ba68693/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'captain',
      name: 'Captain',
      original: '529ec584c423d4e83b000014',
      portraitURL: '/file/db/thang.type/529ec584c423d4e83b000014/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'champion',
      name: 'Champion',
      original: '575848b522179b2800efbfbf',
      portraitURL: '/file/db/thang.type/575848b522179b2800efbfbf/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'chest-of-gems',
      name: 'Chest of Gems',
      original: '5432f9d18364d30000d1f943',
      portraitURL: '/file/db/thang.type/5432f9d18364d30000d1f943/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'confuse',
      name: 'Confuse',
      original: '53024b76a6efdd32359c5340',
      portraitURL: '/file/db/thang.type/53024b76a6efdd32359c5340/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'control',
      name: 'Control',
      original: '53024c7b27471514685d5397',
      portraitURL: '/file/db/thang.type/53024c7b27471514685d5397/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'cougar',
      name: 'Cougar',
      original: '5744e3683af6bf590cd27371',
      portraitURL: '/file/db/thang.type/5744e3683af6bf590cd27371/portrait.png',
      kind: 'Item'
    }, {
      slug: 'cow',
      name: 'Cow',
      original: '52e95a5022efc8e709001743',
      portraitURL: '/file/db/thang.type/52e95a5022efc8e709001743/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dantdm',
      name: 'DanTDM',
      original: '578674c3a6c641350091b645',
      portraitURL: '/file/db/thang.type/578674c3a6c641350091b645/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'desert-bones-2',
      name: 'Desert Bones 2',
      original: '548cf11b0f559d0000be7e2b',
      portraitURL: '/file/db/thang.type/548cf11b0f559d0000be7e2b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'duelist',
      name: 'Duelist',
      original: '57588f09046caf2e0012ed41',
      portraitURL: '/file/db/thang.type/57588f09046caf2e0012ed41/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'equestrian',
      name: 'Equestrian',
      original: '52e95b4222efc8e70900175d',
      portraitURL: '/file/db/thang.type/52e95b4222efc8e70900175d/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'flower-1',
      name: 'Flower 1',
      original: '54e951c8f54ef5794f354ed1',
      portraitURL: '/file/db/thang.type/54e951c8f54ef5794f354ed1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-2',
      name: 'Flower 2',
      original: '54e9525ff54ef5794f354ed5',
      portraitURL: '/file/db/thang.type/54e9525ff54ef5794f354ed5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-3',
      name: 'Flower 3',
      original: '54e95293f54ef5794f354ed9',
      portraitURL: '/file/db/thang.type/54e95293f54ef5794f354ed9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-4',
      name: 'Flower 4',
      original: '54e952b7f54ef5794f354edd',
      portraitURL: '/file/db/thang.type/54e952b7f54ef5794f354edd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-5',
      name: 'Flower 5',
      original: '54e952daf54ef5794f354ee1',
      portraitURL: '/file/db/thang.type/54e952daf54ef5794f354ee1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-6',
      name: 'Flower 6',
      original: '54e95308f54ef5794f354ee5',
      portraitURL: '/file/db/thang.type/54e95308f54ef5794f354ee5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-7',
      name: 'Flower 7',
      original: '54e9532ff54ef5794f354ee9',
      portraitURL: '/file/db/thang.type/54e9532ff54ef5794f354ee9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'flower-8',
      name: 'Flower 8',
      original: '54e9534ef54ef5794f354eed',
      portraitURL: '/file/db/thang.type/54e9534ef54ef5794f354eed/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'forest-archer',
      name: 'Forest Archer',
      original: '5466d4f2417c8b48a9811e87',
      portraitURL: '/file/db/thang.type/5466d4f2417c8b48a9811e87/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'frozen-munchkin',
      name: 'Frozen Munchkin',
      original: '5576686e1e82182d9e6889bb',
      portraitURL: '/file/db/thang.type/5576686e1e82182d9e6889bb/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'frozen-soldier-f',
      name: 'Frozen Soldier F',
      original: '5576683e1e82182d9e6889b7',
      portraitURL: '/file/db/thang.type/5576683e1e82182d9e6889b7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'frozen-soldier-m',
      name: 'Frozen Soldier M',
      original: '557662bf1e82182d9e6889af',
      portraitURL: '/file/db/thang.type/557662bf1e82182d9e6889af/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'gem',
      name: 'Gem',
      original: '52aa3b9eccbd588d4d000003',
      portraitURL: '/file/db/thang.type/52aa3b9eccbd588d4d000003/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'gold-coin',
      name: 'Gold Coin',
      original: '535ef031c519160709f2f63a',
      portraitURL: '/file/db/thang.type/535ef031c519160709f2f63a/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'goliath',
      name: 'Goliath',
      original: '55e1a6e876cb0948c96af9f8',
      portraitURL: '/file/db/thang.type/55e1a6e876cb0948c96af9f8/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'guardian',
      name: 'Guardian',
      original: '566a058620de41290036a745',
      portraitURL: '/file/db/thang.type/566a058620de41290036a745/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'horse',
      name: 'Horse',
      original: '52e989a4427172ae56001f04',
      portraitURL: '/file/db/thang.type/52e989a4427172ae56001f04/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'knight',
      name: 'Knight',
      original: '529ffbf1cf1818f2be000001',
      portraitURL: '/file/db/thang.type/529ffbf1cf1818f2be000001/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'librarian',
      name: 'Librarian',
      original: '52fbf74b7e01835453bd8d8e',
      portraitURL: '/file/db/thang.type/52fbf74b7e01835453bd8d8e/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'necromancer',
      name: 'Necromancer',
      original: '55652fb3b9effa46a1f775fd',
      portraitURL: '/file/db/thang.type/55652fb3b9effa46a1f775fd/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'ninja',
      name: 'Ninja',
      original: '52fc0ed77e01835453bd8f6c',
      portraitURL: '/file/db/thang.type/52fc0ed77e01835453bd8f6c/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'ogre-brawler',
      name: 'Ogre Brawler',
      original: '529e5ee76febb9ca7e00000b',
      portraitURL: '/file/db/thang.type/529e5ee76febb9ca7e00000b/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-chieftain',
      name: 'Ogre Chieftain',
      original: '55370661428ddac5686fd026',
      portraitURL: '/file/db/thang.type/55370661428ddac5686fd026/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-f',
      name: 'Ogre F',
      original: '52cedd3e0b0d5c1b4c003ec6',
      portraitURL: '/file/db/thang.type/52cedd3e0b0d5c1b4c003ec6/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-fangrider',
      name: 'Ogre Fangrider',
      original: '529e5f0c6febb9ca7e00000c',
      portraitURL: '/file/db/thang.type/529e5f0c6febb9ca7e00000c/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-headhunter',
      name: 'Ogre Headhunter',
      original: '54c96c3cdef3ad363ff998a1',
      portraitURL: '/file/db/thang.type/54c96c3cdef3ad363ff998a1/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-m',
      name: 'Ogre M',
      original: '529e40856febb9ca7e000004',
      portraitURL: '/file/db/thang.type/529e40856febb9ca7e000004/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-munchkin-f',
      name: 'Ogre Munchkin F',
      original: '52cee1d976ebd5196b000038',
      portraitURL: '/file/db/thang.type/52cee1d976ebd5196b000038/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-munchkin-m',
      name: 'Ogre Munchkin M',
      original: '529e5d756febb9ca7e00000a',
      portraitURL: '/file/db/thang.type/529e5d756febb9ca7e00000a/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-shaman',
      name: 'Ogre Shaman',
      original: '529f92f9dacd325127000008',
      portraitURL: '/file/db/thang.type/529f92f9dacd325127000008/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-thrower',
      name: 'Ogre Thrower',
      original: '529fff23cf1818f2be000003',
      portraitURL: '/file/db/thang.type/529fff23cf1818f2be000003/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-warlock',
      name: 'Ogre Warlock',
      original: '5536f88c428ddac5686fd00c',
      portraitURL: '/file/db/thang.type/5536f88c428ddac5686fd00c/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-witch',
      name: 'Ogre Witch',
      original: '5536ce98428ddac5686fcfd3',
      portraitURL: '/file/db/thang.type/5536ce98428ddac5686fcfd3/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'oracle',
      name: 'Oracle',
      original: '56d0cfa063103d2a00af5449',
      portraitURL: '/file/db/thang.type/56d0cfa063103d2a00af5449/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'paladin',
      name: 'Paladin',
      original: '552be965c54551e79b57b766',
      portraitURL: '/file/db/thang.type/552be965c54551e79b57b766/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'peasant-f',
      name: 'Peasant F',
      original: '52d48f02d0ce9936e2000005',
      portraitURL: '/file/db/thang.type/52d48f02d0ce9936e2000005/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'peasant-m',
      name: 'Peasant M',
      original: '529f9026dacd325127000005',
      portraitURL: '/file/db/thang.type/529f9026dacd325127000005/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'polar-bear-cub',
      name: 'Polar Bear Cub',
      original: '578691f9bd31c1440083251d',
      portraitURL: '/file/db/thang.type/578691f9bd31c1440083251d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'potion-master',
      name: 'Potion Master',
      original: '52e9adf7427172ae56002172',
      portraitURL: '/file/db/thang.type/52e9adf7427172ae56002172/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'pugicorn',
      name: 'Pugicorn',
      original: '577d5d4dab818b210046b3bf',
      portraitURL: '/file/db/thang.type/577d5d4dab818b210046b3bf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'raider',
      name: 'Raider',
      original: '55527eb0b8abf4ba1fe9a107',
      portraitURL: '/file/db/thang.type/55527eb0b8abf4ba1fe9a107/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'raven',
      name: 'Raven',
      original: '5786a472a6c64135009238d3',
      portraitURL: '/file/db/thang.type/5786a472a6c64135009238d3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'raven-pet',
      name: 'Raven Pet',
      original: '540f389a821af8000097dc5a',
      portraitURL: '/file/db/thang.type/540f389a821af8000097dc5a/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'razordisc',
      name: 'Razordisc',
      original: '54eb4d5949fa2d5c905ddf06',
      portraitURL: '/file/db/thang.type/54eb4d5949fa2d5c905ddf06/portrait.png',
      kind: 'Item'
    }, {
      slug: 'samurai',
      name: 'Samurai',
      original: '53e12be0d042f23505c3023b',
      portraitURL: '/file/db/thang.type/53e12be0d042f23505c3023b/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'skeleton',
      name: 'Skeleton',
      original: '54c83b8ae2829db30d0310e0',
      portraitURL: '/file/db/thang.type/54c83b8ae2829db30d0310e0/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'soldier-f',
      name: 'Soldier F',
      original: '52d49552d0ce9936e2000007',
      portraitURL: '/file/db/thang.type/52d49552d0ce9936e2000007/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'soldier-m',
      name: 'Soldier M',
      original: '529e680ac423d4e83b000001',
      portraitURL: '/file/db/thang.type/529e680ac423d4e83b000001/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'sorcerer',
      name: 'Sorcerer',
      original: '52fd1524c7e6cf99160e7bc9',
      portraitURL: '/file/db/thang.type/52fd1524c7e6cf99160e7bc9/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'target',
      name: 'Target',
      original: '52b32ad97385ec3d03000001',
      portraitURL: '/file/db/thang.type/52b32ad97385ec3d03000001/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'thoktar',
      name: 'Thoktar',
      original: '52a00542cf1818f2be000006',
      portraitURL: '/file/db/thang.type/52a00542cf1818f2be000006/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'tinker',
      name: 'Tinker',
      original: '56cdd89be906e72400f13451',
      portraitURL: '/file/db/thang.type/56cdd89be906e72400f13451/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'trapper',
      name: 'Trapper',
      original: '5466d449417c8b48a9811e83',
      portraitURL: '/file/db/thang.type/5466d449417c8b48a9811e83/portrait.png',
      kind: 'Hero'
    }, {
      slug: 'wizard',
      name: 'Wizard',
      original: '52a00d55cf1818f2be00000b',
      portraitURL: '/file/db/thang.type/52a00d55cf1818f2be00000b/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wyrm',
      name: 'Wyrm',
      original: '56ba2b34e942de2600c792ed',
      portraitURL: '/file/db/thang.type/56ba2b34e942de2600c792ed/portrait.png',
      kind: 'Unit'
    }
  ];

  ImageGalleryModal.prototype.otherImages = [
    {
      slug: 'hero-placeholder',
      name: 'Hero Placeholder',
      original: '53ed1d9c2b65b0e32b9c96a9',
      portraitURL: '/file/db/thang.type/53ed1d9c2b65b0e32b9c96a9/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'flag',
      name: 'Flag',
      original: '53fa25f25bc220000052c2be',
      portraitURL: '/file/db/thang.type/53fa25f25bc220000052c2be/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'ace-of-coders-background',
      name: 'Ace of Coders Background',
      original: '55ef24a10e11a95a0d0ab103',
      portraitURL: '/file/db/thang.type/55ef24a10e11a95a0d0ab103/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'advanced-flags',
      name: 'Advanced Flags',
      original: '5478b97e8707a2c3a2493b2f',
      portraitURL: '/file/db/thang.type/5478b97e8707a2c3a2493b2f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'aerial-spear',
      name: 'Aerial Spear',
      original: '5400da521130f1881ca255e4',
      portraitURL: '/file/db/thang.type/5400da521130f1881ca255e4/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'altar',
      name: 'Altar',
      original: '54ef8eb683b08b7d054b7f04',
      portraitURL: '/file/db/thang.type/54ef8eb683b08b7d054b7f04/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'amber-sense-stone',
      name: 'Amber Sense Stone',
      original: '54693413a2b1f53ce79443dd',
      portraitURL: '/file/db/thang.type/54693413a2b1f53ce79443dd/portrait.png',
      kind: 'Item'
    }, {
      slug: 'angel-fountain',
      name: 'Angel Fountain',
      original: '54f11438021968810565376b',
      portraitURL: '/file/db/thang.type/54f11438021968810565376b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'angel-statue',
      name: 'Angel Statue',
      original: '54f1152a021968810565378a',
      portraitURL: '/file/db/thang.type/54f1152a021968810565378a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'archway',
      name: 'Archway',
      original: '534dd3531a52ddd804f34efc',
      portraitURL: '/file/db/thang.type/534dd3531a52ddd804f34efc/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'arrow',
      name: 'Arrow',
      original: '529ce66b0bf0bccdc6000005',
      portraitURL: '/file/db/thang.type/529ce66b0bf0bccdc6000005/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'arrow-tower',
      name: 'Arrow Tower',
      original: '529f93cfdacd32512700000a',
      portraitURL: '/file/db/thang.type/529f93cfdacd32512700000a/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'artillery',
      name: 'Artillery',
      original: '529e7a16c423d4e83b000003',
      portraitURL: '/file/db/thang.type/529e7a16c423d4e83b000003/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'baby-griffin-pet',
      name: 'Baby Griffin Pet',
      original: '5750ef2f9f734c20005f1f57',
      portraitURL: '/file/db/thang.type/5750ef2f9f734c20005f1f57/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ball',
      name: 'Ball',
      original: '5580af39b43ce0b15a91b299',
      portraitURL: '/file/db/thang.type/5580af39b43ce0b15a91b299/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'balsa-staff',
      name: 'Balsa Staff',
      original: '544d88478494308424f56505',
      portraitURL: '/file/db/thang.type/544d88478494308424f56505/portrait.png',
      kind: 'Item'
    }, {
      slug: 'banded-redwood-wand',
      name: 'Banded Redwood Wand',
      original: '544d887c8494308424f56509',
      portraitURL: '/file/db/thang.type/544d887c8494308424f56509/portrait.png',
      kind: 'Item'
    }, {
      slug: 'barn',
      name: 'Barn',
      original: '54f1136f25be5e88058374b3',
      portraitURL: '/file/db/thang.type/54f1136f25be5e88058374b3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'barrel',
      name: 'Barrel',
      original: '52aa5ff120fccb0000000003',
      portraitURL: '/file/db/thang.type/52aa5ff120fccb0000000003/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'barrel-animated',
      name: 'Barrel Animated',
      original: '54d2b28e7e1b915605556c37',
      portraitURL: '/file/db/thang.type/54d2b28e7e1b915605556c37/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'barrel-animated-2',
      name: 'Barrel Animated 2',
      original: '54d2b4fdae912a520569cff1',
      portraitURL: '/file/db/thang.type/54d2b4fdae912a520569cff1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bat',
      name: 'Bat',
      original: '55c13175c87e47c60604f987',
      portraitURL: '/file/db/thang.type/55c13175c87e47c60604f987/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'beam',
      name: 'Beam',
      original: '529ec2cec423d4e83b000011',
      portraitURL: '/file/db/thang.type/529ec2cec423d4e83b000011/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'beam-tower',
      name: 'Beam Tower',
      original: '529ec0c1c423d4e83b00000d',
      portraitURL: '/file/db/thang.type/529ec0c1c423d4e83b00000d/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'bear',
      name: 'Bear',
      original: '54e95b22f54ef5794f354f41',
      portraitURL: '/file/db/thang.type/54e95b22f54ef5794f354f41/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bear-trap',
      name: 'Bear Trap',
      original: '54d2b8ef3e16915505f0bfeb',
      portraitURL: '/file/db/thang.type/54d2b8ef3e16915505f0bfeb/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'big-rocks-1',
      name: 'Big Rocks 1',
      original: '557f950db43ce0b15a91b1d9',
      portraitURL: '/file/db/thang.type/557f950db43ce0b15a91b1d9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'big-rocks-2',
      name: 'Big Rocks 2',
      original: '557f959ab43ce0b15a91b1dd',
      portraitURL: '/file/db/thang.type/557f959ab43ce0b15a91b1dd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'big-rocks-3',
      name: 'Big Rocks 3',
      original: '557f95e7b43ce0b15a91b1e1',
      portraitURL: '/file/db/thang.type/557f95e7b43ce0b15a91b1e1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'big-rocks-4',
      name: 'Big Rocks 4',
      original: '557f9627b43ce0b15a91b1e5',
      portraitURL: '/file/db/thang.type/557f9627b43ce0b15a91b1e5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'big-rocks-5',
      name: 'Big Rocks 5',
      original: '557f9661b43ce0b15a91b1e9',
      portraitURL: '/file/db/thang.type/557f9661b43ce0b15a91b1e9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bird',
      name: 'Bird',
      original: '53e2e31f6f406a3505b3eab0',
      portraitURL: '/file/db/thang.type/53e2e31f6f406a3505b3eab0/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bloodhenge',
      name: 'Bloodhenge',
      original: '54f1168802196881056537df',
      portraitURL: '/file/db/thang.type/54f1168802196881056537df/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'blue-cart',
      name: 'Blue Cart',
      original: '5435d3207b554def1f99c49c',
      portraitURL: '/file/db/thang.type/5435d3207b554def1f99c49c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bluff-1',
      name: 'Bluff 1',
      original: '52afce51c5b1813ec200001a',
      portraitURL: '/file/db/thang.type/52afce51c5b1813ec200001a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bluff-2',
      name: 'Bluff 2',
      original: '52afcecbc5b1813ec200001c',
      portraitURL: '/file/db/thang.type/52afcecbc5b1813ec200001c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bolt',
      name: 'Bolt',
      original: '55c658a8a03e2014d693990a',
      portraitURL: '/file/db/thang.type/55c658a8a03e2014d693990a/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'bolt-spitter',
      name: 'Bolt Spitter',
      original: '544d85d88494308424f564e4',
      portraitURL: '/file/db/thang.type/544d85d88494308424f564e4/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boltsaw',
      name: 'Boltsaw',
      original: '544d6f5e8494308424f56476',
      portraitURL: '/file/db/thang.type/544d6f5e8494308424f56476/portrait.png',
      kind: 'Item'
    }, {
      slug: 'bone-dagger',
      name: 'Bone Dagger',
      original: '54eb4b2249fa2d5c905ddefe',
      portraitURL: '/file/db/thang.type/54eb4b2249fa2d5c905ddefe/portrait.png',
      kind: 'Item'
    }, {
      slug: 'book-of-life-i',
      name: 'Book of Life I',
      original: '546375653839c6e02811d30b',
      portraitURL: '/file/db/thang.type/546375653839c6e02811d30b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'book-of-life-ii',
      name: 'Book of Life II',
      original: '546375813839c6e02811d30e',
      portraitURL: '/file/db/thang.type/546375813839c6e02811d30e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'book-of-life-iii',
      name: 'Book of Life III',
      original: '546375a43839c6e02811d311',
      portraitURL: '/file/db/thang.type/546375a43839c6e02811d311/portrait.png',
      kind: 'Item'
    }, {
      slug: 'book-of-life-iv',
      name: 'Book of Life IV',
      original: '546376ca3839c6e02811d31d',
      portraitURL: '/file/db/thang.type/546376ca3839c6e02811d31d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'book-of-life-v',
      name: 'Book of Life V',
      original: '546376ea3839c6e02811d320',
      portraitURL: '/file/db/thang.type/546376ea3839c6e02811d320/portrait.png',
      kind: 'Item'
    }, {
      slug: 'bookshelf',
      name: 'Bookshelf',
      original: '52e994ea427172ae56001fc9',
      portraitURL: '/file/db/thang.type/52e994ea427172ae56001fc9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bookshelf-2',
      name: 'Bookshelf 2',
      original: '54ef925a64112781056c18b5',
      portraitURL: '/file/db/thang.type/54ef925a64112781056c18b5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'boom-ball-missile',
      name: 'Boom Ball Missile',
      original: '5535b5d4428ddac5686fcf82',
      portraitURL: '/file/db/thang.type/5535b5d4428ddac5686fcf82/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'boomrod',
      name: 'Boomrod',
      original: '544d85898494308424f564df',
      portraitURL: '/file/db/thang.type/544d85898494308424f564df/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boots-of-jumping',
      name: 'Boots of Jumping',
      original: '546d4e289df4a17d0d449ad5',
      portraitURL: '/file/db/thang.type/546d4e289df4a17d0d449ad5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boots-of-leaping',
      name: 'Boots of Leaping',
      original: '53e214f153457600003e3eab',
      portraitURL: '/file/db/thang.type/53e214f153457600003e3eab/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boss-star-i',
      name: 'Boss Star I',
      original: '54eb58e449fa2d5c905ddf46',
      portraitURL: '/file/db/thang.type/54eb58e449fa2d5c905ddf46/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boss-star-ii',
      name: 'Boss Star II',
      original: '54eb5bf649fa2d5c905ddf4a',
      portraitURL: '/file/db/thang.type/54eb5bf649fa2d5c905ddf4a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boss-star-iii',
      name: 'Boss Star III',
      original: '54eb5c8f49fa2d5c905ddf4e',
      portraitURL: '/file/db/thang.type/54eb5c8f49fa2d5c905ddf4e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boss-star-iv',
      name: 'Boss Star IV',
      original: '54eb5d1649fa2d5c905ddf52',
      portraitURL: '/file/db/thang.type/54eb5d1649fa2d5c905ddf52/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boss-star-v',
      name: 'Boss Star V',
      original: '54eb5dbc49fa2d5c905ddf56',
      portraitURL: '/file/db/thang.type/54eb5dbc49fa2d5c905ddf56/portrait.png',
      kind: 'Item'
    }, {
      slug: 'boulder',
      name: 'Boulder',
      original: '544d86828494308424f564ec',
      portraitURL: '/file/db/thang.type/544d86828494308424f564ec/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'boulder-trap',
      name: 'Boulder Trap',
      original: '55c246b1dfc8d0b576e60a23',
      portraitURL: '/file/db/thang.type/55c246b1dfc8d0b576e60a23/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'box',
      name: 'Box',
      original: '54d2b68a3e16915505f0bc8a',
      portraitURL: '/file/db/thang.type/54d2b68a3e16915505f0bc8a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'box-2',
      name: 'Box 2',
      original: '54d2b797051a3a5305424c62',
      portraitURL: '/file/db/thang.type/54d2b797051a3a5305424c62/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'brawlwood',
      name: 'Brawlwood',
      original: '533b1f1642aef2202fdcc487',
      portraitURL: '/file/db/thang.type/533b1f1642aef2202fdcc487/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'breakout-background',
      name: 'Breakout Background',
      original: '56c65f8b79735337006047df',
      portraitURL: '/file/db/thang.type/56c65f8b79735337006047df/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'broken-tower',
      name: 'Broken Tower',
      original: '5376b2caff7b2d3805a396a9',
      portraitURL: '/file/db/thang.type/5376b2caff7b2d3805a396a9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'bronze-coin',
      name: 'Bronze Coin',
      original: '535ef2d54f10444d08486ba8',
      portraitURL: '/file/db/thang.type/535ef2d54f10444d08486ba8/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'bronze-shield',
      name: 'Bronze Shield',
      original: '544c310ae0017993fce214bf',
      portraitURL: '/file/db/thang.type/544c310ae0017993fce214bf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'bullet',
      name: 'Bullet',
      original: '544d82bd8494308424f564d0',
      portraitURL: '/file/db/thang.type/544d82bd8494308424f564d0/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'cabin-1',
      name: 'Cabin 1',
      original: '54e93b41970f0b0a263c0400',
      portraitURL: '/file/db/thang.type/54e93b41970f0b0a263c0400/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cabin-2',
      name: 'Cabin 2',
      original: '54e93cb4970f0b0a263c0406',
      portraitURL: '/file/db/thang.type/54e93cb4970f0b0a263c0406/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cabin-3',
      name: 'Cabin 3',
      original: '54e93d1cf54ef5794f354e7d',
      portraitURL: '/file/db/thang.type/54e93d1cf54ef5794f354e7d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cabin-4',
      name: 'Cabin 4',
      original: '54e93db7f54ef5794f354e83',
      portraitURL: '/file/db/thang.type/54e93db7f54ef5794f354e83/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cabinet',
      name: 'Cabinet',
      original: '54ef9101c1f3bd7c0593f232',
      portraitURL: '/file/db/thang.type/54ef9101c1f3bd7c0593f232/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cactus-1',
      name: 'Cactus 1',
      original: '546e24949df4a17d0d449bc5',
      portraitURL: '/file/db/thang.type/546e24949df4a17d0d449bc5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cactus-2',
      name: 'Cactus 2',
      original: '546e24039df4a17d0d449bb9',
      portraitURL: '/file/db/thang.type/546e24039df4a17d0d449bb9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'caltrop-belt',
      name: 'Caltrop Belt',
      original: '54694af7a2b1f53ce7944441',
      portraitURL: '/file/db/thang.type/54694af7a2b1f53ce7944441/portrait.png',
      kind: 'Item'
    }, {
      slug: 'caltrops',
      name: 'Caltrops',
      original: '557f9700b43ce0b15a91b1ed',
      portraitURL: '/file/db/thang.type/557f9700b43ce0b15a91b1ed/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'camel',
      name: 'Camel',
      original: '548cf4cd0f559d0000be7e57',
      portraitURL: '/file/db/thang.type/548cf4cd0f559d0000be7e57/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'camp-fire',
      name: 'Camp Fire',
      original: '52e097c110012a5b250000b2',
      portraitURL: '/file/db/thang.type/52e097c110012a5b250000b2/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'campfire-stone',
      name: 'Campfire Stone',
      original: '54f118e125be5e880583759a',
      portraitURL: '/file/db/thang.type/54f118e125be5e880583759a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'candle',
      name: 'Candle',
      original: '52e95fb222efc8e7090017d7',
      portraitURL: '/file/db/thang.type/52e95fb222efc8e7090017d7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'carved-steel-ring',
      name: 'Carved Steel Ring',
      original: '54692dfaa2b1f53ce794439f',
      portraitURL: '/file/db/thang.type/54692dfaa2b1f53ce794439f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'catapult',
      name: 'Catapult',
      original: '553e7ba29bdea5d00f1fd905',
      portraitURL: '/file/db/thang.type/553e7ba29bdea5d00f1fd905/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'cave',
      name: 'Cave',
      original: '52e95983427172ae560018ce',
      portraitURL: '/file/db/thang.type/52e95983427172ae560018ce/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'chainmail-tunic',
      name: 'Chainmail Tunic',
      original: '5441c4dd4e9aeb727cc9713b',
      portraitURL: '/file/db/thang.type/5441c4dd4e9aeb727cc9713b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'chains',
      name: 'Chains',
      original: '52aa602020fccb0000000004',
      portraitURL: '/file/db/thang.type/52aa602020fccb0000000004/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'chair',
      name: 'Chair',
      original: '52e9960e427172ae56001fdf',
      portraitURL: '/file/db/thang.type/52e9960e427172ae56001fdf/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'charge-belt',
      name: 'Charge Belt',
      original: '54694b27a2b1f53ce7944445',
      portraitURL: '/file/db/thang.type/54694b27a2b1f53ce7944445/portrait.png',
      kind: 'Item'
    }, {
      slug: 'choppable-tree-1',
      name: 'Choppable Tree 1',
      original: '52fbd1d67e01835453bd8a26',
      portraitURL: '/file/db/thang.type/52fbd1d67e01835453bd8a26/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'choppable-tree-2',
      name: 'Choppable Tree 2',
      original: '52fbd7e07e01835453bd8afc',
      portraitURL: '/file/db/thang.type/52fbd7e07e01835453bd8afc/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'choppable-tree-3',
      name: 'Choppable Tree 3',
      original: '52fbd9beab6e45c813bc79c6',
      portraitURL: '/file/db/thang.type/52fbd9beab6e45c813bc79c6/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'choppable-tree-4',
      name: 'Choppable Tree 4',
      original: '52fbdb747e01835453bd8b4a',
      portraitURL: '/file/db/thang.type/52fbdb747e01835453bd8b4a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'circle-tree-stand-1',
      name: 'Circle Tree Stand 1',
      original: '541cb842c6362edfb0f3447d',
      portraitURL: '/file/db/thang.type/541cb842c6362edfb0f3447d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'circle-tree-stand-2',
      name: 'Circle Tree Stand 2',
      original: '541cc5708e78524aad94de69',
      portraitURL: '/file/db/thang.type/541cc5708e78524aad94de69/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'circle-tree-stand-3',
      name: 'Circle Tree Stand 3',
      original: '541cc6898e78524aad94de6f',
      portraitURL: '/file/db/thang.type/541cc6898e78524aad94de6f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'circlet-of-the-magi',
      name: 'Circlet of the Magi',
      original: '54ea39342b7506e891ca70f2',
      portraitURL: '/file/db/thang.type/54ea39342b7506e891ca70f2/portrait.png',
      kind: 'Item'
    }, {
      slug: 'classroom-bench',
      name: 'classroom bench',
      original: '56eb09520c6e9f1f00990e81',
      portraitURL: '/file/db/thang.type/56eb09520c6e9f1f00990e81/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'classroom-floor',
      name: 'Classroom Floor',
      original: '56a139f9d987c52900d4de5a',
      portraitURL: '/file/db/thang.type/56a139f9d987c52900d4de5a/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'classroom-sculpture',
      name: 'Classroom Sculpture',
      original: '56a16510088f002400720564',
      portraitURL: '/file/db/thang.type/56a16510088f002400720564/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'classroom-students-desk',
      name: 'Classroom Students Desk',
      original: '56a15d88d987c52900d4ecdb',
      portraitURL: '/file/db/thang.type/56a15d88d987c52900d4ecdb/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'classroom-students-seat',
      name: 'Classroom Students Seat',
      original: '56a162348431922e0042fae3',
      portraitURL: '/file/db/thang.type/56a162348431922e0042fae3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'classroom-viewscreen',
      name: 'Classroom Viewscreen',
      original: '569fdf3c6ff9591f000050bf',
      portraitURL: '/file/db/thang.type/569fdf3c6ff9591f000050bf/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'classroom-wall',
      name: 'Classroom Wall',
      original: '56a0150cf363ed1f0029e11c',
      portraitURL: '/file/db/thang.type/56a0150cf363ed1f0029e11c/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'claymore',
      name: 'Claymore',
      original: '544d6d4a8494308424f56471',
      portraitURL: '/file/db/thang.type/544d6d4a8494308424f56471/portrait.png',
      kind: 'Item'
    }, {
      slug: 'cloud-1',
      name: 'Cloud 1',
      original: '550b42b7343675176d05a919',
      portraitURL: '/file/db/thang.type/550b42b7343675176d05a919/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cloud-2',
      name: 'Cloud 2',
      original: '550b43fc343675176d05a923',
      portraitURL: '/file/db/thang.type/550b43fc343675176d05a923/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'cloud-3',
      name: 'Cloud 3',
      original: '550b4506343675176d05a933',
      portraitURL: '/file/db/thang.type/550b4506343675176d05a933/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'coin',
      name: 'Coin',
      original: '52aa3a8fccbd588d4d000001',
      portraitURL: '/file/db/thang.type/52aa3a8fccbd588d4d000001/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'compound-boots',
      name: 'Compound Boots',
      original: '546d4d8e9df4a17d0d449acd',
      portraitURL: '/file/db/thang.type/546d4d8e9df4a17d0d449acd/portrait.png',
      kind: 'Item'
    }, {
      slug: 'cougar-pet',
      name: 'Cougar Pet',
      original: '540f3a33821af8000097dc62',
      portraitURL: '/file/db/thang.type/540f3a33821af8000097dc62/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'crevasse-1',
      name: 'Crevasse 1',
      original: '5576080a1e82182d9e6888cd',
      portraitURL: '/file/db/thang.type/5576080a1e82182d9e6888cd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'crevasse-2',
      name: 'Crevasse 2',
      original: '557630c31e82182d9e688921',
      portraitURL: '/file/db/thang.type/557630c31e82182d9e688921/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'crevasse-3',
      name: 'Crevasse 3',
      original: '557631321e82182d9e688925',
      portraitURL: '/file/db/thang.type/557631321e82182d9e688925/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'crisscross-back',
      name: 'Crisscross Back',
      original: '53b495e37e17883a05754216',
      portraitURL: '/file/db/thang.type/53b495e37e17883a05754216/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'crisscross-front',
      name: 'Crisscross Front',
      original: '53b495b02082f23505b844e5',
      portraitURL: '/file/db/thang.type/53b495b02082f23505b844e5/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'cross-bones-background',
      name: 'Cross Bones Background',
      original: '572e51175366918e018060e5',
      portraitURL: '/file/db/thang.type/572e51175366918e018060e5/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'crossbeam-support',
      name: 'crossbeam support',
      original: '5786828a0d397a2e0026f274',
      portraitURL: '/file/db/thang.type/5786828a0d397a2e0026f274/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'crossbow',
      name: 'Crossbow',
      original: '53e21ae653457600003e3ec2',
      portraitURL: '/file/db/thang.type/53e21ae653457600003e3ec2/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crude-builders-hammer',
      name: 'Crude Builder\'s Hammer',
      original: '53f4e6e3d822c23505b74f42',
      portraitURL: '/file/db/thang.type/53f4e6e3d822c23505b74f42/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crude-crossbow',
      name: 'Crude Crossbow',
      original: '544d7ffd8494308424f564c3',
      portraitURL: '/file/db/thang.type/544d7ffd8494308424f564c3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crude-dagger',
      name: 'Crude Dagger',
      original: '544d952b8494308424f56517',
      portraitURL: '/file/db/thang.type/544d952b8494308424f56517/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crude-dagger-missile',
      name: 'Crude Dagger Missile',
      original: '546e292d9df4a17d0d449c0c',
      portraitURL: '/file/db/thang.type/546e292d9df4a17d0d449c0c/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'crude-glasses',
      name: 'Crude Glasses',
      original: '53e238df53457600003e3f0b',
      portraitURL: '/file/db/thang.type/53e238df53457600003e3f0b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crude-spike',
      name: 'Crude Spike',
      original: '544d79e28494308424f56482',
      portraitURL: '/file/db/thang.type/544d79e28494308424f56482/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crude-telephoto-glasses',
      name: 'Crude Telephoto Glasses',
      original: '5469415aa2b1f53ce7944411',
      portraitURL: '/file/db/thang.type/5469415aa2b1f53ce7944411/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crypt-key',
      name: 'Crypt Key',
      original: '54eb573549fa2d5c905ddf36',
      portraitURL: '/file/db/thang.type/54eb573549fa2d5c905ddf36/portrait.png',
      kind: 'Item'
    }, {
      slug: 'crystal-wand',
      name: 'Crystal Wand',
      original: '54eab63b2b7506e891ca71f2',
      portraitURL: '/file/db/thang.type/54eab63b2b7506e891ca71f2/portrait.png',
      kind: 'Item'
    }, {
      slug: 'cupboards-of-kgard-background',
      name: 'Cupboards of Kgard background',
      original: '56994ec3d32e4c1f0075460d',
      portraitURL: '/file/db/thang.type/56994ec3d32e4c1f0075460d/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'curse',
      name: 'Curse',
      original: '53024d18a6efdd32359c5365',
      portraitURL: '/file/db/thang.type/53024d18a6efdd32359c5365/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'cut-garnet-sense-stone',
      name: 'Cut Garnet Sense Stone',
      original: '546933a5a2b1f53ce79443d5',
      portraitURL: '/file/db/thang.type/546933a5a2b1f53ce79443d5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'cut-stone-builders-hammer',
      name: 'Cut Stone Builder\'s Hammer',
      original: '54694c0ba2b1f53ce7944456',
      portraitURL: '/file/db/thang.type/54694c0ba2b1f53ce7944456/portrait.png',
      kind: 'Item'
    }, {
      slug: 'darksteel-blade',
      name: 'Darksteel Blade',
      original: '544d7f558494308424f564bb',
      portraitURL: '/file/db/thang.type/544d7f558494308424f564bb/portrait.png',
      kind: 'Item'
    }, {
      slug: 'deadeye-crossbow',
      name: 'Deadeye Crossbow',
      original: '54eaad752b7506e891ca71d1',
      portraitURL: '/file/db/thang.type/54eaad752b7506e891ca71d1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'decoy',
      name: 'Decoy',
      original: '5498bb758e52573b10d3bce6',
      portraitURL: '/file/db/thang.type/5498bb758e52573b10d3bce6/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'defensive-boots',
      name: 'Defensive Boots',
      original: '546d4e019df4a17d0d449ad1',
      portraitURL: '/file/db/thang.type/546d4e019df4a17d0d449ad1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'defensive-infantry-shield',
      name: 'Defensive Infantry Shield',
      original: '544d7b408494308424f5648f',
      portraitURL: '/file/db/thang.type/544d7b408494308424f5648f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'deflector',
      name: 'Deflector',
      original: '54eabff349fa2d5c905ddeee',
      portraitURL: '/file/db/thang.type/54eabff349fa2d5c905ddeee/portrait.png',
      kind: 'Item'
    }, {
      slug: 'derrick',
      name: 'Derrick',
      original: '546e24339df4a17d0d449bbd',
      portraitURL: '/file/db/thang.type/546e24339df4a17d0d449bbd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-bones-1',
      name: 'Desert Bones 1',
      original: '548cf0cc0f559d0000be7e27',
      portraitURL: '/file/db/thang.type/548cf0cc0f559d0000be7e27/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-bones-3',
      name: 'Desert Bones 3',
      original: '548cf1630f559d0000be7e2f',
      portraitURL: '/file/db/thang.type/548cf1630f559d0000be7e2f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-green-1',
      name: 'Desert Green 1',
      original: '548cef670f559d0000be7e17',
      portraitURL: '/file/db/thang.type/548cef670f559d0000be7e17/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-green-2',
      name: 'Desert Green 2',
      original: '548cefc50f559d0000be7e1b',
      portraitURL: '/file/db/thang.type/548cefc50f559d0000be7e1b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-house-1',
      name: 'Desert House 1',
      original: '548cf35a0f559d0000be7e43',
      portraitURL: '/file/db/thang.type/548cf35a0f559d0000be7e43/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-house-2',
      name: 'Desert House 2',
      original: '548cf3ae0f559d0000be7e47',
      portraitURL: '/file/db/thang.type/548cf3ae0f559d0000be7e47/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-house-3',
      name: 'Desert House 3',
      original: '548cf4000f559d0000be7e4b',
      portraitURL: '/file/db/thang.type/548cf4000f559d0000be7e4b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-house-4',
      name: 'Desert House 4',
      original: '548cf44c0f559d0000be7e4f',
      portraitURL: '/file/db/thang.type/548cf44c0f559d0000be7e4f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-palm-1',
      name: 'Desert Palm 1',
      original: '548cf0110f559d0000be7e1f',
      portraitURL: '/file/db/thang.type/548cf0110f559d0000be7e1f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-palm-2',
      name: 'Desert Palm 2',
      original: '548cf06f0f559d0000be7e23',
      portraitURL: '/file/db/thang.type/548cf06f0f559d0000be7e23/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-pillar',
      name: 'Desert Pillar',
      original: '541c5ff487338f570851ad83',
      portraitURL: '/file/db/thang.type/541c5ff487338f570851ad83/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-pyramid',
      name: 'Desert Pyramid',
      original: '53e239c253457600003e3f11',
      portraitURL: '/file/db/thang.type/53e239c253457600003e3f11/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-rubble-1',
      name: 'Desert Rubble 1',
      original: '53126c48f5a594b00fbfcc42',
      portraitURL: '/file/db/thang.type/53126c48f5a594b00fbfcc42/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-rubble-2',
      name: 'Desert Rubble 2',
      original: '52f01b0b5071878f7650e11a',
      portraitURL: '/file/db/thang.type/52f01b0b5071878f7650e11a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-rubble-3',
      name: 'Desert Rubble 3',
      original: '546e23a89df4a17d0d449bb1',
      portraitURL: '/file/db/thang.type/546e23a89df4a17d0d449bb1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-sand-rock',
      name: 'Desert Sand Rock',
      original: '55c64774ef141c65665beb84',
      portraitURL: '/file/db/thang.type/55c64774ef141c65665beb84/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-shrub-big-1',
      name: 'Desert Shrub Big 1',
      original: '546e237d9df4a17d0d449bad',
      portraitURL: '/file/db/thang.type/546e237d9df4a17d0d449bad/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-shrub-big-2',
      name: 'Desert Shrub Big 2',
      original: '546e22c59df4a17d0d449ba1',
      portraitURL: '/file/db/thang.type/546e22c59df4a17d0d449ba1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-shrub-big-3',
      name: 'Desert Shrub Big 3',
      original: '53f4c776d822c23505b7091c',
      portraitURL: '/file/db/thang.type/53f4c776d822c23505b7091c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-shrub-small-1',
      name: 'Desert Shrub Small 1',
      original: '548ceec80f559d0000be7e0f',
      portraitURL: '/file/db/thang.type/548ceec80f559d0000be7e0f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-shrub-small-2',
      name: 'Desert Shrub Small 2',
      original: '548cef1f0f559d0000be7e13',
      portraitURL: '/file/db/thang.type/548cef1f0f559d0000be7e13/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-skullcave',
      name: 'Desert Skullcave',
      original: '546e231c9df4a17d0d449ba5',
      portraitURL: '/file/db/thang.type/546e231c9df4a17d0d449ba5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-1',
      name: 'Desert Wall 1',
      original: '5404fe5f1d10b2f170618ae9',
      portraitURL: '/file/db/thang.type/5404fe5f1d10b2f170618ae9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-2',
      name: 'Desert Wall 2',
      original: '540100ba794c1a8b4d328437',
      portraitURL: '/file/db/thang.type/540100ba794c1a8b4d328437/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-3',
      name: 'Desert Wall 3',
      original: '53f4e7fff7bc7336054dcf64',
      portraitURL: '/file/db/thang.type/53f4e7fff7bc7336054dcf64/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-4',
      name: 'Desert Wall 4',
      original: '53f3ef04e7a7643005c0f4a1',
      portraitURL: '/file/db/thang.type/53f3ef04e7a7643005c0f4a1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-5',
      name: 'Desert Wall 5',
      original: '53ebafdd1a100989a40ce479',
      portraitURL: '/file/db/thang.type/53ebafdd1a100989a40ce479/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-6',
      name: 'Desert Wall 6',
      original: '53eb989b1a100989a40ce46a',
      portraitURL: '/file/db/thang.type/53eb989b1a100989a40ce46a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-7',
      name: 'Desert Wall 7',
      original: '53eaa7de786ccc3405a9f2a4',
      portraitURL: '/file/db/thang.type/53eaa7de786ccc3405a9f2a4/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-wall-8',
      name: 'Desert Wall 8',
      original: '53eaa6f6ef27b33605514a64',
      portraitURL: '/file/db/thang.type/53eaa6f6ef27b33605514a64/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'desert-well',
      name: 'Desert Well',
      original: '548cf4880f559d0000be7e53',
      portraitURL: '/file/db/thang.type/548cf4880f559d0000be7e53/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'destroyed-human-tower',
      name: 'destroyed human tower',
      original: '57867e5acca8994b002702a9',
      portraitURL: '/file/db/thang.type/57867e5acca8994b002702a9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'destroyed-human-tower-with-trees',
      name: 'destroyed human tower with trees',
      original: '572d5abed7787fc300d85964',
      portraitURL: '/file/db/thang.type/572d5abed7787fc300d85964/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'destroyed-human-tower-with-trees-2',
      name: 'destroyed human tower with trees 2',
      original: '572d5b42d7787fc300d8596f',
      portraitURL: '/file/db/thang.type/572d5b42d7787fc300d8596f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'destroyed-ogre-tower-footing',
      name: 'destroyed ogre tower footing',
      original: '578680980d397a2e0026eff9',
      portraitURL: '/file/db/thang.type/578680980d397a2e0026eff9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'diamond-sense-stone',
      name: 'Diamond Sense Stone',
      original: '546934b7a2b1f53ce79443e1',
      portraitURL: '/file/db/thang.type/546934b7a2b1f53ce79443e1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'dirt-path-1',
      name: 'Dirt Path 1',
      original: '5302acfd27471514685d5fd4',
      portraitURL: '/file/db/thang.type/5302acfd27471514685d5fd4/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'disintegrate',
      name: 'Disintegrate',
      original: '54d2bb1abb157252059b1d29',
      portraitURL: '/file/db/thang.type/54d2bb1abb157252059b1d29/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'dispel',
      name: 'Dispel',
      original: '55c2807d3767fd3435eb4465',
      portraitURL: '/file/db/thang.type/55c2807d3767fd3435eb4465/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'dragonscale-chainmail-coif',
      name: 'Dragonscale Chainmail Coif',
      original: '546d477d9df4a17d0d449a6b',
      portraitURL: '/file/db/thang.type/546d477d9df4a17d0d449a6b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'dragonscale-chainmail-tunic',
      name: 'Dragonscale Chainmail Tunic',
      original: '546d3d149df4a17d0d449a43',
      portraitURL: '/file/db/thang.type/546d3d149df4a17d0d449a43/portrait.png',
      kind: 'Item'
    }, {
      slug: 'dragontooth',
      name: 'Dragontooth',
      original: '54eb51d349fa2d5c905ddf0e',
      portraitURL: '/file/db/thang.type/54eb51d349fa2d5c905ddf0e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'drain-life',
      name: 'Drain Life',
      original: '54d2bc5b4e4a08550556da55',
      portraitURL: '/file/db/thang.type/54d2bc5b4e4a08550556da55/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'dread-door-background',
      name: 'Dread Door Background',
      original: '572e46a3f8c4f9b601ede6c0',
      portraitURL: '/file/db/thang.type/572e46a3f8c4f9b601ede6c0/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'dueling-grounds-background',
      name: 'Dueling Grounds Background',
      original: '572e5163e8db5195014848b3',
      portraitURL: '/file/db/thang.type/572e5163e8db5195014848b3/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'dunes',
      name: 'Dunes',
      original: '546e251d9df4a17d0d449bd1',
      portraitURL: '/file/db/thang.type/546e251d9df4a17d0d449bd1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-door',
      name: 'Dungeon Door',
      original: '52a0e5123abf480000000001',
      portraitURL: '/file/db/thang.type/52a0e5123abf480000000001/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-entrance',
      name: 'Dungeon Entrance',
      original: '544d850e8494308424f564dd',
      portraitURL: '/file/db/thang.type/544d850e8494308424f564dd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-floor',
      name: 'Dungeon Floor',
      original: '52af688f6320a8049d000001',
      portraitURL: '/file/db/thang.type/52af688f6320a8049d000001/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'dungeon-pillar',
      name: 'Dungeon Pillar',
      original: '543ea0ff9692aa00006208e7',
      portraitURL: '/file/db/thang.type/543ea0ff9692aa00006208e7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-pit',
      name: 'Dungeon Pit',
      original: '52b09408ccbc671372000002',
      portraitURL: '/file/db/thang.type/52b09408ccbc671372000002/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'dungeon-rock-1',
      name: 'Dungeon Rock 1',
      original: '54ef944764112781056c1f96',
      portraitURL: '/file/db/thang.type/54ef944764112781056c1f96/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-rock-2',
      name: 'Dungeon Rock 2',
      original: '54ef99bf223edd8105b00eaa',
      portraitURL: '/file/db/thang.type/54ef99bf223edd8105b00eaa/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-rock-3',
      name: 'Dungeon Rock 3',
      original: '54ef9af5b4740779058448c6',
      portraitURL: '/file/db/thang.type/54ef9af5b4740779058448c6/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-rock-4',
      name: 'Dungeon Rock 4',
      original: '54ef9c26933e1e7b0584663e',
      portraitURL: '/file/db/thang.type/54ef9c26933e1e7b0584663e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-rock-5',
      name: 'Dungeon Rock 5',
      original: '54ef9d376aea7d7805535cc8',
      portraitURL: '/file/db/thang.type/54ef9d376aea7d7805535cc8/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-rock-group',
      name: 'Dungeon Rock Group',
      original: '54ef9e0583b08b7d054ba331',
      portraitURL: '/file/db/thang.type/54ef9e0583b08b7d054ba331/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-stairs-horizontal',
      name: 'Dungeon Stairs Horizontal',
      original: '5463dc27c295cc4fb9c06257',
      portraitURL: '/file/db/thang.type/5463dc27c295cc4fb9c06257/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-stairs-vertical',
      name: 'Dungeon Stairs Vertical',
      original: '5463d8a0c295cc4fb9c06255',
      portraitURL: '/file/db/thang.type/5463d8a0c295cc4fb9c06255/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'dungeon-wall',
      name: 'Dungeon Wall',
      original: '529e7aecc423d4e83b000004',
      portraitURL: '/file/db/thang.type/529e7aecc423d4e83b000004/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'dungeons-of-kgard-background',
      name: 'Dungeons of Kgard Background',
      original: '563d3c02f5b71e8405fabff8',
      portraitURL: '/file/db/thang.type/563d3c02f5b71e8405fabff8/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'dynamic-flags',
      name: 'Dynamic Flags',
      original: '5478b9068707a2c3a2493b2b',
      portraitURL: '/file/db/thang.type/5478b9068707a2c3a2493b2b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'earthskin',
      name: 'Earthskin',
      original: '54d2bcf66ec7cf53051e7855',
      portraitURL: '/file/db/thang.type/54d2bcf66ec7cf53051e7855/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'east-mounted-camera-facing-east-west',
      name: 'east mounted camera facing east west',
      original: '56f183091e1daf0a016c670b',
      portraitURL: '/file/db/thang.type/56f183091e1daf0a016c670b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'east-mounted-camera-facing-north',
      name: 'east mounted camera facing north',
      original: '56f1782541c1a0cb00f8d66c',
      portraitURL: '/file/db/thang.type/56f1782541c1a0cb00f8d66c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'east-mounted-camera-facing-south',
      name: 'east mounted camera facing south',
      original: '56f1811841c1a0cb00f8ddb1',
      portraitURL: '/file/db/thang.type/56f1811841c1a0cb00f8ddb1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'edge-of-darkness',
      name: 'Edge of Darkness',
      original: '54eaa8762b7506e891ca71a9',
      portraitURL: '/file/db/thang.type/54eaa8762b7506e891ca71a9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'eldritch-icicle',
      name: 'Eldritch Icicle',
      original: '54ea311e2b7506e891ca70b0',
      portraitURL: '/file/db/thang.type/54ea311e2b7506e891ca70b0/portrait.png',
      kind: 'Item'
    }, {
      slug: 'electrocute',
      name: 'Electrocute',
      original: '55c281263767fd3435eb4469',
      portraitURL: '/file/db/thang.type/55c281263767fd3435eb4469/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'electrowall',
      name: 'Electrowall',
      original: '54177e26571f116c0b1f00c0',
      portraitURL: '/file/db/thang.type/54177e26571f116c0b1f00c0/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'elemental-codex-i',
      name: 'Elemental Codex I',
      original: '5463755a3839c6e02811d30a',
      portraitURL: '/file/db/thang.type/5463755a3839c6e02811d30a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'elemental-codex-ii',
      name: 'Elemental Codex II',
      original: '546375783839c6e02811d30d',
      portraitURL: '/file/db/thang.type/546375783839c6e02811d30d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'elemental-codex-iii',
      name: 'Elemental Codex III',
      original: '5463759c3839c6e02811d310',
      portraitURL: '/file/db/thang.type/5463759c3839c6e02811d310/portrait.png',
      kind: 'Item'
    }, {
      slug: 'elemental-codex-iv',
      name: 'Elemental Codex IV',
      original: '546376bf3839c6e02811d31c',
      portraitURL: '/file/db/thang.type/546376bf3839c6e02811d31c/portrait.png',
      kind: 'Item'
    }, {
      slug: 'elemental-codex-v',
      name: 'Elemental Codex V',
      original: '546376e23839c6e02811d31f',
      portraitURL: '/file/db/thang.type/546376e23839c6e02811d31f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'embroidered-griffin-wool-hat',
      name: 'Embroidered Griffin Wool Hat',
      original: '546d4ca19df4a17d0d449abf',
      portraitURL: '/file/db/thang.type/546d4ca19df4a17d0d449abf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'embroidered-griffin-wool-robe',
      name: 'Embroidered Griffin Wool Robe',
      original: '546d4a549df4a17d0d449a97',
      portraitURL: '/file/db/thang.type/546d4a549df4a17d0d449a97/portrait.png',
      kind: 'Item'
    }, {
      slug: 'emerald-chainmail-coif',
      name: 'Emerald Chainmail Coif',
      original: '546d46cf9df4a17d0d449a63',
      portraitURL: '/file/db/thang.type/546d46cf9df4a17d0d449a63/portrait.png',
      kind: 'Item'
    }, {
      slug: 'emerald-chainmail-tunic',
      name: 'Emerald Chainmail Tunic',
      original: '546d3c8d9df4a17d0d449a3b',
      portraitURL: '/file/db/thang.type/546d3c8d9df4a17d0d449a3b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'emperors-gloves',
      name: 'Emperor\'s Gloves',
      original: '546949aca2b1f53ce7944431',
      portraitURL: '/file/db/thang.type/546949aca2b1f53ce7944431/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enameled-dragonplate',
      name: 'Enameled Dragonplate',
      original: '546ab1e53777d61863292876',
      portraitURL: '/file/db/thang.type/546ab1e53777d61863292876/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enameled-dragonplate-helmet',
      name: 'Enameled Dragonplate Helmet',
      original: '546d3a539df4a17d0d449a1f',
      portraitURL: '/file/db/thang.type/546d3a539df4a17d0d449a1f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enameled-dragonshield',
      name: 'Enameled Dragonshield',
      original: '54eabf022b7506e891ca7236',
      portraitURL: '/file/db/thang.type/54eabf022b7506e891ca7236/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enchanted-lambswool-cloak',
      name: 'Enchanted Lambswool Cloak',
      original: '546d49109df4a17d0d449a7f',
      portraitURL: '/file/db/thang.type/546d49109df4a17d0d449a7f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enchanted-lenses',
      name: 'Enchanted Lenses',
      original: '546941cba2b1f53ce7944419',
      portraitURL: '/file/db/thang.type/546941cba2b1f53ce7944419/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enchanted-stick',
      name: 'Enchanted Stick',
      original: '544d87188494308424f564f1',
      portraitURL: '/file/db/thang.type/544d87188494308424f564f1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'enemy-mine-background',
      name: 'Enemy Mine Background',
      original: '563cdd340b2c7c87054e102b',
      portraitURL: '/file/db/thang.type/563cdd340b2c7c87054e102b/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'energy-ball',
      name: 'Energy Ball',
      original: '53025d83222f73867774d8ed',
      portraitURL: '/file/db/thang.type/53025d83222f73867774d8ed/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'energy-ball-diet',
      name: 'Energy Ball Diet',
      original: '531a6ddf1ddc910545d5e96d',
      portraitURL: '/file/db/thang.type/531a6ddf1ddc910545d5e96d/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'enforcer',
      name: 'Enforcer',
      original: '56d0ca1263103d2a00af5331',
      portraitURL: '/file/db/thang.type/56d0ca1263103d2a00af5331/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'engraved-builders-hammer',
      name: 'Engraved Builder\'s Hammer',
      original: '54694ca7a2b1f53ce7944462',
      portraitURL: '/file/db/thang.type/54694ca7a2b1f53ce7944462/portrait.png',
      kind: 'Item'
    }, {
      slug: 'engraved-obsidian-breastplate',
      name: 'Engraved Obsidian Breastplate',
      original: '546ab15e3777d6186329286e',
      portraitURL: '/file/db/thang.type/546ab15e3777d6186329286e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'engraved-obsidian-helmet',
      name: 'Engraved Obsidian Helmet',
      original: '546d39d89df4a17d0d449a17',
      portraitURL: '/file/db/thang.type/546d39d89df4a17d0d449a17/portrait.png',
      kind: 'Item'
    }, {
      slug: 'engraved-obsidian-shield',
      name: 'Engraved Obsidian Shield',
      original: '54eabbd22b7506e891ca721e',
      portraitURL: '/file/db/thang.type/54eabbd22b7506e891ca721e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'engraved-wristwatch',
      name: 'Engraved Wristwatch',
      original: '546937dea2b1f53ce79443ed',
      portraitURL: '/file/db/thang.type/546937dea2b1f53ce79443ed/portrait.png',
      kind: 'Item'
    }, {
      slug: 'explosive-potion',
      name: 'Explosive Potion',
      original: '5466d9a5417c8b48a9811e8e',
      portraitURL: '/file/db/thang.type/5466d9a5417c8b48a9811e8e/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'ezeroths-timepiece',
      name: 'Ezeroth\'s Timepiece',
      original: '546938cea2b1f53ce79443f5',
      portraitURL: '/file/db/thang.type/546938cea2b1f53ce79443f5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'farm',
      name: 'Farm',
      original: '52ea853d427172ae56003494',
      portraitURL: '/file/db/thang.type/52ea853d427172ae56003494/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'faux-fur-hat',
      name: 'Faux Fur Hat',
      original: '5441c2be4e9aeb727cc97105',
      portraitURL: '/file/db/thang.type/5441c2be4e9aeb727cc97105/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fear',
      name: 'Fear',
      original: '53024db827471514685d53b2',
      portraitURL: '/file/db/thang.type/53024db827471514685d53b2/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'fence',
      name: 'Fence',
      original: '5421bc5218adb78d98d265e8',
      portraitURL: '/file/db/thang.type/5421bc5218adb78d98d265e8/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'fence-wall',
      name: 'Fence Wall',
      original: '54349179a4cc5c900efa4814',
      portraitURL: '/file/db/thang.type/54349179a4cc5c900efa4814/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'filing-cabinet',
      name: 'Filing Cabinet',
      original: '52e9fa73427172ae56002593',
      portraitURL: '/file/db/thang.type/52e9fa73427172ae56002593/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'fine-boots',
      name: 'Fine Boots',
      original: '53e2388e53457600003e3f09',
      portraitURL: '/file/db/thang.type/53e2388e53457600003e3f09/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fine-leather-chainmail-coif',
      name: 'Fine Leather Chainmail Coif',
      original: '546d455f9df4a17d0d449a4f',
      portraitURL: '/file/db/thang.type/546d455f9df4a17d0d449a4f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fine-leather-chainmail-tunic',
      name: 'Fine Leather Chainmail Tunic',
      original: '546d3b129df4a17d0d449a27',
      portraitURL: '/file/db/thang.type/546d3b129df4a17d0d449a27/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fine-stone-builders-hammer',
      name: 'Fine Stone Builder\'s Hammer',
      original: '54694c44a2b1f53ce794445a',
      portraitURL: '/file/db/thang.type/54694c44a2b1f53ce794445a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fine-telephoto-glasses',
      name: 'Fine Telephoto Glasses',
      original: '54694194a2b1f53ce7944415',
      portraitURL: '/file/db/thang.type/54694194a2b1f53ce7944415/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fine-wooden-glasses',
      name: 'Fine Wooden Glasses',
      original: '5469405ba2b1f53ce7944404',
      portraitURL: '/file/db/thang.type/5469405ba2b1f53ce7944404/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fir-tree-1',
      name: 'Fir Tree 1',
      original: '54e9503df54ef5794f354ec1',
      portraitURL: '/file/db/thang.type/54e9503df54ef5794f354ec1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'fir-tree-2',
      name: 'Fir Tree 2',
      original: '54e95107f54ef5794f354ec5',
      portraitURL: '/file/db/thang.type/54e95107f54ef5794f354ec5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'fir-tree-3',
      name: 'Fir Tree 3',
      original: '54e9513ff54ef5794f354ec9',
      portraitURL: '/file/db/thang.type/54e9513ff54ef5794f354ec9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'fir-tree-4',
      name: 'Fir Tree 4',
      original: '54e9518df54ef5794f354ecd',
      portraitURL: '/file/db/thang.type/54e9518df54ef5794f354ecd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'fire',
      name: 'Fire',
      original: '54d2bdea4e4a08550556dbfe',
      portraitURL: '/file/db/thang.type/54d2bdea4e4a08550556dbfe/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'fire-dancing-background',
      name: 'Fire Dancing Background',
      original: '576ad6ab7e64f325002df2e4',
      portraitURL: '/file/db/thang.type/576ad6ab7e64f325002df2e4/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'fire-opal-sense-stone',
      name: 'Fire Opal Sense Stone',
      original: '546932e4a2b1f53ce79443cd',
      portraitURL: '/file/db/thang.type/546932e4a2b1f53ce79443cd/portrait.png',
      kind: 'Item'
    }, {
      slug: 'fire-trap',
      name: 'Fire Trap',
      original: '5449536afb56d566e86972ba',
      portraitURL: '/file/db/thang.type/5449536afb56d566e86972ba/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'fireball',
      name: 'Fireball',
      original: '531a6a2f1ddc910545d5e944',
      portraitURL: '/file/db/thang.type/531a6a2f1ddc910545d5e944/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'firewall',
      name: 'firewall',
      original: '56f56687db0216900f086ac1',
      portraitURL: '/file/db/thang.type/56f56687db0216900f086ac1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'firewood-1',
      name: 'Firewood 1',
      original: '52e953d0427172ae5600181d',
      portraitURL: '/file/db/thang.type/52e953d0427172ae5600181d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'firewood-2',
      name: 'Firewood 2',
      original: '52e9575d22efc8e7090016ed',
      portraitURL: '/file/db/thang.type/52e9575d22efc8e7090016ed/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'firewood-3',
      name: 'Firewood 3',
      original: '52e957ec22efc8e7090016fd',
      portraitURL: '/file/db/thang.type/52e957ec22efc8e7090016fd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'firn-1',
      name: 'Firn 1',
      original: '557639fa1e82182d9e68894d',
      portraitURL: '/file/db/thang.type/557639fa1e82182d9e68894d/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'firn-2',
      name: 'Firn 2',
      original: '55763a971e82182d9e688951',
      portraitURL: '/file/db/thang.type/55763a971e82182d9e688951/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'firn-3',
      name: 'Firn 3',
      original: '55763ab51e82182d9e688955',
      portraitURL: '/file/db/thang.type/55763ab51e82182d9e688955/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'firn-4',
      name: 'Firn 4',
      original: '55763ad11e82182d9e688959',
      portraitURL: '/file/db/thang.type/55763ad11e82182d9e688959/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'firn-5',
      name: 'Firn 5',
      original: '55763aea1e82182d9e68895d',
      portraitURL: '/file/db/thang.type/55763aea1e82182d9e68895d/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'firn-6',
      name: 'Firn 6',
      original: '55763b111e82182d9e688961',
      portraitURL: '/file/db/thang.type/55763b111e82182d9e688961/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'firn-cliff',
      name: 'Firn Cliff',
      original: '55c277983767fd3435eb444e',
      portraitURL: '/file/db/thang.type/55c277983767fd3435eb444e/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'flame-armor',
      name: 'Flame Armor',
      original: '55c27b5c3767fd3435eb445a',
      portraitURL: '/file/db/thang.type/55c27b5c3767fd3435eb445a/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'flaming-shell',
      name: 'Flaming Shell',
      original: '553e80669bdea5d00f1fd90e',
      portraitURL: '/file/db/thang.type/553e80669bdea5d00f1fd90e/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'flippable-land',
      name: 'Flippable Land',
      original: '53a20126610a6b3505568163',
      portraitURL: '/file/db/thang.type/53a20126610a6b3505568163/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'floppy-lambswool-hat',
      name: 'Floppy Lambswool Hat',
      original: '546d4b069df4a17d0d449aa3',
      portraitURL: '/file/db/thang.type/546d4b069df4a17d0d449aa3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'force-bolt',
      name: 'Force Bolt',
      original: '5467807c417c8b48a9811efd',
      portraitURL: '/file/db/thang.type/5467807c417c8b48a9811efd/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'forest-river-tile-deadend',
      name: 'Forest River tile deadend',
      original: '577d5b367e0491260074b95b',
      portraitURL: '/file/db/thang.type/577d5b367e0491260074b95b/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'forest-river-tile-full-intersection',
      name: 'forest river tile full intersection',
      original: '5786badaa6c6413500926209',
      portraitURL: '/file/db/thang.type/5786badaa6c6413500926209/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'forest-river-tile-straight',
      name: 'forest river tile straight',
      original: '577d58d5dbf35b24001b91cb',
      portraitURL: '/file/db/thang.type/577d58d5dbf35b24001b91cb/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'forest-river-tile-t-intersection',
      name: 'Forest River tile t intersection',
      original: '577d5b927e0491260074ba3a',
      portraitURL: '/file/db/thang.type/577d5b927e0491260074ba3a/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'forest-river-tile-turn',
      name: 'Forest River tile turn',
      original: '577d59e37e0491260074b5bd',
      portraitURL: '/file/db/thang.type/577d59e37e0491260074b5bd/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'forgetful-gemsmith-background',
      name: 'Forgetful Gemsmith Background',
      original: '562a9b9ea4cdd48805fb98ca',
      portraitURL: '/file/db/thang.type/562a9b9ea4cdd48805fb98ca/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'forgotten-bronze-ring',
      name: 'Forgotten Bronze Ring',
      original: '54692d8aa2b1f53ce7944397',
      portraitURL: '/file/db/thang.type/54692d8aa2b1f53ce7944397/portrait.png',
      kind: 'Item'
    }, {
      slug: 'frog',
      name: 'Frog',
      original: '57869cf7bd31c14400834028',
      portraitURL: '/file/db/thang.type/57869cf7bd31c14400834028/portrait.png',
      kind: 'Item'
    }, {
      slug: 'frog-pet',
      name: 'Frog Pet',
      original: '540f3678821af8000097dc56',
      portraitURL: '/file/db/thang.type/540f3678821af8000097dc56/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'gargoyle',
      name: 'Gargoyle',
      original: '52afc8f0c5b1813ec2000008',
      portraitURL: '/file/db/thang.type/52afc8f0c5b1813ec2000008/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'gargoyle-side',
      name: 'Gargoyle Side',
      original: '54efa07f4bb4788505d2339e',
      portraitURL: '/file/db/thang.type/54efa07f4bb4788505d2339e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'gauntlets-of-strength',
      name: 'Gauntlets of Strength',
      original: '53e2202953457600003e3ed9',
      portraitURL: '/file/db/thang.type/53e2202953457600003e3ed9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'gem-pile-medium',
      name: 'Gem Pile Medium',
      original: '543306638364d30000d1f951',
      portraitURL: '/file/db/thang.type/543306638364d30000d1f951/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'gem-pile-small',
      name: 'Gem Pile Small',
      original: '543305f78364d30000d1f94a',
      portraitURL: '/file/db/thang.type/543305f78364d30000d1f94a/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'gems-of-the-deep-background',
      name: 'Gems of the Deep Background',
      original: '563aa55276289f86054a7c02',
      portraitURL: '/file/db/thang.type/563aa55276289f86054a7c02/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'generic-armor-mark-1',
      name: 'Generic Armor Mark 1',
      original: '54d2be25bb157252059b2202',
      portraitURL: '/file/db/thang.type/54d2be25bb157252059b2202/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'generic-armor-mark-2',
      name: 'Generic Armor Mark 2',
      original: '54d2be9e3e16915505f0c7a4',
      portraitURL: '/file/db/thang.type/54d2be9e3e16915505f0c7a4/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'generic-item',
      name: 'Generic Item',
      original: '545d3eb52d03e700001b5a5b',
      portraitURL: '/file/db/thang.type/545d3eb52d03e700001b5a5b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'gift-of-the-trees',
      name: 'Gift of the Trees',
      original: '54eab0a32b7506e891ca71dd',
      portraitURL: '/file/db/thang.type/54eab0a32b7506e891ca71dd/portrait.png',
      kind: 'Item'
    }, {
      slug: 'gilt-wristwatch',
      name: 'Gilt Wristwatch',
      original: '54693830a2b1f53ce79443f1',
      portraitURL: '/file/db/thang.type/54693830a2b1f53ce79443f1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'glasses-doodad',
      name: 'Glasses Doodad',
      original: '5420c4c5a0feb36ad21d45e2',
      portraitURL: '/file/db/thang.type/5420c4c5a0feb36ad21d45e2/portrait.png',
      kind: 'Item'
    }, {
      slug: 'glitterbomb',
      name: 'Glitterbomb',
      original: '54eb50f649fa2d5c905ddf0a',
      portraitURL: '/file/db/thang.type/54eb50f649fa2d5c905ddf0a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'goal-trigger',
      name: 'Goal Trigger',
      original: '52bcbf0dce43b70000000006',
      portraitURL: '/file/db/thang.type/52bcbf0dce43b70000000006/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'gold-ball',
      name: 'Gold Ball',
      original: '550b742b8a7d3c197a824dad',
      portraitURL: '/file/db/thang.type/550b742b8a7d3c197a824dad/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'gold-cloud',
      name: 'Gold Cloud',
      original: '550b4b9d8a7d3c197a824d5e',
      portraitURL: '/file/db/thang.type/550b4b9d8a7d3c197a824d5e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'golden-wand',
      name: 'Golden Wand',
      original: '54eab7f52b7506e891ca7202',
      portraitURL: '/file/db/thang.type/54eab7f52b7506e891ca7202/portrait.png',
      kind: 'Item'
    }, {
      slug: 'goldspun-silk-cloak',
      name: 'Goldspun Silk Cloak',
      original: '546d49da9df4a17d0d449a8f',
      portraitURL: '/file/db/thang.type/546d49da9df4a17d0d449a8f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'goldspun-silk-hat',
      name: 'Goldspun Silk Hat',
      original: '546d4c249df4a17d0d449ab7',
      portraitURL: '/file/db/thang.type/546d4c249df4a17d0d449ab7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'grass-cliffs',
      name: 'Grass Cliffs',
      original: '52bcb96ece43b70000000003',
      portraitURL: '/file/db/thang.type/52bcb96ece43b70000000003/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'grass01',
      name: 'Grass01',
      original: '53016dddd82649ec2c0c9b29',
      portraitURL: '/file/db/thang.type/53016dddd82649ec2c0c9b29/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'grass02',
      name: 'Grass02',
      original: '53016fc098f2ca1f6e82eebd',
      portraitURL: '/file/db/thang.type/53016fc098f2ca1f6e82eebd/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'grass03',
      name: 'Grass03',
      original: '5301702d98f2ca1f6e82eec4',
      portraitURL: '/file/db/thang.type/5301702d98f2ca1f6e82eec4/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'grass04',
      name: 'Grass04',
      original: '530170a198f2ca1f6e82eecf',
      portraitURL: '/file/db/thang.type/530170a198f2ca1f6e82eecf/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'grass05',
      name: 'Grass05',
      original: '5301716398f2ca1f6e82eedc',
      portraitURL: '/file/db/thang.type/5301716398f2ca1f6e82eedc/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'gravestone-cross',
      name: 'Gravestone Cross',
      original: '54f1100e8d380d7f05acc975',
      portraitURL: '/file/db/thang.type/54f1100e8d380d7f05acc975/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'gravestone-rounded',
      name: 'Gravestone Rounded',
      original: '54f110e3f854c97a05551616',
      portraitURL: '/file/db/thang.type/54f110e3f854c97a05551616/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'gravestone-square',
      name: 'Gravestone Square',
      original: '54f10f08d2969f8405ef51fd',
      portraitURL: '/file/db/thang.type/54f10f08d2969f8405ef51fd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'graveyard-fence',
      name: 'Graveyard Fence',
      original: '54f111b379054c8705757747',
      portraitURL: '/file/db/thang.type/54f111b379054c8705757747/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'great-sword',
      name: 'Great Sword',
      original: '544d7f8d8494308424f564bf',
      portraitURL: '/file/db/thang.type/544d7f8d8494308424f564bf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'greed-background',
      name: 'Greed Background',
      original: '53764e4ea7b5ab3805f153a4',
      portraitURL: '/file/db/thang.type/53764e4ea7b5ab3805f153a4/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'green-bubble-missile',
      name: 'Green Bubble Missile',
      original: '540e35a34f21cd879ba4f140',
      portraitURL: '/file/db/thang.type/540e35a34f21cd879ba4f140/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'griffin-rider',
      name: 'Griffin Rider',
      original: '52d45d1ab10ae4b024000002',
      portraitURL: '/file/db/thang.type/52d45d1ab10ae4b024000002/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'griffin-wool-hat',
      name: 'Griffin Wool Hat',
      original: '546d4c699df4a17d0d449abb',
      portraitURL: '/file/db/thang.type/546d4c699df4a17d0d449abb/portrait.png',
      kind: 'Item'
    }, {
      slug: 'griffin-wool-robe',
      name: 'Griffin Wool Robe',
      original: '546d4a159df4a17d0d449a93',
      portraitURL: '/file/db/thang.type/546d4a159df4a17d0d449a93/portrait.png',
      kind: 'Item'
    }, {
      slug: 'hand-sewn-linen-wizards-hat',
      name: 'Hand-sewn Linen Wizard\'s Hat',
      original: '546d4bec9df4a17d0d449ab3',
      portraitURL: '/file/db/thang.type/546d4bec9df4a17d0d449ab3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'hardened-emerald-chainmail-coif',
      name: 'Hardened Emerald Chainmail Coif',
      original: '546d47159df4a17d0d449a67',
      portraitURL: '/file/db/thang.type/546d47159df4a17d0d449a67/portrait.png',
      kind: 'Item'
    }, {
      slug: 'hardened-emerald-chainmail-tunic',
      name: 'Hardened Emerald Chainmail Tunic',
      original: '546d3cce9df4a17d0d449a3f',
      portraitURL: '/file/db/thang.type/546d3cce9df4a17d0d449a3f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'hardened-steel-glasses',
      name: 'Hardened Steel Glasses',
      original: '546940d8a2b1f53ce794440d',
      portraitURL: '/file/db/thang.type/546940d8a2b1f53ce794440d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'harrowland-background',
      name: 'Harrowland Background',
      original: '572e51e3f8c4f9b601ede885',
      portraitURL: '/file/db/thang.type/572e51e3f8c4f9b601ede885/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'haste',
      name: 'Haste',
      original: '530251cfa6efdd32359c53d5',
      portraitURL: '/file/db/thang.type/530251cfa6efdd32359c53d5/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'haunted-kithmaze-background',
      name: 'Haunted Kithmaze Background',
      original: '569dd4f2b55fd82e0011b79b',
      portraitURL: '/file/db/thang.type/569dd4f2b55fd82e0011b79b/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'heal',
      name: 'Heal',
      original: '55c63ebcef141c65665beb59',
      portraitURL: '/file/db/thang.type/55c63ebcef141c65665beb59/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'health-potion-large',
      name: 'Health Potion Large',
      original: '52afc634c5b1813ec2000002',
      portraitURL: '/file/db/thang.type/52afc634c5b1813ec2000002/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'health-potion-medium',
      name: 'Health Potion Medium',
      original: '52afc742c5b1813ec2000004',
      portraitURL: '/file/db/thang.type/52afc742c5b1813ec2000004/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'health-potion-small',
      name: 'Health Potion Small',
      original: '52afc7b6c5b1813ec2000006',
      portraitURL: '/file/db/thang.type/52afc7b6c5b1813ec2000006/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'heavy-iron-breastplate',
      name: 'Heavy Iron Breastplate',
      original: '546aaf1b3777d6186329285e',
      portraitURL: '/file/db/thang.type/546aaf1b3777d6186329285e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'heavy-iron-helmet',
      name: 'Heavy Iron Helmet',
      original: '546d390b9df4a17d0d449a0b',
      portraitURL: '/file/db/thang.type/546d390b9df4a17d0d449a0b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'helmet-fall-1',
      name: 'Helmet Fall 1',
      original: '53e2e3e66c59f5340504108f',
      portraitURL: '/file/db/thang.type/53e2e3e66c59f5340504108f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'hide',
      name: 'Hide',
      original: '55c281e83767fd3435eb446d',
      portraitURL: '/file/db/thang.type/55c281e83767fd3435eb446d/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'highlight',
      name: 'Highlight',
      original: '529f8fdbdacd325127000003',
      portraitURL: '/file/db/thang.type/529f8fdbdacd325127000003/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'holoball',
      name: 'Holoball',
      original: '56d0fa8a087ee32400764bb8',
      portraitURL: '/file/db/thang.type/56d0fa8a087ee32400764bb8/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'holy-sword',
      name: 'Holy Sword',
      original: '53e21249b82921000051ce11',
      portraitURL: '/file/db/thang.type/53e21249b82921000051ce11/portrait.png',
      kind: 'Item'
    }, {
      slug: 'house-1',
      name: 'House 1',
      original: '52b095bbccbc671372000006',
      portraitURL: '/file/db/thang.type/52b095bbccbc671372000006/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'house-2',
      name: 'House 2',
      original: '52b09d35ccbc671372000009',
      portraitURL: '/file/db/thang.type/52b09d35ccbc671372000009/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'house-3',
      name: 'House 3',
      original: '52b09dd0ccbc67137200000b',
      portraitURL: '/file/db/thang.type/52b09dd0ccbc67137200000b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'house-4',
      name: 'House 4',
      original: '52b09e2fccbc67137200000d',
      portraitURL: '/file/db/thang.type/52b09e2fccbc67137200000d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'hoverboard-stand',
      name: 'Hoverboard Stand',
      original: '56c630aeed946a44004ff139',
      portraitURL: '/file/db/thang.type/56c630aeed946a44004ff139/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'human-barracks',
      name: 'Human Barracks',
      original: '530ce329ec5bdaba2a72a99c',
      portraitURL: '/file/db/thang.type/530ce329ec5bdaba2a72a99c/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'hunting-rifle',
      name: 'Hunting Rifle',
      original: '544d82aa8494308424f564cf',
      portraitURL: '/file/db/thang.type/544d82aa8494308424f564cf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ice-crystals-1',
      name: 'Ice Crystals 1',
      original: '557639501e82182d9e688945',
      portraitURL: '/file/db/thang.type/557639501e82182d9e688945/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-crystals-2',
      name: 'Ice Crystals 2',
      original: '557639b91e82182d9e688949',
      portraitURL: '/file/db/thang.type/557639b91e82182d9e688949/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-door',
      name: 'Ice Door',
      original: '557f32b0b43ce0b15a91b16d',
      portraitURL: '/file/db/thang.type/557f32b0b43ce0b15a91b16d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-gargoyle',
      name: 'Ice Gargoyle',
      original: '55760d3f1e82182d9e6888f6',
      portraitURL: '/file/db/thang.type/55760d3f1e82182d9e6888f6/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-gargoyle-fore',
      name: 'Ice Gargoyle Fore',
      original: '55760e311e82182d9e688902',
      portraitURL: '/file/db/thang.type/55760e311e82182d9e688902/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-gargoyle-ruin',
      name: 'Ice Gargoyle Ruin',
      original: '55760dc31e82182d9e6888fa',
      portraitURL: '/file/db/thang.type/55760dc31e82182d9e6888fa/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-gargoyle-ruin-fore',
      name: 'Ice Gargoyle Ruin Fore',
      original: '55760dfa1e82182d9e6888fe',
      portraitURL: '/file/db/thang.type/55760dfa1e82182d9e6888fe/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-rink-1',
      name: 'Ice Rink 1',
      original: '557f321bb43ce0b15a91b161',
      portraitURL: '/file/db/thang.type/557f321bb43ce0b15a91b161/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'ice-rink-2',
      name: 'Ice Rink 2',
      original: '557f325cb43ce0b15a91b165',
      portraitURL: '/file/db/thang.type/557f325cb43ce0b15a91b165/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'ice-rink-3',
      name: 'Ice Rink 3',
      original: '557f3275b43ce0b15a91b169',
      portraitURL: '/file/db/thang.type/557f3275b43ce0b15a91b169/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'ice-tree-1',
      name: 'Ice Tree 1',
      original: '557635641e82182d9e688929',
      portraitURL: '/file/db/thang.type/557635641e82182d9e688929/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-tree-2',
      name: 'Ice Tree 2',
      original: '557636401e82182d9e68892d',
      portraitURL: '/file/db/thang.type/557636401e82182d9e68892d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-tree-3',
      name: 'Ice Tree 3',
      original: '557636e11e82182d9e688931',
      portraitURL: '/file/db/thang.type/557636e11e82182d9e688931/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ice-wall',
      name: 'Ice Wall',
      original: '5575f002f3f8d13b4ee1e7fc',
      portraitURL: '/file/db/thang.type/5575f002f3f8d13b4ee1e7fc/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'ice-yak',
      name: 'Ice Yak',
      original: '557f3917b43ce0b15a91b175',
      portraitURL: '/file/db/thang.type/557f3917b43ce0b15a91b175/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'igloo-1',
      name: 'Igloo 1',
      original: '557608f61e82182d9e6888cf',
      portraitURL: '/file/db/thang.type/557608f61e82182d9e6888cf/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'igloo-2',
      name: 'Igloo 2',
      original: '557609b01e82182d9e6888d3',
      portraitURL: '/file/db/thang.type/557609b01e82182d9e6888d3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'igloo-3',
      name: 'Igloo 3',
      original: '557609dd1e82182d9e6888d7',
      portraitURL: '/file/db/thang.type/557609dd1e82182d9e6888d7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'igloo-4',
      name: 'Igloo 4',
      original: '55760a2c1e82182d9e6888db',
      portraitURL: '/file/db/thang.type/55760a2c1e82182d9e6888db/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'impaling-firebolt',
      name: 'Impaling Firebolt',
      original: '54f767c4b3e4927805021022',
      portraitURL: '/file/db/thang.type/54f767c4b3e4927805021022/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'importer-of-great-justice',
      name: 'Importer of Great Justice',
      original: '54938575e9850ae3e8fbdd74',
      portraitURL: '/file/db/thang.type/54938575e9850ae3e8fbdd74/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'indoor-floor',
      name: 'Indoor Floor',
      original: '52ead2b2207133f35c000833',
      portraitURL: '/file/db/thang.type/52ead2b2207133f35c000833/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'indoor-wall',
      name: 'Indoor Wall',
      original: '52ea9a13d23f140d100000b2',
      portraitURL: '/file/db/thang.type/52ea9a13d23f140d100000b2/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'infantry-shield',
      name: 'Infantry Shield',
      original: '544d7bb88494308424f56493',
      portraitURL: '/file/db/thang.type/544d7bb88494308424f56493/portrait.png',
      kind: 'Item'
    }, {
      slug: 'invisible',
      name: 'Invisible',
      original: '52b0f9c75c5c4af6bd000004',
      portraitURL: '/file/db/thang.type/52b0f9c75c5c4af6bd000004/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'iron-chainmail-coif',
      name: 'Iron Chainmail Coif',
      original: '546d45c59df4a17d0d449a53',
      portraitURL: '/file/db/thang.type/546d45c59df4a17d0d449a53/portrait.png',
      kind: 'Item'
    }, {
      slug: 'iron-chainmail-tunic',
      name: 'Iron Chainmail Tunic',
      original: '546d3b7c9df4a17d0d449a2b',
      portraitURL: '/file/db/thang.type/546d3b7c9df4a17d0d449a2b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'iron-defender',
      name: 'Iron Defender',
      original: '54eaabe62b7506e891ca71c9',
      portraitURL: '/file/db/thang.type/54eaabe62b7506e891ca71c9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'iron-link',
      name: 'Iron Link',
      original: '54692d5ca2b1f53ce7944393',
      portraitURL: '/file/db/thang.type/54692d5ca2b1f53ce7944393/portrait.png',
      kind: 'Item'
    }, {
      slug: 'iron-maiden',
      name: 'Iron Maiden',
      original: '54ef9f0a83b08b7d054ba50d',
      portraitURL: '/file/db/thang.type/54ef9f0a83b08b7d054ba50d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'iron-shield',
      name: 'Iron Shield',
      original: '5441c3f44e9aeb727cc97129',
      portraitURL: '/file/db/thang.type/5441c3f44e9aeb727cc97129/portrait.png',
      kind: 'Item'
    }, {
      slug: 'kings-ring',
      name: 'King\'s Ring',
      original: '54eb56df49fa2d5c905ddf2e',
      portraitURL: '/file/db/thang.type/54eb56df49fa2d5c905ddf2e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'kithgard-gates-background',
      name: 'Kithgard Gates Background',
      original: '572e52b17a9c3e8101b8be0e',
      portraitURL: '/file/db/thang.type/572e52b17a9c3e8101b8be0e/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'kithgard-workers-glasses',
      name: 'Kithgard Worker\'s Glasses',
      original: '53eb99f41a100989a40ce46e',
      portraitURL: '/file/db/thang.type/53eb99f41a100989a40ce46e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'kithsteel-blade',
      name: 'Kithsteel Blade',
      original: '54eaa78a2b7506e891ca719d',
      portraitURL: '/file/db/thang.type/54eaa78a2b7506e891ca719d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'knightfire-charge',
      name: 'Knightfire Charge',
      original: '544d96328494308424f56533',
      portraitURL: '/file/db/thang.type/544d96328494308424f56533/portrait.png',
      kind: 'Item'
    }, {
      slug: 'knightfire-charge-missile',
      name: 'Knightfire Charge Missile',
      original: '546297f1f44055a4b5e735bb',
      portraitURL: '/file/db/thang.type/546297f1f44055a4b5e735bb/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'known-enemy-background',
      name: 'Known Enemy Background',
      original: '572e4e61b2088976012429eb',
      portraitURL: '/file/db/thang.type/572e4e61b2088976012429eb/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'koraths-promise',
      name: 'Korath\'s Promise',
      original: '54eb575749fa2d5c905ddf3a',
      portraitURL: '/file/db/thang.type/54eb575749fa2d5c905ddf3a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'krummholz-1',
      name: 'Krummholz 1',
      original: '54e953adf54ef5794f354ef1',
      portraitURL: '/file/db/thang.type/54e953adf54ef5794f354ef1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'krummholz-2',
      name: 'Krummholz 2',
      original: '54e9545bf54ef5794f354ef5',
      portraitURL: '/file/db/thang.type/54e9545bf54ef5794f354ef5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'krummholz-3',
      name: 'Krummholz 3',
      original: '54e95492f54ef5794f354ef9',
      portraitURL: '/file/db/thang.type/54e95492f54ef5794f354ef9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'lambswool-cloak',
      name: 'Lambswool Cloak',
      original: '546d48ce9df4a17d0d449a7b',
      portraitURL: '/file/db/thang.type/546d48ce9df4a17d0d449a7b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'large-bolt-crossbow',
      name: 'Large Bolt Crossbow',
      original: '544d80598494308424f564c7',
      portraitURL: '/file/db/thang.type/544d80598494308424f564c7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'large-classroom-viewscreen-off',
      name: 'Large Classroom Viewscreen Off',
      original: '56c632c6abf4a61f009040b5',
      portraitURL: '/file/db/thang.type/56c632c6abf4a61f009040b5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'large-classroom-viewscreen-on',
      name: 'Large Classroom Viewscreen On',
      original: '56eb28b267a0142000a36358',
      portraitURL: '/file/db/thang.type/56eb28b267a0142000a36358/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'lava-grate',
      name: 'Lava Grate',
      original: '54ef9fb8c1f3bd7c05941750',
      portraitURL: '/file/db/thang.type/54ef9fb8c1f3bd7c05941750/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'leather-belt',
      name: 'Leather Belt',
      original: '5437002a7beba4a82024a97d',
      portraitURL: '/file/db/thang.type/5437002a7beba4a82024a97d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'leather-boots',
      name: 'Leather Boots',
      original: '53e2384453457600003e3f07',
      portraitURL: '/file/db/thang.type/53e2384453457600003e3f07/portrait.png',
      kind: 'Item'
    }, {
      slug: 'leather-chainmail-coif',
      name: 'Leather Chainmail Coif',
      original: '546d45089df4a17d0d449a4b',
      portraitURL: '/file/db/thang.type/546d45089df4a17d0d449a4b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'leather-chainmail-tunic',
      name: 'Leather Chainmail Tunic',
      original: '546d3ab69df4a17d0d449a23',
      portraitURL: '/file/db/thang.type/546d3ab69df4a17d0d449a23/portrait.png',
      kind: 'Item'
    }, {
      slug: 'leather-tunic',
      name: 'Leather Tunic',
      original: '545d3cf22d03e700001b5a58',
      portraitURL: '/file/db/thang.type/545d3cf22d03e700001b5a58/portrait.png',
      kind: 'Item'
    }, {
      slug: 'level-banner',
      name: 'Level Banner',
      original: '5432c9688364d30000d1f935',
      portraitURL: '/file/db/thang.type/5432c9688364d30000d1f935/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'lightning-bolt',
      name: 'Lightning Bolt',
      original: '54f3fa515fcc6a3950c7eabd',
      portraitURL: '/file/db/thang.type/54f3fa515fcc6a3950c7eabd/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'lightning-stick',
      name: 'Lightning Stick',
      original: '544d86318494308424f564e8',
      portraitURL: '/file/db/thang.type/544d86318494308424f564e8/portrait.png',
      kind: 'Item'
    }, {
      slug: 'lightning-twig',
      name: 'Lightning Twig',
      original: '54eab1ec2b7506e891ca71e1',
      portraitURL: '/file/db/thang.type/54eab1ec2b7506e891ca71e1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'lightstone',
      name: 'Lightstone',
      original: '54da20b7163110520551ed33',
      portraitURL: '/file/db/thang.type/54da20b7163110520551ed33/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'log-1',
      name: 'Log 1',
      original: '54e954d7f54ef5794f354efd',
      portraitURL: '/file/db/thang.type/54e954d7f54ef5794f354efd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'log-2',
      name: 'Log 2',
      original: '54e9553ef54ef5794f354f01',
      portraitURL: '/file/db/thang.type/54e9553ef54ef5794f354f01/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'log-3',
      name: 'Log 3',
      original: '54e9556af54ef5794f354f05',
      portraitURL: '/file/db/thang.type/54e9556af54ef5794f354f05/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'long-sword',
      name: 'Long Sword',
      original: '544d7d1f8494308424f564a3',
      portraitURL: '/file/db/thang.type/544d7d1f8494308424f564a3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'loop-da-loop-background',
      name: 'Loop Da Loop Background',
      original: '56c67cba797353370060506d',
      portraitURL: '/file/db/thang.type/56c67cba797353370060506d/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'magic-missile',
      name: 'Magic Missile',
      original: '5467beaf69d1ba0000fb91fb',
      portraitURL: '/file/db/thang.type/5467beaf69d1ba0000fb91fb/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'magnetize',
      name: 'Magnetize',
      original: '55c6403eef141c65665beb5e',
      portraitURL: '/file/db/thang.type/55c6403eef141c65665beb5e/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'mahogany-glasses',
      name: 'Mahogany Glasses',
      original: '54694093a2b1f53ce7944408',
      portraitURL: '/file/db/thang.type/54694093a2b1f53ce7944408/portrait.png',
      kind: 'Item'
    }, {
      slug: 'mahogany-staff',
      name: 'Mahogany Staff',
      original: '544d88158494308424f56501',
      portraitURL: '/file/db/thang.type/544d88158494308424f56501/portrait.png',
      kind: 'Item'
    }, {
      slug: 'maka-test-wall',
      name: 'maka-test-wall',
      original: '56a7d85fb679392600e31138',
      portraitURL: '/file/db/thang.type/56a7d85fb679392600e31138/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'market-stand',
      name: 'Market Stand',
      original: '54f11600f854c97a055516da',
      portraitURL: '/file/db/thang.type/54f11600f854c97a055516da/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'master-of-names-background',
      name: 'Master of Names Background',
      original: '572e4ec2e8db519501484869',
      portraitURL: '/file/db/thang.type/572e4ec2e8db519501484869/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'master-sword',
      name: 'Master Sword',
      original: '54ea89112b7506e891ca717d',
      portraitURL: '/file/db/thang.type/54ea89112b7506e891ca717d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'masters-flags',
      name: 'Master\'s Flags',
      original: '5478b9be8707a2c3a2493b33',
      portraitURL: '/file/db/thang.type/5478b9be8707a2c3a2493b33/portrait.png',
      kind: 'Item'
    }, {
      slug: 'mausoleum',
      name: 'Mausoleum',
      original: '54f1128a25be5e8805837491',
      portraitURL: '/file/db/thang.type/54f1128a25be5e8805837491/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mayhem-background',
      name: 'Mayhem Background',
      original: '572e5071e8db519501484896',
      portraitURL: '/file/db/thang.type/572e5071e8db519501484896/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'mcp',
      name: 'mcp',
      original: '576322da0d81132500afdc8d',
      portraitURL: '/file/db/thang.type/576322da0d81132500afdc8d/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'megaphone',
      name: 'Megaphone',
      original: '53e216ff53457600003e3eb7',
      portraitURL: '/file/db/thang.type/53e216ff53457600003e3eb7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'metal-builders-hammer',
      name: 'Metal Builder\'s Hammer',
      original: '54694c79a2b1f53ce794445e',
      portraitURL: '/file/db/thang.type/54694c79a2b1f53ce794445e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'moonless-night',
      name: 'Moonless Night',
      original: '54692f44a2b1f53ce79443b8',
      portraitURL: '/file/db/thang.type/54692f44a2b1f53ce79443b8/portrait.png',
      kind: 'Item'
    }, {
      slug: 'moonlit-blade',
      name: 'Moonlit Blade',
      original: '544d95a48494308424f56523',
      portraitURL: '/file/db/thang.type/544d95a48494308424f56523/portrait.png',
      kind: 'Item'
    }, {
      slug: 'moonlit-blade-missile',
      name: 'Moonlit Blade Missile',
      original: '544d97bc8494308424f5653c',
      portraitURL: '/file/db/thang.type/544d97bc8494308424f5653c/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'mornings-edge',
      name: 'Morning\'s Edge',
      original: '54eaa69a2b7506e891ca7195',
      portraitURL: '/file/db/thang.type/54eaa69a2b7506e891ca7195/portrait.png',
      kind: 'Item'
    }, {
      slug: 'mountain-1',
      name: 'Mountain 1',
      original: '54e931d7970f0b0a263c03ef',
      portraitURL: '/file/db/thang.type/54e931d7970f0b0a263c03ef/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-2',
      name: 'Mountain 2',
      original: '54e9340b970f0b0a263c03f3',
      portraitURL: '/file/db/thang.type/54e9340b970f0b0a263c03f3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-3',
      name: 'Mountain 3',
      original: '54e935d1970f0b0a263c03f7',
      portraitURL: '/file/db/thang.type/54e935d1970f0b0a263c03f7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-4',
      name: 'Mountain 4',
      original: '54e9377e970f0b0a263c03fc',
      portraitURL: '/file/db/thang.type/54e9377e970f0b0a263c03fc/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-lake-1',
      name: 'Mountain Lake 1',
      original: '54e93f0ef54ef5794f354e99',
      portraitURL: '/file/db/thang.type/54e93f0ef54ef5794f354e99/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-lake-2',
      name: 'Mountain Lake 2',
      original: '54e94106f54ef5794f354ea3',
      portraitURL: '/file/db/thang.type/54e94106f54ef5794f354ea3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-shrub-1',
      name: 'Mountain Shrub 1',
      original: '54e9567ff54ef5794f354f11',
      portraitURL: '/file/db/thang.type/54e9567ff54ef5794f354f11/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-shrub-2',
      name: 'Mountain Shrub 2',
      original: '54e956b7f54ef5794f354f15',
      portraitURL: '/file/db/thang.type/54e956b7f54ef5794f354f15/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-shrub-3',
      name: 'Mountain Shrub 3',
      original: '54e956def54ef5794f354f19',
      portraitURL: '/file/db/thang.type/54e956def54ef5794f354f19/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-shrub-4',
      name: 'Mountain Shrub 4',
      original: '54e95724f54ef5794f354f1d',
      portraitURL: '/file/db/thang.type/54e95724f54ef5794f354f1d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-tree-stand-1',
      name: 'Mountain Tree Stand 1',
      original: '55c24e91dfc8d0b576e60a5e',
      portraitURL: '/file/db/thang.type/55c24e91dfc8d0b576e60a5e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-tree-stand-2',
      name: 'Mountain Tree Stand 2',
      original: '55c25141dfc8d0b576e60a64',
      portraitURL: '/file/db/thang.type/55c25141dfc8d0b576e60a64/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-tree-stand-3',
      name: 'Mountain Tree Stand 3',
      original: '55c25173dfc8d0b576e60a6a',
      portraitURL: '/file/db/thang.type/55c25173dfc8d0b576e60a6a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mountain-tree-stand-4',
      name: 'Mountain Tree Stand 4',
      original: '55c25190dfc8d0b576e60a70',
      portraitURL: '/file/db/thang.type/55c25190dfc8d0b576e60a70/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'movement-stone',
      name: 'Movement Stone',
      original: '546e257a9df4a17d0d449bd9',
      portraitURL: '/file/db/thang.type/546e257a9df4a17d0d449bd9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'movement-stone-loop',
      name: 'Movement Stone Loop',
      original: '546e24679df4a17d0d449bc1',
      portraitURL: '/file/db/thang.type/546e24679df4a17d0d449bc1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'multiplayer-treasure-grove-background',
      name: 'Multiplayer Treasure Grove Background',
      original: '572e526e7a9c3e8101b8be02',
      portraitURL: '/file/db/thang.type/572e526e7a9c3e8101b8be02/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'mummy',
      name: 'Mummy',
      original: '54ef799c8d75558205e98a8e',
      portraitURL: '/file/db/thang.type/54ef799c8d75558205e98a8e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mushroom',
      name: 'Mushroom',
      original: '52bcc23a8c4289607b00000a',
      portraitURL: '/file/db/thang.type/52bcc23a8c4289607b00000a/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'mushroom-cluster-1',
      name: 'Mushroom Cluster 1',
      original: '5576376f1e82182d9e688935',
      portraitURL: '/file/db/thang.type/5576376f1e82182d9e688935/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mushroom-cluster-2',
      name: 'Mushroom Cluster 2',
      original: '557638341e82182d9e688939',
      portraitURL: '/file/db/thang.type/557638341e82182d9e688939/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mushroom-cluster-3',
      name: 'Mushroom Cluster 3',
      original: '557638731e82182d9e68893d',
      portraitURL: '/file/db/thang.type/557638731e82182d9e68893d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'mushroom-cluster-4',
      name: 'Mushroom Cluster 4',
      original: '5576390e1e82182d9e688941',
      portraitURL: '/file/db/thang.type/5576390e1e82182d9e688941/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'musty-linen-robe',
      name: 'Musty Linen Robe',
      original: '546d49409df4a17d0d449a83',
      portraitURL: '/file/db/thang.type/546d49409df4a17d0d449a83/portrait.png',
      kind: 'Item'
    }, {
      slug: 'newmakatesthushbaum',
      name: 'newmakatesthushbaum',
      original: '56ce223647c33f2400d98c66',
      portraitURL: '/file/db/thang.type/56ce223647c33f2400d98c66/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'nightingales-song',
      name: 'Nightingale\'s Song',
      original: '54eb570b49fa2d5c905ddf32',
      portraitURL: '/file/db/thang.type/54eb570b49fa2d5c905ddf32/portrait.png',
      kind: 'Item'
    }, {
      slug: 'north-mounted-camera-facing-east-west',
      name: 'north mounted camera facing east-west',
      original: '56f175f2f3ae4cc900a0c5fc',
      portraitURL: '/file/db/thang.type/56f175f2f3ae4cc900a0c5fc/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'north-mounted-camera-facing-north',
      name: 'north mounted camera facing north',
      original: '56f173384852efd20059948a',
      portraitURL: '/file/db/thang.type/56f173384852efd20059948a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'north-mounted-camera-facing-south',
      name: 'north mounted camera facing south',
      original: '56f17562f3ae4cc900a0c57a',
      portraitURL: '/file/db/thang.type/56f17562f3ae4cc900a0c57a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'oak-crossbow',
      name: 'Oak Crossbow',
      original: '544d80928494308424f564cb',
      portraitURL: '/file/db/thang.type/544d80928494308424f564cb/portrait.png',
      kind: 'Item'
    }, {
      slug: 'oak-sphere-staff',
      name: 'Oak Sphere Staff',
      original: '544d88b78494308424f5650d',
      portraitURL: '/file/db/thang.type/544d88b78494308424f5650d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'oak-wand',
      name: 'Oak Wand',
      original: '544d87d18494308424f564fd',
      portraitURL: '/file/db/thang.type/544d87d18494308424f564fd/portrait.png',
      kind: 'Item'
    }, {
      slug: 'oasis-1',
      name: 'Oasis 1',
      original: '544d79678494308424f56480',
      portraitURL: '/file/db/thang.type/544d79678494308424f56480/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'oasis-2',
      name: 'Oasis 2',
      original: '544d71198494308424f5647c',
      portraitURL: '/file/db/thang.type/544d71198494308424f5647c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'oasis-3',
      name: 'Oasis 3',
      original: '5435d22f7b554def1f99c49a',
      portraitURL: '/file/db/thang.type/5435d22f7b554def1f99c49a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'obsidian-breastplate',
      name: 'Obsidian Breastplate',
      original: '546ab11b3777d6186329286a',
      portraitURL: '/file/db/thang.type/546ab11b3777d6186329286a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'obsidian-helmet',
      name: 'Obsidian Helmet',
      original: '546d39989df4a17d0d449a13',
      portraitURL: '/file/db/thang.type/546d39989df4a17d0d449a13/portrait.png',
      kind: 'Item'
    }, {
      slug: 'obsidian-shield',
      name: 'Obsidian Shield',
      original: '54eaba502b7506e891ca7216',
      portraitURL: '/file/db/thang.type/54eaba502b7506e891ca7216/portrait.png',
      kind: 'Item'
    }, {
      slug: 'obsidian-staff',
      name: 'Obsidian Staff',
      original: '54eab4b92b7506e891ca71ea',
      portraitURL: '/file/db/thang.type/54eab4b92b7506e891ca71ea/portrait.png',
      kind: 'Item'
    }, {
      slug: 'obstacle',
      name: 'Obstacle',
      original: '52bcc10d1f766a891c000001',
      portraitURL: '/file/db/thang.type/52bcc10d1f766a891c000001/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'office-chair',
      name: 'office-chair',
      original: '56b25d8cc9d8ed21008354b8',
      portraitURL: '/file/db/thang.type/56b25d8cc9d8ed21008354b8/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'office-desk',
      name: 'Office Desk',
      original: '56b26c487168802600d26218',
      portraitURL: '/file/db/thang.type/56b26c487168802600d26218/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'office-door',
      name: 'Office Door',
      original: '56ba3366131fde2a000b84db',
      portraitURL: '/file/db/thang.type/56ba3366131fde2a000b84db/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'office-filing-cabinet',
      name: 'Office Filing Cabinet',
      original: '56b267eec2958a26005fbb58',
      portraitURL: '/file/db/thang.type/56b267eec2958a26005fbb58/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'office-filing-cabinet-2',
      name: 'Office Filing Cabinet 2',
      original: '56b268dd7168802600d25f3d',
      portraitURL: '/file/db/thang.type/56b268dd7168802600d25f3d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'office-floor',
      name: 'Office Floor',
      original: '56b26e39bb550b26003adef0',
      portraitURL: '/file/db/thang.type/56b26e39bb550b26003adef0/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'office-wall',
      name: 'office-wall',
      original: '56abc26c26c92a26005b3745',
      portraitURL: '/file/db/thang.type/56abc26c26c92a26005b3745/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'ogre-barracks',
      name: 'Ogre Barracks',
      original: '530d11faa8583eb90a2fc76f',
      portraitURL: '/file/db/thang.type/530d11faa8583eb90a2fc76f/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-fence',
      name: 'Ogre Fence',
      original: '5456b5c5d5ada30000525609',
      portraitURL: '/file/db/thang.type/5456b5c5d5ada30000525609/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-fence-2',
      name: 'Ogre Fence 2',
      original: '5456b631d5ada3000052560b',
      portraitURL: '/file/db/thang.type/5456b631d5ada3000052560b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-headhunter-hero',
      name: 'Ogre Headhunter Hero',
      original: '5670779dfb9b702400cf6987',
      portraitURL: '/file/db/thang.type/5670779dfb9b702400cf6987/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-peon-f',
      name: 'Ogre Peon F',
      original: '53765709a7b5ab3805f15512',
      portraitURL: '/file/db/thang.type/53765709a7b5ab3805f15512/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-peon-m',
      name: 'Ogre Peon M',
      original: '53793734f883583805e356e2',
      portraitURL: '/file/db/thang.type/53793734f883583805e356e2/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-scout-f',
      name: 'Ogre Scout F',
      original: '54909436b30e9eb7027fe21c',
      portraitURL: '/file/db/thang.type/54909436b30e9eb7027fe21c/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-scout-m',
      name: 'Ogre Scout M',
      original: '54908ce5b30e9eb7027fe201',
      portraitURL: '/file/db/thang.type/54908ce5b30e9eb7027fe201/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'ogre-tent',
      name: 'Ogre Tent',
      original: '5456b49dd5ada30000525607',
      portraitURL: '/file/db/thang.type/5456b49dd5ada30000525607/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-tower',
      name: 'ogre tower',
      original: '578686459fabcb1f0087d064',
      portraitURL: '/file/db/thang.type/578686459fabcb1f0087d064/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-tower-with-desert-rocks',
      name: 'ogre tower with desert rocks',
      original: '572d465dab2d38ad00a1c918',
      portraitURL: '/file/db/thang.type/572d465dab2d38ad00a1c918/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-towers-with-trees',
      name: 'ogre towers with trees',
      original: '572d47eee24ce2fb0025c6f3',
      portraitURL: '/file/db/thang.type/572d47eee24ce2fb0025c6f3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-treasure-chest',
      name: 'Ogre Treasure Chest',
      original: '540e16d6821af8000097dc55',
      portraitURL: '/file/db/thang.type/540e16d6821af8000097dc55/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-wall',
      name: 'ogre wall',
      original: '5786834a2437842400f4009c',
      portraitURL: '/file/db/thang.type/5786834a2437842400f4009c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'ogre-witch-hero',
      name: 'Ogre Witch Hero',
      original: '5638f6c4ef9d6464094a559d',
      portraitURL: '/file/db/thang.type/5638f6c4ef9d6464094a559d/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'old-selection',
      name: 'Old Selection',
      original: '52aa5f7520fccb0000000002',
      portraitURL: '/file/db/thang.type/52aa5f7520fccb0000000002/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'order-of-the-paladin',
      name: 'Order of the Paladin',
      original: '54eb55af49fa2d5c905ddf22',
      portraitURL: '/file/db/thang.type/54eb55af49fa2d5c905ddf22/portrait.png',
      kind: 'Item'
    }, {
      slug: 'overseer',
      name: 'Overseer',
      original: '56e75e0b67a0142000a12699',
      portraitURL: '/file/db/thang.type/56e75e0b67a0142000a12699/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'painted-steel-breastplate',
      name: 'Painted Steel Breastplate',
      original: '546ab0dd3777d61863292866',
      portraitURL: '/file/db/thang.type/546ab0dd3777d61863292866/portrait.png',
      kind: 'Item'
    }, {
      slug: 'painted-steel-helmet',
      name: 'Painted Steel Helmet',
      original: '546d39589df4a17d0d449a0f',
      portraitURL: '/file/db/thang.type/546d39589df4a17d0d449a0f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'painted-steel-shield',
      name: 'Painted Steel Shield',
      original: '544d7c5b8494308424f5649b',
      portraitURL: '/file/db/thang.type/544d7c5b8494308424f5649b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'palisade',
      name: 'Palisade',
      original: '546e24bd9df4a17d0d449bc9',
      portraitURL: '/file/db/thang.type/546e24bd9df4a17d0d449bc9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'paralyze',
      name: 'Paralyze',
      original: '53024e6b222f73867774d773',
      portraitURL: '/file/db/thang.type/53024e6b222f73867774d773/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'pedestal',
      name: 'Pedestal',
      original: '542ae4750048dcb95727a1e6',
      portraitURL: '/file/db/thang.type/542ae4750048dcb95727a1e6/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'phoenixfire',
      name: 'Phoenixfire',
      original: '54ea8b602b7506e891ca718d',
      portraitURL: '/file/db/thang.type/54ea8b602b7506e891ca718d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'plasma-ball',
      name: 'Plasma Ball',
      original: '5589fe594bed1b6c2a2cab6b',
      portraitURL: '/file/db/thang.type/5589fe594bed1b6c2a2cab6b/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'poison',
      name: 'Poison',
      original: '53024020222f73867774d619',
      portraitURL: '/file/db/thang.type/53024020222f73867774d619/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'poisoned-throwing-shard-missile',
      name: 'Poisoned Throwing Shard Missile',
      original: '544d97088494308424f56539',
      portraitURL: '/file/db/thang.type/544d97088494308424f56539/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'polar-bear-cub-pet',
      name: 'Polar Bear Cub pet',
      original: '57588d4b87b06e1f00ded849',
      portraitURL: '/file/db/thang.type/57588d4b87b06e1f00ded849/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'polished-agate-sense-stone',
      name: 'Polished Agate Sense Stone',
      original: '54693274a2b1f53ce79443c9',
      portraitURL: '/file/db/thang.type/54693274a2b1f53ce79443c9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-bronze-breastplate',
      name: 'Polished Bronze Breastplate',
      original: '545d3f0b2d03e700001b5a5d',
      portraitURL: '/file/db/thang.type/545d3f0b2d03e700001b5a5d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-bronze-helmet',
      name: 'Polished Bronze Helmet',
      original: '546d38779df4a17d0d449a03',
      portraitURL: '/file/db/thang.type/546d38779df4a17d0d449a03/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-bronze-shield',
      name: 'Polished Bronze Shield',
      original: '544d7a888494308424f56487',
      portraitURL: '/file/db/thang.type/544d7a888494308424f56487/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-emerald-sense-stone',
      name: 'Polished Emerald Sense Stone',
      original: '546933dda2b1f53ce79443d9',
      portraitURL: '/file/db/thang.type/546933dda2b1f53ce79443d9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-sense-stone',
      name: 'Polished Sense Stone',
      original: '53e215a253457600003e3eaf',
      portraitURL: '/file/db/thang.type/53e215a253457600003e3eaf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-steel-scale-chainmail-coif',
      name: 'Polished Steel Scale Chainmail Coif',
      original: '546d46889df4a17d0d449a5f',
      portraitURL: '/file/db/thang.type/546d46889df4a17d0d449a5f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'polished-steel-scale-chainmail-tunic',
      name: 'Polished Steel Scale Chainmail Tunic',
      original: '546d3c3f9df4a17d0d449a37',
      portraitURL: '/file/db/thang.type/546d3c3f9df4a17d0d449a37/portrait.png',
      kind: 'Item'
    }, {
      slug: 'pot-1',
      name: 'Pot 1',
      original: '54ef882f83b08b7d054b6d49',
      portraitURL: '/file/db/thang.type/54ef882f83b08b7d054b6d49/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'pot-2',
      name: 'Pot 2',
      original: '54ef89dc4bb4788505d21234',
      portraitURL: '/file/db/thang.type/54ef89dc4bb4788505d21234/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'pot-3',
      name: 'Pot 3',
      original: '54ef8b1f305d7e790557d5d5',
      portraitURL: '/file/db/thang.type/54ef8b1f305d7e790557d5d5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'pot-4',
      name: 'Pot 4',
      original: '54ef8becace2147e05868483',
      portraitURL: '/file/db/thang.type/54ef8becace2147e05868483/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'potion-belt',
      name: 'Potion Belt',
      original: '54694ac4a2b1f53ce794443d',
      portraitURL: '/file/db/thang.type/54694ac4a2b1f53ce794443d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'potted-tree',
      name: 'Potted Tree',
      original: '56b2c8baf2ea182100d8ce78',
      portraitURL: '/file/db/thang.type/56b2c8baf2ea182100d8ce78/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'powder-charge',
      name: 'Powder Charge',
      original: '5462952cf44055a4b5e73599',
      portraitURL: '/file/db/thang.type/5462952cf44055a4b5e73599/portrait.png',
      kind: 'Item'
    }, {
      slug: 'powder-charge-missile',
      name: 'Powder Charge Missile',
      original: '544d99328494308424f56540',
      portraitURL: '/file/db/thang.type/544d99328494308424f56540/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'power-up',
      name: 'Power Up',
      original: '55c64140ef141c65665beb6b',
      portraitURL: '/file/db/thang.type/55c64140ef141c65665beb6b/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'power-up-2',
      name: 'Power Up 2',
      original: '55c6419fef141c65665beb6f',
      portraitURL: '/file/db/thang.type/55c6419fef141c65665beb6f/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'precision-rifle',
      name: 'Precision Rifle',
      original: '54eaaecc2b7506e891ca71d9',
      portraitURL: '/file/db/thang.type/54eaaecc2b7506e891ca71d9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'programmaticon-i',
      name: 'Programmaticon I',
      original: '53e4108204c00d4607a89f78',
      portraitURL: '/file/db/thang.type/53e4108204c00d4607a89f78/portrait.png',
      kind: 'Item'
    }, {
      slug: 'programmaticon-ii',
      name: 'Programmaticon II',
      original: '546e25d99df4a17d0d449be1',
      portraitURL: '/file/db/thang.type/546e25d99df4a17d0d449be1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'programmaticon-iii',
      name: 'Programmaticon III',
      original: '546e266e9df4a17d0d449be5',
      portraitURL: '/file/db/thang.type/546e266e9df4a17d0d449be5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'programmaticon-iv',
      name: 'Programmaticon IV',
      original: '55240951f76d6ee949f66512',
      portraitURL: '/file/db/thang.type/55240951f76d6ee949f66512/portrait.png',
      kind: 'Item'
    }, {
      slug: 'programmaticon-v',
      name: 'Programmaticon V',
      original: '557871261ff17fef5abee3ee',
      portraitURL: '/file/db/thang.type/557871261ff17fef5abee3ee/portrait.png',
      kind: 'Item'
    }, {
      slug: 'pugicorn-pet',
      name: 'Pugicorn Pet',
      original: '577d5edcab818b210046b73c',
      portraitURL: '/file/db/thang.type/577d5edcab818b210046b73c/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'pushcart',
      name: 'Pushcart',
      original: '54f119a6d2969f8405ef539f',
      portraitURL: '/file/db/thang.type/54f119a6d2969f8405ef539f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'quartz-sense-stone',
      name: 'Quartz Sense Stone',
      original: '54693240a2b1f53ce79443c5',
      portraitURL: '/file/db/thang.type/54693240a2b1f53ce79443c5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ragged-silk-hat',
      name: 'Ragged Silk Hat',
      original: '546d4ba19df4a17d0d449aaf',
      portraitURL: '/file/db/thang.type/546d4ba19df4a17d0d449aaf/portrait.png',
      kind: 'Item'
    }, {
      slug: 'railgun',
      name: 'Railgun',
      original: '54ea8ea52b7506e891ca7191',
      portraitURL: '/file/db/thang.type/54ea8ea52b7506e891ca7191/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rapidfire-rifle',
      name: 'Rapidfire Rifle',
      original: '54eaae422b7506e891ca71d5',
      portraitURL: '/file/db/thang.type/54eaae422b7506e891ca71d5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rat',
      name: 'Rat',
      original: '55c11b70c87e47c60604f974',
      portraitURL: '/file/db/thang.type/55c11b70c87e47c60604f974/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'razor-ring',
      name: 'Razor Ring',
      original: '54c97c9bdef3ad363ff998b7',
      portraitURL: '/file/db/thang.type/54c97c9bdef3ad363ff998b7/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'razordisc-missile',
      name: 'Razordisc Missile',
      original: '5318d3e56ad8999d34bdf338',
      portraitURL: '/file/db/thang.type/5318d3e56ad8999d34bdf338/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'rectangle',
      name: 'Rectangle',
      original: '568d915e1717e2f90e9a1250',
      portraitURL: '/file/db/thang.type/568d915e1717e2f90e9a1250/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'red-button',
      name: 'Red Button',
      original: '56d102c0441ddd2f002ba760',
      portraitURL: '/file/db/thang.type/56d102c0441ddd2f002ba760/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'regen',
      name: 'Regen',
      original: '53024f8b27471514685d53e1',
      portraitURL: '/file/db/thang.type/53024f8b27471514685d53e1/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'reindeer',
      name: 'Reindeer',
      original: '54e95a88f54ef5794f354f3d',
      portraitURL: '/file/db/thang.type/54e95a88f54ef5794f354f3d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'reinforced-boots',
      name: 'Reinforced Boots',
      original: '546d4d259df4a17d0d449ac5',
      portraitURL: '/file/db/thang.type/546d4d259df4a17d0d449ac5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'reinforced-crossbow',
      name: 'Reinforced Crossbow',
      original: '54eaacdd2b7506e891ca71cd',
      portraitURL: '/file/db/thang.type/54eaacdd2b7506e891ca71cd/portrait.png',
      kind: 'Item'
    }, {
      slug: 'reinforced-iron-chainmail-coif',
      name: 'Reinforced Iron Chainmail Coif',
      original: '546d46099df4a17d0d449a57',
      portraitURL: '/file/db/thang.type/546d46099df4a17d0d449a57/portrait.png',
      kind: 'Item'
    }, {
      slug: 'reinforced-iron-chainmail-tunic',
      name: 'Reinforced Iron Chainmail Tunic',
      original: '546d3bbb9df4a17d0d449a2f',
      portraitURL: '/file/db/thang.type/546d3bbb9df4a17d0d449a2f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'repair',
      name: 'Repair',
      original: '52bcc4591f766a891c000003',
      portraitURL: '/file/db/thang.type/52bcc4591f766a891c000003/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'ring-of-developer-experimentation',
      name: 'Ring of Developer Experimentation',
      original: '54bac99bacbf5aea089da177',
      portraitURL: '/file/db/thang.type/54bac99bacbf5aea089da177/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ring-of-earth',
      name: 'Ring of Earth',
      original: '5441c35c4e9aeb727cc9711d',
      portraitURL: '/file/db/thang.type/5441c35c4e9aeb727cc9711d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ring-of-fire',
      name: 'Ring of Fire',
      original: '54692ea2a2b1f53ce79443ab',
      portraitURL: '/file/db/thang.type/54692ea2a2b1f53ce79443ab/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ring-of-flowers',
      name: 'Ring of Flowers',
      original: '5523224b0676ecb7d5c89319',
      portraitURL: '/file/db/thang.type/5523224b0676ecb7d5c89319/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ring-of-ice',
      name: 'Ring of Ice',
      original: '54692ed3a2b1f53ce79443af',
      portraitURL: '/file/db/thang.type/54692ed3a2b1f53ce79443af/portrait.png',
      kind: 'Item'
    }, {
      slug: 'ring-of-speed',
      name: 'Ring of Speed',
      original: '54692d2aa2b1f53ce794438f',
      portraitURL: '/file/db/thang.type/54692d2aa2b1f53ce794438f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'riveted-dragonscale-chainmail-coif',
      name: 'Riveted Dragonscale Chainmail Coif',
      original: '546d47c09df4a17d0d449a6f',
      portraitURL: '/file/db/thang.type/546d47c09df4a17d0d449a6f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'riveted-dragonscale-chainmail-tunic',
      name: 'Riveted Dragonscale Chainmail Tunic',
      original: '546d3d549df4a17d0d449a47',
      portraitURL: '/file/db/thang.type/546d3d549df4a17d0d449a47/portrait.png',
      kind: 'Item'
    }, {
      slug: 'robe-of-the-magi',
      name: 'Robe of the Magi',
      original: '54ea3ec22b7506e891ca7126',
      portraitURL: '/file/db/thang.type/54ea3ec22b7506e891ca7126/portrait.png',
      kind: 'Item'
    }, {
      slug: 'robobomb',
      name: 'Robobomb',
      original: '55b7fb22a337d9b0ea024bb4',
      portraitURL: '/file/db/thang.type/55b7fb22a337d9b0ea024bb4/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'robot-walker',
      name: 'Robot Walker',
      original: '5301696ad82649ec2c0c9b0d',
      portraitURL: '/file/db/thang.type/5301696ad82649ec2c0c9b0d/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'rock-1',
      name: 'Rock 1',
      original: '52afcc1fc5b1813ec2000010',
      portraitURL: '/file/db/thang.type/52afcc1fc5b1813ec2000010/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-2',
      name: 'Rock 2',
      original: '52afcce4c5b1813ec2000012',
      portraitURL: '/file/db/thang.type/52afcce4c5b1813ec2000012/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-3',
      name: 'Rock 3',
      original: '52afcd43c5b1813ec2000014',
      portraitURL: '/file/db/thang.type/52afcd43c5b1813ec2000014/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-4',
      name: 'Rock 4',
      original: '52afcd7bc5b1813ec2000016',
      portraitURL: '/file/db/thang.type/52afcd7bc5b1813ec2000016/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-5',
      name: 'Rock 5',
      original: '52afcdc7c5b1813ec2000018',
      portraitURL: '/file/db/thang.type/52afcdc7c5b1813ec2000018/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-6',
      name: 'Rock 6',
      original: '54e95916f54ef5794f354f2d',
      portraitURL: '/file/db/thang.type/54e95916f54ef5794f354f2d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-7',
      name: 'Rock 7',
      original: '54e959d6f54ef5794f354f31',
      portraitURL: '/file/db/thang.type/54e959d6f54ef5794f354f31/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-8',
      name: 'Rock 8',
      original: '54e95a10f54ef5794f354f35',
      portraitURL: '/file/db/thang.type/54e95a10f54ef5794f354f35/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-cluster-1',
      name: 'Rock Cluster 1',
      original: '52afcb47c5b1813ec200000a',
      portraitURL: '/file/db/thang.type/52afcb47c5b1813ec200000a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-cluster-2',
      name: 'Rock Cluster 2',
      original: '52afcb98c5b1813ec200000c',
      portraitURL: '/file/db/thang.type/52afcb98c5b1813ec200000c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-cluster-3',
      name: 'Rock Cluster 3',
      original: '52afcbe0c5b1813ec200000e',
      portraitURL: '/file/db/thang.type/52afcbe0c5b1813ec200000e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-field-1',
      name: 'Rock Field 1',
      original: '54e95753f54ef5794f354f21',
      portraitURL: '/file/db/thang.type/54e95753f54ef5794f354f21/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-field-2',
      name: 'Rock Field 2',
      original: '54e95861f54ef5794f354f25',
      portraitURL: '/file/db/thang.type/54e95861f54ef5794f354f25/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'rock-field-3',
      name: 'Rock Field 3',
      original: '54e958aaf54ef5794f354f29',
      portraitURL: '/file/db/thang.type/54e958aaf54ef5794f354f29/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'root',
      name: 'Root',
      original: '55c640feef141c65665beb67',
      portraitURL: '/file/db/thang.type/55c640feef141c65665beb67/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'rough-sense-stone',
      name: 'Rough Sense Stone',
      original: '54693140a2b1f53ce79443bc',
      portraitURL: '/file/db/thang.type/54693140a2b1f53ce79443bc/portrait.png',
      kind: 'Item'
    }, {
      slug: 'roughedge',
      name: 'Roughedge',
      original: '544d7d918494308424f564a7',
      portraitURL: '/file/db/thang.type/544d7d918494308424f564a7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rs-demo',
      name: 'RS Demo',
      original: '56ce48892438c720001e3ca3',
      portraitURL: '/file/db/thang.type/56ce48892438c720001e3ca3/portrait.png',
      kind: 'undefined'
    }, {
      slug: 'runesword',
      name: 'Runesword',
      original: '54eaa9622b7506e891ca71b1',
      portraitURL: '/file/db/thang.type/54eaa9622b7506e891ca71b1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rusted-iron-breastplate',
      name: 'Rusted Iron Breastplate',
      original: '545d3fe42d03e700001b5a5f',
      portraitURL: '/file/db/thang.type/545d3fe42d03e700001b5a5f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rusted-iron-helmet',
      name: 'Rusted Iron Helmet',
      original: '546d38d09df4a17d0d449a07',
      portraitURL: '/file/db/thang.type/546d38d09df4a17d0d449a07/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rusted-steel-scale-chainmail-coif',
      name: 'Rusted Steel Scale Chainmail Coif',
      original: '546d46419df4a17d0d449a5b',
      portraitURL: '/file/db/thang.type/546d46419df4a17d0d449a5b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'rusted-steel-scale-chainmail-tunic',
      name: 'Rusted Steel Scale Chainmail Tunic',
      original: '546d3bf99df4a17d0d449a33',
      portraitURL: '/file/db/thang.type/546d3bf99df4a17d0d449a33/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sand-01',
      name: 'Sand 01',
      original: '5484df79d7b7b862291456af',
      portraitURL: '/file/db/thang.type/5484df79d7b7b862291456af/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sand-02',
      name: 'Sand 02',
      original: '5484e7c5d7b7b862291456b3',
      portraitURL: '/file/db/thang.type/5484e7c5d7b7b862291456b3/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sand-03',
      name: 'Sand 03',
      original: '5484e81bd7b7b862291456b7',
      portraitURL: '/file/db/thang.type/5484e81bd7b7b862291456b7/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sand-04',
      name: 'Sand 04',
      original: '5484e857d7b7b862291456bb',
      portraitURL: '/file/db/thang.type/5484e857d7b7b862291456bb/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sand-05',
      name: 'Sand 05',
      original: '5484e89cd7b7b862291456bf',
      portraitURL: '/file/db/thang.type/5484e89cd7b7b862291456bf/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sand-06',
      name: 'Sand 06',
      original: '5484e8ddd7b7b862291456c3',
      portraitURL: '/file/db/thang.type/5484e8ddd7b7b862291456c3/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sand-yak',
      name: 'Sand Yak',
      original: '5480b2251bf0b10000711c51',
      portraitURL: '/file/db/thang.type/5480b2251bf0b10000711c51/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'sapphire-sense-stone',
      name: 'Sapphire Sense Stone',
      original: '54693363a2b1f53ce79443d1',
      portraitURL: '/file/db/thang.type/54693363a2b1f53ce79443d1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sarcophagus',
      name: 'sarcophagus',
      original: '572d5a2d3ff46db2000a381b',
      portraitURL: '/file/db/thang.type/572d5a2d3ff46db2000a381b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'scaled-gloves',
      name: 'Scaled Gloves',
      original: '5469496ca2b1f53ce794442d',
      portraitURL: '/file/db/thang.type/5469496ca2b1f53ce794442d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'school-locker',
      name: 'School locker',
      original: '56eb14804eb67a25009be23e',
      portraitURL: '/file/db/thang.type/56eb14804eb67a25009be23e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'scoreboard',
      name: 'Scoreboard',
      original: '56de0ff26f9cc02400831e06',
      portraitURL: '/file/db/thang.type/56de0ff26f9cc02400831e06/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'scorpion',
      name: 'Scorpion',
      original: '548cf5340f559d0000be7e5b',
      portraitURL: '/file/db/thang.type/548cf5340f559d0000be7e5b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'selection',
      name: 'Selection',
      original: '546e23d49df4a17d0d449bb5',
      portraitURL: '/file/db/thang.type/546e23d49df4a17d0d449bb5/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'shadow-guard-background',
      name: 'Shadow Guard Background',
      original: '55bfc4c950cac5d58def9a67',
      portraitURL: '/file/db/thang.type/55bfc4c950cac5d58def9a67/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'shadowless-bird',
      name: 'Shadowless Bird',
      original: '55079c55cea461db22519e9d',
      portraitURL: '/file/db/thang.type/55079c55cea461db22519e9d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'shadowless-cloud-1',
      name: 'Shadowless Cloud 1',
      original: '53e2df9cd12e873205b6bce8',
      portraitURL: '/file/db/thang.type/53e2df9cd12e873205b6bce8/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'shadowless-cloud-2',
      name: 'Shadowless Cloud 2',
      original: '53e2e0176c59f5340504102f',
      portraitURL: '/file/db/thang.type/53e2e0176c59f5340504102f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'shadowless-cloud-3',
      name: 'Shadowless Cloud 3',
      original: '53e2e08eae44ec37059f2148',
      portraitURL: '/file/db/thang.type/53e2e08eae44ec37059f2148/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sharpened-sword',
      name: 'Sharpened Sword',
      original: '544d7deb8494308424f564ab',
      portraitURL: '/file/db/thang.type/544d7deb8494308424f564ab/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sharpsong',
      name: 'Sharpsong',
      original: '544d95c78494308424f56527',
      portraitURL: '/file/db/thang.type/544d95c78494308424f56527/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sharpsong-missile',
      name: 'Sharpsong Missile',
      original: '544d98368494308424f5653e',
      portraitURL: '/file/db/thang.type/544d98368494308424f5653e/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'shell',
      name: 'Shell',
      original: '52ba2c6c981fbb7e48000093',
      portraitURL: '/file/db/thang.type/52ba2c6c981fbb7e48000093/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'shield',
      name: 'Shield',
      original: '573fa531d0bee72000a4255f',
      portraitURL: '/file/db/thang.type/573fa531d0bee72000a4255f/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'short-sword',
      name: 'Short Sword',
      original: '544d7f1a8494308424f564b7',
      portraitURL: '/file/db/thang.type/544d7f1a8494308424f564b7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'shrub-1',
      name: 'Shrub 1',
      original: '52b0a113ccbc671372000017',
      portraitURL: '/file/db/thang.type/52b0a113ccbc671372000017/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'shrub-2',
      name: 'Shrub 2',
      original: '52b0a15accbc671372000019',
      portraitURL: '/file/db/thang.type/52b0a15accbc671372000019/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'shrub-3',
      name: 'Shrub 3',
      original: '52b0a1a3ccbc67137200001b',
      portraitURL: '/file/db/thang.type/52b0a1a3ccbc67137200001b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sign',
      name: 'Sign',
      original: '5435cbe77b554def1f99c491',
      portraitURL: '/file/db/thang.type/5435cbe77b554def1f99c491/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'silver-coin',
      name: 'Silver Coin',
      original: '535ef1f64f10444d08486b61',
      portraitURL: '/file/db/thang.type/535ef1f64f10444d08486b61/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'simple-boots',
      name: 'Simple Boots',
      original: '53e237bf53457600003e3f05',
      portraitURL: '/file/db/thang.type/53e237bf53457600003e3f05/portrait.png',
      kind: 'Item'
    }, {
      slug: 'simple-katana',
      name: 'Simple Katana',
      original: '544d7ed58494308424f564b3',
      portraitURL: '/file/db/thang.type/544d7ed58494308424f564b3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'simple-rifle',
      name: 'Simple Rifle',
      original: '544d70a18494308424f5647a',
      portraitURL: '/file/db/thang.type/544d70a18494308424f5647a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'simple-sword',
      name: 'Simple Sword',
      original: '53e218d853457600003e3ebe',
      portraitURL: '/file/db/thang.type/53e218d853457600003e3ebe/portrait.png',
      kind: 'Item'
    }, {
      slug: 'simple-wand',
      name: 'Simple Wand',
      original: '544d874f8494308424f564f5',
      portraitURL: '/file/db/thang.type/544d874f8494308424f564f5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'simple-wristwatch',
      name: 'Simple Wristwatch',
      original: '54693797a2b1f53ce79443e9',
      portraitURL: '/file/db/thang.type/54693797a2b1f53ce79443e9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'skeleton-bits-1',
      name: 'Skeleton Bits 1',
      original: '54ef85bdc1f3bd7c0593d125',
      portraitURL: '/file/db/thang.type/54ef85bdc1f3bd7c0593d125/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'skeleton-bits-2',
      name: 'Skeleton Bits 2',
      original: '54ef874370ff9c8005e1eb0d',
      portraitURL: '/file/db/thang.type/54ef874370ff9c8005e1eb0d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sky-span-background-1',
      name: 'Sky Span Background 1',
      original: '53e3f096ae44ec37059f92d8',
      portraitURL: '/file/db/thang.type/53e3f096ae44ec37059f92d8/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sky-span-background-2',
      name: 'Sky Span Background 2',
      original: '53e3f3556c59f5340504359e',
      portraitURL: '/file/db/thang.type/53e3f3556c59f5340504359e/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sky-span-background-3',
      name: 'Sky Span Background 3',
      original: '53e3f500ae44ec37059f9415',
      portraitURL: '/file/db/thang.type/53e3f500ae44ec37059f9415/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sky-span-background-4',
      name: 'Sky Span Background 4',
      original: '53e3f5dbae44ec37059f944a',
      portraitURL: '/file/db/thang.type/53e3f5dbae44ec37059f944a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sky-span-background-5',
      name: 'Sky Span Background 5',
      original: '53e3f646d12e873205b72abd',
      portraitURL: '/file/db/thang.type/53e3f646d12e873205b72abd/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sky-span-background-6',
      name: 'Sky Span Background 6',
      original: '53e3f724d12e873205b72af9',
      portraitURL: '/file/db/thang.type/53e3f724d12e873205b72af9/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'sky-span-background-7',
      name: 'Sky Span Background 7',
      original: '53e3f74dae44ec37059f94b3',
      portraitURL: '/file/db/thang.type/53e3f74dae44ec37059f94b3/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sleep',
      name: 'Sleep',
      original: '5302504b222f73867774d7a1',
      portraitURL: '/file/db/thang.type/5302504b222f73867774d7a1/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'slow',
      name: 'Slow',
      original: '5302511327471514685d5405',
      portraitURL: '/file/db/thang.type/5302511327471514685d5405/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'snake',
      name: 'Snake',
      original: '548cf57c0f559d0000be7e5f',
      portraitURL: '/file/db/thang.type/548cf57c0f559d0000be7e5f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'snake-pillar',
      name: 'Snake Pillar',
      original: '54ef8db1223edd8105aff2b9',
      portraitURL: '/file/db/thang.type/54ef8db1223edd8105aff2b9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'soft-leather-gloves',
      name: 'Soft Leather Gloves',
      original: '546948e9a2b1f53ce7944425',
      portraitURL: '/file/db/thang.type/546948e9a2b1f53ce7944425/portrait.png',
      kind: 'Item'
    }, {
      slug: 'softened-leather-boots',
      name: 'Softened Leather Boots',
      original: '546d4d589df4a17d0d449ac9',
      portraitURL: '/file/db/thang.type/546d4d589df4a17d0d449ac9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sparkbomb',
      name: 'Sparkbomb',
      original: '54eb528449fa2d5c905ddf12',
      portraitURL: '/file/db/thang.type/54eb528449fa2d5c905ddf12/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sparkbomb-missile',
      name: 'Sparkbomb Missile',
      original: '5535b3bd428ddac5686fcf7a',
      portraitURL: '/file/db/thang.type/5535b3bd428ddac5686fcf7a/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'spear',
      name: 'Spear',
      original: '52ba2affd68e4b7c48000030',
      portraitURL: '/file/db/thang.type/52ba2affd68e4b7c48000030/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'spider',
      name: 'Spider',
      original: '55c1353bc87e47c60604f997',
      portraitURL: '/file/db/thang.type/55c1353bc87e47c60604f997/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'spiderweb-1',
      name: 'Spiderweb 1',
      original: '54ef7c69223edd8105afc1f4',
      portraitURL: '/file/db/thang.type/54ef7c69223edd8105afc1f4/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'spiderweb-2',
      name: 'Spiderweb 2',
      original: '54ef7d41ace2147e058655a8',
      portraitURL: '/file/db/thang.type/54ef7d41ace2147e058655a8/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'spiderweb-3',
      name: 'Spiderweb 3',
      original: '54ef7ed7b4740779058410c9',
      portraitURL: '/file/db/thang.type/54ef7ed7b4740779058410c9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'spiderweb-4',
      name: 'Spiderweb 4',
      original: '54ef8938ace2147e05867d6d',
      portraitURL: '/file/db/thang.type/54ef8938ace2147e05867d6d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'spike-walls',
      name: 'Spike Walls',
      original: '5422f63718adb78d98d265f7',
      portraitURL: '/file/db/thang.type/5422f63718adb78d98d265f7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'spiked-ogre-wall',
      name: 'spiked ogre wall',
      original: '578682dccca8994b002708eb',
      portraitURL: '/file/db/thang.type/578682dccca8994b002708eb/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stalactite-1',
      name: 'Stalactite 1',
      original: '55760f0a1e82182d9e688912',
      portraitURL: '/file/db/thang.type/55760f0a1e82182d9e688912/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stalactite-2',
      name: 'Stalactite 2',
      original: '55760f4a1e82182d9e688916',
      portraitURL: '/file/db/thang.type/55760f4a1e82182d9e688916/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stalactite-3',
      name: 'Stalactite 3',
      original: '55760f6f1e82182d9e68891a',
      portraitURL: '/file/db/thang.type/55760f6f1e82182d9e68891a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stalagmite-1',
      name: 'Stalagmite 1',
      original: '55760e6f1e82182d9e688906',
      portraitURL: '/file/db/thang.type/55760e6f1e82182d9e688906/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stalagmite-2',
      name: 'Stalagmite 2',
      original: '55760eb61e82182d9e68890a',
      portraitURL: '/file/db/thang.type/55760eb61e82182d9e68890a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stalagmite-3',
      name: 'Stalagmite 3',
      original: '55760ee51e82182d9e68890e',
      portraitURL: '/file/db/thang.type/55760ee51e82182d9e68890e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'statue-stone-hooded',
      name: 'Statue Stone Hooded',
      original: '546e23469df4a17d0d449ba9',
      portraitURL: '/file/db/thang.type/546e23469df4a17d0d449ba9/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'steel-breastplate',
      name: 'Steel Breastplate',
      original: '546ab0a83777d61863292862',
      portraitURL: '/file/db/thang.type/546ab0a83777d61863292862/portrait.png',
      kind: 'Item'
    }, {
      slug: 'steel-helmet',
      name: 'Steel Helmet',
      original: '5441c2ed4e9aeb727cc9710b',
      portraitURL: '/file/db/thang.type/5441c2ed4e9aeb727cc9710b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'steel-ring',
      name: 'Steel Ring',
      original: '54692dbca2b1f53ce794439b',
      portraitURL: '/file/db/thang.type/54692dbca2b1f53ce794439b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'steel-shield',
      name: 'Steel Shield',
      original: '544d7bec8494308424f56497',
      portraitURL: '/file/db/thang.type/544d7bec8494308424f56497/portrait.png',
      kind: 'Item'
    }, {
      slug: 'steel-striker',
      name: 'Steel Striker',
      original: '544d7c948494308424f5649f',
      portraitURL: '/file/db/thang.type/544d7c948494308424f5649f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'steel-wand',
      name: 'Steel Wand',
      original: '544d88e48494308424f56511',
      portraitURL: '/file/db/thang.type/544d88e48494308424f56511/portrait.png',
      kind: 'Item'
    }, {
      slug: 'stiff-lambswool-hat',
      name: 'Stiff Lambswool Hat',
      original: '546d4b379df4a17d0d449aa7',
      portraitURL: '/file/db/thang.type/546d4b379df4a17d0d449aa7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'stone-builders-hammer',
      name: 'Stone Builder\'s Hammer',
      original: '54694bcca2b1f53ce7944451',
      portraitURL: '/file/db/thang.type/54694bcca2b1f53ce7944451/portrait.png',
      kind: 'Item'
    }, {
      slug: 'stone-fall-1',
      name: 'Stone Fall 1',
      original: '53e2e5046f406a3505b3ead6',
      portraitURL: '/file/db/thang.type/53e2e5046f406a3505b3ead6/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stone-fall-2',
      name: 'Stone Fall 2',
      original: '53e2e66d6c59f534050410d0',
      portraitURL: '/file/db/thang.type/53e2e66d6c59f534050410d0/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stone-fall-3',
      name: 'Stone Fall 3',
      original: '53e2e728ae44ec37059f2438',
      portraitURL: '/file/db/thang.type/53e2e728ae44ec37059f2438/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stone-pillars',
      name: 'stone pillars',
      original: '572d5958f5da8e29013e4e8d',
      portraitURL: '/file/db/thang.type/572d5958f5da8e29013e4e8d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stone-statue',
      name: 'Stone Statue',
      original: '546e25479df4a17d0d449bd5',
      portraitURL: '/file/db/thang.type/546e25479df4a17d0d449bd5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stormbringer',
      name: 'Stormbringer',
      original: '54ea87342b7506e891ca7175',
      portraitURL: '/file/db/thang.type/54ea87342b7506e891ca7175/portrait.png',
      kind: 'Item'
    }, {
      slug: 'stretched-hide',
      name: 'Stretched Hide',
      original: '557608901e82182d9e6888ce',
      portraitURL: '/file/db/thang.type/557608901e82182d9e6888ce/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'student-a',
      name: 'Student A',
      original: '56d0edd0441ddd2f002ba5aa',
      portraitURL: '/file/db/thang.type/56d0edd0441ddd2f002ba5aa/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'student-b',
      name: 'Student B',
      original: '56d0efc14292981f009f51de',
      portraitURL: '/file/db/thang.type/56d0efc14292981f009f51de/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'stump-1',
      name: 'Stump 1',
      original: '54e955f6f54ef5794f354f09',
      portraitURL: '/file/db/thang.type/54e955f6f54ef5794f354f09/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stump-2',
      name: 'Stump 2',
      original: '54e95634f54ef5794f354f0d',
      portraitURL: '/file/db/thang.type/54e95634f54ef5794f354f0d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stump-3',
      name: 'Stump 3',
      original: '557f91f9b43ce0b15a91b1cd',
      portraitURL: '/file/db/thang.type/557f91f9b43ce0b15a91b1cd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stump-4',
      name: 'Stump 4',
      original: '557f923eb43ce0b15a91b1d1',
      portraitURL: '/file/db/thang.type/557f923eb43ce0b15a91b1d1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'stump-5',
      name: 'Stump 5',
      original: '557f925ab43ce0b15a91b1d5',
      portraitURL: '/file/db/thang.type/557f925ab43ce0b15a91b1d5/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sturdy-bronze-shield',
      name: 'Sturdy Bronze Shield',
      original: '544d7b028494308424f5648b',
      portraitURL: '/file/db/thang.type/544d7b028494308424f5648b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sulphur-staff',
      name: 'Sulphur Staff',
      original: '54eab7132b7506e891ca71fa',
      portraitURL: '/file/db/thang.type/54eab7132b7506e891ca71fa/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sundial-wristwatch',
      name: 'Sundial Wristwatch',
      original: '53e2396a53457600003e3f0f',
      portraitURL: '/file/db/thang.type/53e2396a53457600003e3f0f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sword',
      name: 'Sword',
      original: '52bcda141f766a891c00000a',
      portraitURL: '/file/db/thang.type/52bcda141f766a891c00000a/portrait.png',
      kind: 'Misc'
    }, {
      slug: 'sword-belt',
      name: 'Sword Belt',
      original: '5441beb74e9aeb727cc970d3',
      portraitURL: '/file/db/thang.type/5441beb74e9aeb727cc970d3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sword-fall-1',
      name: 'Sword Fall 1',
      original: '53e2e8a7d12e873205b6c0f1',
      portraitURL: '/file/db/thang.type/53e2e8a7d12e873205b6c0f1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sword-fall-2',
      name: 'Sword Fall 2',
      original: '53e2e9a9ae44ec37059f2571',
      portraitURL: '/file/db/thang.type/53e2e9a9ae44ec37059f2571/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'sword-of-the-forgotten',
      name: 'Sword of the Forgotten',
      original: '54eaaa522b7506e891ca71b9',
      portraitURL: '/file/db/thang.type/54eaaa522b7506e891ca71b9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'sword-of-the-temple-guard',
      name: 'Sword of the Temple Guard',
      original: '54eaab372b7506e891ca71c1',
      portraitURL: '/file/db/thang.type/54eaab372b7506e891ca71c1/portrait.png',
      kind: 'Item'
    }, {
      slug: 'table',
      name: 'Table',
      original: '52e9987a427172ae56001ffd',
      portraitURL: '/file/db/thang.type/52e9987a427172ae56001ffd/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tailored-linen-robe',
      name: 'Tailored Linen Robe',
      original: '546d49759df4a17d0d449a87',
      portraitURL: '/file/db/thang.type/546d49759df4a17d0d449a87/portrait.png',
      kind: 'Item'
    }, {
      slug: 'talus-1',
      name: 'Talus 1',
      original: '54e944a3f54ef5794f354ea9',
      portraitURL: '/file/db/thang.type/54e944a3f54ef5794f354ea9/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'talus-2',
      name: 'Talus 2',
      original: '54e94880f54ef5794f354ead',
      portraitURL: '/file/db/thang.type/54e94880f54ef5794f354ead/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'talus-3',
      name: 'Talus 3',
      original: '54e948daf54ef5794f354eb1',
      portraitURL: '/file/db/thang.type/54e948daf54ef5794f354eb1/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'talus-4',
      name: 'Talus 4',
      original: '54e94908f54ef5794f354eb5',
      portraitURL: '/file/db/thang.type/54e94908f54ef5794f354eb5/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'talus-5',
      name: 'Talus 5',
      original: '54e9493cf54ef5794f354eb9',
      portraitURL: '/file/db/thang.type/54e9493cf54ef5794f354eb9/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'talus-6',
      name: 'Talus 6',
      original: '54e94965f54ef5794f354ebd',
      portraitURL: '/file/db/thang.type/54e94965f54ef5794f354ebd/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'tarnished-bronze-breastplate',
      name: 'Tarnished Bronze Breastplate',
      original: '53e22eac53457600003e3efc',
      portraitURL: '/file/db/thang.type/53e22eac53457600003e3efc/portrait.png',
      kind: 'Item'
    }, {
      slug: 'tarnished-bronze-helmet',
      name: 'Tarnished Bronze Helmet',
      original: '546d38269df4a17d0d4499ff',
      portraitURL: '/file/db/thang.type/546d38269df4a17d0d4499ff/portrait.png',
      kind: 'Item'
    }, {
      slug: 'tarnished-copper-band',
      name: 'Tarnished Copper Band',
      original: '54692a75a2b1f53ce7944387',
      portraitURL: '/file/db/thang.type/54692a75a2b1f53ce7944387/portrait.png',
      kind: 'Item'
    }, {
      slug: 'tauran-helm',
      name: 'Tauran Helm',
      original: '54ea49982b7506e891ca7165',
      portraitURL: '/file/db/thang.type/54ea49982b7506e891ca7165/portrait.png',
      kind: 'Item'
    }, {
      slug: 'tauran-plate',
      name: 'Tauran Plate',
      original: '54ea4b302b7506e891ca716d',
      portraitURL: '/file/db/thang.type/54ea4b302b7506e891ca716d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'teacher-b',
      name: 'Teacher B',
      original: '56de0554d048927700b4f741',
      portraitURL: '/file/db/thang.type/56de0554d048927700b4f741/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tent-1',
      name: 'Tent 1',
      original: '548cf2280f559d0000be7e37',
      portraitURL: '/file/db/thang.type/548cf2280f559d0000be7e37/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tent-2',
      name: 'Tent 2',
      original: '548cf2b10f559d0000be7e3b',
      portraitURL: '/file/db/thang.type/548cf2b10f559d0000be7e3b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tent-3',
      name: 'Tent 3',
      original: '548cf30b0f559d0000be7e3f',
      portraitURL: '/file/db/thang.type/548cf30b0f559d0000be7e3f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'the-final-kithmaze-background',
      name: 'the final kithmaze background',
      original: '577ecc2b67053f25007eb916',
      portraitURL: '/file/db/thang.type/577ecc2b67053f25007eb916/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'the-gauntlet-background',
      name: 'The Gauntlet Background',
      original: '572d631812f2abce00164c15',
      portraitURL: '/file/db/thang.type/572d631812f2abce00164c15/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'the-monolith',
      name: 'The Monolith',
      original: '54eabcb72b7506e891ca7226',
      portraitURL: '/file/db/thang.type/54eabcb72b7506e891ca7226/portrait.png',
      kind: 'Item'
    }, {
      slug: 'the-precious',
      name: 'The Precious',
      original: '54eb56ae49fa2d5c905ddf2a',
      portraitURL: '/file/db/thang.type/54eb56ae49fa2d5c905ddf2a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'thick-burlap-robe',
      name: 'Thick Burlap Robe',
      original: '546d48989df4a17d0d449a77',
      portraitURL: '/file/db/thang.type/546d48989df4a17d0d449a77/portrait.png',
      kind: 'Item'
    }, {
      slug: 'thin-burlap-robe',
      name: 'Thin Burlap Robe',
      original: '546d485b9df4a17d0d449a73',
      portraitURL: '/file/db/thang.type/546d485b9df4a17d0d449a73/portrait.png',
      kind: 'Item'
    }, {
      slug: 'thoktars-discarded-hammer',
      name: 'Thoktar\'s Discarded Hammer',
      original: '54694cd6a2b1f53ce7944466',
      portraitURL: '/file/db/thang.type/54694cd6a2b1f53ce7944466/portrait.png',
      kind: 'Item'
    }, {
      slug: 'thornprick',
      name: 'Thornprick',
      original: '54692e75a2b1f53ce79443a7',
      portraitURL: '/file/db/thang.type/54692e75a2b1f53ce79443a7/portrait.png',
      kind: 'Item'
    }, {
      slug: 'threadbare-burlap-wizards-hat',
      name: 'Threadbare Burlap Wizards Hat',
      original: '546d4a909df4a17d0d449a9b',
      portraitURL: '/file/db/thang.type/546d4a909df4a17d0d449a9b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'throne',
      name: 'Throne',
      original: '54efa174933e1e7b05846fe6',
      portraitURL: '/file/db/thang.type/54efa174933e1e7b05846fe6/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tomb-ring',
      name: 'Tomb Ring',
      original: '54eb55d849fa2d5c905ddf26',
      portraitURL: '/file/db/thang.type/54eb55d849fa2d5c905ddf26/portrait.png',
      kind: 'Item'
    }, {
      slug: 'tool-belt',
      name: 'Tool Belt',
      original: '5441beff4e9aeb727cc970d9',
      portraitURL: '/file/db/thang.type/5441beff4e9aeb727cc970d9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'torch',
      name: 'Torch',
      original: '52aa608b20fccb0000000005',
      portraitURL: '/file/db/thang.type/52aa608b20fccb0000000005/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'torn-silk-cloak',
      name: 'Torn Silk Cloak',
      original: '546d49a79df4a17d0d449a8b',
      portraitURL: '/file/db/thang.type/546d49a79df4a17d0d449a8b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'torture-table',
      name: 'Torture Table',
      original: '54ef8fd4b474077905843564',
      portraitURL: '/file/db/thang.type/54ef8fd4b474077905843564/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tower-ruined',
      name: 'Tower Ruined',
      original: '54f117c548724e7d052b540b',
      portraitURL: '/file/db/thang.type/54f117c548724e7d052b540b/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'training-dummy',
      name: 'Training Dummy',
      original: '53e65923bc5cc012113e07b1',
      portraitURL: '/file/db/thang.type/53e65923bc5cc012113e07b1/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'trap-belt',
      name: 'Trap Belt',
      original: '54694a8fa2b1f53ce7944439',
      portraitURL: '/file/db/thang.type/54694a8fa2b1f53ce7944439/portrait.png',
      kind: 'Item'
    }, {
      slug: 'treasure-chest',
      name: 'Treasure Chest',
      original: '52aa3be0ccbd588d4d000005',
      portraitURL: '/file/db/thang.type/52aa3be0ccbd588d4d000005/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-1',
      name: 'Tree 1',
      original: '52b09ef7ccbc67137200000f',
      portraitURL: '/file/db/thang.type/52b09ef7ccbc67137200000f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-2',
      name: 'Tree 2',
      original: '52b09fdeccbc671372000011',
      portraitURL: '/file/db/thang.type/52b09fdeccbc671372000011/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-3',
      name: 'Tree 3',
      original: '52b0a04fccbc671372000013',
      portraitURL: '/file/db/thang.type/52b0a04fccbc671372000013/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-4',
      name: 'Tree 4',
      original: '52b0a0a5ccbc671372000015',
      portraitURL: '/file/db/thang.type/52b0a0a5ccbc671372000015/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-stand-1',
      name: 'Tree Stand 1',
      original: '541cc7c48e78524aad94de7d',
      portraitURL: '/file/db/thang.type/541cc7c48e78524aad94de7d/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-stand-2',
      name: 'Tree Stand 2',
      original: '542068f38e78524aad94de83',
      portraitURL: '/file/db/thang.type/542068f38e78524aad94de83/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-stand-3',
      name: 'Tree Stand 3',
      original: '5420693d8e78524aad94de89',
      portraitURL: '/file/db/thang.type/5420693d8e78524aad94de89/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-stand-4',
      name: 'Tree Stand 4',
      original: '542069888e78524aad94de8f',
      portraitURL: '/file/db/thang.type/542069888e78524aad94de8f/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-stand-5',
      name: 'Tree Stand 5',
      original: '542092628e78524aad94deca',
      portraitURL: '/file/db/thang.type/542092628e78524aad94deca/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'tree-stand-6',
      name: 'Tree Stand 6',
      original: '542092c38e78524aad94ded0',
      portraitURL: '/file/db/thang.type/542092c38e78524aad94ded0/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'true-names-background',
      name: 'True Names Background',
      original: '55e451bd206f7df7df6ba966',
      portraitURL: '/file/db/thang.type/55e451bd206f7df7df6ba966/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'twilight-glasses',
      name: 'Twilight Glasses',
      original: '546941fda2b1f53ce794441d',
      portraitURL: '/file/db/thang.type/546941fda2b1f53ce794441d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'twisted-pine-wand',
      name: 'Twisted Pine Wand',
      original: '544d877d8494308424f564f9',
      portraitURL: '/file/db/thang.type/544d877d8494308424f564f9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'undead',
      name: 'Undead',
      original: '55c284933767fd3435eb4471',
      portraitURL: '/file/db/thang.type/55c284933767fd3435eb4471/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'undergrowth-dagger',
      name: 'Undergrowth Dagger',
      original: '544d95e68494308424f5652b',
      portraitURL: '/file/db/thang.type/544d95e68494308424f5652b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'undergrowth-dagger-missile',
      name: 'Undergrowth Dagger Missile',
      original: '544d99618494308424f56541',
      portraitURL: '/file/db/thang.type/544d99618494308424f56541/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'undying-ring',
      name: 'Undying Ring',
      original: '54eb54d349fa2d5c905ddf1e',
      portraitURL: '/file/db/thang.type/54eb54d349fa2d5c905ddf1e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'unholy-tome-i',
      name: 'Unholy Tome I',
      original: '546374bc3839c6e02811d308',
      portraitURL: '/file/db/thang.type/546374bc3839c6e02811d308/portrait.png',
      kind: 'Item'
    }, {
      slug: 'unholy-tome-ii',
      name: 'Unholy Tome II',
      original: '5463756f3839c6e02811d30c',
      portraitURL: '/file/db/thang.type/5463756f3839c6e02811d30c/portrait.png',
      kind: 'Item'
    }, {
      slug: 'unholy-tome-iii',
      name: 'Unholy Tome III',
      original: '5463758f3839c6e02811d30f',
      portraitURL: '/file/db/thang.type/5463758f3839c6e02811d30f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'unholy-tome-iv',
      name: 'Unholy Tome IV',
      original: '546376b63839c6e02811d31b',
      portraitURL: '/file/db/thang.type/546376b63839c6e02811d31b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'unholy-tome-v',
      name: 'Unholy Tome V',
      original: '546376da3839c6e02811d31e',
      portraitURL: '/file/db/thang.type/546376da3839c6e02811d31e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'viking-helmet',
      name: 'Viking Helmet',
      original: '5441c3144e9aeb727cc97111',
      portraitURL: '/file/db/thang.type/5441c3144e9aeb727cc97111/portrait.png',
      kind: 'Item'
    }, {
      slug: 'viking-helmet-doodad',
      name: 'Viking Helmet Doodad',
      original: '5518239d1f12482609b44f76',
      portraitURL: '/file/db/thang.type/5518239d1f12482609b44f76/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'vine-staff',
      name: 'Vine Staff',
      original: '54eab92b2b7506e891ca720a',
      portraitURL: '/file/db/thang.type/54eab92b2b7506e891ca720a/portrait.png',
      kind: 'Item'
    }, {
      slug: 'volcano',
      name: 'Volcano',
      original: '55c64512ef141c65665beb7e',
      portraitURL: '/file/db/thang.type/55c64512ef141c65665beb7e/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'vr-artist',
      name: 'VR Artist',
      original: '56d0c6bf087ee32400763d49',
      portraitURL: '/file/db/thang.type/56d0c6bf087ee32400763d49/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'vr-breaker',
      name: 'VR Breaker',
      original: '56d0e6e563103d2a00af5795',
      portraitURL: '/file/db/thang.type/56d0e6e563103d2a00af5795/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'vr-door',
      name: 'VR Door',
      original: '56aa6bf503ec4e2000878867',
      portraitURL: '/file/db/thang.type/56aa6bf503ec4e2000878867/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'vr-floor',
      name: 'VR Floor',
      original: '56a2e305b0b7242000e9986e',
      portraitURL: '/file/db/thang.type/56a2e305b0b7242000e9986e/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'vr-oracle',
      name: 'VR Oracle',
      original: '56d0d144a7daf22000023a13',
      portraitURL: '/file/db/thang.type/56d0d144a7daf22000023a13/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'vr-security',
      name: 'VR Security',
      original: '56d758b787781b1f00cf4b20',
      portraitURL: '/file/db/thang.type/56d758b787781b1f00cf4b20/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'vr-tinker',
      name: 'VR Tinker',
      original: '56d07d682a1e1736005b1b37',
      portraitURL: '/file/db/thang.type/56d07d682a1e1736005b1b37/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'vr-wall',
      name: 'vr-wall',
      original: '56b0c75302b7db290079b542',
      portraitURL: '/file/db/thang.type/56b0c75302b7db290079b542/portrait.png',
      kind: 'Wall'
    }, {
      slug: 'vr-wyrm',
      name: 'VR Wyrm',
      original: '56bb944d203af82000b2a406',
      portraitURL: '/file/db/thang.type/56bb944d203af82000b2a406/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wagon-broken',
      name: 'Wagon Broken',
      original: '548cf1cd0f559d0000be7e33',
      portraitURL: '/file/db/thang.type/548cf1cd0f559d0000be7e33/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'wakka-maul-background',
      name: 'Wakka Maul Background',
      original: '5654eae2f9285e86053f7504',
      portraitURL: '/file/db/thang.type/5654eae2f9285e86053f7504/portrait.png',
      kind: 'Floor'
    }, {
      slug: 'warcry',
      name: 'Warcry',
      original: '53024777222f73867774d6cd',
      portraitURL: '/file/db/thang.type/53024777222f73867774d6cd/portrait.png',
      kind: 'Mark'
    }, {
      slug: 'waterfall',
      name: 'Waterfall',
      original: '53e2eaffae44ec37059f262a',
      portraitURL: '/file/db/thang.type/53e2eaffae44ec37059f262a/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'weak-charge',
      name: 'Weak Charge',
      original: '544d957d8494308424f5651f',
      portraitURL: '/file/db/thang.type/544d957d8494308424f5651f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'weak-charge-missile',
      name: 'Weak Charge Missile',
      original: '544d97798494308424f5653b',
      portraitURL: '/file/db/thang.type/544d97798494308424f5653b/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'weighted-throwing-knives',
      name: 'Weighted Throwing Knives',
      original: '544d96108494308424f5652f',
      portraitURL: '/file/db/thang.type/544d96108494308424f5652f/portrait.png',
      kind: 'Item'
    }, {
      slug: 'weighted-throwing-knives-missile',
      name: 'Weighted Throwing Knives Missile',
      original: '544d99b98494308424f56545',
      portraitURL: '/file/db/thang.type/544d99b98494308424f56545/portrait.png',
      kind: 'Missile'
    }, {
      slug: 'well',
      name: 'Well',
      original: '52b094cbccbc671372000004',
      portraitURL: '/file/db/thang.type/52b094cbccbc671372000004/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'white-deerhide-gloves',
      name: 'White Deerhide Gloves',
      original: '54694936a2b1f53ce7944429',
      portraitURL: '/file/db/thang.type/54694936a2b1f53ce7944429/portrait.png',
      kind: 'Item'
    }, {
      slug: 'windwalker-coif',
      name: 'Windwalker Coif',
      original: '54ea48512b7506e891ca7157',
      portraitURL: '/file/db/thang.type/54ea48512b7506e891ca7157/portrait.png',
      kind: 'Item'
    }, {
      slug: 'windwalker-mail',
      name: 'Windwalker Mail',
      original: '54ea46092b7506e891ca7143',
      portraitURL: '/file/db/thang.type/54ea46092b7506e891ca7143/portrait.png',
      kind: 'Item'
    }, {
      slug: 'winged-boots',
      name: 'Winged Boots',
      original: '546d4e5c9df4a17d0d449ad9',
      portraitURL: '/file/db/thang.type/546d4e5c9df4a17d0d449ad9/portrait.png',
      kind: 'Item'
    }, {
      slug: 'wizard-bird-f',
      name: 'Wizard Bird F',
      original: '52fc0c9e7e01835453bd8ef8',
      portraitURL: '/file/db/thang.type/52fc0c9e7e01835453bd8ef8/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-bird-m',
      name: 'Wizard Bird M',
      original: '52fd015f3a58c6c50fcf4782',
      portraitURL: '/file/db/thang.type/52fd015f3a58c6c50fcf4782/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-doctor',
      name: 'Wizard Doctor',
      original: '52fc04fbab6e45c813bc7ced',
      portraitURL: '/file/db/thang.type/52fc04fbab6e45c813bc7ced/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-dude',
      name: 'Wizard Dude',
      original: '53e126a4e06b897606d38bef',
      portraitURL: '/file/db/thang.type/53e126a4e06b897606d38bef/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-hermes',
      name: 'Wizard Hermes',
      original: '52fc09daab6e45c813bc7d52',
      portraitURL: '/file/db/thang.type/52fc09daab6e45c813bc7d52/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-knight',
      name: 'Wizard Knight',
      original: '52fc00ffab6e45c813bc7cb2',
      portraitURL: '/file/db/thang.type/52fc00ffab6e45c813bc7cb2/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-ninja-m',
      name: 'Wizard Ninja M',
      original: '52fd04aff0cd954d619a9a4c',
      portraitURL: '/file/db/thang.type/52fd04aff0cd954d619a9a4c/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-overseer-f',
      name: 'Wizard Overseer F',
      original: '52fc11fbb2b91c0d5a7b6a14',
      portraitURL: '/file/db/thang.type/52fc11fbb2b91c0d5a7b6a14/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-overseer-m',
      name: 'Wizard Overseer M',
      original: '52fd0728ccb2653821eaf8b0',
      portraitURL: '/file/db/thang.type/52fd0728ccb2653821eaf8b0/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-purple',
      name: 'Wizard Purple',
      original: '52fd0e16c7e6cf99160e7b6a',
      portraitURL: '/file/db/thang.type/52fd0e16c7e6cf99160e7b6a/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-spine',
      name: 'Wizard Spine',
      original: '52fcfed63a58c6c50fcf4732',
      portraitURL: '/file/db/thang.type/52fcfed63a58c6c50fcf4732/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-spine-m',
      name: 'Wizard Spine M',
      original: '52fd0c70f0cd954d619a9b10',
      portraitURL: '/file/db/thang.type/52fd0c70f0cd954d619a9b10/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-thorn-f',
      name: 'Wizard Thorn F',
      original: '52fc1460b2b91c0d5a7b6af3',
      portraitURL: '/file/db/thang.type/52fc1460b2b91c0d5a7b6af3/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-thorn-m',
      name: 'Wizard Thorn M',
      original: '52fd0a40f0cd954d619a9ad7',
      portraitURL: '/file/db/thang.type/52fd0a40f0cd954d619a9ad7/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wizard-top-hat',
      name: 'Wizard Top Hat',
      original: '52fd124accb2653821eaf991',
      portraitURL: '/file/db/thang.type/52fd124accb2653821eaf991/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wooden-builders-hammer',
      name: 'Wooden Builder\'s Hammer',
      original: '54694ba3a2b1f53ce794444d',
      portraitURL: '/file/db/thang.type/54694ba3a2b1f53ce794444d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'wooden-glasses',
      name: 'Wooden Glasses',
      original: '53e2167653457600003e3eb3',
      portraitURL: '/file/db/thang.type/53e2167653457600003e3eb3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'wooden-shield',
      name: 'Wooden Shield',
      original: '53e22aa153457600003e3ef5',
      portraitURL: '/file/db/thang.type/53e22aa153457600003e3ef5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'wooden-strand',
      name: 'Wooden Strand',
      original: '54692e3ea2b1f53ce79443a3',
      portraitURL: '/file/db/thang.type/54692e3ea2b1f53ce79443a3/portrait.png',
      kind: 'Item'
    }, {
      slug: 'workers-gloves',
      name: 'Worker\'s Gloves',
      original: '5469425ca2b1f53ce7944421',
      portraitURL: '/file/db/thang.type/5469425ca2b1f53ce7944421/portrait.png',
      kind: 'Item'
    }, {
      slug: 'worn-dragonplate',
      name: 'Worn Dragonplate',
      original: '546ab1a13777d61863292872',
      portraitURL: '/file/db/thang.type/546ab1a13777d61863292872/portrait.png',
      kind: 'Item'
    }, {
      slug: 'worn-dragonplate-helmet',
      name: 'Worn Dragonplate Helmet',
      original: '546d3a199df4a17d0d449a1b',
      portraitURL: '/file/db/thang.type/546d3a199df4a17d0d449a1b/portrait.png',
      kind: 'Item'
    }, {
      slug: 'worn-dragonshield',
      name: 'Worn Dragonshield',
      original: '54eabd662b7506e891ca722e',
      portraitURL: '/file/db/thang.type/54eabd662b7506e891ca722e/portrait.png',
      kind: 'Item'
    }, {
      slug: 'wyrm2',
      name: 'wyrm2',
      original: '56c32fd1807b9f36005e5fd0',
      portraitURL: '/file/db/thang.type/56c32fd1807b9f36005e5fd0/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'wyvernclaw',
      name: 'Wyvernclaw',
      original: '54ea35fd2b7506e891ca70d5',
      portraitURL: '/file/db/thang.type/54ea35fd2b7506e891ca70d5/portrait.png',
      kind: 'Item'
    }, {
      slug: 'x-mark-bones',
      name: 'X Mark Bones',
      original: '54938352e9850ae3e8fbdd64',
      portraitURL: '/file/db/thang.type/54938352e9850ae3e8fbdd64/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'x-mark-forest',
      name: 'X Mark Forest',
      original: '549381a7e9850ae3e8fbdd60',
      portraitURL: '/file/db/thang.type/549381a7e9850ae3e8fbdd60/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'x-mark-red',
      name: 'X Mark Red',
      original: '5493844be9850ae3e8fbdd70',
      portraitURL: '/file/db/thang.type/5493844be9850ae3e8fbdd70/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'x-mark-stone',
      name: 'X Mark Stone',
      original: '549383aae9850ae3e8fbdd68',
      portraitURL: '/file/db/thang.type/549383aae9850ae3e8fbdd68/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'x-mark-wood',
      name: 'X Mark Wood',
      original: '54938408e9850ae3e8fbdd6c',
      portraitURL: '/file/db/thang.type/54938408e9850ae3e8fbdd6c/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'x-marker',
      name: 'X Marker',
      original: '5452ec9f06a59e000067e518',
      portraitURL: '/file/db/thang.type/5452ec9f06a59e000067e518/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'x-ray-goggles',
      name: 'X-Ray Goggles',
      original: '53e2392453457600003e3f0d',
      portraitURL: '/file/db/thang.type/53e2392453457600003e3f0d/portrait.png',
      kind: 'Item'
    }, {
      slug: 'yeti',
      name: 'Yeti',
      original: '54e91dc5970f0b0a263c03de',
      portraitURL: '/file/db/thang.type/54e91dc5970f0b0a263c03de/portrait.png',
      kind: 'Unit'
    }, {
      slug: 'yeti-cave',
      name: 'Yeti Cave',
      original: '557f8f84b43ce0b15a91b1c7',
      portraitURL: '/file/db/thang.type/557f8f84b43ce0b15a91b1c7/portrait.png',
      kind: 'Doodad'
    }, {
      slug: 'yeti-skin',
      name: 'Yeti Skin',
      original: '557f370ab43ce0b15a91b171',
      portraitURL: '/file/db/thang.type/557f370ab43ce0b15a91b171/portrait.png',
      kind: 'Doodad'
    }
  ];

  return ImageGalleryModal;

})(ModalView);
});

;require.register("views/play/level/modal/InfiniteLoopModal", function(exports, require, module) {
var InfiniteLoopModal, ModalView, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/level/modal/infinite_loop');

module.exports = InfiniteLoopModal = (function(superClass) {
  extend(InfiniteLoopModal, superClass);

  function InfiniteLoopModal() {
    return InfiniteLoopModal.__super__.constructor.apply(this, arguments);
  }

  InfiniteLoopModal.prototype.id = '#infinite-loop-modal';

  InfiniteLoopModal.prototype.template = template;

  InfiniteLoopModal.prototype.events = {
    'click #restart-level-infinite-loop-retry-button': function() {
      return Backbone.Mediator.publish('tome:cast-spell', {});
    },
    'click #restart-level-infinite-loop-confirm-button': function() {
      return Backbone.Mediator.publish('level:restart', {});
    },
    'click #restart-level-infinite-loop-comment-button': function() {
      return Backbone.Mediator.publish('tome:comment-my-code', {});
    }
  };

  return InfiniteLoopModal;

})(ModalView);
});

;require.register("views/play/level/modal/KeyboardShortcutsModal", function(exports, require, module) {
var KeyboardShortcutsModal, ModalView, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/level/modal/keyboard_shortcuts');

module.exports = KeyboardShortcutsModal = (function(superClass) {
  extend(KeyboardShortcutsModal, superClass);

  function KeyboardShortcutsModal() {
    return KeyboardShortcutsModal.__super__.constructor.apply(this, arguments);
  }

  KeyboardShortcutsModal.prototype.id = 'keyboard-shortcuts-modal';

  KeyboardShortcutsModal.prototype.template = template;

  KeyboardShortcutsModal.prototype.isMac = function() {
    return false;
  };

  KeyboardShortcutsModal.prototype.getRenderData = function() {
    var c;
    c = KeyboardShortcutsModal.__super__.getRenderData.call(this);
    c.ctrl = this.isMac() ? '⌘' : '^';
    c.ctrlName = this.isMac() ? 'Cmd' : 'Ctrl';
    c.alt = this.isMac() ? '⌥' : '⎇';
    c.altName = this.isMac() ? 'Opt' : 'Alt';
    c.enter = $.i18n.t('keyboard_shortcuts.enter');
    c.space = $.i18n.t('keyboard_shortcuts.space');
    c.escapeKey = $.i18n.t('keyboard_shortcuts.escape');
    c.shift = $.i18n.t('keyboard_shortcuts.shift');
    return c;
  };

  return KeyboardShortcutsModal;

})(ModalView);
});

;require.register("views/play/level/modal/NewItemView", function(exports, require, module) {
var CocoView, NewItemView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

module.exports = NewItemView = (function(superClass) {
  extend(NewItemView, superClass);

  function NewItemView() {
    return NewItemView.__super__.constructor.apply(this, arguments);
  }

  NewItemView.prototype.id = 'new-item-view';

  NewItemView.prototype.className = 'modal-content';

  NewItemView.prototype.template = require('templates/play/level/modal/new-item-view');

  NewItemView.prototype.events = {
    'click #continue-btn': 'onClickContinueButton'
  };

  NewItemView.prototype.afterRender = function() {
    return NewItemView.__super__.afterRender.call(this);
  };

  NewItemView.prototype.initialize = function(options) {
    this.item = options.item;
    return NewItemView.__super__.initialize.call(this);
  };

  NewItemView.prototype.onClickContinueButton = function() {
    return this.trigger('continue');
  };

  return NewItemView;

})(CocoView);
});

;require.register("views/play/level/modal/PicoCTFVictoryModal", function(exports, require, module) {
var Level, ModalView, PicoCTFVictoryModal, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/level/modal/picoctf-victory-modal');

Level = require('models/Level');

module.exports = PicoCTFVictoryModal = (function(superClass) {
  extend(PicoCTFVictoryModal, superClass);

  function PicoCTFVictoryModal() {
    return PicoCTFVictoryModal.__super__.constructor.apply(this, arguments);
  }

  PicoCTFVictoryModal.prototype.id = 'picoctf-victory-modal';

  PicoCTFVictoryModal.prototype.template = template;

  PicoCTFVictoryModal.prototype.closesOnClickOutside = false;

  PicoCTFVictoryModal.prototype.initialize = function(options) {
    var form, nextLevel;
    this.session = options.session;
    this.level = options.level;
    form = {
      flag: options.world.picoCTFFlag,
      pid: this.level.picoCTFProblem.pid
    };
    this.supermodel.addRequestResource({
      url: '/picoctf/submit',
      method: 'POST',
      data: form,
      success: (function(_this) {
        return function(response) {
          return console.log('submitted', form, 'and got response', response);
        };
      })(this)
    }).load();
    if (nextLevel = this.level.get('nextLevel')) {
      this.nextLevel = new Level().setURL("/db/level/" + nextLevel.original + "/version/" + nextLevel.majorVersion);
      this.nextLevel = this.supermodel.loadModel(this.nextLevel).model;
    }
    return this.playSound('victory');
  };

  PicoCTFVictoryModal.prototype.onLoaded = function() {
    return PicoCTFVictoryModal.__super__.onLoaded.call(this);
  };

  return PicoCTFVictoryModal;

})(ModalView);
});

;require.register("views/play/level/modal/ProgressView", function(exports, require, module) {
var CocoView, ProgressView, urls, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

utils = require('core/utils');

urls = require('core/urls');

module.exports = ProgressView = (function(superClass) {
  extend(ProgressView, superClass);

  function ProgressView() {
    return ProgressView.__super__.constructor.apply(this, arguments);
  }

  ProgressView.prototype.id = 'progress-view';

  ProgressView.prototype.className = 'modal-content';

  ProgressView.prototype.template = require('templates/play/level/modal/progress-view');

  ProgressView.prototype.events = {
    'click #done-btn': 'onClickDoneButton',
    'click #next-level-btn': 'onClickNextLevelButton',
    'click #ladder-btn': 'onClickLadderButton',
    'click #share-level-btn': 'onClickShareLevelButton'
  };

  ProgressView.prototype.initialize = function(options) {
    this.level = options.level;
    this.course = options.course;
    this.classroom = options.classroom;
    this.nextLevel = options.nextLevel;
    this.levelSessions = options.levelSessions;
    this.session = options.session;
    this.nextLevel.get('description', true);
    this.nextLevelDescription = marked(utils.i18n(this.nextLevel.attributesWithDefaults, 'description').replace(/!\[.*?\]\(.*?\)\n*/g, ''));
    if (this.level.get('shareable') === 'project') {
      return this.shareURL = urls.playDevLevel({
        level: this.level,
        session: this.session,
        course: this.course
      });
    }
  };

  ProgressView.prototype.onClickDoneButton = function() {
    return this.trigger('done');
  };

  ProgressView.prototype.onClickNextLevelButton = function() {
    return this.trigger('next-level');
  };

  ProgressView.prototype.onClickLadderButton = function() {
    return this.trigger('ladder');
  };

  ProgressView.prototype.onClickShareLevelButton = function() {
    var category, eventProperties, name, ref;
    if (_.string.startsWith(this.course.get('slug'), 'game-dev')) {
      name = 'Student Game Dev - Copy URL';
      category = 'GameDev';
    } else {
      name = 'Student Web Dev - Copy URL';
      category = 'WebDev';
    }
    eventProperties = {
      levelID: this.level.id,
      levelSlug: this.level.get('slug'),
      classroomID: this.classroom.id,
      courseID: this.course.id,
      category: category
    };
    if ((ref = window.tracker) != null) {
      ref.trackEvent(name, eventProperties, ['MixPanel']);
    }
    this.$('#share-level-input').val(this.shareURL).select();
    return this.tryCopy();
  };

  return ProgressView;

})(CocoView);
});

;require.register("views/play/level/modal/ReloadLevelModal", function(exports, require, module) {
var ModalView, ReloadLevelModal, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/level/modal/reload-level-modal');

module.exports = ReloadLevelModal = (function(superClass) {
  extend(ReloadLevelModal, superClass);

  function ReloadLevelModal() {
    return ReloadLevelModal.__super__.constructor.apply(this, arguments);
  }

  ReloadLevelModal.prototype.id = '#reload-level-modal';

  ReloadLevelModal.prototype.template = template;

  ReloadLevelModal.prototype.events = {
    'click #restart-level-confirm-button': 'onClickRestart'
  };

  ReloadLevelModal.prototype.onClickRestart = function(e) {
    this.playSound('menu-button-click');
    return Backbone.Mediator.publish('level:restart', {});
  };

  return ReloadLevelModal;

})(ModalView);
});

;require.register("views/play/level/modal/VictoryModal", function(exports, require, module) {
var CreateAccountModal, LadderSubmissionView, LevelFeedback, ModalView, VictoryModal, me, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

CreateAccountModal = require('views/core/CreateAccountModal');

template = require('templates/play/level/modal/victory');

me = require('core/auth').me;

LadderSubmissionView = require('views/play/common/LadderSubmissionView');

LevelFeedback = require('models/LevelFeedback');

utils = require('core/utils');

module.exports = VictoryModal = (function(superClass) {
  extend(VictoryModal, superClass);

  VictoryModal.prototype.id = 'level-victory-modal';

  VictoryModal.prototype.template = template;

  VictoryModal.prototype.subscriptions = {
    'ladder:game-submitted': 'onGameSubmitted'
  };

  VictoryModal.prototype.events = {
    'click .sign-up-button': 'onClickSignupButton',
    'mouseover .rating i': function(e) {
      return this.showStars(this.starNum($(e.target)));
    },
    'mouseout .rating i': function() {
      return this.showStars();
    },
    'click .rating i': function(e) {
      this.setStars(this.starNum($(e.target)));
      return this.$el.find('.review').show();
    },
    'keypress .review textarea': function() {
      return this.saveReviewEventually();
    }
  };

  function VictoryModal(options) {
    var body, victory;
    application.router.initializeSocialMediaServices();
    victory = options.level.get('victory', true);
    body = utils.i18n(victory, 'body') || 'Sorry, this level has no victory message yet.';
    this.body = marked(body);
    this.level = options.level;
    this.session = options.session;
    this.saveReviewEventually = _.debounce(this.saveReviewEventually, 2000);
    this.loadExistingFeedback();
    VictoryModal.__super__.constructor.call(this, options);
  }

  VictoryModal.prototype.loadExistingFeedback = function() {
    var url;
    url = "/db/level/" + this.level.id + "/feedback";
    this.feedback = new LevelFeedback();
    this.feedback.setURL(url);
    this.feedback.fetch({
      cache: false
    });
    this.listenToOnce(this.feedback, 'sync', function() {
      return this.onFeedbackLoaded();
    });
    return this.listenToOnce(this.feedback, 'error', function() {
      return this.onFeedbackNotFound();
    });
  };

  VictoryModal.prototype.onFeedbackLoaded = function() {
    this.feedback.url = function() {
      return '/db/level.feedback/' + this.id;
    };
    this.$el.find('.review textarea').val(this.feedback.get('review'));
    this.$el.find('.review').show();
    return this.showStars();
  };

  VictoryModal.prototype.onFeedbackNotFound = function() {
    this.feedback = new LevelFeedback();
    this.feedback.set('levelID', this.level.get('slug') || this.level.id);
    this.feedback.set('levelName', this.level.get('name') || '');
    this.feedback.set('level', {
      majorVersion: this.level.get('version').major,
      original: this.level.get('original')
    });
    return this.showStars();
  };

  VictoryModal.prototype.onClickSignupButton = function(e) {
    var ref;
    e.preventDefault();
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Started Signup', {
        category: 'Play Level',
        label: 'Victory Modal',
        level: this.level.get('slug')
      });
    }
    return this.openModalView(new CreateAccountModal());
  };

  VictoryModal.prototype.onGameSubmitted = function(e) {
    var ladderURL;
    ladderURL = "/play/ladder/" + (this.level.get('slug')) + "#my-matches";
    return Backbone.Mediator.publish('router:navigate', {
      route: ladderURL
    });
  };

  VictoryModal.prototype.getRenderData = function() {
    var c;
    c = VictoryModal.__super__.getRenderData.call(this);
    c.body = this.body;
    c.me = me;
    c.levelName = utils.i18n(this.level.attributes, 'name');
    c.level = this.level;
    if (c.level.isType('ladder')) {
      c.readyToRank = this.session.readyToRank();
    }
    return c;
  };

  VictoryModal.prototype.afterRender = function() {
    VictoryModal.__super__.afterRender.call(this);
    this.ladderSubmissionView = new LadderSubmissionView({
      session: this.session,
      level: this.level
    });
    return this.insertSubView(this.ladderSubmissionView, this.$el.find('.ladder-submission-view'));
  };

  VictoryModal.prototype.afterInsert = function() {
    var ref, ref1, ref2;
    VictoryModal.__super__.afterInsert.call(this);
    this.playSound('victory');
    if (typeof gapi !== "undefined" && gapi !== null) {
      if ((ref = gapi.plusone) != null) {
        if (typeof ref.go === "function") {
          ref.go(this.$el[0]);
        }
      }
    }
    if (typeof FB !== "undefined" && FB !== null) {
      if ((ref1 = FB.XFBML) != null) {
        if (typeof ref1.parse === "function") {
          ref1.parse(this.$el[0]);
        }
      }
    }
    return typeof twttr !== "undefined" && twttr !== null ? (ref2 = twttr.widgets) != null ? typeof ref2.load === "function" ? ref2.load() : void 0 : void 0 : void 0;
  };

  VictoryModal.prototype.destroy = function() {
    if (this.$el.find('.review textarea').val()) {
      this.saveReview();
    }
    this.feedback.off();
    return VictoryModal.__super__.destroy.call(this);
  };

  VictoryModal.prototype.starNum = function(starEl) {
    return starEl.prevAll('i').length + 1;
  };

  VictoryModal.prototype.showStars = function(num) {
    var ref, stars;
    this.$el.find('.rating').show();
    if (num == null) {
      num = ((ref = this.feedback) != null ? ref.get('rating') : void 0) || 0;
    }
    stars = this.$el.find('.rating i');
    stars.removeClass('icon-star').addClass('icon-star-empty');
    return stars.slice(0, num).removeClass('icon-star-empty').addClass('icon-star');
  };

  VictoryModal.prototype.setStars = function(num) {
    this.feedback.set('rating', num);
    return this.feedback.save();
  };

  VictoryModal.prototype.saveReviewEventually = function() {
    return this.saveReview();
  };

  VictoryModal.prototype.saveReview = function() {
    this.feedback.set('review', this.$el.find('.review textarea').val());
    return this.feedback.save();
  };

  return VictoryModal;

})(ModalView);
});

;require.register("views/play/level/tome/CastButtonView", function(exports, require, module) {
var CastButtonView, CocoView, LadderSubmissionView, LevelSession, me, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/cast-button-view');

me = require('core/auth').me;

LadderSubmissionView = require('views/play/common/LadderSubmissionView');

LevelSession = require('models/LevelSession');

module.exports = CastButtonView = (function(superClass) {
  extend(CastButtonView, superClass);

  CastButtonView.prototype.id = 'cast-button-view';

  CastButtonView.prototype.template = template;

  CastButtonView.prototype.events = {
    'click .cast-button': 'onCastButtonClick',
    'click .submit-button': 'onCastRealTimeButtonClick',
    'click .done-button': 'onDoneButtonClick',
    'click .game-dev-play-btn': 'onClickGameDevPlayButton'
  };

  CastButtonView.prototype.subscriptions = {
    'tome:spell-changed': 'onSpellChanged',
    'tome:cast-spells': 'onCastSpells',
    'tome:manual-cast-denied': 'onManualCastDenied',
    'god:new-world-created': 'onNewWorld',
    'goal-manager:new-goal-states': 'onNewGoalStates',
    'god:goals-calculated': 'onGoalsCalculated',
    'playback:ended-changed': 'onPlaybackEndedChanged'
  };

  function CastButtonView(options) {
    this.updateReplayability = bind(this.updateReplayability, this);
    var ref, ref1;
    CastButtonView.__super__.constructor.call(this, options);
    this.spells = options.spells;
    this.castShortcut = '⇧↵';
    this.updateReplayabilityInterval = setInterval(this.updateReplayability, 1000);
    this.observing = options.session.get('creator') !== me.id;
    if ((ref = this.options.level.get('slug')) === 'ace-of-coders' || ref === 'elemental-wars' || ref === 'the-battle-of-sky-span') {
      this.loadMirrorSession();
    }
    this.mirror = this.mirrorSession != null;
    this.autoSubmitsToLadder = (ref1 = this.options.level.get('slug')) === 'wakka-maul';
  }

  CastButtonView.prototype.destroy = function() {
    clearInterval(this.updateReplayabilityInterval);
    return CastButtonView.__super__.destroy.call(this);
  };

  CastButtonView.prototype.afterRender = function() {
    var ref, ref1, ref2, ref3, spell, spellKey;
    CastButtonView.__super__.afterRender.call(this);
    this.castButton = $('.cast-button', this.$el);
    ref = this.spells;
    for (spellKey in ref) {
      spell = ref[spellKey];
      if ((ref1 = spell.view) != null) {
        ref1.createOnCodeChangeHandlers();
      }
    }
    if (this.options.level.get('hidesSubmitUntilRun') || this.options.level.get('hidesRealTimePlayback') || this.options.level.isType('web-dev')) {
      this.$el.find('.submit-button').hide();
    }
    if (((ref2 = this.options.session.get('state')) != null ? ref2.complete : void 0) && (this.options.level.get('hidesRealTimePlayback') || this.options.level.isType('web-dev'))) {
      this.$el.find('.done-button').show();
    }
    if ((ref3 = this.options.level.get('slug')) === 'course-thornbush-farm' || ref3 === 'thornbush-farm') {
      this.$el.find('.submit-button').hide();
    }
    this.updateReplayability();
    return this.updateLadderSubmissionViews();
  };

  CastButtonView.prototype.attachTo = function(spellView) {
    return this.$el.detach().prependTo(spellView.toolbarView.$el).show();
  };

  CastButtonView.prototype.castShortcutVerbose = function() {
    var enter, shift;
    shift = $.i18n.t('keyboard_shortcuts.shift');
    enter = $.i18n.t('keyboard_shortcuts.enter');
    return shift + "+" + enter;
  };

  CastButtonView.prototype.castVerbose = function() {
    return this.castShortcutVerbose() + ': ' + $.i18n.t('keyboard_shortcuts.run_code');
  };

  CastButtonView.prototype.castRealTimeVerbose = function() {
    var castRealTimeShortcutVerbose;
    castRealTimeShortcutVerbose = (this.isMac() ? 'Cmd' : 'Ctrl') + '+' + this.castShortcutVerbose();
    return castRealTimeShortcutVerbose + ': ' + $.i18n.t('keyboard_shortcuts.run_real_time');
  };

  CastButtonView.prototype.onCastButtonClick = function(e) {
    return Backbone.Mediator.publish('tome:manual-cast', {});
  };

  CastButtonView.prototype.onCastRealTimeButtonClick = function(e) {
    var timeUntilResubmit;
    if (this.options.level.get('replayable') && (timeUntilResubmit = this.options.session.timeUntilResubmit()) > 0) {
      Backbone.Mediator.publish('tome:manual-cast-denied', {
        timeUntilResubmit: timeUntilResubmit
      });
    } else {
      Backbone.Mediator.publish('tome:manual-cast', {
        realTime: true
      });
    }
    return this.updateReplayability();
  };

  CastButtonView.prototype.onClickGameDevPlayButton = function() {
    return Backbone.Mediator.publish('tome:manual-cast', {
      realTime: true
    });
  };

  CastButtonView.prototype.onDoneButtonClick = function(e) {
    var ref;
    if (this.options.level.hasLocalChanges()) {
      return;
    }
    this.options.session.recordScores((ref = this.world) != null ? ref.scores : void 0, this.options.level);
    return Backbone.Mediator.publish('level:show-victory', {
      showModal: true,
      manual: true
    });
  };

  CastButtonView.prototype.onSpellChanged = function(e) {
    return this.updateCastButton();
  };

  CastButtonView.prototype.onCastSpells = function(e) {
    if (e.preload) {
      return;
    }
    this.casting = true;
    if (this.hasStartedCastingOnce) {
      if (!this.options.level.isType('game-dev')) {
        this.playSound('cast', 0.5);
      }
    }
    this.hasStartedCastingOnce = true;
    return this.updateCastButton();
  };

  CastButtonView.prototype.onManualCastDenied = function(e) {
    var wait;
    wait = moment().add(e.timeUntilResubmit, 'ms').fromNow();
    return noty({
      text: "You can try again " + wait + ".",
      layout: 'center',
      type: 'warning',
      killer: false,
      timeout: 6000
    });
  };

  CastButtonView.prototype.onNewWorld = function(e) {
    var myHeroID, ref;
    this.casting = false;
    if (this.hasCastOnce) {
      if (!this.options.level.isType('game-dev')) {
        this.playSound('cast-end', 0.5);
      }
      myHeroID = me.team === 'ogres' ? 'Hero Placeholder 1' : 'Hero Placeholder';
      if (this.autoSubmitsToLadder && !((ref = e.world.thangMap[myHeroID]) != null ? ref.errorsOut : void 0) && !me.get('anonymous')) {
        if (this.ladderSubmissionView) {
          _.delay(((function(_this) {
            return function() {
              var ref1;
              return (ref1 = _this.ladderSubmissionView) != null ? ref1.rankSession() : void 0;
            };
          })(this)), 1000);
        }
      }
    }
    this.hasCastOnce = true;
    this.updateCastButton();
    return this.world = e.world;
  };

  CastButtonView.prototype.onNewGoalStates = function(e) {
    var ref, winnable;
    winnable = e.overallStatus === 'success';
    if (this.winnable === winnable) {
      return;
    }
    this.winnable = winnable;
    this.$el.toggleClass('winnable', this.winnable);
    Backbone.Mediator.publish('tome:winnability-updated', {
      winnable: this.winnable,
      level: this.options.level
    });
    if (this.options.level.get('hidesRealTimePlayback') || this.options.level.isType('web-dev', 'game-dev')) {
      return this.$el.find('.done-button').toggle(this.winnable);
    } else if (this.winnable && ((ref = this.options.level.get('slug')) === 'course-thornbush-farm' || ref === 'thornbush-farm')) {
      return this.$el.find('.submit-button').show();
    }
  };

  CastButtonView.prototype.onGoalsCalculated = function(e) {
    var ref;
    if (e.god !== this.god) {
      return;
    }
    if (!e.preload) {
      return;
    }
    if (this.options.level.get('hidesRealTimePlayback')) {
      return;
    }
    if ((ref = this.options.level.get('slug')) === 'course-thornbush-farm' || ref === 'thornbush-farm') {
      return;
    }
    return this.onNewGoalStates(e);
  };

  CastButtonView.prototype.onPlaybackEndedChanged = function(e) {
    if (!(e.ended && this.winnable)) {
      return;
    }
    return this.$el.toggleClass('has-seen-winning-replay', true);
  };

  CastButtonView.prototype.updateCastButton = function() {
    if (_.some(this.spells, (function(_this) {
      return function(spell) {
        return !spell.loaded;
      };
    })(this))) {
      return;
    }
    return async.some(_.values(this.spells), (function(_this) {
      return function(spell, callback) {
        return spell.hasChangedSignificantly(spell.getSource(), null, callback);
      };
    })(this), (function(_this) {
      return function(castable) {
        var castText, ref;
        Backbone.Mediator.publish('tome:spell-has-changed-significantly-calculation', {
          hasChangedSignificantly: castable
        });
        _this.castButton.toggleClass('castable', castable).toggleClass('casting', _this.casting);
        if (_this.casting) {
          castText = $.i18n.t('play_level.tome_cast_button_running');
        } else if (castable || true) {
          castText = $.i18n.t('play_level.tome_cast_button_run');
          if (!_this.options.level.get('hidesRunShortcut')) {
            castText += ' ' + _this.castShortcut;
          }
        } else {
          castText = $.i18n.t('play_level.tome_cast_button_ran');
        }
        _this.castButton.text(castText);
        return (ref = _this.ladderSubmissionView) != null ? ref.updateButton() : void 0;
      };
    })(this));
  };

  CastButtonView.prototype.updateReplayability = function() {
    var disabled, submitAgainLabel, submitButton, timeUntilResubmit, waitTime;
    if (this.destroyed) {
      return;
    }
    if (!this.options.level.get('replayable')) {
      return;
    }
    timeUntilResubmit = this.options.session.timeUntilResubmit();
    disabled = timeUntilResubmit > 0;
    submitButton = this.$el.find('.submit-button').toggleClass('disabled', disabled);
    submitAgainLabel = submitButton.find('.submit-again-time').toggleClass('secret', !disabled);
    if (disabled) {
      waitTime = moment().add(timeUntilResubmit, 'ms').fromNow();
      return submitAgainLabel.text(waitTime);
    }
  };

  CastButtonView.prototype.loadMirrorSession = function() {
    var mirrorSession, url;
    url = "/db/level/" + (this.options.level.get('slug') || this.options.level.id) + "/session";
    url += "?team=" + (me.team === 'humans' ? 'ogres' : 'humans');
    mirrorSession = new LevelSession().setURL(url);
    return this.mirrorSession = this.supermodel.loadModel(mirrorSession, {
      cache: false
    }).model;
  };

  CastButtonView.prototype.updateLadderSubmissionViews = function() {
    var key, placeholder, ref, subview;
    ref = this.subviews;
    for (key in ref) {
      subview = ref[key];
      if (subview instanceof LadderSubmissionView) {
        this.removeSubView(subview);
      }
    }
    placeholder = this.$el.find('.ladder-submission-view');
    if (!placeholder.length) {
      return;
    }
    this.ladderSubmissionView = new LadderSubmissionView({
      session: this.options.session,
      level: this.options.level,
      mirrorSession: this.mirrorSession
    });
    return this.insertSubView(this.ladderSubmissionView, placeholder);
  };

  return CastButtonView;

})(CocoView);
});

;require.register("views/play/level/tome/DocFormatter", function(exports, require, module) {
var DocFormatter, downTheChain, popoverTemplate, safeJSONStringify, utils;

popoverTemplate = require('templates/play/level/tome/spell_palette_entry_popover');

downTheChain = require('lib/world/world_utils').downTheChain;

window.Vector = require('lib/world/vector');

utils = require('core/utils');

safeJSONStringify = function(input, maxDepth) {
  var output, recursion, refs, refsPaths;
  recursion = function(input, path, depth) {
    var output, p, pPath, refIdx;
    output = {};
    pPath = void 0;
    refIdx = void 0;
    path = path || '';
    depth = depth || 0;
    depth++;
    if (maxDepth && depth > maxDepth) {
      return '{depth over ' + maxDepth + '}';
    }
    for (p in input) {
      pPath = (path ? path + '.' : '') + p;
      if (typeof input[p] === 'function') {
        output[p] = '{function}';
      } else if (typeof input[p] === 'object') {
        refIdx = refs.indexOf(input[p]);
        if (-1 !== refIdx) {
          output[p] = '{reference to ' + refsPaths[refIdx] + '}';
        } else {
          refs.push(input[p]);
          refsPaths.push(pPath);
          output[p] = recursion(input[p], pPath, depth);
        }
      } else {
        output[p] = input[p];
      }
    }
    return output;
  };
  refs = [];
  refsPaths = [];
  maxDepth = maxDepth || 5;
  if (typeof input === 'object') {
    output = recursion(input);
  } else {
    output = input;
  }
  return JSON.stringify(output, null, 1);
};

module.exports = DocFormatter = (function() {
  function DocFormatter(options) {
    this.options = options;
    this.doc = _.cloneDeep(this.options.doc);
    this.fillOutDoc();
  }

  DocFormatter.prototype.fillOutDoc = function() {
    var arg, argNames, argString, args, base, context, docName, e, error, fallingBack, i, j, k, len, len1, len2, obj, originalVal, ownerName, prop, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, spokenLanguage, spokenLanguageContext, thisToken, toTranslate, translatedName, val, valByCodeLanguage;
    if (_.isString(this.doc)) {
      this.doc = {
        name: this.doc,
        type: typeof this.options.thang[this.doc]
      };
    }
    if (this.options.isSnippet) {
      this.doc.type = 'snippet';
      this.doc.owner = 'snippets';
      this.doc.shortName = this.doc.shorterName = this.doc.title = this.doc.name;
    } else if ((ref = this.doc.owner) === 'HTML' || ref === 'CSS' || ref === 'WebJavaScript' || ref === 'jQuery') {
      this.doc.shortName = this.doc.shorterName = this.doc.title = this.doc.name;
    } else {
      if ((base = this.doc).owner == null) {
        base.owner = 'this';
      }
      ownerName = this.doc.ownerName = (function() {
        if (this.doc.owner !== 'this') {
          return this.doc.owner;
        } else {
          switch (this.options.language) {
            case 'python':
            case 'lua':
              if (this.options.useHero) {
                return 'hero';
              } else {
                return 'self';
              }
            case 'java':
              return 'hero';
            case 'coffeescript':
              return '@';
            default:
              if (this.options.useHero) {
                return 'hero';
              } else {
                return 'this';
              }
          }
        }
      }).call(this);
      if (this.options.level.isType('game-dev')) {
        ownerName = 'game';
      }
      if (this.doc.type === 'function') {
        ref1 = this.getDocNameAndArguments(), docName = ref1[0], args = ref1[1];
        argNames = args.join(', ');
        argString = argNames ? '__ARGS__' : '';
        this.doc.shortName = (function() {
          switch (this.options.language) {
            case 'coffeescript':
              return "" + ownerName + (ownerName === '@' ? '' : '.') + docName + (argString ? ' ' + argString : '()');
            case 'python':
              return ownerName + "." + docName + "(" + argString + ")";
            case 'lua':
              return ownerName + ":" + docName + "(" + argString + ")";
            default:
              return ownerName + "." + docName + "(" + argString + ");";
          }
        }).call(this);
      } else {
        this.doc.shortName = (function() {
          switch (this.options.language) {
            case 'coffeescript':
              return "" + ownerName + (ownerName === '@' ? '' : '.') + this.doc.name;
            case 'python':
              return ownerName + "." + this.doc.name;
            case 'lua':
              return ownerName + "." + this.doc.name;
            default:
              return ownerName + "." + this.doc.name + ";";
          }
        }).call(this);
      }
      this.doc.shorterName = this.doc.shortName;
      if (this.doc.type === 'function' && argString) {
        this.doc.shortName = this.doc.shorterName.replace(argString, argNames);
        this.doc.shorterName = this.doc.shorterName.replace(argString, (!/cast[A-Z]/.test(this.doc.name) && argNames.length > 6 ? '...' : argNames));
      }
      if (this.doc.type === 'event') {
        this.doc.shortName = this.doc.name;
        this.doc.shorterName = this.doc.name;
      }
      if (this.options.language === 'javascript') {
        this.doc.shorterName = this.doc.shortName.replace(';', '');
        if (this.doc.owner === 'this' || this.options.tabbify || ownerName === 'game') {
          this.doc.shorterName = this.doc.shorterName.replace(/^(this|hero)\./, '');
        }
      } else if (((ref2 = this.options.language) === 'python' || ref2 === 'lua') && (this.doc.owner === 'this' || this.options.tabbify || ownerName === 'game')) {
        this.doc.shorterName = this.doc.shortName.replace(/^(self|hero|game)[:.]/, '');
      }
      this.doc.title = this.options.shortenize ? this.doc.shorterName : this.doc.shortName;
      translatedName = utils.i18n(this.doc, 'name');
      if (translatedName !== this.doc.name) {
        this.doc.translatedShortName = this.doc.shortName.replace(this.doc.name, translatedName);
      }
    }
    toTranslate = [
      {
        obj: this.doc,
        prop: 'description'
      }, {
        obj: this.doc,
        prop: 'example'
      }
    ];
    ref4 = (ref3 = this.doc.args) != null ? ref3 : [];
    for (i = 0, len = ref4.length; i < len; i++) {
      arg = ref4[i];
      toTranslate.push({
        obj: arg,
        prop: 'example'
      }, {
        obj: arg,
        prop: 'description'
      });
    }
    if (this.doc.returns) {
      toTranslate.push({
        obj: this.doc.returns,
        prop: 'example'
      }, {
        obj: this.doc.returns,
        prop: 'description'
      });
    }
    for (j = 0, len1 = toTranslate.length; j < len1; j++) {
      ref5 = toTranslate[j], obj = ref5.obj, prop = ref5.prop;
      if (val = (ref6 = obj[prop]) != null ? ref6[this.options.language] : void 0) {
        obj[prop] = val;
      } else if (!_.isString(obj[prop])) {
        obj[prop] = null;
      }
      if (val = originalVal = obj[prop]) {
        context = this.doc.context;
        obj[prop] = val = utils.i18n(obj, prop);
        if (_.isObject(val)) {
          if (valByCodeLanguage = (ref7 = obj[prop]) != null ? ref7[this.options.language] : void 0) {
            obj[prop] = val = valByCodeLanguage;
          } else {
            obj[prop] = originalVal;
          }
        }
        if (this.doc.i18n) {
          spokenLanguage = me.get('preferredLanguage');
          while (spokenLanguage) {
            if (typeof fallingBack !== "undefined" && fallingBack !== null) {
              spokenLanguage = spokenLanguage.substr(0, spokenLanguage.lastIndexOf('-'));
            }
            if (spokenLanguageContext = (ref8 = this.doc.i18n[spokenLanguage]) != null ? ref8.context : void 0) {
              context = _.merge(context, spokenLanguageContext);
              break;
            }
            fallingBack = true;
          }
        }
        if (context) {
          try {
            obj[prop] = _.template(val, context);
          } catch (error) {
            e = error;
            console.error("Couldn't create docs template of", val, "\nwith context", context, "\nError:", e);
          }
        }
        obj[prop] = this.replaceSpriteName(obj[prop]);
      }
    }
    if (this.options.useHero) {
      thisToken = {
        'python': /self/g,
        'javascript': /this/g,
        'lua': /self/g
      };
      if (thisToken[this.options.language]) {
        if (this.doc.example) {
          this.doc.example = this.doc.example.replace(thisToken[this.options.language], 'hero');
        }
        if ((ref9 = this.doc.snippets) != null ? (ref10 = ref9[this.options.language]) != null ? ref10.code : void 0 : void 0) {
          this.doc.snippets[this.options.language].code.replace(thisToken[this.options.language], 'hero');
        }
        if (this.doc.args) {
          ref11 = this.doc.args;
          for (k = 0, len2 = ref11.length; k < len2; k++) {
            arg = ref11[k];
            if (arg.example) {
              arg.example = arg.example.replace(thisToken[this.options.language], 'hero');
            }
          }
        }
      }
    }
    if (this.doc.shortName === 'loop' && this.options.level.isType('course', 'course-ladder')) {
      return this.replaceSimpleLoops();
    }
  };

  DocFormatter.prototype.replaceSimpleLoops = function() {
    var field, i, len, ref, ref1, results, simpleLoop, whileLoop;
    this.doc.shortName = this.doc.shorterName = this.doc.title = this.doc.name = (function() {
      switch (this.options.language) {
        case 'coffeescript':
          return "loop";
        case 'python':
          return "while True:";
        case 'lua':
          return "while true do";
        default:
          return "while (true)";
      }
    }).call(this);
    ref = ['example', 'description'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      ref1 = (function() {
        switch (this.options.language) {
          case 'coffeescript':
            return [/loop/g, "loop"];
          case 'python':
            return [/loop:/g, "while True:"];
          case 'lua':
            return [/loop/g, "while true do"];
          default:
            return [/loop/g, "while (true)"];
        }
      }).call(this), simpleLoop = ref1[0], whileLoop = ref1[1];
      results.push(this.doc[field] = this.doc[field].replace(simpleLoop, whileLoop));
    }
    return results;
  };

  DocFormatter.prototype.formatPopover = function() {
    var arg, args, argumentExamples, content, docName, owner, ref;
    ref = this.getDocNameAndArguments(), docName = ref[0], args = ref[1];
    argumentExamples = (function() {
      var i, len, ref1, ref2, results;
      ref2 = (ref1 = this.doc.args) != null ? ref1 : [];
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        arg = ref2[i];
        results.push(arg.example || arg["default"] || arg.name);
      }
      return results;
    }).call(this);
    if (args.length > argumentExamples.length) {
      argumentExamples.unshift(args[0]);
    }
    content = popoverTemplate({
      doc: this.doc,
      docName: docName,
      language: this.options.language,
      value: this.formatValue(),
      marked: marked,
      argumentExamples: argumentExamples,
      writable: this.options.writable,
      selectedMethod: this.options.selectedMethod,
      cooldowns: this.inferCooldowns(),
      item: this.options.item,
      _: _
    });
    owner = this.doc.owner === 'this' ? this.options.thang : window[this.doc.owner];
    content = this.replaceSpriteName(content);
    content = content.replace(/\#\{(.*?)\}/g, (function(_this) {
      return function(s, properties) {
        return _this.formatValue(downTheChain(owner, properties.split('.')));
      };
    })(this));
    return content = content.replace(/{([a-z]+)}([^]*?){\/\1}/g, (function(_this) {
      return function(s, language, text) {
        if (language === _this.options.language) {
          return text;
        }
        return '';
      };
    })(this));
  };

  DocFormatter.prototype.replaceSpriteName = function(s) {
    var name, ref;
    name = (ref = this.options.thang.type) != null ? ref : this.options.thang.spriteName;
    if (/Hero Placeholder/.test(this.options.thang.id)) {
      name = 'hero';
    }
    return s.replace(/#{spriteName}/g, name);
  };

  DocFormatter.prototype.getDocNameAndArguments = function() {
    var arg, args, docName;
    if (this.doc.type !== 'function') {
      return [this.doc.name, []];
    }
    docName = this.doc.name;
    args = (function() {
      var i, len, ref, ref1, results;
      ref1 = (ref = this.doc.args) != null ? ref : [];
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        arg = ref1[i];
        results.push(arg.name);
      }
      return results;
    }).call(this);
    if (/cast[A-Z]/.test(docName)) {
      docName = 'cast';
      args.unshift('"' + _.string.dasherize(this.doc.name).replace('cast-', '') + '"');
    }
    return [docName, args];
  };

  DocFormatter.prototype.formatValue = function(v) {
    var v2;
    if (this.options.level.isType('web-dev')) {
      return null;
    }
    if (this.doc.type === 'snippet') {
      return null;
    }
    if (this.doc.name === 'now') {
      return this.options.thang.now();
    }
    if (!v && this.doc.type === 'function') {
      return '[Function]';
    }
    if (v == null) {
      if (this.doc.owner === 'this') {
        v = this.options.thang[this.doc.name];
      } else {
        v = window[this.doc.owner][this.doc.name];
      }
    }
    if (this.doc.type === 'number' && !_.isNaN(v)) {
      if (v === Math.round(v)) {
        return v;
      }
      if (_.isNumber(v)) {
        return v.toFixed(2);
      }
      if (!v) {
        return 'null';
      }
      return '' + v;
    }
    if (_.isString(v)) {
      return "\"" + v + "\"";
    }
    if (v != null ? v.id : void 0) {
      return v.id;
    }
    if (v != null ? v.name : void 0) {
      return v.name;
    }
    if (_.isArray(v)) {
      return '[' + ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = v.length; i < len; i++) {
          v2 = v[i];
          results.push(this.formatValue(v2));
        }
        return results;
      }).call(this)).join(', ') + ']';
    }
    if (_.isPlainObject(v)) {
      return safeJSONStringify(v, 2);
    }
    return v;
  };

  DocFormatter.prototype.inferCooldowns = function() {
    var action, actionName, cooldowns, i, len, owner, prop, ref, ref1, ref2, spellName, type, v;
    if (!(this.doc.type === 'function' && this.doc.owner === 'this')) {
      return null;
    }
    owner = this.options.thang;
    cooldowns = null;
    spellName = this.doc.name.match(/^cast(.+)$/);
    if (spellName) {
      actionName = _.string.slugify(_.string.underscored(spellName[1]));
      action = (ref = owner.spells) != null ? ref[actionName] : void 0;
      type = 'spell';
    } else {
      actionName = _.string.slugify(_.string.underscored(this.doc.name));
      action = (ref1 = owner.actions) != null ? ref1[actionName] : void 0;
      type = 'action';
    }
    if (!action) {
      return null;
    }
    cooldowns = {
      cooldown: action.cooldown,
      specificCooldown: action.specificCooldown,
      name: actionName,
      type: type
    };
    ref2 = ['range', 'radius', 'duration', 'damage'];
    for (i = 0, len = ref2.length; i < len; i++) {
      prop = ref2[i];
      v = owner[_.string.camelize(actionName + _.string.capitalize(prop))];
      if (prop === 'range' && v <= 5) {
        continue;
      }
      cooldowns[prop] = v;
      if (_.isNumber(v) && v !== Math.round(v)) {
        cooldowns[prop] = v.toFixed(2);
      }
    }
    return cooldowns;
  };

  return DocFormatter;

})();
});

;require.register("views/play/level/tome/Problem", function(exports, require, module) {
var Problem, Range, ace;

ace = require('ace');

Range = ace.require('ace/range').Range;

module.exports = Problem = (function() {
  Problem.prototype.annotation = null;

  Problem.prototype.markerRange = null;

  function Problem(arg) {
    var col, error, isCast, ref, ref1, ref2, ref3, ref4, ref5, userCodeHasChangedSinceLastCast;
    this.aether = arg.aether, this.aetherProblem = arg.aetherProblem, this.ace = arg.ace, isCast = (ref = arg.isCast) != null ? ref : false, this.levelID = arg.levelID, error = arg.error, userCodeHasChangedSinceLastCast = arg.userCodeHasChangedSinceLastCast;
    if (this.aetherProblem) {
      this.annotation = this.buildAnnotationFromAetherProblem(this.aetherProblem);
      if (isCast) {
        ref1 = this.buildMarkerRangesFromAetherProblem(this.aetherProblem), this.lineMarkerRange = ref1.lineMarkerRange, this.textMarkerRange = ref1.textMarkerRange;
      }
      ref2 = this.aetherProblem, this.level = ref2.level, this.range = ref2.range, this.message = ref2.message, this.hint = ref2.hint, this.userInfo = ref2.userInfo;
      ref4 = ((ref3 = this.aetherProblem.range) != null ? ref3[0] : void 0) || {}, this.row = ref4.row, col = ref4.this;
      this.createdBy = 'aether';
    } else {
      if (!userCodeHasChangedSinceLastCast) {
        this.annotation = this.buildAnnotationFromWebDevError(error);
        ref5 = this.buildMarkerRangesFromWebDevError(error), this.lineMarkerRange = ref5.lineMarkerRange, this.textMarkerRange = ref5.textMarkerRange;
      }
      this.level = 'error';
      this.row = error.line;
      this.column = error.column;
      this.message = error.message || 'Unknown Error';
      if (error.line && !userCodeHasChangedSinceLastCast) {
        this.message = ("Line " + (error.line + 1) + ": ") + this.message;
      }
      if (userCodeHasChangedSinceLastCast) {
        this.hint = "This error was generated by old code — Try running your new code first.";
      } else {
        this.hint = void 0;
      }
      this.userInfo = void 0;
      this.createdBy = 'web-dev-iframe';
    }
    if (application.isIPadApp) {
      Backbone.Mediator.publish("problem:problem-created", {
        line: this.annotation.row,
        text: this.annotation.text
      });
    }
  }

  Problem.prototype.isEqual = function(problem) {
    return _.all(['row', 'column', 'level', 'column', 'message', 'hint'], (function(_this) {
      return function(attr) {
        return _this[attr] === problem[attr];
      };
    })(this));
  };

  Problem.prototype.destroy = function() {
    this.removeMarkerRanges();
    if (this.userCodeProblem) {
      return this.userCodeProblem.off();
    }
  };

  Problem.prototype.buildAnnotationFromWebDevError = function(error) {
    return {
      row: error.line,
      column: error.column,
      raw: error.message,
      text: error.message,
      type: 'error',
      createdBy: 'web-dev-iframe'
    };
  };

  Problem.prototype.buildAnnotationFromAetherProblem = function(aetherProblem) {
    var ref, start, text;
    if (!aetherProblem.range) {
      return;
    }
    text = aetherProblem.message.replace(/^Line \d+: /, '');
    start = aetherProblem.range[0];
    return {
      row: start.row,
      column: start.col,
      raw: text,
      text: text,
      type: (ref = this.aetherProblem.level) != null ? ref : 'error',
      createdBy: 'aether'
    };
  };

  Problem.prototype.buildMarkerRangesFromWebDevError = function(error) {
    var lineMarkerRange, textMarkerRange;
    lineMarkerRange = new Range(error.line, 0, error.line, 1);
    lineMarkerRange.start = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.start);
    lineMarkerRange.end = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.end);
    lineMarkerRange.id = this.ace.getSession().addMarker(lineMarkerRange, 'problem-line', 'fullLine');
    textMarkerRange = void 0;
    return {
      lineMarkerRange: lineMarkerRange,
      textMarkerRange: textMarkerRange
    };
  };

  Problem.prototype.buildMarkerRangesFromAetherProblem = function(aetherProblem) {
    var end, lineClazz, lineMarkerRange, ref, start, textClazz, textMarkerRange;
    if (!aetherProblem.range) {
      return {};
    }
    ref = aetherProblem.range, start = ref[0], end = ref[1];
    textClazz = "problem-marker-" + aetherProblem.level;
    textMarkerRange = new Range(start.row, start.col, end.row, end.col);
    textMarkerRange.start = this.ace.getSession().getDocument().createAnchor(textMarkerRange.start);
    textMarkerRange.end = this.ace.getSession().getDocument().createAnchor(textMarkerRange.end);
    textMarkerRange.id = this.ace.getSession().addMarker(textMarkerRange, textClazz, 'text');
    lineClazz = "problem-line";
    lineMarkerRange = new Range(start.row, start.col, end.row, end.col);
    lineMarkerRange.start = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.start);
    lineMarkerRange.end = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.end);
    lineMarkerRange.id = this.ace.getSession().addMarker(lineMarkerRange, lineClazz, 'fullLine');
    return {
      lineMarkerRange: lineMarkerRange,
      textMarkerRange: textMarkerRange
    };
  };

  Problem.prototype.removeMarkerRanges = function() {
    if (this.textMarkerRange) {
      this.ace.getSession().removeMarker(this.textMarkerRange.id);
      this.textMarkerRange.start.detach();
      this.textMarkerRange.end.detach();
    }
    if (this.lineMarkerRange) {
      this.ace.getSession().removeMarker(this.lineMarkerRange.id);
      this.lineMarkerRange.start.detach();
      return this.lineMarkerRange.end.detach();
    }
  };

  return Problem;

})();
});

;require.register("views/play/level/tome/ProblemAlertView", function(exports, require, module) {
var CocoView, GameMenuModal, ProblemAlertView, me, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

GameMenuModal = require('views/play/menu/GameMenuModal');

template = require('templates/play/level/tome/problem_alert');

me = require('core/auth').me;

module.exports = ProblemAlertView = (function(superClass) {
  extend(ProblemAlertView, superClass);

  ProblemAlertView.prototype.id = 'problem-alert-view';

  ProblemAlertView.prototype.className = 'problem-alert';

  ProblemAlertView.prototype.template = template;

  ProblemAlertView.prototype.subscriptions = {
    'tome:show-problem-alert': 'onShowProblemAlert',
    'tome:hide-problem-alert': 'onHideProblemAlert',
    'level:restart': 'onHideProblemAlert',
    'tome:jiggle-problem-alert': 'onJiggleProblemAlert',
    'tome:manual-cast': 'onHideProblemAlert'
  };

  ProblemAlertView.prototype.events = {
    'click .close': 'onRemoveClicked',
    'click': function() {
      return Backbone.Mediator.publish('tome:focus-editor', {});
    }
  };

  function ProblemAlertView(options) {
    this.onWindowResize = bind(this.onWindowResize, this);
    this.supermodel = options.supermodel;
    ProblemAlertView.__super__.constructor.call(this, options);
    this.level = options.level;
    this.session = options.session;
    if (options.problem != null) {
      this.problem = options.problem;
      this.onWindowResize();
    } else {
      this.$el.hide();
    }
    $(window).on('resize', this.onWindowResize);
  }

  ProblemAlertView.prototype.destroy = function() {
    $(window).off('resize', this.onWindowResize);
    return ProblemAlertView.__super__.destroy.call(this);
  };

  ProblemAlertView.prototype.afterRender = function() {
    ProblemAlertView.__super__.afterRender.call(this);
    if (this.problem != null) {
      this.$el.addClass('alert').addClass("alert-" + this.problem.level).hide().fadeIn('slow');
      if (!this.problem.hint) {
        this.$el.addClass('no-hint');
      }
      return this.playSound('error_appear');
    }
  };

  ProblemAlertView.prototype.setProblemMessage = function() {
    var age, format, message, ref;
    if (this.problem != null) {
      format = function(s) {
        if (s != null) {
          return marked(s.replace(/</g, '&lt;').replace(/>/g, '&gt;'));
        }
      };
      message = this.problem.message;
      if ((this.problem.hint != null) && /(?:null|undefined)/.test(this.problem.hint)) {
        age = (ref = this.problem.userInfo) != null ? ref.age : void 0;
        if (age != null) {
          if (/^Line \d+:/.test(message)) {
            message = message.replace(/^(Line \d+)/, "$1, time " + (age.toFixed(1)));
          } else {
            message = "Time " + (age.toFixed(1)) + ": " + message;
          }
        }
      }
      this.message = format(message);
      return this.hint = format(this.problem.hint);
    }
  };

  ProblemAlertView.prototype.onShowProblemAlert = function(data) {
    var ref, ref1;
    if (!$('#code-area').is(":visible")) {
      return;
    }
    if (this.problem != null) {
      if (this.$el.hasClass("alert-" + this.problem.level)) {
        this.$el.removeClass("alert-" + this.problem.level);
      }
      if (this.$el.hasClass("no-hint")) {
        this.$el.removeClass("no-hint");
      }
    }
    this.problem = data.problem;
    this.lineOffsetPx = data.lineOffsetPx || 0;
    this.$el.show();
    this.onWindowResize();
    this.setProblemMessage();
    this.render();
    this.onJiggleProblemAlert();
    return (ref = application.tracker) != null ? ref.trackEvent('Show problem alert', {
      levelID: this.level.get('slug'),
      ls: (ref1 = this.session) != null ? ref1.get('_id') : void 0
    }) : void 0;
  };

  ProblemAlertView.prototype.onJiggleProblemAlert = function() {
    var pauseJiggle;
    if (this.problem == null) {
      return;
    }
    if (!this.$el.is(":visible")) {
      this.$el.show();
    }
    this.$el.addClass('jiggling');
    this.playSound('error_appear');
    pauseJiggle = (function(_this) {
      return function() {
        var ref;
        return (ref = _this.$el) != null ? ref.removeClass('jiggling') : void 0;
      };
    })(this);
    return _.delay(pauseJiggle, 1000);
  };

  ProblemAlertView.prototype.onHideProblemAlert = function() {
    if (!this.$el.is(':visible')) {
      return;
    }
    return this.onRemoveClicked();
  };

  ProblemAlertView.prototype.onRemoveClicked = function() {
    this.playSound('menu-button-click');
    this.$el.hide();
    return Backbone.Mediator.publish('tome:focus-editor', {});
  };

  ProblemAlertView.prototype.onWindowResize = function(e) {
    var codeAreaWidth, goalsViewWidth, levelContentWidth;
    if (this.problem != null) {
      levelContentWidth = $('.level-content').outerWidth(true);
      goalsViewWidth = $('#goals-view').outerWidth(true);
      codeAreaWidth = $('#code-area').outerWidth(true);
      this.$el.css('max-width', levelContentWidth - codeAreaWidth - goalsViewWidth + 40 + 'px');
      this.$el.css('right', codeAreaWidth + 'px');
      return this.$el.css('top', (110 + this.lineOffsetPx) + 'px');
    }
  };

  return ProblemAlertView;

})(CocoView);
});

;require.register("views/play/level/tome/Spell", function(exports, require, module) {
var Spell, SpellTopBarView, SpellView, createAetherOptions, me, utils,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

SpellView = require('./SpellView');

SpellTopBarView = require('./SpellTopBarView');

me = require('core/auth').me;

createAetherOptions = require('lib/aether_utils').createAetherOptions;

utils = require('core/utils');

module.exports = Spell = (function() {
  Spell.prototype.loaded = false;

  Spell.prototype.view = null;

  Spell.prototype.topBarView = null;

  function Spell(options) {
    this.spellKey = options.spellKey;
    this.pathComponents = options.pathComponents;
    this.session = options.session;
    this.otherSession = options.otherSession;
    this.spectateView = options.spectateView;
    this.spectateOpponentCodeLanguage = options.spectateOpponentCodeLanguage;
    this.observing = options.observing;
    this.supermodel = options.supermodel;
    this.skipProtectAPI = options.skipProtectAPI;
    this.worker = options.worker;
    this.level = options.level;
    this.createFromProgrammableMethod(options.programmableMethod, options.language);
    if (this.canRead()) {
      this.view = new SpellView({
        spell: this,
        level: options.level,
        session: this.session,
        otherSession: this.otherSession,
        worker: this.worker,
        god: options.god,
        supermodel: this.supermodel,
        levelID: options.levelID
      });
      this.view.render();
      this.topBarView = new SpellTopBarView({
        hintsState: options.hintsState,
        spell: this,
        supermodel: this.supermodel,
        codeLanguage: this.language,
        level: options.level,
        session: options.session,
        courseID: options.courseID
      });
      this.topBarView.render();
    }
    Backbone.Mediator.publish('tome:spell-created', {
      spell: this
    });
  }

  Spell.prototype.createFromProgrammableMethod = function(programmableMethod, codeLanguage) {
    var base, p, ref, ref1, ref2, ref3, ref4, ref5, sessionSource;
    p = programmableMethod;
    this.commentI18N = p.i18n;
    this.commentContext = p.context;
    this.languages = (ref = p.languages) != null ? ref : {};
    if ((base = this.languages).javascript == null) {
      base.javascript = p.source;
    }
    this.name = p.name;
    this.permissions = {
      read: (ref1 = (ref2 = p.permissions) != null ? ref2.read : void 0) != null ? ref1 : [],
      readwrite: (ref3 = (ref4 = p.permissions) != null ? ref4.readwrite : void 0) != null ? ref3 : ['humans']
    };
    this.team = (ref5 = this.permissions.readwrite[0]) != null ? ref5 : 'common';
    if (this.canWrite()) {
      this.setLanguage(codeLanguage);
    } else if (this.otherSession && this.team === this.otherSession.get('team')) {
      this.setLanguage(this.otherSession.get('submittedCodeLanguage') || this.otherSession.get('codeLanguage'));
    } else {
      this.setLanguage('javascript');
    }
    this.source = this.originalSource;
    this.parameters = p.parameters;
    if (this.permissions.readwrite.length && (sessionSource = this.session.getSourceFor(this.spellKey))) {
      if (sessionSource !== '// Should fill in some default source\n') {
        this.source = sessionSource;
      }
    }
    if (p.aiSource && !this.otherSession && !this.canWrite()) {
      this.source = this.originalSource = p.aiSource;
      return this.isAISource = true;
    }
  };

  Spell.prototype.destroy = function() {
    var ref, ref1;
    if ((ref = this.view) != null) {
      ref.destroy();
    }
    if ((ref1 = this.topBarView) != null) {
      ref1.destroy();
    }
    this.thang = null;
    return this.worker = null;
  };

  Spell.prototype.setLanguage = function(language) {
    var context, e, error, fallingBack, playerCode, ref, ref1, spokenLanguage, spokenLanguageContext;
    this.language = language;
    if (this.level.isType('web-dev')) {
      this.language = 'html';
    }
    this.displayCodeLanguage = utils.capitalLanguages[this.language];
    this.originalSource = (ref = this.languages[this.language]) != null ? ref : this.languages.javascript;
    if (window.serverConfig.picoCTF) {
      this.originalSource = this.addPicoCTFProblem();
    }
    if (this.level.isType('web-dev')) {
      playerCode = utils.extractPlayerCodeTag(this.originalSource);
      this.wrapperCode = this.originalSource.replace(/<playercode>[\s\S]*<\/playercode>/, '☃');
      this.originalSource = playerCode;
    }
    if (!this.commentContext) {
      return;
    }
    context = $.extend(true, {}, this.commentContext);
    if (this.commentI18N) {
      spokenLanguage = me.get('preferredLanguage');
      while (spokenLanguage) {
        if (typeof fallingBack !== "undefined" && fallingBack !== null) {
          spokenLanguage = spokenLanguage.substr(0, spokenLanguage.lastIndexOf('-'));
        }
        if (spokenLanguageContext = (ref1 = this.commentI18N[spokenLanguage]) != null ? ref1.context : void 0) {
          context = _.merge(context, spokenLanguageContext);
          break;
        }
        fallingBack = true;
      }
    }
    try {
      this.originalSource = _.template(this.originalSource, context);
      this.wrapperCode = _.template(this.wrapperCode, context);
    } catch (error) {
      e = error;
      console.error("Couldn't create example code template of", this.originalSource, "\nwith context", context, "\nError:", e);
    }
    if (/loop/.test(this.originalSource) && this.level.isType('course', 'course-ladder')) {
      return this.originalSource = (function() {
        switch (this.language) {
          case 'python':
            return this.originalSource.replace(/loop:/, 'while True:');
          case 'javascript':
            return this.originalSource.replace(/loop {/, 'while (true) {');
          case 'lua':
            return this.originalSource.replace(/loop\n/, 'while true then\n');
          case 'coffeescript':
            return this.originalSource;
          default:
            return this.originalSource;
        }
      }).call(this);
    }
  };

  Spell.prototype.constructHTML = function(source) {
    return this.wrapperCode.replace('☃', source);
  };

  Spell.prototype.addPicoCTFProblem = function() {
    var description, line, problem;
    if (!(problem = this.level.picoCTFProblem)) {
      return this.originalSource;
    }
    description = ("-- " + problem.name + " --\n" + problem.description).replace(/<p>(.*?)<\/p>/gi, '$1');
    return ((function() {
      var i, len, ref, results;
      ref = description.split('\n');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push("// " + line);
      }
      return results;
    })()).join('\n') + '\n' + this.originalSource;
  };

  Spell.prototype.addThang = function(thang) {
    var ref;
    if (((ref = this.thang) != null ? ref.thang.id : void 0) === thang.id) {
      return this.thang.thang = thang;
    } else {
      return this.thang = {
        thang: thang,
        aether: this.createAether(thang),
        castAether: null
      };
    }
  };

  Spell.prototype.removeThangID = function(thangID) {
    var ref;
    if (((ref = this.thang) != null ? ref.thang.id : void 0) === thangID) {
      return this.thang = null;
    }
  };

  Spell.prototype.canRead = function(team) {
    var ref, ref1;
    return (ref = team != null ? team : me.team, indexOf.call(this.permissions.read, ref) >= 0) || (ref1 = team != null ? team : me.team, indexOf.call(this.permissions.readwrite, ref1) >= 0);
  };

  Spell.prototype.canWrite = function(team) {
    var ref;
    return ref = team != null ? team : me.team, indexOf.call(this.permissions.readwrite, ref) >= 0;
  };

  Spell.prototype.getSource = function() {
    var ref, ref1;
    return (ref = (ref1 = this.view) != null ? ref1.getSource() : void 0) != null ? ref : this.source;
  };

  Spell.prototype.transpile = function(source) {
    var ref;
    if (source) {
      this.source = source;
    } else {
      source = this.getSource();
    }
    if (this.language !== 'html') {
      if ((ref = this.thang) != null) {
        ref.aether.transpile(source);
      }
    }
    return null;
  };

  Spell.prototype.hasChanged = function(newSource, currentSource) {
    if (newSource == null) {
      newSource = null;
    }
    if (currentSource == null) {
      currentSource = null;
    }
    return (newSource != null ? newSource : this.originalSource) !== (currentSource != null ? currentSource : this.source);
  };

  Spell.prototype.hasChangedSignificantly = function(newSource, currentSource, cb) {
    var aether, ref, workerMessage;
    if (newSource == null) {
      newSource = null;
    }
    if (currentSource == null) {
      currentSource = null;
    }
    if (!(aether = (ref = this.thang) != null ? ref.aether : void 0)) {
      console.error(this.toString(), 'couldn\'t find a spellThang with aether', this.thang);
      cb(false);
    }
    if (this.worker) {
      workerMessage = {
        "function": 'hasChangedSignificantly',
        a: newSource != null ? newSource : this.originalSource,
        spellKey: this.spellKey,
        b: currentSource != null ? currentSource : this.source,
        careAboutLineNumbers: true,
        careAboutLint: true
      };
      this.worker.addEventListener('message', (function(_this) {
        return function(e) {
          var workerData;
          workerData = JSON.parse(e.data);
          if (workerData["function"] === 'hasChangedSignificantly' && workerData.spellKey === _this.spellKey) {
            _this.worker.removeEventListener('message', arguments.callee, false);
            return cb(workerData.hasChanged);
          }
        };
      })(this));
      return this.worker.postMessage(JSON.stringify(workerMessage));
    } else {
      return cb(aether.hasChangedSignificantly(newSource != null ? newSource : this.originalSource, currentSource != null ? currentSource : this.source, true, true));
    }
  };

  Spell.prototype.createAether = function(thang) {
    var aether, aetherOptions, includeFlow, problemContext, skipProtectAPI, workerMessage, writable;
    writable = this.permissions.readwrite.length > 0 && !this.isAISource;
    skipProtectAPI = this.skipProtectAPI || !writable || this.level.isType('game-dev');
    problemContext = this.createProblemContext(thang);
    includeFlow = this.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev') && !skipProtectAPI;
    aetherOptions = createAetherOptions({
      functionName: this.name,
      codeLanguage: this.language,
      functionParameters: this.parameters,
      skipProtectAPI: skipProtectAPI,
      includeFlow: includeFlow,
      problemContext: problemContext,
      useInterpreter: true
    });
    aether = new Aether(aetherOptions);
    if (this.worker) {
      workerMessage = {
        "function": 'createAether',
        spellKey: this.spellKey,
        options: aetherOptions
      };
      this.worker.postMessage(JSON.stringify(workerMessage));
    }
    return aether;
  };

  Spell.prototype.updateLanguageAether = function(language) {
    var ref, ref1, ref2, workerMessage;
    this.language = language;
    if ((ref = this.thang) != null) {
      if ((ref1 = ref.aether) != null) {
        ref1.setLanguage(this.language);
      }
    }
    if ((ref2 = this.thang) != null) {
      ref2.castAether = null;
    }
    Backbone.Mediator.publish('tome:spell-changed-language', {
      spell: this,
      language: this.language
    });
    if (this.worker) {
      workerMessage = {
        "function": 'updateLanguageAether',
        newLanguage: this.language
      };
      this.worker.postMessage(JSON.stringify(workerMessage));
    }
    return this.transpile();
  };

  Spell.prototype.toString = function() {
    return "<Spell: " + this.spellKey + ">";
  };

  Spell.prototype.createProblemContext = function(thang) {
    var i, key, len, prop, ref, ref1, ref2, ref3, value;
    if (this.problemContext != null) {
      return this.problemContext;
    }
    this.problemContext = {
      stringReferences: [],
      thisMethods: [],
      thisProperties: []
    };
    this.problemContext.commonThisMethods = ['moveRight', 'moveLeft', 'moveUp', 'moveDown', 'attack', 'findNearestEnemy', 'buildXY', 'moveXY', 'say', 'move', 'distance', 'findEnemies', 'findFriends', 'addFlag', 'findFlag', 'removeFlag', 'findFlags', 'attackRange', 'cast', 'buildTypes', 'jump', 'jumpTo', 'attackXY'];
    if (thang == null) {
      return this.problemContext;
    }
    ref1 = (ref = thang.world) != null ? ref.thangMap : void 0;
    for (key in ref1) {
      value = ref1[key];
      if ((value.isAttackable || value.isSelectable) && (ref2 = value.id, indexOf.call(this.problemContext.stringReferences, ref2) < 0)) {
        this.problemContext.stringReferences.push(value.id);
      }
    }
    if (thang.programmableProperties != null) {
      ref3 = thang.programmableProperties;
      for (i = 0, len = ref3.length; i < len; i++) {
        prop = ref3[i];
        if (_.isFunction(thang[prop])) {
          this.problemContext.thisMethods.push(prop);
        } else {
          this.problemContext.thisProperties.push(prop);
        }
      }
    }
    return this.problemContext;
  };

  Spell.prototype.reloadCode = function() {
    var programmableMethod, ref, ref1, ref2;
    if (!(programmableMethod = (ref = this.thang) != null ? (ref1 = ref.thang) != null ? (ref2 = ref1.programmableMethods) != null ? ref2[this.name] : void 0 : void 0 : void 0)) {
      return;
    }
    return this.createFromProgrammableMethod(programmableMethod, this.language);
  };

  return Spell;

})();
});

;require.register("views/play/level/tome/SpellDebugView", function(exports, require, module) {
var CocoView, Range, SpellDebugView, TokenIterator, ace, serializedClasses, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/spell_debug');

ace = require('ace');

Range = ace.require('ace/range').Range;

TokenIterator = ace.require('ace/token_iterator').TokenIterator;

serializedClasses = {
  Thang: require('lib/world/thang'),
  Vector: require('lib/world/vector'),
  Rectangle: require('lib/world/rectangle'),
  Ellipse: require('lib/world/ellipse'),
  LineSegment: require('lib/world/line_segment')
};

module.exports = SpellDebugView = (function(superClass) {
  extend(SpellDebugView, superClass);

  SpellDebugView.prototype.className = 'spell-debug-view';

  SpellDebugView.prototype.template = template;

  SpellDebugView.prototype.subscriptions = {
    'god:new-world-created': 'onNewWorld',
    'god:debug-value-return': 'handleDebugValue',
    'god:debug-world-load-progress-changed': 'handleWorldLoadProgressChanged',
    'tome:cast-spells': 'onTomeCast',
    'surface:frame-changed': 'onFrameChanged',
    'tome:spell-has-changed-significantly-calculation': 'onSpellChangedCalculation'
  };

  SpellDebugView.prototype.events = {};

  function SpellDebugView(options) {
    this.notifyPropertyHovered = bind(this.notifyPropertyHovered, this);
    this.updateTooltipProgress = bind(this.updateTooltipProgress, this);
    this.onMouseMove = bind(this.onMouseMove, this);
    this.setTooltipProgress = bind(this.setTooltipProgress, this);
    this.setTooltipText = bind(this.setTooltipText, this);
    this.setTooltipKeyAndValue = bind(this.setTooltipKeyAndValue, this);
    this.calculateCurrentTimeString = bind(this.calculateCurrentTimeString, this);
    var className, serializedClass;
    SpellDebugView.__super__.constructor.call(this, options);
    this.ace = options.ace;
    this.thang = options.thang;
    this.spell = options.spell;
    this.progress = 0;
    this.variableStates = {};
    this.globals = {
      Math: Math,
      _: _,
      String: String,
      Number: Number,
      Array: Array,
      Object: Object
    };
    for (className in serializedClasses) {
      serializedClass = serializedClasses[className];
      this.globals[className] = serializedClass;
    }
    this.onMouseMove = _.throttle(this.onMouseMove, 25);
    this.cache = {};
    this.lastFrameRequested = -1;
    this.workerIsSimulating = false;
    this.spellHasChanged = false;
    this.currentFrame = 0;
    this.frameRate = 10;
    this.debouncedTooltipUpdate = _.debounce(this.updateTooltipProgress, 100);
  }

  SpellDebugView.prototype.pad2 = function(num) {
    if ((num == null) || num === 0) {
      return '00';
    } else {
      return (num < 10 ? '0' : '') + num;
    }
  };

  SpellDebugView.prototype.calculateCurrentTimeString = function() {
    var mins, secs, time;
    time = this.currentFrame / this.frameRate;
    mins = Math.floor(time / 60);
    secs = (time - mins * 60).toFixed(1);
    return mins + ":" + (this.pad2(secs));
  };

  SpellDebugView.prototype.setTooltipKeyAndValue = function(key, value) {
    var message;
    this.hideProgressBarAndShowText();
    message = "Time: " + (this.calculateCurrentTimeString()) + "\n" + key + ": " + value;
    this.$el.find('code').text(message);
    return this.$el.show().css(this.pos);
  };

  SpellDebugView.prototype.setTooltipText = function(text) {
    this.hideProgressBarAndShowText();
    this.$el.find('code').text(text);
    return this.$el.show().css(this.pos);
  };

  SpellDebugView.prototype.setTooltipProgress = function(progress) {
    this.showProgressBarAndHideText();
    this.$el.find('.progress-bar').css('width', progress + '%').attr('aria-valuenow', progress);
    return this.$el.show().css(this.pos);
  };

  SpellDebugView.prototype.showProgressBarAndHideText = function() {
    this.$el.find('pre').css('display', 'none');
    return this.$el.find('.progress').css('display', 'block');
  };

  SpellDebugView.prototype.hideProgressBarAndShowText = function() {
    this.$el.find('pre').css('display', 'block');
    return this.$el.find('.progress').css('display', 'none');
  };

  SpellDebugView.prototype.onTomeCast = function() {
    return this.invalidateCache();
  };

  SpellDebugView.prototype.invalidateCache = function() {
    return this.cache = {};
  };

  SpellDebugView.prototype.retrieveValueFromCache = function(thangID, spellID, variableChain, frame) {
    var joinedVariableChain, ref, ref1, ref2, value;
    joinedVariableChain = variableChain.join();
    value = (ref = this.cache[frame]) != null ? (ref1 = ref[thangID]) != null ? (ref2 = ref1[spellID]) != null ? ref2[joinedVariableChain] : void 0 : void 0 : void 0;
    return value != null ? value : void 0;
  };

  SpellDebugView.prototype.updateCache = function(thangID, spellID, variableChain, frame, value) {
    var currentObject, j, key, keyIndex, keys, ref;
    currentObject = this.cache;
    keys = [frame, thangID, spellID, variableChain.join()];
    for (keyIndex = j = 0, ref = keys.length - 1; 0 <= ref ? j < ref : j > ref; keyIndex = 0 <= ref ? ++j : --j) {
      key = keys[keyIndex];
      if (!(key in currentObject)) {
        currentObject[key] = {};
      }
      currentObject = currentObject[key];
    }
    return currentObject[keys[keys.length - 1]] = value;
  };

  SpellDebugView.prototype.handleDebugValue = function(e) {
    var key, value;
    key = e.key, value = e.value;
    this.workerIsSimulating = false;
    this.updateCache(this.thang.id, this.spell.name, key.split('.'), this.lastFrameRequested, value);
    if (this.variableChain && !key === this.variableChain.join('.')) {
      return;
    }
    return this.setTooltipKeyAndValue(key, value);
  };

  SpellDebugView.prototype.handleWorldLoadProgressChanged = function(e) {
    return this.progress = e.progress;
  };

  SpellDebugView.prototype.afterRender = function() {
    SpellDebugView.__super__.afterRender.call(this);
    return this.ace.on('mousemove', this.onMouseMove);
  };

  SpellDebugView.prototype.setVariableStates = function(variableStates) {
    this.variableStates = variableStates;
    return this.update();
  };

  SpellDebugView.prototype.isIdentifier = function(t) {
    return t && (t.type === 'identifier' || t.value === 'this' || this.globals[t.value]);
  };

  SpellDebugView.prototype.onMouseMove = function(e) {
    var chain, end, endOfLine, it, offsetX, offsetY, pos, prev, ref, ref1, ref2, ref3, ref4, start, token, w;
    if (this.destroyed) {
      return;
    }
    pos = e.getDocumentPosition();
    it = new TokenIterator(e.editor.session, pos.row, pos.column);
    endOfLine = ((ref = it.getCurrentToken()) != null ? ref.index : void 0) === it.$rowTokens.length - 1;
    while (it.getCurrentTokenRow() === pos.row && !this.isIdentifier(token = it.getCurrentToken())) {
      if (endOfLine || !token) {
        break;
      }
      it.stepBackward();
    }
    if (this.isIdentifier(token)) {
      start = it.getCurrentTokenColumn();
      ref1 = [[token.value], start, start + token.value.length], chain = ref1[0], start = ref1[1], end = ref1[2];
      while (it.getCurrentTokenRow() === pos.row) {
        it.stepBackward();
        if (((ref2 = it.getCurrentToken()) != null ? ref2.value : void 0) !== '.') {
          break;
        }
        it.stepBackward();
        token = null;
        if (!this.isIdentifier(prev = it.getCurrentToken())) {
          break;
        }
        token = prev;
        start = it.getCurrentTokenColumn();
        chain.unshift(token.value);
      }
    }
    if (token && (true || token.value in this.variableStates || token.value === 'this' || this.globals[token.value])) {
      this.variableChain = chain;
      offsetX = (ref3 = e.domEvent.offsetX) != null ? ref3 : e.clientX - $(e.domEvent.target).offset().left;
      offsetY = (ref4 = e.domEvent.offsetY) != null ? ref4 : e.clientY - $(e.domEvent.target).offset().top;
      w = $(document).width();
      if (e.clientX + 300 > w) {
        offsetX = w - $(e.domEvent.target).offset().left - 300;
      }
      this.pos = {
        left: offsetX + 50,
        top: offsetY + 20
      };
      this.markerRange = new Range(pos.row, start, pos.row, end);
    } else {
      this.variableChain = this.markerRange = null;
    }
    return this.update();
  };

  SpellDebugView.prototype.onMouseOut = function(e) {
    this.variableChain = this.markerRange = null;
    return this.update();
  };

  SpellDebugView.prototype.updateTooltipProgress = function() {
    if (this.variableChain && this.progress < 1) {
      this.setTooltipProgress(this.progress * 100);
      return _.delay(this.updateTooltipProgress, 100);
    }
  };

  SpellDebugView.prototype.onNewWorld = function(e) {
    if (this.thang) {
      this.thang = this.options.thang = e.world.thangMap[this.thang.id];
    }
    return this.frameRate = e.world.frameRate;
  };

  SpellDebugView.prototype.onFrameChanged = function(data) {
    this.currentFrame = Math.round(data.frame);
    return this.frameRate = data.world.frameRate;
  };

  SpellDebugView.prototype.onSpellChangedCalculation = function(data) {
    return this.spellHasChanged = data.hasChangedSignificantly;
  };

  SpellDebugView.prototype.update = function() {
    var cacheValue, ref;
    if (this.variableChain) {
      if (this.spellHasChanged) {
        this.setTooltipText('You\'ve changed this spell! \nPlease recast to use the hover debugger.');
      } else if (this.variableChain.length === 2 && this.variableChain[0] === 'this') {
        this.setTooltipKeyAndValue(this.variableChain.join('.'), this.stringifyValue(this.thang[this.variableChain[1]], 0));
      } else if (this.variableChain.length === 1 && Aether.globals[this.variableChain[0]]) {
        this.setTooltipKeyAndValue(this.variableChain.join('.'), this.stringifyValue(Aether.globals[this.variableChain[0]], 0));
      } else if (this.workerIsSimulating && this.progress < 1) {
        this.debouncedTooltipUpdate();
      } else if (this.currentFrame === this.lastFrameRequested && (cacheValue = this.retrieveValueFromCache(this.thang.id, this.spell.name, this.variableChain, this.currentFrame))) {
        this.setTooltipKeyAndValue(this.variableChain.join('.'), cacheValue);
      } else {
        Backbone.Mediator.publish('tome:spell-debug-value-request', {
          thangID: this.thang.id,
          spellID: this.spell.name,
          variableChain: this.variableChain,
          frame: this.currentFrame
        });
        if (this.currentFrame !== this.lastFrameRequested) {
          this.workerIsSimulating = true;
        }
        this.lastFrameRequested = this.currentFrame;
        this.progress = 0;
        this.debouncedTooltipUpdate();
      }
    } else {
      this.$el.hide();
    }
    if (((ref = this.variableChain) != null ? ref.length : void 0) === 2) {
      if (this.hoveredPropertyTimeout) {
        clearTimeout(this.hoveredPropertyTimeout);
      }
      this.hoveredPropertyTimeout = _.delay(this.notifyPropertyHovered, 500);
    } else {
      this.notifyPropertyHovered();
    }
    return this.updateMarker();
  };

  SpellDebugView.prototype.stringifyValue = function(value, depth) {
    var brackets, i, isArray, isObject, j, k, key, len, len1, prefix, ref, ref1, ref2, ref3, s, sep, size, v, values;
    if (!value || _.isString(value)) {
      return value;
    }
    if (_.isFunction(value)) {
      if (depth === 2) {
        return void 0;
      } else {
        return '<Function>';
      }
    }
    if (value === this.thang && depth) {
      return "<this " + value.id + ">";
    }
    if (depth === 2) {
      if (((ref = value.constructor) != null ? ref.className : void 0) === 'Thang') {
        value = "<" + (value.type || value.spriteName) + " - " + value.id + ", " + (value.pos ? value.pos.toString() : 'non-physical') + ">";
      } else {
        value = value.toString();
      }
      return value;
    }
    isArray = _.isArray(value);
    isObject = _.isObject(value);
    if (!(isArray || isObject)) {
      return value.toString();
    }
    brackets = isArray ? ['[', ']'] : ['{', '}'];
    size = _.size(value);
    if (!size) {
      return brackets.join('');
    }
    values = [];
    if (isArray) {
      for (j = 0, len = value.length; j < len; j++) {
        v = value[j];
        s = this.stringifyValue(v, depth + 1);
        if (s !== void 0) {
          values.push('' + s);
        }
      }
    } else {
      ref2 = (ref1 = value.apiProperties) != null ? ref1 : _.keys(value);
      for (k = 0, len1 = ref2.length; k < len1; k++) {
        key = ref2[k];
        s = this.stringifyValue(value[key], depth + 1);
        if (s !== void 0) {
          values.push(key + ': ' + s);
        }
      }
    }
    sep = '\n' + ((function() {
      var l, ref3, results;
      results = [];
      for (i = l = 0, ref3 = depth; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
        results.push('  ');
      }
      return results;
    })()).join('');
    prefix = (ref3 = value.constructor) != null ? ref3.className : void 0;
    if (isArray) {
      if (prefix == null) {
        prefix = 'Array';
      }
    }
    if (isObject) {
      if (prefix == null) {
        prefix = 'Object';
      }
    }
    prefix = prefix ? prefix + ' ' : '';
    return "" + prefix + brackets[0] + sep + "  " + (values.join(sep + '  ')) + sep + brackets[1];
  };

  SpellDebugView.prototype.notifyPropertyHovered = function() {
    var oldHoveredProperty, ref;
    if (this.hoveredPropertyTimeout) {
      clearTimeout(this.hoveredPropertyTimeout);
    }
    this.hoveredPropertyTimeout = null;
    oldHoveredProperty = this.hoveredProperty;
    this.hoveredProperty = ((ref = this.variableChain) != null ? ref.length : void 0) === 2 ? {
      owner: this.variableChain[0],
      property: this.variableChain[1]
    } : {};
    if (!_.isEqual(oldHoveredProperty, this.hoveredProperty)) {
      return Backbone.Mediator.publish('tome:spell-debug-property-hovered', this.hoveredProperty);
    }
  };

  SpellDebugView.prototype.updateMarker = function() {
    if (this.marker) {
      this.ace.getSession().removeMarker(this.marker);
      this.marker = null;
    }
    if (this.markerRange) {
      return this.marker = this.ace.getSession().addMarker(this.markerRange, 'ace_bracket', 'text');
    }
  };

  SpellDebugView.prototype.destroy = function() {
    var ref;
    if ((ref = this.ace) != null) {
      ref.removeEventListener('mousemove', this.onMouseMove);
    }
    return SpellDebugView.__super__.destroy.call(this);
  };

  return SpellDebugView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellPaletteEntryView", function(exports, require, module) {
var CocoView, DocFormatter, SpellPaletteEntryView, ace, filters, me, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/spell_palette_entry');

me = require('core/auth').me;

filters = require('lib/image_filter');

DocFormatter = require('./DocFormatter');

ace = require('ace');

utils = require('core/utils');

module.exports = SpellPaletteEntryView = (function(superClass) {
  extend(SpellPaletteEntryView, superClass);

  SpellPaletteEntryView.prototype.tagName = 'div';

  SpellPaletteEntryView.prototype.className = 'spell-palette-entry-view';

  SpellPaletteEntryView.prototype.template = template;

  SpellPaletteEntryView.prototype.popoverPinned = false;

  SpellPaletteEntryView.prototype.overridePopoverTemplate = '<div class="popover spell-palette-popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>';

  SpellPaletteEntryView.prototype.subscriptions = {
    'surface:frame-changed': 'onFrameChanged',
    'tome:palette-hovered': 'onPaletteHovered',
    'tome:palette-clicked': 'onPaletteClicked',
    'tome:palette-pin-toggled': 'onPalettePinToggled',
    'tome:spell-debug-property-hovered': 'onSpellDebugPropertyHovered'
  };

  SpellPaletteEntryView.prototype.events = {
    'mouseenter': 'onMouseEnter',
    'mouseleave': 'onMouseLeave',
    'click': 'onClick'
  };

  function SpellPaletteEntryView(options) {
    this.onClick = bind(this.onClick, this);
    this.onPaletteClicked = bind(this.onPaletteClicked, this);
    SpellPaletteEntryView.__super__.constructor.call(this, options);
    this.thang = options.thang;
    this.docFormatter = new DocFormatter(options);
    this.doc = this.docFormatter.doc;
    this.doc.initialHTML = this.docFormatter.formatPopover();
    this.aceEditors = [];
  }

  SpellPaletteEntryView.prototype.afterRender = function() {
    SpellPaletteEntryView.__super__.afterRender.call(this);
    return this.$el.addClass(_.string.slugify(this.doc.type));
  };

  SpellPaletteEntryView.prototype.resetPopoverContent = function() {};

  SpellPaletteEntryView.prototype.onMouseEnter = function(e) {
    if (this.popoverPinned || this.otherPopoverPinned) {

    }
  };

  SpellPaletteEntryView.prototype.onMouseLeave = function(e) {};

  SpellPaletteEntryView.prototype.togglePinned = function() {
    var x;
    if (this.popoverPinned) {
      this.popoverPinned = false;
      this.$el.add('.spell-palette-popover.popover').removeClass('pinned');
      $('.spell-palette-popover.popover .close').remove();
      this.$el.popover('hide');
      this.playSound('spell-palette-entry-unpin');
    } else {
      this.popoverPinned = true;
      this.resetPopoverContent();
      this.$el.add('.spell-palette-popover.popover').addClass('pinned');
      this.$el.popover('show');
      x = $('<button type="button" data-dismiss="modal" aria-hidden="true" class="close">×</button>');
      $('.spell-palette-popover.popover').append(x);
      x.on('click', this.onClick);
      this.playSound('spell-palette-entry-pin');
    }
    return Backbone.Mediator.publish('tome:palette-pin-toggled', {
      entry: this,
      pinned: this.popoverPinned
    });
  };

  SpellPaletteEntryView.prototype.onPaletteClicked = function(e) {
    return this.$el.toggleClass('selected', e.prop === this.doc.name);
  };

  SpellPaletteEntryView.prototype.onClick = function(e) {
    if (key.shift) {
      Backbone.Mediator.publish('tome:insert-snippet', {
        doc: this.options.doc,
        language: this.options.language,
        formatted: this.doc
      });
      return;
    }
    return Backbone.Mediator.publish('tome:palette-clicked', {
      thang: this.thang,
      prop: this.doc.name,
      entry: this
    });
  };

  SpellPaletteEntryView.prototype.onFrameChanged = function(e) {
    var ref;
    if (((ref = e.selectedThang) != null ? ref.id : void 0) !== this.thang.id) {
      return;
    }
    return this.options.thang = this.thang = this.docFormatter.options.thang = e.selectedThang;
  };

  SpellPaletteEntryView.prototype.onPaletteHovered = function(e) {
    if (e.entry === this) {
      return;
    }
    if (this.popoverPinned) {
      return this.togglePinned();
    }
  };

  SpellPaletteEntryView.prototype.onPalettePinToggled = function(e) {
    if (e.entry === this) {
      return;
    }
    return this.otherPopoverPinned = e.pinned;
  };

  SpellPaletteEntryView.prototype.onSpellDebugPropertyHovered = function(e) {
    var matched;
    matched = e.property === this.doc.name && e.owner === this.doc.owner;
    if (matched && !this.debugHovered) {
      this.debugHovered = true;
      if (!this.popoverPinned) {
        this.togglePinned();
      }
    } else if (this.debugHovered && !matched) {
      this.debugHovered = false;
      if (this.popoverPinned) {
        this.togglePinned();
      }
    }
    return null;
  };

  SpellPaletteEntryView.prototype.destroy = function() {
    var i, len, oldEditor, ref;
    if (this.popoverPinned) {
      $('.popover.pinned').remove();
    }
    if (this.popoverPinned) {
      this.togglePinned();
    }
    this.$el.popover('destroy');
    this.$el.off();
    ref = this.aceEditors;
    for (i = 0, len = ref.length; i < len; i++) {
      oldEditor = ref[i];
      oldEditor.destroy();
    }
    return SpellPaletteEntryView.__super__.destroy.call(this);
  };

  return SpellPaletteEntryView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellPaletteThangEntryView", function(exports, require, module) {
var CocoView, DocFormatter, SpellPaletteThangEntryView, filters, me, popoverTemplate, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/spell-palette-thang-entry');

popoverTemplate = require('templates/play/level/tome/spell_palette_entry_popover');

me = require('core/auth').me;

filters = require('lib/image_filter');

DocFormatter = require('./DocFormatter');

utils = require('core/utils');

module.exports = SpellPaletteThangEntryView = (function(superClass) {
  extend(SpellPaletteThangEntryView, superClass);

  SpellPaletteThangEntryView.prototype.tagName = 'div';

  SpellPaletteThangEntryView.prototype.className = 'spell-palette-thang-entry-view';

  SpellPaletteThangEntryView.prototype.template = template;

  SpellPaletteThangEntryView.prototype.subscriptions = {
    'surface:frame-changed': 'onFrameChanged',
    'tome:palette-hovered': 'onPaletteHovered',
    'tome:palette-clicked': 'onPaletteClicked',
    'tome:spell-debug-property-hovered': 'onSpellDebugPropertyHovered'
  };

  SpellPaletteThangEntryView.prototype.events = {
    'mouseenter': 'onMouseEnter',
    'mouseleave': 'onMouseLeave',
    'click': 'onClick'
  };

  function SpellPaletteThangEntryView(options) {
    this.onClick = bind(this.onClick, this);
    this.onPaletteClicked = bind(this.onPaletteClicked, this);
    var example, ref;
    SpellPaletteThangEntryView.__super__.constructor.call(this, options);
    this.thang = options.thang;
    if (options.doc.example != null) {
      example = (ref = options.doc.example) != null ? ref[options.language] : void 0;
    } else {
      example = "\# usage code \ngame.spawnXY(\"" + options.buildableName + "\", 21, 20)";
    }
    this.doc = {
      name: options.buildableName,
      initialHTML: popoverTemplate({
        _: _,
        marked: marked,
        doc: {
          shortName: options.doc.name,
          type: "spawnable",
          description: "![" + (this.thang.get('name')) + "](" + (this.thang.getPortraitURL()) + ") " + options.doc.description,
          example: example
        }
      }),
      example: example
    };
  }

  SpellPaletteThangEntryView.prototype.afterRender = function() {
    return SpellPaletteThangEntryView.__super__.afterRender.call(this);
  };

  SpellPaletteThangEntryView.prototype.resetPopoverContent = function() {};

  SpellPaletteThangEntryView.prototype.onMouseEnter = function(e) {
    if (this.popoverPinned || this.otherPopoverPinned) {

    }
  };

  SpellPaletteThangEntryView.prototype.onMouseLeave = function(e) {};

  SpellPaletteThangEntryView.prototype.onPaletteClicked = function(e) {
    return this.$el.toggleClass('selected', e.prop === this.doc.name);
  };

  SpellPaletteThangEntryView.prototype.onClick = function(e) {
    if (key.shift) {
      Backbone.Mediator.publish('tome:insert-snippet', {
        doc: this.options.doc,
        language: this.options.language,
        formatted: this.doc
      });
      return;
    }
    return Backbone.Mediator.publish('tome:palette-clicked', {
      thang: this.thang,
      prop: this.doc.name,
      entry: this
    });
  };

  SpellPaletteThangEntryView.prototype.onFrameChanged = function(e) {};

  SpellPaletteThangEntryView.prototype.onPaletteHovered = function(e) {
    if (e.entry === this) {

    }
  };

  SpellPaletteThangEntryView.prototype.onSpellDebugPropertyHovered = function(e) {
    var matched;
    matched = e.property === this.doc.name && e.owner === this.doc.owner;
    if (matched && !this.debugHovered) {
      this.debugHovered = true;
      if (!this.popoverPinned) {
        this.togglePinned();
      }
    } else if (this.debugHovered && !matched) {
      this.debugHovered = false;
      if (this.popoverPinned) {
        this.togglePinned();
      }
    }
    return null;
  };

  SpellPaletteThangEntryView.prototype.destroy = function() {
    var i, len, oldEditor, ref;
    this.$el.off();
    ref = this.aceEditors;
    for (i = 0, len = ref.length; i < len; i++) {
      oldEditor = ref[i];
      oldEditor.destroy();
    }
    return SpellPaletteThangEntryView.__super__.destroy.call(this);
  };

  return SpellPaletteThangEntryView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellPaletteView", function(exports, require, module) {
var CocoView, GameMenuModal, LevelComponent, LevelSetupManager, N_ROWS, SpellPaletteEntryView, SpellPaletteThangEntryView, SpellPaletteView, ThangType, ace, filters, me, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CocoView = require('views/core/CocoView');

me = require('core/auth').me;

filters = require('lib/image_filter');

SpellPaletteEntryView = require('./SpellPaletteEntryView');

SpellPaletteThangEntryView = require('./SpellPaletteThangEntryView');

LevelComponent = require('models/LevelComponent');

ThangType = require('models/ThangType');

GameMenuModal = require('views/play/menu/GameMenuModal');

LevelSetupManager = require('lib/LevelSetupManager');

ace = require('ace');

utils = require('core/utils');

N_ROWS = 4;

module.exports = SpellPaletteView = (function(superClass) {
  extend(SpellPaletteView, superClass);

  function SpellPaletteView() {
    this.hide = bind(this.hide, this);
    this.onResize = bind(this.onResize, this);
    return SpellPaletteView.__super__.constructor.apply(this, arguments);
  }

  SpellPaletteView.prototype.id = 'spell-palette-view';

  SpellPaletteView.prototype.template = require('templates/play/level/tome/spell-palette-view');

  SpellPaletteView.prototype.controlsEnabled = true;

  SpellPaletteView.prototype.subscriptions = {
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'surface:frame-changed': 'onFrameChanged',
    'tome:change-language': 'onTomeChangedLanguage',
    'tome:palette-clicked': 'onPalleteClick',
    'surface:stage-mouse-down': 'hide',
    'level:set-playing': 'hide'
  };

  SpellPaletteView.prototype.events = {
    'click #spell-palette-help-button': 'onClickHelp',
    'click .closeBtn': 'onClickClose',
    'click .section-header': 'onSectionHeaderClick'
  };

  SpellPaletteView.prototype.initialize = function(options) {
    var docs, ref, ref1, ref2;
    this.level = options.level, this.session = options.session, this.thang = options.thang, this.useHero = options.useHero;
    this.aceEditors = [];
    docs = (ref = this.options.level.get('documentation')) != null ? ref : {};
    this.showsHelp = ((ref1 = docs.specificArticles) != null ? ref1.length : void 0) || ((ref2 = docs.generalArticles) != null ? ref2.length : void 0);
    this.createPalette();
    $(window).on('resize', this.onResize);
    return console.log("My thang is", this.thang);
  };

  SpellPaletteView.prototype.getRenderData = function() {
    var c;
    c = SpellPaletteView.__super__.getRenderData.call(this);
    c.entryGroups = this.entryGroups;
    c.entryGroupSlugs = this.entryGroupSlugs;
    c.entryGroupNames = this.entryGroupNames;
    c.tabbed = _.size(this.entryGroups) > 1;
    c.defaultGroupSlug = this.defaultGroupSlug;
    c.showsHelp = this.showsHelp;
    c.tabs = this.tabs;
    c.thisName = {
      coffeescript: '@',
      lua: 'self',
      python: 'self',
      java: 'hero'
    }[this.options.language] || 'this';
    c._ = _;
    return c;
  };

  SpellPaletteView.prototype.afterRender = function() {
    var col, columnNumber, dn, doc, entries, entry, entryColumn, entryIndex, firstEntry, group, groupSlug, info, itemGroup, itemImage, itemsInGroup, j, k, l, len, len1, len2, ref, ref1, ref2, ref3, t, tab, tabSlug, thangName, tt, tts;
    SpellPaletteView.__super__.afterRender.call(this);
    if (this.entryGroupSlugs) {
      ref = this.entryGroups;
      for (group in ref) {
        entries = ref[group];
        groupSlug = this.entryGroupSlugs[group];
        for (columnNumber in entries) {
          entryColumn = entries[columnNumber];
          col = $('<div class="property-entry-column"></div>').appendTo(this.$el.find(".properties-" + groupSlug));
          for (j = 0, len = entryColumn.length; j < len; j++) {
            entry = entryColumn[j];
            col.append(entry.el);
            entry.render();
          }
        }
      }
      this.$('.nano').nanoScroller({
        alwaysVisible: true
      });
      this.updateCodeLanguage(this.options.language);
    } else {
      this.entryGroupElements = {};
      ref1 = this.entryGroups;
      for (group in ref1) {
        entries = ref1[group];
        this.entryGroupElements[group] = itemGroup = $('<div class="property-entry-item-group"></div>').appendTo(this.$el.find('.properties-this'));
        if ((ref2 = entries[0].options.item) != null ? ref2.getPortraitURL : void 0) {
          itemImage = $('<img class="item-image" draggable=false></img>').attr('src', entries[0].options.item.getPortraitURL());
          itemGroup.append(itemImage);
          firstEntry = entries[0];
          (function(firstEntry) {
            itemImage.on("mouseenter", function(e) {
              return firstEntry.onMouseEnter(e);
            });
            return itemImage.on("mouseleave", function(e) {
              return firstEntry.onMouseLeave(e);
            });
          })(firstEntry);
        }
        for (entryIndex = k = 0, len1 = entries.length; k < len1; entryIndex = ++k) {
          entry = entries[entryIndex];
          itemGroup.append(entry.el);
          entry.render();
          if (entries.length === 1) {
            entry.$el.addClass('single-entry');
          }
          if (entryIndex === 0) {
            entry.$el.addClass('first-entry');
          }
        }
      }
      ref3 = this.tabs || {};
      for (tab in ref3) {
        entries = ref3[tab];
        tabSlug = _.string.slugify(tab);
        itemsInGroup = 0;
        for (entryIndex = l = 0, len2 = entries.length; l < len2; entryIndex = ++l) {
          entry = entries[entryIndex];
          if (itemsInGroup === 0 || (itemsInGroup === 2 && entryIndex !== entries.length - 1)) {
            itemGroup = $('<div class="property-entry-item-group"></div>').appendTo(this.$el.find(".properties-" + tabSlug));
            itemsInGroup = 0;
          }
          ++itemsInGroup;
          itemGroup.append(entry.el);
          entry.render();
          if (itemsInGroup === 0) {
            entry.$el.addClass('first-entry');
          }
        }
      }
      this.$el.addClass('hero');
      this.$el.toggleClass('shortenize', Boolean(this.shortenize));
      this.$el.toggleClass('web-dev', this.options.level.isType('web-dev'));
    }
    tts = this.supermodel.getModels(ThangType);
    console.log(this.deferredDocs);
    for (dn in this.deferredDocs) {
      doc = this.deferredDocs[dn];
      if (doc.type === "spawnable") {
        thangName = doc.name;
        if (this.thang.spawnAliases[thangName]) {
          thangName = this.thang.spawnAliases[thangName][0];
        }
        info = this.thang.buildables[thangName];
        tt = _.find(tts, function(t) {
          return t.get('original') === (info != null ? info.thangType : void 0);
        });
        if (tt == null) {
          continue;
        }
        t = new SpellPaletteThangEntryView({
          doc: doc,
          thang: tt,
          buildable: info,
          buildableName: doc.name,
          shortenize: true,
          language: this.options.language,
          level: this.options.level,
          useHero: this.useHero
        });
        this.$el.find("#palette-tab-stuff-area").append(t.el);
        t.render();
      }
      if (doc.type === "event") {
        t = new SpellPaletteEntryView({
          doc: doc,
          thang: this.thang,
          shortenize: true,
          language: this.options.language,
          level: this.options.level,
          useHero: this.useHero
        });
        this.$el.find("#palette-tab-events").append(t.el);
        t.render();
      }
    }
    return this.$(".section-header:has(+.collapse:empty)").hide();
  };

  SpellPaletteView.prototype.afterInsert = function() {
    SpellPaletteView.__super__.afterInsert.call(this);
    return _.delay((function(_this) {
      return function() {
        var ref;
        if (!$('#spell-view').is('.shown')) {
          return (ref = _this.$el) != null ? ref.css('bottom', 0) : void 0;
        }
      };
    })(this));
  };

  SpellPaletteView.prototype.updateCodeLanguage = function(language) {
    return this.options.language = language;
  };

  SpellPaletteView.prototype.onResize = function(e) {
    return typeof this.updateMaxHeight === "function" ? this.updateMaxHeight() : void 0;
  };

  SpellPaletteView.prototype.createPalette = function() {
    var allDocs, doc, excludedDocs, j, k, lc, lcs, len, len1, name, propStorage, ref, ref1, ref2;
    Backbone.Mediator.publish('tome:palette-cleared', {
      thangID: this.thang.id
    });
    lcs = this.supermodel.getModels(LevelComponent);
    allDocs = {};
    excludedDocs = {};
    for (j = 0, len = lcs.length; j < len; j++) {
      lc = lcs[j];
      ref1 = (ref = lc.get('propertyDocumentation')) != null ? ref : [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        doc = ref1[k];
        if (doc.codeLanguages && !(ref2 = this.options.language, indexOf.call(doc.codeLanguages, ref2) >= 0)) {
          excludedDocs['__' + doc.name] = doc;
          continue;
        }
        if (allDocs[name = '__' + doc.name] == null) {
          allDocs[name] = [];
        }
        allDocs['__' + doc.name].push(doc);
        if (doc.type === 'snippet') {
          doc.owner = 'snippets';
        }
      }
    }
    if (this.options.programmable) {
      propStorage = {
        'this': 'programmableProperties',
        more: 'moreProgrammableProperties',
        Math: 'programmableMathProperties',
        Array: 'programmableArrayProperties',
        Object: 'programmableObjectProperties',
        String: 'programmableStringProperties',
        Global: 'programmableGlobalProperties',
        Function: 'programmableFunctionProperties',
        RegExp: 'programmableRegExpProperties',
        Date: 'programmableDateProperties',
        Number: 'programmableNumberProperties',
        JSON: 'programmableJSONProperties',
        LoDash: 'programmableLoDashProperties',
        Vector: 'programmableVectorProperties',
        HTML: 'programmableHTMLProperties',
        WebJavaScript: 'programmableWebJavaScriptProperties',
        jQuery: 'programmableJQueryProperties',
        CSS: 'programmableCSSProperties',
        snippets: 'programmableSnippets'
      };
    } else {
      propStorage = {
        'this': ['apiProperties', 'apiMethods']
      };
    }
    if (!this.options.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev', 'web-dev') || !this.options.programmable) {
      return this.organizePalette(propStorage, allDocs, excludedDocs);
    } else {
      return this.organizePaletteHero(propStorage, allDocs, excludedDocs);
    }
  };

  SpellPaletteView.prototype.organizePalette = function(propStorage, allDocs, excludedDocs) {
    var added, count, defaultGroup, doc, entries, group, groupForEntry, i18nKey, j, k, len, len1, owner, prop, propGroups, props, ref, ref1, ref2, ref3, storage, storages, tabbify, thisName;
    count = 0;
    propGroups = {};
    for (owner in propStorage) {
      storages = propStorage[owner];
      if (_.isString(storages)) {
        storages = [storages];
      }
      for (j = 0, len = storages.length; j < len; j++) {
        storage = storages[j];
        props = _.reject((ref = this.thang[storage]) != null ? ref : [], function(prop) {
          return prop[0] === '_';
        });
        props = _.uniq(props);
        added = _.sortBy(props).slice();
        propGroups[owner] = ((ref1 = propGroups[owner]) != null ? ref1 : []).concat(added);
        count += added.length;
      }
    }
    Backbone.Mediator.publish('tome:update-snippets', {
      propGroups: propGroups,
      allDocs: allDocs,
      language: this.options.language
    });
    this.shortenize = count > 6;
    tabbify = count >= 10;
    this.entries = [];
    for (owner in propGroups) {
      props = propGroups[owner];
      for (k = 0, len1 = props.length; k < len1; k++) {
        prop = props[k];
        doc = _.find((ref2 = allDocs['__' + prop]) != null ? ref2 : [], function(doc) {
          if (doc.owner === owner) {
            return true;
          }
          return (owner === 'this' || owner === 'more') && ((doc.owner == null) || doc.owner === 'this');
        });
        if (!doc && !excludedDocs['__' + prop]) {
          console.log('could not find doc for', prop, 'from', allDocs['__' + prop], 'for', owner, 'of', propGroups);
          if (doc == null) {
            doc = prop;
          }
        }
        if (doc) {
          this.entries.push(this.addEntry(doc, this.shortenize, owner === 'snippets'));
        }
      }
    }
    groupForEntry = function(entry) {
      var ref3, ref4;
      if (entry.doc.owner === 'this' && (ref3 = entry.doc.name, indexOf.call((ref4 = propGroups.more) != null ? ref4 : [], ref3) >= 0)) {
        return 'more';
      }
      return entry.doc.owner;
    };
    this.entries = _.sortBy(this.entries, function(entry) {
      var index, order;
      order = ['this', 'more', 'Math', 'Vector', 'String', 'Object', 'Array', 'Function', 'HTML', 'CSS', 'WebJavaScript', 'jQuery', 'snippets'];
      index = order.indexOf(groupForEntry(entry));
      index = String.fromCharCode(index === -1 ? order.length : index);
      return index += entry.doc.name;
    });
    if (tabbify && _.find(this.entries, (function(entry) {
      return entry.doc.owner !== 'this';
    }))) {
      this.entryGroups = _.groupBy(this.entries, groupForEntry);
    } else {
      i18nKey = this.options.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev', 'web-dev') ? 'play_level.tome_your_skills' : 'play_level.tome_available_spells';
      defaultGroup = $.i18n.t(i18nKey);
      this.entryGroups = {};
      this.entryGroups[defaultGroup] = this.entries;
      this.defaultGroupSlug = _.string.slugify(defaultGroup);
    }
    this.entryGroupSlugs = {};
    this.entryGroupNames = {};
    ref3 = this.entryGroups;
    for (group in ref3) {
      entries = ref3[group];
      this.entryGroups[group] = _.groupBy(entries, function(entry, i) {
        return Math.floor(i / N_ROWS);
      });
      this.entryGroupSlugs[group] = _.string.slugify(group);
      this.entryGroupNames[group] = group;
    }
    if (thisName = {
      coffeescript: '@',
      lua: 'self',
      python: 'self'
    }[this.options.language]) {
      if (this.entryGroupNames["this"]) {
        return this.entryGroupNames["this"] = thisName;
      }
    }
  };

  SpellPaletteView.prototype.organizePaletteHero = function(propStorage, allDocs, excludedDocs) {
    var component, doc, entries, entry, group, iOSEntryGroups, item, itemName, itemThangTypes, itemsByProp, j, k, l, len, len1, len2, len3, len4, len5, len6, m, n, name, o, owner, p, programmaticon, programmaticonName, prop, propCount, propIndex, props, propsByItem, ref, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, slot, slots, sortedProps, storage, storages, thangTypeName, tt;
    this.isHero = true;
    itemThangTypes = {};
    ref = this.supermodel.getModels(ThangType);
    for (j = 0, len = ref.length; j < len; j++) {
      tt = ref[j];
      itemThangTypes[tt.get('name')] = tt;
    }
    propsByItem = {};
    propCount = 0;
    itemsByProp = {};
    this.deferredDocs = {};
    slots = _.sortBy(_.keys((ref1 = this.thang.inventoryThangTypeNames) != null ? ref1 : {}), function(slot) {
      if (slot === 'left-hand') {
        return 0;
      } else if (slot === 'right-hand') {
        return 1;
      } else {
        return 2;
      }
    });
    for (k = 0, len1 = slots.length; k < len1; k++) {
      slot = slots[k];
      thangTypeName = this.thang.inventoryThangTypeNames[slot];
      if (item = itemThangTypes[thangTypeName]) {
        if (!item.get('components')) {
          console.error('Item', item, 'did not have any components when we went to assemble docs.');
        }
        ref3 = (ref2 = item.get('components')) != null ? ref2 : [];
        for (l = 0, len2 = ref3.length; l < len2; l++) {
          component = ref3[l];
          if (component.config) {
            for (owner in propStorage) {
              storages = propStorage[owner];
              if (props = component.config[storages]) {
                ref4 = _.sortBy(props);
                for (m = 0, len3 = ref4.length; m < len3; m++) {
                  prop = ref4[m];
                  if (!(prop[0] !== '_' && !itemsByProp[prop])) {
                    continue;
                  }
                  if (prop === 'moveXY' && this.options.level.get('slug') === 'slalom') {
                    continue;
                  }
                  if (propsByItem[name = item.get('name')] == null) {
                    propsByItem[name] = [];
                  }
                  propsByItem[item.get('name')].push({
                    owner: owner,
                    prop: prop,
                    item: item
                  });
                  itemsByProp[prop] = item;
                  ++propCount;
                }
              }
            }
          }
        }
      } else {
        console.log(this.thang.id, "couldn't find item ThangType for", slot, thangTypeName);
      }
    }
    for (owner in propStorage) {
      storage = propStorage[owner];
      if (!(!(owner === 'this' || owner === 'more' || owner === 'snippets' || owner === 'HTML' || owner === 'CSS' || owner === 'WebJavaScript' || owner === 'jQuery'))) {
        continue;
      }
      if (!((ref5 = this.thang[storage]) != null ? ref5.length : void 0)) {
        continue;
      }
      if (this.tabs == null) {
        this.tabs = {};
      }
      this.tabs[owner] = [];
      programmaticonName = this.thang.inventoryThangTypeNames['programming-book'];
      programmaticon = itemThangTypes[programmaticonName];
      sortedProps = this.thang[storage].slice().sort();
      for (n = 0, len4 = sortedProps.length; n < len4; n++) {
        prop = sortedProps[n];
        if (doc = _.find((ref6 = allDocs['__' + prop]) != null ? ref6 : [], {
          owner: owner
        })) {
          entry = this.addEntry(doc, false, false, programmaticon);
          this.tabs[owner].push(entry);
        }
      }
    }
    for (owner in propStorage) {
      storage = propStorage[owner];
      if (owner !== 'this' && owner !== 'more' && owner !== 'snippets' && owner !== 'HTML' && owner !== 'CSS' && owner !== 'WebJavaScript' && owner !== 'jQuery') {
        continue;
      }
      ref8 = _.reject((ref7 = this.thang[storage]) != null ? ref7 : [], function(prop) {
        return itemsByProp[prop] || prop[0] === '_';
      });
      for (o = 0, len5 = ref8.length; o < len5; o++) {
        prop = ref8[o];
        if (prop === 'say' && this.options.level.get('hidesSay')) {
          continue;
        }
        if (prop === 'moveXY' && this.options.level.get('slug') === 'slalom') {
          continue;
        }
        if (propsByItem['Hero'] == null) {
          propsByItem['Hero'] = [];
        }
        propsByItem['Hero'].push({
          owner: owner,
          prop: prop,
          item: itemThangTypes[this.thang.spriteName]
        });
        ++propCount;
      }
    }
    Backbone.Mediator.publish('tome:update-snippets', {
      propGroups: propsByItem,
      allDocs: allDocs,
      language: this.options.language
    });
    this.shortenize = propCount > 6;
    this.entries = [];
    for (itemName in propsByItem) {
      props = propsByItem[itemName];
      for (propIndex = p = 0, len6 = props.length; p < len6; propIndex = ++p) {
        prop = props[propIndex];
        item = prop.item;
        owner = prop.owner;
        prop = prop.prop;
        doc = _.find((ref9 = allDocs['__' + prop]) != null ? ref9 : [], function(doc) {
          if (doc.owner === owner) {
            return true;
          }
          return (owner === 'this' || owner === 'more') && ((doc.owner == null) || doc.owner === 'this');
        });
        if (!doc && !excludedDocs['__' + prop]) {
          console.log('could not find doc for', prop, 'from', allDocs['__' + prop], 'for', owner, 'of', propsByItem, 'with item', item);
          if (doc == null) {
            doc = prop;
          }
        }
        if (doc) {
          if ((ref10 = doc.type) === 'spawnable' || ref10 === 'event') {
            this.deferredDocs[doc.name] = doc;
          } else {
            this.entries.push(this.addEntry(doc, this.shortenize, owner === 'snippets', item, propIndex > 0));
          }
        }
      }
    }
    if (this.options.level.isType('web-dev')) {
      this.entryGroups = _.groupBy(this.entries, function(entry) {
        return entry.doc.type;
      });
    } else {
      this.entryGroups = _.groupBy(this.entries, function(entry) {
        var ref11, ref12;
        return (ref11 = (ref12 = itemsByProp[entry.doc.name]) != null ? ref12.get('name') : void 0) != null ? ref11 : 'Hero';
      });
    }
    iOSEntryGroups = {};
    ref11 = this.entryGroups;
    for (group in ref11) {
      entries = ref11[group];
      iOSEntryGroups[group] = {
        item: {
          name: group,
          imageURL: (ref12 = itemThangTypes[group]) != null ? ref12.getPortraitURL() : void 0
        },
        props: (function() {
          var len7, q, results;
          results = [];
          for (q = 0, len7 = entries.length; q < len7; q++) {
            entry = entries[q];
            results.push(entry.doc);
          }
          return results;
        })()
      };
    }
    return Backbone.Mediator.publish('tome:palette-updated', {
      thangID: this.thang.id,
      entryGroups: JSON.stringify(iOSEntryGroups)
    });
  };

  SpellPaletteView.prototype.addEntry = function(doc, shortenize, isSnippet, item, showImage) {
    var ref, ref1, writable;
    if (isSnippet == null) {
      isSnippet = false;
    }
    if (item == null) {
      item = null;
    }
    if (showImage == null) {
      showImage = false;
    }
    writable = (ref = (_.isString(doc) ? doc : doc.name), indexOf.call((ref1 = this.thang.apiUserProperties) != null ? ref1 : [], ref) >= 0);
    return new SpellPaletteEntryView({
      doc: doc,
      thang: this.thang,
      shortenize: shortenize,
      isSnippet: isSnippet,
      language: this.options.language,
      writable: writable,
      level: this.options.level,
      item: item,
      showImage: showImage,
      useHero: this.useHero
    });
  };

  SpellPaletteView.prototype.onDisableControls = function(e) {
    return this.toggleControls(e, false);
  };

  SpellPaletteView.prototype.onEnableControls = function(e) {
    return this.toggleControls(e, true);
  };

  SpellPaletteView.prototype.toggleControls = function(e, enabled) {
    if (e.controls && !(indexOf.call(e.controls, 'palette') >= 0)) {
      return;
    }
    if (enabled === this.controlsEnabled) {
      return;
    }
    this.controlsEnabled = enabled;
    this.$el.find('*').attr('disabled', !enabled);
    return this.$el.toggleClass('controls-disabled', !enabled);
  };

  SpellPaletteView.prototype.onFrameChanged = function(e) {
    var ref;
    if (((ref = e.selectedThang) != null ? ref.id : void 0) !== this.thang.id) {
      return;
    }
    return this.options.thang = this.thang = e.selectedThang;
  };

  SpellPaletteView.prototype.onTomeChangedLanguage = function(e) {
    var entry, j, len, ref;
    this.updateCodeLanguage(e.language);
    ref = this.entries;
    for (j = 0, len = ref.length; j < len; j++) {
      entry = ref[j];
      entry.destroy();
    }
    this.createPalette();
    return this.render();
  };

  SpellPaletteView.prototype.onSectionHeaderClick = function(e) {
    var $et, isCollapsed, target;
    $et = this.$(e.target);
    target = this.$($et.attr('data-panel'));
    isCollapsed = !target.hasClass('in');
    console.log("O", target[0], isCollapsed);
    if (isCollapsed) {
      target.collapse('show');
      $et.find('.glyphicon').removeClass('glyphicon-chevron-right').addClass('glyphicon-chevron-down');
    } else {
      target.collapse('hide');
      $et.find('.glyphicon').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-right');
    }
    setTimeout((function(_this) {
      return function() {
        return _this.$('.nano').nanoScroller({
          alwaysVisible: true
        });
      };
    })(this), 200);
    return e.preventDefault();
  };

  SpellPaletteView.prototype.onClickHelp = function(e) {
    var gameMenuModal, ref;
    if ((ref = application.tracker) != null) {
      ref.trackEvent('Spell palette help clicked', {
        levelID: this.level.get('slug')
      });
    }
    gameMenuModal = new GameMenuModal({
      showTab: 'guide',
      level: this.level,
      session: this.session,
      supermodel: this.supermodel
    });
    this.openModalView(gameMenuModal);
    return this.listenToOnce(gameMenuModal, 'change-hero', function() {
      var ref1;
      if ((ref1 = this.setupManager) != null) {
        ref1.destroy();
      }
      this.setupManager = new LevelSetupManager({
        supermodel: this.supermodel,
        level: this.level,
        levelID: this.level.get('slug'),
        parent: this,
        session: this.session,
        courseID: this.options.courseID,
        courseInstanceID: this.options.courseInstanceID
      });
      return this.setupManager.open();
    });
  };

  SpellPaletteView.prototype.onClickClose = function(e) {
    return this.hide();
  };

  SpellPaletteView.prototype.hide = function() {
    this.$el.find('.left .selected').removeClass('selected');
    return this.$el.removeClass('open');
  };

  SpellPaletteView.prototype.onPalleteClick = function(e) {
    var aceEditors, codeLanguage, content, j, len, oldEditor, ref;
    this.$el.addClass('open');
    content = this.$el.find(".rightContentTarget");
    content.html(e.entry.doc.initialHTML);
    codeLanguage = e.entry.options.language;
    ref = this.aceEditors;
    for (j = 0, len = ref.length; j < len; j++) {
      oldEditor = ref[j];
      oldEditor.destroy();
    }
    this.aceEditors = [];
    aceEditors = this.aceEditors;
    return content.find('.docs-ace').each(function() {
      var aceEditor;
      aceEditor = utils.initializeACE(this, codeLanguage);
      return aceEditors.push(aceEditor);
    });
  };

  SpellPaletteView.prototype.destroy = function() {
    var entry, j, len, ref, ref1;
    ref = this.entries;
    for (j = 0, len = ref.length; j < len; j++) {
      entry = ref[j];
      entry.destroy();
    }
    this.toggleBackground = null;
    $(window).off('resize', this.onResize);
    if ((ref1 = this.setupManager) != null) {
      ref1.destroy();
    }
    return SpellPaletteView.__super__.destroy.call(this);
  };

  return SpellPaletteView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellToolbarView", function(exports, require, module) {
var CocoView, SpellToolbarView, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/spell_toolbar');

module.exports = SpellToolbarView = (function(superClass) {
  extend(SpellToolbarView, superClass);

  SpellToolbarView.prototype.className = 'spell-toolbar-view';

  SpellToolbarView.prototype.template = template;

  SpellToolbarView.prototype.progressHoverDelay = 500;

  SpellToolbarView.prototype.subscriptions = {
    'tome:spell-step-backward': 'onStepBackward',
    'tome:spell-step-forward': 'onStepForward'
  };

  SpellToolbarView.prototype.events = {
    'mousedown .spell-progress': 'onProgressMouseDown',
    'mouseup .spell-progress': 'onProgressMouseUp',
    'mousemove .spell-progress': 'onProgressMouseMove',
    'tapstart .spell-progress': 'onProgressTapStart',
    'tapend .spell-progress': 'onProgressTapEnd',
    'tapmove .spell-progress': 'onProgressTapMove',
    'click .step-backward': 'onStepBackward',
    'click .step-forward': 'onStepForward'
  };

  function SpellToolbarView(options) {
    SpellToolbarView.__super__.constructor.call(this, options);
    this.ace = options.ace;
  }

  SpellToolbarView.prototype.afterRender = function() {
    return SpellToolbarView.__super__.afterRender.call(this);
  };

  SpellToolbarView.prototype.toggleFlow = function(to) {
    return this.$el.find('.flow').toggle(to);
  };

  SpellToolbarView.prototype.setStatementIndex = function(statementIndex) {
    var ref, ref1, ref2, total;
    if (!(total = (ref = this.callState) != null ? ref.statementsExecuted : void 0)) {
      return;
    }
    this.statementIndex = Math.min(total - 1, Math.max(0, statementIndex));
    this.statementRatio = this.statementIndex / (total - 1);
    this.statementTime = (ref1 = (ref2 = this.callState.statements[this.statementIndex]) != null ? ref2.userInfo.time : void 0) != null ? ref1 : 0;
    this.$el.find('.progress-bar').css('width', 100 * this.statementRatio + '%');
    this.$el.find('.step-backward').prop('disabled', this.statementIndex === 0);
    this.$el.find('.step-forward').prop('disabled', this.statementIndex === total - 1);
    this.updateMetrics();
    return _.defer((function(_this) {
      return function() {
        return Backbone.Mediator.publish('tome:spell-statement-index-updated', {
          statementIndex: _this.statementIndex,
          ace: _this.ace
        });
      };
    })(this));
  };

  SpellToolbarView.prototype.updateMetrics = function() {
    var $metrics, left, statementsExecuted, titleSuffix;
    statementsExecuted = this.callState.statementsExecuted;
    $metrics = this.$el.find('.metrics');
    if (this.suppressMetricsUpdates || !(statementsExecuted || this.metrics.statementsExecuted)) {
      return $metrics.hide();
    }
    if (this.metrics.callsExecuted > 1) {
      $metrics.find('.call-index').text(this.callIndex + 1);
      $metrics.find('.calls-executed').text(this.metrics.callsExecuted);
      $metrics.find('.calls-metric').show().attr('title', "Method call " + (this.callIndex + 1) + " of " + this.metrics.callsExecuted + " calls");
    } else {
      $metrics.find('.calls-metric').hide();
    }
    if (this.metrics.statementsExecuted) {
      $metrics.find('.statement-index').text(this.statementIndex + 1);
      $metrics.find('.statements-executed').text(statementsExecuted);
      if (this.metrics.statementsExecuted > statementsExecuted) {
        $metrics.find('.statements-executed-total').text(" (" + this.metrics.statementsExecuted + ")");
        titleSuffix = " (" + this.metrics.statementsExecuted + " statements total)";
      } else {
        $metrics.find('.statements-executed-total').text('');
        titleSuffix = '';
      }
      $metrics.find('.statements-metric').show().attr('title', "Statement " + (this.statementIndex + 1) + " of " + statementsExecuted + " this call" + titleSuffix);
    } else {
      $metrics.find('.statements-metric').hide();
    }
    left = this.$el.find('.scrubber-handle').position().left + this.$el.find('.spell-progress').position().left;
    return $metrics.finish().show().css({
      left: left - $metrics.width() / 2
    }).delay(2000).fadeOut('fast');
  };

  SpellToolbarView.prototype.setStatementRatio = function(ratio) {
    var ref, statementIndex, total;
    if (!(total = (ref = this.callState) != null ? ref.statementsExecuted : void 0)) {
      return;
    }
    statementIndex = Math.floor(ratio * total);
    if (statementIndex !== this.statementIndex) {
      return this.setStatementIndex(statementIndex);
    }
  };

  SpellToolbarView.prototype.onProgressMouseDown = function(e) {
    this.dragging = true;
    this.scrubProgress(e);
    return Backbone.Mediator.publish('level:set-playing', {
      playing: false
    });
  };

  SpellToolbarView.prototype.onProgressMouseUp = function(e) {
    return this.dragging = false;
  };

  SpellToolbarView.prototype.onProgressMouseMove = function(e) {
    if (!this.dragging) {
      return;
    }
    return this.scrubProgress(e);
  };

  SpellToolbarView.prototype.onProgressTapStart = function(e, touchData) {
    this.dragging = true;
    return this.scrubProgress(e, touchData);
  };

  SpellToolbarView.prototype.onProgressTapEnd = function(e, touchData) {
    return this.dragging = false;
  };

  SpellToolbarView.prototype.onProgressTapMove = function(e, touchData) {
    if (!this.dragging) {
      return;
    }
    return this.scrubProgress(e, touchData);
  };

  SpellToolbarView.prototype.scrubProgress = function(e, touchData) {
    var offsetX, ref, ref1, screenOffsetX;
    screenOffsetX = (ref = (ref1 = e.clientX) != null ? ref1 : touchData != null ? touchData.position.x : void 0) != null ? ref : 0;
    offsetX = screenOffsetX - this.$el.find('.spell-progress').offset().left;
    offsetX = Math.max(offsetX, 0);
    this.setStatementRatio(offsetX / this.$el.find('.spell-progress').width());
    this.updateTime();
    return this.updateScroll();
  };

  SpellToolbarView.prototype.onStepBackward = function(e) {
    return this.step(-1);
  };

  SpellToolbarView.prototype.onStepForward = function(e) {
    return this.step(1);
  };

  SpellToolbarView.prototype.step = function(delta) {
    var lastTime;
    lastTime = this.statementTime;
    this.setStatementIndex(this.statementIndex + delta);
    if (this.statementTime !== lastTime) {
      this.updateTime();
    }
    this.updateScroll();
    return Backbone.Mediator.publish('level:set-playing', {
      playing: false
    });
  };

  SpellToolbarView.prototype.updateTime = function() {
    this.maintainIndexScrub = true;
    if (this.maintainIndexScrubTimeout) {
      clearTimeout(this.maintainIndexScrubTimeout);
    }
    this.maintainIndexScrubTimeout = _.delay(((function(_this) {
      return function() {
        return _this.maintainIndexScrub = false;
      };
    })(this)), 500);
    return Backbone.Mediator.publish('level:set-time', {
      time: this.statementTime,
      scrubDuration: 500
    });
  };

  SpellToolbarView.prototype.updateScroll = function() {
    var currentLine, ref, ref1, ref2, statementStart, text;
    if (!(statementStart = (ref = this.callState) != null ? (ref1 = ref.statements) != null ? (ref2 = ref1[this.statementIndex]) != null ? ref2.range[0] : void 0 : void 0 : void 0)) {
      return;
    }
    text = this.ace.getValue();
    currentLine = statementStart.row;
    return this.ace.scrollToLine(currentLine, true, true);
  };

  SpellToolbarView.prototype.setCallState = function(callState, statementIndex, callIndex, metrics) {
    var ref;
    this.callIndex = callIndex;
    this.metrics = metrics;
    if (callState === this.callState && statementIndex === this.statementIndex) {
      return;
    }
    if (!(this.callState = callState)) {
      return;
    }
    this.suppressMetricsUpdates = true;
    if (!this.maintainIndexScrub && !this.dragging && (statementIndex != null) && ((ref = callState.statements[statementIndex]) != null ? ref.userInfo.time : void 0) !== this.statementTime) {
      this.setStatementIndex(statementIndex);
    } else {
      this.setStatementRatio(this.statementRatio);
    }
    return this.suppressMetricsUpdates = false;
  };

  return SpellToolbarView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellTopBarView", function(exports, require, module) {
var CocoView, ImageGalleryModal, ReloadLevelModal, SpellTopBarView, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

template = require('templates/play/level/tome/spell-top-bar-view');

ReloadLevelModal = require('views/play/level/modal/ReloadLevelModal');

CocoView = require('views/core/CocoView');

ImageGalleryModal = require('views/play/level/modal/ImageGalleryModal');

module.exports = SpellTopBarView = (function(superClass) {
  extend(SpellTopBarView, superClass);

  SpellTopBarView.prototype.template = template;

  SpellTopBarView.prototype.id = 'spell-top-bar-view';

  SpellTopBarView.prototype.controlsEnabled = true;

  SpellTopBarView.prototype.subscriptions = {
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'tome:spell-loaded': 'onSpellLoaded',
    'tome:spell-changed': 'onSpellChanged',
    'tome:spell-changed-language': 'onSpellChangedLanguage',
    'tome:toggle-maximize': 'onToggleMaximize'
  };

  SpellTopBarView.prototype.events = {
    'click .reload-code': 'onCodeReload',
    'click .beautify-code': 'onBeautifyClick',
    'click .fullscreen-code': 'onToggleMaximize',
    'click .hints-button': 'onClickHintsButton',
    'click .image-gallery-button': 'onClickImageGalleryButton'
  };

  function SpellTopBarView(options) {
    this.attachTransitionEventListener = bind(this.attachTransitionEventListener, this);
    this.hintsState = options.hintsState;
    this.spell = options.spell;
    SpellTopBarView.__super__.constructor.call(this, options);
  }

  SpellTopBarView.prototype.getRenderData = function(context) {
    var ctrl, shift;
    if (context == null) {
      context = {};
    }
    context = SpellTopBarView.__super__.getRenderData.call(this, context);
    ctrl = this.isMac() ? 'Cmd' : 'Ctrl';
    shift = $.i18n.t('keyboard_shortcuts.shift');
    context.beautifyShortcutVerbose = ctrl + "+" + shift + "+B: " + ($.i18n.t('keyboard_shortcuts.beautify'));
    context.maximizeShortcutVerbose = ctrl + "+" + shift + "+M: " + ($.i18n.t('keyboard_shortcuts.maximize_editor'));
    context.codeLanguage = this.options.codeLanguage;
    return context;
  };

  SpellTopBarView.prototype.afterRender = function() {
    SpellTopBarView.__super__.afterRender.call(this);
    this.attachTransitionEventListener();
    return this.$('[data-toggle="popover"]').popover();
  };

  SpellTopBarView.prototype.onDisableControls = function(e) {
    return this.toggleControls(e, false);
  };

  SpellTopBarView.prototype.onEnableControls = function(e) {
    return this.toggleControls(e, true);
  };

  SpellTopBarView.prototype.onClickImageGalleryButton = function(e) {
    return this.openModalView(new ImageGalleryModal());
  };

  SpellTopBarView.prototype.onClickHintsButton = function() {
    var ref, ref1, ref2;
    if (this.hintsState == null) {
      return;
    }
    this.hintsState.set('hidden', !this.hintsState.get('hidden'));
    return (ref = window.tracker) != null ? ref.trackEvent('Hints Clicked', {
      category: 'Students',
      levelSlug: this.options.level.get('slug'),
      hintCount: (ref1 = (ref2 = this.hintsState.get('hints')) != null ? ref2.length : void 0) != null ? ref1 : 0
    }, []) : void 0;
  };

  SpellTopBarView.prototype.onCodeReload = function(e) {
    if (key.shift) {
      return Backbone.Mediator.publish('level:restart', {});
    } else {
      return this.openModalView(new ReloadLevelModal());
    }
  };

  SpellTopBarView.prototype.onBeautifyClick = function(e) {
    if (!this.controlsEnabled) {
      return;
    }
    return Backbone.Mediator.publish('tome:spell-beautify', {
      spell: this.spell
    });
  };

  SpellTopBarView.prototype.onToggleMaximize = function(e) {
    var $codearea;
    $codearea = $('html');
    if (!$codearea.hasClass('fullscreen-editor')) {
      $('#code-area').css('z-index', 20);
    }
    $('html').toggleClass('fullscreen-editor');
    $('.fullscreen-code').toggleClass('maximized');
    return Backbone.Mediator.publish('tome:maximize-toggled', {});
  };

  SpellTopBarView.prototype.updateReloadButton = function() {
    var changed;
    changed = this.spell.hasChanged(null, this.spell.getSource());
    return this.$el.find('.reload-code').css('display', changed ? 'inline-block' : 'none');
  };

  SpellTopBarView.prototype.onSpellLoaded = function(e) {
    if (e.spell !== this.spell) {
      return;
    }
    return this.updateReloadButton();
  };

  SpellTopBarView.prototype.onSpellChanged = function(e) {
    if (e.spell !== this.spell) {
      return;
    }
    return this.updateReloadButton();
  };

  SpellTopBarView.prototype.onSpellChangedLanguage = function(e) {
    if (e.spell !== this.spell) {
      return;
    }
    this.options.codeLanguage = e.language;
    this.render();
    return this.updateReloadButton();
  };

  SpellTopBarView.prototype.toggleControls = function(e, enabled) {
    if (e.controls && !(indexOf.call(e.controls, 'editor') >= 0)) {
      return;
    }
    if (enabled === this.controlsEnabled) {
      return;
    }
    this.controlsEnabled = enabled;
    return this.$el.toggleClass('read-only', !enabled);
  };

  SpellTopBarView.prototype.attachTransitionEventListener = function() {
    var $codearea, testEl, transition, transitionEvent, transitionListener, transitions;
    transitionListener = '';
    testEl = document.createElement('fakeelement');
    transitions = {
      'transition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'MozTransition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd'
    };
    for (transition in transitions) {
      transitionEvent = transitions[transition];
      if (testEl.style[transition] !== void 0) {
        transitionListener = transitionEvent;
        break;
      }
    }
    $codearea = $('#code-area');
    return $codearea.on(transitionListener, (function(_this) {
      return function() {
        if (!$('html').hasClass('fullscreen-editor')) {
          return $codearea.css('z-index', 2);
        }
      };
    })(this));
  };

  SpellTopBarView.prototype.destroy = function() {
    return SpellTopBarView.__super__.destroy.call(this);
  };

  return SpellTopBarView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellTranslationView", function(exports, require, module) {
var CocoView, LevelComponent, Range, SpellTranslationView, TokenIterator, ace, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

LevelComponent = require('models/LevelComponent');

template = require('templates/play/level/tome/spell_translation');

ace = require('ace');

Range = ace.require('ace/range').Range;

TokenIterator = ace.require('ace/token_iterator').TokenIterator;

utils = require('core/utils');

module.exports = SpellTranslationView = (function(superClass) {
  extend(SpellTranslationView, superClass);

  SpellTranslationView.prototype.className = 'spell-translation-view';

  SpellTranslationView.prototype.template = template;

  SpellTranslationView.prototype.events = {
    'mousemove': function() {
      return this.$el.hide();
    }
  };

  function SpellTranslationView(options) {
    this.onMouseMove = bind(this.onMouseMove, this);
    this.setTooltipText = bind(this.setTooltipText, this);
    var levelComponents;
    SpellTranslationView.__super__.constructor.call(this, options);
    this.ace = options.ace;
    levelComponents = this.supermodel.getModels(LevelComponent);
    this.componentTranslations = levelComponents.reduce(function(acc, lc) {
      var doc, i, len, ref, ref1, translated;
      ref1 = (ref = lc.get('propertyDocumentation')) != null ? ref : [];
      for (i = 0, len = ref1.length; i < len; i++) {
        doc = ref1[i];
        translated = utils.i18n(doc, 'name', null, false);
        if (translated !== doc.name) {
          acc[doc.name] = translated;
        }
      }
      return acc;
    }, {});
    this.onMouseMove = _.throttle(this.onMouseMove, 25);
  }

  SpellTranslationView.prototype.afterRender = function() {
    SpellTranslationView.__super__.afterRender.call(this);
    return this.ace.on('mousemove', this.onMouseMove);
  };

  SpellTranslationView.prototype.setTooltipText = function(text) {
    this.$el.find('code').text(text);
    return this.$el.show().css(this.pos);
  };

  SpellTranslationView.prototype.isIdentifier = function(t) {
    return t && (_.any([/identifier/, /keyword/], function(regex) {
      return regex.test(t.type);
    }) || t.value === 'this');
  };

  SpellTranslationView.prototype.onMouseMove = function(e) {
    var end, endOfLine, error, error1, it, pos, ref, start, token;
    if (this.destroyed) {
      return;
    }
    pos = e.getDocumentPosition();
    it = new TokenIterator(e.editor.session, pos.row, pos.column);
    endOfLine = ((ref = it.getCurrentToken()) != null ? ref.index : void 0) === it.$rowTokens.length - 1;
    while (it.getCurrentTokenRow() === pos.row && !this.isIdentifier(token = it.getCurrentToken())) {
      if (endOfLine || !token) {
        break;
      }
      it.stepBackward();
    }
    if (!this.isIdentifier(token)) {
      this.word = null;
      this.update();
      return;
    }
    try {
      start = it.getCurrentTokenColumn();
    } catch (error1) {
      error = error1;
      start = 0;
    }
    end = start + token.value.length;
    if (this.isIdentifier(token)) {
      this.word = token.value;
      this.markerRange = new Range(pos.row, start, pos.row, end);
      this.reposition(e.domEvent);
    }
    return this.update();
  };

  SpellTranslationView.prototype.reposition = function(e) {
    var offsetX, offsetY, ref, ref1, w;
    offsetX = (ref = e.offsetX) != null ? ref : e.clientX - $(e.target).offset().left;
    offsetY = (ref1 = e.offsetY) != null ? ref1 : e.clientY - $(e.target).offset().top;
    w = $(document).width() - 20;
    if (e.clientX + this.$el.width() > w) {
      offsetX = w - $(e.target).offset().left - this.$el.width();
    }
    this.pos = {
      left: offsetX + 80,
      top: offsetY - 20
    };
    return this.$el.css(this.pos);
  };

  SpellTranslationView.prototype.onMouseOut = function() {
    this.word = null;
    this.markerRange = null;
    return this.update();
  };

  SpellTranslationView.prototype.update = function() {
    var i18nKey, translation;
    i18nKey = 'code.' + this.word;
    translation = this.componentTranslations[this.word] || $.t(i18nKey);
    if (this.word && translation && (translation !== i18nKey && translation !== this.word)) {
      return this.setTooltipText(translation);
    } else {
      return this.$el.hide();
    }
  };

  SpellTranslationView.prototype.destroy = function() {
    var ref;
    if ((ref = this.ace) != null) {
      ref.removeEventListener('mousemove', this.onMouseMove);
    }
    return SpellTranslationView.__super__.destroy.call(this);
  };

  return SpellTranslationView;

})(CocoView);
});

;require.register("views/play/level/tome/SpellView", function(exports, require, module) {
var Autocomplete, CocoView, CodeLog, LevelComponent, Problem, Range, SpellDebugView, SpellToolbarView, SpellTranslationView, SpellView, TokenIterator, UndoManager, UserCodeProblem, ace, commentStarts, filters, me, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/spell');

me = require('core/auth').me;

filters = require('lib/image_filter');

ace = require('ace');

Range = ace.require('ace/range').Range;

UndoManager = ace.require('ace/undomanager').UndoManager;

Problem = require('./Problem');

SpellDebugView = require('./SpellDebugView');

SpellTranslationView = require('./SpellTranslationView');

SpellToolbarView = require('./SpellToolbarView');

LevelComponent = require('models/LevelComponent');

UserCodeProblem = require('models/UserCodeProblem');

utils = require('core/utils');

CodeLog = require('models/CodeLog');

Autocomplete = require('./editor/autocomplete');

TokenIterator = ace.require('ace/token_iterator').TokenIterator;

module.exports = SpellView = (function(superClass) {
  extend(SpellView, superClass);

  SpellView.prototype.id = 'spell-view';

  SpellView.prototype.className = 'shown';

  SpellView.prototype.template = template;

  SpellView.prototype.controlsEnabled = true;

  SpellView.prototype.eventsSuppressed = true;

  SpellView.prototype.writable = true;

  SpellView.prototype.languagesThatUseWorkers = ['html'];

  SpellView.prototype.keyBindings = {
    'default': null,
    'vim': 'ace/keyboard/vim',
    'emacs': 'ace/keyboard/emacs'
  };

  SpellView.prototype.subscriptions = {
    'level:disable-controls': 'onDisableControls',
    'level:enable-controls': 'onEnableControls',
    'surface:frame-changed': 'onFrameChanged',
    'surface:coordinate-selected': 'onCoordinateSelected',
    'god:new-world-created': 'onNewWorld',
    'god:user-code-problem': 'onUserCodeProblem',
    'god:non-user-code-problem': 'onNonUserCodeProblem',
    'tome:manual-cast': 'onManualCast',
    'tome:spell-changed': 'onSpellChanged',
    'level:session-will-save': 'onSessionWillSave',
    'modal:closed': 'focus',
    'tome:focus-editor': 'focus',
    'tome:spell-statement-index-updated': 'onStatementIndexUpdated',
    'tome:change-language': 'onChangeLanguage',
    'tome:change-config': 'onChangeEditorConfig',
    'tome:update-snippets': 'addAutocompleteSnippets',
    'tome:insert-snippet': 'onInsertSnippet',
    'tome:spell-beautify': 'onSpellBeautify',
    'tome:maximize-toggled': 'onMaximizeToggled',
    'tome:problems-updated': 'onProblemsUpdated',
    'script:state-changed': 'onScriptStateChange',
    'playback:ended-changed': 'onPlaybackEndedChanged',
    'level:contact-button-pressed': 'onContactButtonPressed',
    'level:show-victory': 'onShowVictory',
    'web-dev:error': 'onWebDevError'
  };

  SpellView.prototype.events = {
    'mouseout': 'onMouseOut'
  };

  function SpellView(options) {
    this.checkSuspectCode = bind(this.checkSuspectCode, this);
    this.checkRequiredCode = bind(this.checkRequiredCode, this);
    this.onWindowResize = bind(this.onWindowResize, this);
    this.toggleBackground = bind(this.toggleBackground, this);
    this.onGutterClick = bind(this.onGutterClick, this);
    this.highlightCurrentLine = bind(this.highlightCurrentLine, this);
    this.onAceMouseMove = bind(this.onAceMouseMove, this);
    this.updateAether = bind(this.updateAether, this);
    this.updateHTML = bind(this.updateHTML, this);
    this.onCursorActivity = bind(this.onCursorActivity, this);
    this.saveSpade = bind(this.saveSpade, this);
    this.updateLines = bind(this.updateLines, this);
    this.notifyEditingBegan = bind(this.notifyEditingBegan, this);
    this.notifyEditingEnded = bind(this.notifyEditingEnded, this);
    this.notifySpellChanged = bind(this.notifySpellChanged, this);
    this.onAllLoaded = bind(this.onAllLoaded, this);
    var ref;
    this.supermodel = options.supermodel;
    SpellView.__super__.constructor.call(this, options);
    this.worker = options.worker;
    this.session = options.session;
    this.spell = options.spell;
    this.problems = [];
    this.savedProblems = {};
    if (ref = me.team, indexOf.call(this.spell.permissions.readwrite, ref) < 0) {
      this.writable = false;
    }
    this.highlightCurrentLine = _.throttle(this.highlightCurrentLine, 100);
    $(window).on('resize', this.onWindowResize);
    this.observing = this.session.get('creator') !== me.id;
  }

  SpellView.prototype.afterRender = function() {
    SpellView.__super__.afterRender.call(this);
    this.createACE();
    this.createACEShortcuts();
    this.hookACECustomBehavior();
    this.fillACE();
    this.createOnCodeChangeHandlers();
    this.lockDefaultCode();
    return _.defer(this.onAllLoaded);
  };

  SpellView.prototype.createACE = function() {
    var aceConfig, ref, ref1, ref2, ref3, saveSpadeDelay;
    aceConfig = (ref = me.get('aceConfig')) != null ? ref : {};
    this.destroyAceEditor(this.ace);
    this.ace = ace.edit(this.$el.find('.ace')[0]);
    this.aceSession = this.ace.getSession();
    this.reallySetAnnotations = this.aceSession.setAnnotations.bind(this.aceSession);
    this.aceSession.setAnnotations = (function(_this) {
      return function(annotations) {
        var newAnnotations, previousAnnotations;
        previousAnnotations = _this.aceSession.getAnnotations();
        newAnnotations = _.filter(previousAnnotations, function(annotation) {
          return annotation.createdBy != null;
        }).concat(_.reject(annotations, function(annotation) {
          return annotation.text === 'Start tag seen without seeing a doctype first. Expected e.g. <!DOCTYPE html>.';
        }));
        return _this.reallySetAnnotations(newAnnotations);
      };
    })(this);
    this.aceDoc = this.aceSession.getDocument();
    this.aceSession.setUseWorker((ref1 = this.spell.language, indexOf.call(this.languagesThatUseWorkers, ref1) >= 0));
    this.aceSession.setMode(utils.aceEditModes[this.spell.language]);
    this.aceSession.setWrapLimitRange(null);
    this.aceSession.setUseWrapMode(true);
    this.aceSession.setNewLineMode('unix');
    this.aceSession.setUseSoftTabs(true);
    this.ace.setTheme('ace/theme/textmate');
    this.ace.setDisplayIndentGuides(false);
    this.ace.setShowPrintMargin(false);
    this.ace.setShowInvisibles(aceConfig.invisibles);
    this.ace.setBehavioursEnabled(aceConfig.behaviors);
    this.ace.setAnimatedScroll(true);
    this.ace.setShowFoldWidgets(false);
    this.ace.setKeyboardHandler(this.keyBindings[(ref2 = aceConfig.keyBindings) != null ? ref2 : 'default']);
    this.ace.$blockScrolling = Infinity;
    this.ace.on('mousemove', this.onAceMouseMove);
    this.ace.on('mouseout', this.onAceMouseOut);
    this.toggleControls(null, this.writable);
    this.aceSession.selection.on('changeCursor', this.onCursorActivity);
    $(this.ace.container).find('.ace_gutter').on('click mouseenter', '.ace_error, .ace_warning, .ace_info', this.onAnnotationClick);
    $(this.ace.container).find('.ace_gutter').on('click', this.onGutterClick);
    this.initAutocomplete((ref3 = aceConfig.liveCompletion) != null ? ref3 : true);
    if (this.session.get('creator') !== me.id || this.session.fake) {
      return;
    }
    this.spade = new Spade();
    this.spade.track(this.ace);
    saveSpadeDelay = 10 * 60 * 1000;
    return this.saveSpadeTimeout = setTimeout(this.saveSpade, saveSpadeDelay);
  };

  SpellView.prototype.createACEShortcuts = function() {
    var aceCommands, addCommand;
    this.aceCommands = aceCommands = [];
    addCommand = (function(_this) {
      return function(c) {
        _this.ace.commands.addCommand(c);
        return aceCommands.push(c.name);
      };
    })(this);
    addCommand({
      name: 'run-code',
      bindKey: {
        win: 'Shift-Enter|Ctrl-Enter',
        mac: 'Shift-Enter|Command-Enter|Ctrl-Enter'
      },
      exec: (function(_this) {
        return function() {
          return Backbone.Mediator.publish('tome:manual-cast', {
            realTime: _this.options.level.isType('game-dev')
          });
        };
      })(this)
    });
    if (!this.observing) {
      addCommand({
        name: 'run-code-real-time',
        bindKey: {
          win: 'Ctrl-Shift-Enter',
          mac: 'Command-Shift-Enter|Ctrl-Shift-Enter'
        },
        exec: (function(_this) {
          return function() {
            var doneButton, timeUntilResubmit;
            doneButton = _this.$('.done-button:visible');
            if (doneButton.length) {
              return doneButton.trigger('click');
            } else if (_this.options.level.get('replayable') && (timeUntilResubmit = _this.session.timeUntilResubmit()) > 0) {
              return Backbone.Mediator.publish('tome:manual-cast-denied', {
                timeUntilResubmit: timeUntilResubmit
              });
            } else {
              return Backbone.Mediator.publish('tome:manual-cast', {
                realTime: true
              });
            }
          };
        })(this)
      });
    }
    addCommand({
      name: 'no-op',
      bindKey: {
        win: 'Ctrl-S',
        mac: 'Command-S|Ctrl-S'
      },
      exec: function() {}
    });
    addCommand({
      name: 'toggle-playing',
      bindKey: {
        win: 'Ctrl-P',
        mac: 'Command-P|Ctrl-P'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:toggle-playing', {});
      }
    });
    addCommand({
      name: 'end-current-script',
      bindKey: {
        win: 'Shift-Space',
        mac: 'Shift-Space'
      },
      readOnly: true,
      exec: (function(_this) {
        return function() {
          if (_this.scriptRunning) {
            return Backbone.Mediator.publish('level:shift-space-pressed', {});
          } else {
            return _this.ace.insert(' ');
          }
        };
      })(this)
    });
    addCommand({
      name: 'end-all-scripts',
      bindKey: {
        win: 'Escape',
        mac: 'Escape'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:escape-pressed', {});
      }
    });
    addCommand({
      name: 'toggle-grid',
      bindKey: {
        win: 'Ctrl-G',
        mac: 'Command-G|Ctrl-G'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:toggle-grid', {});
      }
    });
    addCommand({
      name: 'toggle-debug',
      bindKey: {
        win: 'Ctrl-\\',
        mac: 'Command-\\|Ctrl-\\'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:toggle-debug', {});
      }
    });
    addCommand({
      name: 'toggle-pathfinding',
      bindKey: {
        win: 'Ctrl-O',
        mac: 'Command-O|Ctrl-O'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:toggle-pathfinding', {});
      }
    });
    addCommand({
      name: 'level-scrub-forward',
      bindKey: {
        win: 'Ctrl-]',
        mac: 'Command-]|Ctrl-]'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:scrub-forward', {});
      }
    });
    addCommand({
      name: 'level-scrub-back',
      bindKey: {
        win: 'Ctrl-[',
        mac: 'Command-[|Ctrl-]'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('level:scrub-back', {});
      }
    });
    addCommand({
      name: 'spell-step-forward',
      bindKey: {
        win: 'Ctrl-Alt-]',
        mac: 'Command-Alt-]|Ctrl-Alt-]'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('tome:spell-step-forward', {});
      }
    });
    addCommand({
      name: 'spell-step-backward',
      bindKey: {
        win: 'Ctrl-Alt-[',
        mac: 'Command-Alt-[|Ctrl-Alt-]'
      },
      readOnly: true,
      exec: function() {
        return Backbone.Mediator.publish('tome:spell-step-backward', {});
      }
    });
    addCommand({
      name: 'spell-beautify',
      bindKey: {
        win: 'Ctrl-Shift-B',
        mac: 'Command-Shift-B|Ctrl-Shift-B'
      },
      exec: function() {
        return Backbone.Mediator.publish('tome:spell-beautify', {});
      }
    });
    addCommand({
      name: 'prevent-line-jump',
      bindKey: {
        win: 'Ctrl-L',
        mac: 'Command-L'
      },
      passEvent: true,
      exec: function() {}
    });
    addCommand({
      name: 'open-fullscreen-editor',
      bindKey: {
        win: 'Ctrl-Shift-M',
        mac: 'Command-Shift-M|Ctrl-Shift-M'
      },
      exec: function() {
        return Backbone.Mediator.publish('tome:toggle-maximize', {});
      }
    });
    addCommand({
      name: 'enter-skip-delimiters',
      bindKey: 'Enter|Return',
      exec: (function(_this) {
        return function() {
          var cursor, delimMatch, line, newRange;
          if (_this.aceSession.selection.isEmpty()) {
            cursor = _this.ace.getCursorPosition();
            line = _this.aceDoc.getLine(cursor.row);
            if (delimMatch = line.substring(cursor.column).match(/^(["|']?\)+;?)/)) {
              newRange = _this.ace.getSelectionRange();
              newRange.setStart(newRange.start.row, newRange.start.column + delimMatch[1].length);
              newRange.setEnd(newRange.end.row, newRange.end.column + delimMatch[1].length);
              _this.aceSession.selection.setSelectionRange(newRange);
            }
          }
          return _this.ace.execCommand('insertstring', '\n');
        };
      })(this)
    });
    addCommand({
      name: 'disable-spaces',
      bindKey: 'Space',
      exec: (function(_this) {
        return function() {
          var aceConfig, disableSpaces, line, ref, ref1;
          disableSpaces = _this.options.level.get('disableSpaces') || false;
          aceConfig = (ref = me.get('aceConfig')) != null ? ref : {};
          if (aceConfig.keyBindings && aceConfig.keyBindings !== 'default') {
            disableSpaces = false;
          }
          if ((ref1 = _this.spell.language) === 'lua' || ref1 === 'java' || ref1 === 'coffeescript' || ref1 === 'html') {
            disableSpaces = false;
          }
          if (!disableSpaces || (_.isNumber(disableSpaces) && disableSpaces < me.level())) {
            return _this.ace.execCommand('insertstring', ' ');
          }
          line = _this.aceDoc.getLine(_this.ace.getCursorPosition().row);
          if (_this.singleLineCommentRegex().test(line)) {
            return _this.ace.execCommand('insertstring', ' ');
          }
        };
      })(this)
    });
    if (this.options.level.get('backspaceThrottle')) {
      return addCommand({
        name: 'throttle-backspaces',
        bindKey: 'Backspace',
        exec: (function(_this) {
          return function() {
            var cursor, line, nowDate;
            nowDate = Date.now();
            if (_this.aceSession.selection.isEmpty()) {
              cursor = _this.ace.getCursorPosition();
              line = _this.aceDoc.getLine(cursor.row);
              if (/^\s*$/.test(line.substring(0, cursor.column))) {
                if (_this.backspaceThrottleMs == null) {
                  _this.backspaceThrottleMs = 500;
                }
                if ((_this.lastBackspace == null) || nowDate - _this.lastBackspace > _this.backspaceThrottleMs) {
                  _this.backspaceThrottleMs = 100;
                  _this.lastBackspace = nowDate;
                  _this.ace.remove("left");
                }
                return;
              }
            }
            _this.backspaceThrottleMs = null;
            _this.lastBackspace = nowDate;
            return _this.ace.remove("left");
          };
        })(this)
      });
    }
  };

  SpellView.prototype.hookACECustomBehavior = function() {
    var aceConfig, ensureLineStartsBlock, language, ref;
    aceConfig = (ref = me.get('aceConfig')) != null ? ref : {};
    this.ace.commands.on('exec', (function(_this) {
      return function(e) {
        var selection;
        if (e.command.name === 'enter-skip-delimiters') {
          selection = _this.ace.selection.getRange();
          if (!(selection.start.column === selection.end.column && selection.start.row === selection.end.row)) {
            e.editor.execCommand('gotolineend');
            return true;
          }
        }
      };
    })(this));
    language = this.spell.language;
    ensureLineStartsBlock = function(line) {
      var match;
      if (language !== "python") {
        return false;
      }
      match = /^\s*([^#]+)/.exec(line);
      if (match == null) {
        return false;
      }
      return /:\s*$/.test(match[1]);
    };
    return this.aceSession.addDynamicMarker({
      update: (function(_this) {
        return function(html, markerLayer, session, config) {
          var bw, color, colors, crow, docRange, error, error1, foldWidgets, fw, guess, h, j, k, l, level, lines, range, ref1, ref2, ref3, rend, requiredIndent, results, row, rstart, startOfRow, t, to, w, xstart;
          Range = ace.require('ace/range').Range;
          foldWidgets = _this.aceSession.foldWidgets;
          if (foldWidgets == null) {
            return;
          }
          lines = _this.aceDoc.getAllLines();
          startOfRow = function(r) {
            var ar, str;
            str = lines[r];
            ar = str.match(/^\s*/);
            return ar.pop().length;
          };
          colors = [
            {
              border: '74,144,226',
              fill: '108,162,226'
            }, {
              border: '132,180,235',
              fill: '230,237,245'
            }
          ];
          results = [];
          for (row = j = 0, ref1 = _this.aceSession.getLength(); 0 <= ref1 ? j <= ref1 : j >= ref1; row = 0 <= ref1 ? ++j : --j) {
            if (foldWidgets[row] == null) {
              foldWidgets[row] = _this.aceSession.getFoldWidget(row);
            }
            if (!((foldWidgets != null) && foldWidgets[row] === "start")) {
              continue;
            }
            try {
              docRange = _this.aceSession.getFoldWidgetRange(row);
            } catch (error1) {
              error = error1;
              console.warn("Couldn't find fold widget docRange for row " + row + ":", error);
            }
            if (docRange == null) {
              guess = startOfRow(row);
              docRange = new Range(row, guess, row, guess + 4);
            }
            if (!ensureLineStartsBlock(lines[row])) {
              continue;
            }
            if (/^\s+$/.test(lines[docRange.end.row + 1])) {
              docRange.end.row += 1;
            }
            xstart = startOfRow(row);
            if (language === 'python') {
              requiredIndent = new RegExp('^' + new Array(Math.floor(xstart / 4 + 1)).join('(    |\t)') + '(    |\t)+(\\S|\\s*$)');
              for (crow = k = ref2 = docRange.start.row + 1, ref3 = docRange.end.row; ref2 <= ref3 ? k <= ref3 : k >= ref3; crow = ref2 <= ref3 ? ++k : --k) {
                if (!requiredIndent.test(lines[crow])) {
                  docRange.end.row = crow - 1;
                  break;
                }
              }
            }
            rstart = _this.aceSession.documentToScreenPosition(docRange.start.row, docRange.start.column);
            rend = _this.aceSession.documentToScreenPosition(docRange.end.row, docRange.end.column);
            range = new Range(rstart.row, rstart.column, rend.row, rend.column);
            level = Math.floor(xstart / 4);
            color = colors[level % colors.length];
            bw = 3;
            to = markerLayer.$getTop(range.start.row, config);
            t = markerLayer.$getTop(range.start.row + 1, config);
            h = config.lineHeight * (range.end.row - range.start.row);
            l = markerLayer.$padding + xstart * config.characterWidth;
            w = 4 * config.characterWidth;
            fw = config.characterWidth * (_this.aceSession.getScreenLastRowColumn(range.start.row) - xstart);
            results.push(html.push("<div style=\n  \"position: absolute; top: " + to + "px; left: " + l + "px; width: " + (fw + bw) + "px; height: " + config.lineHeight + "px;\n   border: " + bw + "px solid rgba(" + color.border + ",1); border-left: none;\"\n></div>\n<div style=\n  \"position: absolute; top: " + t + "px; left: " + l + "px; width: " + w + "px; height: " + h + "px; background-color: rgba(" + color.fill + ",0.5);\n   border-right: " + bw + "px solid rgba(" + color.border + ",1); border-bottom: " + bw + "px solid rgba(" + color.border + ",1);\"\n></div>"));
          }
          return results;
        };
      })(this)
    });
  };

  SpellView.prototype.fillACE = function() {
    this.ace.setValue(this.spell.source);
    this.aceSession.setUndoManager(new UndoManager());
    return this.ace.clearSelection();
  };

  SpellView.prototype.lockDefaultCode = function(force) {
    var aceConfig, finishRange, interceptCommand, intersects, intersectsLeft, intersectsRight, j, k, lastRow, len, len1, len2, line, lines, lockDefaultCode, m, marker, preventReadonly, pulseLockedCode, range, ref, ref1, ref2, ref3, row;
    if (force == null) {
      force = false;
    }
    lockDefaultCode = this.options.level.get('lockDefaultCode') || false;
    if (!lockDefaultCode || (_.isNumber(lockDefaultCode) && lockDefaultCode < me.level())) {
      return;
    }
    if (!(this.spell.source === this.spell.originalSource || force)) {
      return;
    }
    if (this.isIE()) {
      return;
    }
    aceConfig = (ref = me.get('aceConfig')) != null ? ref : {};
    if (aceConfig.keyBindings && aceConfig.keyBindings !== 'default') {
      return;
    }
    console.info('Locking down default code.');
    intersects = (function(_this) {
      return function() {
        var j, len, range, ref1;
        ref1 = _this.readOnlyRanges;
        for (j = 0, len = ref1.length; j < len; j++) {
          range = ref1[j];
          if (_this.ace.getSelectionRange().intersects(range)) {
            return true;
          }
        }
        return false;
      };
    })(this);
    intersectsLeft = (function(_this) {
      return function() {
        var j, leftRange, len, range, ref1;
        leftRange = _this.ace.getSelectionRange().clone();
        if (leftRange.start.column > 0) {
          leftRange.setStart(leftRange.start.row, leftRange.start.column - 1);
        } else if (leftRange.start.row > 0) {
          leftRange.setStart(leftRange.start.row - 1, 0);
        }
        ref1 = _this.readOnlyRanges;
        for (j = 0, len = ref1.length; j < len; j++) {
          range = ref1[j];
          if (leftRange.intersects(range)) {
            return true;
          }
        }
        return false;
      };
    })(this);
    intersectsRight = (function(_this) {
      return function() {
        var j, len, range, ref1, rightRange;
        rightRange = _this.ace.getSelectionRange().clone();
        if (rightRange.end.column < _this.aceDoc.getLine(rightRange.end.row).length) {
          rightRange.setEnd(rightRange.end.row, rightRange.end.column + 1);
        } else if (rightRange.start.row < _this.aceDoc.getLength() - 1) {
          rightRange.setEnd(rightRange.end.row + 1, 0);
        }
        ref1 = _this.readOnlyRanges;
        for (j = 0, len = ref1.length; j < len; j++) {
          range = ref1[j];
          if (rightRange.intersects(range)) {
            return true;
          }
        }
        return false;
      };
    })(this);
    pulseLockedCode = function() {
      return $('.locked-code').finish().addClass('pulsating').effect('shake', {
        times: 1,
        distance: 2,
        direction: 'down'
      }).removeClass('pulsating');
    };
    preventReadonly = function(next) {
      if (intersects()) {
        pulseLockedCode();
        return true;
      }
      return typeof next === "function" ? next() : void 0;
    };
    interceptCommand = function(obj, method, wrapper) {
      var orig;
      orig = obj[method];
      obj[method] = function() {
        var args;
        args = Array.prototype.slice.call(arguments);
        return wrapper((function(_this) {
          return function() {
            return orig.apply(obj, args);
          };
        })(this));
      };
      return obj[method];
    };
    finishRange = (function(_this) {
      return function(row, startRow, startColumn) {
        var range;
        range = new Range(startRow, startColumn, row, _this.aceSession.getLine(row).length - 1);
        range.start = _this.aceDoc.createAnchor(range.start);
        range.end = _this.aceDoc.createAnchor(range.end);
        range.end.$insertRight = true;
        return _this.readOnlyRanges.push(range);
      };
    })(this);
    if (this.lockedCodeMarkerIDs != null) {
      ref1 = this.lockedCodeMarkerIDs;
      for (j = 0, len = ref1.length; j < len; j++) {
        marker = ref1[j];
        this.aceSession.removeMarker(marker);
      }
    }
    this.lockedCodeMarkerIDs = [];
    this.readOnlyRanges = [];
    if ((ref2 = this.spell.language) === 'python' || ref2 === 'coffeescript') {
      lines = this.aceDoc.getAllLines();
      for (row = k = 0, len1 = lines.length; k < len1; row = ++k) {
        line = lines[row];
        if (!/^\s*$/.test(line)) {
          lastRow = row;
        }
      }
      if (lastRow != null) {
        this.readOnlyRanges.push(new Range(0, 0, lastRow, lines[lastRow].length - 1));
      }
    }
    ref3 = this.readOnlyRanges;
    for (m = 0, len2 = ref3.length; m < len2; m++) {
      range = ref3[m];
      this.lockedCodeMarkerIDs.push(this.aceSession.addMarker(range, 'locked-code', 'fullLine'));
    }
    interceptCommand(this.ace, 'onPaste', preventReadonly);
    interceptCommand(this.ace, 'onCut', preventReadonly);
    return this.ace.commands.on('exec', (function(_this) {
      return function(e) {
        var ref10, ref11, ref12, ref4, ref5, ref6, ref7, ref8, ref9;
        e.stopPropagation();
        e.preventDefault();
        if ((e.command.name === 'insertstring' && intersects()) || (((ref4 = e.command.name) === 'Backspace' || ref4 === 'throttle-backspaces') && intersectsLeft()) || (e.command.name === 'del' && intersectsRight())) {
          if ((ref5 = _this.autocomplete) != null) {
            if (typeof ref5.off === "function") {
              ref5.off();
            }
          }
          pulseLockedCode();
          return false;
        } else if ((ref6 = e.command.name) === 'enter-skip-delimiters' || ref6 === 'Enter' || ref6 === 'Return') {
          if (intersects()) {
            e.editor.navigateDown(1);
            e.editor.navigateLineStart();
            return false;
          } else if (((ref7 = e.command.name) === 'Enter' || ref7 === 'Return') && !((ref8 = e.editor) != null ? (ref9 = ref8.completer) != null ? (ref10 = ref9.popup) != null ? ref10.isOpen : void 0 : void 0 : void 0)) {
            if ((ref11 = _this.autocomplete) != null) {
              if (typeof ref11.on === "function") {
                ref11.on();
              }
            }
            return e.editor.execCommand('enter-skip-delimiters');
          }
        }
        if ((ref12 = _this.autocomplete) != null) {
          if (typeof ref12.on === "function") {
            ref12.on();
          }
        }
        return e.command.exec(e.editor, e.args || {});
      };
    })(this));
  };

  SpellView.prototype.initAutocomplete = function(autocompleteOn) {
    var popupFontSizePx, ref;
    this.autocompleteOn = autocompleteOn;
    if (this.spell.language === 'html') {
      return;
    }
    popupFontSizePx = (ref = this.options.level.get('autocompleteFontSizePx')) != null ? ref : 16;
    return this.autocomplete = new Autocomplete(this.ace, {
      basic: false,
      liveCompletion: false,
      snippetsLangDefaults: false,
      completers: {
        keywords: false,
        snippets: this.autocompleteOn
      },
      autoLineEndings: {
        javascript: ';'
      },
      popupFontSizePx: popupFontSizePx,
      popupLineHeightPx: 1.5 * popupFontSizePx,
      popupWidthPx: 380
    });
  };

  SpellView.prototype.updateAutocomplete = function(autocompleteOn) {
    var ref;
    this.autocompleteOn = autocompleteOn;
    return (ref = this.autocomplete) != null ? ref.set('snippets', this.autocompleteOn) : void 0;
  };

  SpellView.prototype.addAutocompleteSnippets = function(e) {
    if (!(this.autocomplete && this.autocompleteOn)) {
      return;
    }
    return this.autocomplete.addCodeCombatSnippets(this.options.level, this, e);
  };

  SpellView.prototype.translateFindNearest = function() {
    var newSource, oldSource;
    oldSource = this.getSource();
    newSource = oldSource.replace(/(self:|self.|this.|@)findNearestEnemy\(\)/g, "$1findNearest($1findEnemies())");
    newSource = newSource.replace(/(self:|self.|this.|@)findNearestItem\(\)/g, "$1findNearest($1findItems())");
    if (oldSource === newSource) {
      return;
    }
    this.spell.originalSource = newSource;
    this.updateACEText(newSource);
    return _.delay(((function(_this) {
      return function() {
        return typeof _this.recompile === "function" ? _this.recompile() : void 0;
      };
    })(this)), 1000);
  };

  SpellView.prototype.createFirepad = function() {
    var fireURL, firepadOptions;
    if (this.firepadLoading) {
      return;
    }
    this.eventsSuppressed = true;
    this.loaded = false;
    this.previousSource = this.ace.getValue();
    this.ace.setValue('');
    this.aceSession.setUndoManager(new UndoManager());
    fireURL = 'https://codecombat.firebaseio.com/' + this.spell.pathComponents.join('/');
    this.fireRef = new Firebase(fireURL);
    firepadOptions = {
      userId: me.id
    };
    this.firepad = Firepad.fromACE(this.fireRef, this.ace, firepadOptions);
    this.firepadLoading = true;
    return this.firepad.on('ready', (function(_this) {
      return function() {
        var firepadSource;
        if (_this.destroyed) {
          return;
        }
        _this.firepadLoading = false;
        firepadSource = _this.ace.getValue();
        if (firepadSource) {
          _this.spell.source = firepadSource;
        } else {
          _this.ace.setValue(_this.previousSource);
          _this.aceSession.setUndoManager(new UndoManager());
          _this.ace.clearSelection();
        }
        return _this.onAllLoaded();
      };
    })(this));
  };

  SpellView.prototype.onAllLoaded = function() {
    this.spell.transpile(this.spell.source);
    this.spell.loaded = true;
    Backbone.Mediator.publish('tome:spell-loaded', {
      spell: this.spell
    });
    this.eventsSuppressed = false;
    this.createToolbarView();
    if (this.options.level.isType('web-dev')) {
      return this.updateHTML({
        create: true
      });
    }
  };

  SpellView.prototype.createDebugView = function() {
    if (this.options.level.isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev', 'web-dev')) {
      return;
    }
    this.debugView = new SpellDebugView({
      ace: this.ace,
      thang: this.thang,
      spell: this.spell
    });
    return this.$el.append(this.debugView.render().$el.hide());
  };

  SpellView.prototype.createTranslationView = function() {
    this.translationView = new SpellTranslationView({
      ace: this.ace,
      supermodel: this.supermodel
    });
    return this.$el.append(this.translationView.render().$el.hide());
  };

  SpellView.prototype.createToolbarView = function() {
    this.toolbarView = new SpellToolbarView({
      ace: this.ace
    });
    return this.$el.append(this.toolbarView.render().$el);
  };

  SpellView.prototype.onMouseOut = function(e) {
    var ref;
    return (ref = this.debugView) != null ? ref.onMouseOut(e) : void 0;
  };

  SpellView.prototype.onContactButtonPressed = function(e) {
    return this.saveSpade();
  };

  SpellView.prototype.getSource = function() {
    return this.ace.getValue();
  };

  SpellView.prototype.setThang = function(thang) {
    var ref, ref1, ref2;
    this.focus();
    this.lastScreenLineCount = null;
    this.updateLines();
    if (thang.id === ((ref = this.thang) != null ? ref.id : void 0)) {
      return;
    }
    this.thang = thang;
    this.spellThang = this.spell.thang;
    if (!this.debugView) {
      this.createDebugView();
    }
    if ((ref1 = this.debugView) != null) {
      ref1.thang = this.thang;
    }
    if (!this.translationView) {
      this.createTranslationView();
    }
    if ((ref2 = this.toolbarView) != null) {
      ref2.toggleFlow(false);
    }
    this.updateAether(false, false);
    return this.highlightCurrentLine();
  };

  SpellView.prototype.cast = function(preload, realTime, justBegin) {
    if (preload == null) {
      preload = false;
    }
    if (realTime == null) {
      realTime = false;
    }
    if (justBegin == null) {
      justBegin = false;
    }
    return Backbone.Mediator.publish('tome:cast-spell', {
      spell: this.spell,
      thang: this.thang,
      preload: preload,
      realTime: realTime,
      justBegin: justBegin
    });
  };

  SpellView.prototype.notifySpellChanged = function() {
    if (this.destroyed) {
      return;
    }
    return Backbone.Mediator.publish('tome:spell-changed', {
      spell: this.spell
    });
  };

  SpellView.prototype.notifyEditingEnded = function() {
    if (this.destroyed || this.aceDoc.undergoingFirepadOperation) {
      return;
    }
    return Backbone.Mediator.publish('tome:editing-ended', {});
  };

  SpellView.prototype.notifyEditingBegan = function() {
    if (this.destroyed || this.aceDoc.undergoingFirepadOperation) {
      return;
    }
    return Backbone.Mediator.publish('tome:editing-began', {});
  };

  SpellView.prototype.updateLines = function() {
    var cursorPosition, lastLine, lineCount, lineHeight, lines, linesAtMaxHeight, maxHeight, minHeight, newTop, ref, ref1, screenLineCount, spellPaletteAllowedHeight, spellToolbarHeight, spellTopBarHeight, tomeHeight, wasAtEnd;
    if (this.destroyed) {
      return;
    }
    lineCount = this.aceDoc.getLength();
    lastLine = this.aceDoc.$lines[lineCount - 1];
    if (lastLine !== '') {
      cursorPosition = this.ace.getCursorPosition();
      wasAtEnd = cursorPosition.row === lineCount - 1 && cursorPosition.column === lastLine.length;
      this.aceDoc.insertNewLine({
        row: lineCount,
        column: 0
      });
      if (wasAtEnd) {
        this.ace.navigateLeft(1);
      }
      ++lineCount;
      if ((ref = this.ace) != null) {
        if ((ref1 = ref.completer) != null) {
          ref1.showPopup(this.ace);
        }
      }
    }
    screenLineCount = this.aceSession.getScreenLength();
    if (screenLineCount !== this.lastScreenLineCount) {
      this.lastScreenLineCount = screenLineCount;
      lineHeight = this.ace.renderer.lineHeight || 20;
      tomeHeight = $('#tome-view').innerHeight();
      spellTopBarHeight = $('#spell-top-bar-view').outerHeight();
      spellToolbarHeight = $('.spell-toolbar-view').outerHeight();
      if (this.spellPaletteHeight == null) {
        this.spellPaletteHeight = 75;
      }
      spellPaletteAllowedHeight = Math.min(this.spellPaletteHeight, tomeHeight / 3);
      maxHeight = tomeHeight - spellTopBarHeight - spellToolbarHeight - spellPaletteAllowedHeight;
      minHeight = Math.max(8, (Math.min($("#canvas-wrapper").outerHeight(), $("#level-view").innerHeight() - 175) / lineHeight) - 2);
      linesAtMaxHeight = Math.floor(maxHeight / lineHeight);
      lines = Math.max(minHeight, Math.min(screenLineCount + 2, linesAtMaxHeight));
      this.ace.setOptions({
        minLines: lines,
        maxLines: lines
      });
      return newTop = 185 + lineHeight * lines;
    }
  };

  SpellView.prototype.hideProblemAlert = function() {
    if (this.destroyed) {
      return;
    }
    return Backbone.Mediator.publish('tome:hide-problem-alert', {});
  };

  SpellView.prototype.saveSpade = function() {
    var codeLog, compressedEvents, condensedEvents, spadeEvents;
    if (this.destroyed || !this.spade) {
      return;
    }
    spadeEvents = this.spade.compile();
    condensedEvents = this.spade.condense(spadeEvents);
    if (!condensedEvents.length) {
      return;
    }
    compressedEvents = LZString.compressToUTF16(JSON.stringify(condensedEvents));
    codeLog = new CodeLog({
      sessionID: this.options.session.id,
      level: {
        original: this.options.level.get('original'),
        majorVersion: (this.options.level.get('version')).major
      },
      levelSlug: this.options.level.get('slug'),
      userID: this.options.session.get('creator'),
      log: compressedEvents
    });
    return codeLog.save();
  };

  SpellView.prototype.onShowVictory = function(e) {
    if (this.saveSpadeTimeout != null) {
      window.clearTimeout(this.saveSpadeTimeout);
      return this.saveSpadeTimeout = null;
    }
  };

  SpellView.prototype.onManualCast = function(e) {
    var cast;
    cast = this.$el.parent().length;
    this.recompile(cast, e.realTime);
    if (cast) {
      this.focus();
    }
    if (this.options.level.isType('web-dev')) {
      this.sourceAtLastCast = this.getSource();
      this.ace.setStyle('spell-cast');
      return this.updateHTML({
        create: true
      });
    }
  };

  SpellView.prototype.reloadCode = function(cast) {
    if (cast == null) {
      cast = true;
    }
    if (cast) {
      this.spell.reloadCode();
    }
    this.thang = this.spell.thang.thang;
    this.updateACEText(this.spell.originalSource);
    this.lockDefaultCode(true);
    this.recompile(cast);
    Backbone.Mediator.publish('tome:spell-loaded', {
      spell: this.spell
    });
    return this.updateLines();
  };

  SpellView.prototype.recompile = function(cast, realTime) {
    var hasChanged;
    if (cast == null) {
      cast = true;
    }
    if (realTime == null) {
      realTime = false;
    }
    hasChanged = this.spell.source !== this.getSource();
    if (hasChanged) {
      this.spell.transpile(this.getSource());
      this.updateAether(true, false);
    }
    if (cast) {
      this.cast(false, realTime);
    }
    if (hasChanged) {
      return this.notifySpellChanged();
    }
  };

  SpellView.prototype.updateACEText = function(source) {
    var error, error1;
    this.eventsSuppressed = true;
    if (this.firepad) {
      this.firepad.setText(source);
    } else {
      this.ace.setValue(source);
      this.aceSession.setUndoManager(new UndoManager());
    }
    this.eventsSuppressed = false;
    try {
      return this.ace.resize(true);
    } catch (error1) {
      error = error1;
      return console.warn('Error resizing ACE after an update:', error);
    }
  };

  SpellView.prototype.createOnCodeChangeHandlers = function() {
    var onAnyChange, onSignificantChange;
    if (this.onCodeChangeMetaHandler) {
      this.aceDoc.removeListener('change', this.onCodeChangeMetaHandler);
    }
    onSignificantChange = [];
    onAnyChange = [_.debounce(this.updateAether, this.options.level.isType('game-dev') ? 10 : 500), _.debounce(this.notifyEditingEnded, 1000), _.throttle(this.notifyEditingBegan, 250), _.throttle(this.notifySpellChanged, 300), _.throttle(this.updateLines, 500), _.throttle(this.hideProblemAlert, 500)];
    if (this.options.level.get('requiredCode')) {
      onSignificantChange.push(_.debounce(this.checkRequiredCode, 750));
    }
    if (this.options.level.get('suspectCode')) {
      onSignificantChange.push(_.debounce(this.checkSuspectCode, 750));
    }
    if (this.options.level.isType('web-dev')) {
      onAnyChange.push(_.throttle(this.updateHTML, 10));
    }
    this.onCodeChangeMetaHandler = (function(_this) {
      return function() {
        if (_this.eventsSuppressed) {
          return;
        }
        if (_this.spellThang) {
          return _this.spell.hasChangedSignificantly(_this.getSource(), _this.spellThang.aether.raw, function(hasChanged) {
            var callback, j, k, len, len1, results;
            if (!_this.spellThang || hasChanged) {
              for (j = 0, len = onSignificantChange.length; j < len; j++) {
                callback = onSignificantChange[j];
                callback();
              }
            }
            results = [];
            for (k = 0, len1 = onAnyChange.length; k < len1; k++) {
              callback = onAnyChange[k];
              results.push(callback());
            }
            return results;
          });
        }
      };
    })(this);
    return this.aceDoc.on('change', this.onCodeChangeMetaHandler);
  };

  SpellView.prototype.onCursorActivity = function() {};

  SpellView.prototype.updateHTML = function(options) {
    if (options == null) {
      options = {};
    }
    if (this.spell.hasChanged(this.spell.getSource(), this.sourceAtLastCast)) {
      this.ace.unsetStyle('spell-cast');
    }
    this.clearWebDevErrors();
    return Backbone.Mediator.publish('tome:html-updated', {
      html: this.spell.constructHTML(this.getSource()),
      create: Boolean(options.create)
    });
  };

  SpellView.prototype.updateAether = function(force, fromCodeChange) {
    var aether, ref, source;
    if (force == null) {
      force = false;
    }
    if (fromCodeChange == null) {
      fromCodeChange = true;
    }
    if (!(aether = (ref = this.spellThang) != null ? ref.aether : void 0)) {
      return;
    }
    source = this.getSource();
    return this.spell.hasChangedSignificantly(source, aether.raw, (function(_this) {
      return function(hasChanged) {
        var castAether, codeHasChangedSignificantly, codeIsAsCast, finishUpdatingAether, needsUpdate, workerMessage;
        codeHasChangedSignificantly = force || hasChanged;
        needsUpdate = codeHasChangedSignificantly || _this.spellThang !== _this.lastUpdatedAetherSpellThang;
        if (!needsUpdate && aether === _this.displayedAether) {
          return;
        }
        castAether = _this.spellThang.castAether;
        codeIsAsCast = castAether && source === castAether.raw;
        if (codeIsAsCast) {
          aether = castAether;
        }
        if (!needsUpdate && aether === _this.displayedAether) {
          return;
        }
        finishUpdatingAether = function(aether) {
          _this.clearAetherDisplay();
          _this.displayAether(aether, codeIsAsCast);
          _this.lastUpdatedAetherSpellThang = _this.spellThang;
          if (fromCodeChange) {
            return _this.guessWhetherFinished(aether);
          }
        };
        _this.clearAetherDisplay();
        if (codeHasChangedSignificantly && !codeIsAsCast) {
          if (_this.worker) {
            workerMessage = {
              "function": 'transpile',
              spellKey: _this.spell.spellKey,
              source: source
            };
            _this.worker.addEventListener('message', function(e) {
              var workerData;
              workerData = JSON.parse(e.data);
              if (workerData["function"] === 'transpile' && workerData.spellKey === _this.spell.spellKey) {
                _this.worker.removeEventListener('message', arguments.callee, false);
                aether.problems = workerData.problems;
                aether.raw = source;
                return finishUpdatingAether(aether);
              }
            });
            return _this.worker.postMessage(JSON.stringify(workerMessage));
          } else {
            aether.transpile(source);
            return finishUpdatingAether(aether);
          }
        } else {
          return finishUpdatingAether(aether);
        }
      };
    })(this));
  };

  SpellView.prototype.clearAetherDisplay = function() {
    this.clearProblemsCreatedBy('aether');
    return this.highlightCurrentLine({});
  };

  SpellView.prototype.clearWebDevErrors = function() {
    return this.clearProblemsCreatedBy('web-dev-iframe');
  };

  SpellView.prototype.clearProblemsCreatedBy = function(createdBy) {
    var nonAetherAnnotations, problemsToClear;
    nonAetherAnnotations = _.reject(this.aceSession.getAnnotations(), function(annotation) {
      return annotation.createdBy === createdBy;
    });
    this.reallySetAnnotations(nonAetherAnnotations);
    problemsToClear = _.filter(this.problems, function(p) {
      return p.createdBy === createdBy;
    });
    problemsToClear.forEach(function(problem) {
      return problem.destroy();
    });
    this.problems = _.difference(this.problems, problemsToClear);
    return Backbone.Mediator.publish('tome:problems-updated', {
      spell: this.spell,
      problems: this.problems,
      isCast: false
    });
  };

  SpellView.prototype.convertAetherProblems = function(aether, aetherProblems, isCast) {
    return _.unique(aetherProblems, function(p) {
      var ref;
      return (ref = p.userInfo) != null ? ref.key : void 0;
    }).map((function(_this) {
      return function(aetherProblem) {
        return new Problem({
          aether: aether,
          aetherProblem: aetherProblem,
          ace: _this.ace,
          isCast: isCast,
          levelID: _this.options.levelID
        });
      };
    })(this));
  };

  SpellView.prototype.displayAether = function(aether, isCast) {
    var annotations, j, k, len, len1, newProblems, problem;
    if (isCast == null) {
      isCast = false;
    }
    this.displayedAether = aether;
    isCast = isCast || !_.isEmpty(aether.metrics) || _.some(aether.getAllProblems(), {
      type: 'runtime'
    });
    annotations = this.aceSession.getAnnotations();
    newProblems = this.convertAetherProblems(aether, aether.getAllProblems(), isCast);
    for (j = 0, len = newProblems.length; j < len; j++) {
      problem = newProblems[j];
      if (problem.annotation) {
        annotations.push(problem.annotation);
      }
    }
    if (isCast) {
      if (newProblems[0]) {
        this.displayProblemBanner(newProblems[0]);
      }
      for (k = 0, len1 = newProblems.length; k < len1; k++) {
        problem = newProblems[k];
        this.saveUserCodeProblem(aether, problem.aetherProblem);
      }
    }
    this.problems = this.problems.concat(newProblems);
    this.aceSession.setAnnotations(annotations);
    if (!_.isEmpty(aether.flow)) {
      this.highlightCurrentLine(aether.flow);
    }
    Backbone.Mediator.publish('tome:problems-updated', {
      spell: this.spell,
      problems: this.problems,
      isCast: isCast
    });
    return this.ace.resize();
  };

  SpellView.prototype.displayProblemBanner = function(problem) {
    var i, j, lineOffsetPx, ref;
    lineOffsetPx = 0;
    if (problem.row != null) {
      for (i = j = 0, ref = problem.row; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        lineOffsetPx += this.aceSession.getRowLength(i) * this.ace.renderer.lineHeight;
      }
      lineOffsetPx -= this.ace.session.getScrollTop();
    }
    return Backbone.Mediator.publish('tome:show-problem-alert', {
      problem: problem,
      lineOffsetPx: Math.max(lineOffsetPx, 0)
    });
  };

  SpellView.prototype.linesBeforeScript = function(html) {
    return _.size(html.split('<script>')[0].match(/\n/g));
  };

  SpellView.prototype.addAnnotation = function(annotation) {
    var annotations;
    annotations = this.aceSession.getAnnotations();
    annotations.push(annotation);
    return this.reallySetAnnotations(annotations);
  };

  SpellView.prototype.onWebDevError = function(error) {
    var offsetError, problem, userCodeHasChangedSinceLastCast;
    offsetError = _.merge({}, error, {
      line: error.line + this.linesBeforeScript(this.getSource())
    });
    userCodeHasChangedSinceLastCast = this.spell.hasChanged(this.spell.getSource(), this.sourceAtLastCast);
    problem = new Problem({
      error: offsetError,
      ace: this.ace,
      levelID: this.options.levelID,
      userCodeHasChangedSinceLastCast: userCodeHasChangedSinceLastCast
    });
    if (_.any(this.problems, function(preexistingProblem) {
      return problem.isEqual(preexistingProblem);
    })) {
      return problem.destroy();
    } else {
      this.problems.push(problem);
      this.displayProblemBanner(problem);
      if (problem.annotation) {
        this.addAnnotation(problem.annotation);
      }
      return Backbone.Mediator.publish('tome:problems-updated', {
        spell: this.spell,
        problems: this.problems,
        isCast: false
      });
    }
  };

  SpellView.prototype.onProblemsUpdated = function(arg) {
    var isCast, problems, spell;
    spell = arg.spell, problems = arg.problems, isCast = arg.isCast;
    this.ace[problems.length ? 'setStyle' : 'unsetStyle']('user-code-problem');
    return this.ace[isCast ? 'setStyle' : 'unsetStyle']('spell-cast');
  };

  SpellView.prototype.saveUserCodeProblem = function(aether, aetherProblem) {
    var errorLines, hashValue, lineInfoMatch, messageNoLineInfo, rawLines, ref;
    hashValue = aether.raw + aetherProblem.message;
    if (hashValue in this.savedProblems) {
      return;
    }
    this.savedProblems[hashValue] = true;
    if (!(Math.random() < 0.01)) {
      return;
    }
    this.userCodeProblem = new UserCodeProblem();
    this.userCodeProblem.set('code', aether.raw);
    if (aetherProblem.range) {
      rawLines = aether.raw.split('\n');
      errorLines = rawLines.slice(aetherProblem.range[0].row, aetherProblem.range[1].row + 1);
      this.userCodeProblem.set('codeSnippet', errorLines.join('\n'));
    }
    if (aetherProblem.hint) {
      this.userCodeProblem.set('errHint', aetherProblem.hint);
    }
    if (aetherProblem.id) {
      this.userCodeProblem.set('errId', aetherProblem.id);
    }
    if (aetherProblem.level) {
      this.userCodeProblem.set('errLevel', aetherProblem.level);
    }
    if (aetherProblem.message) {
      this.userCodeProblem.set('errMessage', aetherProblem.message);
      messageNoLineInfo = aetherProblem.message;
      if (lineInfoMatch = messageNoLineInfo.match(/^Line [0-9]+\: /)) {
        messageNoLineInfo = messageNoLineInfo.slice(lineInfoMatch[0].length);
      }
      this.userCodeProblem.set('errMessageNoLineInfo', messageNoLineInfo);
    }
    if (aetherProblem.range) {
      this.userCodeProblem.set('errRange', aetherProblem.range);
    }
    if (aetherProblem.type) {
      this.userCodeProblem.set('errType', aetherProblem.type);
    }
    if ((ref = aether.language) != null ? ref.id : void 0) {
      this.userCodeProblem.set('language', aether.language.id);
    }
    if (this.options.levelID) {
      this.userCodeProblem.set('levelID', this.options.levelID);
    }
    this.userCodeProblem.save();
    return null;
  };

  SpellView.prototype.guessWhetherFinished = function(aether) {
    var beginningOfLine, currentLine, cursorPosition, endOfLine, incompleteThis, valid;
    valid = !aether.getAllProblems().length;
    if (!valid) {
      return;
    }
    cursorPosition = this.ace.getCursorPosition();
    currentLine = _.string.rtrim(this.aceDoc.$lines[cursorPosition.row].replace(this.singleLineCommentRegex(), ''));
    endOfLine = cursorPosition.column >= currentLine.length;
    beginningOfLine = !currentLine.substr(0, cursorPosition.column).trim().length;
    incompleteThis = /^(s|se|sel|self|t|th|thi|this)$/.test(currentLine.trim());
    if (!incompleteThis && this.options.level.isType('game-dev')) {
      this.spell.transpile(this.getSource());
      return this.cast(false, false, true);
    } else if ((endOfLine || beginningOfLine) && !incompleteThis) {
      return this.preload();
    }
  };

  SpellView.prototype.singleLineCommentRegex = function() {
    var commentStart;
    if (this._singleLineCommentRegex) {
      this._singleLineCommentRegex.lastIndex = 0;
      return this._singleLineCommentRegex;
    }
    if (this.spell.language === 'html') {
      commentStart = commentStarts.html + "|" + commentStarts.css + "|" + commentStarts.javascript;
    } else {
      commentStart = commentStarts[this.spell.language] || '//';
    }
    this._singleLineCommentRegex = new RegExp("[ \t]*(" + commentStart + ")[^\"'\n]*");
    return this._singleLineCommentRegex;
  };

  SpellView.prototype.singleLineCommentOnlyRegex = function() {
    if (this._singleLineCommentOnlyRegex) {
      this._singleLineCommentOnlyRegex.lastIndex = 0;
      return this._singleLineCommentOnlyRegex;
    }
    this._singleLineCommentOnlyRegex = new RegExp('^' + this.singleLineCommentRegex().source);
    return this._singleLineCommentOnlyRegex;
  };

  SpellView.prototype.commentOutMyCode = function() {
    var comment, prefix;
    prefix = this.spell.language === 'javascript' ? 'return;  ' : 'return  ';
    return comment = prefix + commentStarts[this.spell.language];
  };

  SpellView.prototype.preload = function() {
    var key, oldSource, oldSpellThangAether, ref, ref1, ref2, ref3, results, value;
    if (this.spell.source.indexOf('while') !== -1) {
      return;
    }
    if (this.spell.source.length > 500) {
      return;
    }
    if (((ref = this.spellThang) != null ? (ref1 = ref.castAether) != null ? (ref2 = ref1.metrics) != null ? ref2.statementsExecuted : void 0 : void 0 : void 0) > 2000) {
      return;
    }
    if (this.options.level.isType('web-dev')) {
      return;
    }
    oldSource = this.spell.source;
    oldSpellThangAether = (ref3 = this.spell.thang) != null ? ref3.aether.serialize() : void 0;
    this.spell.transpile(this.getSource());
    this.cast(true);
    this.spell.source = oldSource;
    results = [];
    for (key in oldSpellThangAether) {
      value = oldSpellThangAether[key];
      results.push(this.spell.thang.aether[key] = value);
    }
    return results;
  };

  SpellView.prototype.onSpellChanged = function(e) {
    return this.spellHasChanged = true;
  };

  SpellView.prototype.onAceMouseOut = function(e) {
    return Backbone.Mediator.publish("web-dev:stop-hovering-line");
  };

  SpellView.prototype.onAceMouseMove = function(e) {
    var line, row;
    if (this.destroyed) {
      return;
    }
    row = e.getDocumentPosition().row;
    if (row === this.lastRowHovered) {
      return;
    }
    this.lastRowHovered = row;
    line = this.aceSession.getLine(row);
    Backbone.Mediator.publish("web-dev:hover-line", {
      row: row,
      line: line
    });
    return null;
  };

  SpellView.prototype.onSessionWillSave = function(e) {
    if (!(this.spellHasChanged && me.isAdmin())) {
      return;
    }
    setTimeout((function(_this) {
      return function() {
        if (!(_this.destroyed || _this.spellHasChanged)) {
          return _this.$el.find('.save-status').finish().show().fadeOut(2000);
        }
      };
    })(this), 1000);
    return this.spellHasChanged = false;
  };

  SpellView.prototype.onUserCodeProblem = function(e) {
    var ref;
    if (e.god !== this.options.god) {
      return;
    }
    if (e.problem.id === 'runtime_InfiniteLoop') {
      return this.onInfiniteLoop(e);
    }
    if (e.problem.userInfo.methodName !== this.spell.name) {
      return;
    }
    if (((ref = this.spell.thang) != null ? ref.thang.id : void 0) !== e.problem.userInfo.thangID) {
      return;
    }
    return this.spell.hasChangedSignificantly(this.getSource(), null, (function(_this) {
      return function(hasChanged) {
        if (hasChanged) {
          return;
        }
        _this.spell.thang.aether.addProblem(e.problem);
        _this.lastUpdatedAetherSpellThang = null;
        return _this.updateAether(false, false);
      };
    })(this));
  };

  SpellView.prototype.onNonUserCodeProblem = function(e) {
    var problem, ref;
    if (e.god !== this.options.god) {
      return;
    }
    if (!this.spellThang) {
      return;
    }
    problem = this.spellThang.aether.createUserCodeProblem({
      type: 'runtime',
      kind: 'Unhandled',
      message: "Unhandled error: " + e.problem.message
    });
    this.spellThang.aether.addProblem(problem);
    if ((ref = this.spellThang.castAether) != null) {
      ref.addProblem(problem);
    }
    this.lastUpdatedAetherSpellThang = null;
    return this.updateAether(false, false);
  };

  SpellView.prototype.onInfiniteLoop = function(e) {
    var ref;
    if (!this.spellThang) {
      return;
    }
    this.spellThang.aether.addProblem(e.problem);
    if ((ref = this.spellThang.castAether) != null) {
      ref.addProblem(e.problem);
    }
    this.lastUpdatedAetherSpellThang = null;
    return this.updateAether(false, false);
  };

  SpellView.prototype.onNewWorld = function(e) {
    var aether, ref, ref1, thang;
    if (thang = e.world.getThangByID((ref = this.spell.thang) != null ? ref.thang.id : void 0)) {
      aether = (ref1 = e.world.userCodeMap[thang.id]) != null ? ref1[this.spell.name] : void 0;
      this.spell.thang.castAether = aether;
      this.spell.thang.aether = this.spell.createAether(thang);
    } else {
      this.spell.thang = null;
    }
    this.spell.transpile();
    return this.updateAether(false, false);
  };

  SpellView.prototype.focus = function() {
    if (!(this.controlsEnabled && this.writable && $('.modal:visible').length === 0)) {
      return;
    }
    if (this.ace.isFocused()) {
      return;
    }
    this.ace.focus();
    return this.ace.clearSelection();
  };

  SpellView.prototype.onFrameChanged = function(e) {
    var ref, ref1;
    if (!(this.spellThang && ((ref = e.selectedThang) != null ? ref.id : void 0) === ((ref1 = this.spellThang) != null ? ref1.thang.id : void 0))) {
      return;
    }
    this.thang = e.selectedThang;
    return this.highlightCurrentLine();
  };

  SpellView.prototype.onCoordinateSelected = function(e) {
    if (!(this.ace.isFocused() && (e.x != null) && (e.y != null))) {
      return;
    }
    if (this.spell.language === 'python') {
      this.ace.insert("{\"x\": " + e.x + ", \"y\": " + e.y + "}");
    } else if (this.spell.language === 'lua') {
      this.ace.insert("{x=" + e.x + ", y=" + e.y + "}");
    } else {
      this.ace.insert("{x: " + e.x + ", y: " + e.y + "}");
    }
    return this.highlightCurrentLine();
  };

  SpellView.prototype.onStatementIndexUpdated = function(e) {
    if (e.ace !== this.ace) {
      return;
    }
    return this.highlightCurrentLine();
  };

  SpellView.prototype.highlightCurrentLine = function(flow) {
    var callNumber, callState, clazz, currentCallIndex, end, executed, executedRows, gotVariableStates, i, j, k, lastExecuted, len, len1, len2, len3, m, marked, markerRange, markerType, matched, n, o, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, row, showToolbarView, start, state, statementIndex, statementNumber, states;
    if (!this.destroyed) {
      this.highlightEntryPoints();
    }
    if (flow == null) {
      flow = (ref = this.spellThang) != null ? (ref1 = ref.castAether) != null ? ref1.flow : void 0 : void 0;
    }
    if (!(flow && this.thang)) {
      return;
    }
    executed = [];
    executedRows = {};
    matched = false;
    states = (ref2 = flow.states) != null ? ref2 : [];
    currentCallIndex = null;
    for (callNumber = j = 0, len = states.length; j < len; callNumber = ++j) {
      callState = states[callNumber];
      if ((currentCallIndex == null) && ((ref3 = callState.userInfo) != null ? ref3.time : void 0) > this.thang.world.age) {
        currentCallIndex = callNumber - 1;
      }
      if (matched) {
        executed.pop();
        break;
      }
      executed.push([]);
      ref4 = callState.statements;
      for (statementNumber = k = 0, len1 = ref4.length; k < len1; statementNumber = ++k) {
        state = ref4[statementNumber];
        if (((ref5 = state.userInfo) != null ? ref5.time : void 0) > this.thang.world.age) {
          matched = true;
          break;
        }
        _.last(executed).push(state);
        executedRows[state.range[0].row] = true;
      }
    }
    if (currentCallIndex == null) {
      currentCallIndex = callNumber - 1;
    }
    this.decoratedGutter = this.decoratedGutter || {};
    ref6 = (this.markerRanges != null ? this.markerRanges : this.markerRanges = []);
    for (m = 0, len2 = ref6.length; m < len2; m++) {
      markerRange = ref6[m];
      markerRange.start.detach();
      markerRange.end.detach();
      this.aceSession.removeMarker(markerRange.id);
    }
    this.markerRanges = [];
    for (row = n = 0, ref7 = this.aceSession.getLength(); 0 <= ref7 ? n < ref7 : n > ref7; row = 0 <= ref7 ? ++n : --n) {
      if (!executedRows[row]) {
        this.aceSession.removeGutterDecoration(row, 'executing');
        this.aceSession.removeGutterDecoration(row, 'executed');
        this.decoratedGutter[row] = '';
      }
    }
    lastExecuted = _.last(executed);
    showToolbarView = executed.length && this.spellThang.castAether.metrics.statementsExecuted > 3 && !this.options.level.get('hidesCodeToolbar');
    showToolbarView = false;
    if (showToolbarView) {
      statementIndex = Math.max(0, lastExecuted.length - 1);
      if ((ref8 = this.toolbarView) != null) {
        ref8.toggleFlow(true);
      }
      if ((ref9 = this.toolbarView) != null) {
        ref9.setCallState(states[currentCallIndex], statementIndex, currentCallIndex, this.spellThang.castAether.metrics);
      }
      if (((ref10 = this.toolbarView) != null ? ref10.statementIndex : void 0) != null) {
        lastExecuted = lastExecuted.slice(0, +this.toolbarView.statementIndex + 1 || 9e9);
      }
    } else {
      if ((ref11 = this.toolbarView) != null) {
        ref11.toggleFlow(false);
      }
      if ((ref12 = this.debugView) != null) {
        ref12.setVariableStates({});
      }
    }
    marked = {};
    gotVariableStates = false;
    ref13 = lastExecuted != null ? lastExecuted : [];
    for (i = o = 0, len3 = ref13.length; o < len3; i = ++o) {
      state = ref13[i];
      ref14 = state.range, start = ref14[0], end = ref14[1];
      clazz = i === lastExecuted.length - 1 ? 'executing' : 'executed';
      if (clazz === 'executed') {
        if (marked[start.row]) {
          continue;
        }
        marked[start.row] = true;
        markerType = 'fullLine';
      } else {
        if ((ref15 = this.debugView) != null) {
          ref15.setVariableStates(state.variables);
        }
        gotVariableStates = true;
        markerType = 'text';
      }
      markerRange = new Range(start.row, start.col, end.row, end.col);
      markerRange.start = this.aceDoc.createAnchor(markerRange.start);
      markerRange.end = this.aceDoc.createAnchor(markerRange.end);
      markerRange.id = this.aceSession.addMarker(markerRange, clazz, markerType);
      this.markerRanges.push(markerRange);
      if (executedRows[start.row] && this.decoratedGutter[start.row] !== clazz) {
        if (this.decoratedGutter[start.row] !== '') {
          this.aceSession.removeGutterDecoration(start.row, this.decoratedGutter[start.row]);
        }
        this.aceSession.addGutterDecoration(start.row, clazz);
        this.decoratedGutter[start.row] = clazz;
        if (application.isIPadApp) {
          Backbone.Mediator.publish("tome:highlight-line", {
            line: start.row
          });
        }
      }
    }
    if (!gotVariableStates) {
      if ((ref16 = this.debugView) != null) {
        ref16.setVariableStates({});
      }
    }
    return null;
  };

  SpellView.prototype.highlightEntryPoints = function() {
    var commentStart, i, indent, index, isEntryPoint, j, k, len, len1, line, lineHasChanged, lineHasCode, lineHasComment, lineHasExplicitMarker, lineIsBlank, lines, movedIndex, originalLine, originalLines, pastIntroComments, previousLine, previousLineHadCode, previousLineHadComment, previousLineWasBlank, ref, results, seenAnEntryPoint, session;
    lines = this.aceDoc.$lines;
    originalLines = this.spell.originalSource.split('\n');
    session = this.aceSession;
    commentStart = commentStarts[this.spell.language] || '//';
    seenAnEntryPoint = false;
    previousLine = null;
    previousLineHadComment = false;
    previousLineHadCode = false;
    previousLineWasBlank = false;
    pastIntroComments = false;
    results = [];
    for (index = j = 0, len = lines.length; j < len; index = ++j) {
      line = lines[index];
      session.removeGutterDecoration(index, 'entry-point');
      session.removeGutterDecoration(index, 'next-entry-point');
      ref = [0, 4, 8, 12, 16];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        session.removeGutterDecoration(index, "entry-point-indent-" + i);
      }
      lineHasComment = this.singleLineCommentRegex().test(line);
      lineHasCode = line.trim()[0] && !this.singleLineCommentOnlyRegex().test(line);
      lineIsBlank = /^[ \t]*$/.test(line);
      lineHasExplicitMarker = line.indexOf('∆') !== -1;
      originalLine = originalLines[index];
      lineHasChanged = line !== originalLine;
      isEntryPoint = lineIsBlank && previousLineHadComment && !previousLineHadCode && pastIntroComments;
      if (isEntryPoint && lineHasChanged) {
        movedIndex = originalLines.indexOf(previousLine);
        if (movedIndex !== -1 && line === originalLines[movedIndex + 1]) {
          lineHasChanged = false;
        } else {
          isEntryPoint = false;
        }
      }
      if (lineHasExplicitMarker) {
        if (lineHasChanged) {
          if (originalLines.indexOf(line) !== -1) {
            lineHasChanged = false;
            isEntryPoint = true;
          }
        } else {
          isEntryPoint = true;
        }
      }
      if (isEntryPoint) {
        session.addGutterDecoration(index, 'entry-point');
        if (!seenAnEntryPoint) {
          session.addGutterDecoration(index, 'next-entry-point');
          seenAnEntryPoint = true;
        }
        indent = 0;
        while (/\s/.test(line[indent])) {
          indent++;
        }
        indent = Math.min(16, Math.floor(indent / 4) * 4);
        session.addGutterDecoration(index, "entry-point-indent-" + indent);
      }
      previousLine = line;
      previousLineHadComment = lineHasComment;
      previousLineHadCode = lineHasCode;
      previousLineWasBlank = lineIsBlank;
      results.push(pastIntroComments || (pastIntroComments = lineHasCode || previousLineWasBlank));
    }
    return results;
  };

  SpellView.prototype.onAnnotationClick = function() {
    return Backbone.Mediator.publish('tome:jiggle-problem-alert', {});
  };

  SpellView.prototype.onGutterClick = function() {
    return this.ace.clearSelection();
  };

  SpellView.prototype.onDisableControls = function(e) {
    return this.toggleControls(e, false);
  };

  SpellView.prototype.onEnableControls = function(e) {
    return this.toggleControls(e, this.writable);
  };

  SpellView.prototype.toggleControls = function(e, enabled) {
    var disabled, wasFocused;
    if (this.destroyed) {
      return;
    }
    if ((e != null ? e.controls : void 0) && !(indexOf.call(e.controls, 'editor') >= 0)) {
      return;
    }
    if (enabled === this.controlsEnabled) {
      return;
    }
    this.controlsEnabled = enabled && this.writable;
    disabled = !enabled;
    wasFocused = this.ace.isFocused();
    this.ace.setReadOnly(disabled);
    this.ace[disabled ? 'setStyle' : 'unsetStyle']('disabled');
    this.toggleBackground();
    if (disabled && wasFocused) {
      return $('body').focus();
    }
  };

  SpellView.prototype.toggleBackground = function() {
    var background;
    background = this.$el.find('img.code-background')[0];
    if (background.naturalWidth === 0) {
      return _.delay(this.toggleBackground, 100);
    }
    if (this.controlsEnabled) {
      filters.revertImage(background, 'span.code-background');
    }
    if (!this.controlsEnabled) {
      return filters.darkenImage(background, 'span.code-background', 0.8);
    }
  };

  SpellView.prototype.onSpellBeautify = function(e) {
    var pretty, ugly;
    if (!(this.spellThang && (this.ace.isFocused() || e.spell === this.spell))) {
      return;
    }
    ugly = this.getSource();
    pretty = this.spellThang.aether.beautify(ugly.replace(/\bloop\b/g, 'while (__COCO_LOOP_CONSTRUCT__)')).replace(/while \(__COCO_LOOP_CONSTRUCT__\)/g, 'loop');
    return this.ace.setValue(pretty);
  };

  SpellView.prototype.onMaximizeToggled = function(e) {
    return _.delay(((function(_this) {
      return function() {
        return _this.resize();
      };
    })(this)), 500 + 100);
  };

  SpellView.prototype.onWindowResize = function(e) {
    this.spellPaletteHeight = null;
    return _.delay(((function(_this) {
      return function() {
        return typeof _this.resize === "function" ? _this.resize() : void 0;
      };
    })(this)), 500 + 100);
  };

  SpellView.prototype.resize = function() {
    var ref;
    if ((ref = this.ace) != null) {
      ref.resize(true);
    }
    this.lastScreenLineCount = null;
    return this.updateLines();
  };

  SpellView.prototype.onChangeEditorConfig = function(e) {
    var aceConfig, ref, ref1, ref2;
    aceConfig = (ref = me.get('aceConfig')) != null ? ref : {};
    this.ace.setDisplayIndentGuides(aceConfig.indentGuides);
    this.ace.setShowInvisibles(aceConfig.invisibles);
    this.ace.setKeyboardHandler(this.keyBindings[(ref1 = aceConfig.keyBindings) != null ? ref1 : 'default']);
    return this.updateAutocomplete((ref2 = aceConfig.liveCompletion) != null ? ref2 : false);
  };

  SpellView.prototype.onChangeLanguage = function(e) {
    var ref, wasDefault;
    if (!this.spell.canWrite()) {
      return;
    }
    this.aceSession.setMode(utils.aceEditModes[e.language]);
    if ((ref = this.autocomplete) != null) {
      ref.set('language', utils.aceEditModes[e.language].substr('ace/mode/'));
    }
    wasDefault = this.getSource() === this.spell.originalSource;
    this.spell.setLanguage(e.language);
    if (wasDefault) {
      return this.reloadCode(true);
    }
  };

  SpellView.prototype.onInsertSnippet = function(e) {
    var ref, ref1, snippetCode, snippetManager;
    snippetCode = null;
    if ((ref = e.doc.snippets) != null ? (ref1 = ref[e.language]) != null ? ref1.code : void 0 : void 0) {
      snippetCode = e.doc.snippets[e.language].code;
    } else if ((e.formatted.type !== 'snippet') && (e.formatted.shortName != null)) {
      snippetCode = e.formatted.shortName;
    }
    if (snippetCode == null) {
      return;
    }
    snippetManager = ace.require('ace/snippets').snippetManager;
    snippetManager.insertSnippet(this.ace, snippetCode);
  };

  SpellView.prototype.dismiss = function() {
    return this.spell.hasChangedSignificantly(this.getSource(), null, (function(_this) {
      return function(hasChanged) {
        if (hasChanged) {
          return _this.recompile();
        }
      };
    })(this));
  };

  SpellView.prototype.onScriptStateChange = function(e) {
    return this.scriptRunning = e.currentScript === null ? false : true;
  };

  SpellView.prototype.onPlaybackEndedChanged = function(e) {
    var ref;
    return $((ref = this.ace) != null ? ref.container : void 0).toggleClass('playback-ended', e.ended);
  };

  SpellView.prototype.checkRequiredCode = function() {
    var j, len, requiredCodeFragment, requiredCodeFragments, results, source;
    if (this.destroyed) {
      return;
    }
    source = this.getSource().replace(this.singleLineCommentRegex(), '');
    requiredCodeFragments = this.options.level.get('requiredCode');
    results = [];
    for (j = 0, len = requiredCodeFragments.length; j < len; j++) {
      requiredCodeFragment = requiredCodeFragments[j];
      if (source.indexOf(requiredCodeFragment) === -1) {
        if (this.warnedCodeFragments == null) {
          this.warnedCodeFragments = {};
        }
        if (!this.warnedCodeFragments[requiredCodeFragment]) {
          Backbone.Mediator.publish('tome:required-code-fragment-deleted', {
            codeFragment: requiredCodeFragment
          });
        }
        results.push(this.warnedCodeFragments[requiredCodeFragment] = true);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  SpellView.prototype.checkSuspectCode = function() {
    var detectedSuspectCodeFragmentNames, j, k, lastDetectedSuspectCodeFragmentName, len, len1, pattern, ref, ref1, source, suspectCodeFragment, suspectCodeFragments;
    if (this.destroyed) {
      return;
    }
    source = this.getSource().replace(this.singleLineCommentRegex(), '');
    suspectCodeFragments = this.options.level.get('suspectCode');
    detectedSuspectCodeFragmentNames = [];
    for (j = 0, len = suspectCodeFragments.length; j < len; j++) {
      suspectCodeFragment = suspectCodeFragments[j];
      pattern = new RegExp(suspectCodeFragment.pattern, 'm');
      if (pattern.test(source)) {
        if (this.warnedCodeFragments == null) {
          this.warnedCodeFragments = {};
        }
        if (!this.warnedCodeFragments[suspectCodeFragment.name]) {
          Backbone.Mediator.publish('tome:suspect-code-fragment-added', {
            codeFragment: suspectCodeFragment.name,
            codeLanguage: this.spell.language
          });
        }
        this.warnedCodeFragments[suspectCodeFragment.name] = true;
        detectedSuspectCodeFragmentNames.push(suspectCodeFragment.name);
      }
    }
    ref1 = (ref = this.lastDetectedSuspectCodeFragmentNames) != null ? ref : [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      lastDetectedSuspectCodeFragmentName = ref1[k];
      if (indexOf.call(detectedSuspectCodeFragmentNames, lastDetectedSuspectCodeFragmentName) < 0) {
        Backbone.Mediator.publish('tome:suspect-code-fragment-deleted', {
          codeFragment: lastDetectedSuspectCodeFragmentName,
          codeLanguage: this.spell.language
        });
      }
    }
    return this.lastDetectedSuspectCodeFragmentNames = detectedSuspectCodeFragmentNames;
  };

  SpellView.prototype.destroy = function() {
    var command, j, len, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    $((ref = this.ace) != null ? ref.container : void 0).find('.ace_gutter').off('click', '.ace_error, .ace_warning, .ace_info', this.onAnnotationClick);
    $((ref1 = this.ace) != null ? ref1.container : void 0).find('.ace_gutter').off('click', this.onGutterClick);
    if ((ref2 = this.firepad) != null) {
      ref2.dispose();
    }
    ref3 = this.aceCommands;
    for (j = 0, len = ref3.length; j < len; j++) {
      command = ref3[j];
      if ((ref4 = this.ace) != null) {
        ref4.commands.removeCommand(command);
      }
    }
    if ((ref5 = this.ace) != null) {
      ref5.destroy();
    }
    if ((ref6 = this.aceDoc) != null) {
      ref6.off('change', this.onCodeChangeMetaHandler);
    }
    if ((ref7 = this.aceSession) != null) {
      ref7.selection.off('changeCursor', this.onCursorActivity);
    }
    this.destroyAceEditor(this.ace);
    if ((ref8 = this.debugView) != null) {
      ref8.destroy();
    }
    if ((ref9 = this.translationView) != null) {
      ref9.destroy();
    }
    if ((ref10 = this.toolbarView) != null) {
      ref10.destroy();
    }
    if (this.editorLang != null) {
      if ((ref11 = this.autocomplete) != null) {
        ref11.addSnippets([], this.editorLang);
      }
    }
    $(window).off('resize', this.onWindowResize);
    window.clearTimeout(this.saveSpadeTimeout);
    this.saveSpadeTimeout = null;
    return SpellView.__super__.destroy.call(this);
  };

  return SpellView;

})(CocoView);

commentStarts = {
  javascript: '//',
  python: '#',
  coffeescript: '#',
  lua: '--',
  java: '//',
  html: '<!--',
  css: '/\\*'
};
});

;require.register("views/play/level/tome/TomeView", function(exports, require, module) {
var CastButtonView, CocoView, Spell, SpellPaletteView, TomeView, me, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CocoView = require('views/core/CocoView');

template = require('templates/play/level/tome/tome');

me = require('core/auth').me;

Spell = require('./Spell');

SpellPaletteView = require('./SpellPaletteView');

CastButtonView = require('./CastButtonView');

utils = require('core/utils');

module.exports = TomeView = (function(superClass) {
  extend(TomeView, superClass);

  TomeView.prototype.id = 'tome-view';

  TomeView.prototype.template = template;

  TomeView.prototype.controlsEnabled = true;

  TomeView.prototype.cache = false;

  TomeView.prototype.subscriptions = {
    'tome:spell-loaded': 'onSpellLoaded',
    'tome:cast-spell': 'onCastSpell',
    'tome:change-language': 'updateLanguageForAllSpells',
    'surface:sprite-selected': 'onSpriteSelected',
    'god:new-world-created': 'onNewWorld',
    'tome:comment-my-code': 'onCommentMyCode',
    'tome:select-primary-sprite': 'onSelectPrimarySprite'
  };

  TomeView.prototype.events = {
    'click': 'onClick'
  };

  function TomeView(options) {
    TomeView.__super__.constructor.call(this, options);
    if (!options.god) {
      console.error("TomeView created with no God!");
    }
  }

  TomeView.prototype.afterRender = function() {
    var programmableThangs, ref, warning;
    TomeView.__super__.afterRender.call(this);
    this.worker = this.createWorker();
    programmableThangs = _.filter(this.options.thangs, function(t) {
      return t.isProgrammable && t.programmableMethods;
    });
    if (this.options.level.isType('web-dev')) {
      if (this.fakeProgrammableThang = this.createFakeProgrammableThang()) {
        programmableThangs = [this.fakeProgrammableThang];
      }
    }
    this.createSpells(programmableThangs, (ref = programmableThangs[0]) != null ? ref.world : void 0);
    this.castButton = this.insertSubView(new CastButtonView({
      spells: this.spells,
      level: this.options.level,
      session: this.options.session,
      god: this.options.god
    }));
    this.teamSpellMap = this.generateTeamSpellMap(this.spells);
    if (!programmableThangs.length) {
      this.cast();
      warning = 'Warning: There are no Programmable Thangs in this level, which makes it unplayable.';
      noty({
        text: warning,
        layout: 'topCenter',
        type: 'warning',
        killer: false,
        timeout: 15000,
        dismissQueue: true,
        maxVisible: 3
      });
      console.warn(warning);
    }
    return delete this.options.thangs;
  };

  TomeView.prototype.onNewWorld = function(e) {
    var programmableThangs;
    programmableThangs = _.filter(e.thangs, function(t) {
      return t.isProgrammable && t.programmableMethods && t.inThangList;
    });
    return this.createSpells(programmableThangs, e.world);
  };

  TomeView.prototype.onCommentMyCode = function(e) {
    var commentedSource, ref, spell, spellKey;
    ref = this.spells;
    for (spellKey in ref) {
      spell = ref[spellKey];
      if (!(spell.canWrite())) {
        continue;
      }
      console.log('Commenting out', spellKey);
      commentedSource = spell.view.commentOutMyCode() + 'Commented out to stop infinite loop.\n' + spell.getSource();
      spell.view.updateACEText(commentedSource);
      spell.view.recompile(false);
    }
    return this.cast();
  };

  TomeView.prototype.createWorker = function() {
    if (typeof Worker === "undefined" || Worker === null) {
      return null;
    }
    if (window.application.isIPadApp) {
      return null;
    }
    return new Worker('/javascripts/workers/aether_worker.js');
  };

  TomeView.prototype.generateTeamSpellMap = function(spellObject) {
    var spell, spellName, spellNameElements, teamName, teamSpellMap, thangName;
    teamSpellMap = {};
    for (spellName in spellObject) {
      spell = spellObject[spellName];
      teamName = spell.team;
      if (teamSpellMap[teamName] == null) {
        teamSpellMap[teamName] = [];
      }
      spellNameElements = spellName.split('/');
      thangName = spellNameElements[0];
      spellName = spellNameElements[1];
      if (indexOf.call(teamSpellMap[teamName], thangName) < 0) {
        teamSpellMap[teamName].push(thangName);
      }
    }
    return teamSpellMap;
  };

  TomeView.prototype.createSpells = function(programmableThangs, world) {
    var i, j, k, language, len, len1, len2, method, methodName, pathComponents, pathPrefixComponents, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, skipProtectAPI, spell, spellKey, spellKeys, thang, thangID;
    language = (ref = (ref1 = this.options.session.get('codeLanguage')) != null ? ref1 : (ref2 = me.get('aceConfig')) != null ? ref2.language : void 0) != null ? ref : 'python';
    pathPrefixComponents = ['play', 'level', this.options.levelID, this.options.session.id, 'code'];
    if (this.spells == null) {
      this.spells = {};
    }
    if (this.thangSpells == null) {
      this.thangSpells = {};
    }
    for (i = 0, len = programmableThangs.length; i < len; i++) {
      thang = programmableThangs[i];
      if (this.thangSpells[thang.id] != null) {
        continue;
      }
      this.thangSpells[thang.id] = [];
      ref3 = thang.programmableMethods;
      for (methodName in ref3) {
        method = ref3[methodName];
        pathComponents = [thang.id, methodName];
        pathComponents[0] = _.string.slugify(pathComponents[0]);
        spellKey = pathComponents.join('/');
        this.thangSpells[thang.id].push(spellKey);
        skipProtectAPI = this.getQueryVariable('skip_protect_api', false);
        spell = this.spells[spellKey] = new Spell({
          hintsState: this.options.hintsState,
          programmableMethod: method,
          spellKey: spellKey,
          pathComponents: pathPrefixComponents.concat(pathComponents),
          session: this.options.session,
          otherSession: this.options.otherSession,
          supermodel: this.supermodel,
          skipProtectAPI: skipProtectAPI,
          worker: this.worker,
          language: language,
          spectateView: this.options.spectateView,
          spectateOpponentCodeLanguage: this.options.spectateOpponentCodeLanguage,
          observing: this.options.observing,
          levelID: this.options.levelID,
          level: this.options.level,
          god: this.options.god,
          courseID: this.options.courseID
        });
      }
    }
    ref4 = this.thangSpells;
    for (thangID in ref4) {
      spellKeys = ref4[thangID];
      thang = (ref5 = this.fakeProgrammableThang) != null ? ref5 : world.getThangByID(thangID);
      if (thang) {
        for (j = 0, len1 = spellKeys.length; j < len1; j++) {
          spellKey = spellKeys[j];
          this.spells[spellKey].addThang(thang);
        }
      } else {
        delete this.thangSpells[thangID];
        ref6 = this.spells;
        for (k = 0, len2 = ref6.length; k < len2; k++) {
          spell = ref6[k];
          spell.removeThangID(thangID);
        }
      }
    }
    ref7 = this.spells;
    for (spellKey in ref7) {
      spell = ref7[spellKey];
      if (!(!spell.canRead())) {
        continue;
      }
      spell.transpile();
      spell.loaded = true;
    }
    return null;
  };

  TomeView.prototype.onSpellLoaded = function(e) {
    var justBegin, ref, spell, spellID;
    if (me.get('name') === 'Shanakin') {
      console.log('onSpellLoaded', e);
    }
    ref = this.spells;
    for (spellID in ref) {
      spell = ref[spellID];
      if (!spell.loaded) {
        return;
      }
    }
    if (me.get('name') === 'Shanakin') {
      console.log('... all loaded, let us begin');
    }
    justBegin = this.options.level.isType('game-dev');
    return this.cast(false, false, justBegin);
  };

  TomeView.prototype.onCastSpell = function(e) {
    return this.cast(e != null ? e.preload : void 0, e != null ? e.realTime : void 0, e != null ? e.justBegin : void 0);
  };

  TomeView.prototype.cast = function(preload, realTime, justBegin) {
    var difficulty, ref, ref1, ref2, ref3, ref4, ref5, sessionState;
    if (preload == null) {
      preload = false;
    }
    if (realTime == null) {
      realTime = false;
    }
    if (justBegin == null) {
      justBegin = false;
    }
    if (this.options.level.isType('web-dev')) {
      return;
    }
    sessionState = (ref = this.options.session.get('state')) != null ? ref : {};
    if (realTime) {
      sessionState.submissionCount = ((ref1 = sessionState.submissionCount) != null ? ref1 : 0) + 1;
      sessionState.flagHistory = _.filter((ref2 = sessionState.flagHistory) != null ? ref2 : [], (function(_this) {
        return function(event) {
          var ref3;
          return event.team !== ((ref3 = _this.options.session.get('team')) != null ? ref3 : 'humans');
        };
      })(this));
      if (this.options.level.get('replayable')) {
        sessionState.lastUnsuccessfulSubmissionTime = new Date();
      }
      this.options.session.set('state', sessionState);
    }
    difficulty = (ref3 = sessionState.difficulty) != null ? ref3 : 0;
    if (this.options.observing) {
      difficulty = Math.max(0, difficulty - 1);
    }
    Backbone.Mediator.publish('level:set-playing', {
      playing: false
    });
    return Backbone.Mediator.publish('tome:cast-spells', {
      spells: this.spells,
      preload: preload,
      realTime: realTime,
      justBegin: justBegin,
      difficulty: difficulty,
      submissionCount: (ref4 = sessionState.submissionCount) != null ? ref4 : 0,
      flagHistory: (ref5 = sessionState.flagHistory) != null ? ref5 : [],
      god: this.options.god,
      fixedSeed: this.options.fixedSeed
    });
  };

  TomeView.prototype.onClick = function(e) {
    if (!$(e.target).parents('.popover').length) {
      return Backbone.Mediator.publish('tome:focus-editor', {});
    }
  };

  TomeView.prototype.onSpriteSelected = function(e) {
    var ref, spell;
    if (this.spellView && ((ref = this.options.level.get('type', true)) === 'hero' || ref === 'hero-ladder' || ref === 'hero-coop' || ref === 'course' || ref === 'course-ladder' || ref === 'game-dev' || ref === 'web-dev')) {
      return;
    }
    spell = this.spellFor(e.thang, e.spellName);
    if (spell != null ? spell.canRead() : void 0) {
      return this.setSpellView(spell, e.thang);
    }
  };

  TomeView.prototype.setSpellView = function(spell, thang) {
    var ref, ref1;
    if (spell.view !== this.spellView) {
      this.spellView = spell.view;
      this.spellTopBarView = spell.topBarView;
      this.$el.find('#' + this.spellView.id).after(this.spellView.el).remove();
      this.$el.find('#' + this.spellTopBarView.id).after(this.spellTopBarView.el).remove();
      if ((ref = this.castButton) != null) {
        ref.attachTo(this.spellView);
      }
    }
    this.updateSpellPalette(thang, spell);
    return (ref1 = this.spellView) != null ? ref1.setThang(thang) : void 0;
  };

  TomeView.prototype.updateSpellPalette = function(thang, spell) {
    return this.options.playLevelView.updateSpellPalette(thang, spell);
  };

  TomeView.prototype.spellFor = function(thang, spellName) {
    var selectedThangSpells, spell, spellKey;
    if (!(thang != null ? thang.isProgrammable : void 0)) {
      return null;
    }
    if (!this.thangSpells[thang.id]) {
      return;
    }
    selectedThangSpells = (function() {
      var i, len, ref, results;
      ref = this.thangSpells[thang.id];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        spellKey = ref[i];
        results.push(this.spells[spellKey]);
      }
      return results;
    }).call(this);
    if (spellName) {
      spell = _.find(selectedThangSpells, {
        name: spellName
      });
    } else {
      spell = _.find(selectedThangSpells, function(spell) {
        return spell.canWrite();
      });
      if (spell == null) {
        spell = _.find(selectedThangSpells, function(spell) {
          return spell.canRead();
        });
      }
    }
    return spell;
  };

  TomeView.prototype.reloadAllCode = function() {
    var ref, ref1, spell, spellKey;
    if (utils.getQueryVariable('dev')) {
      this.options.playLevelView.spellPaletteView.destroy();
      this.updateSpellPalette(this.spellView.thang, this.spellView.spell);
    }
    ref = this.spells;
    for (spellKey in ref) {
      spell = ref[spellKey];
      if (spell.view && (spell.team === me.team || ((ref1 = spell.team) === 'common' || ref1 === 'neutral' || ref1 === null))) {
        spell.view.reloadCode(false);
      }
    }
    return this.cast(false, false);
  };

  TomeView.prototype.updateLanguageForAllSpells = function(e) {
    var ref, spell, spellKey;
    ref = this.spells;
    for (spellKey in ref) {
      spell = ref[spellKey];
      if (spell.canWrite()) {
        spell.updateLanguageAether(e.language);
      }
    }
    if (e.reload) {
      return this.reloadAllCode();
    } else {
      return this.cast();
    }
  };

  TomeView.prototype.onSelectPrimarySprite = function(e) {
    if (this.options.level.isType('web-dev')) {
      this.setSpellView(this.spells['hero-placeholder/plan'], this.fakeProgrammableThang);
      return;
    }
    if (this.options.session.get('team') === 'ogres') {
      return Backbone.Mediator.publish('level:select-sprite', {
        thangID: 'Hero Placeholder 1'
      });
    } else {
      return Backbone.Mediator.publish('level:select-sprite', {
        thangID: 'Hero Placeholder'
      });
    }
  };

  TomeView.prototype.createFakeProgrammableThang = function() {
    var hero, programmableConfig, ref, ref1, thang, usesHTMLConfig, usesJQueryConfig, usesWebJavaScriptConfig;
    if (!(hero = _.find(this.options.level.get('thangs'), {
      id: 'Hero Placeholder'
    }))) {
      return null;
    }
    if (!(programmableConfig = _.find(hero.components, function(component) {
      var ref;
      return (ref = component.config) != null ? ref.programmableMethods : void 0;
    }).config)) {
      return null;
    }
    usesHTMLConfig = _.find(hero.components, function(component) {
      var ref;
      return (ref = component.config) != null ? ref.programmableHTMLProperties : void 0;
    }).config;
    usesWebJavaScriptConfig = (ref = _.find(hero.components, function(component) {
      var ref1;
      return (ref1 = component.config) != null ? ref1.programmableWebJavaScriptProperties : void 0;
    })) != null ? ref.config : void 0;
    usesJQueryConfig = (ref1 = _.find(hero.components, function(component) {
      var ref2;
      return (ref2 = component.config) != null ? ref2.programmableJQueryProperties : void 0;
    })) != null ? ref1.config : void 0;
    if (!usesHTMLConfig) {
      console.warn("Couldn't find usesHTML config; is it presented and not defaulted on the Hero Placeholder?");
    }
    thang = {
      id: 'Hero Placeholder',
      isProgrammable: true
    };
    thang = _.merge(thang, programmableConfig, usesHTMLConfig, usesWebJavaScriptConfig, usesJQueryConfig);
    return thang;
  };

  TomeView.prototype.destroy = function() {
    var ref, ref1, spell, spellKey;
    ref = this.spells;
    for (spellKey in ref) {
      spell = ref[spellKey];
      spell.destroy();
    }
    if ((ref1 = this.worker) != null) {
      ref1.terminate();
    }
    return TomeView.__super__.destroy.call(this);
  };

  return TomeView;

})(CocoView);
});

;require.register("views/play/level/tome/editor/autocomplete", function(exports, require, module) {
var Autocomplete, ace, defaults, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

utils = require('core/utils');

ace = require('ace');

defaults = {
  autoLineEndings: {},
  basic: true,
  snippetsLangDefaults: true,
  liveCompletion: true,
  language: 'javascript',
  languagePrefixes: 'this.,@,self.',
  completers: {
    snippets: true
  }
};

module.exports = Autocomplete = (function() {
  var BackgroundTokenizer, Tokenizer;

  Tokenizer = '';

  BackgroundTokenizer = '';

  function Autocomplete(aceEditor, options) {
    this.doLiveCompletion = bind(this.doLiveCompletion, this);
    var config, defaultsCopy;
    Tokenizer = ace.require('ace/tokenizer').Tokenizer;
    BackgroundTokenizer = ace.require('ace/background_tokenizer').BackgroundTokenizer;
    this.editor = aceEditor;
    config = ace.require('ace/config');
    if (options == null) {
      options = {};
    }
    defaultsCopy = _.extend({}, defaults);
    this.options = _.merge(defaultsCopy, options);
    ace.config.loadModule('ace/ext/language_tools', (function(_this) {
      return function() {
        var aceDocument, highlightRules, tokenizer;
        _this.snippetManager = ace.require('ace/snippets').snippetManager;
        _this.snippetManager.expandWithTab = function() {
          return false;
        };
        highlightRules = new (_this.editor.getSession().getMode().HighlightRules)();
        tokenizer = new Tokenizer(highlightRules.getRules());
        _this.bgTokenizer = new BackgroundTokenizer(tokenizer, _this.editor);
        aceDocument = _this.editor.getSession().getDocument();
        _this.bgTokenizer.setDocument(aceDocument);
        _this.bgTokenizer.start(0);
        _this.setAceOptions();
        _this.copyCompleters();
        _this.activateCompleter();
        return _this.editor.commands.on('afterExec', _this.doLiveCompletion);
      };
    })(this));
  }

  Autocomplete.prototype.setAceOptions = function() {
    var aceOptions, ref;
    aceOptions = {
      'enableLiveAutocompletion': this.options.liveCompletion,
      'enableBasicAutocompletion': this.options.basic,
      'enableSnippets': this.options.completers.snippets
    };
    this.editor.setOptions(aceOptions);
    return (ref = this.editor.completer) != null ? ref.autoSelect = true : void 0;
  };

  Autocomplete.prototype.copyCompleters = function() {
    var ref;
    this.completers = {
      snippets: {},
      text: {},
      keywords: {}
    };
    if (this.editor.completers != null) {
      ref = this.editor.completers, this.completers.snippets.comp = ref[0], this.completers.text.comp = ref[1], this.completers.keywords.comp = ref[2];
    }
    if (this.options.completers.snippets) {
      this.completers.snippets = {
        pos: 0
      };
      return this.completers.snippets.comp = require('./snippets')(this.snippetManager, this.options.autoLineEndings);
    }
  };

  Autocomplete.prototype.activateCompleter = function(comp) {
    var comparator, ref, results, type;
    if (Array.isArray(comp)) {
      return this.editor.completers = comp;
    } else if (typeof comp === 'string') {
      if ((this.completers[comp] != null) && this.editor.completers[this.completers[comp].pos] !== this.completers[comp].comp) {
        return this.editor.completers.splice(this.completers[comp].pos, 0, this.completers[comp].comp);
      }
    } else {
      this.editor.completers = [];
      ref = this.completers;
      results = [];
      for (type in ref) {
        comparator = ref[type];
        if (this.options.completers[type] === true) {
          results.push(this.activateCompleter(type));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  Autocomplete.prototype.addSnippets = function(snippets, language) {
    this.options.language = language;
    return ace.config.loadModule('ace/ext/language_tools', (function(_this) {
      return function() {
        var snippetModulePath;
        _this.snippetManager = ace.require('ace/snippets').snippetManager;
        snippetModulePath = 'ace/snippets/' + language;
        return ace.config.loadModule(snippetModulePath, function(m) {
          var i, len, ref, s;
          if (m != null) {
            _this.snippetManager.files[language] = m;
            if (((ref = m.snippets) != null ? ref.length : void 0) > 0) {
              _this.snippetManager.unregister(m.snippets);
            }
            if (_this.oldSnippets != null) {
              _this.snippetManager.unregister(_this.oldSnippets);
            }
            m.snippets = _this.options.snippetsLangDefaults ? _this.snippetManager.parseSnippetFile(m.snippetText) : [];
            for (i = 0, len = snippets.length; i < len; i++) {
              s = snippets[i];
              m.snippets.push(s);
            }
            _this.snippetManager.register(m.snippets);
            return _this.oldSnippets = m.snippets;
          }
        });
      };
    })(this));
  };

  Autocomplete.prototype.setLiveCompletion = function(val) {
    if (val === true || val === false) {
      this.options.liveCompletion = val;
      return this.setAceOptions();
    }
  };

  Autocomplete.prototype.set = function(setting, value) {
    switch (setting) {
      case 'snippets' || 'completers.snippets':
        if (typeof value !== 'boolean') {
          return;
        }
        this.options.completers.snippets = value;
        this.setAceOptions();
        this.activateCompleter('snippets');
        break;
      case 'basic':
        if (typeof value !== 'boolean') {
          return;
        }
        this.options.basic = value;
        this.setAceOptions();
        this.activateCompleter();
        break;
      case 'liveCompletion':
        if (typeof value !== 'boolean') {
          return;
        }
        this.options.liveCompletion = value;
        this.setAceOptions();
        this.activateCompleter();
        break;
      case 'language':
        if (typeof value !== 'string') {
          return;
        }
        this.options.language = value;
        this.setAceOptions();
        this.activateCompleter();
        break;
      case 'completers.keywords':
        if (typeof value !== 'boolean') {
          return;
        }
        this.options.completers.keywords = value;
        this.activateCompleter();
        break;
      case 'completers.text':
        if (typeof value !== 'boolean') {
          return;
        }
        this.options.completers.text = value;
        this.activateCompleter();
    }
  };

  Autocomplete.prototype.on = function() {
    return this.paused = false;
  };

  Autocomplete.prototype.off = function() {
    return this.paused = true;
  };

  Autocomplete.prototype.doLiveCompletion = function(e) {
    var TokenIterator, base, editor, exitAndReturn, hasCompleter, pos, prefix, ref, ref1, ref2, ref3, ref4, ref5, ref6, text, token;
    if (!(this.options.basic || this.options.liveCompletion || this.options.completers.snippets)) {
      return;
    }
    if (this.paused) {
      return;
    }
    TokenIterator = TokenIterator || ace.require('ace/token_iterator').TokenIterator;
    editor = e.editor;
    text = e.args || "";
    hasCompleter = editor.completer && editor.completer.activated;
    if (e.command.name === "backspace" || e.command.name === "insertstring") {
      pos = editor.getCursorPosition();
      token = (new TokenIterator(editor.getSession(), pos.row, pos.column)).getCurrentToken();
      if ((token != null) && ((ref = token.type) !== 'comment' && ref !== 'string')) {
        prefix = this.getCompletionPrefix(editor);
        if (hasCompleter) {
          if ((ref1 = editor.completer) != null) {
            ref1.detach();
          }
        }
        if (/^x$|^y$/i.test(prefix)) {
          return;
        }
        if (prefix) {
          if (!editor.completer) {
            Autocomplete = ace.require('ace/autocomplete').Autocomplete;
            if ((Autocomplete != null ? (ref2 = Autocomplete.prototype) != null ? ref2.commands : void 0 : void 0) != null) {
              exitAndReturn = (function(_this) {
                return function(editor) {
                  editor.completer.detach();
                  return _this.editor.insert("\n");
                };
              })(this);
              Autocomplete.prototype.commands["Shift-Return"] = exitAndReturn;
            }
            editor.completer = new Autocomplete();
          }
          editor.completer.autoSelect = true;
          editor.completer.autoInsert = false;
          editor.completer.showPopup(editor);
          if (((ref3 = editor.completer) != null ? (ref4 = ref3.completions) != null ? (ref5 = ref4.filtered) != null ? ref5.length : void 0 : void 0 : void 0) > 20) {
            editor.completer.detach();
          } else if (editor.completer.popup != null) {
            $('.ace_autocomplete').find('.ace_content').css('cursor', 'pointer');
            if (this.options.popupFontSizePx != null) {
              $('.ace_autocomplete').css('font-size', this.options.popupFontSizePx + 'px');
            }
            if (this.options.popupLineHeightPx != null) {
              $('.ace_autocomplete').css('line-height', this.options.popupLineHeightPx + 'px');
            }
            if (this.options.popupWidthPx != null) {
              $('.ace_autocomplete').css('width', this.options.popupWidthPx + 'px');
            }
            if (typeof (base = editor.completer.popup).resize === "function") {
              base.resize();
            }
          }
        }
      }
    }
    if (this.options.completers.text && ((ref6 = e.command.name) === 'backspace' || ref6 === 'del' || ref6 === 'insertstring' || ref6 === 'removetolinestart' || ref6 === 'Enter' || ref6 === 'Return' || ref6 === 'Space' || ref6 === 'Tab')) {
      return this.bgTokenizer.fireUpdateEvent(0, this.editor.getSession().getLength());
    }
  };

  Autocomplete.prototype.getCompletionPrefix = function(editor) {
    var line, pos, prefix, ref, util;
    util = util || ace.require('ace/autocomplete/util');
    pos = editor.getCursorPosition();
    line = editor.session.getLine(pos.row);
    prefix = null;
    if ((ref = editor.completers) != null) {
      ref.forEach(function(completer) {
        if (completer != null ? completer.identifierRegexps : void 0) {
          return completer.identifierRegexps.forEach(function(identifierRegex) {
            if (!prefix && identifierRegex) {
              return prefix = util.retrievePrecedingIdentifier(line, pos.column, identifierRegex);
            }
          });
        }
      });
    }
    if (prefix == null) {
      prefix = util.retrievePrecedingIdentifier(line, pos.column);
    }
    return prefix;
  };

  Autocomplete.prototype.addCodeCombatSnippets = function(level, spellView, e) {
    var attackEntry, content, doc, entry, group, haveFindNearest, haveFindNearestEnemy, i, j, lang, len, len1, name, owner, prop, props, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, snippetEntries, source, thisToken, varName;
    snippetEntries = [];
    source = spellView.getSource();
    haveFindNearestEnemy = false;
    haveFindNearest = false;
    ref = e.propGroups;
    for (group in ref) {
      props = ref[group];
      for (i = 0, len = props.length; i < len; i++) {
        prop = props[i];
        if (_.isString(prop)) {
          owner = group;
        } else {
          owner = prop.owner;
          prop = prop.prop;
        }
        doc = _.find((ref1 = e.allDocs['__' + prop]) != null ? ref1 : [], function(doc) {
          if (doc.owner === owner) {
            return true;
          }
          return (owner === 'this' || owner === 'more') && ((doc.owner == null) || doc.owner === 'this');
        });
        if (doc != null ? (ref2 = doc.snippets) != null ? ref2[e.language] : void 0 : void 0) {
          name = doc.name;
          content = doc.snippets[e.language].code;
          if (/loop/.test(content) && level.get('moveRightLoopSnippet')) {
            content = (function() {
              switch (e.language) {
                case 'python':
                  return 'loop:\n    self.moveRight()\n    ${1:}';
                case 'javascript':
                  return 'loop {\n    this.moveRight();\n    ${1:}\n}';
                default:
                  return content;
              }
            })();
          }
          if (/loop/.test(content) && level.isType('course', 'course-ladder')) {
            content = (function() {
              switch (e.language) {
                case 'python':
                  return content.replace(/loop:/, 'while True:');
                case 'javascript':
                  return content.replace(/loop/, 'while (true)');
                case 'lua':
                  return content.replace(/loop/, 'while true then');
                case 'coffeescript':
                  return content;
                default:
                  return content;
              }
            })();
            name = (function() {
              switch (e.language) {
                case 'python':
                  return 'while True';
                case 'coffeescript':
                  return 'loop';
                default:
                  return 'while true';
              }
            })();
          }
          if (/hero/.test(source) || !/(self[\.\:]|this\.|\@)/.test(source)) {
            thisToken = {
              'python': /self/,
              'javascript': /this/,
              'lua': /self/
            };
            if (thisToken[e.language] && thisToken[e.language].test(content)) {
              content = content.replace(thisToken[e.language], 'hero');
            }
          }
          entry = {
            content: content,
            meta: $.i18n.t('keyboard_shortcuts.press_enter', {
              defaultValue: 'press enter'
            }),
            name: name,
            tabTrigger: doc.snippets[e.language].tab,
            importance: (ref3 = doc.autoCompletePriority) != null ? ref3 : 1.0
          };
          haveFindNearestEnemy || (haveFindNearestEnemy = name === 'findNearestEnemy');
          haveFindNearest || (haveFindNearest = name === 'findNearest');
          if (name === 'attack') {
            attackEntry = entry;
          } else {
            snippetEntries.push(entry);
          }
          if (doc.userShouldCaptureReturn) {
            varName = (ref4 = doc.userShouldCaptureReturn.variableName) != null ? ref4 : 'result';
            entry.captureReturn = (function() {
              switch (e.language) {
                case 'javascript':
                  return 'var ' + varName + ' = ';
                default:
                  return varName + ' = ';
              }
            })();
          }
        }
      }
    }
    if (attackEntry != null) {
      if (!(haveFindNearestEnemy || haveFindNearest || ((ref5 = level.get('slug')) === 'known-enemy' || ref5 === 'course-known-enemy'))) {
        attackEntry.content = attackEntry.content.replace('${1:enemy}', '"${1:Enemy Name}"');
      }
      snippetEntries.push(attackEntry);
    }
    for (j = 0, len1 = snippetEntries.length; j < len1; j++) {
      entry = snippetEntries[j];
      if (((ref6 = entry.content) != null ? ref6.indexOf('hero.') : void 0) === 0 && ((ref7 = entry.name) != null ? ref7.indexOf('hero.') : void 0) < 0) {
        entry.name = "hero." + entry.name;
      } else if (((ref8 = entry.content) != null ? ref8.indexOf('game.') : void 0) === 0 && ((ref9 = entry.name) != null ? ref9.indexOf('game.') : void 0) < 0) {
        entry.name = "game." + entry.name;
      }
    }
    if (haveFindNearest && !haveFindNearestEnemy) {
      spellView.translateFindNearest();
    }
    lang = utils.aceEditModes[e.language].substr('ace/mode/'.length);
    this.addSnippets(snippetEntries, lang);
    return spellView.editorLang = lang;
  };

  return Autocomplete;

})();
});

;require.register("views/play/level/tome/editor/fuzziac", function(exports, require, module) {
/**
 * Based upon:
 * A Dynamic Programming Algorithm for Name Matching
 * Top, P.;   Dowla, F.;   Gansemer, J.;   
 * Sch. of Electr. & Comput. Eng., Purdue Univ., West Lafayette, IN
 *
 * Variation in JavaScript
 * Copyright © 2011, Christopher Stoll
 * @author <a href="http://www.christopherstoll.org/">Christopher Stoll</a>
 *
 * @constructor
 * @param {String} [pNameSource=''] The source name, the name of interest
 * @param {Boolean} [pDebug=false] The instance is in debugging mode
 * @param {String} [pDebugOutputArea=''] Where to put debuging output
 */
function fuzziac(pNameSource, pDebug, pDebugOutputArea){
	var tNameSource = pNameSource || '';
	
	if(tNameSource){
		// convert "last, first" to "first last"
		if(tNameSource.indexOf(',') > 0){
			var tIndex = tNameSource.indexOf(','),
				tFirst = tNameSource.slice(tIndex+1),
				tLast = tNameSource.slice(0, tIndex);
			tNameSource = tFirst + ' ' + tLast;
		}
		
		// all lowercase, no special characters, and no double sapces
		tNameSource = tNameSource.toLowerCase();
		tNameSource = tNameSource.replace(/[.'"]/ig, ' ');
		tNameSource = tNameSource.replace(/\s{2,}/g, ' ');
	}
	
	// TODO: remove when converted for string matching only
	// debug variables
	this.DEBUG = pDebug || false;
	this.DEBUG_AREA = pDebugOutputArea;
	
	// y axis in matrix, the name in question
	this.nameSource = tNameSource;
	this.nameSourceLength = this.nameSource.length + 1;
	this.nameSourceScore = 0;
	this._reset();
}

fuzziac.prototype = {
	/**
	 * Reset class variables
	 * @private
	 */
	_reset: function(pNameTarget){
		var tNameTarget = pNameTarget || '';
		
		// TODO: remove when converted for string matching only
		if(tNameTarget){
			tNameTarget = tNameTarget.toLowerCase();
			tNameTarget = tNameTarget.replace(/[.,'"]/ig, '');
			tNameTarget = tNameTarget.replace(/\s{2,}/g, ' ');
		}
		
		// x axis in matrix, the name to check against
		this.nameTarget = tNameTarget;
		this.nameTargetLength = this.nameTarget.length + 1;
		this.nameTargetScore = 0;
	
		// DV, the dunamic programming matrix
		this.dynamicMatrix = [];
		
		// Max value in the matrix
		this.maxMatrixValue = 0;
		
		// the score for the string
		this.overallScore = 0;
		
		// weighted average of string and tokens
		this.finalScore = 0;
	},
	
	/**
	 * CM, character mismatch lookup,
	 * Abreviated 2D array for hex values
	 *
	 * @static
	 * @field
	 */
	characterMatrix: [
		//bcdefghijklmnopqrstuvwxyz
		'a0004000000000400000000000', // a
		'0a000000000000000000000000', // b
		'00a00000004000002000000000', // c
		'000a0000000000000002000000', // d
		'4000a000000000000000000020', // e
		'00000a00000000020000020000', // f
		'000000a0000000000000000000', // g
		'0000000a040000000000000000', // h
		'00000000a20400000000000020', // i
		'000000042a0000000000000040', // j
		'0040000000a000002000000000', // k
		'00000000400a00000000000000', // l
		'000000000000a4000000000000', // m
		'0000000000004a000000000000', // n
		'40000000000000a00000000000', // o
		'000002000000000a0000000000', // p
		'0020000000200000a000000000', // q
		'00000000000000000a00000000', // r
		'000000000000000000a0000000', // s
		'0002000000000000000a000000', // t
		'00000000000000000000a00000', // u
		'000002000000000000000a4000', // v
		'0000000000000000000004a000', // w
		'00000000000000000000000a00', // x
		'000020002400000000000000a0', // y
		'0000000000000000002000000a', // z
		'00000000000000400000000000', // 0
		'00000000400400000000000000', // 1
		'00000000000000000100000002', // 2
		'00002000000000000000000001', // 3
		'20000002000000000000000000', // 4
		'00000000000000000020000000', // 5
		'01000010000000000000000000', // 6
		'00000000100100000002000000', // 7
		'01000000000000000000000000', // 8
		'00000020000000000000000000'  // 9
	],
	
	/**
	 * Dictionary to speed lookups in the character matrix
	 *
	 * @static
	 * @field
	 */
	charMatrixDictionary: {
		a: 0,
		b: 1,
		c: 2,
		d: 3,
		e: 4,
		f: 5,
		g: 6,
		h: 7,
		i: 8,
		j: 9,
		k: 10,
		l: 11,
		m: 12,
		n: 13,
		o: 14,
		p: 15,
		q: 16,
		r: 17,
		s: 18,
		t: 19,
		u: 20,
		v: 21,
		w: 22,
		x: 23,
		y: 24,
		z: 25,
		0: 26,
		1: 27,
		2: 28,
		3: 29,
		4: 30,
		5: 31,
		6: 32,
		7: 33,
		8: 34,
		9: 35
	},
	
	/**
	 * Return a matching score for two characters
	 *
	 * @private
	 * @param {String} pCharA The first character to test
	 * @param {String} pCharB The second character to test
	 * @returns {Number} Score for the current characters
	 */
	_characterScore: function(pCharA, pCharB){
		var matchScore = 10,
			mismatchScore = 0,
			mismatchPenalty = -4,
			charIndexA = 0,
			charIndexB = 0,
			refValue = 0;
			
		if(pCharA && pCharB){
			if(pCharA == pCharB){
				return matchScore;
			}else{
				charIndexA = this.charMatrixDictionary[pCharA];
				charIndexB = this.charMatrixDictionary[pCharB];
				
				if(charIndexA && charIndexB){
					mismatchScore = this.characterMatrix[charIndexA][charIndexB]
					refValue = parseInt(mismatchScore, 16);

					if(refValue){
						return refValue;
					}else{
						return mismatchPenalty;
					}
				}else{
					return mismatchPenalty;
				}
			}
		}else{
			return mismatchPenalty;
		}
	},
	
	/**
	 * Return a score for string gaps
	 *
	 * @private
	 * @param {String} pCharA The first character to test
	 * @param {String} pCharB The second character to test
	 * @returns {Number} Score for the current characters
	 */
	_gappedScore: function(pCharA, pCharB){
		var gapPenalty = -3,
			mismatchPenalty = -4;
			
		if((pCharA == ' ') || (pCharB == ' ')){
			return gapPenalty;
		}else{
			return mismatchPenalty;
		}
	},
	
	/**
	 * Return a score for transposed strings
	 * TODO: Either actuallly check for transposed characters or eliminate
	 *
	 * @private
	 * @param {String} pCharA The first character to test
	 * @param {String} pCharB The second character to test
	 * @returns {Number} Score for the current characters
	 */
	_transposedScore: function(pCharA, pCharB){
		var transposePenalty = -2;
		return transposePenalty;
	},
	
	/**
	 * Build the dynamic programming matrix for the two current strings 
	 * @private
	 */
	_buildMatrix: function(){
		var tmpArray = [],
			tCharA = '',
			tCharB = '',
			gapScore = 0;
		
		// fill DV, the dynamic programming matrix, with zeros
		for(var ix=0; ix<this.nameTargetLength; ix++){
			tmpArray.push(0);
		}
		for(var iy=0; iy<this.nameSourceLength; iy++){
			this.dynamicMatrix.push(tmpArray.slice(0));
		}
		
		// calculate the actual values for DV
		for(var iy=1; iy<this.nameSourceLength; iy++){
			for(var ix=1; ix<this.nameTargetLength; ix++){
				tCharA = this.nameSource[iy-1];
				tCharB = this.nameTarget[ix-1];
				
				gapScore = this._gappedScore(tCharA, tCharB);
				this.dynamicMatrix[iy][ix] = Math.max(
					this.dynamicMatrix[iy-1][ix-1] + this._characterScore(tCharA, tCharB),
					0,
					this.dynamicMatrix[iy-1][ix] + gapScore,
					this.dynamicMatrix[iy][ix-1] + gapScore
				);
				
				if((this.dynamicMatrix[iy-1][ix] > this.dynamicMatrix[iy-1][ix-1]) && 
					(this.dynamicMatrix[iy][ix-1] > this.dynamicMatrix[iy-1][ix-1])){
					
					this.dynamicMatrix[iy-1][ix-1] = Math.max(
						this.dynamicMatrix[iy-1][ix],
						this.dynamicMatrix[iy][ix-1]
					);
					this.dynamicMatrix[iy][ix] = Math.max(
						this.dynamicMatrix[iy-1][ix-1] + this._transposedScore(tCharA, tCharB),
						this.dynamicMatrix[iy][ix]
					);
				}
			}
		}
	},
	
	/**
	 * Backtrack through the matrix to find the best path
	 * @private
	 */
	_backtrack: function(){
		var tmaxi = 0,
			maxix = 0;
		
		// find the intial local max
		for(var ix=this.nameTargetLength-1; ix>0; ix--){
			if(this.dynamicMatrix[this.nameSourceLength-1][ix] > tmaxi){
				tmaxi = this.dynamicMatrix[this.nameSourceLength-1][ix];
				maxix = ix;
			}
			
			// break out of loop if we have reached zeros after non zeros
			if((tmaxi > 0) && (this.dynamicMatrix[this.nameSourceLength-1][ix+1] == 0)){
				break;
			}
		}
		
		if(tmaxi <= 0){
			return false;
		}
		
		var ix = maxix,
			iy = this.nameSourceLength-1,
			ixLast = 0,
			iyLast = 0,
			diagonal = 0,
			above = 0,
			left = 0;
		
		// TODO: replace with better algo or refactor
		while((iy>0) && (ix>0)){
			// store max value
			if(this.dynamicMatrix[iy][ix] > this.maxMatrixValue){
				this.maxMatrixValue = this.dynamicMatrix[iy][ix];
			}
			
			// DEBUG
			if(this.DEBUG){
				$('#'+this.DEBUG_AC+'-'+(iy+1)+'-'+(ix+1)).css('background-color','#ccc');
			}
			
			// calculate values for possible paths
			diagonal = this.dynamicMatrix[iy-1][ix-1];
			above = this.dynamicMatrix[iy][ix-1];
			left = this.dynamicMatrix[iy-1][ix];
			
			// choose next path
			if((diagonal>=above) && (diagonal>=left)){
				iy--;
				ix--;
			}else if((above>=diagonal) && (above>=left)){
				ix--;
			}else if((left>=diagonal) && (left>=above)){
				iy--;
			}
			
			// end while if we have all zeros
			if((diagonal == 0) && (above == 0) && (left == 0)){
				iy = 0;
				ix = 0;
			}
		}
		
		return true;
	},
	
	/**
	 * Calculate the final match score for this pair of names
	 * @private
	 */
	_finalMatchScore: function(){
		var averageNameLength = (this.nameSourceLength + this.nameTargetLength) / 2
		this.overallScore = (2 * this.maxMatrixValue) / averageNameLength;
		this.finalScore = this.overallScore / 10;
	},
	
	/**
	 * Display debug information
	 * TODO: remove when converted for string matching only
	 *
	 * @private
	 */
	_debug_ShowDVtable: function(){
		var DEBUG_AA = 0,
			DEBUG_AB = '';
			DEBUG_AC = Math.round(Math.random() * 9999);
			
		this.DEBUG_AC = DEBUG_AC;
			
		DEBUG_AB += '<table class="example">';
		for(var iy=0; iy<=(this.nameSourceLength); iy++){
			DEBUG_AB += '<tr>';
			for(var ix=0; ix<=(this.nameTargetLength); ix++){
				if(iy==0){
					if(ix>1){
						DEBUG_AB += '<td id="'+DEBUG_AC+'-'+iy+'-'+ix+'">'+this.nameTarget[ix-2]+'</td>';
					}else{
						DEBUG_AB += '<td id="'+DEBUG_AC+'-'+iy+'-'+ix+'"></td>';
					}
				}else{
					if(ix>0){
						DEBUG_AA = Math.round(this.dynamicMatrix[iy-1][ix-1] * 100) / 100;
						DEBUG_AB += '<td id="'+DEBUG_AC+'-'+iy+'-'+ix+'">'+DEBUG_AA+'</td>';
					}else{
						if(iy>1){
							DEBUG_AB += '<td id="'+DEBUG_AC+'-'+iy+'-'+ix+'">'+this.nameSource[iy-2]+'</td>';
						}else{
							DEBUG_AB += '<td id="'+DEBUG_AC+'-'+iy+'-'+ix+'"></td>';
						}
					}
				}
			}
			DEBUG_AB += '</tr>';
		}
		DEBUG_AB += '</table>';
		$(this.DEBUG_AREA).append(DEBUG_AB);
	},
	
	/**
	 * Public method to perform a search
	 *
	 * @param {String} pNameTarget The target to compare the source with
	 * @returns The match score of the two strings
	 */
	score: function(pNameTarget){
		this._reset(pNameTarget);
		
		this._buildMatrix();
		
		if(this.DEBUG){
			this._debug_ShowDVtable();
		}
		
		this._backtrack();
		this._finalMatchScore();	
		return this.finalScore;
	},

	/**
	 * Find matches from an array of choices
	 *
	 * @param {String[]} pArray The array of strings to check against
	 * @param {Number} [10] pLimit The number of resutls to return 
	 * @returns {string[]} The top matching strings
	 */
	topMatchesFromArray: function(pArray, pLimit){
		var tmpValue = 0,
			tmpValRound = 0,
			worstValue = 0,
			resultLimit = pLimit || 10,
			resultArray = [];
			
		for(var i=0; i<resultLimit; ++i){
			resultArray.push({v:0,n:'-'});
		}
		
		//var dateStart = {},
		//	dateEnd = {},
		
		// Emperical Analysis
		//dateStart = new Date();

		// check against all names in the name list
		for(var i=0; i<pArray.length; i++){
			tmpValue = this.score(allNames[i]);
			//tmpValRound = String(Math.round(tmpValue * 100) / 1000);

			// add selected names to drop-down list
			// does unnecessary work, refactor to improve speed
			if(tmpValue > resultArray[resultLimit-1].v){
				newObj = {v:tmpValue,n:pArray[i]};
				tmpObj = {v:0,n:''};
				for(var j=0; j<resultLimit; ++j){
					if(newObj.v > resultArray[j].v){
						tmpObj.v = resultArray[j].v;
						tmpObj.n = resultArray[j].n;
						resultArray[j].v = newObj.v;
						resultArray[j].n = newObj.n;
						newObj.v = tmpObj.v;
						newObj.n = tmpObj.n;
					}
				}
			}
		}

		for(var i=0; i<resultArray.length; i++){
			tmp = resultArray[i];
			//resultArray[i] = tmp.v + ' ~~ ' + tmp.n;
			resultArray[i] = tmp.n;
		}

		// Emperical Analysis
		//dateEnd = new Date();
		//timeElapsed = dateEnd.getTime() - dateStart.getTime();
		//console.log('topMatchesFromArray:', timeElapsed);

		return resultArray;
	}
};

module.exports = fuzziac;
});

require.register("views/play/level/tome/editor/snippets", function(exports, require, module) {

/*
  This is essentially a copy from the snippet completer from Ace's ext/language-tools.js
  However this completer assigns a score to the snippets to ensure that snippet suggestions are
  treated better in the autocomplete than local values
 */
var Fuzziac, ace, getCurrentWord, getFullIdentifier, identifierRegex, lineBreak, score, scrubSnippet,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

score = fuzzaldrin.score;

lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

identifierRegex = /[\.a-zA-Z_0-9\$\-\u00A2-\uFFFF]/;

Fuzziac = require('./fuzziac');

ace = require('ace');

module.exports = function(SnippetManager, autoLineEndings) {
  var Range, baseInsertSnippet, util;
  Range = ace.require('ace/range').Range;
  util = ace.require('ace/autocomplete/util');
  ({
    identifierRegexps: [identifierRegex]
  });
  baseInsertSnippet = SnippetManager.insertSnippet;
  SnippetManager.insertSnippet = function(editor, snippet) {
    var afterIndex, afterRange, completer, completion, cursor, extraEndLength, extraIndex, finalScore, fuzzer, i, j, lang, len, len1, line, match, originalCompletion, originalObject, originalPrefix, prevObject, prevObjectIndex, prevWord, prevWordIndex, range, ref, ref1, ref2, ref3, snippetIndex, snippetStart, trailingText;
    cursor = editor.getCursorPosition();
    line = editor.session.getLine(cursor.row);
    if (cursor.column > 0) {
      prevWord = util.retrievePrecedingIdentifier(line, cursor.column - 1, identifierRegex);
      if (prevWord.length > 0) {
        prevWordIndex = snippet.toLowerCase().indexOf(prevWord.toLowerCase());
        if (prevWordIndex === 0) {
          range = new Range(cursor.row, cursor.column - 1 - prevWord.length, cursor.row, cursor.column);
          editor.session.remove(range);
        } else {
          ref = editor.completers;
          for (i = 0, len = ref.length; i < len; i++) {
            completer = ref[i];
            if (completer.completions != null) {
              ref1 = completer.completions;
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                completion = ref1[j];
                if (completion.snippet === snippet) {
                  originalCompletion = completion;
                  break;
                }
              }
              if (originalCompletion) {
                break;
              }
            }
          }
          if (originalCompletion != null) {
            lang = (ref2 = editor.session.getMode()) != null ? (ref3 = ref2.$id) != null ? ref3.substr('ace/mode/'.length) : void 0 : void 0;
            extraEndLength = 1;
            if (autoLineEndings[lang] != null) {
              extraEndLength += autoLineEndings[lang].length;
            }
            if (snippetIndex = originalCompletion.content.indexOf(snippet.substr(0, snippet.length - extraEndLength))) {
              originalPrefix = originalCompletion.content.substring(0, snippetIndex);
            } else {
              originalPrefix = '';
            }
            snippetStart = cursor.column - originalPrefix.length;
            if (snippetStart > 0 && snippetStart <= line.length) {
              extraIndex = snippetStart - 1;
              if (line[extraIndex] === '.') {
                originalObject = originalCompletion.content.substring(0, originalCompletion.content.indexOf('.'));
                prevObjectIndex = extraIndex - 1;
                if (prevObjectIndex >= 0 && /\w/.test(line[prevObjectIndex])) {
                  while (prevObjectIndex >= 0 && /\w/.test(line[prevObjectIndex])) {
                    prevObjectIndex--;
                  }
                  if (prevObjectIndex < 0 || !/\w/.test(line[prevObjectIndex])) {
                    prevObjectIndex++;
                  }
                  prevObject = line.substring(prevObjectIndex, extraIndex);
                  fuzzer = new Fuzziac(originalObject);
                  finalScore = 0;
                  if (fuzzer) {
                    finalScore = fuzzer.score(prevObject);
                  }
                  if (finalScore > 0.5) {
                    range = new Range(cursor.row, prevObjectIndex, cursor.row, snippetStart);
                    editor.session.remove(range);
                  } else if (/^[^.]+\./.test(snippet)) {
                    snippet = snippet.replace(/^[^.]+\./, '');
                  }
                }
              } else if (/\w/.test(line[extraIndex])) {
                while (extraIndex >= 0 && /\w/.test(line[extraIndex])) {
                  extraIndex--;
                }
                if (extraIndex < 0 || !/\w/.test(line[extraIndex])) {
                  extraIndex++;
                }
                range = new Range(cursor.row, extraIndex, cursor.row, snippetStart);
                editor.session.remove(range);
              }
            }
          }
        }
      }
    }
    afterIndex = cursor.column;
    trailingText = line.substring(afterIndex);
    match = trailingText.match(/^[a-zA-Z_0-9]*(\(\s*\))?/);
    if (match) {
      afterIndex += match[0].length;
    }
    afterRange = new Range(cursor.row, cursor.column, cursor.row, afterIndex);
    editor.session.remove(afterRange);
    return baseInsertSnippet.call(this, editor, snippet);
  };
  return {
    getCompletions: function(editor, session, pos, prefix, callback) {
      var beginningOfLine, completions, fullPrefix, fullPrefixParts, keywords, lang, line, ref, ref1, ref2, ref3, snippetMap, word;
      lang = (ref = session.getMode()) != null ? (ref1 = ref.$id) != null ? ref1.substr('ace/mode/'.length) : void 0 : void 0;
      line = session.getLine(pos.row);
      completions = [];
      fullPrefix = getFullIdentifier(session, pos);
      fullPrefixParts = fullPrefix.split(/[.:]/g);
      word = getCurrentWord(session, pos);
      if (fullPrefixParts.length > 2) {
        this.completions = [];
        return callback(null, completions);
      }
      beginningOfLine = session.getLine(pos.row).substring(0, pos.column - prefix.length);
      if (!((fullPrefixParts.length < 3 && /^(hero|self|this|@)$/.test(fullPrefixParts[0])) || /^\s*$/.test(beginningOfLine))) {
        this.completions = completions;
        return callback(null, completions);
      }
      snippetMap = SnippetManager.snippetMap;
      SnippetManager.getActiveScopes(editor).forEach(function(scope) {
        var caption, fuzzScore, i, len, ref2, ref3, results, s, snippet, snippets;
        snippets = snippetMap[scope] || [];
        results = [];
        for (i = 0, len = snippets.length; i < len; i++) {
          s = snippets[i];
          caption = s.name || s.tabTrigger;
          if (!caption) {
            continue;
          }
          ref2 = scrubSnippet(s.content, caption, line, prefix, pos, lang, autoLineEndings, s.captureReturn), snippet = ref2[0], fuzzScore = ref2[1];
          results.push(completions.push({
            content: s.content,
            caption: caption,
            snippet: snippet,
            score: (ref3 = fuzzScore * s.importance) != null ? ref3 : 1.0,
            meta: s.meta || (s.tabTrigger && !s.name ? s.tabTrigger + '\u21E5' : 'snippets')
          }));
        }
        return results;
      }, this);
      keywords = (ref2 = session.getMode()) != null ? (ref3 = ref2.$highlightRules) != null ? ref3.$keywordList : void 0 : void 0;
      if (keywords && indexOf.call(keywords, prefix) >= 0) {
        this.completions = _.filter(completions, function(x) {
          return x.caption.indexOf(prefix === 0);
        });
        return callback(null, this.completions);
      }
      this.completions = completions;
      return callback(null, completions);
    }
  };
};

getCurrentWord = function(doc, pos) {
  var end, start, text;
  end = pos.column;
  start = end - 1;
  text = doc.getLine(pos.row);
  while (start >= 0 && !text[start].match(/\s+|[\.\@]/)) {
    start--;
  }
  if (start >= 0) {
    start++;
  }
  return text.substring(start, end);
};

getFullIdentifier = function(doc, pos) {
  var end, start, text;
  end = pos.column;
  start = end - 1;
  text = doc.getLine(pos.row);
  while (start >= 0 && !text[start].match(/\s+/)) {
    start--;
  }
  if (start >= 0) {
    start++;
  }
  return text.substring(start, end);
};

scrubSnippet = function(snippet, caption, line, input, pos, lang, autoLineEndings, captureReturn) {
  var captionStart, fuzzScore, linePrefix, linePrefixIndex, lineSuffix, prefixStart, snippetLineBreaks, snippetPrefix, snippetPrefixIndex, snippetSuffix, startsWith, toLinePrefix;
  fuzzScore = 0.1;
  snippetLineBreaks = (snippet.match(lineBreak) || []).length;
  if (prefixStart = snippet.toLowerCase().indexOf(input.toLowerCase()) > -1) {
    captionStart = snippet.indexOf(caption);
    snippetPrefix = snippet.substring(0, captionStart);
    snippetSuffix = snippet.substring(snippetPrefix.length + caption.length);
    linePrefixIndex = pos.column - input.length - 1;
    if (linePrefixIndex >= 0 && snippetPrefix.length > 0 && line[linePrefixIndex] === snippetPrefix[snippetPrefix.length - 1]) {
      snippetPrefixIndex = snippetPrefix.length - 1;
      while (line[linePrefixIndex] === snippetPrefix[snippetPrefixIndex]) {
        if (linePrefixIndex === 0 || snippetPrefixIndex === 0) {
          break;
        }
        linePrefixIndex--;
        snippetPrefixIndex--;
      }
      linePrefix = line.substr(linePrefixIndex, pos.column - input.length - linePrefixIndex);
    } else {
      linePrefix = '';
    }
    lineSuffix = line.substr(pos.column, snippetSuffix.length - 1 + caption.length - input.length + 1);
    if (snippet.indexOf(lineSuffix) < 0) {
      lineSuffix = '';
    }
    if (pos.column - input.length >= 0 && line[pos.column - input.length - 1] === '(' && pos.column < line.length && line[pos.column] === ')' && lineSuffix === ')') {
      lineSuffix = '';
    }
    fuzzScore += score(snippet, linePrefix + input + lineSuffix);
    if (snippetPrefix.length > 0 && snippetPrefix === linePrefix) {
      snippet = snippet.slice(snippetPrefix.length);
    }
    if (lineSuffix.length > 0) {
      snippet = snippet.slice(0, snippet.length - lineSuffix.length);
    }
    if (lineSuffix.length === 0 && /^\s*$/.test(line.slice(pos.column))) {
      toLinePrefix = line.substring(0, linePrefixIndex);
      if (linePrefixIndex < 0 || linePrefixIndex >= 0 && !/[\(\)]/.test(toLinePrefix) && !/^[ \t]*(?:if\b|elif\b)/.test(toLinePrefix)) {
        if (snippetLineBreaks === 0 && autoLineEndings[lang]) {
          snippet += autoLineEndings[lang];
        }
        if (snippetLineBreaks === 0 && !/\$\{/.test(snippet)) {
          snippet += "\n";
        }
        if (captureReturn && /^\s*$/.test(toLinePrefix)) {
          snippet = captureReturn + linePrefix + snippet;
        }
      }
    }
  } else {
    if (line.trim() === input) {
      if (snippetLineBreaks === 0 && autoLineEndings[lang]) {
        snippet += autoLineEndings[lang];
      }
      if (snippetLineBreaks === 0 && !/\$\{/.test(snippet)) {
        snippet += "\n";
      }
    }
    fuzzScore += score(snippet, input);
  }
  startsWith = function(string, searchString, position) {
    position = position || 0;
    return string.substr(position, searchString.length) === searchString;
  };
  if (startsWith(caption, input)) {
    fuzzScore *= 2;
  }
  fuzzScore -= caption.length / 500;
  if (caption === input) {
    fuzzScore = 10;
  }
  return [snippet, fuzzScore];
};
});

;require.register("views/play/menu/GameMenuModal", function(exports, require, module) {
var CreateAccountModal, GameMenuModal, ModalView, submenuViews, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ModalView = require('views/core/ModalView');

CreateAccountModal = require('views/core/CreateAccountModal');

template = require('templates/play/menu/game-menu-modal');

submenuViews = [require('views/play/menu/SaveLoadView'), require('views/play/menu/OptionsView'), require('views/play/menu/GuideView')];

module.exports = GameMenuModal = (function(superClass) {
  extend(GameMenuModal, superClass);

  GameMenuModal.prototype.className = 'modal fade play-modal';

  GameMenuModal.prototype.template = template;

  GameMenuModal.prototype.id = 'game-menu-modal';

  GameMenuModal.prototype.instant = true;

  GameMenuModal.prototype.events = {
    'change input.select': 'onSelectionChanged',
    'shown.bs.tab #game-menu-nav a': 'onTabShown',
    'click #change-hero-tab': function() {
      return this.trigger('change-hero');
    },
    'click #close-modal': 'hide',
    'click .auth-tab': 'onClickSignupButton'
  };

  function GameMenuModal(options) {
    var ref, ref1;
    GameMenuModal.__super__.constructor.call(this, options);
    this.level = this.options.level;
    this.options.levelID = this.options.level.get('slug');
    this.options.startingSessionHeroConfig = $.extend({}, true, (ref = this.options.session.get('heroConfig')) != null ? ref : {});
    Backbone.Mediator.publish('music-player:enter-menu', {
      terrain: (ref1 = this.options.level.get('terrain', true)) != null ? ref1 : 'Dungeon'
    });
  }

  GameMenuModal.prototype.getRenderData = function(context) {
    var docs, ref, ref1, ref2, submenus;
    if (context == null) {
      context = {};
    }
    context = GameMenuModal.__super__.getRenderData.call(this, context);
    docs = (ref = this.options.level.get('documentation')) != null ? ref : {};
    submenus = ['guide', 'options', 'save-load'];
    if (window.serverConfig.picoCTF) {
      submenus = _.without(submenus, 'options');
    }
    if (!window.serverConfig.picoCTF) {
      if (this.level.isType('course', 'course-ladder') || !((ref1 = this.options.level.get('helpVideos')) != null ? ref1.length : void 0) > 0) {
        submenus = _.without(submenus, 'guide');
      }
    }
    if (!(me.isAdmin() || /https?:\/\/localhost/.test(window.location.href))) {
      submenus = _.without(submenus, 'save-load');
    }
    this.includedSubmenus = submenus;
    context.showTab = (ref2 = this.options.showTab) != null ? ref2 : submenus[0];
    context.submenus = submenus;
    context.iconMap = {
      'options': 'cog',
      'guide': 'list',
      'save-load': 'floppy-disk'
    };
    return context;
  };

  GameMenuModal.prototype.showsChooseHero = function() {
    var ref, ref1;
    if ((ref = this.level) != null ? ref.isType('course', 'course-ladder') : void 0) {
      return false;
    }
    if ((ref1 = this.options.levelID) === 'zero-sum' || ref1 === 'ace-of-coders' || ref1 === 'elemental-wars' || ref1 === 'the-battle-of-sky-span') {
      return false;
    }
    return true;
  };

  GameMenuModal.prototype.afterRender = function() {
    var firstView, i, len, submenuView;
    GameMenuModal.__super__.afterRender.call(this);
    for (i = 0, len = submenuViews.length; i < len; i++) {
      submenuView = submenuViews[i];
      this.insertSubView(new submenuView(this.options));
    }
    firstView = (function() {
      switch (this.options.showTab) {
        case 'guide':
          return this.subviews.guide_view;
        default:
          if (indexOf.call(this.includedSubmenus, 'guide') >= 0) {
            return this.subviews.guide_view;
          } else {
            return this.subviews.options_view;
          }
      }
    }).call(this);
    firstView.$el.addClass('active');
    if (typeof firstView.onShown === "function") {
      firstView.onShown();
    }
    this.playSound('game-menu-open');
    return this.$el.find('.nano:visible').nanoScroller();
  };

  GameMenuModal.prototype.onTabShown = function(e) {
    var base, ref, results, shownSubviewKey, subview, subviewKey;
    this.playSound('game-menu-tab-switch');
    shownSubviewKey = e.target.hash.substring(1).replace(/-/g, '_');
    if (typeof (base = this.subviews[shownSubviewKey]).onShown === "function") {
      base.onShown();
    }
    ref = this.subviews;
    results = [];
    for (subviewKey in ref) {
      subview = ref[subviewKey];
      if (subviewKey !== shownSubviewKey) {
        results.push(typeof subview.onHidden === "function" ? subview.onHidden() : void 0);
      }
    }
    return results;
  };

  GameMenuModal.prototype.onHidden = function() {
    var ref, subview, subviewKey;
    GameMenuModal.__super__.onHidden.call(this);
    ref = this.subviews;
    for (subviewKey in ref) {
      subview = ref[subviewKey];
      if (typeof subview.onHidden === "function") {
        subview.onHidden();
      }
    }
    this.playSound('game-menu-close');
    return Backbone.Mediator.publish('music-player:exit-menu', {});
  };

  GameMenuModal.prototype.onClickSignupButton = function(e) {
    var ref;
    if ((ref = window.tracker) != null) {
      ref.trackEvent('Started Signup', {
        category: 'Play Level',
        label: 'Game Menu',
        level: this.options.levelID
      });
    }
    e.preventDefault();
    return this.openModalView(new CreateAccountModal());
  };

  return GameMenuModal;

})(ModalView);
});

;require.register("views/play/menu/GuideView", function(exports, require, module) {
var Article, CocoView, LevelGuideView, SubscribeModal, ace, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/menu/guide-view');

Article = require('models/Article');

SubscribeModal = require('views/core/SubscribeModal');

ace = require('ace');

utils = require('core/utils');

module.exports = LevelGuideView = (function(superClass) {
  extend(LevelGuideView, superClass);

  LevelGuideView.prototype.template = template;

  LevelGuideView.prototype.id = 'guide-view';

  LevelGuideView.prototype.className = 'tab-pane';

  LevelGuideView.prototype.helpVideoHeight = '295';

  LevelGuideView.prototype.helpVideoWidth = '471';

  LevelGuideView.prototype.events = {
    'click .start-subscription-button': 'clickSubscribe'
  };

  function LevelGuideView(options) {
    this.clickTab = bind(this.clickTab, this);
    var article, articleMap, articles, doc, general, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, specific;
    LevelGuideView.__super__.constructor.call(this, options);
    this.levelSlug = options.level.get('slug');
    this.sessionID = options.session.get('_id');
    this.requiresSubscription = !me.isPremium();
    this.isCourseLevel = options.level.isType('course', 'course-ladder');
    this.helpVideos = this.isCourseLevel ? [] : (ref1 = options.level.get('helpVideos')) != null ? ref1 : [];
    this.trackedHelpVideoStart = this.trackedHelpVideoFinish = false;
    this.helpVideosIndex = me.getVideoTutorialStylesIndex(this.helpVideos.length);
    if (this.helpVideos.length > 0 && !this.isCourseLevel) {
      this.helpVideo = this.helpVideos[this.helpVideosIndex];
    }
    this.videoLocked = !(((ref2 = this.helpVideo) != null ? ref2.free : void 0) || this.isCourseLevel) && this.requiresSubscription;
    this.firstOnly = options.firstOnly;
    if (window.serverConfig.picoCTF) {
      this.docs = (ref3 = (ref4 = options != null ? options.docs : void 0) != null ? ref4 : options.level.get('documentation')) != null ? ref3 : {};
      general = this.docs.generalArticles || [];
      specific = this.docs.specificArticles || [];
      articles = options.supermodel.getModels(Article);
      articleMap = {};
      for (i = 0, len = articles.length; i < len; i++) {
        article = articles[i];
        articleMap[article.get('original')] = article;
      }
      general = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = general.length; j < len1; j++) {
          ref = general[j];
          results.push(articleMap[ref.original]);
        }
        return results;
      })();
      general = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = general.length; j < len1; j++) {
          article = general[j];
          if (article) {
            results.push(article.attributes);
          }
        }
        return results;
      })();
      this.docs = specific.concat(general);
      this.docs = $.extend(true, [], this.docs);
      if (this.firstOnly && this.docs[0]) {
        this.docs = [this.docs[0]];
      }
      this.addPicoCTFProblem();
      ref5 = this.docs;
      for (j = 0, len1 = ref5.length; j < len1; j++) {
        doc = ref5[j];
        doc.html = marked(utils.filterMarkdownCodeLanguages(utils.i18n(doc, 'body'), options.session.get('codeLanguage')));
      }
      ref6 = this.docs;
      for (k = 0, len2 = ref6.length; k < len2; k++) {
        doc = ref6[k];
        doc.slug = _.string.slugify(doc.name);
      }
      ref7 = this.docs;
      for (l = 0, len3 = ref7.length; l < len3; l++) {
        doc = ref7[l];
        doc.name = utils.i18n(doc, 'name');
      }
    } else {
      this.docs = [];
    }
  }

  LevelGuideView.prototype.destroy = function() {
    var i, len, oldEditor, ref1, ref2;
    if (this.vimeoListenerAttached) {
      if (window.addEventListener) {
        window.removeEventListener('message', this.onMessageReceived, false);
      } else {
        window.detachEvent('onmessage', this.onMessageReceived, false);
      }
    }
    ref2 = (ref1 = this.aceEditors) != null ? ref1 : [];
    for (i = 0, len = ref2.length; i < len; i++) {
      oldEditor = ref2[i];
      oldEditor.destroy();
    }
    return LevelGuideView.__super__.destroy.call(this);
  };

  LevelGuideView.prototype.getRenderData = function() {
    var c;
    c = LevelGuideView.__super__.getRenderData.call(this);
    c.docs = this.docs;
    if (!this.isCourseLevel) {
      c.showVideo = this.helpVideos.length > 0;
    }
    c.videoLocked = this.videoLocked;
    return c;
  };

  LevelGuideView.prototype.afterRender = function() {
    var startingTab;
    LevelGuideView.__super__.afterRender.call(this);
    if (!this.videoLocked) {
      this.setupVideoPlayer();
    }
    if (this.docs.length + this.helpVideos.length > 1) {
      if (this.helpVideos.length) {
        startingTab = 0;
      } else {
        startingTab = _.findIndex(this.docs, {
          slug: 'overview'
        });
        if (startingTab === -1) {
          startingTab = 0;
        }
      }
      this.$el.find(".nav-tabs li:nth(" + startingTab + ")").addClass('active');
      this.$el.find(".tab-content .tab-pane:nth(" + startingTab + ")").addClass('active');
      this.$el.find('.nav-tabs a').click(this.clickTab);
      this.$el.addClass('has-tabs');
    }
    this.configureACEEditors();
    return this.playSound('guide-open');
  };

  LevelGuideView.prototype.configureACEEditors = function() {
    var aceEditors, codeLanguage, i, len, oldEditor, ref1, ref2, ref3;
    ref2 = (ref1 = this.aceEditors) != null ? ref1 : [];
    for (i = 0, len = ref2.length; i < len; i++) {
      oldEditor = ref2[i];
      oldEditor.destroy();
    }
    this.aceEditors = [];
    aceEditors = this.aceEditors;
    codeLanguage = this.options.session.get('codeLanguage') || ((ref3 = me.get('aceConfig')) != null ? ref3.language : void 0) || 'python';
    return this.$el.find('pre').each(function() {
      var aceEditor;
      aceEditor = utils.initializeACE(this, codeLanguage);
      return aceEditors.push(aceEditor);
    });
  };

  LevelGuideView.prototype.clickSubscribe = function(e) {
    var level, ref1;
    level = this.levelSlug;
    this.openModalView(new SubscribeModal());
    return (ref1 = window.tracker) != null ? ref1.trackEvent('Show subscription modal', {
      category: 'Subscription',
      label: 'help video clicked',
      level: level,
      levelID: level
    }) : void 0;
  };

  LevelGuideView.prototype.clickTab = function(e) {
    this.$el.find('li.active').removeClass('active');
    return this.playSound('guide-tab-switch');
  };

  LevelGuideView.prototype.afterInsert = function() {
    LevelGuideView.__super__.afterInsert.call(this);
    return Backbone.Mediator.publish('level:docs-shown', {});
  };

  LevelGuideView.prototype.onHidden = function() {
    var player, ref1, ref2, ref3;
    if (this.vimeoListenerAttached) {
      player = this.$('#help-video-player')[0];
      player.contentWindow.postMessage(JSON.stringify({
        method: 'pause'
      }), '*');
    }
    if (typeof createjs !== "undefined" && createjs !== null) {
      if ((ref1 = createjs.Sound) != null) {
        if (typeof ref1.setVolume === "function") {
          ref1.setVolume((ref2 = this.volume) != null ? ref2 : (ref3 = me.get('volume')) != null ? ref3 : 1.0);
        }
      }
    }
    return Backbone.Mediator.publish('level:docs-hidden', {});
  };

  LevelGuideView.prototype.onShown = function() {
    var ref1, ref2;
    if (this.volume == null) {
      this.volume = (ref1 = me.get('volume')) != null ? ref1 : 1.0;
    }
    return typeof createjs !== "undefined" && createjs !== null ? (ref2 = createjs.Sound) != null ? ref2.setVolume(0.0) : void 0 : void 0;
  };

  LevelGuideView.prototype.onStartHelpVideo = function() {
    var ref1, ref2;
    if (!this.trackedHelpVideoStart) {
      if ((ref1 = window.tracker) != null) {
        ref1.trackEvent('Start help video', {
          level: this.levelSlug,
          ls: this.sessionID,
          style: (ref2 = this.helpVideo) != null ? ref2.style : void 0
        });
      }
      return this.trackedHelpVideoStart = true;
    }
  };

  LevelGuideView.prototype.onFinishHelpVideo = function() {
    var ref1, ref2;
    if (!this.trackedHelpVideoFinish) {
      if ((ref1 = window.tracker) != null) {
        ref1.trackEvent('Finish help video', {
          level: this.levelSlug,
          ls: this.sessionID,
          style: (ref2 = this.helpVideo) != null ? ref2.style : void 0
        });
      }
      return this.trackedHelpVideoFinish = true;
    }
  };

  LevelGuideView.prototype.setupVideoPlayer = function() {
    var url;
    if (!this.helpVideo) {
      return;
    }
    url = "https:" + this.helpVideo.url.substr(this.helpVideo.url.indexOf('/'));
    return this.setupVimeoVideoPlayer(url);
  };

  LevelGuideView.prototype.setupVimeoVideoPlayer = function(helpVideoURL) {
    var $tag, tag;
    tag = document.createElement('iframe');
    tag.id = 'help-video-player';
    tag.src = helpVideoURL + "?api=1&badge=0&byline=0&portrait=0&title=0";
    tag.height = this.helpVideoHeight;
    tag.width = this.helpVideoWidth;
    tag.allowFullscreen = true;
    tag.mozAllowFullscreen = true;
    $tag = $(tag);
    $tag.attr('webkitallowfullscreen', true);
    this.$el.find('#help-video-player').replaceWith($tag);
    this.onMessageReceived = (function(_this) {
      return function(e) {
        var data, player;
        data = JSON.parse(e.data);
        if (data.event === 'ready') {
          player = $('#help-video-player')[0];
          player.contentWindow.postMessage(JSON.stringify({
            method: 'addEventListener',
            value: 'play'
          }), helpVideoURL);
          return player.contentWindow.postMessage(JSON.stringify({
            method: 'addEventListener',
            value: 'finish'
          }), helpVideoURL);
        } else if (data.event === 'play') {
          return typeof _this.onStartHelpVideo === "function" ? _this.onStartHelpVideo() : void 0;
        } else if (data.event === 'finish') {
          return typeof _this.onFinishHelpVideo === "function" ? _this.onFinishHelpVideo() : void 0;
        }
      };
    })(this);
    if (window.addEventListener) {
      window.addEventListener('message', this.onMessageReceived, false);
    } else {
      window.attachEvent('onmessage', this.onMessageReceived, false);
    }
    return this.vimeoListenerAttached = true;
  };

  LevelGuideView.prototype.addPicoCTFProblem = function() {
    var doc, i, len, problem, ref1, ref2, results;
    if (!(problem = this.options.level.picoCTFProblem)) {
      return;
    }
    if (!this.docs.length) {
      this.docs = [
        {
          name: 'Intro',
          body: '',
          slug: 'intro'
        }
      ];
    }
    ref1 = this.docs;
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      doc = ref1[i];
      if ((ref2 = doc.name) === 'Overview' || ref2 === 'Intro') {
        results.push(doc.body += ("### " + problem.name + "\n\n" + problem.description + "\n\n" + problem.category + " - " + problem.score + " points\n\nHint: " + problem.hints).replace(/<p>(.*?)<\/p>/gi, '$1'));
      }
    }
    return results;
  };

  return LevelGuideView;

})(CocoView);
});

;require.register("views/play/menu/InventoryModal", function(exports, require, module) {
var BuyGemsModal, CocoCollection, CreateAccountModal, InventoryModal, ItemDetailsView, ItemView, ModalView, Purchase, SpriteBuilder, ThangType, buyGemsPromptTemplate, gear, gearSlugs, hasGoneFullScreenOnce, heroGenders, me, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

ModalView = require('views/core/ModalView');

template = require('templates/play/menu/inventory-modal');

buyGemsPromptTemplate = require('templates/play/modal/buy-gems-prompt');

me = require('core/auth').me;

ThangType = require('models/ThangType');

CocoCollection = require('collections/CocoCollection');

ItemView = require('./ItemView');

SpriteBuilder = require('lib/sprites/SpriteBuilder');

ItemDetailsView = require('views/play/modal/ItemDetailsView');

Purchase = require('models/Purchase');

BuyGemsModal = require('views/play/modal/BuyGemsModal');

CreateAccountModal = require('views/core/CreateAccountModal');

hasGoneFullScreenOnce = false;

module.exports = InventoryModal = (function(superClass) {
  extend(InventoryModal, superClass);

  function InventoryModal() {
    return InventoryModal.__super__.constructor.apply(this, arguments);
  }

  InventoryModal.prototype.id = 'inventory-modal';

  InventoryModal.prototype.className = 'modal fade play-modal';

  InventoryModal.prototype.template = template;

  InventoryModal.prototype.slots = ['head', 'eyes', 'neck', 'torso', 'wrists', 'gloves', 'left-ring', 'right-ring', 'right-hand', 'left-hand', 'waist', 'feet', 'programming-book', 'pet', 'minion', 'flag'];

  InventoryModal.prototype.ringSlots = ['left-ring', 'right-ring'];

  InventoryModal.prototype.closesOnClickOutside = false;

  InventoryModal.prototype.events = {
    'click .item-slot': 'onItemSlotClick',
    'click #unequipped .item': 'onUnequippedItemClick',
    'doubletap #unequipped .item': 'onUnequippedItemDoubleClick',
    'doubletap .item-slot .item': 'onEquippedItemDoubleClick',
    'click button.equip-item': 'onClickEquipItemButton',
    'shown.bs.modal': 'onShown',
    'click #choose-hero-button': 'onClickChooseHero',
    'click #play-level-button': 'onClickPlayLevel',
    'click .unlock-button': 'onUnlockButtonClicked',
    'click #equip-item-viewed': 'onClickEquipItemViewed',
    'click #unequip-item-viewed': 'onClickUnequipItemViewed',
    'click #close-modal': 'hide',
    'click .buy-gems-prompt-button': 'onBuyGemsPromptButtonClicked',
    'click': 'onClickedSomewhere',
    'update #unequipped .nano': 'onScrollUnequipped'
  };

  InventoryModal.prototype.shortcuts = {
    'esc': 'clearSelection',
    'enter': 'onClickPlayLevel'
  };

  InventoryModal.prototype.initialize = function(options) {
    this.onScrollUnequipped = _.throttle(_.bind(this.onScrollUnequipped, this), 200);
    InventoryModal.__super__.initialize.apply(this, arguments);
    this.items = new CocoCollection([], {
      model: ThangType
    });
    this.items.url = '/db/thang.type?view=items';
    this.items.setProjection(['name', 'slug', 'components', 'original', 'rasterIcon', 'dollImages', 'gems', 'tier', 'description', 'heroClass', 'i18n']);
    this.supermodel.loadCollection(this.items, 'items');
    return this.equipment = {};
  };

  InventoryModal.prototype.onItemsLoaded = function() {
    var equipped, i, item, itemGroup, j, k, len, len1, len2, programmableConfig, ref, ref1, ref2, ref3, ref4, ref5, ref6, results;
    ref = this.items.models;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      item.notInLevel = true;
      programmableConfig = (ref1 = _.find(item.get('components'), function(c) {
        var ref2;
        return (ref2 = c.config) != null ? ref2.programmableProperties : void 0;
      })) != null ? ref1.config : void 0;
      item.programmableProperties = ((programmableConfig != null ? programmableConfig.programmableProperties : void 0) || []).concat((programmableConfig != null ? programmableConfig.moreProgrammableProperties : void 0) || []);
    }
    this.itemsProgrammablePropertiesConfigured = true;
    this.equipment = this.options.equipment || ((ref2 = this.options.session) != null ? (ref3 = ref2.get('heroConfig')) != null ? ref3.inventory : void 0 : void 0) || ((ref4 = me.get('heroConfig')) != null ? ref4.inventory : void 0) || {};
    this.equipment = $.extend(true, {}, this.equipment);
    this.requireLevelEquipment();
    this.itemGroups = {};
    this.itemGroups.requiredPurchaseItems = new Backbone.Collection();
    this.itemGroups.availableItems = new Backbone.Collection();
    this.itemGroups.restrictedItems = new Backbone.Collection();
    this.itemGroups.lockedItems = new Backbone.Collection();
    ref5 = _.values(this.itemGroups);
    for (j = 0, len1 = ref5.length; j < len1; j++) {
      itemGroup = ref5[j];
      itemGroup.comparator = (function(m) {
        var ref6;
        return (ref6 = m.get('tier')) != null ? ref6 : m.get('gems');
      });
    }
    equipped = _.values(this.equipment);
    ref6 = this.items.models;
    results = [];
    for (k = 0, len2 = ref6.length; k < len2; k++) {
      item = ref6[k];
      results.push(this.sortItem(item, equipped));
    }
    return results;
  };

  InventoryModal.prototype.sortItem = function(item, equipped) {
    var allRestrictedGear, heroClass, i, inCampaignView, j, len, len1, locked, placeholder, ref, ref1, ref2, ref3, ref4, ref5, requiredGear, requiredItems, requiredToPurchase, restricted, restrictedGear, slot;
    if (equipped == null) {
      equipped = _.values(this.equipment);
    }
    item.classes = _.clone(item.getAllowedSlots());
    ref = item.getAllowedHeroClasses();
    for (i = 0, len = ref.length; i < len; i++) {
      heroClass = ref[i];
      item.classes.push(heroClass);
    }
    if (ref1 = item.get('original'), indexOf.call(equipped, ref1) >= 0) {
      item.classes.push('equipped');
    }
    locked = !me.ownsItem(item.get('original'));
    restrictedGear = this.calculateRestrictedGearPerSlot();
    allRestrictedGear = _.flatten(_.values(restrictedGear));
    restricted = (ref2 = item.get('original'), indexOf.call(allRestrictedGear, ref2) >= 0);
    requiredToPurchase = false;
    inCampaignView = $('#campaign-view').length;
    if (!(gearSlugs[item.get('original')] === 'tarnished-bronze-breastplate' && inCampaignView && this.options.level.get('slug') === 'the-raised-sword')) {
      requiredGear = this.calculateRequiredGearPerSlot();
      ref3 = item.getAllowedSlots();
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        slot = ref3[j];
        if (!(requiredItems = requiredGear[slot])) {
          continue;
        }
        if (this.equipment[slot] && (ref4 = this.equipment[slot], indexOf.call(allRestrictedGear, ref4) < 0) && indexOf.call(this.ringSlots, slot) < 0) {
          continue;
        }
        if (item.get('original') === requiredItems[0] && !_.find(requiredItems, function(requiredItem) {
          return me.ownsItem(requiredItem);
        })) {
          requiredToPurchase = true;
          break;
        }
      }
    }
    if (requiredToPurchase && locked && !item.get('gems')) {
      if ((ref5 = application.tracker) != null) {
        ref5.trackEvent('Required Item Locked', {
          level: this.options.level.get('slug'),
          label: this.options.level.get('slug'),
          item: item.get('name'),
          playerLevel: me.level(),
          levelUnlocked: me.ownsLevel(this.options.level.get('original'))
        });
      }
      locked = false;
    }
    placeholder = !item.getFrontFacingStats().props.length && !_.size(item.getFrontFacingStats().stats);
    if (placeholder && locked) {
      null;
    } else if (locked && requiredToPurchase) {
      item.classes.push('locked');
      this.itemGroups.requiredPurchaseItems.add(item);
    } else if (locked) {
      item.classes.push('locked');
      if (item.isSilhouettedItem() || !item.get('gems')) {
        null;
      } else {
        this.itemGroups.lockedItems.add(item);
      }
    } else if (restricted) {
      this.itemGroups.restrictedItems.add(item);
      item.classes.push('restricted');
    } else {
      this.itemGroups.availableItems.add(item);
    }
    if (item.get('tier') != null) {
      return item.level = item.levelRequiredForItem();
    }
  };

  InventoryModal.prototype.onLoaded = function() {
    this.onItemsLoaded();
    return InventoryModal.__super__.onLoaded.call(this);
  };

  InventoryModal.prototype.getRenderData = function(context) {
    var itemOriginal, ref, ref1, slot;
    if (context == null) {
      context = {};
    }
    context = InventoryModal.__super__.getRenderData.call(this, context);
    context.equipped = _.values(this.equipment);
    context.items = this.items.models;
    context.itemGroups = this.itemGroups;
    context.slots = this.slots;
    context.selectedHero = this.selectedHero;
    context.selectedHeroClass = (ref = this.selectedHero) != null ? ref.get('heroClass') : void 0;
    context.equipment = _.clone(this.equipment);
    ref1 = context.equipment;
    for (slot in ref1) {
      itemOriginal = ref1[slot];
      context.equipment[slot] = this.items.findWhere({
        original: itemOriginal
      });
    }
    context.gems = me.gems();
    return context;
  };

  InventoryModal.prototype.afterRender = function() {
    InventoryModal.__super__.afterRender.call(this);
    this.$el.find('#play-level-button').css('visibility', 'hidden');
    if (!this.supermodel.finished()) {
      return;
    }
    this.$el.find('#play-level-button').css('visibility', 'visible');
    this.setUpDraggableEventsForAvailableEquipment();
    this.setUpDraggableEventsForEquippedArea();
    this.delegateEvents();
    this.itemDetailsView = new ItemDetailsView();
    this.insertSubView(this.itemDetailsView);
    this.requireLevelEquipment();
    this.$el.find('.nano').nanoScroller({
      alwaysVisible: true
    });
    this.onSelectionChanged();
    return this.onEquipmentChanged();
  };

  InventoryModal.prototype.afterInsert = function() {
    InventoryModal.__super__.afterInsert.call(this);
    this.canvasWidth = this.$el.find('canvas').innerWidth();
    this.canvasHeight = this.$el.find('canvas').innerHeight();
    this.inserted = true;
    return this.requireLevelEquipment();
  };

  InventoryModal.prototype.setUpDraggableEventsForAvailableEquipment = function() {
    var availableItemEl, dragHelper, i, len, ref, results;
    ref = this.$el.find('#unequipped .item');
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      availableItemEl = ref[i];
      availableItemEl = $(availableItemEl);
      if (availableItemEl.hasClass('locked') || availableItemEl.hasClass('restricted')) {
        continue;
      }
      dragHelper = availableItemEl.clone().addClass('draggable-item');
      results.push((function(_this) {
        return function(dragHelper, availableItemEl) {
          availableItemEl.draggable({
            revert: 'invalid',
            appendTo: _this.$el,
            cursorAt: {
              left: 35.5,
              top: 35.5
            },
            helper: function() {
              return dragHelper;
            },
            revertDuration: 200,
            distance: 10,
            scroll: false,
            zIndex: 1100
          });
          return availableItemEl.on('dragstart', function() {
            return _this.selectUnequippedItem(availableItemEl);
          });
        };
      })(this)(dragHelper, availableItemEl));
    }
    return results;
  };

  InventoryModal.prototype.setUpDraggableEventsForEquippedArea = function() {
    var fn, i, itemSlot, len, ref, slot;
    ref = this.$el.find('.item-slot');
    fn = (function(_this) {
      return function(slot, itemSlot) {
        $(itemSlot).droppable({
          drop: function(e, ui) {
            return _this.equipSelectedItem();
          },
          accept: function(el) {
            return $(el).parent().hasClass(slot);
          },
          activeClass: 'droppable',
          hoverClass: 'droppable-hover',
          tolerance: 'touch'
        });
        return _this.makeEquippedSlotDraggable($(itemSlot));
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      itemSlot = ref[i];
      slot = $(itemSlot).data('slot');
      fn(slot, itemSlot);
    }
    return this.$el.find('#equipped').droppable({
      drop: (function(_this) {
        return function(e, ui) {
          return _this.equipSelectedItem();
        };
      })(this),
      accept: function(el) {
        return true;
      },
      activeClass: 'droppable',
      hoverClass: 'droppable-hover',
      tolerance: 'pointer'
    });
  };

  InventoryModal.prototype.makeEquippedSlotDraggable = function(slot) {
    var shouldStayEquippedWhenDropped, unequip;
    unequip = (function(_this) {
      return function() {
        var item, itemEl, selectedSlotItemID;
        itemEl = _this.unequipItemFromSlot(slot);
        selectedSlotItemID = itemEl.data('item-id');
        item = _this.items.get(selectedSlotItemID);
        _this.requireLevelEquipment();
        _this.showItemDetails(item, 'equip');
        _this.onSelectionChanged();
        return _this.onEquipmentChanged();
      };
    })(this);
    shouldStayEquippedWhenDropped = function(isValidDrop) {
      var pos, revert;
      pos = $(this).position();
      revert = Math.abs(pos.left) < $(this).outerWidth() && Math.abs(pos.top) < $(this).outerHeight();
      if (!revert) {
        unequip();
      }
      return revert;
    };
    $(slot).find('img').draggable({
      revert: shouldStayEquippedWhenDropped,
      appendTo: this.$el,
      cursorAt: {
        left: 35.5,
        top: 35.5
      },
      revertDuration: 200,
      distance: 10,
      scroll: false,
      zIndex: 100
    });
    return slot.on('dragstart', (function(_this) {
      return function() {
        return _this.selectItemSlot(slot);
      };
    })(this));
  };

  InventoryModal.prototype.onItemSlotClick = function(e) {
    var ref;
    if ((ref = this.remainingRequiredEquipment) != null ? ref.length : void 0) {
      return;
    }
    return this.selectItemSlot($(e.target).closest('.item-slot'));
  };

  InventoryModal.prototype.onUnequippedItemClick = function(e) {
    var itemEl;
    if (this.justDoubleClicked) {
      return;
    }
    if (this.justClickedEquipItemButton) {
      return;
    }
    itemEl = $(e.target).closest('.item');
    return this.selectUnequippedItem(itemEl);
  };

  InventoryModal.prototype.onUnequippedItemDoubleClick = function(e) {
    var itemEl;
    itemEl = $(e.target).closest('.item');
    if (itemEl.hasClass('locked') || itemEl.hasClass('restricted')) {
      return;
    }
    this.equipSelectedItem();
    this.justDoubleClicked = true;
    return _.defer((function(_this) {
      return function() {
        return _this.justDoubleClicked = false;
      };
    })(this));
  };

  InventoryModal.prototype.onEquippedItemDoubleClick = function() {
    return this.unequipSelectedItem();
  };

  InventoryModal.prototype.onClickEquipItemViewed = function() {
    return this.equipSelectedItem();
  };

  InventoryModal.prototype.onClickUnequipItemViewed = function() {
    return this.unequipSelectedItem();
  };

  InventoryModal.prototype.onClickEquipItemButton = function(e) {
    var itemEl;
    this.playSound('menu-button-click');
    itemEl = $(e.target).closest('.item');
    this.selectUnequippedItem(itemEl);
    this.equipSelectedItem();
    this.justClickedEquipItemButton = true;
    return _.defer((function(_this) {
      return function() {
        return _this.justClickedEquipItemButton = false;
      };
    })(this));
  };

  InventoryModal.prototype.selectItemSlot = function(slotEl) {
    var item, selectedSlotItemID;
    this.clearSelection();
    slotEl.addClass('selected');
    selectedSlotItemID = slotEl.find('.item').data('item-id');
    item = this.items.get(selectedSlotItemID);
    if (item) {
      this.showItemDetails(item, 'unequip');
    }
    return this.onSelectionChanged();
  };

  InventoryModal.prototype.selectUnequippedItem = function(itemEl) {
    var showExtra;
    this.clearSelection();
    itemEl.addClass('active');
    showExtra = itemEl.hasClass('restricted') ? 'restricted' : !itemEl.hasClass('locked') ? 'equip' : '';
    this.showItemDetails(this.items.get(itemEl.data('item-id')), showExtra);
    return this.onSelectionChanged();
  };

  InventoryModal.prototype.equipSelectedItem = function() {
    var allowedSlot, allowedSlots, firstSlot, i, len, selectedItem, selectedItemEl, slotEl, unequipped, unequippedSlot;
    selectedItemEl = this.getSelectedUnequippedItem();
    selectedItem = this.items.get(selectedItemEl.data('item-id'));
    if (!selectedItem) {
      return;
    }
    allowedSlots = selectedItem.getAllowedSlots();
    firstSlot = unequippedSlot = null;
    for (i = 0, len = allowedSlots.length; i < len; i++) {
      allowedSlot = allowedSlots[i];
      slotEl = this.$el.find(".item-slot[data-slot='" + allowedSlot + "']");
      if (firstSlot == null) {
        firstSlot = slotEl;
      }
      if (!slotEl.find('img').length) {
        if (unequippedSlot == null) {
          unequippedSlot = slotEl;
        }
      }
    }
    slotEl = unequippedSlot != null ? unequippedSlot : firstSlot;
    selectedItemEl.effect('transfer', {
      to: slotEl,
      duration: 500,
      easing: 'easeOutCubic'
    });
    unequipped = this.unequipItemFromSlot(slotEl);
    selectedItemEl.addClass('equipped');
    slotEl.append(selectedItemEl.find('img').clone().addClass('item').data('item-id', selectedItem.id));
    this.clearSelection();
    this.showItemDetails(selectedItem, 'unequip');
    slotEl.addClass('selected');
    selectedItem.classes.push('equipped');
    this.makeEquippedSlotDraggable(slotEl);
    this.requireLevelEquipment();
    this.onSelectionChanged();
    return this.onEquipmentChanged();
  };

  InventoryModal.prototype.unequipSelectedItem = function() {
    var item, itemEl, selectedSlotItemID, slotEl;
    slotEl = this.getSelectedSlot();
    this.clearSelection();
    itemEl = this.unequipItemFromSlot(slotEl);
    if (!(itemEl != null ? itemEl.length : void 0)) {
      return;
    }
    itemEl.addClass('active');
    slotEl.effect('transfer', {
      to: itemEl,
      duration: 500,
      easing: 'easeOutCubic'
    });
    selectedSlotItemID = itemEl.data('item-id');
    item = this.items.get(selectedSlotItemID);
    item.classes = _.without(item.classes, 'equipped');
    this.showItemDetails(item, 'equip');
    this.requireLevelEquipment();
    this.onSelectionChanged();
    return this.onEquipmentChanged();
  };

  InventoryModal.prototype.clearSelection = function() {
    this.deselectAllSlots();
    this.deselectAllUnequippedItems();
    return this.hideItemDetails();
  };

  InventoryModal.prototype.unequipItemFromSlot = function(slotEl) {
    var item, itemEl, itemIDToUnequip;
    itemEl = slotEl.find('.item');
    itemIDToUnequip = itemEl.data('item-id');
    if (!itemIDToUnequip) {
      return;
    }
    itemEl.remove();
    item = this.items.get(itemIDToUnequip);
    item.classes = _.without(item.classes, 'equipped');
    return this.$el.find("#unequipped .item[data-item-id=" + itemIDToUnequip + "]").removeClass('equipped');
  };

  InventoryModal.prototype.deselectAllSlots = function() {
    return this.$el.find('#equipped .item-slot.selected').removeClass('selected');
  };

  InventoryModal.prototype.deselectAllUnequippedItems = function() {
    return this.$el.find('#unequipped .item').removeClass('active');
  };

  InventoryModal.prototype.getSlot = function(name) {
    return this.$el.find(".item-slot[data-slot=" + name + "]");
  };

  InventoryModal.prototype.getSelectedSlot = function() {
    return this.$el.find('#equipped .item-slot.selected');
  };

  InventoryModal.prototype.getSelectedUnequippedItem = function() {
    return this.$el.find('#unequipped .item.active');
  };

  InventoryModal.prototype.onSelectionChanged = function() {
    var heroClass, itemsCanBeEquipped, ref, toShow;
    heroClass = (ref = this.selectedHero) != null ? ref.get('heroClass') : void 0;
    itemsCanBeEquipped = this.$el.find('#unequipped .item.available:not(.equipped)').filter('.' + heroClass).length;
    toShow = this.$el.find('#double-click-hint, #available-description');
    if (itemsCanBeEquipped) {
      toShow.removeClass('secret');
    } else {
      toShow.addClass('secret');
    }
    return this.delegateEvents();
  };

  InventoryModal.prototype.showItemDetails = function(item, showExtra) {
    this.itemDetailsView.setItem(item);
    this.$el.find('#item-details-extra > *').addClass('secret');
    return this.$el.find("#" + showExtra + "-item-viewed").removeClass('secret');
  };

  InventoryModal.prototype.hideItemDetails = function() {
    var ref;
    if ((ref = this.itemDetailsView) != null) {
      ref.setItem(null);
    }
    return this.$el.find('#item-details-extra > *').addClass('secret');
  };

  InventoryModal.prototype.getCurrentEquipmentConfig = function() {
    var config, i, item, len, ref, slot, slotItemID, slotName;
    config = {};
    ref = this.$el.find('.item-slot');
    for (i = 0, len = ref.length; i < len; i++) {
      slot = ref[i];
      slotName = $(slot).data('slot');
      slotItemID = $(slot).find('.item').data('item-id');
      if (!slotItemID) {
        continue;
      }
      item = _.find(this.items.models, {
        id: slotItemID
      });
      config[slotName] = item.get('original');
    }
    return config;
  };

  InventoryModal.prototype.requireLevelEquipment = function() {
    var equipment, hadRequired, ref;
    if (!(this.inserted && this.itemsProgrammablePropertiesConfigured)) {
      return;
    }
    equipment = this.supermodel.finished() ? this.getCurrentEquipmentConfig() : this.equipment;
    hadRequired = (ref = this.remainingRequiredEquipment) != null ? ref.length : void 0;
    this.remainingRequiredEquipment = [];
    this.$el.find('.should-equip').removeClass('should-equip');
    this.unequipClassRestrictedItems(equipment);
    this.unequipLevelRestrictedItems(equipment);
    this.updateLevelRequiredItems(equipment);
    if (hadRequired && !this.remainingRequiredEquipment.length) {
      this.endHighlight();
      this.highlightElement('#play-level-button', {
        duration: 5000
      });
    }
    return $('#play-level-button').prop('disabled', this.remainingRequiredEquipment.length > 0);
  };

  InventoryModal.prototype.unequipClassRestrictedItems = function(equipment) {
    var heroClass, item, itemModel, ref, ref1, results, slot;
    if (!(this.supermodel.finished() && (heroClass = (ref = this.selectedHero) != null ? ref.get('heroClass') : void 0))) {
      return;
    }
    ref1 = _.clone(equipment);
    results = [];
    for (slot in ref1) {
      item = ref1[slot];
      itemModel = this.items.findWhere({
        original: item
      });
      if (!(itemModel && indexOf.call(itemModel.classes, heroClass) >= 0)) {
        console.log('Unequipping', itemModel.get('heroClass'), 'item', itemModel.get('name'), 'from slot due to class restrictions.');
        this.unequipItemFromSlot(this.$el.find(".item-slot[data-slot='" + slot + "']"));
        results.push(delete equipment[slot]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  InventoryModal.prototype.calculateRequiredGearPerSlot = function() {
    var i, item, j, k, len, len1, len2, prop, ref, ref1, ref2, ref3, ref4, ref5, requiredGear, requiredProperties, requiredPropertiesOnThisItem, requiredPropertiesPerSlot, restrictedProperties, restrictedPropertiesOnThisItem, slot;
    if (this.requiredGearPerSlot) {
      return this.requiredGearPerSlot;
    }
    requiredGear = (ref = _.clone(this.options.level.get('requiredGear'))) != null ? ref : {};
    requiredProperties = (ref1 = this.options.level.get('requiredProperties')) != null ? ref1 : [];
    restrictedProperties = (ref2 = this.options.level.get('restrictedProperties')) != null ? ref2 : [];
    requiredPropertiesPerSlot = {};
    ref3 = this.items.models;
    for (i = 0, len = ref3.length; i < len; i++) {
      item = ref3[i];
      requiredPropertiesOnThisItem = _.intersection(item.programmableProperties, requiredProperties);
      restrictedPropertiesOnThisItem = _.intersection(item.programmableProperties, restrictedProperties);
      if (!(requiredPropertiesOnThisItem.length && !restrictedPropertiesOnThisItem.length)) {
        continue;
      }
      ref4 = item.getAllowedSlots();
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        slot = ref4[j];
        if (slot !== 'right-hand' && _.isEqual(requiredPropertiesOnThisItem, ['buildXY'])) {
          continue;
        }
        if (requiredGear[slot] == null) {
          requiredGear[slot] = [];
        }
        if (ref5 = item.get('original'), indexOf.call(requiredGear[slot], ref5) < 0) {
          requiredGear[slot].push(item.get('original'));
        }
        if (requiredPropertiesPerSlot[slot] == null) {
          requiredPropertiesPerSlot[slot] = [];
        }
        for (k = 0, len2 = requiredPropertiesOnThisItem.length; k < len2; k++) {
          prop = requiredPropertiesOnThisItem[k];
          if (indexOf.call(requiredPropertiesPerSlot[slot], prop) < 0) {
            requiredPropertiesPerSlot[slot].push(prop);
          }
        }
      }
    }
    this.requiredPropertiesPerSlot = requiredPropertiesPerSlot;
    this.requiredGearPerSlot = requiredGear;
    return this.requiredGearPerSlot;
  };

  InventoryModal.prototype.calculateRestrictedGearPerSlot = function() {
    var i, item, j, len, len1, ref, ref1, ref2, ref3, ref4, requiredPropertiesNotOnThisItem, restrictedGear, restrictedProperties, restrictedPropertiesOnThisItem, slot;
    if (this.restrictedGearPerSlot) {
      return this.restrictedGearPerSlot;
    }
    if (!this.requiredGearPerSlot) {
      this.calculateRequiredGearPerSlot();
    }
    restrictedGear = (ref = _.clone(this.options.level.get('restrictedGear'))) != null ? ref : {};
    restrictedProperties = (ref1 = this.options.level.get('restrictedProperties')) != null ? ref1 : [];
    ref2 = this.items.models;
    for (i = 0, len = ref2.length; i < len; i++) {
      item = ref2[i];
      restrictedPropertiesOnThisItem = _.intersection(item.programmableProperties, restrictedProperties);
      ref3 = item.getAllowedSlots();
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        slot = ref3[j];
        requiredPropertiesNotOnThisItem = _.without.apply(_, [this.requiredPropertiesPerSlot[slot]].concat(slice.call(item.programmableProperties)));
        if (restrictedPropertiesOnThisItem.length || requiredPropertiesNotOnThisItem.length) {
          if (restrictedGear[slot] == null) {
            restrictedGear[slot] = [];
          }
          if (ref4 = item.get('original'), indexOf.call(restrictedGear[slot], ref4) < 0) {
            restrictedGear[slot].push(item.get('original'));
          }
        }
      }
    }
    this.restrictedGearPerSlot = restrictedGear;
    return this.restrictedGearPerSlot;
  };

  InventoryModal.prototype.unequipLevelRestrictedItems = function(equipment) {
    var equipped, i, item, items, len, restrictedGear, slot;
    restrictedGear = this.calculateRestrictedGearPerSlot();
    for (slot in restrictedGear) {
      items = restrictedGear[slot];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        equipped = equipment[slot];
        if (equipped && equipped === item) {
          console.log('Unequipping restricted item', equipped, 'for', slot, 'before level', this.options.level.get('slug'));
          this.unequipItemFromSlot(this.$el.find(".item-slot[data-slot='" + slot + "']"));
          delete equipment[slot];
        }
      }
    }
    return null;
  };

  InventoryModal.prototype.updateLevelRequiredItems = function(equipment) {
    var $itemEl, availableSlotSelector, bestOwnedItem, heroClass, inCampaignView, item, itemModel, itemOffsetBottom, itemOffsetTop, items, parentHeight, ref, ref1, requiredGear, slot, slug, validSlots;
    if (!(heroClass = (ref = this.selectedHero) != null ? ref.get('heroClass') : void 0)) {
      return;
    }
    requiredGear = this.calculateRequiredGearPerSlot();
    for (slot in requiredGear) {
      items = requiredGear[slot];
      if (!items.length) {
        continue;
      }
      if (indexOf.call(this.ringSlots, slot) >= 0) {
        validSlots = this.ringSlots;
      } else {
        validSlots = [slot];
      }
      if (validSlots.some(function(slot) {
        var equipped;
        equipped = equipment[slot];
        return indexOf.call(items, equipped) >= 0;
      })) {
        continue;
      }
      if (equipment[slot] && indexOf.call(this.ringSlots, slot) < 0) {
        continue;
      }
      items = (function() {
        var i, len, ref1, ref2, results;
        results = [];
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          if (indexOf.call((ref1 = (ref2 = this.items.findWhere({
            original: item
          })) != null ? ref2.classes : void 0) != null ? ref1 : [], heroClass) >= 0) {
            results.push(item);
          }
        }
        return results;
      }).call(this);
      if (!items.length) {
        continue;
      }
      items = _.sortBy(items, (function(_this) {
        return function(item) {
          var ref1;
          return (ref1 = _this.items.findWhere({
            original: item
          }).get('tier')) != null ? ref1 : 9001;
        };
      })(this));
      bestOwnedItem = _.findLast(items, function(item) {
        return me.ownsItem(item);
      });
      item = bestOwnedItem != null ? bestOwnedItem : items[0];
      slug = gearSlugs[item];
      inCampaignView = $('#campaign-view').length;
      if (slug === 'tarnished-bronze-breastplate' && inCampaignView && this.options.level.get('slug') === 'the-raised-sword') {
        continue;
      }
      itemModel = this.items.findWhere({
        original: item
      });
      availableSlotSelector = "#unequipped .item[data-item-id='" + itemModel.id + "']";
      this.highlightElement(availableSlotSelector, {
        delay: 500,
        sides: ['right'],
        rotation: Math.PI / 2
      });
      $itemEl = this.$el.find(availableSlotSelector).addClass('should-equip');
      this.$el.find("#equipped div[data-slot='" + slot + "']").addClass('should-equip');
      if (itemOffsetTop = (ref1 = $itemEl[0]) != null ? ref1.offsetTop : void 0) {
        itemOffsetBottom = itemOffsetTop + $itemEl.outerHeight(true);
        parentHeight = $itemEl.parent().height();
        if (itemOffsetBottom > $itemEl.parent().scrollTop() + parentHeight) {
          $itemEl.parent().scrollTop(itemOffsetBottom - parentHeight);
        } else if (itemOffsetTop < $itemEl.parent().scrollTop()) {
          $itemEl.parent().scrollTop(itemOffsetTop);
        }
      }
      this.remainingRequiredEquipment.push({
        slot: slot,
        item: item
      });
    }
    return null;
  };

  InventoryModal.prototype.setHero = function(selectedHero) {
    this.selectedHero = selectedHero;
    if (this.selectedHero.loading) {
      this.listenToOnce(this.selectedHero, 'sync', (function(_this) {
        return function() {
          return typeof _this.setHero === "function" ? _this.setHero(_this.selectedHero) : void 0;
        };
      })(this));
      return;
    }
    this.$el.removeClass('Warrior Ranger Wizard').addClass(this.selectedHero.get('heroClass'));
    this.requireLevelEquipment();
    this.render();
    return this.onEquipmentChanged();
  };

  InventoryModal.prototype.onShown = function() {
    return this.requireLevelEquipment();
  };

  InventoryModal.prototype.onHidden = function() {
    this.endHighlight();
    InventoryModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  InventoryModal.prototype.onClickChooseHero = function() {
    this.playSound('menu-button-click');
    this.hide();
    return this.trigger('choose-hero-click');
  };

  InventoryModal.prototype.onClickPlayLevel = function(e) {
    var isSafari, isTooShort, levelSlug, ref, ua;
    if (this.$el.find('#play-level-button').prop('disabled')) {
      return;
    }
    levelSlug = this.options.level.get('slug');
    this.playSound('menu-button-click');
    this.showLoading();
    ua = navigator.userAgent.toLowerCase();
    isSafari = /safari/.test(ua) && !/chrome/.test(ua);
    isTooShort = $(window).height() < 658;
    if (isTooShort && !me.isAdmin() && !hasGoneFullScreenOnce && !isSafari) {
      this.toggleFullscreen();
      hasGoneFullScreenOnce = true;
    }
    this.updateConfig((function(_this) {
      return function() {
        return typeof _this.trigger === "function" ? _this.trigger('play-click') : void 0;
      };
    })(this));
    return (ref = window.tracker) != null ? ref.trackEvent('Inventory Play', {
      category: 'Play Level',
      level: levelSlug
    }) : void 0;
  };

  InventoryModal.prototype.updateConfig = function(callback, skipSessionSave) {
    var hero, inventory, lastHeroConfig, patchMe, patchSession, ref, ref1, ref2, sessionHeroConfig;
    sessionHeroConfig = (ref = this.options.session.get('heroConfig')) != null ? ref : {};
    lastHeroConfig = (ref1 = me.get('heroConfig')) != null ? ref1 : {};
    inventory = this.getCurrentEquipmentConfig();
    patchSession = patchMe = false;
    patchSession || (patchSession = !_.isEqual(inventory, sessionHeroConfig.inventory));
    sessionHeroConfig.inventory = inventory;
    if (hero = (ref2 = this.selectedHero) != null ? ref2.get('original') : void 0) {
      patchSession || (patchSession = !_.isEqual(hero, sessionHeroConfig.thangType));
      sessionHeroConfig.thangType = hero;
    }
    patchMe || (patchMe = !_.isEqual(inventory, lastHeroConfig.inventory));
    lastHeroConfig.inventory = inventory;
    if (patchMe) {
      console.log('setting me.heroConfig to', JSON.stringify(lastHeroConfig));
      me.set('heroConfig', lastHeroConfig);
      me.patch();
    }
    if (patchSession) {
      console.log('setting session.heroConfig to', JSON.stringify(sessionHeroConfig));
      this.options.session.set('heroConfig', sessionHeroConfig);
      if (!skipSessionSave) {
        return this.options.session.patch({
          success: callback
        });
      }
    } else {
      return typeof callback === "function" ? callback() : void 0;
    }
  };

  InventoryModal.prototype.onUnlockButtonClicked = function(e) {
    var affordable, button, equipped, i, item, len, otherItem, purchase, purchased, ref, ref1, ref2;
    e.stopPropagation();
    button = $(e.target).closest('button');
    item = this.items.get(button.data('item-id'));
    affordable = item.affordable;
    if (!affordable) {
      this.playSound('menu-button-click');
      if (!features.freeOnly) {
        return this.askToBuyGems(button);
      }
    } else if (button.hasClass('confirm')) {
      this.playSound('menu-button-unlock-end');
      purchase = Purchase.makeFor(item);
      purchase.save();
      purchased = (ref = me.get('purchased')) != null ? ref : {};
      if (purchased.items == null) {
        purchased.items = [];
      }
      purchased.items.push(item.get('original'));
      me.set('purchased', purchased);
      me.set('spent', ((ref1 = me.get('spent')) != null ? ref1 : 0) + item.get('gems'));
      this.itemGroups.lockedItems.remove(item);
      this.itemGroups.requiredPurchaseItems.remove(item);
      equipped = _.values(this.getCurrentEquipmentConfig());
      ref2 = this.items.models;
      for (i = 0, len = ref2.length; i < len; i++) {
        otherItem = ref2[i];
        this.sortItem(otherItem, equipped);
      }
      this.renderSelectors('#unequipped', '#gems-count');
      this.requireLevelEquipment();
      this.delegateEvents();
      this.setUpDraggableEventsForAvailableEquipment();
      this.itemDetailsView.setItem(item);
      this.onScrollUnequipped(true);
      return Backbone.Mediator.publish('store:item-purchased', {
        item: item,
        itemSlug: item.get('slug')
      });
    } else {
      this.playSound('menu-button-unlock-start');
      button.addClass('confirm').text($.i18n.t('play.confirm'));
      return this.$el.one('click', function(e) {
        if (e.target !== button[0]) {
          return button.removeClass('confirm').text($.i18n.t('play.unlock'));
        }
      });
    }
  };

  InventoryModal.prototype.askToSignUp = function() {
    var createAccountModal;
    createAccountModal = new CreateAccountModal({
      supermodel: this.supermodel
    });
    return this.openModalView(createAccountModal);
  };

  InventoryModal.prototype.askToBuyGems = function(unlockButton) {
    var popover, popoverTemplate, ref;
    this.$el.find('.unlock-button').popover('destroy');
    popoverTemplate = buyGemsPromptTemplate({});
    unlockButton.popover({
      animation: true,
      trigger: 'manual',
      placement: 'top',
      content: ' ',
      container: this.$el,
      template: popoverTemplate
    }).popover('show');
    popover = unlockButton.data('bs.popover');
    return popover != null ? (ref = popover.$tip) != null ? ref.i18n() : void 0 : void 0;
  };

  InventoryModal.prototype.onBuyGemsPromptButtonClicked = function(e) {
    this.playSound('menu-button-click');
    if (me.get('anonymous')) {
      return this.askToSignUp();
    }
    return this.openModalView(new BuyGemsModal());
  };

  InventoryModal.prototype.onClickedSomewhere = function(e) {
    if (this.destroyed) {
      return;
    }
    return this.$el.find('.unlock-button').popover('destroy');
  };

  InventoryModal.prototype.onScrollUnequipped = function(forceLoadAll) {
    var i, item, itemEl, items, len, nanoContent, results, threshold;
    if (forceLoadAll == null) {
      forceLoadAll = false;
    }
    if (this.destroyed) {
      return;
    }
    nanoContent = this.$el.find('#unequipped .nano-content');
    items = nanoContent.find('.item:visible:not(.loaded)');
    threshold = nanoContent.height() + 100;
    results = [];
    for (i = 0, len = items.length; i < len; i++) {
      itemEl = items[i];
      itemEl = $(itemEl);
      if (itemEl.position().top < threshold || forceLoadAll) {
        itemEl.addClass('loaded');
        item = this.items.get(itemEl.data('item-id'));
        results.push(itemEl.find('img').attr('src', item.getPortraitURL()));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  InventoryModal.prototype.onEquipmentChanged = function() {
    var didAdd, dollImages, equipment, gender, heroClass, item, original, ref, ref1, ref2, ref3, slot, slotsWithImages;
    heroClass = (ref = (ref1 = this.selectedHero) != null ? ref1.get('heroClass') : void 0) != null ? ref : 'Warrior';
    gender = (ref2 = (ref3 = this.selectedHero) != null ? ref3.get('slug') : void 0, indexOf.call(heroGenders.male, ref2) >= 0) ? 'male' : 'female';
    this.$el.find('#hero-image, #hero-image-hair, #hero-image-head, #hero-image-thumb').removeClass().addClass(gender + " " + heroClass);
    equipment = this.getCurrentEquipmentConfig();
    this.onScrollUnequipped();
    if (!(_.size(equipment) && this.supermodel.finished())) {
      return;
    }
    this.removeDollImages();
    slotsWithImages = [];
    for (slot in equipment) {
      original = equipment[slot];
      item = _.find(this.items.models, function(item) {
        return item.get('original') === original;
      });
      if (!(dollImages = item != null ? item.get('dollImages') : void 0)) {
        continue;
      }
      didAdd = this.addDollImage(slot, dollImages, heroClass, gender, item);
      if (item.get('original') !== '54ea39342b7506e891ca70f2') {
        if (didAdd) {
          slotsWithImages.push(slot);
        }
      }
    }
    this.$el.find('#hero-image-hair').toggle(!(indexOf.call(slotsWithImages, 'head') >= 0));
    this.$el.find('#hero-image-thumb').toggle(!(indexOf.call(slotsWithImages, 'gloves') >= 0));
    return this.equipment = this.options.equipment = equipment;
  };

  InventoryModal.prototype.removeDollImages = function() {
    return this.$el.find('.doll-image').remove();
  };

  InventoryModal.prototype.addDollImage = function(slot, dollImages, heroClass, gender, item) {
    var didAdd, i, imageEl, imageKey, imageKeys, imageURL, len, ref, ref1, ref2, ref3, ref4;
    heroClass = (ref = (ref1 = this.selectedHero) != null ? ref1.get('heroClass') : void 0) != null ? ref : 'Warrior';
    gender = (ref2 = (ref3 = this.selectedHero) != null ? ref3.get('slug') : void 0, indexOf.call(heroGenders.male, ref2) >= 0) ? 'male' : 'female';
    didAdd = false;
    if (slot === 'gloves') {
      if (heroClass === 'Ranger') {
        imageKeys = ["" + gender + heroClass, "" + gender + heroClass + "Thumb"];
      } else {
        imageKeys = ["" + gender, gender + "Thumb"];
      }
    } else if (heroClass === 'Wizard' && slot === 'torso') {
      imageKeys = [gender, gender + "Back"];
    } else if (heroClass === 'Ranger' && slot === 'head' && ((ref4 = item.get('original')) === '5441c2be4e9aeb727cc97105' || ref4 === '5441c3144e9aeb727cc97111')) {
      imageKeys = [gender + "Ranger"];
    } else {
      imageKeys = [gender];
    }
    for (i = 0, len = imageKeys.length; i < len; i++) {
      imageKey = imageKeys[i];
      imageURL = dollImages[imageKey];
      if (!imageURL) {
        console.log("Hmm, should have " + slot + " " + imageKey + " paper doll image, but don't have it.");
      } else {
        imageEl = $('<img>').attr('src', "/file/" + imageURL).addClass("doll-image " + slot + " " + heroClass + " " + gender + " " + (_.string.underscored(imageKey).replace(/_/g, '-'))).attr('draggable', false);
        this.$el.find('#equipped').append(imageEl);
        didAdd = true;
      }
    }
    return didAdd;
  };

  InventoryModal.prototype.destroy = function() {
    var ref;
    this.$el.find('.unlock-button').popover('destroy');
    this.$el.find('.ui-droppable').droppable('destroy');
    this.$el.find('.ui-draggable').draggable('destroy').off('dragstart');
    this.$el.find('.item-slot').off('dragstart');
    if ((ref = this.stage) != null) {
      ref.removeAllChildren();
    }
    return InventoryModal.__super__.destroy.call(this);
  };

  return InventoryModal;

})(ModalView);

heroGenders = {
  male: ['knight', 'samurai', 'trapper', 'potion-master', 'goliath', 'assassin', 'necromancer', 'duelist', 'code-ninja'],
  female: ['captain', 'ninja', 'forest-archer', 'librarian', 'sorcerer', 'raider', 'guardian', 'pixie', 'master-wizard', 'champion']
};

gear = {
  'simple-boots': '53e237bf53457600003e3f05',
  'simple-sword': '53e218d853457600003e3ebe',
  'tarnished-bronze-breastplate': '53e22eac53457600003e3efc',
  'leather-boots': '53e2384453457600003e3f07',
  'leather-belt': '5437002a7beba4a82024a97d',
  'programmaticon-i': '53e4108204c00d4607a89f78',
  'programmaticon-ii': '546e25d99df4a17d0d449be1',
  'crude-glasses': '53e238df53457600003e3f0b',
  'crude-builders-hammer': '53f4e6e3d822c23505b74f42',
  'long-sword': '544d7d1f8494308424f564a3',
  'sundial-wristwatch': '53e2396a53457600003e3f0f',
  'bronze-shield': '544c310ae0017993fce214bf',
  'wooden-glasses': '53e2167653457600003e3eb3',
  'basic-flags': '545bacb41e649a4495f887da',
  'roughedge': '544d7d918494308424f564a7',
  'sharpened-sword': '544d7deb8494308424f564ab',
  'crude-crossbow': '544d7ffd8494308424f564c3',
  'crude-dagger': '544d952b8494308424f56517',
  'weak-charge': '544d957d8494308424f5651f',
  'enchanted-stick': '544d87188494308424f564f1',
  'unholy-tome-i': '546374bc3839c6e02811d308',
  'book-of-life-i': '546375653839c6e02811d30b',
  'rough-sense-stone': '54693140a2b1f53ce79443bc',
  'polished-sense-stone': '53e215a253457600003e3eaf',
  'quartz-sense-stone': '54693240a2b1f53ce79443c5',
  'wooden-builders-hammer': '54694ba3a2b1f53ce794444d',
  'simple-wristwatch': '54693797a2b1f53ce79443e9'
};

gearSlugs = _.invert(gear);
});

;require.register("views/play/menu/ItemView", function(exports, require, module) {
var CocoView, ItemView, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/menu/item-view');

module.exports = ItemView = (function(superClass) {
  extend(ItemView, superClass);

  function ItemView() {
    return ItemView.__super__.constructor.apply(this, arguments);
  }

  ItemView.prototype.className = 'item-view';

  ItemView.prototype.template = template;

  ItemView.prototype.initialize = function(options) {
    ItemView.__super__.initialize.apply(this, arguments);
    this.item = options.item;
    return this.includes = options.includes || {};
  };

  ItemView.prototype.getRenderData = function() {
    var c, props, ref, stats;
    c = ItemView.__super__.getRenderData.call(this);
    c.item = this.item;
    c.includes = this.includes;
    if (this.includes.props || this.includes.stats) {
      ref = this.item.getFrontFacingStats(), props = ref.props, stats = ref.stats;
      c.props = props;
      c.stats = stats;
    }
    return c;
  };

  ItemView.prototype.afterRender = function() {
    return this.$el.data('item-id', this.item.id);
  };

  return ItemView;

})(CocoView);
});

;require.register("views/play/menu/OptionsView", function(exports, require, module) {
var CocoView, OptionsView, ThangType, User, forms, me, template,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/menu/options-view');

me = require('core/auth').me;

ThangType = require('models/ThangType');

User = require('models/User');

forms = require('core/forms');

module.exports = OptionsView = (function(superClass) {
  extend(OptionsView, superClass);

  OptionsView.prototype.id = 'options-view';

  OptionsView.prototype.className = 'tab-pane';

  OptionsView.prototype.template = template;

  OptionsView.prototype.aceConfig = {};

  OptionsView.prototype.defaultConfig = {
    language: 'python',
    keyBindings: 'default',
    invisibles: false,
    indentGuides: false,
    behaviors: false,
    liveCompletion: true
  };

  OptionsView.prototype.events = {
    'change #option-music': 'updateMusic',
    'change #option-invisibles': 'updateInvisibles',
    'change #option-indent-guides': 'updateIndentGuides',
    'change #option-behaviors': 'updateBehaviors',
    'change #option-live-completion': 'updateLiveCompletion',
    'click .profile-photo': 'onEditProfilePhoto',
    'click .editable-icon': 'onEditProfilePhoto',
    'keyup #player-name': function() {
      return this.trigger('nameChanged');
    }
  };

  function OptionsView(options) {
    this.checkNameExists = bind(this.checkNameExists, this);
    this.onVolumeSliderChange = bind(this.onVolumeSliderChange, this);
    this.uploadFilePath = "db/user/" + me.id;
    this.onNameChange = _.debounce(this.checkNameExists, 500);
    this.on('nameChanged', this.onNameChange);
    this.playerName = me.get('name');
    if (!window.application.isIPadApp) {
      require('core/services/filepicker')();
    }
    OptionsView.__super__.constructor.call(this, options);
  }

  OptionsView.prototype.getRenderData = function(c) {
    var ref;
    if (c == null) {
      c = {};
    }
    c = OptionsView.__super__.getRenderData.call(this, c);
    this.aceConfig = _.cloneDeep((ref = me.get('aceConfig')) != null ? ref : {});
    this.aceConfig = _.defaults(this.aceConfig, this.defaultConfig);
    c.aceConfig = this.aceConfig;
    c.music = me.get('music', true);
    return c;
  };

  OptionsView.prototype.afterRender = function() {
    OptionsView.__super__.afterRender.call(this);
    this.volumeSlider = this.$el.find('#option-volume').slider({
      animate: 'fast',
      min: 0,
      max: 1,
      step: 0.05
    });
    this.volumeSlider.slider('value', me.get('volume'));
    this.volumeSlider.on('slide', this.onVolumeSliderChange);
    return this.volumeSlider.on('slidechange', this.onVolumeSliderChange);
  };

  OptionsView.prototype.destroy = function() {
    var ref;
    if ((ref = this.volumeSlider) != null) {
      if (typeof ref.slider === "function") {
        ref.slider('destroy');
      }
    }
    return OptionsView.__super__.destroy.call(this);
  };

  OptionsView.prototype.onVolumeSliderChange = function(e) {
    var volume;
    volume = this.volumeSlider.slider('value');
    me.set('volume', volume);
    this.$el.find('#option-volume-value').text((volume * 100).toFixed(0) + '%');
    Backbone.Mediator.publish('level:set-volume', {
      volume: volume
    });
    return this.playSound('menu-button-click');
  };

  OptionsView.prototype.onHidden = function() {
    if (this.playerName && this.playerName !== me.get('name')) {
      me.set('name', this.playerName);
    }
    this.aceConfig.invisibles = this.$el.find('#option-invisibles').prop('checked');
    this.aceConfig.keyBindings = 'default';
    this.aceConfig.indentGuides = this.$el.find('#option-indent-guides').prop('checked');
    this.aceConfig.behaviors = this.$el.find('#option-behaviors').prop('checked');
    this.aceConfig.liveCompletion = this.$el.find('#option-live-completion').prop('checked');
    me.set('aceConfig', this.aceConfig);
    me.patch();
    return Backbone.Mediator.publish('tome:change-config', {});
  };

  OptionsView.prototype.updateMusic = function() {
    return me.set('music', this.$el.find('#option-music').prop('checked'));
  };

  OptionsView.prototype.updateInvisibles = function() {
    return this.aceConfig.invisibles = this.$el.find('#option-invisibles').prop('checked');
  };

  OptionsView.prototype.updateKeyBindings = function() {
    return this.aceConfig.keyBindings = this.$el.find('#option-key-bindings').val();
  };

  OptionsView.prototype.updateIndentGuides = function() {
    return this.aceConfig.indentGuides = this.$el.find('#option-indent-guides').prop('checked');
  };

  OptionsView.prototype.updateBehaviors = function() {
    return this.aceConfig.behaviors = this.$el.find('#option-behaviors').prop('checked');
  };

  OptionsView.prototype.updateLiveCompletion = function() {
    return this.aceConfig.liveCompletion = this.$el.find('#option-live-completion').prop('checked');
  };

  OptionsView.prototype.checkNameExists = function() {
    var name;
    forms.clearFormAlerts(this.$el);
    name = $('#player-name').val();
    return User.getUnconflictedName(name, (function(_this) {
      return function(newName) {
        forms.clearFormAlerts(_this.$el);
        if (name !== newName) {
          return forms.setErrorToProperty(_this.$el, 'playerName', 'This name is already taken so you won\'t be able to keep it.', true);
        } else {
          return _this.playerName = newName;
        }
      };
    })(this));
  };

  OptionsView.prototype.onEditProfilePhoto = function(e) {
    var onSaved, onSaving, photoContainer;
    if (window.application.isIPadApp) {
      return;
    }
    this.playSound('menu-button-click');
    photoContainer = this.$el.find('.profile-photo');
    onSaving = (function(_this) {
      return function() {
        return photoContainer.addClass('saving');
      };
    })(this);
    onSaved = (function(_this) {
      return function(uploadingPath) {
        me.set('photoURL', uploadingPath);
        return photoContainer.removeClass('saving').attr('src', me.getPhotoURL(photoContainer.width()));
      };
    })(this);
    return filepicker.pick({
      mimetypes: 'image/*'
    }, this.onImageChosen(onSaving, onSaved));
  };

  OptionsView.prototype.formatImagePostData = function(inkBlob) {
    return {
      url: inkBlob.url,
      filename: inkBlob.filename,
      mimetype: inkBlob.mimetype,
      path: this.uploadFilePath,
      force: true
    };
  };

  OptionsView.prototype.onImageChosen = function(onSaving, onSaved) {
    return (function(_this) {
      return function(inkBlob) {
        var uploadingPath;
        onSaving();
        uploadingPath = [_this.uploadFilePath, inkBlob.filename].join('/');
        return $.ajax('/file', {
          type: 'POST',
          data: _this.formatImagePostData(inkBlob),
          success: _this.onImageUploaded(onSaved, uploadingPath)
        });
      };
    })(this);
  };

  OptionsView.prototype.onImageUploaded = function(onSaved, uploadingPath) {
    return (function(_this) {
      return function(e) {
        return onSaved(uploadingPath);
      };
    })(this);
  };

  return OptionsView;

})(CocoView);
});

;require.register("views/play/menu/SaveLoadView", function(exports, require, module) {
var CocoView, SaveLoadView, ThangType, me, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/menu/save-load-view');

me = require('core/auth').me;

ThangType = require('models/ThangType');

module.exports = SaveLoadView = (function(superClass) {
  extend(SaveLoadView, superClass);

  function SaveLoadView() {
    return SaveLoadView.__super__.constructor.apply(this, arguments);
  }

  SaveLoadView.prototype.id = 'save-load-view';

  SaveLoadView.prototype.className = 'tab-pane';

  SaveLoadView.prototype.template = template;

  SaveLoadView.prototype.events = {
    'change #save-granularity-toggle input': 'onSaveGranularityChanged'
  };

  SaveLoadView.prototype.afterRender = function() {
    return SaveLoadView.__super__.afterRender.call(this);
  };

  SaveLoadView.prototype.onSaveGranularityChanged = function(e) {
    var toShow;
    this.playSound('menu-button-click');
    toShow = $(e.target).val();
    this.$el.find('.save-list, .save-pane').hide();
    return this.$el.find('.save-list.' + toShow + ', .save-pane.' + toShow).show();
  };

  return SaveLoadView;

})(CocoView);
});

;require.register("views/play/modal/BuyGemsModal", function(exports, require, module) {
var BuyGemsModal, ModalView, Products, SubscribeModal, stripeHandler, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/buy-gems-modal');

stripeHandler = require('core/services/stripe');

utils = require('core/utils');

SubscribeModal = require('views/core/SubscribeModal');

Products = require('collections/Products');

module.exports = BuyGemsModal = (function(superClass) {
  extend(BuyGemsModal, superClass);

  BuyGemsModal.prototype.id = (me.get('preferredLanguage', true) || 'en-US').split('-')[0] === 'nl' ? 'buy-gems-modal-nl' : 'buy-gems-modal';

  BuyGemsModal.prototype.template = template;

  BuyGemsModal.prototype.plain = true;

  BuyGemsModal.prototype.subscriptions = {
    'ipad:products': 'onIPadProducts',
    'ipad:iap-complete': 'onIAPComplete',
    'stripe:received-token': 'onStripeReceivedToken'
  };

  BuyGemsModal.prototype.events = {
    'click .product button:not(.start-subscription-button)': 'onClickProductButton',
    'click #close-modal': 'hide',
    'click .start-subscription-button': 'onClickStartSubscription'
  };

  function BuyGemsModal(options) {
    BuyGemsModal.__super__.constructor.call(this, options);
    this.timestampForPurchase = new Date().getTime();
    this.state = 'standby';
    this.products = new Products();
    this.products.comparator = 'amount';
    if (application.isIPadApp) {
      this.products = [];
      Backbone.Mediator.publish('buy-gems-modal:update-products');
    } else {
      this.supermodel.loadCollection(this.products, 'products');
      $.post('/db/payment/check-stripe-charges', (function(_this) {
        return function(something, somethingElse, jqxhr) {
          if (jqxhr.status === 201) {
            _this.state = 'recovered_charge';
            return _this.render();
          }
        };
      })(this));
    }
  }

  BuyGemsModal.prototype.onLoaded = function() {
    var countrySpecificProduct;
    this.basicProduct = this.products.findWhere({
      name: 'basic_subscription'
    });
    if (countrySpecificProduct = this.products.findWhere({
      name: (me.get('country')) + "_basic_subscription"
    })) {
      this.basicProduct = countrySpecificProduct;
    }
    this.products.reset(this.products.filter(function(product) {
      return _.string.startsWith(product.get('name'), 'gems_');
    }));
    return BuyGemsModal.__super__.onLoaded.call(this);
  };

  BuyGemsModal.prototype.afterRender = function() {
    BuyGemsModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    this.playSound('game-menu-open');
    if (this.basicProduct) {
      return this.$el.find('.subscription-gem-amount').text($.i18n.t('buy_gems.price').replace('{{gems}}', this.basicProduct.get('gems')));
    }
  };

  BuyGemsModal.prototype.onHidden = function() {
    BuyGemsModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  BuyGemsModal.prototype.onIPadProducts = function(e) {};

  BuyGemsModal.prototype.onClickProductButton = function(e) {
    var product, productID, ref;
    this.playSound('menu-button-click');
    productID = $(e.target).closest('button').val();
    if (productID.length === 0) {
      return;
    }
    product = this.products.findWhere({
      name: productID
    });
    if (application.isIPadApp) {
      Backbone.Mediator.publish('buy-gems-modal:purchase-initiated', {
        productID: productID
      });
    } else {
      if ((ref = application.tracker) != null) {
        ref.trackEvent('Started gem purchase', {
          productID: productID
        });
      }
      stripeHandler.open({
        description: $.t(product.get('i18n')),
        amount: product.get('amount'),
        bitcoin: true,
        alipay: me.get('country') === 'china' || (me.get('preferredLanguage') || 'en-US').slice(0, 2) === 'zh' ? true : 'auto'
      });
    }
    return this.productBeingPurchased = product;
  };

  BuyGemsModal.prototype.onStripeReceivedToken = function(e) {
    var data, jqxhr;
    data = {
      productID: this.productBeingPurchased.get('name'),
      stripe: {
        token: e.token.id,
        timestamp: this.timestampForPurchase
      }
    };
    this.state = 'purchasing';
    this.render();
    jqxhr = $.post('/db/payment', data);
    jqxhr.done((function(_this) {
      return function() {
        var ref;
        if ((ref = application.tracker) != null) {
          ref.trackEvent('Finished gem purchase', {
            productID: _this.productBeingPurchased.get('name'),
            value: _this.productBeingPurchased.get('amount')
          });
        }
        return document.location.reload();
      };
    })(this));
    return jqxhr.fail((function(_this) {
      return function() {
        var f;
        if (jqxhr.status === 402) {
          _this.state = 'declined';
          _this.stateMessage = arguments[2];
        } else if (jqxhr.status === 500) {
          _this.state = 'retrying';
          f = _.bind(_this.onStripeReceivedToken, _this, e);
          _.delay(f, 2000);
        } else {
          _this.state = 'unknown_error';
          _this.stateMessage = jqxhr.status + ": " + jqxhr.responseText;
        }
        return _this.render();
      };
    })(this));
  };

  BuyGemsModal.prototype.onIAPComplete = function(e) {
    var product, purchased, ref;
    product = this.products.findWhere({
      name: e.productID
    });
    purchased = (ref = me.get('purchased')) != null ? ref : {};
    purchased = _.clone(purchased);
    if (purchased.gems == null) {
      purchased.gems = 0;
    }
    purchased.gems += product.gems;
    me.set('purchased', purchased);
    return this.hide();
  };

  BuyGemsModal.prototype.onClickStartSubscription = function(e) {
    var ref;
    this.openModalView(new SubscribeModal());
    return (ref = window.tracker) != null ? ref.trackEvent('Show subscription modal', {
      category: 'Subscription',
      label: 'buy gems modal'
    }) : void 0;
  };

  return BuyGemsModal;

})(ModalView);
});

;require.register("views/play/modal/ItemDetailsView", function(exports, require, module) {
var CocoCollection, CocoView, ItemDetailsView, LevelComponent, downTheChain, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CocoView = require('views/core/CocoView');

template = require('templates/play/modal/item-details-view');

CocoCollection = require('collections/CocoCollection');

LevelComponent = require('models/LevelComponent');

downTheChain = require('lib/world/world_utils').downTheChain;

utils = require('core/utils');

module.exports = ItemDetailsView = (function(superClass) {
  extend(ItemDetailsView, superClass);

  ItemDetailsView.prototype.id = "item-details-view";

  ItemDetailsView.prototype.template = template;

  function ItemDetailsView() {
    ItemDetailsView.__super__.constructor.apply(this, arguments);
    this.propDocs = {};
    this.spellDocs = {};
  }

  ItemDetailsView.prototype.setItem = function(item) {
    var c, docs, p, props, stats;
    this.item = item;
    if (this.item) {
      this.spellDocs = {};
      this.item.name = utils.i18n(this.item.attributes, 'name');
      this.item.description = utils.i18n(this.item.attributes, 'description');
      this.item.affordable = me.gems() >= this.item.get('gems');
      this.item.owned = me.ownsItem(this.item.get('original'));
      this.item.comingSoon = !this.item.getFrontFacingStats().props.length && !_.size(this.item.getFrontFacingStats().stats);
      this.componentConfigs = (function() {
        var i, len, ref, results;
        ref = this.item.get('components');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          if (c.config) {
            results.push(c.config);
          }
        }
        return results;
      }).call(this);
      stats = this.item.getFrontFacingStats();
      props = (function() {
        var i, len, ref, results;
        ref = stats.props;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          if (!this.propDocs[p]) {
            results.push(p);
          }
        }
        return results;
      }).call(this);
      if (props.length > 0 || (indexOf.call(stats.props, 'cast') >= 0)) {
        docs = new CocoCollection([], {
          url: '/db/level.component?view=prop-doc-lookup',
          model: LevelComponent,
          project: ['name', 'propertyDocumentation.name', 'propertyDocumentation.description', 'propertyDocumentation.i18n']
        });
        docs.fetch({
          data: {
            componentOriginals: [
              (function() {
                var i, len, ref, results;
                ref = this.item.get('components');
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  c = ref[i];
                  results.push(c.original);
                }
                return results;
              }).call(this)
            ].join(','),
            propertyNames: props.join(',')
          }
        });
        this.listenToOnce(docs, 'sync', this.onDocsLoaded);
      }
    }
    return this.render();
  };

  ItemDetailsView.prototype.onDocsLoaded = function(levelComponents) {
    var component, i, j, len, len1, propDoc, ref, ref1;
    ref = levelComponents.models;
    for (i = 0, len = ref.length; i < len; i++) {
      component = ref[i];
      ref1 = component.get('propertyDocumentation');
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        propDoc = ref1[j];
        if (/^cast.+/.test(propDoc.name)) {
          this.spellDocs[propDoc.name] = propDoc;
        } else {
          this.propDocs[propDoc.name] = propDoc;
        }
      }
    }
    return this.render();
  };

  ItemDetailsView.prototype.afterRender = function() {
    ItemDetailsView.__super__.afterRender.call(this);
    return this.$el.find('.nano:visible').nanoScroller({
      alwaysVisible: true
    });
  };

  ItemDetailsView.prototype.getRenderData = function() {
    var buildsConfig, c, codeLanguage, componentConfigs, description, doc, fact, i, len, prop, ref, ref1, ref2, ref3, ref4, stats;
    c = ItemDetailsView.__super__.getRenderData.call(this);
    c.item = this.item;
    if (this.item) {
      stats = this.item.getFrontFacingStats();
      c.stats = _.values(stats.stats);
      if (c.stats.length) {
        _.last(c.stats).isLast = true;
      }
      c.props = [];
      stats.props = _.union(stats.props, _.keys(this.spellDocs));
      codeLanguage = ((ref = me.get('aceConfig')) != null ? ref : {}).language || 'python';
      ref1 = stats.props;
      for (i = 0, len = ref1.length; i < len; i++) {
        prop = ref1[i];
        doc = (ref2 = (ref3 = this.propDocs[prop]) != null ? ref3 : this.spellDocs[prop]) != null ? ref2 : {};
        description = utils.i18n(doc, 'description');
        if (_.isObject(description)) {
          description = description[codeLanguage] || _.values(description)[0];
        }
        if (_.isString(description)) {
          description = description.replace(/#{spriteName}/g, 'hero');
          if (fact = stats.stats.shieldDefenseFactor) {
            description = description.replace(/#{shieldDefensePercent}%/g, fact.display);
          }
          if (prop === 'buildTypes') {
            buildsConfig = _.find(this.componentConfigs, 'buildables');
            description = description.replace('#{buildTypes}', "`[\"" + (_.keys(buildsConfig.buildables).join('\", \"')) + "\"]`");
          }
          componentConfigs = (ref4 = this.componentConfigs) != null ? ref4 : [];
          description = description.replace(/#{([^.]+?)}/g, function(match, keyChain) {
            var componentConfig, j, len1, value;
            for (j = 0, len1 = componentConfigs.length; j < len1; j++) {
              componentConfig = componentConfigs[j];
              if (value = downTheChain(componentConfig, keyChain)) {
                return value;
              }
            }
            return match;
          });
          description = description.replace(/#{(.+?)}/g, '`$1`');
          description = $(marked(description)).html();
        }
        c.props.push({
          name: prop,
          description: description || '...'
        });
      }
    }
    return c;
  };

  return ItemDetailsView;

})(CocoView);
});

;require.register("views/play/modal/LeaderboardModal", function(exports, require, module) {
var LeaderboardModal, LeaderboardTabView, Level, ModalView, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/leaderboard-modal');

LeaderboardTabView = require('views/play/modal/LeaderboardTabView');

Level = require('models/Level');

utils = require('core/utils');

module.exports = LeaderboardModal = (function(superClass) {
  extend(LeaderboardModal, superClass);

  LeaderboardModal.prototype.id = 'leaderboard-modal';

  LeaderboardModal.prototype.template = template;

  LeaderboardModal.prototype.instant = true;

  LeaderboardModal.prototype.timespans = ['day', 'week', 'all'];

  LeaderboardModal.prototype.subscriptions = {};

  LeaderboardModal.prototype.events = {
    'shown.bs.tab #leaderboard-nav a': 'onTabShown',
    'click #close-modal': 'hide'
  };

  function LeaderboardModal(options) {
    var level;
    LeaderboardModal.__super__.constructor.call(this, options);
    this.levelSlug = this.options.levelSlug;
    level = new Level({
      _id: this.levelSlug
    });
    level.project = ['name', 'i18n', 'scoreType', 'original'];
    this.level = this.supermodel.loadModel(level).model;
  }

  LeaderboardModal.prototype.getRenderData = function(c) {
    var i, j, len, len1, ref, ref1, ref2, scoreType, timespan;
    c = LeaderboardModal.__super__.getRenderData.call(this, c);
    c.submenus = [];
    ref1 = (ref = this.level.get('scoreTypes')) != null ? ref : [];
    for (i = 0, len = ref1.length; i < len; i++) {
      scoreType = ref1[i];
      ref2 = this.timespans;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        timespan = ref2[j];
        c.submenus.push({
          scoreType: scoreType,
          timespan: timespan
        });
      }
    }
    c.levelName = utils.i18n(this.level.attributes, 'name');
    return c;
  };

  LeaderboardModal.prototype.afterRender = function() {
    var i, j, len, len1, ref, ref1, ref2, scoreType, scoreTypeIndex, submenuView, timespan, timespanIndex;
    LeaderboardModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    ref1 = (ref = this.level.get('scoreTypes')) != null ? ref : [];
    for (scoreTypeIndex = i = 0, len = ref1.length; i < len; scoreTypeIndex = ++i) {
      scoreType = ref1[scoreTypeIndex];
      ref2 = this.timespans;
      for (timespanIndex = j = 0, len1 = ref2.length; j < len1; timespanIndex = ++j) {
        timespan = ref2[timespanIndex];
        submenuView = new LeaderboardTabView({
          scoreType: scoreType,
          timespan: timespan,
          level: this.level
        });
        this.insertSubView(submenuView, this.$el.find("#" + scoreType + "-" + timespan + "-view .leaderboard-tab-view"));
        if (scoreTypeIndex + timespanIndex === 0) {
          submenuView.$el.parent().addClass('active');
          if (typeof submenuView.onShown === "function") {
            submenuView.onShown();
          }
        }
      }
    }
    this.playSound('game-menu-open');
    return this.$el.find('.nano:visible').nanoScroller();
  };

  LeaderboardModal.prototype.onTabShown = function(e) {
    var otherSubview, ref, results, scoreType, subview, subviewKey, tabChunks, timespan;
    this.playSound('game-menu-tab-switch');
    tabChunks = e.target.hash.substring(1).split('-');
    scoreType = tabChunks.slice(0, tabChunks.length - 2).join('-');
    timespan = tabChunks[tabChunks.length - 2];
    subview = _.find(this.subviews, {
      scoreType: scoreType,
      timespan: timespan
    });
    if (typeof subview.onShown === "function") {
      subview.onShown();
    }
    ref = this.subviews;
    results = [];
    for (subviewKey in ref) {
      otherSubview = ref[subviewKey];
      if (otherSubview !== subview) {
        results.push(typeof otherSubview.onHidden === "function" ? otherSubview.onHidden() : void 0);
      }
    }
    return results;
  };

  LeaderboardModal.prototype.onHidden = function() {
    var ref, subview, subviewKey;
    LeaderboardModal.__super__.onHidden.call(this);
    ref = this.subviews;
    for (subviewKey in ref) {
      subview = ref[subviewKey];
      if (typeof subview.onHidden === "function") {
        subview.onHidden();
      }
    }
    return this.playSound('game-menu-close');
  };

  return LeaderboardModal;

})(ModalView);
});

;require.register("views/play/modal/LeaderboardTabView", function(exports, require, module) {
var CocoCollection, CocoView, LeaderboardTabView, LevelSession, TopScoresCollection, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CocoView = require('views/core/CocoView');

template = require('templates/play/modal/leaderboard-tab-view');

CocoCollection = require('collections/CocoCollection');

LevelSession = require('models/LevelSession');

TopScoresCollection = (function(superClass) {
  extend(TopScoresCollection, superClass);

  TopScoresCollection.prototype.url = '';

  TopScoresCollection.prototype.model = LevelSession;

  function TopScoresCollection(level, scoreType, timespan) {
    this.level = level;
    this.scoreType = scoreType;
    this.timespan = timespan;
    TopScoresCollection.__super__.constructor.call(this);
    this.url = "/db/level/" + (this.level.get('original')) + "/top_scores/" + this.scoreType + "/" + this.timespan;
  }

  return TopScoresCollection;

})(CocoCollection);

module.exports = LeaderboardTabView = (function(superClass) {
  extend(LeaderboardTabView, superClass);

  LeaderboardTabView.prototype.template = template;

  LeaderboardTabView.prototype.className = 'leaderboard-tab-view';

  LeaderboardTabView.prototype.events = {
    'click tbody tr.viewable': 'onClickRow'
  };

  function LeaderboardTabView(options) {
    var ref;
    LeaderboardTabView.__super__.constructor.call(this, options);
    this.level = this.options.level;
    this.scoreType = (ref = this.options.scoreType) != null ? ref : 'time';
    this.timespan = this.options.timespan;
  }

  LeaderboardTabView.prototype.destroy = function() {
    return LeaderboardTabView.__super__.destroy.call(this);
  };

  LeaderboardTabView.prototype.getRenderData = function() {
    var c;
    c = LeaderboardTabView.__super__.getRenderData.call(this);
    c.scoreType = this.scoreType;
    c.timespan = this.timespan;
    c.topScores = this.formatTopScores();
    c.loading = !this.sessions || this.sessions.loading;
    c._ = _;
    return c;
  };

  LeaderboardTabView.prototype.afterRender = function() {
    return LeaderboardTabView.__super__.afterRender.call(this);
  };

  LeaderboardTabView.prototype.formatTopScores = function() {
    var i, len, ref, ref1, ref2, ref3, row, rows, s, score;
    if (!((ref = this.sessions) != null ? ref.models : void 0)) {
      return [];
    }
    rows = [];
    ref1 = this.sessions.models;
    for (i = 0, len = ref1.length; i < len; i++) {
      s = ref1[i];
      row = {};
      score = _.find(s.get('state').topScores, {
        type: this.scoreType
      });
      row.ago = moment(new Date(score.date)).fromNow();
      row.score = this.formatScore(score);
      row.creatorName = s.get('creatorName');
      row.creator = s.get('creator');
      row.session = s.id;
      row.codeLanguage = s.get('codeLanguage');
      row.hero = (ref2 = s.get('heroConfig')) != null ? ref2.thangType : void 0;
      row.inventory = (ref3 = s.get('heroConfig')) != null ? ref3.inventory : void 0;
      rows.push(row);
    }
    return rows;
  };

  LeaderboardTabView.prototype.formatScore = function(score) {
    switch (score.type) {
      case 'time':
        return -score.score.toFixed(2) + 's';
      case 'damage-taken':
        return -Math.round(score.score);
      case 'damage-dealt':
      case 'gold-collected':
      case 'difficulty':
        return Math.round(score.score);
      default:
        return score.score;
    }
  };

  LeaderboardTabView.prototype.onShown = function() {
    var topScores;
    if (this.hasShown) {
      return;
    }
    this.hasShown = true;
    topScores = new TopScoresCollection(this.level, this.scoreType, this.timespan);
    return this.sessions = this.supermodel.loadCollection(topScores, 'sessions', {
      cache: false
    }, 0).model;
  };

  LeaderboardTabView.prototype.onClickRow = function(e) {
    var sessionID, url;
    sessionID = $(e.target).closest('tr').data('session-id');
    url = "/play/level/" + (this.level.get('slug')) + "?session=" + sessionID + "&observing=true";
    return window.open(url, '_blank');
  };

  return LeaderboardTabView;

})(CocoView);
});

;require.register("views/play/modal/PlayAccountModal", function(exports, require, module) {
var AccountSettingsView, ModalView, PlayAccountModal, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/play-account-modal');

AccountSettingsView = require('views/account/AccountSettingsView');

module.exports = PlayAccountModal = (function(superClass) {
  extend(PlayAccountModal, superClass);

  PlayAccountModal.prototype.className = 'modal fade play-modal';

  PlayAccountModal.prototype.template = template;

  PlayAccountModal.prototype.plain = true;

  PlayAccountModal.prototype.id = 'play-account-modal';

  PlayAccountModal.prototype.events = {
    'click #save-button': function() {
      return this.accountSettingsView.save();
    }
  };

  function PlayAccountModal(options) {
    PlayAccountModal.__super__.constructor.call(this, options);
  }

  PlayAccountModal.prototype.afterRender = function() {
    PlayAccountModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    this.playSound('game-menu-open');
    this.accountSettingsView = new AccountSettingsView();
    this.insertSubView(this.accountSettingsView);
    this.listenTo(this.accountSettingsView, 'input-changed', this.onInputChanged);
    this.listenTo(this.accountSettingsView, 'save-user-began', this.onUserSaveBegan);
    this.listenTo(this.accountSettingsView, 'save-user-success', this.hide);
    return this.listenTo(this.accountSettingsView, 'save-user-error', this.onUserSaveError);
  };

  PlayAccountModal.prototype.onHidden = function() {
    PlayAccountModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  PlayAccountModal.prototype.onInputChanged = function() {
    return this.$el.find('#save-button').text($.i18n.t('common.save', {
      defaultValue: 'Save'
    })).addClass('btn-info').removeClass('disabled btn-danger').removeAttr('disabled');
  };

  PlayAccountModal.prototype.onUserSaveBegan = function() {
    return this.$el.find('#save-button').text($.i18n.t('common.saving', {
      defaultValue: 'Saving...'
    })).removeClass('btn-danger').addClass('btn-success').show();
  };

  PlayAccountModal.prototype.onUserSaveError = function() {
    return this.$el.find('#save-button').text($.i18n.t('account_settings.error_saving', {
      defaultValue: 'Error Saving'
    })).removeClass('btn-success').addClass('btn-danger', 500);
  };

  return PlayAccountModal;

})(ModalView);
});

;require.register("views/play/modal/PlayAchievementsModal", function(exports, require, module) {
var Achievement, CocoCollection, EarnedAchievement, ModalView, PAGE_SIZE, PlayAchievementsModal, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/play-achievements-modal');

CocoCollection = require('collections/CocoCollection');

Achievement = require('models/Achievement');

EarnedAchievement = require('models/EarnedAchievement');

utils = require('core/utils');

PAGE_SIZE = 200;

module.exports = PlayAchievementsModal = (function(superClass) {
  extend(PlayAchievementsModal, superClass);

  PlayAchievementsModal.prototype.className = 'modal fade play-modal';

  PlayAchievementsModal.prototype.template = template;

  PlayAchievementsModal.prototype.id = 'play-achievements-modal';

  PlayAchievementsModal.prototype.plain = true;

  PlayAchievementsModal.prototype.earnedMap = {};

  function PlayAchievementsModal(options) {
    this.onEverythingLoaded = bind(this.onEverythingLoaded, this);
    var achievementsFetcher, earnedAchievementsFetcher, earnedMap;
    PlayAchievementsModal.__super__.constructor.call(this, options);
    this.achievements = new Backbone.Collection();
    earnedMap = {};
    achievementsFetcher = new CocoCollection([], {
      url: '/db/achievement',
      model: Achievement
    });
    achievementsFetcher.setProjection(['name', 'description', 'icon', 'worth', 'i18n', 'rewards', 'collection', 'function', 'query']);
    earnedAchievementsFetcher = new CocoCollection([], {
      url: '/db/earned_achievement',
      model: EarnedAchievement
    });
    earnedAchievementsFetcher.setProjection(['achievement', 'achievedAmount']);
    achievementsFetcher.skip = 0;
    achievementsFetcher.fetch({
      cache: false,
      data: {
        skip: 0,
        limit: PAGE_SIZE
      }
    });
    earnedAchievementsFetcher.skip = 0;
    earnedAchievementsFetcher.fetch({
      cache: false,
      data: {
        skip: 0,
        limit: PAGE_SIZE
      }
    });
    this.listenTo(achievementsFetcher, 'sync', this.onAchievementsLoaded);
    this.listenTo(earnedAchievementsFetcher, 'sync', this.onEarnedAchievementsLoaded);
    this.stopListening(this.supermodel, 'loaded-all');
    this.supermodel.loadCollection(achievementsFetcher, 'achievement');
    this.supermodel.loadCollection(earnedAchievementsFetcher, 'achievement');
    this.onEverythingLoaded = _.after(2, this.onEverythingLoaded);
  }

  PlayAchievementsModal.prototype.onAchievementsLoaded = function(fetcher) {
    var needMore;
    needMore = fetcher.models.length === PAGE_SIZE;
    this.achievements.add(fetcher.models);
    if (needMore) {
      fetcher.skip += PAGE_SIZE;
      return fetcher.fetch({
        cache: false,
        data: {
          skip: fetcher.skip,
          limit: PAGE_SIZE
        }
      });
    } else {
      this.stopListening(fetcher);
      return this.onEverythingLoaded();
    }
  };

  PlayAchievementsModal.prototype.onEarnedAchievementsLoaded = function(fetcher) {
    var earned, i, len, needMore, ref;
    needMore = fetcher.models.length === PAGE_SIZE;
    ref = fetcher.models;
    for (i = 0, len = ref.length; i < len; i++) {
      earned = ref[i];
      this.earnedMap[earned.get('achievement')] = earned;
    }
    if (needMore) {
      fetcher.skip += PAGE_SIZE;
      return fetcher.fetch({
        cache: false,
        data: {
          skip: fetcher.skip,
          limit: PAGE_SIZE
        }
      });
    } else {
      this.stopListening(fetcher);
      return this.onEverythingLoaded();
    }
  };

  PlayAchievementsModal.prototype.onEverythingLoaded = function() {
    var a, achievement, achievementsByDescription, b, earned, expFunction, holder, i, j, k, len, len1, len2, nextInSet, ref, ref1, ref2, ref3, ref4, ref5, shouldKeep;
    this.achievements.set(this.achievements.filter(function(m) {
      var ref;
      return m.get('collection') !== 'level.sessions' || ((ref = m.get('query')) != null ? ref.team : void 0);
    }));
    achievementsByDescription = {
      earned: {},
      unearned: {}
    };
    ref = this.achievements.models;
    for (i = 0, len = ref.length; i < len; i++) {
      achievement = ref[i];
      if (earned = this.earnedMap[achievement.id]) {
        achievement.earned = earned;
        achievement.earnedDate = earned.getCreationDate();
        expFunction = achievement.getExpFunction();
        achievement.earnedGems = Math.round((((ref1 = achievement.get('rewards')) != null ? ref1.gems : void 0) || 0) * expFunction(earned.get('achievedAmount')));
        achievement.earnedPoints = Math.round((achievement.get('worth', true) || 0) * expFunction(earned.get('achievedAmount')));
      }
      if (achievement.earnedDate == null) {
        achievement.earnedDate = '';
      }
    }
    ref2 = this.achievements.models;
    for (j = 0, len1 = ref2.length; j < len1; j++) {
      achievement = ref2[j];
      if (achievement.earned) {
        holder = achievementsByDescription.earned;
      } else {
        holder = achievementsByDescription.unearned;
      }
      nextInSet = holder[achievement.get('description')];
      ref4 = [achievement.get('worth', true), (ref3 = nextInSet != null ? nextInSet.get('worth', true) : void 0) != null ? ref3 : 0], a = ref4[0], b = ref4[1];
      if (achievement.earned) {
        shouldKeep = !nextInSet || a > b;
      } else {
        shouldKeep = !nextInSet || a < b;
      }
      if (shouldKeep) {
        holder[achievement.get('description')] = achievement;
      }
    }
    this.achievements.set(_.values(achievementsByDescription.earned).concat(_.values(achievementsByDescription.unearned)));
    this.achievements.comparator = function(m) {
      return m.earnedDate;
    };
    this.achievements.sort();
    this.achievements.set(this.achievements.models.reverse());
    ref5 = this.achievements.models;
    for (k = 0, len2 = ref5.length; k < len2; k++) {
      achievement = ref5[k];
      achievement.name = utils.i18n(achievement.attributes, 'name');
      achievement.description = utils.i18n(achievement.attributes, 'description');
    }
    return this.render();
  };

  PlayAchievementsModal.prototype.afterRender = function() {
    PlayAchievementsModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    return this.playSound('game-menu-open');
  };

  PlayAchievementsModal.prototype.onHidden = function() {
    PlayAchievementsModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  return PlayAchievementsModal;

})(ModalView);
});

;require.register("views/play/modal/PlayHeroesModal", function(exports, require, module) {
var AudioPlayer, BuyGemsModal, CocoCollection, CreateAccountModal, Lank, LayerAdapter, ModalView, PlayHeroesModal, Purchase, SpriteBuilder, ThangType, buyGemsPromptTemplate, template, utils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/play-heroes-modal');

buyGemsPromptTemplate = require('templates/play/modal/buy-gems-prompt');

CocoCollection = require('collections/CocoCollection');

ThangType = require('models/ThangType');

SpriteBuilder = require('lib/sprites/SpriteBuilder');

AudioPlayer = require('lib/AudioPlayer');

utils = require('core/utils');

BuyGemsModal = require('views/play/modal/BuyGemsModal');

CreateAccountModal = require('views/core/CreateAccountModal');

Purchase = require('models/Purchase');

LayerAdapter = require('lib/surface/LayerAdapter');

Lank = require('lib/surface/Lank');

module.exports = PlayHeroesModal = (function(superClass) {
  extend(PlayHeroesModal, superClass);

  PlayHeroesModal.prototype.className = 'modal fade play-modal';

  PlayHeroesModal.prototype.template = template;

  PlayHeroesModal.prototype.id = 'play-heroes-modal';

  PlayHeroesModal.prototype.events = {
    'slide.bs.carousel #hero-carousel': 'onHeroChanged',
    'change #option-code-language': 'onCodeLanguageChanged',
    'click #close-modal': 'hide',
    'click #confirm-button': 'saveAndHide',
    'click .unlock-button': 'onUnlockButtonClicked',
    'click .buy-gems-prompt-button': 'onBuyGemsPromptButtonClicked',
    'click': 'onClickedSomewhere'
  };

  PlayHeroesModal.prototype.shortcuts = {
    'left': function() {
      if (this.heroes.models.length && !this.$el.hasClass('secret')) {
        return this.$el.find('#hero-carousel').carousel('prev');
      }
    },
    'right': function() {
      if (this.heroes.models.length && !this.$el.hasClass('secret')) {
        return this.$el.find('#hero-carousel').carousel('next');
      }
    },
    'enter': function() {
      if (this.visibleHero && !this.visibleHero.locked) {
        return this.saveAndHide();
      }
    }
  };

  function PlayHeroesModal(options) {
    this.animateHeroes = bind(this.animateHeroes, this);
    var ref;
    PlayHeroesModal.__super__.constructor.call(this, options);
    if (options == null) {
      options = {};
    }
    this.confirmButtonI18N = (ref = options.confirmButtonI18N) != null ? ref : "common.save";
    this.heroes = new CocoCollection([], {
      model: ThangType
    });
    this.heroes.url = '/db/thang.type?view=heroes';
    this.heroes.setProjection(['original', 'name', 'slug', 'soundTriggers', 'featureImages', 'gems', 'heroClass', 'description', 'components', 'extendedName', 'unlockLevelName', 'i18n', 'poseImage']);
    this.heroes.comparator = 'gems';
    this.listenToOnce(this.heroes, 'sync', this.onHeroesLoaded);
    this.supermodel.loadCollection(this.heroes, 'heroes');
    this.stages = {};
    this.layers = [];
    this.session = options.session;
    this.initCodeLanguageList(options.hadEverChosenHero);
    this.heroAnimationInterval = setInterval(this.animateHeroes, 1000);
  }

  PlayHeroesModal.prototype.onHeroesLoaded = function() {
    var hero, i, len, ref, results;
    ref = this.heroes.models;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      hero = ref[i];
      results.push(this.formatHero(hero));
    }
    return results;
  };

  PlayHeroesModal.prototype.formatHero = function(hero) {
    var allowedHeroes, original, ref, ref1, ref2;
    hero.name = utils.i18n(hero.attributes, 'extendedName');
    if (hero.name == null) {
      hero.name = utils.i18n(hero.attributes, 'name');
    }
    hero.description = utils.i18n(hero.attributes, 'description');
    hero.unlockLevelName = utils.i18n(hero.attributes, 'unlockLevelName');
    original = hero.get('original');
    hero.locked = !me.ownsHero(original);
    hero.purchasable = hero.locked && (indexOf.call((ref = (ref1 = me.get('earned')) != null ? ref1.heroes : void 0) != null ? ref : [], original) >= 0);
    if (this.options.level && (allowedHeroes = this.options.level.get('allowedHeroes'))) {
      hero.restricted = !(ref2 = hero.get('original'), indexOf.call(allowedHeroes, ref2) >= 0);
    }
    hero["class"] = (hero.get('heroClass') || 'warrior').toLowerCase();
    return hero.stats = hero.getHeroStats();
  };

  PlayHeroesModal.prototype.getRenderData = function(context) {
    var ref, ref1, ref2, ref3, ref4;
    if (context == null) {
      context = {};
    }
    context = PlayHeroesModal.__super__.getRenderData.call(this, context);
    context.heroes = this.heroes.models;
    context.level = this.options.level;
    context.codeLanguages = this.codeLanguageList;
    context.codeLanguage = this.codeLanguage = (ref = (ref1 = (ref2 = this.options) != null ? (ref3 = ref2.session) != null ? ref3.get('codeLanguage') : void 0 : void 0) != null ? ref1 : (ref4 = me.get('aceConfig')) != null ? ref4.language : void 0) != null ? ref : 'python';
    context.confirmButtonI18N = this.confirmButtonI18N;
    context.visibleHero = this.visibleHero;
    context.gems = me.gems();
    context.isIE = this.isIE();
    return context;
  };

  PlayHeroesModal.prototype.afterRender = function() {
    var heroConfig, heroIndex, heroes, ref, ref1, ref2, ref3;
    PlayHeroesModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    this.playSound('game-menu-open');
    if (this.isIE()) {
      this.$el.find('.hero-avatar').addClass('ie');
    }
    heroes = this.heroes.models;
    this.$el.find('.hero-indicator').each(function() {
      var hero, heroID;
      heroID = $(this).data('hero-id');
      hero = _.find(heroes, function(hero) {
        return hero.get('original') === heroID;
      });
      return $(this).find('.hero-avatar').css('background-image', "url(" + (hero.getPortraitURL()) + ")").addClass('has-tooltip').tooltip();
    });
    this.canvasWidth = 313;
    this.canvasHeight = this.$el.find('canvas').height();
    heroConfig = (ref = (ref1 = (ref2 = this.options) != null ? (ref3 = ref2.session) != null ? ref3.get('heroConfig') : void 0 : void 0) != null ? ref1 : me.get('heroConfig')) != null ? ref : {};
    heroIndex = Math.max(0, _.findIndex(heroes, (function(hero) {
      return hero.get('original') === heroConfig.thangType;
    })));
    this.$el.find(".hero-item:nth-child(" + (heroIndex + 1) + "), .hero-indicator:nth-child(" + (heroIndex + 1) + ")").addClass('active');
    this.onHeroChanged({
      direction: null,
      relatedTarget: this.$el.find('.hero-item')[heroIndex]
    });
    this.$el.find('.hero-stat').addClass('has-tooltip').tooltip();
    return this.buildCodeLanguages();
  };

  PlayHeroesModal.prototype.rerenderFooter = function() {
    this.formatHero(this.visibleHero);
    this.renderSelectors('#hero-footer');
    this.buildCodeLanguages();
    return this.$el.find('#gems-count-container').toggle(Boolean(this.visibleHero.purchasable));
  };

  PlayHeroesModal.prototype.initCodeLanguageList = function(hadEverChosenHero) {
    if (application.isIPadApp) {
      return this.codeLanguageList = [
        {
          id: 'python',
          name: "Python (" + ($.i18n.t('choose_hero.default')) + ")"
        }, {
          id: 'javascript',
          name: 'JavaScript'
        }
      ];
    } else {
      this.codeLanguageList = (function() {
        switch (me.getDefaultLanguageGroup()) {
          case 'javascript':
            return [
              {
                id: 'javascript',
                name: "JavaScript (" + ($.i18n.t('choose_hero.default')) + ")"
              }, {
                id: 'python',
                name: "Python"
              }, {
                id: 'coffeescript',
                name: "CoffeeScript (" + ($.i18n.t('choose_hero.experimental')) + ")"
              }, {
                id: 'lua',
                name: 'Lua'
              }
            ];
          default:
            return [
              {
                id: 'python',
                name: "Python (" + ($.i18n.t('choose_hero.default')) + ")"
              }, {
                id: 'javascript',
                name: 'JavaScript'
              }, {
                id: 'coffeescript',
                name: "CoffeeScript (" + ($.i18n.t('choose_hero.experimental')) + ")"
              }, {
                id: 'lua',
                name: 'Lua'
              }
            ];
        }
      })();
      if (me.isAdmin() || !application.isProduction()) {
        return this.codeLanguageList.push({
          id: 'java',
          name: "Java (" + ($.i18n.t('choose_hero.experimental')) + ")"
        });
      }
    }
  };

  PlayHeroesModal.prototype.onHeroChanged = function(e) {
    var direction, hero, heroIndex, heroItem;
    direction = e.direction;
    heroItem = $(e.relatedTarget);
    hero = _.find(this.heroes.models, function(hero) {
      return hero.get('original') === heroItem.data('hero-id');
    });
    if (!hero) {
      return console.error("Couldn't find hero from heroItem:", heroItem);
    }
    heroIndex = heroItem.index();
    hero = this.loadHero(hero, heroIndex);
    this.preloadHero(heroIndex + 1);
    this.preloadHero(heroIndex - 1);
    if (!hero.locked) {
      this.selectedHero = hero;
    }
    this.visibleHero = hero;
    this.rerenderFooter();
    return this.trigger('hero-loaded', {
      hero: hero
    });
  };

  PlayHeroesModal.prototype.getFullHero = function(original) {
    var fullHero, url;
    url = "/db/thang.type/" + original + "/version";
    if (fullHero = this.supermodel.getModel(url)) {
      return fullHero;
    }
    fullHero = new ThangType();
    fullHero.setURL(url);
    fullHero = (this.supermodel.loadModel(fullHero)).model;
    return fullHero;
  };

  PlayHeroesModal.prototype.preloadHero = function(heroIndex) {
    var hero;
    if (!(hero = this.heroes.models[heroIndex])) {
      return;
    }
    return this.loadHero(hero, heroIndex, true);
  };

  PlayHeroesModal.prototype.loadHero = function(hero, heroIndex, preloading) {
    var fullHero, i, len, onLoaded, poseImage, ref, stage;
    if (preloading == null) {
      preloading = false;
    }
    ref = _.values(this.stages);
    for (i = 0, len = ref.length; i < len; i++) {
      stage = ref[i];
      createjs.Ticker.removeEventListener('tick', stage);
    }
    createjs.Ticker.setFPS(30);
    if (poseImage = hero.get('poseImage')) {
      $(".hero-item[data-hero-id='" + (hero.get('original')) + "'] canvas").hide();
      $(".hero-item[data-hero-id='" + (hero.get('original')) + "'] .hero-pose-image").show().find('img').prop('src', '/file/' + poseImage);
      if (!preloading) {
        this.playSelectionSound(hero);
      }
      return hero;
    }
    if (stage = this.stages[heroIndex]) {
      if (!preloading) {
        _.defer(function() {
          return createjs.Ticker.addEventListener('tick', stage);
        });
        this.playSelectionSound(hero);
      }
      return hero;
    }
    fullHero = this.getFullHero(hero.get('original'));
    onLoaded = (function(_this) {
      return function() {
        var canvas, lank, layer, multiplier;
        canvas = $(".hero-item[data-hero-id='" + (fullHero.get('original')) + "'] canvas");
        if (!canvas.length) {
          return;
        }
        if (!fullHero.get('raw')) {
          console.error("Couldn't make animation for " + (fullHero.get('name')) + " with attributes " + (_.cloneDeep(fullHero.attributes)) + ". Was it loaded with an improper projection or something?", fullHero);
          _this.rerenderFooter();
          return;
        }
        canvas.show().prop({
          width: _this.canvasWidth,
          height: _this.canvasHeight
        });
        layer = new LayerAdapter({
          webGL: true
        });
        _this.layers.push(layer);
        layer.resolutionFactor = 8;
        layer.buildAsync = false;
        multiplier = 7;
        layer.scaleX = layer.scaleY = multiplier;
        lank = new Lank(fullHero, {
          preloadSounds: false
        });
        layer.addLank(lank);
        layer.on('new-spritesheet', function() {
          var m, ref1, ref2, ref3;
          m = multiplier;
          if ((ref1 = fullHero.get('slug')) === 'knight' || ref1 === 'samurai' || ref1 === 'librarian' || ref1 === 'sorcerer' || ref1 === 'necromancer') {
            m *= 0.75;
          }
          if (fullHero.get('slug') === 'goliath') {
            m *= 0.4;
          }
          if (fullHero.get('slug') === 'champion') {
            m *= 0.9;
          }
          layer.container.scaleX = layer.container.scaleY = m;
          layer.container.children[0].x = 160 / m;
          layer.container.children[0].y = 250 / m;
          if ((ref2 = fullHero.get('slug')) === 'forest-archer' || ref2 === 'librarian' || ref2 === 'sorcerer' || ref2 === 'potion-master' || ref2 === 'necromancer' || ref2 === 'code-ninja') {
            layer.container.children[0].y -= 3;
          }
          if ((ref3 = fullHero.get('slug')) === 'librarian' || ref3 === 'sorcerer' || ref3 === 'potion-master' || ref3 === 'necromancer' || ref3 === 'goliath') {
            return layer.container.children[0].x -= 3;
          }
        });
        stage = new createjs.SpriteStage(canvas[0]);
        _this.stages[heroIndex] = stage;
        stage.addChild(layer.container);
        stage.update();
        if (!preloading) {
          createjs.Ticker.addEventListener('tick', stage);
          _this.playSelectionSound(hero);
        }
        return _this.rerenderFooter();
      };
    })(this);
    if (fullHero.loaded) {
      _.defer(onLoaded);
    } else {
      this.listenToOnce(fullHero, 'sync', onLoaded);
    }
    return fullHero;
  };

  PlayHeroesModal.prototype.animateHeroes = function() {
    var animation, heroIndex, ref, ref1, ref2, ref3, ref4;
    if (!this.visibleHero) {
      return;
    }
    heroIndex = Math.max(0, _.findIndex(this.heroes.models, ((function(_this) {
      return function(hero) {
        return hero.get('original') === _this.visibleHero.get('original');
      };
    })(this))));
    animation = _.sample(['attack', 'move_side', 'move_fore']);
    return (ref = this.stages[heroIndex]) != null ? (ref1 = ref.children) != null ? (ref2 = ref1[0]) != null ? (ref3 = ref2.children) != null ? (ref4 = ref3[0]) != null ? typeof ref4.gotoAndPlay === "function" ? ref4.gotoAndPlay(animation) : void 0 : void 0 : void 0 : void 0 : void 0 : void 0;
  };

  PlayHeroesModal.prototype.playSelectionSound = function(hero) {
    var name, ref, ref1, sound, sounds;
    if (this.$el.hasClass('secret')) {
      return;
    }
    if ((ref = this.currentSoundInstance) != null) {
      ref.stop();
    }
    if (!(sounds = (ref1 = hero.get('soundTriggers')) != null ? ref1.selected : void 0)) {
      return;
    }
    if (!(sound = sounds[Math.floor(Math.random() * sounds.length)])) {
      return;
    }
    name = AudioPlayer.nameForSoundReference(sound);
    AudioPlayer.preloadSoundReference(sound);
    this.currentSoundInstance = AudioPlayer.playSound(name, 1);
    return this.currentSoundInstance;
  };

  PlayHeroesModal.prototype.buildCodeLanguages = function() {
    var $select;
    $select = this.$el.find('#option-code-language');
    return $select.fancySelect().parent().find('.options li').each(function() {
      var blurb, languageID, languageName;
      languageName = $(this).text();
      languageID = $(this).data('value');
      blurb = $.i18n.t("choose_hero." + languageID + "_blurb");
      return $(this).text(languageName + " - " + blurb);
    });
  };

  PlayHeroesModal.prototype.onCodeLanguageChanged = function(e) {
    var ref, ref1;
    this.codeLanguage = this.$el.find('#option-code-language').val();
    this.codeLanguageChanged = true;
    return (ref = window.tracker) != null ? ref.trackEvent('Campaign changed code language', {
      category: 'Campaign Hero Select',
      codeLanguage: this.codeLanguage,
      levelSlug: (ref1 = this.options.level) != null ? ref1.get('slug') : void 0
    }) : void 0;
  };

  PlayHeroesModal.prototype.onUnlockButtonClicked = function(e) {
    var affordable, button, heroEntry, purchase, purchased, ref, ref1;
    e.stopPropagation();
    button = $(e.target).closest('button');
    affordable = this.visibleHero.get('gems') <= me.gems();
    if (!affordable) {
      this.playSound('menu-button-click');
      if (!features.freeOnly) {
        return this.askToBuyGems(button);
      }
    } else if (button.hasClass('confirm')) {
      this.playSound('menu-button-unlock-end');
      purchase = Purchase.makeFor(this.visibleHero);
      purchase.save();
      purchased = (ref = me.get('purchased')) != null ? ref : {};
      if (purchased.heroes == null) {
        purchased.heroes = [];
      }
      purchased.heroes.push(this.visibleHero.get('original'));
      me.set('purchased', purchased);
      me.set('spent', ((ref1 = me.get('spent')) != null ? ref1 : 0) + this.visibleHero.get('gems'));
      heroEntry = this.$el.find(".hero-item[data-hero-id='" + (this.visibleHero.get('original')) + "']");
      heroEntry.find('.hero-status-value').attr('data-i18n', 'play.available').i18n();
      heroEntry.removeClass('locked purchasable');
      this.selectedHero = this.visibleHero;
      this.rerenderFooter();
      return Backbone.Mediator.publish('store:hero-purchased', {
        hero: this.visibleHero,
        heroSlug: this.visibleHero.get('slug')
      });
    } else {
      this.playSound('menu-button-unlock-start');
      button.addClass('confirm').text($.i18n.t('play.confirm'));
      return this.$el.one('click', function(e) {
        if (e.target !== button[0]) {
          return button.removeClass('confirm').text($.i18n.t('play.unlock'));
        }
      });
    }
  };

  PlayHeroesModal.prototype.askToSignUp = function() {
    var createAccountModal;
    createAccountModal = new CreateAccountModal({
      supermodel: this.supermodel
    });
    return this.openModalView(createAccountModal);
  };

  PlayHeroesModal.prototype.askToBuyGems = function(unlockButton) {
    var popover, popoverTemplate, ref;
    this.$el.find('.unlock-button').popover('destroy');
    popoverTemplate = buyGemsPromptTemplate({});
    unlockButton.popover({
      animation: true,
      trigger: 'manual',
      placement: 'left',
      content: ' ',
      container: this.$el,
      template: popoverTemplate
    }).popover('show');
    popover = unlockButton.data('bs.popover');
    return popover != null ? (ref = popover.$tip) != null ? ref.i18n() : void 0 : void 0;
  };

  PlayHeroesModal.prototype.onBuyGemsPromptButtonClicked = function(e) {
    if (me.get('anonymous')) {
      return this.askToSignUp();
    }
    return this.openModalView(new BuyGemsModal());
  };

  PlayHeroesModal.prototype.onClickedSomewhere = function(e) {
    if (this.destroyed) {
      return;
    }
    return this.$el.find('.unlock-button').popover('destroy');
  };

  PlayHeroesModal.prototype.saveAndHide = function() {
    var aceConfig, changed, hero, ref, ref1, ref2;
    hero = (ref = this.selectedHero) != null ? ref.get('original') : void 0;
    if (((ref1 = this.visibleHero) != null ? ref1.loaded : void 0) && !this.visibleHero.locked) {
      if (hero == null) {
        hero = (ref2 = this.visibleHero) != null ? ref2.get('original') : void 0;
      }
    }
    if (!hero) {
      console.error('Somehow we tried to hide without having a hero selected yet...');
      noty({
        text: "Error: hero not loaded. If this keeps happening, please report the bug.",
        layout: 'topCenter',
        timeout: 10000,
        type: 'error'
      });
      return;
    }
    if (this.session) {
      changed = this.updateHeroConfig(this.session, hero);
      if (this.session.get('codeLanguage') !== this.codeLanguage) {
        this.session.set('codeLanguage', this.codeLanguage);
        changed = true;
      }
      if (changed) {
        this.session.patch();
      }
    }
    changed = this.updateHeroConfig(me, hero);
    aceConfig = _.clone(me.get('aceConfig')) || {};
    if (this.codeLanguage !== aceConfig.language) {
      aceConfig.language = this.codeLanguage;
      me.set('aceConfig', aceConfig);
      changed = true;
    }
    if (changed) {
      me.patch();
    }
    this.hide();
    return typeof this.trigger === "function" ? this.trigger('confirm-click', {
      hero: this.selectedHero
    }) : void 0;
  };

  PlayHeroesModal.prototype.updateHeroConfig = function(model, hero) {
    var heroConfig;
    if (!hero) {
      return false;
    }
    heroConfig = _.clone(model.get('heroConfig')) || {};
    if (heroConfig.thangType !== hero) {
      heroConfig.thangType = hero;
      model.set('heroConfig', heroConfig);
      return true;
    }
  };

  PlayHeroesModal.prototype.onHidden = function() {
    PlayHeroesModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  PlayHeroesModal.prototype.destroy = function() {
    var heroIndex, i, layer, len, ref, ref1, stage;
    clearInterval(this.heroAnimationInterval);
    ref = this.stages;
    for (heroIndex in ref) {
      stage = ref[heroIndex];
      createjs.Ticker.removeEventListener("tick", stage);
      stage.removeAllChildren();
    }
    ref1 = this.layers;
    for (i = 0, len = ref1.length; i < len; i++) {
      layer = ref1[i];
      layer.destroy();
    }
    return PlayHeroesModal.__super__.destroy.call(this);
  };

  return PlayHeroesModal;

})(ModalView);
});

;require.register("views/play/modal/PlayItemsModal", function(exports, require, module) {
var BuyGemsModal, CocoCollection, CreateAccountModal, ItemDetailsView, Level, LevelComponent, ModalView, PAGE_SIZE, PlayItemsModal, Purchase, ThangType, buyGemsPromptTemplate, slotToCategory, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/play-items-modal');

buyGemsPromptTemplate = require('templates/play/modal/buy-gems-prompt');

ItemDetailsView = require('./ItemDetailsView');

BuyGemsModal = require('views/play/modal/BuyGemsModal');

CreateAccountModal = require('views/core/CreateAccountModal');

CocoCollection = require('collections/CocoCollection');

ThangType = require('models/ThangType');

LevelComponent = require('models/LevelComponent');

Level = require('models/Level');

Purchase = require('models/Purchase');

utils = require('core/utils');

PAGE_SIZE = 200;

slotToCategory = {
  'right-hand': 'primary',
  'left-hand': 'secondary',
  'head': 'armor',
  'torso': 'armor',
  'gloves': 'armor',
  'feet': 'armor',
  'eyes': 'accessories',
  'neck': 'accessories',
  'wrists': 'accessories',
  'left-ring': 'accessories',
  'right-ring': 'accessories',
  'waist': 'accessories',
  'pet': 'misc',
  'minion': 'misc',
  'flag': 'misc',
  'misc-0': 'misc',
  'misc-1': 'misc',
  'programming-book': 'books'
};

module.exports = PlayItemsModal = (function(superClass) {
  extend(PlayItemsModal, superClass);

  PlayItemsModal.prototype.className = 'modal fade play-modal';

  PlayItemsModal.prototype.template = template;

  PlayItemsModal.prototype.id = 'play-items-modal';

  PlayItemsModal.prototype.events = {
    'click .item': 'onItemClicked',
    'shown.bs.tab': 'onTabClicked',
    'click .unlock-button': 'onUnlockButtonClicked',
    'click .buy-gems-prompt-button': 'onBuyGemsPromptButtonClicked',
    'click #close-modal': 'hide',
    'click': 'onClickedSomewhere',
    'update .tab-pane .nano': 'showVisibleItemImages',
    'click #hero-type-select label': 'onClickHeroTypeSelect'
  };

  function PlayItemsModal(options) {
    var itemFetcher, project;
    this.showVisibleItemImages = _.throttle(_.bind(this.showVisibleItemImages, this), 200);
    PlayItemsModal.__super__.constructor.call(this, options);
    this.items = new Backbone.Collection();
    this.itemCategoryCollections = {};
    project = ['name', 'components.config', 'components.original', 'slug', 'original', 'rasterIcon', 'gems', 'tier', 'description', 'i18n', 'heroClass'];
    itemFetcher = new CocoCollection([], {
      url: '/db/thang.type?view=items',
      project: project,
      model: ThangType
    });
    itemFetcher.skip = 0;
    itemFetcher.fetch({
      data: {
        skip: 0,
        limit: PAGE_SIZE
      }
    });
    this.listenTo(itemFetcher, 'sync', this.onItemsFetched);
    this.stopListening(this.supermodel, 'loaded-all');
    this.supermodel.loadCollection(itemFetcher, 'items');
    this.idToItem = {};
  }

  PlayItemsModal.prototype.onItemsFetched = function(itemFetcher) {
    var base, category, collection, cost, gemsOwned, i, len, model, needMore, ref;
    gemsOwned = me.gems();
    needMore = itemFetcher.models.length === PAGE_SIZE;
    ref = itemFetcher.models;
    for (i = 0, len = ref.length; i < len; i++) {
      model = ref[i];
      model.owned = me.ownsItem(model.get('original'));
      if (!((cost = model.get('gems')) || model.owned)) {
        continue;
      }
      category = slotToCategory[model.getAllowedSlots()[0]] || 'misc';
      if ((base = this.itemCategoryCollections)[category] == null) {
        base[category] = new Backbone.Collection();
      }
      collection = this.itemCategoryCollections[category];
      collection.comparator = function(m) {
        var ref1;
        return (ref1 = m.get('tier')) != null ? ref1 : m.get('gems');
      };
      collection.add(model);
      model.name = utils.i18n(model.attributes, 'name');
      model.affordable = cost <= gemsOwned;
      model.silhouetted = !model.owned && model.isSilhouettedItem();
      if (model.get('tier') != null) {
        model.level = model.levelRequiredForItem();
      }
      model.unequippable = !_.intersection(me.getHeroClasses(), model.getAllowedHeroClasses()).length;
      model.comingSoon = !model.getFrontFacingStats().props.length && !_.size(model.getFrontFacingStats().stats) && !model.owned;
      this.idToItem[model.id] = model;
    }
    if (itemFetcher.skip !== 0) {
      this.render();
    }
    if (needMore) {
      itemFetcher.skip += PAGE_SIZE;
      return itemFetcher.fetch({
        data: {
          skip: itemFetcher.skip,
          limit: PAGE_SIZE
        }
      });
    }
  };

  PlayItemsModal.prototype.getRenderData = function(context) {
    var category;
    if (context == null) {
      context = {};
    }
    context = PlayItemsModal.__super__.getRenderData.call(this, context);
    context.itemCategoryCollections = this.itemCategoryCollections;
    context.itemCategories = _.keys(this.itemCategoryCollections);
    context.itemCategoryNames = (function() {
      var i, len, ref, results;
      ref = context.itemCategories;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        category = ref[i];
        results.push($.i18n.t("items." + category));
      }
      return results;
    })();
    context.gems = me.gems();
    return context;
  };

  PlayItemsModal.prototype.afterRender = function() {
    var earnedLevels, ref, ref1;
    PlayItemsModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    this.playSound('game-menu-open');
    this.$el.find('.nano:visible').nanoScroller({
      alwaysVisible: true
    });
    this.itemDetailsView = new ItemDetailsView();
    this.insertSubView(this.itemDetailsView);
    this.$el.find("a[href='#item-category-armor']").click();
    earnedLevels = ((ref = me.get('earned')) != null ? ref.levels : void 0) || [];
    if (ref1 = Level.levels['defense-of-plainswood'], indexOf.call(earnedLevels, ref1) < 0) {
      this.$el.find('#misc-tab').hide();
      this.$el.find('#hero-type-select #warrior').click();
    }
    return this.showVisibleItemImages();
  };

  PlayItemsModal.prototype.onHidden = function() {
    PlayItemsModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  PlayItemsModal.prototype.onItemClicked = function(e) {
    var item, itemEl, wasSelected;
    if ($(e.target).closest('.unlock-button').length) {
      return;
    }
    this.playSound('menu-button-click');
    itemEl = $(e.target).closest('.item');
    wasSelected = itemEl.hasClass('selected');
    this.$el.find('.item.selected').removeClass('selected');
    if (wasSelected) {
      item = null;
    } else {
      item = this.idToItem[itemEl.data('item-id')];
      if (item.silhouetted && !item.owned) {
        item = null;
      } else {
        if (!wasSelected) {
          itemEl.addClass('selected');
        }
      }
    }
    return this.itemDetailsView.setItem(item);
  };

  PlayItemsModal.prototype.onTabClicked = function(e) {
    var nano;
    this.playSound('game-menu-tab-switch');
    nano = $($(e.target).attr('href')).find('.nano');
    nano.nanoScroller({
      alwaysVisible: true
    });
    this.paneNanoContent = nano.find('.nano-content');
    return this.showVisibleItemImages();
  };

  PlayItemsModal.prototype.showVisibleItemImages = function() {
    var i, item, itemEl, items, len, results, threshold;
    if (!this.paneNanoContent) {
      return console.error("Couldn't update scroll, since paneNanoContent wasn't initialized.");
    }
    items = this.paneNanoContent.find('.item:not(.loaded)');
    threshold = this.paneNanoContent.height() + 100;
    results = [];
    for (i = 0, len = items.length; i < len; i++) {
      itemEl = items[i];
      itemEl = $(itemEl);
      if (itemEl.position().top < threshold) {
        $(itemEl).addClass('loaded');
        item = this.idToItem[itemEl.data('item-id')];
        results.push(itemEl.find('.item-silhouette, .item-img').attr('src', item.getPortraitURL()));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  PlayItemsModal.prototype.onClickHeroTypeSelect = function(e) {
    var tabContent, value;
    value = $(e.target).closest('label').attr('id');
    tabContent = this.$el.find('.tab-content');
    tabContent.removeClass('filter-wizard filter-ranger filter-warrior');
    if (value !== 'all') {
      return tabContent.addClass("filter-" + value);
    }
  };

  PlayItemsModal.prototype.onUnlockButtonClicked = function(e) {
    var affordable, button, cost, gemsOwned, item, purchase, purchased, ref, ref1, ref2;
    e.stopPropagation();
    button = $(e.target).closest('button');
    item = this.idToItem[button.data('item-id')];
    gemsOwned = me.gems();
    cost = (ref = item.get('gems')) != null ? ref : 0;
    affordable = cost <= gemsOwned;
    if (!affordable) {
      this.playSound('menu-button-click');
      if (!features.freeOnly) {
        return this.askToBuyGems(button);
      }
    } else if (button.hasClass('confirm')) {
      this.playSound('menu-button-unlock-end');
      purchase = Purchase.makeFor(item);
      purchase.save();
      purchased = (ref1 = me.get('purchased')) != null ? ref1 : {};
      if (purchased.items == null) {
        purchased.items = [];
      }
      purchased.items.push(item.get('original'));
      item.owned = true;
      me.set('purchased', purchased);
      me.set('spent', ((ref2 = me.get('spent')) != null ? ref2 : 0) + item.get('gems'));
      this.renderSelectors(".item[data-item-id='" + item.id + "']", "#gems-count");
      console.log('render selectors', ".item[data-item-id='" + item.id + "']", "#gems-count");
      this.itemDetailsView.render();
      this.showVisibleItemImages();
      return Backbone.Mediator.publish('store:item-purchased', {
        item: item,
        itemSlug: item.get('slug')
      });
    } else {
      this.playSound('menu-button-unlock-start');
      button.addClass('confirm').text($.i18n.t('play.confirm'));
      return this.$el.one('click', function(e) {
        if (e.target !== button[0]) {
          return button.removeClass('confirm').text($.i18n.t('play.unlock'));
        }
      });
    }
  };

  PlayItemsModal.prototype.askToSignUp = function() {
    var createAccountModal;
    createAccountModal = new CreateAccountModal({
      supermodel: this.supermodel
    });
    return this.openModalView(createAccountModal);
  };

  PlayItemsModal.prototype.askToBuyGems = function(unlockButton) {
    var popover, popoverTemplate, ref;
    this.$el.find('.unlock-button').popover('destroy');
    popoverTemplate = buyGemsPromptTemplate({});
    unlockButton.popover({
      animation: true,
      trigger: 'manual',
      placement: 'top',
      content: ' ',
      container: this.$el,
      template: popoverTemplate
    }).popover('show');
    popover = unlockButton.data('bs.popover');
    return popover != null ? (ref = popover.$tip) != null ? ref.i18n() : void 0 : void 0;
  };

  PlayItemsModal.prototype.onBuyGemsPromptButtonClicked = function(e) {
    this.playSound('menu-button-click');
    if (me.get('anonymous')) {
      return this.askToSignUp();
    }
    return this.openModalView(new BuyGemsModal());
  };

  PlayItemsModal.prototype.onClickedSomewhere = function(e) {
    if (this.destroyed) {
      return;
    }
    return this.$el.find('.unlock-button').popover('destroy');
  };

  PlayItemsModal.prototype.destroy = function() {
    this.$el.find('.unlock-button').popover('destroy');
    return PlayItemsModal.__super__.destroy.call(this);
  };

  return PlayItemsModal;

})(ModalView);
});

;require.register("views/play/modal/PlaySettingsModal", function(exports, require, module) {
var ModalView, PlaySettingsModal, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/play-settings-modal');

module.exports = PlaySettingsModal = (function(superClass) {
  extend(PlaySettingsModal, superClass);

  PlaySettingsModal.prototype.className = 'modal fade play-modal';

  PlaySettingsModal.prototype.template = template;

  PlaySettingsModal.prototype.modalWidthPercent = 90;

  PlaySettingsModal.prototype.id = 'play-settings-modal';

  function PlaySettingsModal(options) {
    PlaySettingsModal.__super__.constructor.call(this, options);
  }

  PlaySettingsModal.prototype.afterRender = function() {
    PlaySettingsModal.__super__.afterRender.call(this);
    if (!this.supermodel.finished()) {
      return;
    }
    return this.playSound('game-menu-open');
  };

  PlaySettingsModal.prototype.onHidden = function() {
    PlaySettingsModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  return PlaySettingsModal;

})(ModalView);
});

;require.register("views/play/modal/PollModal", function(exports, require, module) {
var ModalView, PollModal, UserPollsRecord, commentStarts, template, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/poll-modal');

utils = require('core/utils');

UserPollsRecord = require('models/UserPollsRecord');

module.exports = PollModal = (function(superClass) {
  extend(PollModal, superClass);

  PollModal.prototype.id = 'poll-modal';

  PollModal.prototype.template = template;

  PollModal.prototype.subscriptions = {};

  PollModal.prototype.events = {
    'click #close-modal': 'hide',
    'click .answer:not(.selected)': 'onClickAnswer'
  };

  function PollModal(options) {
    var ref, ref1;
    PollModal.__super__.constructor.call(this, options);
    this.poll = options.poll;
    this.userPollsRecord = options.userPollsRecord;
    this.previousAnswer = ((ref = this.userPollsRecord.get('polls')) != null ? ref : {})[this.poll.id];
    this.previousReward = ((ref1 = this.userPollsRecord.get('rewards')) != null ? ref1 : {})[this.poll.id];
  }

  PollModal.prototype.getRenderData = function(c) {
    c = PollModal.__super__.getRenderData.call(this, c);
    c.poll = this.poll;
    c.i18n = utils.i18n;
    c.marked = marked;
    return c;
  };

  PollModal.prototype.afterRender = function() {
    PollModal.__super__.afterRender.call(this);
    this.playSound('game-menu-open');
    return this.updateAnswers();
  };

  PollModal.prototype.onHidden = function() {
    PollModal.__super__.onHidden.call(this);
    return this.playSound('game-menu-close');
  };

  PollModal.prototype.updateAnswers = function(answered) {
    var $answer, answer, j, k, len, len1, maxVotes, myAnswer, ref, ref1, ref2, ref3, totalVotes, votePercentage, votes, widthPercentage;
    myAnswer = ((ref = this.userPollsRecord.get('polls')) != null ? ref : {})[this.poll.id];
    answered = myAnswer != null;
    this.$el.find('table, .random-gems-container-wrapper').toggleClass('answered', answered);
    if (!answered) {
      return;
    }
    this.awardRandomGems();
    ref1 = [0, 0], maxVotes = ref1[0], totalVotes = ref1[1];
    ref2 = this.poll.get('answers') || [];
    for (j = 0, len = ref2.length; j < len; j++) {
      answer = ref2[j];
      votes = answer.votes || 0;
      if (answer.key === this.previousAnswer) {
        --votes;
      }
      if (answer.key === myAnswer) {
        ++votes;
      }
      answer.votes = votes;
      totalVotes += votes;
      maxVotes = Math.max(maxVotes, votes || 0);
    }
    this.previousAnswer = myAnswer;
    this.poll.set('answers', this.poll.get('answers'));
    ref3 = this.poll.get('answers');
    for (k = 0, len1 = ref3.length; k < len1; k++) {
      answer = ref3[k];
      $answer = this.$el.find(".answer[data-answer='" + answer.key + "']");
      $answer.toggleClass('selected', answer.key === myAnswer);
      votes = answer.votes || 0;
      if (!totalVotes) {
        votes = maxVotes = totalVotes = 1;
      }
      widthPercentage = (100 * votes / maxVotes) + '%';
      votePercentage = Math.round(100 * votes / totalVotes) + '%';
      $answer.find('.progress-bar').css('width', '0%').animate({
        width: widthPercentage
      }, 'slow');
      $answer.find('.vote-percentage').text(votePercentage);
      if (me.isAdmin()) {
        $answer.find('.vote-count').text(votes);
      }
    }
    return this.trigger('vote-updated');
  };

  PollModal.prototype.onClickAnswer = function(e) {
    var $selectedAnswer, pollVotes, ref;
    $selectedAnswer = $(e.target).closest('.answer');
    pollVotes = (ref = this.userPollsRecord.get('polls')) != null ? ref : {};
    pollVotes[this.poll.id] = $selectedAnswer.data('answer').toString();
    this.userPollsRecord.set('polls', pollVotes);
    this.updateAnswers(true);
    return this.userPollsRecord.save({
      polls: pollVotes
    }, {
      success: (function(_this) {
        return function() {
          return typeof _this.awardRandomGems === "function" ? _this.awardRandomGems() : void 0;
        };
      })(this)
    });
  };

  PollModal.prototype.awardRandomGems = function() {
    var commentStart, fn, gemNoisesPlayed, i, j, playSound, randomGems, randomNumber, ref, ref1, ref2, reward, totalGems;
    if (!(reward = ((ref = this.userPollsRecord.get('rewards')) != null ? ref : {})[this.poll.id])) {
      return;
    }
    this.$randomNumber = this.$el.find('#random-number-comment').empty();
    this.$randomGems = this.$el.find('#random-gems-comment').hide();
    this.$totalGems = this.$el.find('#total-gems-comment').hide();
    commentStart = commentStarts[(ref1 = (ref2 = me.get('aceConfig')) != null ? ref2.language : void 0) != null ? ref1 : 'python'];
    randomNumber = reward.random;
    randomGems = Math.ceil(2 * randomNumber * reward.level);
    totalGems = this.previousReward ? me.gems() : Math.round(me.gems() + randomGems);
    playSound = this.playSound;
    if (this.previousReward) {
      utils.replaceText(this.$randomNumber.show(), commentStart + randomNumber.toFixed(7));
      utils.replaceText(this.$randomGems.show(), commentStart + randomGems);
      return utils.replaceText(this.$totalGems.show(), commentStart + totalGems);
    } else {
      gemNoisesPlayed = 0;
      fn = (function(_this) {
        return function(i) {
          _this.$randomNumber.queue(function() {
            var gemTrigger, number;
            number = i === 1000 ? randomNumber : Math.random();
            utils.replaceText($(this), commentStart + number.toFixed(7));
            $(this).dequeue();
            if (Math.random() < randomGems / 40) {
              gemTrigger = 'gem-' + (gemNoisesPlayed % 4);
              ++gemNoisesPlayed;
              return playSound(gemTrigger, 0.475 + i / 2000);
            }
          });
          return _this.$randomNumber.delay(25);
        };
      })(this);
      for (i = j = 0; j <= 1000; i = j += 25) {
        fn(i);
      }
      this.$randomGems.delay(1100).queue(function() {
        utils.replaceText($(this), commentStart + randomGems);
        $(this).show();
        return $(this).dequeue();
      });
      this.$totalGems.delay(1200).queue(function() {
        utils.replaceText($(this), commentStart + totalGems);
        $(this).show();
        return $(this).dequeue();
      });
      this.previousReward = reward;
      return _.delay(((function(_this) {
        return function() {
          var earned, ref3;
          if (_this.destroyed) {
            return;
          }
          earned = (ref3 = me.get('earned')) != null ? ref3 : {};
          earned.gems += randomGems;
          me.set('earned', earned);
          return me.trigger('change:earned');
        };
      })(this)), 1200);
    }
  };

  return PollModal;

})(ModalView);

commentStarts = {
  javascript: '// ',
  python: '# ',
  coffeescript: '# ',
  lua: '-- ',
  java: '// '
};
});

;require.register("views/play/modal/ShareProgressModal", function(exports, require, module) {
var ModalView, ShareProgressModal, storage, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ModalView = require('views/core/ModalView');

template = require('templates/play/modal/share-progress-modal');

storage = require('core/storage');

module.exports = ShareProgressModal = (function(superClass) {
  extend(ShareProgressModal, superClass);

  function ShareProgressModal() {
    return ShareProgressModal.__super__.constructor.apply(this, arguments);
  }

  ShareProgressModal.prototype.id = 'share-progress-modal';

  ShareProgressModal.prototype.template = template;

  ShareProgressModal.prototype.plain = true;

  ShareProgressModal.prototype.closesOnClickOutside = false;

  ShareProgressModal.prototype.events = {
    'click .close-btn': 'hide',
    'click .continue-link': 'hide',
    'click .send-btn': 'onClickSend'
  };

  ShareProgressModal.prototype.onClickSend = function(e) {
    var email, request;
    email = $('.email-input').val();
    if (!/[\w\.]+@\w+\.\w+/.test(email)) {
      $('.email-input').parent().addClass('has-error');
      $('.email-invalid').show();
      return false;
    }
    request = this.supermodel.addRequestResource('send_one_time_email', {
      url: '/db/user/-/send_one_time_email',
      data: {
        email: email,
        type: 'share progress modal parent'
      },
      method: 'POST'
    }, 0);
    request.load();
    storage.save('sent-parent-email', true);
    return this.hide();
  };

  return ShareProgressModal;

})(ModalView);
});

;
//# sourceMappingURL=/javascripts/app/views/play.js.map