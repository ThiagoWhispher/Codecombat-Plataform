{"version":3,"sources":["app/views/core/CreateAccountModal/CreateAccountModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/core/CreateAccountModal/CreateAccountModal.js","sourcesContent":["ModalView = require 'views/core/ModalView'\r\nAuthModal = require 'views/core/AuthModal'\r\nChooseAccountTypeView = require './ChooseAccountTypeView'\r\nSegmentCheckView = require './SegmentCheckView'\r\nCoppaDenyView = require './CoppaDenyView'\r\nBasicInfoView = require './BasicInfoView'\r\nSingleSignOnAlreadyExistsView = require './SingleSignOnAlreadyExistsView'\r\nSingleSignOnConfirmView = require './SingleSignOnConfirmView'\r\nExtrasView = require './ExtrasView'\r\nConfirmationView = require './ConfirmationView'\r\nState = require 'models/State'\r\ntemplate = require 'templates/core/create-account-modal/create-account-modal'\r\nforms = require 'core/forms'\r\nUser = require 'models/User'\r\napplication  = require 'core/application'\r\nerrors = require 'core/errors'\r\nutils = require 'core/utils'\r\n\r\n###\r\nCreateAccountModal is a wizard-style modal with several subviews, one for each\r\n`screen` that the user navigates forward and back through.\r\n\r\nThere are three `path`s, one for each account type (individual, student).\r\nTeacher account path will be added later; for now it defers to /teachers/signup)\r\nEach subview handles only one `screen`, but all three `path` variants because\r\ntheir logic is largely the same.\r\n\r\nThey `screen`s are:\r\n  choose-account-type: Sets the `path`.\r\n  segment-check: Checks required info for the path (age, )\r\n    coppa-deny: Seen if the indidual segment-check age is < 13 years old\r\n  basic-info: This is the form for username/password/email/etc.\r\n              It asks for whatever is needed for this type of user.\r\n              It also handles the actual user creation.\r\n              A user may create their account here, or connect with facebook/g+\r\n    sso-confirm: Alternate version of basic-info for new facebook/g+ users\r\n  sso-already-exists: When facebook/g+ user already exists, this prompts them to sign in.\r\n  extras: Not yet implemented\r\n  confirmation: When an account has been successfully created, this view shows them their info and\r\n    links them to a landing page based on their account type.\r\n\r\nNOTE: BasicInfoView's two children (SingleSignOn...View) inherit from it.\r\nThis allows them to have the same form-handling logic, but different templates.\r\n###\r\n\r\nmodule.exports = class CreateAccountModal extends ModalView\r\n  id: 'create-account-modal'\r\n  template: template\r\n  closesOnClickOutside: false\r\n  retainSubviews: true\r\n\r\n  events:\r\n    'click .login-link': 'onClickLoginLink'\r\n\r\n  initialize: (options={}) ->\r\n    classCode = utils.getQueryVariable('_cc', undefined)\r\n    @signupState = new State {\r\n      path: if classCode then 'student' else null\r\n      screen: if classCode then 'segment-check' else 'choose-account-type'\r\n      ssoUsed: null # or 'facebook', 'gplus'\r\n      classroom: null # or Classroom instance\r\n      facebookEnabled: application.facebookHandler.apiLoaded\r\n      gplusEnabled: application.gplusHandler.apiLoaded\r\n      classCode\r\n      birthday: new Date('') # so that birthday.getTime() is NaN\r\n      authModalInitialValues: {}\r\n      accountCreated: false\r\n    }\r\n    \r\n    { startOnPath } = options\r\n    if startOnPath is 'student'\r\n      @signupState.set({ path: 'student', screen: 'segment-check' })\r\n    if startOnPath is 'individual'\r\n      @signupState.set({ path: 'individual', screen: 'segment-check' })\r\n\r\n    @listenTo @signupState, 'all', _.debounce @render\r\n\r\n    @listenTo @insertSubView(new ChooseAccountTypeView()),\r\n      'choose-path': (path) ->\r\n        if path is 'teacher'\r\n          application.router.navigate('/teachers/signup', trigger: true)\r\n        else\r\n          @signupState.set { path, screen: 'segment-check' }\r\n\r\n    @listenTo @insertSubView(new SegmentCheckView({ @signupState })),\r\n      'choose-path': (path) -> @signupState.set { path, screen: 'segment-check' }\r\n      'nav-back': -> @signupState.set { path: null, screen: 'choose-account-type' }\r\n      'nav-forward': (screen) -> @signupState.set { screen: screen or 'basic-info' }\r\n\r\n    @listenTo @insertSubView(new CoppaDenyView({ @signupState })),\r\n      'nav-back': -> @signupState.set { screen: 'segment-check' }\r\n\r\n    @listenTo @insertSubView(new BasicInfoView({ @signupState })),\r\n      'sso-connect:already-in-use': -> @signupState.set { screen: 'sso-already-exists' }\r\n      'sso-connect:new-user': -> @signupState.set {screen: 'sso-confirm'}\r\n      'nav-back': -> @signupState.set { screen: 'segment-check' }\r\n      'signup': ->\r\n        if @signupState.get('path') is 'student'\r\n          @signupState.set { screen: 'extras', accountCreated: true }\r\n        else\r\n          @signupState.set { screen: 'confirmation', accountCreated: true }\r\n\r\n    @listenTo @insertSubView(new SingleSignOnAlreadyExistsView({ @signupState })),\r\n      'nav-back': -> @signupState.set { screen: 'basic-info' }\r\n\r\n    @listenTo @insertSubView(new SingleSignOnConfirmView({ @signupState })),\r\n      'nav-back': -> @signupState.set { screen: 'basic-info' }\r\n      'signup': ->\r\n        if @signupState.get('path') is 'student'\r\n          @signupState.set { screen: 'extras', accountCreated: true }\r\n        else\r\n          @signupState.set { screen: 'confirmation', accountCreated: true }\r\n        \r\n    @listenTo @insertSubView(new ExtrasView({ @signupState })),\r\n      'nav-forward': -> @signupState.set { screen: 'confirmation' }\r\n\r\n    @insertSubView(new ConfirmationView({ @signupState }))\r\n\r\n    # TODO: Switch to promises and state, rather than using defer to hackily enable buttons after render\r\n    application.facebookHandler.loadAPI({ success: => @signupState.set { facebookEnabled: true } unless @destroyed })\r\n    application.gplusHandler.loadAPI({ success: => @signupState.set { gplusEnabled: true } unless @destroyed })\r\n    \r\n    @once 'hidden', ->\r\n      if @signupState.get('accountCreated') and not application.testing\r\n        # ensure logged in state propagates through the entire app\r\n        if me.isStudent()\r\n          application.router.navigate('/students', {trigger: true})\r\n        else if me.isTeacher()\r\n          application.router.navigate('/teachers/classes', {trigger: true})\r\n        window.location.reload()\r\n  \r\n  onClickLoginLink: ->\r\n    @openModalView(new AuthModal({ initialValues: @signupState.get('authModalInitialValues') }))\r\n"]}