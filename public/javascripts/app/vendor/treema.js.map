{"version":3,"sources":["bower_components/treema/treema.js"],"names":[],"mappingsfile":"public/javascripts/app/vendor/treema.js","sourcesContent":["var TreemaNode,\r\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\r\n  __slice = [].slice;\r\n\r\nTreemaNode = (function() {\r\n  var defaults;\r\n\r\n  TreemaNode.prototype.schema = {};\r\n\r\n  TreemaNode.prototype.$el = null;\r\n\r\n  TreemaNode.prototype.data = null;\r\n\r\n  TreemaNode.prototype.options = null;\r\n\r\n  TreemaNode.prototype.parent = null;\r\n\r\n  TreemaNode.prototype.lastSelectedTreema = null;\r\n\r\n  TreemaNode.prototype.treemaFilterHiddenClass = 'treema-filter-hidden';\r\n\r\n  TreemaNode.prototype.nodeTemplate = '<div class=\"treema-row treema-clearfix\"><div class=\"treema-value\"></div></div>';\r\n\r\n  TreemaNode.prototype.childrenTemplate = '<div class=\"treema-children\"></div>';\r\n\r\n  TreemaNode.prototype.addChildTemplate = '<div class=\"treema-add-child\" tabindex=\"9009\">+</div>';\r\n\r\n  TreemaNode.prototype.tempErrorTemplate = '<span class=\"treema-temp-error\"></span>';\r\n\r\n  TreemaNode.prototype.toggleTemplate = '<span class=\"treema-toggle-hit-area\"><span class=\"treema-toggle\"></span></span>';\r\n\r\n  TreemaNode.prototype.keyTemplate = '<span class=\"treema-key\"></span>';\r\n\r\n  TreemaNode.prototype.errorTemplate = '<div class=\"treema-error\"></div>';\r\n\r\n  TreemaNode.prototype.newPropertyTemplate = '<input class=\"treema-new-prop\" />';\r\n\r\n  TreemaNode.prototype.collection = false;\r\n\r\n  TreemaNode.prototype.ordered = false;\r\n\r\n  TreemaNode.prototype.keyed = false;\r\n\r\n  TreemaNode.prototype.editable = true;\r\n\r\n  TreemaNode.prototype.directlyEditable = true;\r\n\r\n  TreemaNode.prototype.skipTab = false;\r\n\r\n  TreemaNode.prototype.valueClass = null;\r\n\r\n  TreemaNode.prototype.removeOnEmptyDelete = true;\r\n\r\n  TreemaNode.prototype.keyForParent = null;\r\n\r\n  TreemaNode.prototype.childrenTreemas = null;\r\n\r\n  TreemaNode.prototype.integrated = false;\r\n\r\n  TreemaNode.prototype.workingSchema = null;\r\n\r\n  TreemaNode.prototype.nodeDescription = 'Node';\r\n\r\n  TreemaNode.prototype.isValid = function() {\r\n    var errors;\r\n    errors = this.getErrors();\r\n    return errors.length === 0;\r\n  };\r\n\r\n  TreemaNode.prototype.getErrors = function() {\r\n    var e, errors, moreErrors, my_path, root, _i, _len;\r\n    if (!this.tv4) {\r\n      return [];\r\n    }\r\n    if (this.isRoot()) {\r\n      if (this.cachedErrors) {\r\n        return this.cachedErrors;\r\n      }\r\n      this.cachedErrors = this.tv4.validateMultiple(this.data, this.schema)['errors'];\r\n      return this.cachedErrors;\r\n    }\r\n    root = this.getRoot();\r\n    errors = root.getErrors();\r\n    my_path = this.getPath();\r\n    errors = (function() {\r\n      var _i, _len, _results;\r\n      _results = [];\r\n      for (_i = 0, _len = errors.length; _i < _len; _i++) {\r\n        e = errors[_i];\r\n        if (e.dataPath.slice(0, +my_path.length + 1 || 9e9) === my_path) {\r\n          _results.push(e);\r\n        }\r\n      }\r\n      return _results;\r\n    })();\r\n    for (_i = 0, _len = errors.length; _i < _len; _i++) {\r\n      e = errors[_i];\r\n      if (e.dataPath === my_path) {\r\n        e.subDataPath = '';\r\n      } else {\r\n        e.subDataPath = e.dataPath.slice(0, +my_path.length + 1 || 9e9);\r\n      }\r\n    }\r\n    if (this.workingSchema) {\r\n      moreErrors = this.tv4.validateMultiple(this.data, this.workingSchema).errors;\r\n      errors = errors.concat(moreErrors);\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  TreemaNode.prototype.setUpValidator = function() {\r\n    var root, _ref;\r\n    if (!this.parent) {\r\n      this.tv4 = (_ref = window['tv4']) != null ? _ref.freshApi() : void 0;\r\n      this.tv4.addSchema('#', this.schema);\r\n      if (this.schema.id) {\r\n        return this.tv4.addSchema(this.schema.id, this.schema);\r\n      }\r\n    } else {\r\n      root = this.getRoot();\r\n      return this.tv4 = root.tv4;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.saveChanges = function(oldData) {\r\n    if (oldData === this.data) {\r\n      return;\r\n    }\r\n    return this.addTrackedAction({\r\n      'oldData': oldData,\r\n      'newData': this.data,\r\n      'path': this.getPath(),\r\n      'action': 'edit'\r\n    });\r\n  };\r\n\r\n  TreemaNode.prototype.getChildSchema = function(key) {\r\n    return TreemaNode.utils.getChildSchema(key, this.workingSchema);\r\n  };\r\n\r\n  TreemaNode.prototype.buildValueForDisplay = function() {\r\n    return console.error('\"buildValueForDisplay\" has not been overridden.');\r\n  };\r\n\r\n  TreemaNode.prototype.buildValueForEditing = function() {\r\n    if (!(this.editable && this.directlyEditable)) {\r\n      return;\r\n    }\r\n    return console.error('\"buildValueForEditing\" has not been overridden.');\r\n  };\r\n\r\n  TreemaNode.prototype.getChildren = function() {\r\n    return console.error('\"getChildren\" has not been overridden.');\r\n  };\r\n\r\n  TreemaNode.prototype.canAddChild = function() {\r\n    return this.collection && this.editable && !this.settings.readOnly;\r\n  };\r\n\r\n  TreemaNode.prototype.canAddProperty = function() {\r\n    return true;\r\n  };\r\n\r\n  TreemaNode.prototype.addingNewProperty = function() {\r\n    return false;\r\n  };\r\n\r\n  TreemaNode.prototype.addNewChild = function() {\r\n    return false;\r\n  };\r\n\r\n  TreemaNode.prototype.buildValueForDisplaySimply = function(valEl, text) {\r\n    if (text.length > 200) {\r\n      text = text.slice(0, 200) + '...';\r\n    }\r\n    return valEl.append($(\"<div></div>\").addClass('treema-shortened').text(text));\r\n  };\r\n\r\n  TreemaNode.prototype.buildValueForEditingSimply = function(valEl, value, inputType) {\r\n    var input;\r\n    if (inputType == null) {\r\n      inputType = null;\r\n    }\r\n    input = $('<input />');\r\n    if (inputType) {\r\n      input.attr('type', inputType);\r\n    }\r\n    if (value !== null) {\r\n      input.val(value);\r\n    }\r\n    valEl.append(input);\r\n    input.focus().select();\r\n    input.blur(this.onEditInputBlur);\r\n    return input;\r\n  };\r\n\r\n  TreemaNode.prototype.onEditInputBlur = function(e) {\r\n    var closest, input, shouldRemove;\r\n    shouldRemove = this.shouldTryToRemoveFromParent();\r\n    closest = $(e.relatedTarget).closest('.treema-node')[0];\r\n    if (closest === this.$el[0]) {\r\n      shouldRemove = false;\r\n    }\r\n    this.markAsChanged();\r\n    this.saveChanges(this.getValEl());\r\n    input = this.getValEl().find('input, textarea, select');\r\n    if (this.isValid()) {\r\n      if (this.isEditing()) {\r\n        this.display();\r\n      }\r\n    } else {\r\n      input.focus().select();\r\n    }\r\n    if (shouldRemove) {\r\n      this.remove();\r\n    } else {\r\n      this.flushChanges();\r\n    }\r\n    return this.broadcastChanges();\r\n  };\r\n\r\n  TreemaNode.prototype.shouldTryToRemoveFromParent = function() {\r\n    var input, inputs, val, _i, _len;\r\n    val = this.getValEl();\r\n    if (val.find('select').length) {\r\n      return;\r\n    }\r\n    inputs = val.find('input, textarea');\r\n    for (_i = 0, _len = inputs.length; _i < _len; _i++) {\r\n      input = inputs[_i];\r\n      input = $(input);\r\n      if (input.attr('type') === 'checkbox' || input.val()) {\r\n        return false;\r\n      }\r\n    }\r\n    if (!this.getErrors().length) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  TreemaNode.prototype.limitChoices = function(options) {\r\n    var _this = this;\r\n    this[\"enum\"] = options;\r\n    this.buildValueForEditing = function(valEl, data) {\r\n      var index, input, option, _i, _len, _ref;\r\n      input = $('<select></select>');\r\n      _ref = _this[\"enum\"];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        option = _ref[_i];\r\n        input.append($('<option></option>').text(option));\r\n      }\r\n      index = _this[\"enum\"].indexOf(data);\r\n      if (index >= 0) {\r\n        input.prop('selectedIndex', index);\r\n      }\r\n      valEl.append(input);\r\n      input.focus();\r\n      input.blur(_this.onEditInputBlur);\r\n      return input;\r\n    };\r\n    return this.saveChanges = function(valEl) {\r\n      var index;\r\n      index = valEl.find('select').prop('selectedIndex');\r\n      _this.addTrackedAction({\r\n        'oldData': _this.data,\r\n        'newData': _this[\"enum\"][index],\r\n        'path': _this.getPath(),\r\n        'action': 'edit'\r\n      });\r\n      _this.data = _this[\"enum\"][index];\r\n      TreemaNode.changedTreemas.push(_this);\r\n      return _this.broadcastChanges();\r\n    };\r\n  };\r\n\r\n  TreemaNode.pluginName = \"treema\";\r\n\r\n  defaults = {\r\n    schema: {},\r\n    callbacks: {}\r\n  };\r\n\r\n  function TreemaNode($el, options, parent) {\r\n    this.$el = $el;\r\n    this.parent = parent;\r\n    this.onSelectType = __bind(this.onSelectType, this);\r\n    this.onSelectSchema = __bind(this.onSelectSchema, this);\r\n    this.orderDataFromUI = __bind(this.orderDataFromUI, this);\r\n    this.onMouseLeave = __bind(this.onMouseLeave, this);\r\n    this.onMouseEnter = __bind(this.onMouseEnter, this);\r\n    this.onEditInputBlur = __bind(this.onEditInputBlur, this);\r\n    this.setWorkingSchema(options.workingSchema, options.workingSchemas);\r\n    delete options.workingSchema;\r\n    delete options.workingSchemas;\r\n    this.$el = this.$el || $('<div></div>');\r\n    this.settings = $.extend({}, defaults, options);\r\n    this.schema = $.extend({}, this.settings.schema);\r\n    this.data = options.data;\r\n    this.defaultData = options.defaultData;\r\n    this.keyForParent = options.keyForParent;\r\n    this.patches = [];\r\n    this.trackedActions = [];\r\n    this.currentStateIndex = 0;\r\n    this.trackingDisabled = false;\r\n    this.callbacks = this.settings.callbacks;\r\n    this._defaults = defaults;\r\n    this._name = TreemaNode.pluginName;\r\n    this.setUpValidator();\r\n    this.populateData();\r\n    this.previousState = this.copyData();\r\n    this.unloadNodeSpecificSettings();\r\n  }\r\n\r\n  TreemaNode.prototype.unloadNodeSpecificSettings = function() {\r\n    var key, _i, _len, _ref, _results;\r\n    _ref = ['data', 'defaultData', 'schema', 'type'];\r\n    _results = [];\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      key = _ref[_i];\r\n      if (this.settings[key] != null) {\r\n        this[key] = this.settings[key];\r\n      }\r\n      _results.push(delete this.settings[key]);\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.build = function() {\r\n    var schema, valEl, _ref;\r\n    this.$el.addClass('treema-node').addClass('treema-clearfix');\r\n    this.$el.empty().append($(this.nodeTemplate));\r\n    this.$el.data('instance', this);\r\n    if (!this.parent) {\r\n      this.$el.addClass('treema-root');\r\n    }\r\n    if (!this.parent) {\r\n      this.$el.attr('tabindex', 9001);\r\n    }\r\n    if (this.collection) {\r\n      this.$el.append($(this.childrenTemplate)).addClass('treema-closed');\r\n    }\r\n    valEl = this.getValEl();\r\n    if (this.valueClass) {\r\n      valEl.addClass(this.valueClass);\r\n    }\r\n    if (this.directlyEditable) {\r\n      valEl.addClass('treema-display');\r\n    }\r\n    this.buildValueForDisplay(valEl, this.getData());\r\n    if (this.collection && !this.parent) {\r\n      this.open();\r\n    }\r\n    if (!this.parent) {\r\n      this.setUpGlobalEvents();\r\n    }\r\n    if (this.parent) {\r\n      this.setUpLocalEvents();\r\n    }\r\n    if (this.collection) {\r\n      this.updateMyAddButton();\r\n    }\r\n    this.createTypeSelector();\r\n    if (((_ref = this.workingSchemas) != null ? _ref.length : void 0) > 1) {\r\n      this.createSchemaSelector();\r\n    }\r\n    schema = this.workingSchema || this.schema;\r\n    if (schema[\"enum\"]) {\r\n      this.limitChoices(schema[\"enum\"]);\r\n    }\r\n    this.updateDefaultClass();\r\n    return this.$el;\r\n  };\r\n\r\n  TreemaNode.prototype.populateData = function() {};\r\n\r\n  TreemaNode.prototype.setWorkingSchema = function(workingSchema, workingSchemas) {\r\n    this.workingSchema = workingSchema;\r\n    this.workingSchemas = workingSchemas;\r\n  };\r\n\r\n  TreemaNode.prototype.createSchemaSelector = function() {\r\n    var i, label, option, schema, select, _i, _len, _ref;\r\n    select = $('<select></select>').addClass('treema-schema-select');\r\n    _ref = this.workingSchemas;\r\n    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\r\n      schema = _ref[i];\r\n      label = this.makeWorkingSchemaLabel(schema);\r\n      option = $('<option></option>').attr('value', i).text(label);\r\n      if (schema === this.workingSchema) {\r\n        option.attr('selected', true);\r\n      }\r\n      select.append(option);\r\n    }\r\n    select.change(this.onSelectSchema);\r\n    return this.$el.find('> .treema-row').prepend(select);\r\n  };\r\n\r\n  TreemaNode.prototype.makeWorkingSchemaLabel = function(schema) {\r\n    if (schema.title != null) {\r\n      return schema.title;\r\n    }\r\n    if (schema.type != null) {\r\n      return schema.type;\r\n    }\r\n    return '???';\r\n  };\r\n\r\n  TreemaNode.prototype.getTypes = function() {\r\n    var schema, types;\r\n    schema = this.workingSchema || this.schema;\r\n    types = schema.type || [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"array\", \"object\"];\r\n    if (!$.isArray(types)) {\r\n      types = [types];\r\n    }\r\n    return types;\r\n  };\r\n\r\n  TreemaNode.prototype.createTypeSelector = function() {\r\n    var currentType, option, schema, select, type, types, _i, _len;\r\n    types = this.getTypes();\r\n    if (!(types.length > 1)) {\r\n      return;\r\n    }\r\n    schema = this.workingSchema || this.schema;\r\n    if (schema[\"enum\"]) {\r\n      return;\r\n    }\r\n    select = $('<select></select>').addClass('treema-type-select');\r\n    currentType = $.type(this.getData());\r\n    if (this.valueClass === 'treema-integer') {\r\n      currentType = 'integer';\r\n    }\r\n    for (_i = 0, _len = types.length; _i < _len; _i++) {\r\n      type = types[_i];\r\n      option = $('<option></option>').attr('value', type).text(this.getTypeName(type));\r\n      if (type === currentType) {\r\n        option.attr('selected', true);\r\n      }\r\n      select.append(option);\r\n    }\r\n    select.change(this.onSelectType);\r\n    return this.$el.find('> .treema-row').prepend(select);\r\n  };\r\n\r\n  TreemaNode.prototype.getTypeName = function(type) {\r\n    return {\r\n      \"null\": 'null',\r\n      array: 'arr',\r\n      number: 'num',\r\n      string: 'str',\r\n      integer: 'int',\r\n      boolean: 'bool',\r\n      object: 'obj'\r\n    }[type];\r\n  };\r\n\r\n  TreemaNode.prototype.setUpGlobalEvents = function() {\r\n    var _this = this;\r\n    this.$el.unbind();\r\n    this.$el.dblclick(function(e) {\r\n      var _ref;\r\n      return (_ref = $(e.target).closest('.treema-node').data('instance')) != null ? _ref.onDoubleClick(e) : void 0;\r\n    });\r\n    this.$el.click(function(e) {\r\n      var _ref;\r\n      if ((_ref = $(e.target).closest('.treema-node').data('instance')) != null) {\r\n        _ref.onClick(e);\r\n      }\r\n      return _this.broadcastChanges(e);\r\n    });\r\n    this.keysPreviouslyDown = {};\r\n    this.$el.keydown(function(e) {\r\n      var closest, lastSelected, _ref;\r\n      e.heldDown = _this.keysPreviouslyDown[e.which] || false;\r\n      closest = $(e.target).closest('.treema-node').data('instance');\r\n      lastSelected = _this.getLastSelectedTreema();\r\n      if ((_ref = lastSelected || closest) != null) {\r\n        _ref.onKeyDown(e);\r\n      }\r\n      _this.broadcastChanges(e);\r\n      _this.keysPreviouslyDown[e.which] = true;\r\n      if (e.ctrlKey || e.metaKey) {\r\n        return _this.manageCopyAndPaste(e);\r\n      }\r\n    });\r\n    return this.$el.keyup(function(e) {\r\n      var _ref, _ref1;\r\n      if ((_ref = e.which) === 17 || _ref === 91) {\r\n        if ((_ref1 = _this.targetOfCopyPaste) != null) {\r\n          _ref1.removeClass('treema-target-of-copy-paste');\r\n        }\r\n        _this.targetOfCopyPaste = null;\r\n      }\r\n      return delete _this.keysPreviouslyDown[e.which];\r\n    });\r\n  };\r\n\r\n  TreemaNode.prototype.manageCopyAndPaste = function(e) {\r\n    var el, target, _ref,\r\n      _this = this;\r\n    el = document.activeElement;\r\n    if ((el != null) && (el.tagName.toLowerCase() === 'input' && el.type === 'text') || (el.tagName.toLowerCase() === 'textarea' && !$(el).hasClass('treema-clipboard'))) {\r\n      return;\r\n    }\r\n    target = (_ref = this.getLastSelectedTreema()) != null ? _ref : this;\r\n    if (e.which === 86 && $(e.target).hasClass('treema-clipboard')) {\r\n      if (e.shiftKey && $(e.target).hasClass('treema-clipboard')) {\r\n        this.saveScrolls();\r\n        return setTimeout((function() {\r\n          var newData, result;\r\n          _this.loadScrolls();\r\n          if (!(newData = _this.$clipboard.val())) {\r\n            return;\r\n          }\r\n          try {\r\n            newData = JSON.parse(newData);\r\n          } catch (_error) {\r\n            e = _error;\r\n            _this.$el.trigger({\r\n              type: 'treema-error',\r\n              message: 'Could not parse pasted data as JSON.'\r\n            });\r\n            return;\r\n          }\r\n          result = target.tv4.validateMultiple(newData, target.schema);\r\n          if (result.valid) {\r\n            target.set('/', newData);\r\n            return _this.$el.trigger('treema-paste');\r\n          } else {\r\n            _this.$el.trigger({\r\n              type: 'treema-error',\r\n              message: 'Data provided is invalid according to schema.'\r\n            });\r\n            return console.log(\"not pasting\", newData, \"because it's not valid:\", result);\r\n          }\r\n        }), 5);\r\n      } else {\r\n        return e.preventDefault();\r\n      }\r\n    } else if (e.shiftKey) {\r\n      if (!this.$clipboardContainer) {\r\n        return;\r\n      }\r\n      this.saveScrolls();\r\n      this.$clipboardContainer.find('.treema-clipboard').focus().select();\r\n      return this.loadScrolls();\r\n    } else {\r\n      this.saveScrolls();\r\n      if (!this.$clipboardContainer) {\r\n        this.$clipboardContainer = $('<div class=\"treema-clipboard-container\"></div>').appendTo(this.$el);\r\n        this.$clipboardContainer.on('paste', function() {\r\n          var _ref1;\r\n          return (_ref1 = _this.targetOfCopyPaste) != null ? _ref1.removeClass('treema-target-of-copy-paste') : void 0;\r\n        });\r\n        this.$clipboardContainer.on('copy', function() {\r\n          var _ref1;\r\n          _this.$el.trigger('treema-copy');\r\n          return (_ref1 = _this.targetOfCopyPaste) != null ? _ref1.removeClass('treema-target-of-copy-paste') : void 0;\r\n        });\r\n      }\r\n      this.targetOfCopyPaste = target.$el;\r\n      this.targetOfCopyPaste.addClass('treema-target-of-copy-paste');\r\n      this.$clipboardContainer.empty().show();\r\n      this.$clipboard = $('<textarea class=\"treema-clipboard\"></textarea>').val(JSON.stringify(target.getData(), null, '  ')).appendTo(this.$clipboardContainer).focus().select();\r\n      return this.loadScrolls();\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.broadcastChanges = function(e) {\r\n    var changes, t, _base;\r\n    if (this.getRoot().hush) {\r\n      return;\r\n    }\r\n    if (this.callbacks.select && TreemaNode.didSelect) {\r\n      TreemaNode.didSelect = false;\r\n      this.callbacks.select(e, this.getSelectedTreemas());\r\n    }\r\n    if (TreemaNode.changedTreemas.length) {\r\n      changes = (function() {\r\n        var _i, _len, _ref, _results;\r\n        _ref = TreemaNode.changedTreemas;\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          t = _ref[_i];\r\n          if (t.integrated || !t.parent) {\r\n            _results.push(t);\r\n          }\r\n        }\r\n        return _results;\r\n      })();\r\n      if (typeof (_base = this.callbacks).change === \"function\") {\r\n        _base.change(e, jQuery.unique(changes));\r\n      }\r\n      return TreemaNode.changedTreemas = [];\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.markAsChanged = function() {\r\n    return TreemaNode.changedTreemas.push(this);\r\n  };\r\n\r\n  TreemaNode.prototype.setUpLocalEvents = function() {\r\n    var row;\r\n    row = this.$el.find('> .treema-row');\r\n    if (this.callbacks.mouseenter != null) {\r\n      row.mouseenter(this.onMouseEnter);\r\n    }\r\n    if (this.callbacks.mouseleave != null) {\r\n      return row.mouseleave(this.onMouseLeave);\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.onMouseEnter = function(e) {\r\n    return this.callbacks.mouseenter(e, this);\r\n  };\r\n\r\n  TreemaNode.prototype.onMouseLeave = function(e) {\r\n    return this.callbacks.mouseleave(e, this);\r\n  };\r\n\r\n  TreemaNode.prototype.onClick = function(e) {\r\n    var clickedToggle, clickedValue, usedModKey, _ref;\r\n    if ((_ref = e.target.nodeName) === 'INPUT' || _ref === 'TEXTAREA' || _ref === 'SELECT') {\r\n      return;\r\n    }\r\n    clickedValue = $(e.target).closest('.treema-value').length;\r\n    clickedToggle = $(e.target).hasClass('treema-toggle') || $(e.target).hasClass('treema-toggle-hit-area');\r\n    usedModKey = e.shiftKey || e.ctrlKey || e.metaKey;\r\n    if (!(clickedValue && !this.collection)) {\r\n      this.keepFocus();\r\n    }\r\n    if (this.isDisplaying() && clickedValue && this.canEdit() && !usedModKey) {\r\n      return this.toggleEdit();\r\n    }\r\n    if (!usedModKey && (clickedToggle || (clickedValue && this.collection))) {\r\n      if (!clickedToggle) {\r\n        this.deselectAll();\r\n        this.select();\r\n      }\r\n      return this.toggleOpen();\r\n    }\r\n    if ($(e.target).closest('.treema-add-child').length && this.collection) {\r\n      return this.addNewChild();\r\n    }\r\n    if (this.isRoot() || this.isEditing()) {\r\n      return;\r\n    }\r\n    if (e.shiftKey) {\r\n      return this.shiftSelect();\r\n    }\r\n    if (e.ctrlKey || e.metaKey) {\r\n      return this.toggleSelect();\r\n    }\r\n    return this.select();\r\n  };\r\n\r\n  TreemaNode.prototype.onDoubleClick = function(e) {\r\n    var clickedKey, _base, _base1, _base2;\r\n    if (!this.collection) {\r\n      return typeof (_base = this.callbacks).dblclick === \"function\" ? _base.dblclick(e, this) : void 0;\r\n    }\r\n    clickedKey = $(e.target).hasClass('treema-key');\r\n    if (!clickedKey) {\r\n      return typeof (_base1 = this.callbacks).dblclick === \"function\" ? _base1.dblclick(e, this) : void 0;\r\n    }\r\n    if (this.isClosed()) {\r\n      this.open();\r\n    }\r\n    this.addNewChild();\r\n    return typeof (_base2 = this.callbacks).dblclick === \"function\" ? _base2.dblclick(e, this) : void 0;\r\n  };\r\n\r\n  TreemaNode.prototype.onKeyDown = function(e) {\r\n    var _ref;\r\n    if (e.which === 27) {\r\n      this.onEscapePressed(e);\r\n    }\r\n    if (e.which === 9) {\r\n      this.onTabPressed(e);\r\n    }\r\n    if (e.which === 37) {\r\n      this.onLeftArrowPressed(e);\r\n    }\r\n    if (e.which === 38) {\r\n      this.onUpArrowPressed(e);\r\n    }\r\n    if (e.which === 39) {\r\n      this.onRightArrowPressed(e);\r\n    }\r\n    if (e.which === 40) {\r\n      this.onDownArrowPressed(e);\r\n    }\r\n    if (e.which === 13) {\r\n      this.onEnterPressed(e);\r\n    }\r\n    if (e.which === 78) {\r\n      this.onNPressed(e);\r\n    }\r\n    if (e.which === 32) {\r\n      this.onSpacePressed(e);\r\n    }\r\n    if (e.which === 84) {\r\n      this.onTPressed(e);\r\n    }\r\n    if (e.which === 70) {\r\n      this.onFPressed(e);\r\n    }\r\n    if (e.which === 90) {\r\n      this.onZPressed(e);\r\n    }\r\n    if (((_ref = e.which) === 8 || _ref === 46) && !e.heldDown) {\r\n      return this.onDeletePressed(e);\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.onLeftArrowPressed = function(e) {\r\n    if (this.inputFocused()) {\r\n      return;\r\n    }\r\n    this.navigateOut();\r\n    return e.preventDefault();\r\n  };\r\n\r\n  TreemaNode.prototype.onRightArrowPressed = function(e) {\r\n    if (this.inputFocused()) {\r\n      return;\r\n    }\r\n    this.navigateIn();\r\n    return e.preventDefault();\r\n  };\r\n\r\n  TreemaNode.prototype.onUpArrowPressed = function(e) {\r\n    if (this.inputFocused()) {\r\n      return;\r\n    }\r\n    this.navigateSelection(-1);\r\n    return e.preventDefault();\r\n  };\r\n\r\n  TreemaNode.prototype.onDownArrowPressed = function(e) {\r\n    if (this.inputFocused()) {\r\n      return;\r\n    }\r\n    this.navigateSelection(1);\r\n    return e.preventDefault();\r\n  };\r\n\r\n  TreemaNode.prototype.inputFocused = function() {\r\n    var _ref;\r\n    if (((_ref = document.activeElement.nodeName) === 'INPUT' || _ref === 'TEXTAREA' || _ref === 'SELECT') && !$(document.activeElement).hasClass('treema-clipboard')) {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.onSpacePressed = function() {};\r\n\r\n  TreemaNode.prototype.onTPressed = function() {};\r\n\r\n  TreemaNode.prototype.onFPressed = function() {};\r\n\r\n  TreemaNode.prototype.onDeletePressed = function(e) {\r\n    var editing;\r\n    editing = this.editingIsHappening();\r\n    if (editing && !$(e.target).val() && this.removeOnEmptyDelete) {\r\n      this.display();\r\n      this.select();\r\n      this.removeSelectedNodes();\r\n      e.preventDefault();\r\n    }\r\n    if (editing) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    return this.removeSelectedNodes();\r\n  };\r\n\r\n  TreemaNode.prototype.onEscapePressed = function() {\r\n    if (!this.isEditing()) {\r\n      return;\r\n    }\r\n    if (this.parent && (!this.integrated) && this.defaultData === void 0) {\r\n      return this.remove();\r\n    }\r\n    if (this.isEditing()) {\r\n      this.display();\r\n    }\r\n    if (!this.isRoot()) {\r\n      this.select();\r\n    }\r\n    return this.keepFocus();\r\n  };\r\n\r\n  TreemaNode.prototype.onEnterPressed = function(e) {\r\n    var offset;\r\n    offset = e.shiftKey ? -1 : 1;\r\n    if (offset === 1 && $(e.target).hasClass('treema-add-child')) {\r\n      return this.addNewChild();\r\n    }\r\n    return this.traverseWhileEditing(offset, true);\r\n  };\r\n\r\n  TreemaNode.prototype.onTabPressed = function(e) {\r\n    var offset;\r\n    offset = e.shiftKey ? -1 : 1;\r\n    if (this.hasMoreInputs(offset)) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    return this.traverseWhileEditing(offset, false);\r\n  };\r\n\r\n  TreemaNode.prototype.hasMoreInputs = function(offset) {\r\n    var input, inputs, passedFocusedEl, _i, _len;\r\n    inputs = this.getInputs().toArray();\r\n    if (offset < 0) {\r\n      inputs = inputs.reverse();\r\n    }\r\n    passedFocusedEl = false;\r\n    for (_i = 0, _len = inputs.length; _i < _len; _i++) {\r\n      input = inputs[_i];\r\n      if (input === document.activeElement) {\r\n        passedFocusedEl = true;\r\n        continue;\r\n      }\r\n      if (!passedFocusedEl) {\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  TreemaNode.prototype.onNPressed = function(e) {\r\n    var selected, success, target;\r\n    if (this.editingIsHappening()) {\r\n      return;\r\n    }\r\n    selected = this.getLastSelectedTreema();\r\n    target = (selected != null ? selected.collection : void 0) ? selected : selected != null ? selected.parent : void 0;\r\n    if (!target) {\r\n      return;\r\n    }\r\n    success = target.addNewChild();\r\n    if (success) {\r\n      this.deselectAll();\r\n    }\r\n    return e.preventDefault();\r\n  };\r\n\r\n  TreemaNode.prototype.onZPressed = function(e) {\r\n    if (e.ctrlKey || e.metaKey) {\r\n      if (e.shiftKey) {\r\n        return this.getRoot().redo();\r\n      } else {\r\n        return this.getRoot().undo();\r\n      }\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.traverseWhileEditing = function(offset, aggressive) {\r\n    var ctx, editing, selected, shouldRemove, targetEl, _ref;\r\n    shouldRemove = false;\r\n    selected = this.getLastSelectedTreema();\r\n    editing = this.isEditing();\r\n    if (!editing && (selected != null ? selected.canEdit() : void 0)) {\r\n      return selected.edit();\r\n    }\r\n    if (editing) {\r\n      shouldRemove = this.shouldTryToRemoveFromParent();\r\n      this.saveChanges(this.getValEl());\r\n      if (!shouldRemove) {\r\n        this.flushChanges();\r\n      }\r\n      if (!(aggressive || this.isValid())) {\r\n        this.refreshErrors();\r\n        return;\r\n      }\r\n      if (shouldRemove && ((_ref = $(this.$el[0].nextSibling)) != null ? _ref.hasClass('treema-add-child') : void 0) && offset === 1) {\r\n        offset = 2;\r\n      }\r\n      this.endExistingEdits();\r\n      this.select();\r\n    }\r\n    ctx = this.traversalContext(offset);\r\n    if (!(ctx != null ? ctx.origin : void 0)) {\r\n      return;\r\n    }\r\n    selected = $(ctx.origin).data('instance');\r\n    if (offset > 0 && aggressive && selected && selected.collection && selected.isClosed()) {\r\n      return selected.open();\r\n    }\r\n    targetEl = offset > 0 ? ctx.next : ctx.prev;\r\n    if (!targetEl) {\r\n      targetEl = offset > 0 ? ctx.first : ctx.last;\r\n    }\r\n    this.selectOrActivateElement(targetEl);\r\n    if (shouldRemove) {\r\n      return this.remove();\r\n    } else {\r\n      return this.refreshErrors();\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.selectOrActivateElement = function(el) {\r\n    var treema;\r\n    el = $(el);\r\n    treema = el.data('instance');\r\n    if (treema) {\r\n      if (treema.canEdit()) {\r\n        return treema.edit();\r\n      } else {\r\n        return treema.select();\r\n      }\r\n    }\r\n    this.deselectAll();\r\n    return el.focus();\r\n  };\r\n\r\n  TreemaNode.prototype.navigateSelection = function(offset) {\r\n    var ctx, targetTreema;\r\n    ctx = this.navigationContext();\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n    if (!ctx.origin) {\r\n      targetTreema = offset > 0 ? ctx.first : ctx.last;\r\n      return targetTreema.select();\r\n    }\r\n    targetTreema = offset > 0 ? ctx.next : ctx.prev;\r\n    if (!targetTreema) {\r\n      targetTreema = offset > 0 ? ctx.first : ctx.last;\r\n    }\r\n    return targetTreema != null ? targetTreema.select() : void 0;\r\n  };\r\n\r\n  TreemaNode.prototype.navigateOut = function() {\r\n    var selected;\r\n    selected = this.getLastSelectedTreema();\r\n    if (!selected) {\r\n      return;\r\n    }\r\n    if (selected.isOpen()) {\r\n      return selected.close();\r\n    }\r\n    if ((!selected.parent) || selected.parent.isRoot()) {\r\n      return;\r\n    }\r\n    return selected.parent.select();\r\n  };\r\n\r\n  TreemaNode.prototype.navigateIn = function() {\r\n    var treema, _i, _len, _ref, _results;\r\n    _ref = this.getSelectedTreemas();\r\n    _results = [];\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      treema = _ref[_i];\r\n      if (!treema.collection) {\r\n        continue;\r\n      }\r\n      if (treema.isClosed()) {\r\n        _results.push(treema.open());\r\n      } else {\r\n        _results.push(void 0);\r\n      }\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.traversalContext = function(offset) {\r\n    var list, origin, _ref;\r\n    list = this.getNavigableElements(offset);\r\n    origin = (_ref = this.getLastSelectedTreema()) != null ? _ref.$el[0] : void 0;\r\n    if (!origin) {\r\n      origin = this.getRootEl().find('.treema-add-child:focus')[0];\r\n    }\r\n    if (!origin) {\r\n      origin = this.getRootEl().find('.treema-new-prop')[0];\r\n    }\r\n    return this.wrapContext(list, origin, offset);\r\n  };\r\n\r\n  TreemaNode.prototype.navigationContext = function() {\r\n    var list, origin;\r\n    list = this.getFilterVisibleTreemas();\r\n    origin = this.getLastSelectedTreema();\r\n    return this.wrapContext(list, origin);\r\n  };\r\n\r\n  TreemaNode.prototype.wrapContext = function(list, origin, offset) {\r\n    var c, originIndex;\r\n    if (offset == null) {\r\n      offset = 1;\r\n    }\r\n    if (!list.length) {\r\n      return;\r\n    }\r\n    c = {\r\n      first: list[0],\r\n      last: list[list.length - 1],\r\n      origin: origin\r\n    };\r\n    if (origin) {\r\n      offset = Math.abs(offset);\r\n      originIndex = list.indexOf(origin);\r\n      c.next = list[originIndex + offset];\r\n      c.prev = list[originIndex - offset];\r\n    }\r\n    return c;\r\n  };\r\n\r\n  TreemaNode.prototype.canEdit = function() {\r\n    var _ref;\r\n    if (this.workingSchema.readOnly || ((_ref = this.parent) != null ? _ref.schema.readOnly : void 0)) {\r\n      return false;\r\n    }\r\n    if (this.settings.readOnly) {\r\n      return false;\r\n    }\r\n    if (!this.editable) {\r\n      return false;\r\n    }\r\n    if (!this.directlyEditable) {\r\n      return false;\r\n    }\r\n    if (this.collection && this.isOpen()) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  TreemaNode.prototype.display = function() {\r\n    return this.toggleEdit('treema-display');\r\n  };\r\n\r\n  TreemaNode.prototype.edit = function(options) {\r\n    if (options == null) {\r\n      options = {};\r\n    }\r\n    this.toggleEdit('treema-edit');\r\n    if ((options.offset != null) && options.offset < 0) {\r\n      return this.focusLastInput();\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.toggleEdit = function(toClass) {\r\n    var valEl;\r\n    if (toClass == null) {\r\n      toClass = null;\r\n    }\r\n    if (!this.editable) {\r\n      return;\r\n    }\r\n    valEl = this.getValEl();\r\n    if (toClass && valEl.hasClass(toClass)) {\r\n      return;\r\n    }\r\n    toClass = toClass || (valEl.hasClass('treema-display') ? 'treema-edit' : 'treema-display');\r\n    if (toClass === 'treema-edit') {\r\n      this.endExistingEdits();\r\n    }\r\n    valEl.removeClass('treema-display').removeClass('treema-edit').addClass(toClass);\r\n    valEl.empty();\r\n    if (this.isDisplaying()) {\r\n      this.buildValueForDisplay(valEl, this.getData());\r\n    }\r\n    if (this.isEditing()) {\r\n      this.buildValueForEditing(valEl, this.getData());\r\n      return this.deselectAll();\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.endExistingEdits = function() {\r\n    var editing, elem, treema, _i, _len, _results;\r\n    editing = this.getRootEl().find('.treema-edit').closest('.treema-node');\r\n    _results = [];\r\n    for (_i = 0, _len = editing.length; _i < _len; _i++) {\r\n      elem = editing[_i];\r\n      treema = $(elem).data('instance');\r\n      treema.saveChanges(treema.getValEl());\r\n      treema.display();\r\n      _results.push(this.markAsChanged());\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.flushChanges = function() {\r\n    var parent, _results;\r\n    if (this.parent && (!this.integrated) && this.data !== void 0) {\r\n      this.parent.integrateChildTreema(this);\r\n    }\r\n    this.getRoot().cachedErrors = null;\r\n    this.markAsChanged();\r\n    if (!this.parent) {\r\n      return this.refreshErrors();\r\n    }\r\n    this.updateDefaultClass();\r\n    if (this.data !== void 0) {\r\n      this.parent.data[this.keyForParent] = this.data;\r\n    }\r\n    this.parent.refreshErrors();\r\n    parent = this.parent;\r\n    _results = [];\r\n    while (parent) {\r\n      parent.buildValueForDisplay(parent.getValEl().empty(), parent.getData());\r\n      _results.push(parent = parent.parent);\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.focusLastInput = function() {\r\n    var inputs, last;\r\n    inputs = this.getInputs();\r\n    last = inputs[inputs.length - 1];\r\n    return $(last).focus().select();\r\n  };\r\n\r\n  TreemaNode.prototype.removeSelectedNodes = function(nodes) {\r\n    var data, nextSibling, parentPaths, paths, prevSibling, selected, toSelect, treema, _i, _j, _len, _len1, _ref;\r\n    if (nodes == null) {\r\n      nodes = [];\r\n    }\r\n    selected = nodes;\r\n    if (!nodes.length) {\r\n      selected = this.getSelectedTreemas();\r\n    }\r\n    toSelect = null;\r\n    if (selected.length === 1) {\r\n      nextSibling = selected[0].$el.next('.treema-node').data('instance');\r\n      prevSibling = selected[0].$el.prev('.treema-node').data('instance');\r\n      toSelect = nextSibling || prevSibling || selected[0].parent;\r\n    }\r\n    data = [];\r\n    paths = [];\r\n    parentPaths = [];\r\n    this.getRoot().hush = true;\r\n    for (_i = 0, _len = selected.length; _i < _len; _i++) {\r\n      treema = selected[_i];\r\n      data.push(treema.data);\r\n      paths.push(treema.getPath());\r\n      parentPaths.push((_ref = treema.parent) != null ? _ref.getPath() : void 0);\r\n    }\r\n    this.addTrackedAction({\r\n      'data': data,\r\n      'path': paths,\r\n      'parentPath': parentPaths,\r\n      'action': 'delete'\r\n    });\r\n    for (_j = 0, _len1 = selected.length; _j < _len1; _j++) {\r\n      treema = selected[_j];\r\n      treema.remove();\r\n    }\r\n    if (toSelect && !this.getSelectedTreemas().length) {\r\n      toSelect.select();\r\n    }\r\n    this.getRoot().hush = false;\r\n    return this.broadcastChanges();\r\n  };\r\n\r\n  TreemaNode.prototype.remove = function() {\r\n    var newNode, options, readOnly, required, tempError, _ref, _ref1;\r\n    required = this.parent && (this.parent.schema.required != null) && (_ref = this.keyForParent, __indexOf.call(this.parent.schema.required, _ref) >= 0);\r\n    if (required) {\r\n      tempError = this.createTemporaryError('required');\r\n      this.$el.prepend(tempError);\r\n      return false;\r\n    }\r\n    readOnly = this.workingSchema.readOnly || ((_ref1 = this.parent) != null ? _ref1.schema.readOnly : void 0);\r\n    if (readOnly) {\r\n      tempError = this.createTemporaryError('read only');\r\n      this.$el.prepend(tempError);\r\n      return false;\r\n    }\r\n    if (this.defaultData !== void 0) {\r\n      options = $.extend({}, this.settings, {\r\n        defaultData: this.defaultData,\r\n        schema: this.workingSchema\r\n      });\r\n      newNode = TreemaNode.make(null, options, this.parent, this.keyForParent);\r\n      if (this.parent) {\r\n        this.parent.segregateChildTreema(this);\r\n      }\r\n      this.replaceNode(newNode);\r\n      this.destroy();\r\n      return true;\r\n    }\r\n    this.$el.remove();\r\n    if (document.activeElement === $('body')[0]) {\r\n      this.keepFocus();\r\n    }\r\n    if (this.parent) {\r\n      this.parent.segregateChildTreema(this);\r\n    }\r\n    this.destroy();\r\n    return true;\r\n  };\r\n\r\n  TreemaNode.prototype.updateDefaultClass = function() {\r\n    var child, key, _ref, _results;\r\n    this.$el.removeClass('treema-default-stub');\r\n    if (this.isDefaultStub() && !this.parent.isDefaultStub()) {\r\n      this.$el.addClass('treema-default-stub');\r\n    }\r\n    _ref = this.childrenTreemas;\r\n    _results = [];\r\n    for (key in _ref) {\r\n      child = _ref[key];\r\n      _results.push(child.updateDefaultClass());\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.toggleOpen = function() {\r\n    if (this.isClosed()) {\r\n      this.open();\r\n    } else {\r\n      this.close();\r\n    }\r\n    return this;\r\n  };\r\n\r\n  TreemaNode.prototype.open = function(depth) {\r\n    var child, childIndex, childNode, childrenContainer, treema, _i, _len, _ref, _ref1, _ref2, _results;\r\n    if (depth == null) {\r\n      depth = 1;\r\n    }\r\n    if (this.isClosed()) {\r\n      childrenContainer = this.$el.find('.treema-children').detach();\r\n      childrenContainer.empty();\r\n      this.childrenTreemas = {};\r\n      _ref = this.getChildren();\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        if (child.schema.format === 'hidden') {\r\n          continue;\r\n        }\r\n        treema = TreemaNode.make(null, {\r\n          schema: child.schema,\r\n          data: child.value,\r\n          defaultData: child.defaultData\r\n        }, this, child.key);\r\n        if (!(treema.data === void 0 || (this.data === void 0 && !this.integrated))) {\r\n          this.integrateChildTreema(treema);\r\n        }\r\n        this.childrenTreemas[treema.keyForParent] = treema;\r\n        childNode = this.createChildNode(treema);\r\n        childrenContainer.append(childNode);\r\n      }\r\n      this.$el.append(childrenContainer).removeClass('treema-closed').addClass('treema-open');\r\n      childrenContainer.append($(this.addChildTemplate));\r\n      if (this.ordered && childrenContainer.sortable && !this.settings.noSortable) {\r\n        if (typeof childrenContainer.sortable === \"function\") {\r\n          childrenContainer.sortable({\r\n            deactivate: this.orderDataFromUI,\r\n            forcePlaceholderSize: true,\r\n            placeholder: 'placeholder'\r\n          });\r\n        }\r\n      }\r\n      this.refreshErrors();\r\n    }\r\n    depth -= 1;\r\n    if (depth) {\r\n      _ref2 = (_ref1 = this.childrenTreemas) != null ? _ref1 : {};\r\n      _results = [];\r\n      for (childIndex in _ref2) {\r\n        child = _ref2[childIndex];\r\n        _results.push(child.open(depth));\r\n      }\r\n      return _results;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.orderDataFromUI = function() {\r\n    var child, children, index, treema, _i, _len;\r\n    children = this.$el.find('> .treema-children > .treema-node');\r\n    index = 0;\r\n    this.childrenTreemas = {};\r\n    this.data = $.isArray(this.data) ? [] : {};\r\n    for (_i = 0, _len = children.length; _i < _len; _i++) {\r\n      child = children[_i];\r\n      treema = $(child).data('instance');\r\n      if (!(treema != null ? treema.data : void 0)) {\r\n        continue;\r\n      }\r\n      if ($.isArray(this.data)) {\r\n        treema.keyForParent = index;\r\n        this.childrenTreemas[index] = treema;\r\n        this.data[index] = treema.data;\r\n      } else {\r\n        this.childrenTreemas[treema.keyForParent] = treema;\r\n        this.data[treema.keyForParent] = treema.data;\r\n      }\r\n      index += 1;\r\n    }\r\n    this.flushChanges();\r\n    return this.broadcastChanges();\r\n  };\r\n\r\n  TreemaNode.prototype.close = function(saveChildData) {\r\n    var child, key, treema, _ref;\r\n    if (saveChildData == null) {\r\n      saveChildData = true;\r\n    }\r\n    if (!this.isOpen()) {\r\n      return;\r\n    }\r\n    if (saveChildData) {\r\n      _ref = this.childrenTreemas;\r\n      for (key in _ref) {\r\n        treema = _ref[key];\r\n        if (treema.integrated) {\r\n          this.data[key] = treema.data;\r\n        }\r\n      }\r\n    }\r\n    this.$el.find('.treema-children').empty();\r\n    this.$el.addClass('treema-closed').removeClass('treema-open');\r\n    for (child in this.childrenTreemas) {\r\n      this.childrenTreemas[child].destroy();\r\n    }\r\n    this.childrenTreemas = null;\r\n    this.refreshErrors();\r\n    return this.buildValueForDisplay(this.getValEl().empty(), this.getData());\r\n  };\r\n\r\n  TreemaNode.prototype.select = function() {\r\n    var excludeSelf, numSelected;\r\n    numSelected = this.getSelectedTreemas().length;\r\n    excludeSelf = numSelected === 1;\r\n    this.deselectAll(excludeSelf);\r\n    this.toggleSelect();\r\n    this.keepFocus();\r\n    TreemaNode.didSelect = true;\r\n    return TreemaNode.lastTreemaWithFocus = this.getRoot();\r\n  };\r\n\r\n  TreemaNode.prototype.deselectAll = function(excludeSelf) {\r\n    var treema, _i, _len, _ref;\r\n    if (excludeSelf == null) {\r\n      excludeSelf = false;\r\n    }\r\n    _ref = this.getSelectedTreemas();\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      treema = _ref[_i];\r\n      if (excludeSelf && treema === this) {\r\n        continue;\r\n      }\r\n      treema.$el.removeClass('treema-selected');\r\n    }\r\n    this.clearLastSelected();\r\n    return TreemaNode.didSelect = true;\r\n  };\r\n\r\n  TreemaNode.prototype.toggleSelect = function() {\r\n    this.clearLastSelected();\r\n    if (!this.isRoot()) {\r\n      this.$el.toggleClass('treema-selected');\r\n    }\r\n    if (this.isSelected()) {\r\n      this.setLastSelectedTreema(this);\r\n    }\r\n    return TreemaNode.didSelect = true;\r\n  };\r\n\r\n  TreemaNode.prototype.clearLastSelected = function() {\r\n    var _ref;\r\n    if ((_ref = this.getLastSelectedTreema()) != null) {\r\n      _ref.$el.removeClass('treema-last-selected');\r\n    }\r\n    return this.setLastSelectedTreema(null);\r\n  };\r\n\r\n  TreemaNode.prototype.shiftSelect = function() {\r\n    var allNodes, endNodes, lastSelected, node, started, _i, _len;\r\n    lastSelected = this.getRootEl().find('.treema-last-selected');\r\n    this.select();\r\n    if (!lastSelected.length) {\r\n      return;\r\n    }\r\n    this.deselectAll();\r\n    allNodes = this.getRootEl().find('.treema-node');\r\n    endNodes = [this, lastSelected.data('instance')];\r\n    started = false;\r\n    for (_i = 0, _len = allNodes.length; _i < _len; _i++) {\r\n      node = allNodes[_i];\r\n      node = $(node).data('instance');\r\n      if (!started) {\r\n        if (__indexOf.call(endNodes, node) >= 0) {\r\n          node.$el.addClass('treema-selected');\r\n          started = true;\r\n        }\r\n        continue;\r\n      }\r\n      node.$el.addClass('treema-selected');\r\n      if (started && (__indexOf.call(endNodes, node) >= 0)) {\r\n        break;\r\n      }\r\n    }\r\n    lastSelected.removeClass('treema-last-selected');\r\n    this.$el.addClass('treema-last-selected');\r\n    return TreemaNode.didSelect = true;\r\n  };\r\n\r\n  TreemaNode.prototype.addTrackedAction = function(action) {\r\n    var root;\r\n    root = this.getRoot();\r\n    if (root.trackingDisabled) {\r\n      return;\r\n    }\r\n    root.trackedActions.splice(root.currentStateIndex, root.trackedActions.length - root.currentStateIndex);\r\n    root.trackedActions.push(action);\r\n    return root.currentStateIndex++;\r\n  };\r\n\r\n  TreemaNode.prototype.disableTracking = function() {\r\n    return this.getRoot().trackingDisabled = true;\r\n  };\r\n\r\n  TreemaNode.prototype.enableTracking = function() {\r\n    return this.getRoot().trackingDisabled = false;\r\n  };\r\n\r\n  TreemaNode.prototype.canUndo = function() {\r\n    return this.getCurrentStateIndex() !== 0;\r\n  };\r\n\r\n  TreemaNode.prototype.undo = function() {\r\n    var currentStateIndex, deleteIndex, i, parentData, parentPath, restoreChange, root, trackedActions, treemaData, treemaPath, _i, _len, _ref;\r\n    if (!this.canUndo()) {\r\n      return;\r\n    }\r\n    trackedActions = this.getTrackedActions();\r\n    currentStateIndex = this.getCurrentStateIndex();\r\n    root = this.getRoot();\r\n    this.disableTracking();\r\n    restoreChange = trackedActions[currentStateIndex - 1];\r\n    switch (restoreChange.action) {\r\n      case 'delete':\r\n        if (!$.isArray(restoreChange.path)) {\r\n          restoreChange.data = [restoreChange.data];\r\n          restoreChange.path = [restoreChange.path];\r\n          restoreChange.parentPath = [restoreChange.parentPath];\r\n        }\r\n        _ref = restoreChange.data;\r\n        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\r\n          treemaData = _ref[i];\r\n          parentPath = restoreChange.parentPath[i];\r\n          treemaPath = restoreChange.path[i];\r\n          parentData = this.get(parentPath);\r\n          switch ($.isArray(parentData)) {\r\n            case false:\r\n              this.set(treemaPath, treemaData);\r\n              break;\r\n            case true:\r\n              deleteIndex = parseInt(treemaPath.substring(treemaPath.lastIndexOf('/') + 1));\r\n              if (deleteIndex < parentData.length) {\r\n                parentData.splice(deleteIndex, 0, treemaData);\r\n                this.set(parentPath, parentData);\r\n              } else {\r\n                this.insert(parentPath, treemaData);\r\n              }\r\n          }\r\n        }\r\n        break;\r\n      case 'edit':\r\n        if (restoreChange.oldData === void 0) {\r\n          this[\"delete\"](restoreChange.path);\r\n        } else {\r\n          this.set(restoreChange.path, restoreChange.oldData);\r\n        }\r\n        break;\r\n      case 'replace':\r\n        restoreChange.newNode.replaceNode(restoreChange.oldNode);\r\n        this.set(restoreChange.path, restoreChange.oldNode.data);\r\n        break;\r\n      case 'insert':\r\n        this[\"delete\"](restoreChange.path);\r\n    }\r\n    root.currentStateIndex--;\r\n    return this.enableTracking();\r\n  };\r\n\r\n  TreemaNode.prototype.canRedo = function() {\r\n    return this.getCurrentStateIndex() !== this.getTrackedActions().length;\r\n  };\r\n\r\n  TreemaNode.prototype.redo = function() {\r\n    var currentStateIndex, parentData, path, restoreChange, root, trackedActions, _i, _len, _ref;\r\n    if (!this.canRedo()) {\r\n      return;\r\n    }\r\n    trackedActions = this.getTrackedActions();\r\n    currentStateIndex = this.getCurrentStateIndex();\r\n    root = this.getRoot();\r\n    this.disableTracking();\r\n    restoreChange = trackedActions[currentStateIndex];\r\n    switch (restoreChange.action) {\r\n      case 'delete':\r\n        if (!$.isArray(restoreChange.path)) {\r\n          restoreChange.path = [restoreChange.path];\r\n        }\r\n        _ref = restoreChange.path;\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          path = _ref[_i];\r\n          this[\"delete\"](path);\r\n        }\r\n        break;\r\n      case 'edit':\r\n        this.set(restoreChange.path, restoreChange.newData);\r\n        break;\r\n      case 'replace':\r\n        restoreChange.oldNode.replaceNode(restoreChange.newNode);\r\n        this.set(restoreChange.path, restoreChange.newNode.data);\r\n        break;\r\n      case 'insert':\r\n        parentData = this.get(restoreChange.parentPath);\r\n        switch ($.isArray(parentData)) {\r\n          case true:\r\n            this.insert(restoreChange.parentPath, restoreChange.data);\r\n            break;\r\n          case false:\r\n            this.set(restoreChange.path, restoreChange.data);\r\n        }\r\n    }\r\n    root.currentStateIndex++;\r\n    return this.enableTracking();\r\n  };\r\n\r\n  TreemaNode.prototype.getUndoDescription = function() {\r\n    var currentStateIndex, trackedActions;\r\n    if (!this.canUndo()) {\r\n      return '';\r\n    }\r\n    trackedActions = this.getTrackedActions();\r\n    currentStateIndex = this.getCurrentStateIndex();\r\n    return this.getTrackedActionDescription(trackedActions[currentStateIndex - 1]);\r\n  };\r\n\r\n  TreemaNode.prototype.getRedoDescription = function() {\r\n    var currentStateIndex, trackedActions;\r\n    if (!this.canRedo()) {\r\n      return '';\r\n    }\r\n    trackedActions = this.getTrackedActions();\r\n    currentStateIndex = this.getCurrentStateIndex();\r\n    return this.getTrackedActionDescription(trackedActions[currentStateIndex]);\r\n  };\r\n\r\n  TreemaNode.prototype.getTrackedActionDescription = function(trackedAction) {\r\n    var path, trackedActionDescription;\r\n    switch (trackedAction.action) {\r\n      case 'insert':\r\n        trackedActionDescription = 'Add New ' + this.nodeDescription;\r\n        break;\r\n      case 'delete':\r\n        trackedActionDescription = 'Delete ' + this.nodeDescription;\r\n        break;\r\n      case 'edit':\r\n        path = trackedAction.path.split('/');\r\n        if (path[path.length - 1] === 'pos') {\r\n          trackedActionDescription = 'Move ' + this.nodeDescription;\r\n        } else {\r\n          trackedActionDescription = 'Edit ' + this.nodeDescription;\r\n        }\r\n        break;\r\n      default:\r\n        trackedActionDescription = '';\r\n    }\r\n    return trackedActionDescription;\r\n  };\r\n\r\n  TreemaNode.prototype.getTrackedActions = function() {\r\n    return this.getRoot().trackedActions;\r\n  };\r\n\r\n  TreemaNode.prototype.getCurrentStateIndex = function() {\r\n    return this.getRoot().currentStateIndex;\r\n  };\r\n\r\n  TreemaNode.prototype.onSelectSchema = function(e) {\r\n    var index, newNode, settings, workingSchema;\r\n    index = parseInt($(e.target).val());\r\n    workingSchema = this.workingSchemas[index];\r\n    settings = $.extend(true, {}, this.settings);\r\n    settings = $.extend(settings, {\r\n      workingSchemas: this.workingSchemas,\r\n      workingSchema: workingSchema,\r\n      data: this.data,\r\n      defaultData: this.defaultData,\r\n      schema: this.schema\r\n    });\r\n    newNode = TreemaNode.make(null, settings, this.parent, this.keyForParent);\r\n    return this.replaceNode(newNode);\r\n  };\r\n\r\n  TreemaNode.prototype.onSelectType = function(e) {\r\n    var newNode, newType, settings;\r\n    newType = $(e.target).val();\r\n    settings = $.extend(true, {}, this.settings, {\r\n      workingSchemas: this.workingSchemas,\r\n      workingSchema: this.workingSchema,\r\n      type: newType,\r\n      data: this.data,\r\n      defaultData: this.defaultData,\r\n      schema: this.schema\r\n    });\r\n    if ($.type(this.data) !== newType) {\r\n      settings.data = TreemaNode.defaultForType(newType);\r\n    }\r\n    newNode = TreemaNode.make(null, settings, this.parent, this.keyForParent);\r\n    return this.replaceNode(newNode);\r\n  };\r\n\r\n  TreemaNode.prototype.replaceNode = function(newNode) {\r\n    newNode.tv4 = this.tv4;\r\n    if (this.keyForParent != null) {\r\n      newNode.keyForParent = this.keyForParent;\r\n    }\r\n    if (this.parent) {\r\n      this.parent.childrenTreemas[this.keyForParent] = newNode;\r\n    }\r\n    this.parent.createChildNode(newNode);\r\n    this.$el.replaceWith(newNode.$el);\r\n    newNode.flushChanges();\r\n    return this.addTrackedAction({\r\n      'oldNode': this,\r\n      'newNode': newNode,\r\n      'path': this.getPath(),\r\n      'action': 'replace'\r\n    });\r\n  };\r\n\r\n  TreemaNode.prototype.integrateChildTreema = function(treema) {\r\n    var newData;\r\n    if (this.parent && !this.integrated) {\r\n      this.data = $.isArray(this.defaultData) ? [] : {};\r\n      this.parent.integrateChildTreema(this);\r\n    } else {\r\n      treema.updateDefaultClass();\r\n    }\r\n    newData = this.data[treema.keyForParent] !== treema.data;\r\n    treema.integrated = true;\r\n    this.childrenTreemas[treema.keyForParent] = treema;\r\n    this.data[treema.keyForParent] = treema.data;\r\n    if (newData) {\r\n      if (this.ordered) {\r\n        this.orderDataFromUI();\r\n      }\r\n      this.refreshErrors();\r\n      this.updateMyAddButton();\r\n      this.markAsChanged();\r\n      this.buildValueForDisplay(this.getValEl().empty(), this.getData());\r\n      this.broadcastChanges();\r\n    }\r\n    return treema;\r\n  };\r\n\r\n  TreemaNode.prototype.segregateChildTreema = function(treema) {\r\n    treema.integrated = false;\r\n    delete this.childrenTreemas[treema.keyForParent];\r\n    delete this.data[treema.keyForParent];\r\n    if (this.ordered) {\r\n      this.orderDataFromUI();\r\n    }\r\n    this.refreshErrors();\r\n    this.updateMyAddButton();\r\n    this.markAsChanged();\r\n    this.buildValueForDisplay(this.getValEl().empty(), this.getData());\r\n    this.broadcastChanges();\r\n    return treema;\r\n  };\r\n\r\n  TreemaNode.prototype.createChildNode = function(treema) {\r\n    var childNode, defnEl, keyEl, name, required, row, suffix, _ref;\r\n    childNode = treema.build();\r\n    row = childNode.find('.treema-row');\r\n    if (this.collection && this.keyed) {\r\n      name = treema.schema.title || treema.keyForParent;\r\n      required = this.workingSchema.required || [];\r\n      suffix = ': ';\r\n      if (_ref = treema.keyForParent, __indexOf.call(required, _ref) >= 0) {\r\n        suffix = '*' + suffix;\r\n      }\r\n      keyEl = $(this.keyTemplate).text(name + suffix);\r\n      row.prepend(keyEl);\r\n      defnEl = $('<span></span>').addClass('treema-description').text(treema.schema.description || '');\r\n      row.append(defnEl);\r\n    }\r\n    if (treema.collection) {\r\n      childNode.prepend($(this.toggleTemplate));\r\n    }\r\n    return childNode;\r\n  };\r\n\r\n  TreemaNode.prototype.refreshErrors = function() {\r\n    this.clearErrors();\r\n    return this.showErrors();\r\n  };\r\n\r\n  TreemaNode.prototype.showErrors = function() {\r\n    var childErrors, deepestTreema, e, error, erroredTreemas, errors, message, messages, ownErrors, path, subpath, treema, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;\r\n    if (this.parent && !this.integrated) {\r\n      return;\r\n    }\r\n    if (this.settings.skipValidation) {\r\n      return;\r\n    }\r\n    errors = this.getErrors();\r\n    erroredTreemas = [];\r\n    for (_i = 0, _len = errors.length; _i < _len; _i++) {\r\n      error = errors[_i];\r\n      path = ((_ref = error.subDataPath) != null ? _ref : error.dataPath).slice(1);\r\n      path = path ? path.split('/') : [];\r\n      deepestTreema = this;\r\n      for (_j = 0, _len1 = path.length; _j < _len1; _j++) {\r\n        subpath = path[_j];\r\n        if (!deepestTreema.childrenTreemas) {\r\n          error.forChild = true;\r\n          break;\r\n        }\r\n        if (deepestTreema.ordered) {\r\n          subpath = parseInt(subpath);\r\n        }\r\n        deepestTreema = deepestTreema.childrenTreemas[subpath];\r\n        if (!deepestTreema) {\r\n          console.error('could not find treema down path', path, this, \"so couldn't show error\", error);\r\n          return;\r\n        }\r\n      }\r\n      if (!(deepestTreema._errors && __indexOf.call(erroredTreemas, deepestTreema) >= 0)) {\r\n        deepestTreema._errors = [];\r\n      }\r\n      deepestTreema._errors.push(error);\r\n      erroredTreemas.push(deepestTreema);\r\n    }\r\n    _ref1 = $.unique(erroredTreemas);\r\n    _results = [];\r\n    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\r\n      treema = _ref1[_k];\r\n      childErrors = (function() {\r\n        var _l, _len3, _ref2, _results1;\r\n        _ref2 = treema._errors;\r\n        _results1 = [];\r\n        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {\r\n          e = _ref2[_l];\r\n          if (e.forChild) {\r\n            _results1.push(e);\r\n          }\r\n        }\r\n        return _results1;\r\n      })();\r\n      ownErrors = (function() {\r\n        var _l, _len3, _ref2, _results1;\r\n        _ref2 = treema._errors;\r\n        _results1 = [];\r\n        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {\r\n          e = _ref2[_l];\r\n          if (!e.forChild) {\r\n            _results1.push(e);\r\n          }\r\n        }\r\n        return _results1;\r\n      })();\r\n      messages = (function() {\r\n        var _l, _len3, _results1;\r\n        _results1 = [];\r\n        for (_l = 0, _len3 = ownErrors.length; _l < _len3; _l++) {\r\n          e = ownErrors[_l];\r\n          _results1.push(e.message);\r\n        }\r\n        return _results1;\r\n      })();\r\n      if (childErrors.length > 0) {\r\n        message = \"[\" + childErrors.length + \"] error\";\r\n        if (childErrors.length > 1) {\r\n          message = message + 's';\r\n        }\r\n        messages.push(message);\r\n      }\r\n      _results.push(treema.showError(messages.join('<br />')));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.showError = function(message) {\r\n    this.$el.prepend($(this.errorTemplate));\r\n    this.$el.find('> .treema-error').html(message).show();\r\n    return this.$el.addClass('treema-has-error');\r\n  };\r\n\r\n  TreemaNode.prototype.clearErrors = function() {\r\n    this.$el.find('.treema-error').remove();\r\n    this.$el.find('.treema-has-error').removeClass('treema-has-error');\r\n    return this.$el.removeClass('treema-has-error');\r\n  };\r\n\r\n  TreemaNode.prototype.createTemporaryError = function(message, attachFunction) {\r\n    if (attachFunction == null) {\r\n      attachFunction = null;\r\n    }\r\n    if (!attachFunction) {\r\n      attachFunction = this.$el.prepend;\r\n    }\r\n    this.clearTemporaryErrors();\r\n    return $(this.tempErrorTemplate).text(message).delay(3000).fadeOut(1000, function() {\r\n      return $(this).remove();\r\n    });\r\n  };\r\n\r\n  TreemaNode.prototype.clearTemporaryErrors = function() {\r\n    return this.getRootEl().find('.treema-temp-error').remove();\r\n  };\r\n\r\n  TreemaNode.prototype.get = function(path) {\r\n    var data, seg, _i, _len;\r\n    if (path == null) {\r\n      path = '/';\r\n    }\r\n    path = this.normalizePath(path);\r\n    if (path.length === 0) {\r\n      return this.data;\r\n    }\r\n    if (this.childrenTreemas != null) {\r\n      return this.digDeeper(path, 'get', void 0, []);\r\n    }\r\n    data = this.data;\r\n    for (_i = 0, _len = path.length; _i < _len; _i++) {\r\n      seg = path[_i];\r\n      data = data[this.normalizeKey(seg, data)];\r\n      if (data === void 0) {\r\n        break;\r\n      }\r\n    }\r\n    return data;\r\n  };\r\n\r\n  TreemaNode.prototype.set = function(path, newData) {\r\n    var oldData;\r\n    oldData = this.get(path);\r\n    if (this.setRecursive(path, newData)) {\r\n      if (JSON.stringify(newData) !== JSON.stringify(oldData)) {\r\n        this.addTrackedAction({\r\n          'oldData': oldData,\r\n          'newData': newData,\r\n          'path': path,\r\n          'action': 'edit'\r\n        });\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.setRecursive = function(path, newData) {\r\n    var data, i, nodePath, oldData, result, seg, _i, _len;\r\n    path = this.normalizePath(path);\r\n    if (path.length === 0) {\r\n      this.data = newData;\r\n      this.refreshDisplay();\r\n      return true;\r\n    }\r\n    if (this.childrenTreemas != null) {\r\n      result = this.digDeeper(path, 'setRecursive', false, [newData]);\r\n      if (result === false && path.length === 1 && $.isPlainObject(this.data)) {\r\n        this.data[path[0]] = newData;\r\n        this.refreshDisplay();\r\n        return true;\r\n      }\r\n      return result;\r\n    }\r\n    data = this.data;\r\n    nodePath = this.getPath();\r\n    for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {\r\n      seg = path[i];\r\n      seg = this.normalizeKey(seg, data);\r\n      if (path.length === i + 1) {\r\n        oldData = data[seg];\r\n        data[seg] = newData;\r\n        this.refreshDisplay();\r\n        return true;\r\n      } else {\r\n        data = data[seg];\r\n        if (data === void 0) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype[\"delete\"] = function(path) {\r\n    var oldData, parentPath;\r\n    oldData = this.get(path);\r\n    if (this.deleteRecursive(path)) {\r\n      parentPath = path.substring(0, path.lastIndexOf('/'));\r\n      this.addTrackedAction({\r\n        'data': oldData,\r\n        'path': path,\r\n        'parentPath': parentPath,\r\n        'action': 'delete'\r\n      });\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.deleteRecursive = function(path) {\r\n    var data, i, parentPath, seg, _i, _len;\r\n    path = this.normalizePath(path);\r\n    if (path.length === 0) {\r\n      return this.remove();\r\n    }\r\n    if (this.childrenTreemas != null) {\r\n      return this.digDeeper(path, 'deleteRecursive', false, []);\r\n    }\r\n    data = this.data;\r\n    parentPath = this.getPath();\r\n    for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {\r\n      seg = path[i];\r\n      seg = this.normalizeKey(seg, data);\r\n      if (path.length === i + 1) {\r\n        if ($.isArray(data)) {\r\n          data.splice(seg, 1);\r\n        } else {\r\n          delete data[seg];\r\n        }\r\n        this.refreshDisplay();\r\n        return true;\r\n      } else {\r\n        data = data[seg];\r\n        if (data === void 0) {\r\n          return false;\r\n        }\r\n      }\r\n      parentPath += '/' + seg;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.insert = function(path, newData) {\r\n    var childPath, insertPos, key, parentData, parentPath, val;\r\n    if (this.insertRecursive(path, newData)) {\r\n      parentPath = path;\r\n      parentData = this.get(parentPath);\r\n      childPath = parentPath;\r\n      if (parentPath !== '/') {\r\n        childPath += '/';\r\n      }\r\n      if (parentData[parentData.length - 1] !== newData) {\r\n        for (key in parentData) {\r\n          val = parentData[key];\r\n          if (JSON.stringify(val) === JSON.stringify(newData)) {\r\n            insertPos = key;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        insertPos = parentData.length - 1;\r\n      }\r\n      childPath += insertPos.toString();\r\n      this.addTrackedAction({\r\n        'data': newData,\r\n        'path': childPath,\r\n        'parentPath': parentPath,\r\n        'action': 'insert'\r\n      });\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.insertRecursive = function(path, newData) {\r\n    var data, i, parentPath, seg, _i, _len;\r\n    path = this.normalizePath(path);\r\n    if (path.length === 0) {\r\n      if (!$.isArray(this.data)) {\r\n        return false;\r\n      }\r\n      this.data.push(newData);\r\n      this.refreshDisplay();\r\n      this.flushChanges();\r\n      return true;\r\n    }\r\n    if (this.childrenTreemas != null) {\r\n      return this.digDeeper(path, 'insertRecursive', false, [newData]);\r\n    }\r\n    data = this.data;\r\n    parentPath = this.getPath();\r\n    for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {\r\n      seg = path[i];\r\n      parentPath += '/' + seg;\r\n      seg = this.normalizeKey(seg, data);\r\n      data = data[seg];\r\n      if (data === void 0) {\r\n        return false;\r\n      }\r\n    }\r\n    if (!$.isArray(data)) {\r\n      return false;\r\n    }\r\n    data.push(newData);\r\n    this.refreshDisplay();\r\n    return true;\r\n  };\r\n\r\n  TreemaNode.prototype.normalizeKey = function(key, collection) {\r\n    var i, parts, value, _i, _len;\r\n    if ($.isArray(collection)) {\r\n      if (__indexOf.call(key, '=') >= 0) {\r\n        parts = key.split('=');\r\n        for (i = _i = 0, _len = collection.length; _i < _len; i = ++_i) {\r\n          value = collection[i];\r\n          if (value[parts[0]] === parts[1]) {\r\n            return i;\r\n          }\r\n        }\r\n      } else {\r\n        return parseInt(key);\r\n      }\r\n    }\r\n    return key;\r\n  };\r\n\r\n  TreemaNode.prototype.normalizePath = function(path) {\r\n    var s;\r\n    if ($.type(path) === 'string') {\r\n      path = path.split('/');\r\n      path = (function() {\r\n        var _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = path.length; _i < _len; _i++) {\r\n          s = path[_i];\r\n          if (s.length) {\r\n            _results.push(s);\r\n          }\r\n        }\r\n        return _results;\r\n      })();\r\n    }\r\n    return path;\r\n  };\r\n\r\n  TreemaNode.prototype.digDeeper = function(path, func, def, args) {\r\n    var childTreema, seg;\r\n    seg = this.normalizeKey(path[0], this.data);\r\n    childTreema = this.childrenTreemas[seg];\r\n    if (childTreema === void 0 || !childTreema.integrated) {\r\n      return def;\r\n    }\r\n    return childTreema[func].apply(childTreema, [path.slice(1)].concat(__slice.call(args)));\r\n  };\r\n\r\n  TreemaNode.prototype.refreshDisplay = function() {\r\n    if (this.isDisplaying()) {\r\n      this.buildValueForDisplay(this.getValEl().empty(), this.getData());\r\n    } else {\r\n      this.display();\r\n    }\r\n    if (this.collection && this.isOpen()) {\r\n      this.close(false);\r\n      this.open();\r\n    }\r\n    this.flushChanges();\r\n    return this.broadcastChanges();\r\n  };\r\n\r\n  TreemaNode.prototype.getNodeEl = function() {\r\n    return this.$el;\r\n  };\r\n\r\n  TreemaNode.prototype.getValEl = function() {\r\n    return this.$el.find('> .treema-row .treema-value');\r\n  };\r\n\r\n  TreemaNode.prototype.getRootEl = function() {\r\n    return this.$el.closest('.treema-root');\r\n  };\r\n\r\n  TreemaNode.prototype.getRoot = function() {\r\n    var node;\r\n    node = this;\r\n    while (node.parent != null) {\r\n      node = node.parent;\r\n    }\r\n    return node;\r\n  };\r\n\r\n  TreemaNode.prototype.getInputs = function() {\r\n    return this.getValEl().find('input, textarea');\r\n  };\r\n\r\n  TreemaNode.prototype.getSelectedTreemas = function() {\r\n    var el, _i, _len, _ref, _results;\r\n    _ref = this.getRootEl().find('.treema-selected');\r\n    _results = [];\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      el = _ref[_i];\r\n      _results.push($(el).data('instance'));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.getLastSelectedTreema = function() {\r\n    return this.getRoot().lastSelectedTreema;\r\n  };\r\n\r\n  TreemaNode.prototype.setLastSelectedTreema = function(node) {\r\n    this.getRoot().lastSelectedTreema = node;\r\n    return node != null ? node.$el.addClass('treema-last-selected') : void 0;\r\n  };\r\n\r\n  TreemaNode.prototype.getAddButtonEl = function() {\r\n    return this.$el.find('> .treema-children > .treema-add-child');\r\n  };\r\n\r\n  TreemaNode.prototype.getVisibleTreemas = function() {\r\n    var el, _i, _len, _ref, _results;\r\n    _ref = this.getRootEl().find('.treema-node');\r\n    _results = [];\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      el = _ref[_i];\r\n      _results.push($(el).data('instance'));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.getNavigableElements = function() {\r\n    return this.getRootEl().find('.treema-node, .treema-add-child:visible').toArray();\r\n  };\r\n\r\n  TreemaNode.prototype.getPath = function() {\r\n    var pathPieces, pointer;\r\n    pathPieces = [];\r\n    pointer = this;\r\n    while (pointer && (pointer.keyForParent != null)) {\r\n      pathPieces.push(pointer.keyForParent + '');\r\n      pointer = pointer.parent;\r\n    }\r\n    pathPieces.reverse();\r\n    return '/' + pathPieces.join('/');\r\n  };\r\n\r\n  TreemaNode.prototype.getData = function() {\r\n    if ($.type(this.data) === 'undefined') {\r\n      return this.defaultData;\r\n    } else {\r\n      return this.data;\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.isDefaultStub = function() {\r\n    return this.data === void 0;\r\n  };\r\n\r\n  TreemaNode.getLastTreemaWithFocus = function() {\r\n    return this.lastTreemaWithFocus;\r\n  };\r\n\r\n  TreemaNode.prototype.isRoot = function() {\r\n    return !this.parent;\r\n  };\r\n\r\n  TreemaNode.prototype.isEditing = function() {\r\n    return this.getValEl().hasClass('treema-edit');\r\n  };\r\n\r\n  TreemaNode.prototype.isDisplaying = function() {\r\n    return this.getValEl().hasClass('treema-display');\r\n  };\r\n\r\n  TreemaNode.prototype.isOpen = function() {\r\n    return this.$el.hasClass('treema-open');\r\n  };\r\n\r\n  TreemaNode.prototype.isClosed = function() {\r\n    return this.$el.hasClass('treema-closed');\r\n  };\r\n\r\n  TreemaNode.prototype.isSelected = function() {\r\n    return this.$el.hasClass('treema-selected');\r\n  };\r\n\r\n  TreemaNode.prototype.wasSelectedLast = function() {\r\n    return this.$el.hasClass('treema-last-selected');\r\n  };\r\n\r\n  TreemaNode.prototype.editingIsHappening = function() {\r\n    return this.getRootEl().find('.treema-edit').length;\r\n  };\r\n\r\n  TreemaNode.prototype.rootSelected = function() {\r\n    return $(document.activeElement).hasClass('treema-root');\r\n  };\r\n\r\n  TreemaNode.prototype.setFilterVisible = function(isFilterVisible) {\r\n    if (isFilterVisible) {\r\n      return this.$el.find('.treema-node').andSelf().removeClass(this.treemaFilterHiddenClass);\r\n    } else {\r\n      return this.$el.find('.treema-node').andSelf().addClass(this.treemaFilterHiddenClass);\r\n    }\r\n  };\r\n\r\n  TreemaNode.prototype.getFilterVisibleTreemas = function() {\r\n    var el, _i, _len, _ref, _results;\r\n    _ref = this.getRootEl().find('.treema-node').not('.' + this.treemaFilterHiddenClass);\r\n    _results = [];\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      el = _ref[_i];\r\n      _results.push($(el).data('instance'));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.isFilterVisible = function() {\r\n    return !this.$el.hasClass(this.treemaFilterHiddenClass);\r\n  };\r\n\r\n  TreemaNode.prototype.saveScrolls = function() {\r\n    var parent, rootEl, _results;\r\n    this.scrolls = [];\r\n    rootEl = this.getRootEl();\r\n    parent = rootEl;\r\n    _results = [];\r\n    while (parent[0]) {\r\n      this.scrolls.push({\r\n        el: parent,\r\n        scrollTop: parent.scrollTop(),\r\n        scrollLeft: parent.scrollLeft()\r\n      });\r\n      if (parent.prop('tagName').toLowerCase() === 'body') {\r\n        break;\r\n      }\r\n      _results.push(parent = parent.parent());\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.loadScrolls = function() {\r\n    var scroll, _i, _len, _ref;\r\n    if (!this.scrolls) {\r\n      return;\r\n    }\r\n    _ref = this.scrolls;\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      scroll = _ref[_i];\r\n      scroll.el.scrollTop(scroll.scrollTop);\r\n      scroll.el.scrollLeft(scroll.scrollLeft);\r\n    }\r\n    return this.scrolls = null;\r\n  };\r\n\r\n  TreemaNode.prototype.keepFocus = function() {\r\n    this.saveScrolls();\r\n    this.getRootEl().focus();\r\n    return this.loadScrolls();\r\n  };\r\n\r\n  TreemaNode.prototype.copyData = function() {\r\n    return $.extend(null, {}, {\r\n      'd': this.data\r\n    })['d'];\r\n  };\r\n\r\n  TreemaNode.prototype.updateMyAddButton = function() {\r\n    this.$el.removeClass('treema-full');\r\n    if (!this.canAddChild()) {\r\n      return this.$el.addClass('treema-full');\r\n    }\r\n  };\r\n\r\n  TreemaNode.nodeMap = {};\r\n\r\n  TreemaNode.setNodeSubclass = function(key, NodeClass) {\r\n    return this.nodeMap[key] = NodeClass;\r\n  };\r\n\r\n  TreemaNode.make = function(element, options, parent, keyForParent) {\r\n    var NodeClass, key, localClasses, newNode, schema, tv4, type, value, workingData, workingSchema, workingSchemas, _ref, _ref1;\r\n    schema = options.schema || {};\r\n    if (schema.$ref) {\r\n      tv4 = options.tv4 || (parent != null ? parent.tv4 : void 0);\r\n      if (!tv4) {\r\n        tv4 = TreemaUtils.getGlobalTv4().freshApi();\r\n        tv4.addSchema('#', schema);\r\n      }\r\n      schema = this.utils.resolveReference(schema, tv4);\r\n    }\r\n    if ((schema[\"default\"] != null) && !((options.data != null) || (options.defaultData != null))) {\r\n      if ($.type(schema[\"default\"]) === 'object') {\r\n        options.data = {};\r\n      } else {\r\n        options.data = this.utils.cloneDeep(schema[\"default\"]);\r\n      }\r\n    }\r\n    workingData = options.data || options.defaultData;\r\n    workingSchemas = options.workingSchemas || this.utils.buildWorkingSchemas(schema, parent != null ? parent.tv4 : void 0);\r\n    workingSchema = options.workingSchema || this.utils.chooseWorkingSchema(workingData, workingSchemas, options.tv4);\r\n    this.massageData(options, workingSchema);\r\n    type = options.type || $.type((_ref = options.data) != null ? _ref : options.defaultData);\r\n    if (type === 'undefined') {\r\n      type = 'null';\r\n    }\r\n    localClasses = parent ? parent.settings.nodeClasses : options.nodeClasses;\r\n    NodeClass = this.getNodeClassForSchema(workingSchema, type, localClasses);\r\n    if (parent) {\r\n      _ref1 = parent.settings;\r\n      for (key in _ref1) {\r\n        value = _ref1[key];\r\n        if (key === 'data' || key === 'defaultData' || key === 'schema') {\r\n          continue;\r\n        }\r\n        options[key] = value;\r\n      }\r\n    }\r\n    options.workingSchema = workingSchema;\r\n    options.workingSchemas = workingSchemas;\r\n    if (keyForParent != null) {\r\n      options.keyForParent = keyForParent;\r\n    }\r\n    newNode = new NodeClass(element, options, parent);\r\n    return newNode;\r\n  };\r\n\r\n  TreemaNode.massageData = function(options, workingSchema) {\r\n    var dataType, defaultDataType, schemaTypes;\r\n    schemaTypes = workingSchema.type || ['string', 'number', 'integer', 'object', 'array', 'boolean', 'null'];\r\n    if ($.type(schemaTypes) !== 'array') {\r\n      schemaTypes = [schemaTypes];\r\n    }\r\n    if (__indexOf.call(schemaTypes, 'integer') >= 0 && __indexOf.call(schemaTypes, 'number') < 0) {\r\n      schemaTypes.push('number');\r\n    }\r\n    dataType = $.type(options.data);\r\n    defaultDataType = $.type(options.defaultData);\r\n    if (dataType !== 'undefined' && __indexOf.call(schemaTypes, dataType) < 0) {\r\n      options.data = this.defaultForType(schemaTypes[0]);\r\n    }\r\n    if (dataType === 'undefined' && __indexOf.call(schemaTypes, defaultDataType) < 0) {\r\n      return options.data = this.defaultForType(schemaTypes[0]);\r\n    }\r\n  };\r\n\r\n  TreemaNode.defaultForType = function(type) {\r\n    return TreemaNode.utils.defaultForType(type);\r\n  };\r\n\r\n  TreemaNode.getNodeClassForSchema = function(schema, def, localClasses) {\r\n    var NodeClass, type, typeMismatch, _ref;\r\n    if (def == null) {\r\n      def = 'string';\r\n    }\r\n    if (localClasses == null) {\r\n      localClasses = null;\r\n    }\r\n    typeMismatch = false;\r\n    if (schema.type) {\r\n      if ($.isArray(schema.type)) {\r\n        if (_ref = !def, __indexOf.call(schema.type, _ref) >= 0) {\r\n          typeMismatch = true;\r\n        }\r\n      } else {\r\n        typeMismatch = def !== schema.type;\r\n      }\r\n    }\r\n    NodeClass = null;\r\n    localClasses = localClasses || {};\r\n    if (schema.format) {\r\n      NodeClass = localClasses[schema.format] || this.nodeMap[schema.format];\r\n    }\r\n    if (NodeClass && !typeMismatch) {\r\n      return NodeClass;\r\n    }\r\n    type = schema.type || def;\r\n    if ($.isArray(type) || typeMismatch) {\r\n      type = def;\r\n    }\r\n    NodeClass = localClasses[type] || this.nodeMap[type];\r\n    if (NodeClass) {\r\n      return NodeClass;\r\n    }\r\n    return this.nodeMap['any'];\r\n  };\r\n\r\n  TreemaNode.extend = function(child) {\r\n    var ctor;\r\n    ctor = function() {};\r\n    ctor.prototype = this.prototype;\r\n    child.prototype = new ctor();\r\n    child.prototype.constructor = child;\r\n    child.__super__ = this.prototype;\r\n    child.prototype[\"super\"] = function(method) {\r\n      return this.constructor.__super__[method];\r\n    };\r\n    return child;\r\n  };\r\n\r\n  TreemaNode.didSelect = false;\r\n\r\n  TreemaNode.changedTreemas = [];\r\n\r\n  TreemaNode.prototype.filterChildren = function(filter) {\r\n    var keyForParent, treemaNode, _ref, _results;\r\n    _ref = this.childrenTreemas;\r\n    _results = [];\r\n    for (keyForParent in _ref) {\r\n      treemaNode = _ref[keyForParent];\r\n      _results.push(treemaNode.setFilterVisible(!filter || filter(treemaNode, keyForParent)));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.clearFilter = function() {\r\n    var keyForParent, treemaNode, _ref, _results;\r\n    _ref = this.childrenTreemas;\r\n    _results = [];\r\n    for (keyForParent in _ref) {\r\n      treemaNode = _ref[keyForParent];\r\n      _results.push(treemaNode.setFilterVisible(true));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  TreemaNode.prototype.destroy = function() {\r\n    var child;\r\n    for (child in this.childrenTreemas) {\r\n      this.childrenTreemas[child].destroy();\r\n    }\r\n    return this.$el.remove();\r\n  };\r\n\r\n  return TreemaNode;\r\n\r\n})();\r\n;var __init,\r\n  __hasProp = {}.hasOwnProperty,\r\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\r\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\r\n\r\n(__init = function() {\r\n  var ArrayNode, BooleanNode, IntegerNode, NullNode, NumberNode, ObjectNode, StringNode, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;\r\n  TreemaNode.setNodeSubclass('string', StringNode = (function(_super) {\r\n    __extends(StringNode, _super);\r\n\r\n    function StringNode() {\r\n      _ref = StringNode.__super__.constructor.apply(this, arguments);\r\n      return _ref;\r\n    }\r\n\r\n    StringNode.prototype.valueClass = 'treema-string';\r\n\r\n    StringNode.inputTypes = ['color', 'date', 'datetime', 'datetime-local', 'email', 'month', 'range', 'search', 'tel', 'text', 'time', 'url', 'week'];\r\n\r\n    StringNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      return this.buildValueForDisplaySimply(valEl, \"\\\"\" + data + \"\\\"\");\r\n    };\r\n\r\n    StringNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var input, _ref1;\r\n      input = this.buildValueForEditingSimply(valEl, data);\r\n      if (this.workingSchema.maxLength) {\r\n        input.attr('maxlength', this.workingSchema.maxLength);\r\n      }\r\n      if (_ref1 = this.workingSchema.format, __indexOf.call(StringNode.inputTypes, _ref1) >= 0) {\r\n        return input.attr('type', this.workingSchema.format);\r\n      }\r\n    };\r\n\r\n    StringNode.prototype.saveChanges = function(valEl) {\r\n      var oldData;\r\n      oldData = this.data;\r\n      this.data = $('input', valEl).val();\r\n      return StringNode.__super__.saveChanges.call(this, oldData);\r\n    };\r\n\r\n    return StringNode;\r\n\r\n  })(TreemaNode));\r\n  TreemaNode.setNodeSubclass('number', NumberNode = (function(_super) {\r\n    __extends(NumberNode, _super);\r\n\r\n    function NumberNode() {\r\n      _ref1 = NumberNode.__super__.constructor.apply(this, arguments);\r\n      return _ref1;\r\n    }\r\n\r\n    NumberNode.prototype.valueClass = 'treema-number';\r\n\r\n    NumberNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      return this.buildValueForDisplaySimply(valEl, JSON.stringify(data));\r\n    };\r\n\r\n    NumberNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var input;\r\n      input = this.buildValueForEditingSimply(valEl, JSON.stringify(data), 'number');\r\n      if (this.workingSchema.maximum) {\r\n        input.attr('max', this.workingSchema.maximum);\r\n      }\r\n      if (this.workingSchema.minimum) {\r\n        return input.attr('min', this.workingSchema.minimum);\r\n      }\r\n    };\r\n\r\n    NumberNode.prototype.saveChanges = function(valEl) {\r\n      var oldData;\r\n      oldData = this.data;\r\n      this.data = parseFloat($('input', valEl).val());\r\n      return NumberNode.__super__.saveChanges.call(this, oldData);\r\n    };\r\n\r\n    return NumberNode;\r\n\r\n  })(TreemaNode));\r\n  TreemaNode.setNodeSubclass('integer', IntegerNode = (function(_super) {\r\n    __extends(IntegerNode, _super);\r\n\r\n    function IntegerNode() {\r\n      _ref2 = IntegerNode.__super__.constructor.apply(this, arguments);\r\n      return _ref2;\r\n    }\r\n\r\n    IntegerNode.prototype.valueClass = 'treema-integer';\r\n\r\n    IntegerNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      return this.buildValueForDisplaySimply(valEl, JSON.stringify(data));\r\n    };\r\n\r\n    IntegerNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var input;\r\n      input = this.buildValueForEditingSimply(valEl, JSON.stringify(data), 'number');\r\n      if (this.workingSchema.maximum) {\r\n        input.attr('max', this.workingSchema.maximum);\r\n      }\r\n      if (this.workingSchema.minimum) {\r\n        return input.attr('min', this.workingSchema.minimum);\r\n      }\r\n    };\r\n\r\n    IntegerNode.prototype.saveChanges = function(valEl) {\r\n      var oldData;\r\n      oldData = this.data;\r\n      this.data = parseInt($('input', valEl).val());\r\n      return IntegerNode.__super__.saveChanges.call(this, oldData);\r\n    };\r\n\r\n    return IntegerNode;\r\n\r\n  })(TreemaNode));\r\n  TreemaNode.setNodeSubclass('null', NullNode = NullNode = (function(_super) {\r\n    __extends(NullNode, _super);\r\n\r\n    function NullNode() {\r\n      _ref3 = NullNode.__super__.constructor.apply(this, arguments);\r\n      return _ref3;\r\n    }\r\n\r\n    NullNode.prototype.valueClass = 'treema-null';\r\n\r\n    NullNode.prototype.editable = false;\r\n\r\n    NullNode.prototype.buildValueForDisplay = function(valEl) {\r\n      return this.buildValueForDisplaySimply(valEl, 'null');\r\n    };\r\n\r\n    return NullNode;\r\n\r\n  })(TreemaNode));\r\n  TreemaNode.setNodeSubclass('boolean', BooleanNode = (function(_super) {\r\n    __extends(BooleanNode, _super);\r\n\r\n    function BooleanNode() {\r\n      _ref4 = BooleanNode.__super__.constructor.apply(this, arguments);\r\n      return _ref4;\r\n    }\r\n\r\n    BooleanNode.prototype.valueClass = 'treema-boolean';\r\n\r\n    BooleanNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      this.buildValueForDisplaySimply(valEl, JSON.stringify(data));\r\n      return this.keepFocus();\r\n    };\r\n\r\n    BooleanNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var input;\r\n      input = this.buildValueForEditingSimply(valEl, JSON.stringify(data));\r\n      $('<span></span>').text(JSON.stringify(this.data)).insertBefore(input);\r\n      return input.focus();\r\n    };\r\n\r\n    BooleanNode.prototype.toggleValue = function(newValue) {\r\n      var oldData, valEl;\r\n      if (newValue == null) {\r\n        newValue = null;\r\n      }\r\n      oldData = this.getData();\r\n      this.data = !this.data;\r\n      if (newValue != null) {\r\n        this.data = newValue;\r\n      }\r\n      valEl = this.getValEl().empty();\r\n      if (this.isDisplaying()) {\r\n        this.buildValueForDisplay(valEl, this.getData());\r\n      } else {\r\n        this.buildValueForEditing(valEl, this.getData());\r\n      }\r\n      this.addTrackedAction({\r\n        'oldData': oldData,\r\n        'newData': this.data,\r\n        'path': this.getPath(),\r\n        'action': 'edit'\r\n      });\r\n      this.keepFocus();\r\n      return this.flushChanges();\r\n    };\r\n\r\n    BooleanNode.prototype.onSpacePressed = function() {\r\n      return this.toggleValue();\r\n    };\r\n\r\n    BooleanNode.prototype.onFPressed = function() {\r\n      return this.toggleValue(false);\r\n    };\r\n\r\n    BooleanNode.prototype.onTPressed = function() {\r\n      return this.toggleValue(true);\r\n    };\r\n\r\n    BooleanNode.prototype.saveChanges = function() {};\r\n\r\n    BooleanNode.prototype.onClick = function(e) {\r\n      var value;\r\n      value = $(e.target).closest('.treema-value');\r\n      if (!value.length) {\r\n        return BooleanNode.__super__.onClick.call(this, e);\r\n      }\r\n      if (this.canEdit()) {\r\n        return this.toggleValue();\r\n      }\r\n    };\r\n\r\n    return BooleanNode;\r\n\r\n  })(TreemaNode));\r\n  TreemaNode.setNodeSubclass('array', ArrayNode = (function(_super) {\r\n    __extends(ArrayNode, _super);\r\n\r\n    function ArrayNode() {\r\n      _ref5 = ArrayNode.__super__.constructor.apply(this, arguments);\r\n      return _ref5;\r\n    }\r\n\r\n    ArrayNode.prototype.valueClass = 'treema-array';\r\n\r\n    ArrayNode.prototype.collection = true;\r\n\r\n    ArrayNode.prototype.ordered = true;\r\n\r\n    ArrayNode.prototype.directlyEditable = false;\r\n\r\n    ArrayNode.prototype.sort = false;\r\n\r\n    ArrayNode.prototype.getChildren = function() {\r\n      var key, value, _i, _len, _ref6, _results;\r\n      _ref6 = this.getData();\r\n      _results = [];\r\n      for (key = _i = 0, _len = _ref6.length; _i < _len; key = ++_i) {\r\n        value = _ref6[key];\r\n        _results.push({\r\n          key: key,\r\n          value: value,\r\n          schema: this.getChildSchema(key)\r\n        });\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    ArrayNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      var child, empty, helperTreema, index, text, val, _i, _len, _ref6;\r\n      text = [];\r\n      if (!data) {\r\n        return;\r\n      }\r\n      _ref6 = data.slice(0, 3);\r\n      for (index = _i = 0, _len = _ref6.length; _i < _len; index = ++_i) {\r\n        child = _ref6[index];\r\n        helperTreema = TreemaNode.make(null, {\r\n          schema: TreemaNode.utils.getChildSchema(index, this.workingSchema),\r\n          data: child\r\n        }, this);\r\n        val = $('<div></div>');\r\n        helperTreema.buildValueForDisplay(val, helperTreema.getData());\r\n        text.push(val.text());\r\n      }\r\n      if (data.length > 3) {\r\n        text.push('...');\r\n      }\r\n      empty = this.workingSchema.title != null ? \"(empty \" + this.workingSchema.title + \")\" : '(empty)';\r\n      text = text.length ? text.join(' | ') : empty;\r\n      return this.buildValueForDisplaySimply(valEl, text);\r\n    };\r\n\r\n    ArrayNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      return this.buildValueForEditingSimply(valEl, JSON.stringify(data));\r\n    };\r\n\r\n    ArrayNode.prototype.canAddChild = function() {\r\n      if (this.settings.readOnly || this.workingSchema.readOnly) {\r\n        return false;\r\n      }\r\n      if (this.workingSchema.additionalItems === false && this.getData().length >= this.workingSchema.items.length) {\r\n        return false;\r\n      }\r\n      if ((this.workingSchema.maxItems != null) && this.getData().length >= this.workingSchema.maxItems) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    ArrayNode.prototype.addNewChild = function() {\r\n      var childNode, newTreema, new_index, schema;\r\n      if (!this.canAddChild()) {\r\n        return;\r\n      }\r\n      if (this.isClosed()) {\r\n        this.open();\r\n      }\r\n      new_index = Object.keys(this.childrenTreemas).length;\r\n      schema = TreemaNode.utils.getChildSchema(new_index, this.workingSchema);\r\n      newTreema = TreemaNode.make(void 0, {\r\n        schema: schema\r\n      }, this, new_index);\r\n      newTreema.tv4 = this.tv4;\r\n      childNode = this.createChildNode(newTreema);\r\n      this.addTrackedAction({\r\n        'data': newTreema.data,\r\n        'path': newTreema.getPath(),\r\n        'parentPath': this.getPath(),\r\n        'action': 'insert'\r\n      });\r\n      this.getAddButtonEl().before(childNode);\r\n      if (newTreema.canEdit()) {\r\n        newTreema.edit();\r\n      } else {\r\n        newTreema.select();\r\n        this.integrateChildTreema(newTreema);\r\n        newTreema.flushChanges();\r\n      }\r\n      return newTreema;\r\n    };\r\n\r\n    ArrayNode.prototype.open = function() {\r\n      if (this.data && this.sort) {\r\n        this.data.sort(this.sortFunction);\r\n      }\r\n      return ArrayNode.__super__.open.apply(this, arguments);\r\n    };\r\n\r\n    ArrayNode.prototype.close = function() {\r\n      var valEl;\r\n      ArrayNode.__super__.close.apply(this, arguments);\r\n      valEl = this.getValEl().empty();\r\n      return this.buildValueForDisplay(valEl, this.getData());\r\n    };\r\n\r\n    ArrayNode.prototype.sortFunction = function(a, b) {\r\n      if (a > b) {\r\n        return 1;\r\n      }\r\n      if (a < b) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    };\r\n\r\n    return ArrayNode;\r\n\r\n  })(TreemaNode));\r\n  window.TreemaArrayNode = ArrayNode;\r\n  TreemaNode.setNodeSubclass('object', ObjectNode = (function(_super) {\r\n    __extends(ObjectNode, _super);\r\n\r\n    function ObjectNode() {\r\n      this.cleanupAddNewChild = __bind(this.cleanupAddNewChild, this);\r\n      this.onAutocompleteSelect = __bind(this.onAutocompleteSelect, this);\r\n      _ref6 = ObjectNode.__super__.constructor.apply(this, arguments);\r\n      return _ref6;\r\n    }\r\n\r\n    ObjectNode.prototype.valueClass = 'treema-object';\r\n\r\n    ObjectNode.prototype.collection = true;\r\n\r\n    ObjectNode.prototype.keyed = true;\r\n\r\n    ObjectNode.prototype.directlyEditable = false;\r\n\r\n    ObjectNode.prototype.getChildren = function() {\r\n      var children, defaultData, key, keysAccountedFor, schema, value, _ref7;\r\n      children = [];\r\n      keysAccountedFor = [];\r\n      if (this.workingSchema.properties) {\r\n        for (key in this.workingSchema.properties) {\r\n          defaultData = this.getDefaultDataForKey(key);\r\n          if ($.type(this.getData()[key]) === 'undefined') {\r\n            if (defaultData != null) {\r\n              keysAccountedFor.push(key);\r\n              children.push({\r\n                key: key,\r\n                schema: this.getChildSchema(key),\r\n                defaultData: defaultData\r\n              });\r\n            }\r\n            continue;\r\n          }\r\n          keysAccountedFor.push(key);\r\n          schema = this.getChildSchema(key);\r\n          children.push({\r\n            key: key,\r\n            value: this.getData()[key],\r\n            schema: schema,\r\n            defaultData: defaultData\r\n          });\r\n        }\r\n      }\r\n      _ref7 = this.getData();\r\n      for (key in _ref7) {\r\n        value = _ref7[key];\r\n        if (__indexOf.call(keysAccountedFor, key) >= 0) {\r\n          continue;\r\n        }\r\n        keysAccountedFor.push(key);\r\n        children.push({\r\n          key: key,\r\n          value: value,\r\n          schema: this.getChildSchema(key),\r\n          defaultData: this.getDefaultDataForKey(key)\r\n        });\r\n      }\r\n      if ($.isPlainObject(this.defaultData)) {\r\n        for (key in this.defaultData) {\r\n          if (__indexOf.call(keysAccountedFor, key) >= 0) {\r\n            continue;\r\n          }\r\n          keysAccountedFor.push(key);\r\n          children.push({\r\n            key: key,\r\n            schema: this.getChildSchema(key),\r\n            defaultData: this.getDefaultDataForKey(key)\r\n          });\r\n        }\r\n      }\r\n      if ($.isPlainObject(this.workingSchema[\"default\"])) {\r\n        for (key in this.workingSchema[\"default\"]) {\r\n          if (__indexOf.call(keysAccountedFor, key) >= 0) {\r\n            continue;\r\n          }\r\n          keysAccountedFor.push(key);\r\n          children.push({\r\n            key: key,\r\n            schema: this.getChildSchema(key),\r\n            defaultData: this.getDefaultDataForKey(key)\r\n          });\r\n        }\r\n      }\r\n      return children;\r\n    };\r\n\r\n    ObjectNode.prototype.getDefaultDataForKey = function(key) {\r\n      var childDefaultData, _ref7, _ref8, _ref9;\r\n      childDefaultData = (_ref7 = (_ref8 = this.defaultData) != null ? _ref8[key] : void 0) != null ? _ref7 : (_ref9 = this.workingSchema[\"default\"]) != null ? _ref9[key] : void 0;\r\n      if ($.isArray(childDefaultData)) {\r\n        childDefaultData = $.extend(true, [], childDefaultData);\r\n      }\r\n      if ($.isPlainObject(childDefaultData)) {\r\n        childDefaultData = $.extend(true, {}, childDefaultData);\r\n      }\r\n      return childDefaultData;\r\n    };\r\n\r\n    ObjectNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      var childSchema, displayValue, empty, i, key, name, schema, text, value, valueString;\r\n      text = [];\r\n      if (!data) {\r\n        return;\r\n      }\r\n      displayValue = data[this.workingSchema.displayProperty];\r\n      if (displayValue) {\r\n        text = displayValue;\r\n        return this.buildValueForDisplaySimply(valEl, text);\r\n      }\r\n      i = 0;\r\n      schema = this.workingSchema || this.schema;\r\n      for (key in data) {\r\n        value = data[key];\r\n        if (value === void 0) {\r\n          continue;\r\n        }\r\n        if (i === 3) {\r\n          text.push('...');\r\n          break;\r\n        }\r\n        i += 1;\r\n        childSchema = this.getChildSchema(key);\r\n        name = childSchema.title || key;\r\n        if ($.isPlainObject(value) || $.isArray(value)) {\r\n          text.push(\"\" + name);\r\n          continue;\r\n        }\r\n        valueString = value;\r\n        if ($.type(value) !== 'string') {\r\n          valueString = JSON.stringify(value);\r\n        }\r\n        if (typeof value === 'undefined') {\r\n          valueString = 'undefined';\r\n        }\r\n        if (valueString.length > 20) {\r\n          valueString = valueString.slice(0, 21) + ' ...';\r\n        }\r\n        text.push(\"\" + name + \"=\" + valueString);\r\n      }\r\n      empty = this.workingSchema.title != null ? \"(empty \" + this.workingSchema.title + \")\" : '(empty)';\r\n      text = text.length ? text.join(', ') : empty;\r\n      return this.buildValueForDisplaySimply(valEl, text);\r\n    };\r\n\r\n    ObjectNode.prototype.populateData = function() {\r\n      ObjectNode.__super__.populateData.call(this);\r\n      return TreemaNode.utils.populateRequireds(this.data, this.workingSchema, this.tv4);\r\n    };\r\n\r\n    ObjectNode.prototype.close = function() {\r\n      ObjectNode.__super__.close.apply(this, arguments);\r\n      return this.buildValueForDisplay(this.getValEl().empty(), this.getData());\r\n    };\r\n\r\n    ObjectNode.prototype.addNewChild = function() {\r\n      var keyInput, properties,\r\n        _this = this;\r\n      if (!this.canAddChild()) {\r\n        return;\r\n      }\r\n      if (!this.isRoot()) {\r\n        this.open();\r\n      }\r\n      this.deselectAll();\r\n      properties = this.childPropertiesAvailable();\r\n      keyInput = $(this.newPropertyTemplate);\r\n      keyInput.blur(this.cleanupAddNewChild);\r\n      keyInput.keydown(function(e) {\r\n        return _this.originalTargetValue = $(e.target).val();\r\n      });\r\n      if (typeof keyInput.autocomplete === \"function\") {\r\n        keyInput.autocomplete({\r\n          source: properties,\r\n          minLength: 0,\r\n          delay: 0,\r\n          autoFocus: true,\r\n          select: this.onAutocompleteSelect\r\n        });\r\n      }\r\n      this.getAddButtonEl().before(keyInput).hide();\r\n      keyInput.focus();\r\n      keyInput.autocomplete('search');\r\n      return true;\r\n    };\r\n\r\n    ObjectNode.prototype.onAutocompleteSelect = function(e, ui) {\r\n      $(e.target).val(ui.item.value);\r\n      return this.tryToAddNewChild(e, true);\r\n    };\r\n\r\n    ObjectNode.prototype.canAddChild = function() {\r\n      if (this.settings.readOnly || this.workingSchema.readOnly) {\r\n        return false;\r\n      }\r\n      if ((this.workingSchema.maxProperties != null) && Object.keys(this.getData()).length >= this.workingSchema.maxProperties) {\r\n        return false;\r\n      }\r\n      if (this.workingSchema.additionalProperties !== false) {\r\n        return true;\r\n      }\r\n      if (this.workingSchema.patternProperties != null) {\r\n        return true;\r\n      }\r\n      if (this.childPropertiesAvailable().length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    ObjectNode.prototype.childPropertiesAvailable = function() {\r\n      var childSchema, data, properties, property, schema, _ref7;\r\n      schema = this.workingSchema || this.schema;\r\n      if (!schema.properties) {\r\n        return [];\r\n      }\r\n      properties = [];\r\n      data = this.getData();\r\n      _ref7 = schema.properties;\r\n      for (property in _ref7) {\r\n        childSchema = _ref7[property];\r\n        if ((data != null ? data[property] : void 0) != null) {\r\n          continue;\r\n        }\r\n        if (childSchema.format === 'hidden') {\r\n          continue;\r\n        }\r\n        if (childSchema.readOnly) {\r\n          continue;\r\n        }\r\n        properties.push(childSchema.title || property);\r\n      }\r\n      return properties.sort();\r\n    };\r\n\r\n    ObjectNode.prototype.onDeletePressed = function(e) {\r\n      if (!this.addingNewProperty()) {\r\n        return ObjectNode.__super__.onDeletePressed.call(this, e);\r\n      }\r\n      if (!$(e.target).val()) {\r\n        this.cleanupAddNewChild();\r\n        e.preventDefault();\r\n        return this.$el.find('.treema-add-child').focus();\r\n      }\r\n    };\r\n\r\n    ObjectNode.prototype.onEscapePressed = function() {\r\n      return this.cleanupAddNewChild();\r\n    };\r\n\r\n    ObjectNode.prototype.onTabPressed = function(e) {\r\n      if (!this.addingNewProperty()) {\r\n        return ObjectNode.__super__.onTabPressed.call(this, e);\r\n      }\r\n      e.preventDefault();\r\n      return this.tryToAddNewChild(e, false);\r\n    };\r\n\r\n    ObjectNode.prototype.onEnterPressed = function(e) {\r\n      if (!this.addingNewProperty()) {\r\n        return ObjectNode.__super__.onEnterPressed.call(this, e);\r\n      }\r\n      return this.tryToAddNewChild(e, true);\r\n    };\r\n\r\n    ObjectNode.prototype.tryToAddNewChild = function(e, aggressive) {\r\n      var key, keyInput, offset, treema;\r\n      if ((!this.originalTargetValue) && (!aggressive)) {\r\n        offset = e.shiftKey ? -1 : 1;\r\n        this.cleanupAddNewChild();\r\n        this.$el.find('.treema-add-child').focus();\r\n        this.traverseWhileEditing(offset);\r\n        return;\r\n      }\r\n      keyInput = $(e.target);\r\n      key = this.getPropertyKey($(e.target));\r\n      if (key.length && !this.canAddProperty(key)) {\r\n        this.clearTemporaryErrors();\r\n        this.showBadPropertyError(keyInput);\r\n        return;\r\n      }\r\n      if (this.childrenTreemas[key] != null) {\r\n        this.cleanupAddNewChild();\r\n        treema = this.childrenTreemas[key];\r\n        if (treema.canEdit()) {\r\n          return treema.toggleEdit();\r\n        } else {\r\n          return treema.select();\r\n        }\r\n      }\r\n      this.cleanupAddNewChild();\r\n      return this.addNewChildForKey(key);\r\n    };\r\n\r\n    ObjectNode.prototype.getPropertyKey = function(keyInput) {\r\n      var child_key, child_schema, key, _ref7;\r\n      key = keyInput.val();\r\n      if (this.workingSchema.properties) {\r\n        _ref7 = this.workingSchema.properties;\r\n        for (child_key in _ref7) {\r\n          child_schema = _ref7[child_key];\r\n          if (child_schema.title === key) {\r\n            key = child_key;\r\n          }\r\n        }\r\n      }\r\n      return key;\r\n    };\r\n\r\n    ObjectNode.prototype.canAddProperty = function(key) {\r\n      var pattern, _ref7;\r\n      if (this.workingSchema.additionalProperties !== false) {\r\n        return true;\r\n      }\r\n      if (((_ref7 = this.workingSchema.properties) != null ? _ref7[key] : void 0) != null) {\r\n        return true;\r\n      }\r\n      if (this.workingSchema.patternProperties != null) {\r\n        for (pattern in this.workingSchema.patternProperties) {\r\n          if (RegExp(pattern).test(key)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    ObjectNode.prototype.showBadPropertyError = function(keyInput) {\r\n      var tempError;\r\n      keyInput.focus();\r\n      tempError = this.createTemporaryError('Invalid property name.');\r\n      tempError.insertAfter(keyInput);\r\n    };\r\n\r\n    ObjectNode.prototype.addNewChildForKey = function(key) {\r\n      var child, childNode, children, newTreema, schema;\r\n      schema = this.getChildSchema(key);\r\n      newTreema = TreemaNode.make(null, {\r\n        schema: schema\r\n      }, this, key);\r\n      childNode = this.createChildNode(newTreema);\r\n      this.findObjectInsertionPoint(key).before(childNode);\r\n      if (newTreema.canEdit()) {\r\n        newTreema.edit();\r\n      } else {\r\n        this.integrateChildTreema(newTreema);\r\n        if (newTreema.collection) {\r\n          children = newTreema.getChildren();\r\n          if (children.length) {\r\n            newTreema.open();\r\n            child = newTreema.childrenTreemas[children[0]['key']];\r\n            if (child != null) {\r\n              child.select();\r\n            }\r\n          } else {\r\n            newTreema.addNewChild();\r\n          }\r\n        }\r\n      }\r\n      this.addTrackedAction({\r\n        'data': newTreema.data,\r\n        'path': newTreema.getPath(),\r\n        'parentPath': this.getPath(),\r\n        action: 'insert'\r\n      });\r\n      return this.updateMyAddButton();\r\n    };\r\n\r\n    ObjectNode.prototype.findObjectInsertionPoint = function(key) {\r\n      var afterKeys, allChildren, allProps, child, _i, _len, _ref7, _ref8;\r\n      if (!((_ref7 = this.workingSchema.properties) != null ? _ref7[key] : void 0)) {\r\n        return this.getAddButtonEl();\r\n      }\r\n      allProps = Object.keys(this.workingSchema.properties);\r\n      afterKeys = allProps.slice(allProps.indexOf(key) + 1);\r\n      allChildren = this.$el.find('> .treema-children > .treema-node');\r\n      for (_i = 0, _len = allChildren.length; _i < _len; _i++) {\r\n        child = allChildren[_i];\r\n        if (_ref8 = $(child).data('instance').keyForParent, __indexOf.call(afterKeys, _ref8) >= 0) {\r\n          return $(child);\r\n        }\r\n      }\r\n      return this.getAddButtonEl();\r\n    };\r\n\r\n    ObjectNode.prototype.cleanupAddNewChild = function() {\r\n      this.$el.find('.treema-new-prop').remove();\r\n      this.getAddButtonEl().show();\r\n      return this.clearTemporaryErrors();\r\n    };\r\n\r\n    ObjectNode.prototype.addingNewProperty = function() {\r\n      return document.activeElement === this.$el.find('.treema-new-prop')[0];\r\n    };\r\n\r\n    return ObjectNode;\r\n\r\n  })(TreemaNode));\r\n  return window.TreemaObjectNode = ObjectNode;\r\n})();\r\n;var __hasProp = {}.hasOwnProperty,\r\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n  __slice = [].slice;\r\n\r\n(function() {\r\n  var AceNode, DatabaseSearchTreemaNode, LongStringNode, Point2DNode, Point3DNode, debounce, _ref, _ref1, _ref2, _ref3, _ref4;\r\n  TreemaNode.setNodeSubclass('point2d', Point2DNode = (function(_super) {\r\n    __extends(Point2DNode, _super);\r\n\r\n    function Point2DNode() {\r\n      _ref = Point2DNode.__super__.constructor.apply(this, arguments);\r\n      return _ref;\r\n    }\r\n\r\n    Point2DNode.prototype.valueClass = 'treema-point2d';\r\n\r\n    Point2DNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      return this.buildValueForDisplaySimply(valEl, \"(\" + data.x + \", \" + data.y + \")\");\r\n    };\r\n\r\n    Point2DNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var xInput, yInput;\r\n      xInput = $('<input />').val(data.x).attr('placeholder', 'x');\r\n      yInput = $('<input />').val(data.y).attr('placeholder', 'y');\r\n      valEl.append('(').append(xInput).append(', ').append(yInput).append(')');\r\n      return valEl.find('input:first').focus().select();\r\n    };\r\n\r\n    Point2DNode.prototype.saveChanges = function(valEl) {\r\n      if (this.data == null) {\r\n        this.data = {};\r\n      }\r\n      this.data.x = parseFloat(valEl.find('input:first').val());\r\n      return this.data.y = parseFloat(valEl.find('input:last').val());\r\n    };\r\n\r\n    return Point2DNode;\r\n\r\n  })(TreemaNode));\r\n  TreemaNode.setNodeSubclass('point3d', Point3DNode = (function(_super) {\r\n    __extends(Point3DNode, _super);\r\n\r\n    function Point3DNode() {\r\n      _ref1 = Point3DNode.__super__.constructor.apply(this, arguments);\r\n      return _ref1;\r\n    }\r\n\r\n    Point3DNode.prototype.valueClass = 'treema-point3d';\r\n\r\n    Point3DNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      return this.buildValueForDisplaySimply(valEl, \"(\" + data.x + \", \" + data.y + \", \" + data.z + \")\");\r\n    };\r\n\r\n    Point3DNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var xInput, yInput, zInput;\r\n      xInput = $('<input />').val(data.x).attr('placeholder', 'x');\r\n      yInput = $('<input />').val(data.y).attr('placeholder', 'y');\r\n      zInput = $('<input />').val(data.z).attr('placeholder', 'z');\r\n      valEl.append('(').append(xInput).append(', ').append(yInput).append(', ').append(zInput).append(')');\r\n      return valEl.find('input:first').focus().select();\r\n    };\r\n\r\n    Point3DNode.prototype.saveChanges = function() {\r\n      var inputs;\r\n      inputs = this.getInputs();\r\n      if (this.data == null) {\r\n        this.data = {};\r\n      }\r\n      this.data.x = parseFloat($(inputs[0]).val());\r\n      this.data.y = parseFloat($(inputs[1]).val());\r\n      return this.data.z = parseFloat($(inputs[2]).val());\r\n    };\r\n\r\n    return Point3DNode;\r\n\r\n  })(TreemaNode));\r\n  DatabaseSearchTreemaNode = (function(_super) {\r\n    __extends(DatabaseSearchTreemaNode, _super);\r\n\r\n    function DatabaseSearchTreemaNode() {\r\n      this.searchCallback = __bind(this.searchCallback, this);\r\n      this.search = __bind(this.search, this);\r\n      _ref2 = DatabaseSearchTreemaNode.__super__.constructor.apply(this, arguments);\r\n      return _ref2;\r\n    }\r\n\r\n    DatabaseSearchTreemaNode.prototype.valueClass = 'treema-search';\r\n\r\n    DatabaseSearchTreemaNode.prototype.searchValueTemplate = '<input placeholder=\"Search\" /><div class=\"treema-search-results\"></div>';\r\n\r\n    DatabaseSearchTreemaNode.prototype.url = null;\r\n\r\n    DatabaseSearchTreemaNode.prototype.lastTerm = null;\r\n\r\n    DatabaseSearchTreemaNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      var val;\r\n      val = data ? this.formatDocument(data) : 'None';\r\n      return this.buildValueForDisplaySimply(valEl, val);\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.formatDocument = function(doc) {\r\n      if ($.isString(doc)) {\r\n        return doc;\r\n      }\r\n      return JSON.stringify(doc);\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var input;\r\n      valEl.html(this.searchValueTemplate);\r\n      input = valEl.find('input');\r\n      input.focus().keyup(this.search);\r\n      if (data) {\r\n        return input.attr('placeholder', this.formatDocument(data));\r\n      }\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.search = function() {\r\n      var term;\r\n      term = this.getValEl().find('input').val();\r\n      if (term === this.lastTerm) {\r\n        return;\r\n      }\r\n      if (this.lastTerm && !term) {\r\n        this.getSearchResultsEl().empty();\r\n      }\r\n      if (!term) {\r\n        return;\r\n      }\r\n      this.lastTerm = term;\r\n      this.getSearchResultsEl().empty().append('Searching');\r\n      return $.ajax(this.url + '?term=' + term, {\r\n        dataType: 'json',\r\n        success: this.searchCallback\r\n      });\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.searchCallback = function(results) {\r\n      var container, first, i, result, row, text, _i, _len;\r\n      container = this.getSearchResultsEl().detach().empty();\r\n      first = true;\r\n      for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {\r\n        result = results[i];\r\n        row = $('<div></div>').addClass('treema-search-result-row');\r\n        text = this.formatDocument(result);\r\n        if (text == null) {\r\n          continue;\r\n        }\r\n        if (first) {\r\n          row.addClass('treema-search-selected');\r\n        }\r\n        first = false;\r\n        row.text(text);\r\n        row.data('value', result);\r\n        container.append(row);\r\n      }\r\n      if (!results.length) {\r\n        container.append($('<div>No results</div>'));\r\n      }\r\n      return this.getValEl().append(container);\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.getSearchResultsEl = function() {\r\n      return this.getValEl().find('.treema-search-results');\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.getSelectedResultEl = function() {\r\n      return this.getValEl().find('.treema-search-selected');\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.saveChanges = function() {\r\n      var selected;\r\n      selected = this.getSelectedResultEl();\r\n      if (!selected.length) {\r\n        return;\r\n      }\r\n      return this.data = selected.data('value');\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.onDownArrowPressed = function(e) {\r\n      this.navigateSearch(1);\r\n      return e.preventDefault();\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.onUpArrowPressed = function(e) {\r\n      e.preventDefault();\r\n      return this.navigateSearch(-1);\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.navigateSearch = function(offset) {\r\n      var func, next, selected;\r\n      selected = this.getSelectedResultEl();\r\n      func = offset > 0 ? 'next' : 'prev';\r\n      next = selected[func]('.treema-search-result-row');\r\n      if (!next.length) {\r\n        return;\r\n      }\r\n      selected.removeClass('treema-search-selected');\r\n      return next.addClass('treema-search-selected');\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.onClick = function(e) {\r\n      var newSelection;\r\n      newSelection = $(e.target).closest('.treema-search-result-row');\r\n      if (!newSelection.length) {\r\n        return DatabaseSearchTreemaNode.__super__.onClick.call(this, e);\r\n      }\r\n      this.getSelectedResultEl().removeClass('treema-search-selected');\r\n      newSelection.addClass('treema-search-selected');\r\n      this.saveChanges();\r\n      return this.display();\r\n    };\r\n\r\n    DatabaseSearchTreemaNode.prototype.shouldTryToRemoveFromParent = function() {\r\n      var selected;\r\n      if (this.getData() != null) {\r\n        return;\r\n      }\r\n      selected = this.getSelectedResultEl();\r\n      return !selected.length;\r\n    };\r\n\r\n    return DatabaseSearchTreemaNode;\r\n\r\n  })(TreemaNode);\r\n  debounce = function(func, threshold, execAsap) {\r\n    var timeout;\r\n    timeout = null;\r\n    return function() {\r\n      var args, delayed, obj;\r\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\r\n      obj = this;\r\n      delayed = function() {\r\n        if (!execAsap) {\r\n          func.apply(obj, args);\r\n        }\r\n        return timeout = null;\r\n      };\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n      } else if (execAsap) {\r\n        func.apply(obj, args);\r\n      }\r\n      return timeout = setTimeout(delayed, threshold || 100);\r\n    };\r\n  };\r\n  DatabaseSearchTreemaNode.prototype.search = debounce(DatabaseSearchTreemaNode.prototype.search, 200);\r\n  window.DatabaseSearchTreemaNode = DatabaseSearchTreemaNode;\r\n  TreemaNode.setNodeSubclass('ace', AceNode = (function(_super) {\r\n    __extends(AceNode, _super);\r\n\r\n    function AceNode() {\r\n      this.saveChanges = __bind(this.saveChanges, this);\r\n      _ref3 = AceNode.__super__.constructor.apply(this, arguments);\r\n      return _ref3;\r\n    }\r\n\r\n    AceNode.prototype.valueClass = 'treema-ace treema-multiline';\r\n\r\n    AceNode.prototype.initEditor = function(valEl) {\r\n      var d, session;\r\n      d = $('<div></div>').text(this.getData());\r\n      valEl.append(d);\r\n      this.editor = ace.edit(d[0]);\r\n      session = this.editor.getSession();\r\n      if (this.schema.aceMode != null) {\r\n        session.setMode(this.schema.aceMode);\r\n      }\r\n      if (this.schema.aceTabSize != null) {\r\n        session.setTabSize(this.schema.aceTabSize);\r\n      }\r\n      if (this.schema.aceUseWrapMode != null) {\r\n        session.setUseWrapMode(this.schema.aceUseWrapMode);\r\n      }\r\n      session.setNewLineMode(\"unix\");\r\n      session.setUseSoftTabs(true);\r\n      session.on('change', this.saveChanges);\r\n      this.editor.setOptions({\r\n        maxLines: Infinity\r\n      });\r\n      if (this.schema.aceTheme != null) {\r\n        this.editor.setTheme(this.schema.aceTheme);\r\n      }\r\n      return this.editor.$blockScrolling = Infinity;\r\n    };\r\n\r\n    AceNode.prototype.toggleEdit = function() {\r\n      if (!this.editor) {\r\n        this.initEditor(this.getValEl());\r\n      }\r\n      return this.deselectAll();\r\n    };\r\n\r\n    AceNode.prototype.buildValueForDisplay = function(valEl) {\r\n      if (!this.editor) {\r\n        return this.initEditor(valEl);\r\n      }\r\n    };\r\n\r\n    AceNode.prototype.buildValueForEditing = function() {};\r\n\r\n    AceNode.prototype.saveChanges = function() {\r\n      this.data = this.editor.getValue();\r\n      this.flushChanges();\r\n      return this.broadcastChanges();\r\n    };\r\n\r\n    AceNode.prototype.onTabPressed = function() {};\r\n\r\n    AceNode.prototype.onEnterPressed = function() {};\r\n\r\n    AceNode.prototype.destroy = function() {\r\n      var session;\r\n      if (this.editor) {\r\n        session = this.editor.getSession();\r\n        session.setMode('');\r\n        return this.editor.destroy();\r\n      }\r\n    };\r\n\r\n    return AceNode;\r\n\r\n  })(TreemaNode));\r\n  return TreemaNode.setNodeSubclass('long-string', LongStringNode = (function(_super) {\r\n    __extends(LongStringNode, _super);\r\n\r\n    function LongStringNode() {\r\n      _ref4 = LongStringNode.__super__.constructor.apply(this, arguments);\r\n      return _ref4;\r\n    }\r\n\r\n    LongStringNode.prototype.valueClass = 'treema-long-string treema-multiline';\r\n\r\n    LongStringNode.prototype.buildValueForDisplay = function(valEl, data) {\r\n      var text;\r\n      text = data.replace(/\\n/g, '<br />');\r\n      return valEl.append($(\"<div></div>\").html(text));\r\n    };\r\n\r\n    LongStringNode.prototype.buildValueForEditing = function(valEl, data) {\r\n      var input;\r\n      input = $('<textarea />');\r\n      if (data !== null) {\r\n        input.val(data);\r\n      }\r\n      valEl.append(input);\r\n      input.focus().select();\r\n      input.blur(this.onEditInputBlur);\r\n      return input;\r\n    };\r\n\r\n    LongStringNode.prototype.saveChanges = function(valEl) {\r\n      var input;\r\n      input = valEl.find('textarea');\r\n      return this.data = input.val();\r\n    };\r\n\r\n    return LongStringNode;\r\n\r\n  })(TreemaNode));\r\n})();\r\n;(function($) {\r\n  return $.fn[TreemaNode.pluginName] = function(options) {\r\n    var element;\r\n    if (this.length === 0) {\r\n      return null;\r\n    }\r\n    element = $(this[0]);\r\n    return TreemaNode.make(element, options);\r\n  };\r\n})(jQuery);\r\n;var TreemaUtils;\r\n\r\nTreemaUtils = (function() {\r\n  var utils;\r\n  utils = {};\r\n  utils.populateDefaults = function(rootData, rootSchema, tv4) {\r\n    var _this = this;\r\n    if (rootSchema[\"default\"] && !rootData) {\r\n      rootData = this.cloneDeep(rootSchema[\"default\"]);\r\n    }\r\n    this.walk(rootData, rootSchema, tv4, function(path, data, schema) {\r\n      var def, key, value, _results;\r\n      def = schema[\"default\"];\r\n      if (!(_this.type(def) === 'object' && _this.type(data) === 'object')) {\r\n        return;\r\n      }\r\n      _results = [];\r\n      for (key in def) {\r\n        value = def[key];\r\n        if (data[key] === void 0) {\r\n          _results.push(data[key] = _this.cloneDeep(value));\r\n        } else {\r\n          _results.push(void 0);\r\n        }\r\n      }\r\n      return _results;\r\n    });\r\n    return rootData;\r\n  };\r\n  utils.populateRequireds = function(rootData, rootSchema, tv4) {\r\n    var _this = this;\r\n    if (rootData == null) {\r\n      rootData = {};\r\n    }\r\n    this.walk(rootData, rootSchema, tv4, function(path, data, schema) {\r\n      var childSchema, key, schemaDefault, type, workingSchema, _i, _len, _ref, _ref1, _results;\r\n      if (!(schema.required && _this.type(data) === 'object')) {\r\n        return;\r\n      }\r\n      _ref = schema.required;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        key = _ref[_i];\r\n        if (data[key] != null) {\r\n          continue;\r\n        }\r\n        if (schemaDefault = (_ref1 = schema[\"default\"]) != null ? _ref1[key] : void 0) {\r\n          _results.push(data[key] = _this.cloneDeep(schemaDefault));\r\n        } else {\r\n          childSchema = _this.getChildSchema(key, schema);\r\n          workingSchema = _this.buildWorkingSchemas(childSchema, tv4)[0];\r\n          schemaDefault = workingSchema[\"default\"];\r\n          if (schemaDefault != null) {\r\n            _results.push(data[key] = _this.cloneDeep(schemaDefault));\r\n          } else {\r\n            type = workingSchema.type;\r\n            if (_this.type(type) === 'array') {\r\n              type = type[0];\r\n            }\r\n            if (!type) {\r\n              type = 'string';\r\n            }\r\n            _results.push(data[key] = _this.defaultForType(type));\r\n          }\r\n        }\r\n      }\r\n      return _results;\r\n    });\r\n    return rootData;\r\n  };\r\n  utils.walk = function(data, schema, tv4, callback, path) {\r\n    var dataType, f, key, value, workingSchema, workingSchemas, _i, _len, _results, _results1,\r\n      _this = this;\r\n    if (path == null) {\r\n      path = '';\r\n    }\r\n    if (!tv4) {\r\n      tv4 = this.getGlobalTv4().freshApi();\r\n      tv4.addSchema('#', schema);\r\n      if (schema.id) {\r\n        tv4.addSchema(schema.id, schema);\r\n      }\r\n    }\r\n    workingSchemas = this.buildWorkingSchemas(schema, tv4);\r\n    workingSchema = this.chooseWorkingSchema(data, workingSchemas, tv4);\r\n    callback(path, data, workingSchema);\r\n    dataType = this.type(data);\r\n    if (dataType === 'array' || dataType === 'object') {\r\n      f = function(key, value) {\r\n        var childPath, childSchema;\r\n        value = data[key];\r\n        childPath = path.slice();\r\n        if (childPath) {\r\n          childPath += '.';\r\n        }\r\n        childPath += key;\r\n        childSchema = _this.getChildSchema(key, workingSchema);\r\n        return _this.walk(value, childSchema, tv4, callback, childPath);\r\n      };\r\n      if (dataType === 'array') {\r\n        _results = [];\r\n        for (key = _i = 0, _len = data.length; _i < _len; key = ++_i) {\r\n          value = data[key];\r\n          _results.push(f(key, value));\r\n        }\r\n        return _results;\r\n      } else {\r\n        _results1 = [];\r\n        for (key in data) {\r\n          value = data[key];\r\n          _results1.push(f(key, value));\r\n        }\r\n        return _results1;\r\n      }\r\n    }\r\n  };\r\n  utils.getChildSchema = function(key, schema) {\r\n    var childKey, childSchema, index, _ref, _ref1;\r\n    if (this.type(key) === 'string') {\r\n      _ref = schema.properties;\r\n      for (childKey in _ref) {\r\n        childSchema = _ref[childKey];\r\n        if (childKey === key) {\r\n          return childSchema;\r\n        }\r\n      }\r\n      _ref1 = schema.patternProperties;\r\n      for (childKey in _ref1) {\r\n        childSchema = _ref1[childKey];\r\n        if (key.match(new RegExp(childKey))) {\r\n          return childSchema;\r\n        }\r\n      }\r\n      if (typeof schema.additionalProperties === 'object') {\r\n        return schema.additionalProperties;\r\n      }\r\n    }\r\n    if (this.type(key) === 'number') {\r\n      index = key;\r\n      if (schema.items) {\r\n        if (Array.isArray(schema.items)) {\r\n          if (index < schema.items.length) {\r\n            return schema.items[index];\r\n          } else if (schema.additionalItems) {\r\n            return schema.additionalItems;\r\n          }\r\n        } else if (schema.items) {\r\n          return schema.items;\r\n        }\r\n      }\r\n    }\r\n    return {};\r\n  };\r\n  utils.buildWorkingSchemas = function(schema, tv4) {\r\n    var allOf, anyOf, baseSchema, newBase, oneOf, singularSchema, singularSchemas, workingSchemas, _i, _j, _len, _len1;\r\n    if (schema == null) {\r\n      schema = {};\r\n    }\r\n    baseSchema = this.resolveReference(schema, tv4);\r\n    if (!(schema.allOf || schema.anyOf || schema.oneOf)) {\r\n      return [schema];\r\n    }\r\n    baseSchema = this.cloneSchema(baseSchema);\r\n    allOf = baseSchema.allOf;\r\n    anyOf = baseSchema.anyOf;\r\n    oneOf = baseSchema.oneOf;\r\n    if (baseSchema.allOf != null) {\r\n      delete baseSchema.allOf;\r\n    }\r\n    if (baseSchema.anyOf != null) {\r\n      delete baseSchema.anyOf;\r\n    }\r\n    if (baseSchema.oneOf != null) {\r\n      delete baseSchema.oneOf;\r\n    }\r\n    if (allOf != null) {\r\n      for (_i = 0, _len = allOf.length; _i < _len; _i++) {\r\n        schema = allOf[_i];\r\n        this.combineSchemas(baseSchema, this.resolveReference(schema, tv4));\r\n      }\r\n    }\r\n    workingSchemas = [];\r\n    singularSchemas = [];\r\n    if (anyOf != null) {\r\n      singularSchemas = singularSchemas.concat(anyOf);\r\n    }\r\n    if (oneOf != null) {\r\n      singularSchemas = singularSchemas.concat(oneOf);\r\n    }\r\n    for (_j = 0, _len1 = singularSchemas.length; _j < _len1; _j++) {\r\n      singularSchema = singularSchemas[_j];\r\n      singularSchema = this.resolveReference(singularSchema, tv4);\r\n      newBase = this.cloneSchema(baseSchema);\r\n      this.combineSchemas(newBase, singularSchema);\r\n      workingSchemas.push(newBase);\r\n    }\r\n    if (workingSchemas.length === 0) {\r\n      workingSchemas = [baseSchema];\r\n    }\r\n    return workingSchemas;\r\n  };\r\n  utils.chooseWorkingSchema = function(data, workingSchemas, tv4) {\r\n    var result, schema, _i, _len;\r\n    if (workingSchemas.length === 1) {\r\n      return workingSchemas[0];\r\n    }\r\n    if (tv4 == null) {\r\n      tv4 = this.getGlobalTv4();\r\n    }\r\n    for (_i = 0, _len = workingSchemas.length; _i < _len; _i++) {\r\n      schema = workingSchemas[_i];\r\n      result = tv4.validateMultiple(data, schema);\r\n      if (result.valid) {\r\n        return schema;\r\n      }\r\n    }\r\n    return workingSchemas[0];\r\n  };\r\n  utils.resolveReference = function(schema, tv4, scrubTitle) {\r\n    var resolved;\r\n    if (scrubTitle == null) {\r\n      scrubTitle = false;\r\n    }\r\n    if (schema.$ref == null) {\r\n      return schema;\r\n    }\r\n    if (tv4 == null) {\r\n      tv4 = this.getGlobalTv4();\r\n    }\r\n    resolved = tv4.getSchema(schema.$ref);\r\n    if (!resolved) {\r\n      console.warn('could not resolve reference', schema.$ref, tv4.getMissingUris());\r\n    }\r\n    if (resolved == null) {\r\n      resolved = {};\r\n    }\r\n    if (scrubTitle && (resolved.title != null)) {\r\n      delete resolved.title;\r\n    }\r\n    return resolved;\r\n  };\r\n  utils.getGlobalTv4 = function() {\r\n    if (typeof window !== 'undefined') {\r\n      return window.tv4;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n      return global.tv4;\r\n    }\r\n    if (typeof tv4 !== 'undefined') {\r\n      return tv4;\r\n    }\r\n  };\r\n  utils.cloneSchema = function(schema) {\r\n    var clone, key, value;\r\n    clone = {};\r\n    for (key in schema) {\r\n      value = schema[key];\r\n      clone[key] = value;\r\n    }\r\n    return clone;\r\n  };\r\n  utils.combineSchemas = function(schema1, schema2) {\r\n    var key, value;\r\n    for (key in schema2) {\r\n      value = schema2[key];\r\n      schema1[key] = value;\r\n    }\r\n    return schema1;\r\n  };\r\n  utils.cloneDeep = function(data) {\r\n    var clone, key, type, value;\r\n    clone = data;\r\n    type = this.type(data);\r\n    if (type === 'object') {\r\n      clone = {};\r\n    }\r\n    if (type === 'array') {\r\n      clone = [];\r\n    }\r\n    if (type === 'object' || type === 'array') {\r\n      for (key in data) {\r\n        value = data[key];\r\n        clone[key] = this.cloneDeep(value);\r\n      }\r\n    }\r\n    return clone;\r\n  };\r\n  utils.type = (function() {\r\n    var classToType, name, _i, _len, _ref;\r\n    classToType = {};\r\n    _ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\r\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n      name = _ref[_i];\r\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n    }\r\n    return function(obj) {\r\n      var strType;\r\n      strType = Object.prototype.toString.call(obj);\r\n      return classToType[strType] || \"object\";\r\n    };\r\n  })();\r\n  utils.defaultForType = function(type) {\r\n    return {\r\n      string: '',\r\n      number: 0,\r\n      \"null\": null,\r\n      object: {},\r\n      integer: 0,\r\n      boolean: false,\r\n      array: []\r\n    }[type];\r\n  };\r\n  if (typeof TreemaNode !== 'undefined') {\r\n    return TreemaNode.utils = utils;\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    return module.exports = utils;\r\n  } else {\r\n    return utils;\r\n  }\r\n})();\r\n;\r\n//# sourceMappingURL=treema.js.map"]}