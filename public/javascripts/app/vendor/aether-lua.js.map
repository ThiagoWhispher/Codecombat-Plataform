{"version":3,"sources":["bower_components/aether/build/lua.js"],"names":[],"mappingsfile":"public/javascripts/app/vendor/aether-lua.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n\r\nvar parser = require('./parser.js');\r\nvar stdlib = require('./stdlib.js');\r\n\r\nthis.stdlib = stdlib;\r\nthis.parse = parser.parser.parse;\r\n\r\n\r\n\r\n},{\"./parser.js\":2,\"./stdlib.js\":3}],2:[function(require,module,exports){\r\nthis.parser = (function() {\r\n  /*\r\n   * Generated by PEG.js 0.8.0.\r\n   *\r\n   * http://pegjs.majda.cz/\r\n   */\r\n\r\n  function peg$subclass(child, parent) {\r\n    function ctor() { this.constructor = child; }\r\n    ctor.prototype = parent.prototype;\r\n    child.prototype = new ctor();\r\n  }\r\n\r\n  function SyntaxError(message, expected, found, offset, line, column) {\r\n    this.message  = message;\r\n    this.expected = expected;\r\n    this.found    = found;\r\n    this.offset   = offset;\r\n    this.line     = line;\r\n    this.column   = column;\r\n\r\n    this.name     = \"SyntaxError\";\r\n  }\r\n\r\n  peg$subclass(SyntaxError, Error);\r\n\r\n  function parse(input) {\r\n    var options = arguments.length > 1 ? arguments[1] : {},\r\n\r\n        peg$FAILED = {},\r\n\r\n        peg$startRuleFunctions = { start: peg$parsestart },\r\n        peg$startRuleFunction  = peg$parsestart,\r\n\r\n        peg$c0 = peg$FAILED,\r\n        peg$c1 = function() { init(); return true; },\r\n        peg$c2 = void 0,\r\n        peg$c3 = null,\r\n        peg$c4 = \"#\",\r\n        peg$c5 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\r\n        peg$c6 = [],\r\n        peg$c7 = /^[^\\n]/,\r\n        peg$c8 = { type: \"class\", value: \"[^\\\\n]\", description: \"[^\\\\n]\" },\r\n        peg$c9 = \"\\n\",\r\n        peg$c10 = { type: \"literal\", value: \"\\n\", description: \"\\\"\\\\n\\\"\" },\r\n        peg$c11 = function(t) { return finalize(t); },\r\n        peg$c12 = /^[ \\r\\t\\n]/,\r\n        peg$c13 = { type: \"class\", value: \"[ \\\\r\\\\t\\\\n]\", description: \"[ \\\\r\\\\t\\\\n]\" },\r\n        peg$c14 = \"--[\",\r\n        peg$c15 = { type: \"literal\", value: \"--[\", description: \"\\\"--[\\\"\" },\r\n        peg$c16 = \"]\",\r\n        peg$c17 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\r\n        peg$c18 = \"--\",\r\n        peg$c19 = { type: \"literal\", value: \"--\", description: \"\\\"--\\\"\" },\r\n        peg$c20 = { type: \"any\", description: \"any character\" },\r\n        peg$c21 = \";\",\r\n        peg$c22 = { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\r\n        peg$c23 = function(r) {\r\n                return builder.blockStatement([r]) \r\n            },\r\n        peg$c24 = function(list, ret) {\r\n                list = expandMultiStatements(list);\r\n                return builder.blockStatement(ret === null ? list : list.concat([ret[1]])); \r\n            },\r\n        peg$c25 = function(a, b) {  \r\n                if ( a === null ) return [];\r\n                if ( b === null ) return a;\r\n                return listHelper(a,b,1);\r\n            },\r\n        peg$c26 = \"if\",\r\n        peg$c27 = { type: \"literal\", value: \"if\", description: \"\\\"if\\\"\" },\r\n        peg$c28 = \"then\",\r\n        peg$c29 = { type: \"literal\", value: \"then\", description: \"\\\"then\\\"\" },\r\n        peg$c30 = \"elseif\",\r\n        peg$c31 = { type: \"literal\", value: \"elseif\", description: \"\\\"elseif\\\"\" },\r\n        peg$c32 = \"else\",\r\n        peg$c33 = { type: \"literal\", value: \"else\", description: \"\\\"else\\\"\" },\r\n        peg$c34 = \"do\",\r\n        peg$c35 = { type: \"literal\", value: \"do\", description: \"\\\"do\\\"\" },\r\n        peg$c36 = \"end\",\r\n        peg$c37 = { type: \"literal\", value: \"end\", description: \"\\\"end\\\"\" },\r\n        peg$c38 = \"return\",\r\n        peg$c39 = { type: \"literal\", value: \"return\", description: \"\\\"return\\\"\" },\r\n        peg$c40 = \"local\",\r\n        peg$c41 = { type: \"literal\", value: \"local\", description: \"\\\"local\\\"\" },\r\n        peg$c42 = \"nil\",\r\n        peg$c43 = { type: \"literal\", value: \"nil\", description: \"\\\"nil\\\"\" },\r\n        peg$c44 = \"true\",\r\n        peg$c45 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\r\n        peg$c46 = \"false\",\r\n        peg$c47 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\r\n        peg$c48 = \"function\",\r\n        peg$c49 = { type: \"literal\", value: \"function\", description: \"\\\"function\\\"\" },\r\n        peg$c50 = \"not\",\r\n        peg$c51 = { type: \"literal\", value: \"not\", description: \"\\\"not\\\"\" },\r\n        peg$c52 = \"break\",\r\n        peg$c53 = { type: \"literal\", value: \"break\", description: \"\\\"break\\\"\" },\r\n        peg$c54 = \"for\",\r\n        peg$c55 = { type: \"literal\", value: \"for\", description: \"\\\"for\\\"\" },\r\n        peg$c56 = \"until\",\r\n        peg$c57 = { type: \"literal\", value: \"until\", description: \"\\\"until\\\"\" },\r\n        peg$c58 = \"while\",\r\n        peg$c59 = { type: \"literal\", value: \"while\", description: \"\\\"while\\\"\" },\r\n        peg$c60 = /^[a-zA-Z_]/,\r\n        peg$c61 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\r\n        peg$c62 = /^[a-zA-Z0-9_]/,\r\n        peg$c63 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\r\n        peg$c64 = function(a) { return a; },\r\n        peg$c65 = /^[0-9]/,\r\n        peg$c66 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\r\n        peg$c67 = \".\",\r\n        peg$c68 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\r\n        peg$c69 = \"\\\\\",\r\n        peg$c70 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\r\n        peg$c71 = /^[abfrntv'\"\\\\]/,\r\n        peg$c72 = { type: \"class\", value: \"[abfrntv'\\\"\\\\\\\\]\", description: \"[abfrntv'\\\"\\\\\\\\]\" },\r\n        peg$c73 = function(c) { return {\r\n                \"n\": \"\\n\",\r\n                \"b\": \"\\b\",\r\n                \"f\": \"\\f\",\r\n                \"r\": \"\\r\",\r\n                \"t\": \"\\t\",\r\n                \"v\": \"\\v\",\r\n                '\"': '\"',\r\n                \"'\": \"'\",\r\n                \"\\\\\": \"\\\\\"\r\n            }[c] },\r\n        peg$c74 = \"\\\\\\n\",\r\n        peg$c75 = { type: \"literal\", value: \"\\\\\\n\", description: \"\\\"\\\\\\\\\\\\n\\\"\" },\r\n        peg$c76 = function() { return \"\\n\" },\r\n        peg$c77 = \"\\\\z\",\r\n        peg$c78 = { type: \"literal\", value: \"\\\\z\", description: \"\\\"\\\\\\\\z\\\"\" },\r\n        peg$c79 = function() { return \"\" },\r\n        peg$c80 = \"\\\\x\",\r\n        peg$c81 = { type: \"literal\", value: \"\\\\x\", description: \"\\\"\\\\\\\\x\\\"\" },\r\n        peg$c82 = /^[0-9a-f]/,\r\n        peg$c83 = { type: \"class\", value: \"[0-9a-f]\", description: \"[0-9a-f]\" },\r\n        peg$c84 = function(a, b) { return String.fromCharCode(parseInt('0x' + a + b)); },\r\n        peg$c85 = function(a, b, c) { return String.fromCharCode(parseInt('' + a + b + c)); },\r\n        peg$c86 = function() { error('Invalid Escape Sequence') },\r\n        peg$c87 = /^[^'\"']/,\r\n        peg$c88 = { type: \"class\", value: \"[^'\\\"']\", description: \"[^'\\\"']\" },\r\n        peg$c89 = /^[']/,\r\n        peg$c90 = { type: \"class\", value: \"[']\", description: \"[']\" },\r\n        peg$c91 = function() { return wrapNode({}); },\r\n        peg$c92 = /^[\"]/,\r\n        peg$c93 = { type: \"class\", value: \"[\\\"]\", description: \"[\\\"]\" },\r\n        peg$c94 = \"'\",\r\n        peg$c95 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\r\n        peg$c96 = function(s, r, e) { return eUntermIfEmpty(e,\"string\",\"\\\"\",s); },\r\n        peg$c97 = function(s, r, e) { return r.join(''); },\r\n        peg$c98 = \"\\\"\",\r\n        peg$c99 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\r\n        peg$c100 = function(s, r, e) { return eUntermIfEmpty(e,\"string\",\"'\",s); },\r\n        peg$c101 = \"[\",\r\n        peg$c102 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\r\n        peg$c103 = function(s) { return s; },\r\n        peg$c104 = \"=\",\r\n        peg$c105 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\r\n        peg$c106 = /^[\\n]/,\r\n        peg$c107 = { type: \"class\", value: \"[\\\\n]\", description: \"[\\\\n]\" },\r\n        peg$c108 = function(a) { return a;},\r\n        peg$c109 = function(e) { return eMsg(\"Found an expression but expected a statement: \" + e)},\r\n        peg$c110 = function(e) { return builder.emptyStatement(); },\r\n        peg$c111 = function(e) { return eMsg(\"`=` expected\")},\r\n        peg$c112 = /^[^\\n\\t\\r ]/,\r\n        peg$c113 = { type: \"class\", value: \"[^\\\\n\\\\t\\\\r ]\", description: \"[^\\\\n\\\\t\\\\r ]\" },\r\n        peg$c114 = function(e) { return eMsg(\"Parser error near `\" + e + \"`\"); },\r\n        peg$c115 = \"debugger\",\r\n        peg$c116 = { type: \"literal\", value: \"debugger\", description: \"\\\"debugger\\\"\" },\r\n        peg$c117 = function() { return {type: \"ExpressionStatement\", expression: {type: \"Identifier\", name:\"debugger; \"} } },\r\n        peg$c118 = function(start, b, end) { return eUntermIfEmpty(end, \"do\", \"end\", start); },\r\n        peg$c119 = function(start, b, end) { return b ? b[0] : {type: \"BlockStatement\", body: []}; },\r\n        peg$c120 = \",\",\r\n        peg$c121 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\r\n        peg$c122 = function(start, a, b, c, d, body, end) { return eUntermIfEmpty(end, \"for\", \"end\", start); },\r\n        peg$c123 = function(start, a, b, c, d, body, end) {\r\n                var amount = d == null ? {type: \"Literal\", value: 1 } : d[3];\r\n                \r\n\r\n                var start = bhelper.tempVar(b);\r\n                var updateBy = bhelper.tempVar(amount);\r\n                var testValue = bhelper.tempVar(c);\r\n                var idx = bhelper.tempVar();\r\n\r\n                var update = builder.assignmentExpression(\"=\", idx.id, bhelper.binaryExpression(\"+\", idx.id, updateBy.id));\r\n\r\n                var texp;\r\n                if ( false ) {\r\n                    texp = bhelper.binaryExpression(\"<=\", idx.id, testValue.id)\r\n                } else {\r\n                    texp = bhelper.luaOperator(\"forcomp\", updateBy.id, idx.id, testValue.id);\r\n                }\r\n\r\n                if ( !body ) body = {type: \"BlockStatement\", body: []};\r\n                else body = body[0];\r\n\r\n                body.body.unshift(builder.variableDeclaration(\"let\",[\r\n                    {\r\n                            type: \"VariableDeclarator\",\r\n                            id: a,\r\n                            init: idx.id,\r\n                            userCode: false\r\n                    }\r\n                ]));\r\n\r\n                var out = {\r\n                    type: \"ForStatement\",\r\n                    init: builder.variableDeclaration(\"let\", [\r\n                        {\r\n                            type: \"VariableDeclarator\",\r\n                            id: idx.id,\r\n                            init: start.id,\r\n                            userCode: false\r\n                        }\r\n                    ]),\r\n                    body: body,\r\n                    update: update,\r\n                    test: texp,\r\n                    loc: loc(),\r\n                    range: range()\r\n                };\r\n\r\n                return bhelper.encloseDecls([out], start, updateBy, testValue);\r\n            },\r\n        peg$c124 = \"in\",\r\n        peg$c125 = { type: \"literal\", value: \"in\", description: \"\\\"in\\\"\" },\r\n        peg$c126 = function(start, a, b, c, end) { return eUntermIfEmpty(end, \"for\", \"end\", start); },\r\n        peg$c127 = function(start, a, b, c, end) {\r\n                var statements = [];\r\n                var nil = {type: \"Literal\", value: null };\r\n                var uf = {type: \"Identifier\", name: 'undefined' };\r\n\r\n\r\n                var iterator = bhelper.tempName();\r\n                var context = bhelper.tempName();\r\n                var curent = bhelper.tempName();\r\n\r\n                var v1 = a[0];\r\n\r\n                var varlist = [];\r\n                for ( var idx in a ) {\r\n                    varlist.push({type: \"VariableDeclarator\", id: a[idx] });\r\n                }\r\n\r\n                var call = builder.callExpression(iterator,[context, curent]);\r\n                var assign;\r\n                //if ( a.length > 1 ) {\r\n                    assign = bhelper.bulkAssign(a, [call])\r\n                //} else {\r\n                //    assign = bhelper.assign(v1, call);\r\n                //}\r\n\r\n                var nullish = function(v) {\r\n                    return builder.binaryExpression(\"||\", builder.binaryExpression(\"===\", v1, nil), builder.binaryExpression(\"===\", v1, uf))\r\n                }\r\n\r\n                statements.push(builder.variableDeclaration(\"let\", varlist));\r\n                statements.push({\r\n                    type: \"WhileStatement\",\r\n                    test: {type: \"Literal\", value: true},\r\n                    body: bhelper.blockStatement([\r\n                    assign,\r\n                    { type: \"IfStatement\", test: nullish(v1), consequent: {type: \"BreakStatement\" } },\r\n                    bhelper.assign(curent, v1),\r\n                    c.body\r\n\r\n                    ])\r\n                });\r\n\r\n                return bhelper.encloseDeclsUnpack(statements, [iterator, context, curent], b);\r\n            },\r\n        peg$c128 = function(left, right) { \r\n                var result = builder.variableDeclaration(\"let\", []);\r\n\r\n                if ( !opt('decorateLuaObjects', false) || ( left.length < 2 && right.length < 2 )) { \r\n                    for ( var i = 0; i < left.length; ++i ) {\r\n                        result.declarations.push(            {\r\n                            type: \"VariableDeclarator\",\r\n                            id: left[i],\r\n                            init: right[i],\r\n                        });\r\n                    }\r\n\r\n                    return result;\r\n                } else {\r\n                    var assign = bhelper.bulkAssign(left, right)\r\n                    for ( var i = 0; i < left.length; ++i ) {\r\n                        result.declarations.push({\r\n                            type: \"VariableDeclarator\",\r\n                            id: left[i]\r\n                        });\r\n                    }\r\n                 \r\n                    return [result, assign];   \r\n                }\r\n            \r\n            },\r\n        peg$c129 = function(left) {\r\n                var result = builder.variableDeclaration(\"let\", []);\r\n                for ( var i = 0; i < left.length; ++i ) {\r\n                    result.declarations.push({\r\n                        type: \"VariableDeclarator\",\r\n                        id: left[i]\r\n                    });\r\n                }\r\n                return result;  \r\n            },\r\n        peg$c130 = function(left, right) { \r\n                // if ( left.length < 2 ) return bhelper.assign(left[0], right[0]).expression;\r\n                return bhelper.bulkAssign(left, right).expression;\r\n            },\r\n        peg$c131 = function() { return {\r\n                \"type\": \"BreakStatement\",\r\n                loc: loc(),\r\n                range: range()\r\n            } },\r\n        peg$c132 = function(e) { return {\r\n                type: \"ExpressionStatement\",\r\n                expression: e,\r\n                loc: loc(),\r\n                range: range()\r\n            } },\r\n        peg$c133 = function(test, then) { return wrapNode({test: test, then:then}); },\r\n        peg$c134 = function() { return eUnterminated(\"if\",\"then\"); },\r\n        peg$c135 = function(start, test, then, elzeifs, elze, end) { return eUntermIfEmpty(end, \"if\", \"end\", start); },\r\n        peg$c136 = function(start, test, then, elzeifs, elze, end) {\r\n                var result = { type: \"IfStatement\", test: test, consequent: then, loc: loc(), range: range()}\r\n                var last = result;\r\n\r\n                for ( var idx in elzeifs ) {\r\n                    var elif = elzeifs[idx][1];\r\n                    var nue = { type: \"IfStatement\", test: elif.test, consequent: elif.then, loc: elif.loc, range: elif.range }\r\n                    last.alternate = nue;\r\n                    last = nue;\r\n                }\r\n\r\n                if ( elze !== null ) last.alternate = elze[3];\r\n                return result;\r\n            },\r\n        peg$c137 = function(argument) { \r\n                var arg;\r\n\r\n\r\n                if ( argument == null ) { }\r\n                else if ( argument.length == 1 ) arg = argument[0];\r\n                else if ( argument.length > 1 ) {\r\n                    if ( opt('decorateLuaObjects', false) ) arg = bhelper.luaOperatorA(\"makeMultiReturn\", argument);\r\n                    else  arg = {\r\n                        type: \"ArrayExpression\",\r\n                        elements: argument\r\n                    };            \r\n                }\r\n                return {\r\n                    type: \"ReturnStatement\",\r\n                    argument: arg,\r\n                    loc: loc(),\r\n                    range: range()\r\n                }\r\n            },\r\n        peg$c138 = function() {\r\n                return {\r\n                    type: \"ReturnStatement\",\r\n                    loc: loc(),\r\n                }     \r\n            },\r\n        peg$c139 = function() { return eUnterminated(\"if\"); },\r\n        peg$c140 = function(test, body) { return {\r\n                type: \"WhileStatement\",\r\n                test: test,\r\n                body: body ? body[0] : {type: \"EmptyStatement\"},\r\n                loc: loc(),\r\n                range: range()\r\n\r\n            } },\r\n        peg$c141 = \"repeat\",\r\n        peg$c142 = { type: \"literal\", value: \"repeat\", description: \"\\\"repeat\\\"\" },\r\n        peg$c143 = function() { return eUnterminated(\"repeat\", \"until\"); },\r\n        peg$c144 = function() {return eMsg(\"repeat until needs terminations criteria\"); },\r\n        peg$c145 = function(body, test) { return {\r\n                type: \"DoWhileStatement\",\r\n                test: { \r\n                    type: \"UnaryExpression\",\r\n                    operator: \"!\",\r\n                    argument: test,\r\n                    prefix: true,\r\n                    loc: test.loc,\r\n                    range: test.range\r\n                },\r\n                body: body ? body[0] : {type: \"EmptyStatement\"},\r\n                loc: loc(),\r\n                range: range()\r\n            } },\r\n        peg$c146 = \"that\",\r\n        peg$c147 = { type: \"literal\", value: \"that\", description: \"\\\"that\\\"\" },\r\n        peg$c148 = function() { return { \"type\": \"ThisExpression\" }; },\r\n        peg$c149 = function(a, b) {\r\n                a = bhelper.translateExpressionIfNeeded(a);\r\n                if ( b === null ) return a;\r\n                var tokens = [];\r\n                for ( var idx in b ) {\r\n                    var v = b[idx];\r\n                    tokens.push(v[1]);\r\n                    tokens.push(bhelper.translateExpressionIfNeeded(v[3]));\r\n                }\r\n\r\n                return precedenceClimber(tokens, a, 1);\r\n            },\r\n        peg$c150 = \"-\",\r\n        peg$c151 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\r\n        peg$c152 = \"+\",\r\n        peg$c153 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\r\n        peg$c154 = \"==\",\r\n        peg$c155 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\r\n        peg$c156 = \">=\",\r\n        peg$c157 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\r\n        peg$c158 = \"<=\",\r\n        peg$c159 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\r\n        peg$c160 = \"~=\",\r\n        peg$c161 = { type: \"literal\", value: \"~=\", description: \"\\\"~=\\\"\" },\r\n        peg$c162 = \">\",\r\n        peg$c163 = { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\r\n        peg$c164 = \"<\",\r\n        peg$c165 = { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\r\n        peg$c166 = \"..\",\r\n        peg$c167 = { type: \"literal\", value: \"..\", description: \"\\\"..\\\"\" },\r\n        peg$c168 = \"and\",\r\n        peg$c169 = { type: \"literal\", value: \"and\", description: \"\\\"and\\\"\" },\r\n        peg$c170 = \"or\",\r\n        peg$c171 = { type: \"literal\", value: \"or\", description: \"\\\"or\\\"\" },\r\n        peg$c172 = \"*\",\r\n        peg$c173 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\r\n        peg$c174 = \"//\",\r\n        peg$c175 = { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\r\n        peg$c176 = \"/\",\r\n        peg$c177 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\r\n        peg$c178 = \"%\",\r\n        peg$c179 = { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\r\n        peg$c180 = \"^\",\r\n        peg$c181 = { type: \"literal\", value: \"^\", description: \"\\\"^\\\"\" },\r\n        peg$c182 = \"(\",\r\n        peg$c183 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\r\n        peg$c184 = \")\",\r\n        peg$c185 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\r\n        peg$c186 = function(e) { return e; },\r\n        peg$c187 = \":\",\r\n        peg$c188 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\r\n        peg$c189 = function(who, a) {\r\n                var left = who\r\n                for ( var idx = 0; idx < a.length; ++idx ) {\r\n                    var v = a[idx];\r\n                    if ( v[1] != null ) {\r\n                        left = builder.memberExpression(left, v[1][1], false);\r\n                        left.selfSuggar = true;\r\n                    }\r\n                    left = bhelper.callExpression(left,v[2]);\r\n                }\r\n                return left;\r\n            },\r\n        peg$c190 = function(b) { return [b]; },\r\n        peg$c191 = function(c) { return [{type: \"Literal\", value: c, loc: loc(), range: range()}]; },\r\n        peg$c192 = function(a) {\r\n\r\n            // Wraping a call in ()'s reduces it to a singel value\r\n            if ( a.type == \"CallExpression\" ) {\r\n                return bhelper.luaOperator(\"oneValue\", a);\r\n            } else if ( a.type == \"Identifier\" && a.name == \"__lua$rest\" ) {\r\n                return bhelper.luaOperator(\"oneValue\", a);\r\n            }\r\n            return a;\r\n        },\r\n        peg$c193 = \"...\",\r\n        peg$c194 = { type: \"literal\", value: \"...\", description: \"\\\"...\\\"\" },\r\n        peg$c195 = function() {\r\n                return wrapNode({type: \"Identifier\", name: \"__lua$rest\"});\r\n            },\r\n        peg$c196 = function(a, b) {\r\n                var selfSuggar = false;\r\n                if ( b.length == 0 ) return a;\r\n                var left = a;\r\n                for ( var i in b ) {\r\n                    left = builder.memberExpression(left, b[i].exp, b[i].computed);\r\n                    if ( b[i].suggar ) left.selfSuggar = true;\r\n                }\r\n\r\n                return left;\r\n            },\r\n        peg$c197 = /^[.:]/,\r\n        peg$c198 = { type: \"class\", value: \"[.:]\", description: \"[.:]\" },\r\n        peg$c199 = function(p, e) {\r\n                return {exp: e, suggar: p == ':', computed: false }\r\n            },\r\n        peg$c200 = function(e) {\r\n                return {exp: e, suggar: false, computed: true }\r\n            },\r\n        peg$c201 = function() { return eMsg(\"Malformed argument list.\"); },\r\n        peg$c202 = function(a, b) {\r\n                 return listHelper(a,b,3); \r\n            },\r\n        peg$c203 = function(a, b) {\r\n             return listHelper(a,b,3); \r\n        },\r\n        peg$c204 = function() {return eUnterminated(\")\", \"argument list\"); },\r\n        peg$c205 = function(a) {\r\n                 return a; \r\n            },\r\n        peg$c206 = function() {\r\n                return []\r\n            },\r\n        peg$c207 = function(a, b, c) { \r\n                var left = builder.memberExpression(a, b[0], b[1]);\r\n                for ( var idx in c ) {\r\n                    left = builder.memberExpression(left, c[idx][0], c[idx][1]);\r\n                }\r\n                return left;\r\n            },\r\n        peg$c208 = function(b) { return [b, true]; },\r\n        peg$c209 = function(b) { return [b,false]; },\r\n        peg$c210 = \"{\",\r\n        peg$c211 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\r\n        peg$c212 = \"}\",\r\n        peg$c213 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\r\n        peg$c214 = function(f, s) { \r\n                var result = {\r\n                    type: \"ObjectExpression\",\r\n                    properties: [],\r\n                    loc: loc(),\r\n                    range: range()\r\n                };\r\n\r\n                var props = listHelper(f,s,3);\r\n                var numeric = 0;\r\n                var longProps = [];\r\n                for ( var idx in props ) {\r\n                    var p = props[idx];\r\n\r\n                    if ( p.key === undefined ) p.key = {type: \"Literal\", value: ++numeric, arrayLike: true};\r\n                    p.kind = \"init\";\r\n                    result.properties.push(p);\r\n                }\r\n\r\n\r\n                if ( opt('decorateLuaObjects', false) ) {\r\n                    var last;\r\n                    var args = [];\r\n                    var pp = [];\r\n                    var last = true;\r\n                    for ( var idx in result.properties ) {\r\n                        var p = result.properties[idx];\r\n                        if ( p.key.arrayLike ) {\r\n                            args.push(p.value);\r\n                            last = true;\r\n                        } else {\r\n                            longProps.push({\r\n                                type: \"ArrayExpression\",\r\n                                elements: [p.key, p.value]\r\n                            });\r\n                            pp.push(p);\r\n                            last = false;\r\n                        }\r\n                    }\r\n                    result.properties = pp;\r\n\r\n                    result = {type: \"ArrayExpression\", elements: longProps };\r\n                    if (pp.length < 1 ) result = {type:\"Literal\", value: null};\r\n\r\n                    return bhelper.luaOperator.apply(bhelper, [\"makeTable\", result, {type: \"Literal\", value:last}].concat(args)); \r\n                }\r\n                else return result;\r\n            },\r\n        peg$c215 = function(n, v) {\r\n                if ( n.type == \"Identifier\" ) n = {type: \"Literal\", value: n.name};\r\n                return { key: n, value: v };\r\n            },\r\n        peg$c216 = function(v) {\r\n                return { value: v };\r\n            },\r\n        peg$c217 = function(k, v) {\r\n                return { key: k, value: v }; \r\n            },\r\n        peg$c218 = function(start, name, f, end) { return eUntermIfEmpty(end, \"function\", \"end\", start); },\r\n        peg$c219 = function(start, name, f, end) {\r\n\r\n\r\n\r\n                if ( name.type != \"MemberExpression\" && opt(\"allowRegularFunctions\", false) ) {\r\n                    //TODO: this would need to be decorated\r\n                    return builder.functionDeclaration(name, f.params, f.body);\r\n                }\r\n\r\n                //TODO: Translate member expression into call\r\n                var params = f.params.slice(0);\r\n                if ( name.selfSuggar ) params = [{type: \"Identifier\", name: \"self\"}].concat(f.params);\r\n\r\n                if ( f.rest ) {\r\n                    bhelper.injectRest(f.body.body, params.length);\r\n                }\r\n\r\n                var out = builder.functionExpression(null, params, f.body)\r\n                if ( opt('decorateLuaObjects', false) ) {\r\n                    out = bhelper.luaOperator(\"makeFunction\", out);\r\n                }\r\n\r\n                return bhelper.assign(name, out);\r\n            },\r\n        peg$c220 = function(start, name, f, end) {\r\n\r\n                if ( f.rest ) {\r\n                    bhelper.injectRest(f.body.body, f.params.length);\r\n                }\r\n\r\n                if ( opt(\"allowRegularFunctions\", false) )\r\n                    return builder.functionDeclaration(name, f.params, f.body);\r\n\r\n                var func = builder.functionExpression(name, f.params, f.body);\r\n                if ( opt('decorateLuaObjects', false) ) {\r\n                    func = bhelper.luaOperator(\"makeFunction\", func);\r\n                }\r\n\r\n                var decl = {type: \"VariableDeclarator\", id: name, init: func};\r\n                var out = builder.variableDeclaration(\"let\", [ decl ]);\r\n\r\n                return out;\r\n            },\r\n        peg$c221 = function(f) {\r\n                var result = {\r\n                    type: \"FunctionExpression\",\r\n                    body: f.body,\r\n                    params: f.params,\r\n                    loc:loc(),\r\n                    range:range()\r\n                }\r\n\r\n                if ( f.rest ) {\r\n                    bhelper.injectRest(f.body.body, f.params.length)\r\n                }\r\n\r\n                if ( opt('decorateLuaObjects', false) ) {\r\n                    return bhelper.luaOperator(\"makeFunction\", result);\r\n                } else {\r\n                    return result;\r\n                }\r\n\r\n            },\r\n        peg$c222 = function(start, b, end) { return eUntermIfEmpty(end, \"function\", \"end\", start); },\r\n        peg$c223 = function(start, b, end) { return b; },\r\n        peg$c224 = function(p, rest, body) {\r\n                return { params: p, body: body, rest: rest != null }\r\n            },\r\n        peg$c225 = function(body) {\r\n                return { params: [], body: body, rest: true }\r\n            },\r\n        peg$c226 = function(a, b) {\r\n                return listHelper(a,b); \r\n            },\r\n        peg$c227 = function() { \r\n                return [] \r\n            },\r\n        peg$c228 = function(o, e) { \r\n                var ops = {\"not\": \"!\", \"-\": \"-\", \"#\": \"#\" }\r\n                if ( o == \"#\" ) {\r\n                    e = bhelper.translateExpressionIfNeeded(e);\r\n                    return bhelper.luaOperator(\"count\", e);\r\n                }\r\n                return { \r\n                    type: \"UnaryExpression\",\r\n                    operator: ops[o],\r\n                    argument: bhelper.translateExpressionIfNeeded(e),\r\n                    prefix: true,\r\n                    loc: loc(),\r\n                    range: range()\r\n                }\r\n            },\r\n        peg$c229 = function(name) { return {\r\n                type: \"Identifier\",\r\n                name: name,\r\n                loc: loc(),\r\n                range: range()\r\n            } },\r\n        peg$c230 = function(a) {\r\n                var values = {\"nil\": null, \"false\": false, \"true\": true} \r\n                return { type: \"Literal\", value: values[a], loc: loc(), range: range() }\r\n\r\n            },\r\n        peg$c231 = /^[eE]/,\r\n        peg$c232 = { type: \"class\", value: \"[eE]\", description: \"[eE]\" },\r\n        peg$c233 = function(b, c) {\r\n                return { type: \"Literal\", value: parseFloat(b) * Math.pow(10, parseInt(c)), loc: loc(), range: range()  }\r\n\r\n            },\r\n        peg$c234 = \"0\",\r\n        peg$c235 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\r\n        peg$c236 = /^[Xx]/,\r\n        peg$c237 = { type: \"class\", value: \"[Xx]\", description: \"[Xx]\" },\r\n        peg$c238 = /^[0-9a-fA-F]/,\r\n        peg$c239 = { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\r\n        peg$c240 = function(b) {\r\n                return { type: \"Literal\", value: parseInt(b), loc: loc(), range: range()  }\r\n\r\n            },\r\n        peg$c241 = function(b) {\r\n                return { type: \"Literal\", value: parseFloat(b), loc: loc(), range: range()  }\r\n\r\n            },\r\n        peg$c242 = function(s) {\r\n                return { type: \"Literal\", value: s, loc: loc(), range: range()  }\r\n\r\n            },\r\n\r\n        peg$currPos          = 0,\r\n        peg$reportedPos      = 0,\r\n        peg$cachedPos        = 0,\r\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\r\n        peg$maxFailPos       = 0,\r\n        peg$maxFailExpected  = [],\r\n        peg$silentFails      = 0,\r\n\r\n        peg$result;\r\n\r\n    if (\"startRule\" in options) {\r\n      if (!(options.startRule in peg$startRuleFunctions)) {\r\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n      }\r\n\r\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n    }\r\n\r\n    function text() {\r\n      return input.substring(peg$reportedPos, peg$currPos);\r\n    }\r\n\r\n    function offset() {\r\n      return peg$reportedPos;\r\n    }\r\n\r\n    function line() {\r\n      return peg$computePosDetails(peg$reportedPos).line;\r\n    }\r\n\r\n    function column() {\r\n      return peg$computePosDetails(peg$reportedPos).column;\r\n    }\r\n\r\n    function expected(description) {\r\n      throw peg$buildException(\r\n        null,\r\n        [{ type: \"other\", description: description }],\r\n        peg$reportedPos\r\n      );\r\n    }\r\n\r\n    function error(message) {\r\n      throw peg$buildException(message, null, peg$reportedPos);\r\n    }\r\n\r\n    function peg$computePosDetails(pos) {\r\n      function advance(details, startPos, endPos) {\r\n        var p, ch;\r\n\r\n        for (p = startPos; p < endPos; p++) {\r\n          ch = input.charAt(p);\r\n          if (ch === \"\\n\") {\r\n            if (!details.seenCR) { details.line++; }\r\n            details.column = 1;\r\n            details.seenCR = false;\r\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\r\n            details.line++;\r\n            details.column = 1;\r\n            details.seenCR = true;\r\n          } else {\r\n            details.column++;\r\n            details.seenCR = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (peg$cachedPos !== pos) {\r\n        if (peg$cachedPos > pos) {\r\n          peg$cachedPos = 0;\r\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\r\n        }\r\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\r\n        peg$cachedPos = pos;\r\n      }\r\n\r\n      return peg$cachedPosDetails;\r\n    }\r\n\r\n    function peg$fail(expected) {\r\n      if (peg$currPos < peg$maxFailPos) { return; }\r\n\r\n      if (peg$currPos > peg$maxFailPos) {\r\n        peg$maxFailPos = peg$currPos;\r\n        peg$maxFailExpected = [];\r\n      }\r\n\r\n      peg$maxFailExpected.push(expected);\r\n    }\r\n\r\n    function peg$buildException(message, expected, pos) {\r\n      function cleanupExpected(expected) {\r\n        var i = 1;\r\n\r\n        expected.sort(function(a, b) {\r\n          if (a.description < b.description) {\r\n            return -1;\r\n          } else if (a.description > b.description) {\r\n            return 1;\r\n          } else {\r\n            return 0;\r\n          }\r\n        });\r\n\r\n        while (i < expected.length) {\r\n          if (expected[i - 1] === expected[i]) {\r\n            expected.splice(i, 1);\r\n          } else {\r\n            i++;\r\n          }\r\n        }\r\n      }\r\n\r\n      function buildMessage(expected, found) {\r\n        function stringEscape(s) {\r\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\r\n\r\n          return s\r\n            .replace(/\\\\/g,   '\\\\\\\\')\r\n            .replace(/\"/g,    '\\\\\"')\r\n            .replace(/\\x08/g, '\\\\b')\r\n            .replace(/\\t/g,   '\\\\t')\r\n            .replace(/\\n/g,   '\\\\n')\r\n            .replace(/\\f/g,   '\\\\f')\r\n            .replace(/\\r/g,   '\\\\r')\r\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\r\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\r\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\r\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\r\n        }\r\n\r\n        var expectedDescs = new Array(expected.length),\r\n            expectedDesc, foundDesc, i;\r\n\r\n        for (i = 0; i < expected.length; i++) {\r\n          expectedDescs[i] = expected[i].description;\r\n        }\r\n\r\n        expectedDesc = expected.length > 1\r\n          ? expectedDescs.slice(0, -1).join(\", \")\r\n              + \" or \"\r\n              + expectedDescs[expected.length - 1]\r\n          : expectedDescs[0];\r\n\r\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\r\n\r\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\r\n      }\r\n\r\n      var posDetails = peg$computePosDetails(pos),\r\n          found      = pos < input.length ? input.charAt(pos) : null;\r\n\r\n      if (expected !== null) {\r\n        cleanupExpected(expected);\r\n      }\r\n\r\n      return new SyntaxError(\r\n        message !== null ? message : buildMessage(expected, found),\r\n        expected,\r\n        found,\r\n        pos,\r\n        posDetails.line,\r\n        posDetails.column\r\n      );\r\n    }\r\n\r\n    function peg$parsestart() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      peg$reportedPos = peg$currPos;\r\n      s1 = peg$c1();\r\n      if (s1) {\r\n        s1 = peg$c2;\r\n      } else {\r\n        s1 = peg$c0;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 35) {\r\n          s3 = peg$c4;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = [];\r\n          if (peg$c7.test(input.charAt(peg$currPos))) {\r\n            s5 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n          }\r\n          while (s5 !== peg$FAILED) {\r\n            s4.push(s5);\r\n            if (peg$c7.test(input.charAt(peg$currPos))) {\r\n              s5 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n            }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 10) {\r\n              s5 = peg$c9;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s3 = [s3, s4, s5];\r\n              s2 = s3;\r\n            } else {\r\n              peg$currPos = s2;\r\n              s2 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$c0;\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsews();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$c3;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseBlockStatement();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsews();\r\n              if (s5 === peg$FAILED) {\r\n                s5 = peg$c3;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c11(s4);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsews() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = [];\r\n      if (peg$c12.test(input.charAt(peg$currPos))) {\r\n        s1 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c13); }\r\n      }\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$currPos;\r\n        if (input.substr(peg$currPos, 3) === peg$c14) {\r\n          s2 = peg$c14;\r\n          peg$currPos += 3;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsebalstringinsde();\r\n          if (s3 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 93) {\r\n              s4 = peg$c16;\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s2 = [s2, s3, s4];\r\n              s1 = s2;\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$c0;\r\n        }\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$currPos;\r\n          if (input.substr(peg$currPos, 2) === peg$c18) {\r\n            s2 = peg$c18;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            s4 = [];\r\n            if (peg$c7.test(input.charAt(peg$currPos))) {\r\n              s5 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n            }\r\n            while (s5 !== peg$FAILED) {\r\n              s4.push(s5);\r\n              if (peg$c7.test(input.charAt(peg$currPos))) {\r\n                s5 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n              }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 10) {\r\n                s5 = peg$c9;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s4 = [s4, s5];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n            if (s3 === peg$FAILED) {\r\n              s3 = [];\r\n              if (input.length > peg$currPos) {\r\n                s4 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s4 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n              }\r\n              while (s4 !== peg$FAILED) {\r\n                s3.push(s4);\r\n                if (input.length > peg$currPos) {\r\n                  s4 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n                }\r\n              }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s2 = [s2, s3];\r\n              s1 = s2;\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$c0;\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        while (s1 !== peg$FAILED) {\r\n          s0.push(s1);\r\n          if (peg$c12.test(input.charAt(peg$currPos))) {\r\n            s1 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\r\n          }\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$currPos;\r\n            if (input.substr(peg$currPos, 3) === peg$c14) {\r\n              s2 = peg$c14;\r\n              peg$currPos += 3;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c15); }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n              s3 = peg$parsebalstringinsde();\r\n              if (s3 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 93) {\r\n                  s4 = peg$c16;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  s2 = [s2, s3, s4];\r\n                  s1 = s2;\r\n                } else {\r\n                  peg$currPos = s1;\r\n                  s1 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s1;\r\n                s1 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$c0;\r\n            }\r\n            if (s1 === peg$FAILED) {\r\n              s1 = peg$currPos;\r\n              if (input.substr(peg$currPos, 2) === peg$c18) {\r\n                s2 = peg$c18;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s2 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n              }\r\n              if (s2 !== peg$FAILED) {\r\n                s3 = peg$currPos;\r\n                s4 = [];\r\n                if (peg$c7.test(input.charAt(peg$currPos))) {\r\n                  s5 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n                }\r\n                while (s5 !== peg$FAILED) {\r\n                  s4.push(s5);\r\n                  if (peg$c7.test(input.charAt(peg$currPos))) {\r\n                    s5 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n                  }\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 10) {\r\n                    s5 = peg$c9;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n                  }\r\n                  if (s5 !== peg$FAILED) {\r\n                    s4 = [s4, s5];\r\n                    s3 = s4;\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$c0;\r\n                }\r\n                if (s3 === peg$FAILED) {\r\n                  s3 = [];\r\n                  if (input.length > peg$currPos) {\r\n                    s4 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s4 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n                  }\r\n                  while (s4 !== peg$FAILED) {\r\n                    s3.push(s4);\r\n                    if (input.length > peg$currPos) {\r\n                      s4 = input.charAt(peg$currPos);\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s4 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n                    }\r\n                  }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                  s2 = [s2, s3];\r\n                  s1 = s2;\r\n                } else {\r\n                  peg$currPos = s1;\r\n                  s1 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s1;\r\n                s1 = peg$c0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsescws() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = [];\r\n      s1 = peg$currPos;\r\n      s2 = peg$parsews();\r\n      if (s2 === peg$FAILED) {\r\n        s2 = peg$c3;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 59) {\r\n          s3 = peg$c21;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parsews();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = peg$c3;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s2 = [s2, s3, s4];\r\n            s1 = s2;\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$c0;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        while (s1 !== peg$FAILED) {\r\n          s0.push(s1);\r\n          s1 = peg$currPos;\r\n          s2 = peg$parsews();\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 59) {\r\n              s3 = peg$c21;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parsews();\r\n              if (s4 === peg$FAILED) {\r\n                s4 = peg$c3;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                s2 = [s2, s3, s4];\r\n                s1 = s2;\r\n              } else {\r\n                peg$currPos = s1;\r\n                s1 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$c0;\r\n          }\r\n        }\r\n      } else {\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parsews();\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseBlockStatement() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseReturnStatement();\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c23(s1);\r\n      }\r\n      s0 = s1;\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseStatementList();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$currPos;\r\n          s3 = [];\r\n          s4 = peg$parsescws();\r\n          if (s4 !== peg$FAILED) {\r\n            while (s4 !== peg$FAILED) {\r\n              s3.push(s4);\r\n              s4 = peg$parsescws();\r\n            }\r\n          } else {\r\n            s3 = peg$c0;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseReturnStatement();\r\n            if (s4 !== peg$FAILED) {\r\n              s3 = [s3, s4];\r\n              s2 = s3;\r\n            } else {\r\n              peg$currPos = s2;\r\n              s2 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$c0;\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c24(s1, s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseStatementList() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseStatement();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$c3;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        s4 = [];\r\n        s5 = peg$parsescws();\r\n        if (s5 !== peg$FAILED) {\r\n          while (s5 !== peg$FAILED) {\r\n            s4.push(s5);\r\n            s5 = peg$parsescws();\r\n          }\r\n        } else {\r\n          s4 = peg$c0;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseStatement();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$currPos;\r\n          s4 = [];\r\n          s5 = peg$parsescws();\r\n          if (s5 !== peg$FAILED) {\r\n            while (s5 !== peg$FAILED) {\r\n              s4.push(s5);\r\n              s5 = peg$parsescws();\r\n            }\r\n          } else {\r\n            s4 = peg$c0;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseStatement();\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = [];\r\n          s4 = peg$currPos;\r\n          s5 = peg$parsews();\r\n          if (s5 === peg$FAILED) {\r\n            s5 = peg$c3;\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 59) {\r\n              s6 = peg$c21;\r\n              peg$currPos++;\r\n            } else {\r\n              s6 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s5 = [s5, s6];\r\n              s4 = s5;\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$c0;\r\n          }\r\n          while (s4 !== peg$FAILED) {\r\n            s3.push(s4);\r\n            s4 = peg$currPos;\r\n            s5 = peg$parsews();\r\n            if (s5 === peg$FAILED) {\r\n              s5 = peg$c3;\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 59) {\r\n                s6 = peg$c21;\r\n                peg$currPos++;\r\n              } else {\r\n                s6 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s5 = [s5, s6];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$c0;\r\n            }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c25(s1, s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseReservedWord() {\r\n      var s0, s1, s2;\r\n\r\n      if (input.substr(peg$currPos, 2) === peg$c26) {\r\n        s0 = peg$c26;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        if (input.substr(peg$currPos, 4) === peg$c28) {\r\n          s0 = peg$c28;\r\n          peg$currPos += 4;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 6) === peg$c30) {\r\n            s0 = peg$c30;\r\n            peg$currPos += 6;\r\n          } else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c31); }\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 4) === peg$c32) {\r\n              s0 = peg$c32;\r\n              peg$currPos += 4;\r\n            } else {\r\n              s0 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              if (input.substr(peg$currPos, 2) === peg$c34) {\r\n                s0 = peg$c34;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c35); }\r\n              }\r\n              if (s0 === peg$FAILED) {\r\n                if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                  s0 = peg$c36;\r\n                  peg$currPos += 3;\r\n                } else {\r\n                  s0 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                }\r\n                if (s0 === peg$FAILED) {\r\n                  if (input.substr(peg$currPos, 6) === peg$c38) {\r\n                    s0 = peg$c38;\r\n                    peg$currPos += 6;\r\n                  } else {\r\n                    s0 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c39); }\r\n                  }\r\n                  if (s0 === peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 5) === peg$c40) {\r\n                      s0 = peg$c40;\r\n                      peg$currPos += 5;\r\n                    } else {\r\n                      s0 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n                    }\r\n                    if (s0 === peg$FAILED) {\r\n                      if (input.substr(peg$currPos, 3) === peg$c42) {\r\n                        s0 = peg$c42;\r\n                        peg$currPos += 3;\r\n                      } else {\r\n                        s0 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n                      }\r\n                      if (s0 === peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 4) === peg$c44) {\r\n                          s0 = peg$c44;\r\n                          peg$currPos += 4;\r\n                        } else {\r\n                          s0 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n                        }\r\n                        if (s0 === peg$FAILED) {\r\n                          s0 = peg$currPos;\r\n                          if (input.substr(peg$currPos, 5) === peg$c46) {\r\n                            s1 = peg$c46;\r\n                            peg$currPos += 5;\r\n                          } else {\r\n                            s1 = peg$FAILED;\r\n                            if (peg$silentFails === 0) { peg$fail(peg$c47); }\r\n                          }\r\n                          if (s1 !== peg$FAILED) {\r\n                            if (input.substr(peg$currPos, 8) === peg$c48) {\r\n                              s2 = peg$c48;\r\n                              peg$currPos += 8;\r\n                            } else {\r\n                              s2 = peg$FAILED;\r\n                              if (peg$silentFails === 0) { peg$fail(peg$c49); }\r\n                            }\r\n                            if (s2 !== peg$FAILED) {\r\n                              s1 = [s1, s2];\r\n                              s0 = s1;\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$c0;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$c0;\r\n                          }\r\n                          if (s0 === peg$FAILED) {\r\n                            if (input.substr(peg$currPos, 3) === peg$c50) {\r\n                              s0 = peg$c50;\r\n                              peg$currPos += 3;\r\n                            } else {\r\n                              s0 = peg$FAILED;\r\n                              if (peg$silentFails === 0) { peg$fail(peg$c51); }\r\n                            }\r\n                            if (s0 === peg$FAILED) {\r\n                              if (input.substr(peg$currPos, 5) === peg$c52) {\r\n                                s0 = peg$c52;\r\n                                peg$currPos += 5;\r\n                              } else {\r\n                                s0 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c53); }\r\n                              }\r\n                              if (s0 === peg$FAILED) {\r\n                                if (input.substr(peg$currPos, 3) === peg$c54) {\r\n                                  s0 = peg$c54;\r\n                                  peg$currPos += 3;\r\n                                } else {\r\n                                  s0 = peg$FAILED;\r\n                                  if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n                                }\r\n                                if (s0 === peg$FAILED) {\r\n                                  if (input.substr(peg$currPos, 5) === peg$c56) {\r\n                                    s0 = peg$c56;\r\n                                    peg$currPos += 5;\r\n                                  } else {\r\n                                    s0 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }\r\n                                  }\r\n                                  if (s0 === peg$FAILED) {\r\n                                    if (input.substr(peg$currPos, 8) === peg$c48) {\r\n                                      s0 = peg$c48;\r\n                                      peg$currPos += 8;\r\n                                    } else {\r\n                                      s0 = peg$FAILED;\r\n                                      if (peg$silentFails === 0) { peg$fail(peg$c49); }\r\n                                    }\r\n                                    if (s0 === peg$FAILED) {\r\n                                      if (input.substr(peg$currPos, 5) === peg$c58) {\r\n                                        s0 = peg$c58;\r\n                                        peg$currPos += 5;\r\n                                      } else {\r\n                                        s0 = peg$FAILED;\r\n                                        if (peg$silentFails === 0) { peg$fail(peg$c59); }\r\n                                      }\r\n                                      if (s0 === peg$FAILED) {\r\n                                        s0 = peg$parsebinop();\r\n                                        if (s0 === peg$FAILED) {\r\n                                          s0 = peg$parseunop();\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseName() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$currPos;\r\n      peg$silentFails++;\r\n      s2 = peg$currPos;\r\n      s3 = peg$parseReservedWord();\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parsews();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.length > peg$currPos) {\r\n            s5 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s5 === peg$FAILED) {\r\n            s4 = peg$c2;\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$c0;\r\n          }\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s3 = [s3, s4];\r\n          s2 = s3;\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$c0;\r\n      }\r\n      peg$silentFails--;\r\n      if (s2 === peg$FAILED) {\r\n        s1 = peg$c2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$c0;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        s3 = peg$currPos;\r\n        if (peg$c60.test(input.charAt(peg$currPos))) {\r\n          s4 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c61); }\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = [];\r\n          if (peg$c62.test(input.charAt(peg$currPos))) {\r\n            s6 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s6 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c63); }\r\n          }\r\n          while (s6 !== peg$FAILED) {\r\n            s5.push(s6);\r\n            if (peg$c62.test(input.charAt(peg$currPos))) {\r\n              s6 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s6 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c63); }\r\n            }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s3 = input.substring(s2, peg$currPos);\r\n        }\r\n        s2 = s3;\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c64(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseNumber() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$currPos;\r\n      s2 = [];\r\n      if (peg$c65.test(input.charAt(peg$currPos))) {\r\n        s3 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          if (peg$c65.test(input.charAt(peg$currPos))) {\r\n            s3 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n          }\r\n        }\r\n      } else {\r\n        s2 = peg$c0;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 46) {\r\n          s4 = peg$c67;\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c68); }\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = [];\r\n          if (peg$c65.test(input.charAt(peg$currPos))) {\r\n            s6 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s6 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n          }\r\n          if (s6 !== peg$FAILED) {\r\n            while (s6 !== peg$FAILED) {\r\n              s5.push(s6);\r\n              if (peg$c65.test(input.charAt(peg$currPos))) {\r\n                s6 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s6 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n              }\r\n            }\r\n          } else {\r\n            s5 = peg$c0;\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$c3;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s2 = [s2, s3];\r\n          s1 = s2;\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$c0;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s1 = input.substring(s0, peg$currPos);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsestringchar() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 92) {\r\n        s1 = peg$c69;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c70); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        if (peg$c71.test(input.charAt(peg$currPos))) {\r\n          s2 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c72); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c73(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.substr(peg$currPos, 2) === peg$c74) {\r\n          s1 = peg$c74;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c75); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c76();\r\n        }\r\n        s0 = s1;\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          if (input.substr(peg$currPos, 2) === peg$c77) {\r\n            s1 = peg$c77;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c78); }\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            s2 = peg$parsews();\r\n            if (s2 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c79();\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            if (input.substr(peg$currPos, 2) === peg$c80) {\r\n              s1 = peg$c80;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s1 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c81); }\r\n            }\r\n            if (s1 !== peg$FAILED) {\r\n              s2 = peg$currPos;\r\n              if (peg$c82.test(input.charAt(peg$currPos))) {\r\n                s3 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s3 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c83); }\r\n              }\r\n              if (s3 !== peg$FAILED) {\r\n                s3 = input.substring(s2, peg$currPos);\r\n              }\r\n              s2 = s3;\r\n              if (s2 !== peg$FAILED) {\r\n                s3 = peg$currPos;\r\n                if (peg$c82.test(input.charAt(peg$currPos))) {\r\n                  s4 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c83); }\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  s4 = input.substring(s3, peg$currPos);\r\n                }\r\n                s3 = s4;\r\n                if (s3 !== peg$FAILED) {\r\n                  peg$reportedPos = s0;\r\n                  s1 = peg$c84(s2, s3);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 92) {\r\n                s1 = peg$c69;\r\n                peg$currPos++;\r\n              } else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\r\n              }\r\n              if (s1 !== peg$FAILED) {\r\n                s2 = peg$currPos;\r\n                if (peg$c65.test(input.charAt(peg$currPos))) {\r\n                  s3 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s3 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                  s3 = input.substring(s2, peg$currPos);\r\n                }\r\n                s2 = s3;\r\n                if (s2 !== peg$FAILED) {\r\n                  s3 = peg$currPos;\r\n                  if (peg$c65.test(input.charAt(peg$currPos))) {\r\n                    s4 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s4 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n                  }\r\n                  if (s4 === peg$FAILED) {\r\n                    s4 = peg$c3;\r\n                  }\r\n                  if (s4 !== peg$FAILED) {\r\n                    s4 = input.substring(s3, peg$currPos);\r\n                  }\r\n                  s3 = s4;\r\n                  if (s3 !== peg$FAILED) {\r\n                    s4 = peg$currPos;\r\n                    if (peg$c65.test(input.charAt(peg$currPos))) {\r\n                      s5 = input.charAt(peg$currPos);\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s5 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n                    }\r\n                    if (s5 === peg$FAILED) {\r\n                      s5 = peg$c3;\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                      s5 = input.substring(s4, peg$currPos);\r\n                    }\r\n                    s4 = s5;\r\n                    if (s4 !== peg$FAILED) {\r\n                      peg$reportedPos = s0;\r\n                      s1 = peg$c85(s2, s3, s4);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$currPos;\r\n                if (input.charCodeAt(peg$currPos) === 92) {\r\n                  s1 = peg$c69;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s1 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c70); }\r\n                }\r\n                if (s1 !== peg$FAILED) {\r\n                  peg$reportedPos = s0;\r\n                  s1 = peg$c86();\r\n                }\r\n                s0 = s1;\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$currPos;\r\n                  if (peg$c87.test(input.charAt(peg$currPos))) {\r\n                    s1 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s1 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c88); }\r\n                  }\r\n                  if (s1 !== peg$FAILED) {\r\n                    s1 = input.substring(s0, peg$currPos);\r\n                  }\r\n                  s0 = s1;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsesinglequote() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (peg$c89.test(input.charAt(peg$currPos))) {\r\n        s1 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c90); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c91();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsedoublequote() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (peg$c92.test(input.charAt(peg$currPos))) {\r\n        s1 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c91();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseString() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsedoublequote();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$parsestringchar();\r\n        if (s3 === peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 39) {\r\n            s3 = peg$c94;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c95); }\r\n          }\r\n        }\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$parsestringchar();\r\n          if (s3 === peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 39) {\r\n              s3 = peg$c94;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c95); }\r\n            }\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsedoublequote();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = [];\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = peg$currPos;\r\n            s4 = peg$c96(s1, s2, s3);\r\n            if (s4) {\r\n              s4 = peg$c2;\r\n            } else {\r\n              s4 = peg$c0;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c97(s1, s2, s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parsesinglequote();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = [];\r\n          s3 = peg$parsestringchar();\r\n          if (s3 === peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 34) {\r\n              s3 = peg$c98;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c99); }\r\n            }\r\n          }\r\n          while (s3 !== peg$FAILED) {\r\n            s2.push(s3);\r\n            s3 = peg$parsestringchar();\r\n            if (s3 === peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 34) {\r\n                s3 = peg$c98;\r\n                peg$currPos++;\r\n              } else {\r\n                s3 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c99); }\r\n              }\r\n            }\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parsesinglequote();\r\n            if (s3 === peg$FAILED) {\r\n              s3 = [];\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              peg$reportedPos = peg$currPos;\r\n              s4 = peg$c100(s1, s2, s3);\r\n              if (s4) {\r\n                s4 = peg$c2;\r\n              } else {\r\n                s4 = peg$c0;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c97(s1, s2, s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s1 = peg$c101;\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            s2 = peg$parsebalstringinsde();\r\n            if (s2 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 93) {\r\n                s3 = peg$c16;\r\n                peg$currPos++;\r\n              } else {\r\n                s3 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n              }\r\n              if (s3 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c103(s2);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebalstringinsde() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 61) {\r\n        s1 = peg$c104;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsebalstringinsde();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 61) {\r\n            s3 = peg$c104;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c64(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 91) {\r\n          s1 = peg$c101;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          if (peg$c106.test(input.charAt(peg$currPos))) {\r\n            s2 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c107); }\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            s4 = [];\r\n            s5 = peg$currPos;\r\n            s6 = peg$currPos;\r\n            peg$silentFails++;\r\n            s7 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 93) {\r\n              s8 = peg$c16;\r\n              peg$currPos++;\r\n            } else {\r\n              s8 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n            }\r\n            if (s8 !== peg$FAILED) {\r\n              s9 = [];\r\n              if (input.charCodeAt(peg$currPos) === 61) {\r\n                s10 = peg$c104;\r\n                peg$currPos++;\r\n              } else {\r\n                s10 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n              }\r\n              while (s10 !== peg$FAILED) {\r\n                s9.push(s10);\r\n                if (input.charCodeAt(peg$currPos) === 61) {\r\n                  s10 = peg$c104;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s10 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n                }\r\n              }\r\n              if (s9 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 93) {\r\n                  s10 = peg$c16;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s10 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n                }\r\n                if (s10 !== peg$FAILED) {\r\n                  s8 = [s8, s9, s10];\r\n                  s7 = s8;\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s7;\r\n                s7 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s7;\r\n              s7 = peg$c0;\r\n            }\r\n            peg$silentFails--;\r\n            if (s7 === peg$FAILED) {\r\n              s6 = peg$c2;\r\n            } else {\r\n              peg$currPos = s6;\r\n              s6 = peg$c0;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              if (input.length > peg$currPos) {\r\n                s7 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s7 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s6 = [s6, s7];\r\n                s5 = s6;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$c0;\r\n            }\r\n            while (s5 !== peg$FAILED) {\r\n              s4.push(s5);\r\n              s5 = peg$currPos;\r\n              s6 = peg$currPos;\r\n              peg$silentFails++;\r\n              s7 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 93) {\r\n                s8 = peg$c16;\r\n                peg$currPos++;\r\n              } else {\r\n                s8 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n              }\r\n              if (s8 !== peg$FAILED) {\r\n                s9 = [];\r\n                if (input.charCodeAt(peg$currPos) === 61) {\r\n                  s10 = peg$c104;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s10 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n                }\r\n                while (s10 !== peg$FAILED) {\r\n                  s9.push(s10);\r\n                  if (input.charCodeAt(peg$currPos) === 61) {\r\n                    s10 = peg$c104;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s10 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n                  }\r\n                }\r\n                if (s9 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s10 = peg$c16;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s10 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n                  }\r\n                  if (s10 !== peg$FAILED) {\r\n                    s8 = [s8, s9, s10];\r\n                    s7 = s8;\r\n                  } else {\r\n                    peg$currPos = s7;\r\n                    s7 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s7;\r\n                s7 = peg$c0;\r\n              }\r\n              peg$silentFails--;\r\n              if (s7 === peg$FAILED) {\r\n                s6 = peg$c2;\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$c0;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.length > peg$currPos) {\r\n                  s7 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s6 = [s6, s7];\r\n                  s5 = s6;\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$c0;\r\n              }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s4 = input.substring(s3, peg$currPos);\r\n            }\r\n            s3 = s4;\r\n            if (s3 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 93) {\r\n                s4 = peg$c16;\r\n                peg$currPos++;\r\n              } else {\r\n                s4 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c108(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseStatement() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$parseDebugger();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseBreakStatement();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseNumericFor();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseForEach();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseRepeatUntil();\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parseWhileStatement();\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$parseIfStatement();\r\n                  if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseExpressionStatement();\r\n                    if (s0 === peg$FAILED) {\r\n                      s0 = peg$parseDoEndGrouped();\r\n                      if (s0 === peg$FAILED) {\r\n                        s0 = peg$parseLocalAssingment();\r\n                        if (s0 === peg$FAILED) {\r\n                          s0 = peg$parseFunctionDeclaration();\r\n                          if (s0 === peg$FAILED) {\r\n                            s0 = peg$parseLocalFunction();\r\n                            if (s0 === peg$FAILED) {\r\n                              s0 = peg$currPos;\r\n                              s1 = peg$currPos;\r\n                              peg$silentFails++;\r\n                              s2 = peg$currPos;\r\n                              s3 = peg$parsews();\r\n                              if (s3 === peg$FAILED) {\r\n                                s3 = peg$c3;\r\n                              }\r\n                              if (s3 !== peg$FAILED) {\r\n                                s4 = peg$parseReservedWord();\r\n                                if (s4 !== peg$FAILED) {\r\n                                  s3 = [s3, s4];\r\n                                  s2 = s3;\r\n                                } else {\r\n                                  peg$currPos = s2;\r\n                                  s2 = peg$c0;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s2;\r\n                                s2 = peg$c0;\r\n                              }\r\n                              peg$silentFails--;\r\n                              if (s2 === peg$FAILED) {\r\n                                s1 = peg$c2;\r\n                              } else {\r\n                                peg$currPos = s1;\r\n                                s1 = peg$c0;\r\n                              }\r\n                              if (s1 !== peg$FAILED) {\r\n                                s2 = peg$currPos;\r\n                                s3 = peg$parseExpression();\r\n                                if (s3 !== peg$FAILED) {\r\n                                  s3 = input.substring(s2, peg$currPos);\r\n                                }\r\n                                s2 = s3;\r\n                                if (s2 !== peg$FAILED) {\r\n                                  peg$reportedPos = peg$currPos;\r\n                                  s3 = peg$c109(s2);\r\n                                  if (s3) {\r\n                                    s3 = peg$c2;\r\n                                  } else {\r\n                                    s3 = peg$c0;\r\n                                  }\r\n                                  if (s3 !== peg$FAILED) {\r\n                                    peg$reportedPos = s0;\r\n                                    s1 = peg$c110(s2);\r\n                                    s0 = s1;\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$c0;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$c0;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$c0;\r\n                              }\r\n                              if (s0 === peg$FAILED) {\r\n                                s0 = peg$currPos;\r\n                                s1 = peg$currPos;\r\n                                peg$silentFails++;\r\n                                s2 = peg$currPos;\r\n                                s3 = peg$parsews();\r\n                                if (s3 === peg$FAILED) {\r\n                                  s3 = peg$c3;\r\n                                }\r\n                                if (s3 !== peg$FAILED) {\r\n                                  s4 = peg$parseReservedWord();\r\n                                  if (s4 !== peg$FAILED) {\r\n                                    s3 = [s3, s4];\r\n                                    s2 = s3;\r\n                                  } else {\r\n                                    peg$currPos = s2;\r\n                                    s2 = peg$c0;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s2;\r\n                                  s2 = peg$c0;\r\n                                }\r\n                                peg$silentFails--;\r\n                                if (s2 === peg$FAILED) {\r\n                                  s1 = peg$c2;\r\n                                } else {\r\n                                  peg$currPos = s1;\r\n                                  s1 = peg$c0;\r\n                                }\r\n                                if (s1 !== peg$FAILED) {\r\n                                  s2 = peg$currPos;\r\n                                  s3 = peg$parseIdentifier();\r\n                                  if (s3 !== peg$FAILED) {\r\n                                    s3 = input.substring(s2, peg$currPos);\r\n                                  }\r\n                                  s2 = s3;\r\n                                  if (s2 !== peg$FAILED) {\r\n                                    peg$reportedPos = peg$currPos;\r\n                                    s3 = peg$c111(s2);\r\n                                    if (s3) {\r\n                                      s3 = peg$c2;\r\n                                    } else {\r\n                                      s3 = peg$c0;\r\n                                    }\r\n                                    if (s3 !== peg$FAILED) {\r\n                                      peg$reportedPos = s0;\r\n                                      s1 = peg$c110(s2);\r\n                                      s0 = s1;\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$c0;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$c0;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$c0;\r\n                                }\r\n                                if (s0 === peg$FAILED) {\r\n                                  s0 = peg$currPos;\r\n                                  s1 = peg$currPos;\r\n                                  peg$silentFails++;\r\n                                  s2 = peg$currPos;\r\n                                  s3 = peg$parsews();\r\n                                  if (s3 === peg$FAILED) {\r\n                                    s3 = peg$c3;\r\n                                  }\r\n                                  if (s3 !== peg$FAILED) {\r\n                                    s4 = peg$parseReservedWord();\r\n                                    if (s4 !== peg$FAILED) {\r\n                                      s3 = [s3, s4];\r\n                                      s2 = s3;\r\n                                    } else {\r\n                                      peg$currPos = s2;\r\n                                      s2 = peg$c0;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s2;\r\n                                    s2 = peg$c0;\r\n                                  }\r\n                                  peg$silentFails--;\r\n                                  if (s2 === peg$FAILED) {\r\n                                    s1 = peg$c2;\r\n                                  } else {\r\n                                    peg$currPos = s1;\r\n                                    s1 = peg$c0;\r\n                                  }\r\n                                  if (s1 !== peg$FAILED) {\r\n                                    s2 = peg$currPos;\r\n                                    if (peg$c112.test(input.charAt(peg$currPos))) {\r\n                                      s3 = input.charAt(peg$currPos);\r\n                                      peg$currPos++;\r\n                                    } else {\r\n                                      s3 = peg$FAILED;\r\n                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                                    }\r\n                                    if (s3 !== peg$FAILED) {\r\n                                      s3 = input.substring(s2, peg$currPos);\r\n                                    }\r\n                                    s2 = s3;\r\n                                    if (s2 !== peg$FAILED) {\r\n                                      s3 = [];\r\n                                      if (peg$c7.test(input.charAt(peg$currPos))) {\r\n                                        s4 = input.charAt(peg$currPos);\r\n                                        peg$currPos++;\r\n                                      } else {\r\n                                        s4 = peg$FAILED;\r\n                                        if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n                                      }\r\n                                      while (s4 !== peg$FAILED) {\r\n                                        s3.push(s4);\r\n                                        if (peg$c7.test(input.charAt(peg$currPos))) {\r\n                                          s4 = input.charAt(peg$currPos);\r\n                                          peg$currPos++;\r\n                                        } else {\r\n                                          s4 = peg$FAILED;\r\n                                          if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n                                        }\r\n                                      }\r\n                                      if (s3 !== peg$FAILED) {\r\n                                        if (peg$c106.test(input.charAt(peg$currPos))) {\r\n                                          s4 = input.charAt(peg$currPos);\r\n                                          peg$currPos++;\r\n                                        } else {\r\n                                          s4 = peg$FAILED;\r\n                                          if (peg$silentFails === 0) { peg$fail(peg$c107); }\r\n                                        }\r\n                                        if (s4 === peg$FAILED) {\r\n                                          s4 = peg$currPos;\r\n                                          peg$silentFails++;\r\n                                          if (input.length > peg$currPos) {\r\n                                            s5 = input.charAt(peg$currPos);\r\n                                            peg$currPos++;\r\n                                          } else {\r\n                                            s5 = peg$FAILED;\r\n                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }\r\n                                          }\r\n                                          peg$silentFails--;\r\n                                          if (s5 === peg$FAILED) {\r\n                                            s4 = peg$c2;\r\n                                          } else {\r\n                                            peg$currPos = s4;\r\n                                            s4 = peg$c0;\r\n                                          }\r\n                                        }\r\n                                        if (s4 !== peg$FAILED) {\r\n                                          peg$reportedPos = peg$currPos;\r\n                                          s5 = peg$c114(s2);\r\n                                          if (s5) {\r\n                                            s5 = peg$c2;\r\n                                          } else {\r\n                                            s5 = peg$c0;\r\n                                          }\r\n                                          if (s5 !== peg$FAILED) {\r\n                                            peg$reportedPos = s0;\r\n                                            s1 = peg$c110(s2);\r\n                                            s0 = s1;\r\n                                          } else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$c0;\r\n                                          }\r\n                                        } else {\r\n                                          peg$currPos = s0;\r\n                                          s0 = peg$c0;\r\n                                        }\r\n                                      } else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$c0;\r\n                                      }\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$c0;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$c0;\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseDebugger() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 8) === peg$c115) {\r\n        s1 = peg$c115;\r\n        peg$currPos += 8;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c116); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c117();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseDoEndGrouped() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsedo();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parseBlockStatement();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parsews();\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$c3;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            if (input.substr(peg$currPos, 3) === peg$c36) {\r\n              s4 = peg$c36;\r\n              peg$currPos += 3;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n            }\r\n            if (s4 === peg$FAILED) {\r\n              s4 = [];\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              peg$reportedPos = peg$currPos;\r\n              s5 = peg$c118(s1, s3, s4);\r\n              if (s5) {\r\n                s5 = peg$c2;\r\n              } else {\r\n                s5 = peg$c0;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c119(s1, s3, s4);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseif() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 2) === peg$c26) {\r\n        s1 = peg$c26;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c91();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsedo() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 2) === peg$c34) {\r\n        s1 = peg$c34;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c91();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefor() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 3) === peg$c54) {\r\n        s1 = peg$c54;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c91();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefunction() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 8) === peg$c48) {\r\n        s1 = peg$c48;\r\n        peg$currPos += 8;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c91();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseNumericFor() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsefor();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseIdentifier();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 61) {\r\n                s5 = peg$c104;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = peg$c3;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseExpression();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parsews();\r\n                    if (s8 === peg$FAILED) {\r\n                      s8 = peg$c3;\r\n                    }\r\n                    if (s8 !== peg$FAILED) {\r\n                      if (input.charCodeAt(peg$currPos) === 44) {\r\n                        s9 = peg$c120;\r\n                        peg$currPos++;\r\n                      } else {\r\n                        s9 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n                      }\r\n                      if (s9 !== peg$FAILED) {\r\n                        s10 = peg$parsews();\r\n                        if (s10 === peg$FAILED) {\r\n                          s10 = peg$c3;\r\n                        }\r\n                        if (s10 !== peg$FAILED) {\r\n                          s11 = peg$parseExpression();\r\n                          if (s11 !== peg$FAILED) {\r\n                            s12 = peg$currPos;\r\n                            s13 = peg$parsews();\r\n                            if (s13 === peg$FAILED) {\r\n                              s13 = peg$c3;\r\n                            }\r\n                            if (s13 !== peg$FAILED) {\r\n                              if (input.charCodeAt(peg$currPos) === 44) {\r\n                                s14 = peg$c120;\r\n                                peg$currPos++;\r\n                              } else {\r\n                                s14 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n                              }\r\n                              if (s14 !== peg$FAILED) {\r\n                                s15 = peg$parsews();\r\n                                if (s15 === peg$FAILED) {\r\n                                  s15 = peg$c3;\r\n                                }\r\n                                if (s15 !== peg$FAILED) {\r\n                                  s16 = peg$parseExpression();\r\n                                  if (s16 !== peg$FAILED) {\r\n                                    s13 = [s13, s14, s15, s16];\r\n                                    s12 = s13;\r\n                                  } else {\r\n                                    peg$currPos = s12;\r\n                                    s12 = peg$c0;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s12;\r\n                                  s12 = peg$c0;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s12;\r\n                                s12 = peg$c0;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s12;\r\n                              s12 = peg$c0;\r\n                            }\r\n                            if (s12 === peg$FAILED) {\r\n                              s12 = peg$c3;\r\n                            }\r\n                            if (s12 !== peg$FAILED) {\r\n                              s13 = peg$parsews();\r\n                              if (s13 !== peg$FAILED) {\r\n                                if (input.substr(peg$currPos, 2) === peg$c34) {\r\n                                  s14 = peg$c34;\r\n                                  peg$currPos += 2;\r\n                                } else {\r\n                                  s14 = peg$FAILED;\r\n                                  if (peg$silentFails === 0) { peg$fail(peg$c35); }\r\n                                }\r\n                                if (s14 !== peg$FAILED) {\r\n                                  s15 = peg$parsews();\r\n                                  if (s15 !== peg$FAILED) {\r\n                                    s16 = peg$currPos;\r\n                                    s17 = peg$parseBlockStatement();\r\n                                    if (s17 !== peg$FAILED) {\r\n                                      s18 = peg$parsews();\r\n                                      if (s18 !== peg$FAILED) {\r\n                                        s17 = [s17, s18];\r\n                                        s16 = s17;\r\n                                      } else {\r\n                                        peg$currPos = s16;\r\n                                        s16 = peg$c0;\r\n                                      }\r\n                                    } else {\r\n                                      peg$currPos = s16;\r\n                                      s16 = peg$c0;\r\n                                    }\r\n                                    if (s16 === peg$FAILED) {\r\n                                      s16 = peg$c3;\r\n                                    }\r\n                                    if (s16 !== peg$FAILED) {\r\n                                      if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                                        s17 = peg$c36;\r\n                                        peg$currPos += 3;\r\n                                      } else {\r\n                                        s17 = peg$FAILED;\r\n                                        if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                                      }\r\n                                      if (s17 === peg$FAILED) {\r\n                                        s17 = [];\r\n                                      }\r\n                                      if (s17 !== peg$FAILED) {\r\n                                        peg$reportedPos = peg$currPos;\r\n                                        s18 = peg$c122(s1, s3, s7, s11, s12, s16, s17);\r\n                                        if (s18) {\r\n                                          s18 = peg$c2;\r\n                                        } else {\r\n                                          s18 = peg$c0;\r\n                                        }\r\n                                        if (s18 !== peg$FAILED) {\r\n                                          peg$reportedPos = s0;\r\n                                          s1 = peg$c123(s1, s3, s7, s11, s12, s16, s17);\r\n                                          s0 = s1;\r\n                                        } else {\r\n                                          peg$currPos = s0;\r\n                                          s0 = peg$c0;\r\n                                        }\r\n                                      } else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$c0;\r\n                                      }\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$c0;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$c0;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$c0;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$c0;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$c0;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$c0;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$c0;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseForEach() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsefor();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsenamelist();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.substr(peg$currPos, 2) === peg$c124) {\r\n                s5 = peg$c124;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c125); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseexplist();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parsews();\r\n                    if (s8 !== peg$FAILED) {\r\n                      if (input.substr(peg$currPos, 2) === peg$c34) {\r\n                        s9 = peg$c34;\r\n                        peg$currPos += 2;\r\n                      } else {\r\n                        s9 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c35); }\r\n                      }\r\n                      if (s9 !== peg$FAILED) {\r\n                        s10 = peg$parsews();\r\n                        if (s10 === peg$FAILED) {\r\n                          s10 = peg$c3;\r\n                        }\r\n                        if (s10 !== peg$FAILED) {\r\n                          s11 = peg$parseBlockStatement();\r\n                          if (s11 !== peg$FAILED) {\r\n                            s12 = peg$parsews();\r\n                            if (s12 === peg$FAILED) {\r\n                              s12 = peg$c3;\r\n                            }\r\n                            if (s12 !== peg$FAILED) {\r\n                              if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                                s13 = peg$c36;\r\n                                peg$currPos += 3;\r\n                              } else {\r\n                                s13 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                              }\r\n                              if (s13 === peg$FAILED) {\r\n                                s13 = [];\r\n                              }\r\n                              if (s13 !== peg$FAILED) {\r\n                                peg$reportedPos = peg$currPos;\r\n                                s14 = peg$c126(s1, s3, s7, s11, s13);\r\n                                if (s14) {\r\n                                  s14 = peg$c2;\r\n                                } else {\r\n                                  s14 = peg$c0;\r\n                                }\r\n                                if (s14 !== peg$FAILED) {\r\n                                  peg$reportedPos = s0;\r\n                                  s1 = peg$c127(s1, s3, s7, s11, s13);\r\n                                  s0 = s1;\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$c0;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$c0;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$c0;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$c0;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$c0;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseLocalAssingment() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 5) === peg$c40) {\r\n        s1 = peg$c40;\r\n        peg$currPos += 5;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsenamelist();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 61) {\r\n                s5 = peg$c104;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = peg$c3;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseexplist();\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$reportedPos = s0;\r\n                    s1 = peg$c128(s3, s7);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.substr(peg$currPos, 5) === peg$c40) {\r\n          s1 = peg$c40;\r\n          peg$currPos += 5;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parsews();\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parsenamelist();\r\n            if (s3 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c129(s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseAssignmentExpression() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsevarlist();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 61) {\r\n            s3 = peg$c104;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseexplist();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c130(s1, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseBreakStatement() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 5) === peg$c52) {\r\n        s1 = peg$c52;\r\n        peg$currPos += 5;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c53); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c131();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseExpressionStatement() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseAssignmentExpression();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseCallExpression();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c132(s1);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseelseif() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 6) === peg$c30) {\r\n        s1 = peg$c30;\r\n        peg$currPos += 6;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.substr(peg$currPos, 4) === peg$c28) {\r\n                s5 = peg$c28;\r\n                peg$currPos += 4;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c29); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseBlockStatement();\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$reportedPos = s0;\r\n                    s1 = peg$c133(s3, s7);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseIfStatement() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseif();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.substr(peg$currPos, 4) === peg$c28) {\r\n                s5 = peg$c28;\r\n                peg$currPos += 4;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c29); }\r\n              }\r\n              if (s5 === peg$FAILED) {\r\n                peg$reportedPos = peg$currPos;\r\n                s5 = peg$c134();\r\n                if (s5) {\r\n                  s5 = peg$c2;\r\n                } else {\r\n                  s5 = peg$c0;\r\n                }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseBlockStatement();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = [];\r\n                    s9 = peg$currPos;\r\n                    s10 = peg$parsews();\r\n                    if (s10 === peg$FAILED) {\r\n                      s10 = peg$c3;\r\n                    }\r\n                    if (s10 !== peg$FAILED) {\r\n                      s11 = peg$parseelseif();\r\n                      if (s11 !== peg$FAILED) {\r\n                        s10 = [s10, s11];\r\n                        s9 = s10;\r\n                      } else {\r\n                        peg$currPos = s9;\r\n                        s9 = peg$c0;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s9;\r\n                      s9 = peg$c0;\r\n                    }\r\n                    while (s9 !== peg$FAILED) {\r\n                      s8.push(s9);\r\n                      s9 = peg$currPos;\r\n                      s10 = peg$parsews();\r\n                      if (s10 === peg$FAILED) {\r\n                        s10 = peg$c3;\r\n                      }\r\n                      if (s10 !== peg$FAILED) {\r\n                        s11 = peg$parseelseif();\r\n                        if (s11 !== peg$FAILED) {\r\n                          s10 = [s10, s11];\r\n                          s9 = s10;\r\n                        } else {\r\n                          peg$currPos = s9;\r\n                          s9 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s9;\r\n                        s9 = peg$c0;\r\n                      }\r\n                    }\r\n                    if (s8 !== peg$FAILED) {\r\n                      s9 = peg$currPos;\r\n                      s10 = peg$parsews();\r\n                      if (s10 === peg$FAILED) {\r\n                        s10 = peg$c3;\r\n                      }\r\n                      if (s10 !== peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 4) === peg$c32) {\r\n                          s11 = peg$c32;\r\n                          peg$currPos += 4;\r\n                        } else {\r\n                          s11 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c33); }\r\n                        }\r\n                        if (s11 !== peg$FAILED) {\r\n                          s12 = peg$parsews();\r\n                          if (s12 !== peg$FAILED) {\r\n                            s13 = peg$parseBlockStatement();\r\n                            if (s13 !== peg$FAILED) {\r\n                              s10 = [s10, s11, s12, s13];\r\n                              s9 = s10;\r\n                            } else {\r\n                              peg$currPos = s9;\r\n                              s9 = peg$c0;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s9;\r\n                            s9 = peg$c0;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s9;\r\n                          s9 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s9;\r\n                        s9 = peg$c0;\r\n                      }\r\n                      if (s9 === peg$FAILED) {\r\n                        s9 = peg$c3;\r\n                      }\r\n                      if (s9 !== peg$FAILED) {\r\n                        s10 = peg$parsews();\r\n                        if (s10 === peg$FAILED) {\r\n                          s10 = peg$c3;\r\n                        }\r\n                        if (s10 !== peg$FAILED) {\r\n                          if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                            s11 = peg$c36;\r\n                            peg$currPos += 3;\r\n                          } else {\r\n                            s11 = peg$FAILED;\r\n                            if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                          }\r\n                          if (s11 === peg$FAILED) {\r\n                            s11 = [];\r\n                          }\r\n                          if (s11 !== peg$FAILED) {\r\n                            peg$reportedPos = peg$currPos;\r\n                            s12 = peg$c135(s1, s3, s7, s8, s9, s11);\r\n                            if (s12) {\r\n                              s12 = peg$c2;\r\n                            } else {\r\n                              s12 = peg$c0;\r\n                            }\r\n                            if (s12 !== peg$FAILED) {\r\n                              peg$reportedPos = s0;\r\n                              s1 = peg$c136(s1, s3, s7, s8, s9, s11);\r\n                              s0 = s1;\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$c0;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$c0;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$c0;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseReturnStatement() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 6) === peg$c38) {\r\n        s1 = peg$c38;\r\n        peg$currPos += 6;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseexplist();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c137(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.substr(peg$currPos, 6) === peg$c38) {\r\n          s1 = peg$c38;\r\n          peg$currPos += 6;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c39); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c138();\r\n        }\r\n        s0 = s1;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseWhileStatement() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 5) === peg$c58) {\r\n        s1 = peg$c58;\r\n        peg$currPos += 5;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c59); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.substr(peg$currPos, 2) === peg$c34) {\r\n                s5 = peg$c34;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c35); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$currPos;\r\n                  s8 = peg$parseBlockStatement();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parsews();\r\n                    if (s9 !== peg$FAILED) {\r\n                      s8 = [s8, s9];\r\n                      s7 = s8;\r\n                    } else {\r\n                      peg$currPos = s7;\r\n                      s7 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s7;\r\n                    s7 = peg$c0;\r\n                  }\r\n                  if (s7 === peg$FAILED) {\r\n                    s7 = peg$c3;\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                      s8 = peg$c36;\r\n                      peg$currPos += 3;\r\n                    } else {\r\n                      s8 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                    }\r\n                    if (s8 === peg$FAILED) {\r\n                      peg$reportedPos = peg$currPos;\r\n                      s8 = peg$c139();\r\n                      if (s8) {\r\n                        s8 = peg$c2;\r\n                      } else {\r\n                        s8 = peg$c0;\r\n                      }\r\n                    }\r\n                    if (s8 !== peg$FAILED) {\r\n                      peg$reportedPos = s0;\r\n                      s1 = peg$c140(s3, s7);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseRepeatUntil() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 6) === peg$c141) {\r\n        s1 = peg$c141;\r\n        peg$currPos += 6;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c142); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parseBlockStatement();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parsews();\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$c3;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.substr(peg$currPos, 5) === peg$c56) {\r\n                s5 = peg$c56;\r\n                peg$currPos += 5;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c57); }\r\n              }\r\n              if (s5 === peg$FAILED) {\r\n                peg$reportedPos = peg$currPos;\r\n                s5 = peg$c143();\r\n                if (s5) {\r\n                  s5 = peg$c2;\r\n                } else {\r\n                  s5 = peg$c0;\r\n                }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseExpression();\r\n                  if (s7 === peg$FAILED) {\r\n                    peg$reportedPos = peg$currPos;\r\n                    s7 = peg$c144();\r\n                    if (s7) {\r\n                      s7 = peg$c2;\r\n                    } else {\r\n                      s7 = peg$c0;\r\n                    }\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$reportedPos = s0;\r\n                    s1 = peg$c145(s3, s7);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseThat() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 4) === peg$c146) {\r\n        s1 = peg$c146;\r\n        peg$currPos += 4;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c148();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseSimpleExpression() {\r\n      var s0;\r\n\r\n      s0 = peg$parseLiteral();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseResetExpression();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseFunctionExpression();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseCallExpression();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseThat();\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parseIdentifier();\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$parseObjectExpression();\r\n                  if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseUnaryExpression();\r\n                    if (s0 === peg$FAILED) {\r\n                      s0 = peg$parseParenExpr();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseExpression() {\r\n      var s0;\r\n\r\n      s0 = peg$parseAssignmentExpression();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseBinSimpleExpression();\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseBinSimpleExpression() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseMemberExpression();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseSimpleExpression();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        s4 = peg$parsews();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = peg$c3;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parsebinop();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsews();\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseMemberExpression();\r\n              if (s7 === peg$FAILED) {\r\n                s7 = peg$parseSimpleExpression();\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsews();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = peg$c3;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parsebinop();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsews();\r\n              if (s6 === peg$FAILED) {\r\n                s6 = peg$c3;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseMemberExpression();\r\n                if (s7 === peg$FAILED) {\r\n                  s7 = peg$parseSimpleExpression();\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s4 = [s4, s5, s6, s7];\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c149(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseunop() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 45) {\r\n        s1 = peg$c150;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c151); }\r\n      }\r\n      if (s1 === peg$FAILED) {\r\n        if (input.substr(peg$currPos, 3) === peg$c50) {\r\n          s1 = peg$c50;\r\n          peg$currPos += 3;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c51); }\r\n        }\r\n        if (s1 === peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 35) {\r\n            s1 = peg$c4;\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c5); }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s1 = input.substring(s0, peg$currPos);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebinop() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 43) {\r\n        s1 = peg$c152;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c153); }\r\n      }\r\n      if (s1 === peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 45) {\r\n          s1 = peg$c150;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\r\n        }\r\n        if (s1 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 2) === peg$c154) {\r\n            s1 = peg$c154;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c155); }\r\n          }\r\n          if (s1 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c156) {\r\n              s1 = peg$c156;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s1 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c157); }\r\n            }\r\n            if (s1 === peg$FAILED) {\r\n              if (input.substr(peg$currPos, 2) === peg$c158) {\r\n                s1 = peg$c158;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c159); }\r\n              }\r\n              if (s1 === peg$FAILED) {\r\n                if (input.substr(peg$currPos, 2) === peg$c160) {\r\n                  s1 = peg$c160;\r\n                  peg$currPos += 2;\r\n                } else {\r\n                  s1 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c161); }\r\n                }\r\n                if (s1 === peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 62) {\r\n                    s1 = peg$c162;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s1 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c163); }\r\n                  }\r\n                  if (s1 === peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 60) {\r\n                      s1 = peg$c164;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s1 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c165); }\r\n                    }\r\n                    if (s1 === peg$FAILED) {\r\n                      if (input.substr(peg$currPos, 2) === peg$c166) {\r\n                        s1 = peg$c166;\r\n                        peg$currPos += 2;\r\n                      } else {\r\n                        s1 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c167); }\r\n                      }\r\n                      if (s1 === peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 3) === peg$c168) {\r\n                          s1 = peg$c168;\r\n                          peg$currPos += 3;\r\n                        } else {\r\n                          s1 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c169); }\r\n                        }\r\n                        if (s1 === peg$FAILED) {\r\n                          if (input.substr(peg$currPos, 2) === peg$c170) {\r\n                            s1 = peg$c170;\r\n                            peg$currPos += 2;\r\n                          } else {\r\n                            s1 = peg$FAILED;\r\n                            if (peg$silentFails === 0) { peg$fail(peg$c171); }\r\n                          }\r\n                          if (s1 === peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 42) {\r\n                              s1 = peg$c172;\r\n                              peg$currPos++;\r\n                            } else {\r\n                              s1 = peg$FAILED;\r\n                              if (peg$silentFails === 0) { peg$fail(peg$c173); }\r\n                            }\r\n                            if (s1 === peg$FAILED) {\r\n                              if (input.substr(peg$currPos, 2) === peg$c174) {\r\n                                s1 = peg$c174;\r\n                                peg$currPos += 2;\r\n                              } else {\r\n                                s1 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c175); }\r\n                              }\r\n                              if (s1 === peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 47) {\r\n                                  s1 = peg$c176;\r\n                                  peg$currPos++;\r\n                                } else {\r\n                                  s1 = peg$FAILED;\r\n                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }\r\n                                }\r\n                                if (s1 === peg$FAILED) {\r\n                                  if (input.charCodeAt(peg$currPos) === 37) {\r\n                                    s1 = peg$c178;\r\n                                    peg$currPos++;\r\n                                  } else {\r\n                                    s1 = peg$FAILED;\r\n                                    if (peg$silentFails === 0) { peg$fail(peg$c179); }\r\n                                  }\r\n                                  if (s1 === peg$FAILED) {\r\n                                    if (input.charCodeAt(peg$currPos) === 94) {\r\n                                      s1 = peg$c180;\r\n                                      peg$currPos++;\r\n                                    } else {\r\n                                      s1 = peg$FAILED;\r\n                                      if (peg$silentFails === 0) { peg$fail(peg$c181); }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s1 = input.substring(s0, peg$currPos);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseprefixexp() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$parsefuncname();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n          s1 = peg$c182;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parsews();\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parseExpression();\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parsews();\r\n              if (s4 === peg$FAILED) {\r\n                s4 = peg$c3;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s5 = peg$c184;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  peg$reportedPos = s0;\r\n                  s1 = peg$c186(s3);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseCallExpression() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$currPos;\r\n      peg$silentFails++;\r\n      s2 = peg$currPos;\r\n      if (input.substr(peg$currPos, 8) === peg$c48) {\r\n        s3 = peg$c48;\r\n        peg$currPos += 8;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parsews();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = peg$c3;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 40) {\r\n            s5 = peg$c182;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s3 = [s3, s4, s5];\r\n            s2 = s3;\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$c0;\r\n      }\r\n      peg$silentFails--;\r\n      if (s2 === peg$FAILED) {\r\n        s1 = peg$c2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$c0;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseprefixexp();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = [];\r\n          s4 = peg$currPos;\r\n          s5 = peg$parsews();\r\n          if (s5 === peg$FAILED) {\r\n            s5 = peg$c3;\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 58) {\r\n              s7 = peg$c187;\r\n              peg$currPos++;\r\n            } else {\r\n              s7 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c188); }\r\n            }\r\n            if (s7 !== peg$FAILED) {\r\n              s8 = peg$parseIdentifier();\r\n              if (s8 !== peg$FAILED) {\r\n                s7 = [s7, s8];\r\n                s6 = s7;\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s6;\r\n              s6 = peg$c0;\r\n            }\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsecallsuffix();\r\n              if (s7 !== peg$FAILED) {\r\n                s5 = [s5, s6, s7];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$c0;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            while (s4 !== peg$FAILED) {\r\n              s3.push(s4);\r\n              s4 = peg$currPos;\r\n              s5 = peg$parsews();\r\n              if (s5 === peg$FAILED) {\r\n                s5 = peg$c3;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$currPos;\r\n                if (input.charCodeAt(peg$currPos) === 58) {\r\n                  s7 = peg$c187;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c188); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parseIdentifier();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s7 = [s7, s8];\r\n                    s6 = s7;\r\n                  } else {\r\n                    peg$currPos = s6;\r\n                    s6 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$c0;\r\n                }\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = peg$c3;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parsecallsuffix();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s5 = [s5, s6, s7];\r\n                    s4 = s5;\r\n                  } else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$c0;\r\n              }\r\n            }\r\n          } else {\r\n            s3 = peg$c0;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c189(s2, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecallsuffix() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseargs();\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c64(s1);\r\n      }\r\n      s0 = s1;\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseObjectExpression();\r\n        if (s1 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c190(s1);\r\n        }\r\n        s0 = s1;\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$parseString();\r\n          if (s1 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c191(s1);\r\n          }\r\n          s0 = s1;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseParenExpr() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 40) {\r\n        s1 = peg$c182;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 41) {\r\n                s5 = peg$c184;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c192(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseResetExpression() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 3) === peg$c193) {\r\n        s1 = peg$c193;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c194); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c195();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefuncname() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseThat();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseIdentifier();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$parsefuncnamesuffix();\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$parsefuncnamesuffix();\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c196(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefuncnamesuffix() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsews();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$c3;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        if (peg$c197.test(input.charAt(peg$currPos))) {\r\n          s2 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c198); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsews();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$c3;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseIdentifier();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c199(s2, s4);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parsews();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$c3;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s2 = peg$c101;\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parsews();\r\n            if (s3 === peg$FAILED) {\r\n              s3 = peg$c3;\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parseExpression();\r\n              if (s4 !== peg$FAILED) {\r\n                s5 = peg$parsews();\r\n                if (s5 === peg$FAILED) {\r\n                  s5 = peg$c3;\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s6 = peg$c16;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s6 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n                  }\r\n                  if (s6 !== peg$FAILED) {\r\n                    peg$reportedPos = s0;\r\n                    s1 = peg$c200(s4);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseexplist() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseExpression();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        s4 = peg$parsews();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = peg$c3;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c120;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsews();\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseExpression();\r\n              if (s7 === peg$FAILED) {\r\n                peg$reportedPos = peg$currPos;\r\n                s7 = peg$c201();\r\n                if (s7) {\r\n                  s7 = peg$c2;\r\n                } else {\r\n                  s7 = peg$c0;\r\n                }\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsews();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = peg$c3;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 44) {\r\n              s5 = peg$c120;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsews();\r\n              if (s6 === peg$FAILED) {\r\n                s6 = peg$c3;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseExpression();\r\n                if (s7 === peg$FAILED) {\r\n                  peg$reportedPos = peg$currPos;\r\n                  s7 = peg$c201();\r\n                  if (s7) {\r\n                    s7 = peg$c2;\r\n                  } else {\r\n                    s7 = peg$c0;\r\n                  }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s4 = [s4, s5, s6, s7];\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c202(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsevarlist() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsevar();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        s4 = peg$parsews();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = peg$c3;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c120;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsews();\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsevar();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsews();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = peg$c3;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 44) {\r\n              s5 = peg$c120;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsews();\r\n              if (s6 === peg$FAILED) {\r\n                s6 = peg$c3;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parsevar();\r\n                if (s7 !== peg$FAILED) {\r\n                  s4 = [s4, s5, s6, s7];\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c203(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsenamelist() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseIdentifier();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        s4 = peg$parsews();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = peg$c3;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c120;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsews();\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseIdentifier();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$c0;\r\n        }\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsews();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = peg$c3;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 44) {\r\n              s5 = peg$c120;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsews();\r\n              if (s6 === peg$FAILED) {\r\n                s6 = peg$c3;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseIdentifier();\r\n                if (s7 !== peg$FAILED) {\r\n                  s4 = [s4, s5, s6, s7];\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$c0;\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c202(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseargs() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 40) {\r\n        s1 = peg$c182;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseexplist();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 41) {\r\n                s5 = peg$c184;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n              }\r\n              if (s5 === peg$FAILED) {\r\n                peg$reportedPos = peg$currPos;\r\n                s5 = peg$c204();\r\n                if (s5) {\r\n                  s5 = peg$c2;\r\n                } else {\r\n                  s5 = peg$c0;\r\n                }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c205(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n          s1 = peg$c182;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parsews();\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 41) {\r\n              s3 = peg$c184;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n            }\r\n            if (s3 === peg$FAILED) {\r\n              peg$reportedPos = peg$currPos;\r\n              s3 = peg$c204();\r\n              if (s3) {\r\n                s3 = peg$c2;\r\n              } else {\r\n                s3 = peg$c0;\r\n              }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c206();\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsevar() {\r\n      var s0;\r\n\r\n      s0 = peg$parseMemberExpression();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseIdentifier();\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseMemberExpression() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseCallExpression();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseSimpleExpression();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseindexer();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = [];\r\n          s4 = peg$parseindexer();\r\n          while (s4 !== peg$FAILED) {\r\n            s3.push(s4);\r\n            s4 = peg$parseindexer();\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c207(s1, s2, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseindexer() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 91) {\r\n        s1 = peg$c101;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 93) {\r\n                s5 = peg$c16;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c208(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 46) {\r\n          s1 = peg$c67;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c68); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parseSimpleExpression();\r\n          if (s2 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c209(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseObjectExpression() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 123) {\r\n        s1 = peg$c210;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c211); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsefield();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$c3;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = [];\r\n            s5 = peg$currPos;\r\n            s6 = peg$parsews();\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 44) {\r\n                s7 = peg$c120;\r\n                peg$currPos++;\r\n              } else {\r\n                s7 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n              }\r\n              if (s7 === peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 59) {\r\n                  s7 = peg$c21;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n                }\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parsews();\r\n                if (s8 === peg$FAILED) {\r\n                  s8 = peg$c3;\r\n                }\r\n                if (s8 !== peg$FAILED) {\r\n                  s9 = peg$parsefield();\r\n                  if (s9 !== peg$FAILED) {\r\n                    s6 = [s6, s7, s8, s9];\r\n                    s5 = s6;\r\n                  } else {\r\n                    peg$currPos = s5;\r\n                    s5 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$c0;\r\n            }\r\n            while (s5 !== peg$FAILED) {\r\n              s4.push(s5);\r\n              s5 = peg$currPos;\r\n              s6 = peg$parsews();\r\n              if (s6 === peg$FAILED) {\r\n                s6 = peg$c3;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 44) {\r\n                  s7 = peg$c120;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n                }\r\n                if (s7 === peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 59) {\r\n                    s7 = peg$c21;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n                  }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parsews();\r\n                  if (s8 === peg$FAILED) {\r\n                    s8 = peg$c3;\r\n                  }\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parsefield();\r\n                    if (s9 !== peg$FAILED) {\r\n                      s6 = [s6, s7, s8, s9];\r\n                      s5 = s6;\r\n                    } else {\r\n                      peg$currPos = s5;\r\n                      s5 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s5;\r\n                    s5 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$c0;\r\n              }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsews();\r\n              if (s5 === peg$FAILED) {\r\n                s5 = peg$c3;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 125) {\r\n                  s6 = peg$c212;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s6 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c213); }\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$reportedPos = s0;\r\n                  s1 = peg$c214(s3, s4);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefield() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseLiteral();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseIdentifier();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 61) {\r\n            s3 = peg$c104;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseBinSimpleExpression();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c215(s1, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseBinSimpleExpression();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parsews();\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c216(s1);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$parsews();\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$c3;\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 91) {\r\n              s2 = peg$c101;\r\n              peg$currPos++;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n              s3 = peg$parsews();\r\n              if (s3 === peg$FAILED) {\r\n                s3 = peg$c3;\r\n              }\r\n              if (s3 !== peg$FAILED) {\r\n                s4 = peg$parseExpression();\r\n                if (s4 !== peg$FAILED) {\r\n                  s5 = peg$parsews();\r\n                  if (s5 === peg$FAILED) {\r\n                    s5 = peg$c3;\r\n                  }\r\n                  if (s5 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 93) {\r\n                      s6 = peg$c16;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s6 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n                    }\r\n                    if (s6 !== peg$FAILED) {\r\n                      s7 = peg$parsews();\r\n                      if (s7 === peg$FAILED) {\r\n                        s7 = peg$c3;\r\n                      }\r\n                      if (s7 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 61) {\r\n                          s8 = peg$c104;\r\n                          peg$currPos++;\r\n                        } else {\r\n                          s8 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n                        }\r\n                        if (s8 !== peg$FAILED) {\r\n                          s9 = peg$parsews();\r\n                          if (s9 === peg$FAILED) {\r\n                            s9 = peg$c3;\r\n                          }\r\n                          if (s9 !== peg$FAILED) {\r\n                            s10 = peg$parseBinSimpleExpression();\r\n                            if (s10 !== peg$FAILED) {\r\n                              peg$reportedPos = s0;\r\n                              s1 = peg$c217(s4, s10);\r\n                              s0 = s1;\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$c0;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$c0;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$c0;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseFunctionDeclaration() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsefunction();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsefuncname();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsefuncbody();\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 !== peg$FAILED) {\r\n                  if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                    s7 = peg$c36;\r\n                    peg$currPos += 3;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                  }\r\n                  if (s7 === peg$FAILED) {\r\n                    s7 = [];\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$reportedPos = peg$currPos;\r\n                    s8 = peg$c218(s1, s3, s5, s7);\r\n                    if (s8) {\r\n                      s8 = peg$c2;\r\n                    } else {\r\n                      s8 = peg$c0;\r\n                    }\r\n                    if (s8 !== peg$FAILED) {\r\n                      peg$reportedPos = s0;\r\n                      s1 = peg$c219(s1, s3, s5, s7);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseLocalFunction() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 5) === peg$c40) {\r\n        s1 = peg$c40;\r\n        peg$currPos += 5;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsefunction();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsefuncname();\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsews();\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = peg$c3;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parsefuncbody();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parsews();\r\n                    if (s8 === peg$FAILED) {\r\n                      s8 = peg$c3;\r\n                    }\r\n                    if (s8 !== peg$FAILED) {\r\n                      if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                        s9 = peg$c36;\r\n                        peg$currPos += 3;\r\n                      } else {\r\n                        s9 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n                      }\r\n                      if (s9 === peg$FAILED) {\r\n                        s9 = [];\r\n                      }\r\n                      if (s9 !== peg$FAILED) {\r\n                        peg$reportedPos = peg$currPos;\r\n                        s10 = peg$c218(s3, s5, s7, s9);\r\n                        if (s10) {\r\n                          s10 = peg$c2;\r\n                        } else {\r\n                          s10 = peg$c0;\r\n                        }\r\n                        if (s10 !== peg$FAILED) {\r\n                          peg$reportedPos = s0;\r\n                          s1 = peg$c220(s3, s5, s7, s9);\r\n                          s0 = s1;\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$c0;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$c0;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseFunctionExpression() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsefuncdef();\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c221(s1);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefuncdef() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsefunction();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsefuncbody();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.substr(peg$currPos, 3) === peg$c36) {\r\n                s5 = peg$c36;\r\n                peg$currPos += 3;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c37); }\r\n              }\r\n              if (s5 === peg$FAILED) {\r\n                s5 = [];\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$reportedPos = peg$currPos;\r\n                s6 = peg$c222(s1, s3, s5);\r\n                if (s6) {\r\n                  s6 = peg$c2;\r\n                } else {\r\n                  s6 = peg$c0;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$reportedPos = s0;\r\n                  s1 = peg$c223(s1, s3, s5);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsefuncbody() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 40) {\r\n        s1 = peg$c182;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseparamlist();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsews();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$c3;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 44) {\r\n                s6 = peg$c120;\r\n                peg$currPos++;\r\n              } else {\r\n                s6 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parsews();\r\n                if (s7 === peg$FAILED) {\r\n                  s7 = peg$c3;\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  if (input.substr(peg$currPos, 3) === peg$c193) {\r\n                    s8 = peg$c193;\r\n                    peg$currPos += 3;\r\n                  } else {\r\n                    s8 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c194); }\r\n                  }\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parsews();\r\n                    if (s9 === peg$FAILED) {\r\n                      s9 = peg$c3;\r\n                    }\r\n                    if (s9 !== peg$FAILED) {\r\n                      s6 = [s6, s7, s8, s9];\r\n                      s5 = s6;\r\n                    } else {\r\n                      peg$currPos = s5;\r\n                      s5 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s5;\r\n                    s5 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$c0;\r\n              }\r\n              if (s5 === peg$FAILED) {\r\n                s5 = peg$c3;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s6 = peg$c184;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s6 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parsews();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parseBlockStatement();\r\n                    if (s8 !== peg$FAILED) {\r\n                      peg$reportedPos = s0;\r\n                      s1 = peg$c224(s3, s5, s8);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n          s1 = peg$c182;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parsews();\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$c3;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            if (input.substr(peg$currPos, 3) === peg$c193) {\r\n              s3 = peg$c193;\r\n              peg$currPos += 3;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c194); }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parsews();\r\n              if (s4 === peg$FAILED) {\r\n                s4 = peg$c3;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s5 = peg$c184;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  s6 = peg$parsews();\r\n                  if (s6 === peg$FAILED) {\r\n                    s6 = peg$c3;\r\n                  }\r\n                  if (s6 !== peg$FAILED) {\r\n                    s7 = peg$parseBlockStatement();\r\n                    if (s7 !== peg$FAILED) {\r\n                      peg$reportedPos = s0;\r\n                      s1 = peg$c225(s7);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$c0;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$c0;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseparamlist() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseIdentifier();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = [];\r\n          s4 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c120;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsews();\r\n            if (s6 === peg$FAILED) {\r\n              s6 = peg$c3;\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseIdentifier();\r\n              if (s7 !== peg$FAILED) {\r\n                s5 = [s5, s6, s7];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$c0;\r\n          }\r\n          while (s4 !== peg$FAILED) {\r\n            s3.push(s4);\r\n            s4 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 44) {\r\n              s5 = peg$c120;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsews();\r\n              if (s6 === peg$FAILED) {\r\n                s6 = peg$c3;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseIdentifier();\r\n                if (s7 !== peg$FAILED) {\r\n                  s5 = [s5, s6, s7];\r\n                  s4 = s5;\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$c0;\r\n                }\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$c0;\r\n            }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c226(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parsews();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$c3;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          peg$reportedPos = s0;\r\n          s1 = peg$c227();\r\n        }\r\n        s0 = s1;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseUnaryExpression() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseunop();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsews();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$c3;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseMemberExpression();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$parseSimpleExpression();\r\n            if (s3 === peg$FAILED) {\r\n              s3 = peg$parseExpression();\r\n            }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$reportedPos = s0;\r\n            s1 = peg$c228(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$c0;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseIdentifier() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseName();\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c229(s1);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseLiteral() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.substr(peg$currPos, 3) === peg$c42) {\r\n        s1 = peg$c42;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n      }\r\n      if (s1 === peg$FAILED) {\r\n        if (input.substr(peg$currPos, 5) === peg$c46) {\r\n          s1 = peg$c46;\r\n          peg$currPos += 5;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c47); }\r\n        }\r\n        if (s1 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 4) === peg$c44) {\r\n            s1 = peg$c44;\r\n            peg$currPos += 4;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$reportedPos = s0;\r\n        s1 = peg$c230(s1);\r\n      }\r\n      s0 = s1;\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseNumber();\r\n        if (s1 !== peg$FAILED) {\r\n          if (peg$c231.test(input.charAt(peg$currPos))) {\r\n            s2 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c232); }\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            s4 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 45) {\r\n              s5 = peg$c150;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c151); }\r\n            }\r\n            if (s5 === peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 43) {\r\n                s5 = peg$c152;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c153); }\r\n              }\r\n            }\r\n            if (s5 === peg$FAILED) {\r\n              s5 = peg$c3;\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = [];\r\n              if (peg$c65.test(input.charAt(peg$currPos))) {\r\n                s7 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s7 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                while (s7 !== peg$FAILED) {\r\n                  s6.push(s7);\r\n                  if (peg$c65.test(input.charAt(peg$currPos))) {\r\n                    s7 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n                  }\r\n                }\r\n              } else {\r\n                s6 = peg$c0;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s5 = [s5, s6];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$c0;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s4 = input.substring(s3, peg$currPos);\r\n            }\r\n            s3 = s4;\r\n            if (s3 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c233(s1, s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$c0;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 48) {\r\n            s1 = peg$c234;\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c235); }\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            if (peg$c236.test(input.charAt(peg$currPos))) {\r\n              s2 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c237); }\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n              s3 = peg$currPos;\r\n              s4 = [];\r\n              if (peg$c238.test(input.charAt(peg$currPos))) {\r\n                s5 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c239); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                while (s5 !== peg$FAILED) {\r\n                  s4.push(s5);\r\n                  if (peg$c238.test(input.charAt(peg$currPos))) {\r\n                    s5 = input.charAt(peg$currPos);\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c239); }\r\n                  }\r\n                }\r\n              } else {\r\n                s4 = peg$c0;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                s4 = input.substring(s3, peg$currPos);\r\n              }\r\n              s3 = s4;\r\n              if (s3 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c240(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$c0;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$c0;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$c0;\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parseNumber();\r\n            if (s1 !== peg$FAILED) {\r\n              peg$reportedPos = s0;\r\n              s1 = peg$c241(s1);\r\n            }\r\n            s0 = s1;\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              s1 = peg$parseString();\r\n              if (s1 !== peg$FAILED) {\r\n                peg$reportedPos = s0;\r\n                s1 = peg$c242(s1);\r\n              }\r\n              s0 = s1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n\r\n      function loc() { return {start: { line: line(), column: column() } } }\r\n      function range() { return [offset(), offset() + text().length]; }\r\n      function listHelper(a,b,c) { return a == null ? [] : [a].concat(b.map(function(b) { return b[c || 2]; })); }\r\n      function opt(name, def) { return name in options ? options[name] : def }\r\n\r\n      function expandMultiStatements(list) {\r\n        var out = [];\r\n        for ( var i = 0; i < list.length; ++i ) {\r\n            var value = list[i];\r\n            if (value instanceof Array) out = out.concat(value);\r\n            else out.push(value);\r\n        }\r\n        return out;\r\n      }\r\n\r\n      function wrapNode(obj, hasScope) {\r\n        hasScope = !!hasScope \r\n        obj.loc = loc();\r\n        obj.range = range();\r\n        obj.hasScope = hasScope;\r\n        obj.text = text();\r\n        return obj;\r\n      }\r\n\r\n      function eUntermIfEmpty(what, type, end, start) {\r\n        if ( what.length == 0 ) return eUnterminated(type, end, start);\r\n        return true;\r\n      }\r\n\r\n      function eUnterminated(type, end, start) {\r\n        var xline = start !== undefined ? start.loc.start.line : (line());\r\n        var xcol = start !== undefined ? start.loc.start.column : (column());\r\n\r\n        eMsg(\"`\" + (end || \"end\") + \"` expected (to close \" + type + \" at \" + xline + \":\" + xcol + \") at \" + line() +  \":\" + column() );\r\n        return true;\r\n      }\r\n\r\n      function eMsg(why) {\r\n        if ( !opt(\"loose\", false) ) error(why);\r\n        errors.push({msg: why, loc: loc(), range: range()});\r\n        return true;\r\n      }\r\n\r\n      var opPrecedence = {\r\n        \"^\": 10,\r\n        \"not\": 9,\r\n        \"*\": 8, \"/\": 8, \"%\": 8, \"//\": 8,\r\n        \"+\": 7, \"-\": 7,\r\n        \"..\": 6,\r\n        \"<\": 5, \">\": 5, \">=\": 5, \"<=\": 5, \"==\": 5, \"~=\": 5,\r\n        \"and\": 4,\r\n        \"or\": 3\r\n      }\r\n\r\n      function precedenceClimber(tokens, lhs, min) {\r\n        while ( true ) { \r\n            if ( tokens.length == 0 ) return lhs;\r\n            var op = tokens[0];\r\n            var prec = opPrecedence[op];\r\n            if ( prec < min ) return lhs;\r\n            tokens.shift();\r\n\r\n            var rhs = tokens.shift();\r\n            while ( true ) {\r\n                var peek = tokens[0];\r\n                if ( peek == null || opPrecedence[peek] <= prec ) break;\r\n                rhs = precedenceClimber(tokens, rhs, opPrecedence[peek]);\r\n            }\r\n\r\n            lhs = bhelper.binaryExpression(op, lhs, rhs);\r\n        }\r\n\r\n      }\r\n\r\n      var errors;\r\n\r\n      function init() {\r\n        errors = [];\r\n      }\r\n\r\n      var builder = {\r\n        assignmentExpression: function(op, left, right) { return wrapNode({type: \"AssignmentExpression\", operator: op, left: left, right: right }); },\r\n        binaryExpression: function(op, left, right) { return wrapNode({type: (op == '||' || op == '&&') ? \"LogicalExpression\" : \"BinaryExpression\", operator: op, left: left, right: right }); },\r\n        blockStatement: function(body) { return wrapNode({ type: \"BlockStatement\", body: body}); },\r\n        callExpression: function(callee, args) { return wrapNode({ type: \"CallExpression\", callee: callee, arguments: args}); },\r\n        emptyStatement: function() { return wrapNode({ type: \"EmptyStatement\" }); },\r\n        functionDeclaration: function(name, args, body, isGenerator, isExpression) {\r\n            return wrapNode({type: \"FunctionDeclaration\", id: name, params: args, body: body, generator: isGenerator, expression: isExpression });\r\n        },\r\n        memberExpression: function(obj, prop, isComputed) { return wrapNode({ type:\"MemberExpression\", object: obj, property: prop, computed: isComputed }); },\r\n        variableDeclaration: function(kind, decls) { return { type: \"VariableDeclaration\", declarations: decls, kind: opt(\"forceVar\", true) ? \"var\" : kind } },\r\n        functionExpression: function(name, args, body) { return { type: \"FunctionExpression\", name: name, body: body, params: args } },\r\n        returnStatement: function(arg) { return wrapNode({type: \"ReturnStatement\", argument: arg}); },\r\n        generatedReturnStatement: function(arg) { return wrapNode({type: \"ReturnStatement\", argument: arg, userCode: false}); }\r\n      };\r\n\r\n      var i = function(n) { return { type: \"Identifier\", name: n}; }\r\n      var id = i;\r\n      var tmpVarCtr = 0;\r\n\r\n      function clone(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n      }\r\n\r\n\r\n\r\n      function finalize(ast) {\r\n        if ( opt(\"loose\", false) ) ast.errors = errors;\r\n        \r\n        if ( opt(\"useStrict\", false) ) {\r\n            ast.body.unshift({\r\n                type: \"ExpressionStatement\",\r\n                expression: { type: \"Literal\", value: \"use strict\" }\r\n            });\r\n        }\r\n\r\n        if ( opt(\"noSharedObjects\", true) ) return clone(ast);\r\n        return ast;\r\n      }\r\n\r\n      var bhelper = {\r\n        blockStatement: function(body) {\r\n            return builder.blockStatement(expandMultiStatements(body));\r\n        },\r\n        tempName: function() {\r\n            return i(\"__lua$tmpvar$\" + (++tmpVarCtr));\r\n        },\r\n        tempVar: function(exp) {\r\n            return { type: \"VariableDeclarator\", id: bhelper.tempName(), init: exp };\r\n        },\r\n        assign: function(target, exp) {\r\n            var out = builder.assignmentExpression(\"=\", target, exp);\r\n            if ( target.type == \"MemberExpression\" && opt(\"luaOperators\", false) ) {\r\n                var prop = target.property;\r\n                if ( !target.computed ) prop = {\"type\": \"Literal\", \"value\": prop.name, loc: prop.loc, range: prop.range };\r\n                \r\n                var helper;\r\n                var nue = bhelper.translateExpressionIfNeeded(target.object);\r\n\r\n                if ( target.object.type == \"Identifier\" ) helper = target.object.name;\r\n\r\n                if ( helper === undefined ) {\r\n                    nue = bhelper.luaOperator(\"indexAssign\", nue, prop, exp);\r\n                } else {\r\n                    nue = bhelper.luaOperator(\"indexAssign\", nue, prop, exp, {type:\"Literal\", value: helper});\r\n                }\r\n\r\n                nue = {type: \"ConditionalExpression\",test: nue, consequent: exp, alternate: out};\r\n\r\n                out = nue;\r\n            }\r\n                \r\n            return {\r\n                type: \"ExpressionStatement\",\r\n                expression: out\r\n            };\r\n        },\r\n        encloseDecls: function(body /*, decls...*/) {\r\n            var decls = Array.prototype.slice.call(arguments, 1);\r\n            return bhelper.encloseDeclsEx.apply(this, [body, opt(\"encloseWithFunctions\", true) ].concat(decls));\r\n        },\r\n        encloseDeclsEx: function(body, enclose /*, decls...*/) {\r\n            var decls = Array.prototype.slice.call(arguments, 2);\r\n            var vals = [];\r\n            var names = [];\r\n            for ( var k in decls ) {\r\n                var v = decls[k];\r\n                vals.push(v.init);\r\n                names.push(v.id);\r\n            }\r\n\r\n            if ( enclose ) {\r\n                return {\r\n                    expression: builder.callExpression(\r\n                        builder.functionExpression(null, names, bhelper.blockStatement(body)),\r\n                        vals\r\n                    ),\r\n                    type: \"ExpressionStatement\"\r\n                }\r\n            } else {\r\n                if ( decls.length < 1 ) return body;\r\n                return bhelper.blockStatement([ builder.variableDeclaration(\"let\", decls) ].concat(body));\r\n            }\r\n        },\r\n        encloseDeclsUnpack: function(body, names, explist, force) {\r\n\r\n            if ( force || opt(\"encloseWithFunctions\", true) ) {\r\n                return {\r\n                    expression: builder.callExpression(\r\n                        builder.memberExpression(\r\n                            builder.functionExpression(null, names, builder.blockStatement(body)),\r\n                            i(\"apply\")\r\n                        ),\r\n                        [{type: \"Literal\", value: null}, bhelper.luaOperatorA(\"expandReturnValues\", explist)]\r\n                    ),\r\n                    type: \"ExpressionStatement\"\r\n                }\r\n            } else {\r\n                var decls = [];\r\n                for ( var idx in names ) {\r\n                    decls.push({\r\n                        type: \"VariableDeclarator\",\r\n                        id: names[idx],\r\n                        init: idx.id\r\n                    });\r\n                }\r\n                return bhelper.blockStatement([ \r\n                    builder.variableDeclaration(\"let\", decls),\r\n                    bhelper.bulkAssign(names, explist)\r\n                    ].concat(body));\r\n            }\r\n        },\r\n        bulkAssign: function(names, explist) {\r\n            var temps = [];\r\n            var body = [];\r\n            for ( var i = 0; i < names.length; ++i ) {\r\n                temps[i] = bhelper.tempName();\r\n            }\r\n\r\n            // If we are refrencing a previously set value in a bulk assign as a property\r\n            // we want to use the old value to look up the index, so we will pull that from\r\n            // the temp var passed in\r\n            var extra = 0;\r\n            for ( var i = 0; i < names.length; ++i ) {\r\n                var exp = names[i];\r\n                if ( exp.type == \"MemberExpression\" && exp.property.type == \"Identifier\" ) {\r\n                    for ( var j = 0; j < i; ++j) {\r\n                        if ( names[j].name == exp.property.name ) {\r\n                            var holding = bhelper.tempName();\r\n                            temps.unshift(holding);\r\n                            explist.unshift(exp.property);\r\n                            exp.property = holding;\r\n                            ++extra;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for ( var i = 0; i < names.length; ++i ) {\r\n                body[i] = bhelper.assign(names[i], temps[i+extra]);\r\n            }\r\n\r\n            if ( names.length > 1 ) {\r\n                return bhelper.encloseDeclsUnpack(body, temps, explist, true);\r\n            } else {\r\n                var value = explist[0];\r\n                if ( value.type == \"CallExpression\" ) value = bhelper.luaOperator(\"oneValue\", value);\r\n                return bhelper.assign(names[0], value);\r\n            }\r\n            \r\n        },\r\n        luaOperator: function(op /*, args */) {\r\n            if ( op == \"oneValue\" && opt(\"noMutliReturnSquish\", false) ) return arguments[1];\r\n            var o = builder.callExpression(\r\n                builder.memberExpression(i(\"__lua\"), i(op)), \r\n                Array.prototype.slice.call(arguments, 1)\r\n            );\r\n            o.internal = true;\r\n            return o;\r\n        },\r\n        luaOperatorA: function(op, args) {\r\n            var o = builder.callExpression(\r\n                builder.memberExpression(i(\"__lua\"), i(op)), \r\n                args\r\n            );\r\n            o.internal = true;\r\n            return o;\r\n        },\r\n        binaryExpression: function(op, a, b) {\r\n            if ( opt(\"luaOperators\", false) && op != \"and\" && op != \"or\" ) {\r\n                var map = {\"+\": \"add\", \"-\": \"sub\", \"*\": \"mul\", \"/\": \"div\", \"//\": \"intdiv\", \"^\": \"pow\", \"%\":\"mod\",\r\n                    \"..\": \"concat\", \"==\": \"eq\", \"<\": \"lt\", \"<=\": \"lte\", \">\": \"gt\", \">=\": \"gte\", \"~=\": \"ne\",\r\n                    \"and\": \"and\", \"or\": \"or\"\r\n                };\r\n                \r\n                return bhelper.luaOperator(map[op], a, b);\r\n            } else {\r\n\r\n                if ( op == \"~=\" ) xop = \"!=\";\r\n                else if ( op == \"..\" ) op = \"+\";\r\n                else if ( op == \"or\" ) op = \"||\";\r\n                else if ( op == \"and\" ) op = \"&&\";\r\n                else if ( op == \"//\" ) op = \"/\";\r\n\r\n                a = bhelper.luaOperator(\"oneValue\", a);\r\n                b = bhelper.luaOperator(\"oneValue\", b);\r\n\r\n                return builder.binaryExpression(op, a, b);\r\n            }\r\n        },\r\n        callExpression: function(callee, args) {\r\n            if ( opt(\"luaCalls\", false) ) {\r\n                var that = {\"type\": \"ThisExpression\" };\r\n                if ( callee.type == \"MemberExpression\" ) that = {\"type\":\"Literal\", \"value\": null};\r\n                var flags = 0;\r\n                if ( callee.selfSuggar ) {\r\n                    flags = flags | 1;\r\n                }\r\n\r\n                if ( opt('decorateLuaObjects', false) ) {\r\n                    flags = flags | 2;\r\n                }\r\n\r\n                var flagso = {\"type\": \"Literal\", \"value\": flags};\r\n                var helper = null;\r\n                \r\n                if ( callee.type == \"Identifier\" ) helper = callee.name;\r\n                else if ( callee.type == \"MemberExpression\" && !callee.computed ) helper = callee.property.name;\r\n\r\n                helper = {\"type\": \"Literal\", \"value\": helper};\r\n\r\n                if ( callee.selfSuggar ) {\r\n                    if ( callee.object.type == \"Identifier\" ) {\r\n                        //Dont bother making a function if we are just an identifer.\r\n                        var rcallee = bhelper.translateExpressionIfNeeded(callee)\r\n                        return bhelper.luaOperator.apply(bhelper, [\"call\", flagso , rcallee, callee.object, helper].concat(args));\r\n\r\n                    } else {\r\n                        var tmp = bhelper.tempVar(bhelper.translateExpressionIfNeeded(callee.object));\r\n                        \r\n                        var rexpr = builder.memberExpression(tmp.id, callee.property, callee.computed);\r\n                        var rcallee = bhelper.translateExpressionIfNeeded(rexpr);\r\n                        var expr = bhelper.luaOperator.apply(bhelper, [\"call\", flagso, rcallee, tmp.id, helper].concat(args));\r\n                        return result = bhelper.encloseDeclsEx([\r\n                            builder.returnStatement(\r\n                                expr\r\n                            )\r\n                        ], true, tmp).expression;\r\n\r\n                    }\r\n                } else {\r\n                    var rcallee = bhelper.translateExpressionIfNeeded(callee)\r\n                    if ( rcallee.type == \"Identifier\" && rcallee.name == \"assert\" ) {\r\n                        args.push({type: \"Literal\", value: args[0].text || \"?\"})\r\n                    }\r\n                    return bhelper.luaOperator.apply(bhelper, [\"call\", flagso , rcallee, that, helper].concat(args));\r\n                }\r\n            } else {\r\n                return builder.callExpression(callee, args);\r\n            }\r\n        },\r\n        memberExpression: function(obj, prop, isComputed) {\r\n            if ( opt(\"luaOperators\", false) && !isComputed ) {\r\n                var helper;\r\n                if ( obj.type == \"Identifier\") helper = obj.name;\r\n\r\n                if ( helper == undefined ) {\r\n                    return bhelper.luaOperator(\"index\", obj, prop);\r\n                } else {\r\n                    return bhelper.luaOperator(\"index\", obj, prop, {type:\"Literal\", value: helper});\r\n                }\r\n            }\r\n            return builder.memberExpression(obj, prop, isComputed);\r\n        },\r\n        translateExpressionIfNeeded: function(exp) {\r\n            if ( !opt(\"luaOperators\", false) ) return exp;\r\n            if ( exp.type == \"MemberExpression\" ) {\r\n                var prop = exp.property;\r\n                if ( !exp.computed ) prop = {\"type\": \"Literal\", value: prop.name };\r\n                var nu = bhelper.memberExpression(bhelper.translateExpressionIfNeeded(exp.object), prop, false);\r\n                nu.origional = exp;\r\n                nu.range = exp.range;\r\n                nu.loc = exp.loc;\r\n                return nu;\r\n            }\r\n\r\n            return exp;\r\n        },\r\n        injectRest: function(block, count) {\r\n            block.unshift(builder.variableDeclaration(\"let\", [\r\n                    {\r\n                        type: \"VariableDeclarator\", \r\n                        id: {type: \"Identifier\", name:\"__lua$rest\"},\r\n                        userCode: false,\r\n                        init: bhelper.luaOperator(\"rest\", \r\n                            {type: \"Identifier\", name:\"arguments\"},\r\n                            {type: \"Literal\", value:count}\r\n                        )\r\n                    }\r\n                 ]));\r\n        },\r\n        valueProvdier: function(statement) {\r\n            return builder.functionExpression(null, [], bhelper.blockStatement([\r\n                builder.generatedReturnStatement(statement)\r\n            ]));\r\n        }\r\n      }\r\n\r\n\r\n\r\n    peg$result = peg$startRuleFunction();\r\n\r\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n      return peg$result;\r\n    } else {\r\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n        peg$fail({ type: \"end\", description: \"end of input\" });\r\n      }\r\n\r\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\r\n    }\r\n  }\r\n\r\n  return {\r\n    SyntaxError: SyntaxError,\r\n    parse:       parse\r\n  };\r\n})();\r\n\r\n},{}],3:[function(require,module,exports){\r\nvar env = {};\r\nvar __lua = (function() {\r\n\r\n\t// Yoinked from underscore.\r\n\tvar isJSArray = Array.isArray || function(obj) { return toString.call(obj) === '[object Array]'; };\r\n\r\n\tfunction type(what) {\r\n\t\tif ( what === null || what === undefined ) return \"nil\";\r\n\t\tif ( isNaN(what) ) return \"number\";\r\n\t\tvar t = typeof what;\r\n\t\tif ( t == \"object\" ) return \"table\";\r\n\t\treturn t;\r\n\t}\r\n\r\n\tfunction numberForArith(n) {\r\n\t\tif ( type(n) == \"number\" ) return n;\r\n\t\telse if ( typeof n == \"string\" ) {\r\n\t\t\tn = parseInt(n);\r\n\t\t\tif ( !isNaN(n) ) return n;\r\n\r\n\t\t}\r\n\r\n\t\tthrow \"attempt to perform arithmetic on a \" +  type(n) + \" value: \" + n;\r\n\t}\r\n\r\n\tfunction makeString(a) { \r\n\t\ta = oneValue(a);\r\n\r\n\t\tvar mtf = lookupMetaTable(a, \"__tostring\");\r\n\t\tif ( mtf !== null ) return mtf(a);\r\n\r\n\t\tif ( a === undefined || a === null ) return \"nil\";\r\n\t\tif ( a instanceof LuaTable ) {\r\n\t\t\treturn \"table: 0x\" + a.id;\r\n\t\t} else if ( typeof a == \"number\" ) {\r\n\t\t\tif ( ~~a == a ) return a.toString();\r\n\t\t\tvar rep = a.toPrecision();\r\n\t\t\tif ( rep.length > 14 ) return a.toPrecision(14);\r\n\t\t\treturn rep;\r\n\t\t}\r\n\t\treturn \"\" + a;\r\n\t}\r\n\r\n\tfunction add(a,b) {\r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__add\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn numberForArith(a) + numberForArith(b); \r\n\t}\r\n\r\n\tfunction sub(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__sub\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn numberForArith(a) - numberForArith(b);\r\n\t}\r\n\r\n\tfunction mul(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__mul\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn numberForArith(a) * numberForArith(b);\r\n\t}\r\n\r\n\tfunction div(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__div\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn numberForArith(a) / numberForArith(b);\r\n\t}\r\n\r\n\tfunction intdiv(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__idiv\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn ~~(numberForArith(a) / numberForArith(b));\r\n\t}\r\n\r\n\tfunction mod(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__mod\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn numberForArith(a) % numberForArith(b);\r\n\t}\r\n\r\n\tfunction pow(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__pow\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn Math.pow(numberForArith(a),numberForArith(b)); \r\n\t}\r\n\r\n\tfunction concat(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__concat\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\t\tif ( a === null || a === undefined || b === null || b === undefined ) throw \"attempt to concatenate a nil value\";\r\n\r\n\t\treturn  makeString(a) + makeString(b); \r\n\t}\r\n\r\n\tfunction lte(a,b) {\r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__le\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn a <= b; \r\n\t}\r\n\r\n\tfunction lt(a,b) {\r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__lt\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\t\treturn a < b; \r\n\t}\r\n\r\n\tfunction gte(a,b) { return lte(b,a); }\r\n\tfunction gt(a,b) { return lt(b,a); }\r\n\r\n\r\n\tfunction forcomp(d,a,b) { \r\n\t\tif ( d > 0 ) return a <= b; \r\n\t\telse if ( d < 0 ) return b <= a;\r\n\t\telse return false;\r\n\t}\r\n\r\n\t\r\n\tfunction eq(a,b) { \r\n\t\ta = oneValue(a); b = oneValue(b);\r\n\r\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__eq\");\r\n\t\tif ( mtf !== null ) return mtf(a,b);\r\n\r\n\r\n\t\tif ( a === null || a === undefined ) {\r\n\t\t\treturn ( b === null || b === undefined );\r\n\t\t}\r\n\t\tif ( a === b ) return true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction ne(a,b) { return !eq(a,b); }\r\n\r\n\tfunction count(a) { \r\n\t\tif ( a instanceof LuaTable ) {\r\n\t\t\tvar cnt = 0;\r\n\t\t\twhile ( a.numeric[cnt] !== undefined ) ++cnt;\r\n\t\t\treturn cnt;\r\n\t\t}\r\n\t\treturn a.length;\r\n\t}\r\n\r\n\tfunction and(a,b) { return a && b; }\r\n\tfunction or(a,b) { return a || b; }\r\n\r\n\tfunction call(flags, what, that, helper /*, args... */ ) {\r\n\t\tvar injectSelf = !!(flags & 1); \r\n\t\tvar detectLua = !!(flags & 2); \r\n\r\n\t\tif ( what === null || what === undefined ) {\r\n\t\t\tif ( helper === undefined ) throw \"attempt to call a \" + type(what) + \" value\";\r\n\t\t\telse throw \"attempt to call '\" + helper + \"' (a \" + type(what) + \" value)\"; \r\n\t\t}\r\n\r\n\t\tvar args = expand(Array.prototype.slice.call(arguments, 4), true);\r\n\r\n\t\tvar doInject = true;\r\n\r\n\t\tif ( detectLua ) {\r\n\t\t\tdoInject = what.__luaType == \"function\";\r\n\t\t}\r\n\r\n\t\tif ( injectSelf && doInject ) {\r\n\t\t\targs.unshift(that);\r\n\t\t}\r\n\r\n\t\tif ( detectLua && what.__luaType != \"function\" ) {\r\n\t\t\tvar args2 = [];\r\n\t\t\tfor ( var i = 0; i < args.length; ++i ) {\r\n\t\t\t\tvar a = args[i];\r\n\t\t\t\tif ( a instanceof LuaTable ) {\r\n\t\t\t\t\tif ( a.numeric.length == 0 ) args2[i] = a.hash;\r\n\t\t\t\t\telse if ( Object.keys(a.hash).length == 0 ) args2[i] = a.numeric;\r\n\t\t\t\t\telse args2[i] = a;\r\n\t\t\t\t} else {\r\n\t\t\t\t\targs2[i] = a;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\targs = args2;\r\n\t\t}\r\n\r\n\t\treturn what.apply(that, args);\r\n\t}\r\n\r\n\tfunction rest(args, cnt) {\r\n\t\tvar out = Object.create(LuaReturnValues.prototype, {});\r\n\t\tout.values = Array.prototype.slice.call(args, cnt);\r\n\t\treturn out;\r\n\t}\r\n\r\n\tvar id = 0;\r\n\tfunction LuaTable() {\r\n\t\tthis.id = ++id;\r\n\t\tthis.numeric = [];\r\n\t\tthis.hash = {};\r\n\t}\r\n\r\n\tObject.defineProperty(LuaTable.prototype, \"__luaType\",  {value: \"table\",  enumerable: false});\r\n\tObject.defineProperty(LuaTable.prototype, \"toString\",  {value: function() {\r\n\t\treturn makeString(this);\r\n\t},  enumerable: false});\r\n\r\n\tfunction makeTable(t, allowExpand /*, numeric ... */) {\r\n\t\tvar out = new LuaTable();\r\n\r\n\t\tout.numeric = expand(Array.prototype.slice.call(arguments, 2), allowExpand);\r\n\t\tif ( !t ) return out;\r\n\r\n\t\tif ( isJSArray(t) ) {\r\n\t\t\tfor ( var i = 0; i < t.length; ++i ) {\r\n\t\t\t\tvar pair = t[i];\r\n\t\t\t\tvar key = pair[0];\r\n\t\t\t\tvar val = pair[1];\r\n\t\t\t\tif ( typeof key == \"number\" ) {\r\n\t\t\t\t\tout.numeric[key - 1] = val;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tout.hash[key] = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor ( var k in t ) {\r\n\t\t\t\tout.hash[k] = t[k];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction makeFunction(f) {\r\n\t\tf.__luaType = \"function\";\r\n\t\treturn f;\r\n\t}\r\n\r\n\tfunction LuaReturnValues(v) {\r\n\t\tthis.values = v;\r\n\t}\r\n\r\n\tObject.defineProperty(LuaReturnValues.prototype, \"__luaType\",  {value: \"returnValues\",  enumerable: false});\r\n\r\n\tfunction lookupMetaTable(table, entry) {\r\n\t\tif ( table instanceof LuaTable ) {\r\n\t\t\tif ( table.__metatable === undefined ) return null;\r\n\r\n\t\t\tvar idx = table.__metatable.hash[entry];\r\n\t\t\tif ( idx === null || idx === undefined ) return null;\r\n\r\n\t\t\treturn idx;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction lookupMetaTableBin(a, b, entry) {\r\n\t\tvar mt = lookupMetaTable(a, entry);\r\n\t\tif ( mt == null ) return lookupMetaTable(b, entry);\r\n\t\treturn mt;\r\n\t}\r\n\r\n\tfunction index(table, prop, helper) {\r\n\t\tif ( table === null || table === undefined || typeof table == \"number\" ) {\r\n\t\t\tif ( helper == undefined ) {\r\n\t\t\t\tthrow \"attempt to index a \" + type(table) + \" value\";\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"attempt to index '\" + helper + \"' (a \" + type(table) + \" value)\";\r\n\t\t\t}\r\n\t\t} else if ( table instanceof LuaTable ) {\r\n\t\t\tvar val;\r\n\t\t\tif ( typeof prop == \"number\") val = table.numeric[prop-1];\r\n\t\t\telse val = table.hash[prop];\r\n\r\n\t\t\tif ( val !== null & val !== undefined ) return val;\r\n\r\n\t\t\tvar idxfx = lookupMetaTable(table, \"__index\");\r\n\t\t\tif ( idxfx == null ) return null;\r\n\r\n\t\t\tif ( typeof idxfx == \"function\" ) return oneValue(idxfx(table, prop));\r\n\t\t\treturn index(idxfx, prop);\r\n\t\t} else if ( isJSArray(table) ) {\r\n\t\t\treturn table[prop - 1];\r\n\t\t} else if ( typeof table == \"string\" ) {\r\n\t\t\tvar sidx = tonumber(prop);\r\n\t\t\tif ( sidx < 0 ) sidx += (table.length + 1);\r\n\t\t\treturn table[sidx-1];\r\n\t\t} else {\r\n\t\t\treturn table[prop];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction indexAssign(table, prop, value, helper) {\r\n\r\n\t\tif ( table === null || table === undefined || typeof table == \"number\" ) {\r\n\t\t\tif ( helper == undefined ) {\r\n\t\t\t\tthrow \"attempt to index a \" + type(table) + \" value\";\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"attempt to index '\" + helper + \"' (a \" + type(table) + \" value)\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( table instanceof LuaTable ) {\r\n\t\t\tvar val;\r\n\r\n\t\t\tif ( prop === undefined || prop === null ) throw \"table index is nil\";\r\n\r\n\t\t\tif ( typeof prop == \"number\" ) val = table.numeric[prop-1];\r\n\t\t\telse val = table.hash[prop];\r\n\r\n\t\t\tif ( val !== null & val !== undefined ) {\r\n\t\t\t\tif ( typeof prop == \"number\") table.numeric[prop-1] = value;\r\n\t\t\t\telse table.hash[prop] = value;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif ( table.__metatable === undefined ) {\r\n\t\t\t\tif ( typeof prop == \"number\") table.numeric[prop-1] = value;\r\n\t\t\t\telse table.hash[prop] = value;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tvar idx = table.__metatable.__newindex;\r\n\t\t\tif ( idx === null || idx === undefined ) {\r\n\t\t\t\tif ( typeof pop == \"number\") table.numeric[prop] = value;\r\n\t\t\t\telse table.hash[prop] = value;\r\n\t\t\t\treturn true;\t\r\n\t\t\t}\r\n\r\n\t\t\tif ( typeof idx == \"function\" ) idx(table, prop, value);\r\n\t\t\telse indexAssign(idx, prop, value);\r\n\r\n\t\t\treturn true;\r\n\r\n\r\n\t\t} else if ( typeof table == \"string\" ) { \r\n\t\t\tthrow \"attempt to index string value\";\r\n\t\t} else if ( isJSArray(table) ) {\r\n\t\t\ttable[prop-1] = value;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction oneValue(v) {\r\n\t\tif ( v instanceof LuaReturnValues ) return v.values[0];\r\n\t\treturn v;\r\n\t}\r\n\r\n\tfunction makeMultiReturn() {\r\n\t\treturn new LuaReturnValues(expand(arguments, true));\r\n\t}\r\n\r\n\tfunction expand(what, allowExpand) {\r\n\t\tif ( allowExpand === undefined ) allowExpand = false;\r\n\r\n\t\tvar out = [];\r\n\t\tfor ( var idx in what ) {\r\n\t\t\tvar v = what[idx];\r\n\t\t\tif ( v instanceof LuaReturnValues ) {\r\n\t\t\t\tfor ( var i in v.values ) {\r\n\t\t\t\t\tout.push(v.values[i]);\r\n\t\t\t\t\tif ( idx < what.length - 1 || !allowExpand) break;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tout.push(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction expandReturnValues() {\r\n\t\treturn expand(arguments, true);\r\n\t}\r\n\r\n\tfunction pcall(what /*, args... */ ) {\r\n\t\ttry {\r\n\t\t\tvar result = expand([what.apply(this, Array.prototype.slice.call(arguments, 1))], true);\r\n\t\t\tresult.unshift(true);\r\n\t\t\treturn makeMultiReturn.apply(__lua, result);\r\n\t\t} catch ( e ) {\r\n\t\t\treturn makeMultiReturn(false, e);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isTable(a) { return a instanceof LuaTable; }\r\n\r\n\tfunction mark(o) {\r\n\t\tvar seen = [];\r\n\t\tfunction domark(o) {\r\n\t\t\tif ( o in seen ) return;\r\n\t\t\tseen.push(o);\r\n\t\t\tif ( typeof o == \"object\" ) for ( var idx in o ) domark(o[idx]);\r\n\t\t\telse if ( typeof o == \"function\" ) o.__luaType = \"function\";\r\n\t\t\t\r\n\t\t}\r\n\t\tdomark(o);\r\n\t}\r\n\r\n\treturn {\r\n\t\tadd: add,\r\n\t\tsub: sub,\r\n\t\tmul: mul,\r\n\t\tdiv: div,\r\n\t\tintdiv: intdiv,\r\n\t\tmod: mod,\r\n\t\tcall: call,\r\n\t\tlte: lte,\r\n\t\tlt: lt,\r\n\t\tne: ne,\r\n\t\tgt: gt,\r\n\t\tgte: gte,\r\n\t\teq: eq,\r\n\t\tindex: index,\r\n\t\tindexAssign: indexAssign,\r\n\t\tconcat: concat,\r\n\t\tmakeTable: makeTable,\r\n\t\tmakeFunction: makeFunction,\r\n\t\texpandReturnValues: expandReturnValues,\r\n\t\tmakeMultiReturn: makeMultiReturn,\r\n\t\tcount: count,\r\n\t\tand: and,\r\n\t\tor: or,\r\n\t\texpand: expand,\r\n\t\trest: rest,\r\n\t\tpcall: pcall,\r\n\t\ttype: type,\r\n\t\tpow: pow,\r\n\t\tisTable: isTable,\r\n\t\tmark: mark,\r\n\t\tforcomp: forcomp,\r\n\t\tmakeString: makeString,\r\n\t\toneValue: oneValue,\r\n\t\tlookupMetaTable: lookupMetaTable,\r\n\t\tisJSArray: isJSArray\r\n\t};\r\n\r\n})();\r\n\r\n\r\nthis.__lua = __lua;\r\n\r\nenv.string = {\r\n\tbyte: function byte(s,i,j) {\r\n\t\tvar chars = env.string.sub(s,i,j);\r\n\t\tvar out = [];\r\n\t\tfor ( var i = 0; i < chars.length; ++i ) out[i] = chars.charCodeAt(i);\r\n\t\treturn __lua.makeMultiReturn.apply(__lua, out);\r\n\t},\r\n\tchar: function char(/* arguments */) {\r\n\t\tvar out = \"\";\r\n\t\tfor ( var i = 0; i < arguments.length; ++i ) {\r\n\t\t\tout += String.fromCharCode(arguments[i]|0); \r\n\t\t}\r\n\t\treturn out;\r\n\r\n\t},\r\n\tdump: null,\r\n\tfind: null,\r\n\tgmatch: null,\r\n\tgsub: null,\r\n\tlen: function len(s) { return (\"\" + s).length; },\r\n\tlower: function lower(s) { return (\"\" + s).toLowerCase(); },\r\n\tmatch: null,\r\n\treverse: function(s) {\r\n\t\treturn (\"\" + s).split(\"\").reverse().join(\"\");\r\n\t},\r\n\tsub: function(s, i, j) {\r\n\t\tif ( i === undefined || i === null ) i = 1;\r\n\t\tif ( j === undefined || j === null ) j = s.length;\r\n\t\tif ( i < 0 ) i += (s.length+1);\r\n\t\tif ( j < 0 ) j += (s.length+1);\r\n\r\n\t\treturn __lua.makeString(s).substring(i-1,j);\r\n\r\n\t},\r\n\tupper: function lower(s) { return (\"\" + s).toUpperCase(); },\r\n\tformat: function format(format, etc) {\r\n\t\tvar arg = arguments;\r\n\t\tvar i = 1;\r\n\t\treturn format.replace(/%([0-9.]+)?([%sfdgi])/g, function (m, w, t) {\r\n\t\t\tvar r = null;\r\n\t\t\tif ( t == \"%\" ) return \"%\";\r\n\t\t\telse if ( t == \"s\") r = arg[i++];\r\n\t\t\telse if ( t == \"d\") r = parseInt(arg[i++]);\r\n\t\t\telse if ( t == \"i\") r = parseInt(arg[i++]);\r\n\t\t\telse if ( t == \"f\" ) r = arg[i++].toFixed(parseFloat(m[1]) || 6);\r\n\t\t\telse r = arg[i++]; \r\n\t\t\tr = \"\" + r;\r\n\t\t\tif ( parseInt(w) ) {\r\n\t\t\t\tvar extra = parseInt(w) - r.length;\r\n\t\t\t\tif ( extra > 0 ) r = new Array(extra).join(\" \") + r;\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t});\r\n\t}\r\n\r\n};\r\n\r\nenv.table = {\r\n\tconcat: null,\r\n\tinsert: null,\r\n\tpack: function(/* arguments */) {\r\n\t\tvar obj = {}\r\n\t\tfor ( var i = 0; i < arguments.length; ++i) {\r\n\t\t\tobj[(\"\" + (i + 1))] = arguments[i];\r\n\t\t}\r\n\t\treturn __lua.makeTable(obj);\r\n\t},\r\n\tremove: null,\r\n\tsort: function sort(table) { return table; },\r\n\tunpack: function(table,i,j) {\r\n\t\tif ( i === undefined || i === null ) i = 1;\r\n\t\tif ( j === undefined || j === null ) j = __lua.count(table);\r\n\r\n\t\tvar arr = [];\r\n\t\tif ( __lua.isTable(table) ) {\r\n\t\t\tfor ( var a = i; a <= j; ++a ) {\r\n\t\t\t\tarr.push(table.numeric[a]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor ( var a = i; a <= j; ++a ) {\r\n\t\t\t\tarr.push(table[a]);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\treturn __lua.makeMultiReturn.apply(__lua, arr);\r\n\r\n\r\n\t}\r\n\r\n};\r\n\r\nenv.unpack = env.table.unpack;\r\n\r\nenv.tonumber = function(n) {\r\n\treturn parseInt(n);\r\n};\r\n\r\nenv.tostring = function(n) {\r\n\treturn __lua.makeString(n);\r\n};\r\n\r\nenv.os = {\r\n\tclock: null,\r\n\tdate: null,\r\n\tdifftime: function difftime(t1,t2) { return t2 - t1; },\r\n\texecute: null,\r\n\texit: null,\r\n\ttime: function time(table) {\r\n\t\tif ( table == null ) return new Date().getTime();\r\n\t\tthrow \"Time given a table not implemented yet.\";\r\n\t}\r\n};\r\n\r\nenv.io = {\r\n\twrite: function() { env.print(arguments); }\r\n};\r\n\r\nenv.error = function error(s) { throw s; };\r\n\r\nenv.assert = function assert(what, msg, code) {\r\n\tif ( code === undefined ) {\r\n\t\tcode = msg;\r\n\t\tmsg = undefined;\r\n\t}\r\n\r\n\tif ( !!what ) return what;\r\n\r\n\tthrow(\"Assert Failed!! \" + code);\r\n};\r\n\r\nenv.type = function type(what) {\r\n\treturn __lua.type(what);\r\n};\r\n\r\n\r\nenv.pairs = function pairs(table) {\r\n\r\n\tvar mtf = __lua.lookupMetaTable(table, \"__pairs\");\r\n\tif ( mtf !== null ) return mtf(table);\r\n\r\n\tvar list = [];\r\n\tif ( __lua.isTable(table) ) {\r\n\t\tfor ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, i, table.numeric]);\r\n\t\tfor ( var idx in table.hash ) list.push([idx, idx, table.hash]);\r\n\t} else if ( __lua.isJSArray(table) ) {\r\n\t\tfor ( var i = 0; i < table.length; ++i ) list.push([i + 1, i, table]);\r\n\t} else {\r\n\t\tvar keys = Object.keys(table);\r\n\t\tfor ( var idx in keys ) list.push([keys[idx], keys[idx], table]);\r\n\t}\r\n\r\n\treturn __lua.makeMultiReturn(function(handle, cur) {\r\n\t\tif ( handle.length < 1 ) return null;\r\n\t\tvar nfo = handle.shift();\r\n\t\tvar k = nfo[0];\r\n\t\tvar v = nfo[2][nfo[1]];\r\n\t\treturn __lua.makeMultiReturn(k,v);\r\n\t}, list, null);\r\n};\r\n\r\nenv.ipairs = function ipairs(table) {\r\n\r\n\tvar mtf = __lua.lookupMetaTable(table, \"__ipairs\");\r\n\tif ( mtf !== null ) return mtf(table);\r\n\r\n\treturn __lua.makeMultiReturn(function ipairsitr(table, cur) {\r\n\t\tcur = cur + 1;\r\n\t\tif ( __lua.isJSArray(table) ) {\r\n\t\t\tif ( table.length < cur ) return null;\r\n\t\t\treturn __lua.makeMultiReturn(cur, table[cur-1]);\r\n\t\t} else if ( __lua.isTable(table) ) {\r\n\t\t\tif ( table.numeric[cur-1] === null || table.numeric[cur-1] === undefined ) return null;\r\n\t\t\treturn __lua.makeMultiReturn(cur, table.numeric[cur-1]);\r\n\t\t} else {\r\n\t\t\treturn table[cur-1];\r\n\t\t}\r\n\t}, table, 0);\r\n};\r\n\r\nenv.next = function next(table, cur) {\r\n\tif ( __lua.isTable(table) ) {\r\n\t\tvar list = [];\r\n\t\tfor ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, table.numeric[i]]);\r\n\t\tfor ( var tidx in table.hash ) list.push([tidx, table.hash[tidx]]);\r\n\t\tvar trigger = false;\r\n\t\tfor ( var i = 0; i < list.length; ++i ) {\r\n\t\t\tvar itm = list[i];\r\n\t\t\tif ( cur === null || cur === undefined || trigger ) {\r\n\t\t\t\tif ( itm[1] !== undefined && itm[1] !== null )\r\n\t\t\t\t\treturn __lua.makeMultiReturn(itm[0], itm[1]);\r\n\t\t\t}\r\n\t\t\tif ( cur === itm[0] ) trigger = true;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t} else {\r\n\t\tvar listk = Object.keys(table);\r\n\t\tvar trigger = false;\r\n\t\tfor ( var i = 0; i < listk.length; ++i ) {\r\n\t\t\tvar idx = listk[i];\r\n\t\t\tvar sidx = idx;\r\n\t\t\tif ( typeof sidx == \"number\" ) sidx = sidx = 1;\r\n\t\t\tif ( cur === null || cur === undefined || trigger ) return __lua.makeMultiReturn(idx, table[sidx]);\r\n\t\t\tif ( cur === idx ) trigger = true;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nenv.print = function print() { console.log.apply(console, arguments); };\r\nenv.pcall = this.__lua.pcall;\r\n\r\nenv.rawequals = function rawequals(a,b) { return a == b; };\r\nenv.rawget = function rawget(table, prop) { \r\n\tif ( table instanceof LuaTable ) {\r\n\t\tif ( typeof prop == \"number\" ) return table.numeric[prop - 1];\r\n\t\telse return table.hash[prop];\r\n\t}\r\n\treturn table[prop]; \r\n};\r\nenv.rawset = function rawset(table, prop, val) { \r\n\tif ( table instanceof LuaTable ) {\r\n\t\tif ( typeof prop == \"number\" ) return table.numeric[prop - 1] = val;\r\n\t\telse return table.hash[prop] = val;\r\n\t}\r\n\treturn table[prop] = val; \r\n};\r\n\r\nenv.something = function something(table) {\r\n\tvar array = [];\r\n\tvar idx = 1;\r\n\twhile ( table[idx] !== undefined ) {\r\n\t\tarray.push(table[idx]);\r\n\t\t++idx;\r\n\t}\r\n\treturn __lua.makeMultiReturn.apply(__lua, array);\r\n};\r\nenv.math = Math;\r\n\r\nenv.setmetatable = function setmetatable(target, meta) {\r\n\r\n\tObject.defineProperty(target, \"__metatable\", {value: meta, enumerable: false, configurable: true });\r\n\treturn target;\r\n};\r\n\r\nenv.getmetatable = function getmetatable(taget, meta) {\r\n\treturn taget.__metatable;\r\n};\r\n\r\nvar reduce = function reduce(arr, op) {\r\n\tif ( arr.length < 1 ) return undefined;\r\n\tvar val = arr[0];\r\n\tfor ( var i = 1; i < arr.length; ++i ) {\r\n\t\tval = op(val, arr[i]);\r\n\t}\r\n\treturn val;\r\n};\r\n\r\nenv.bit32 = {\r\n\tband: function band() { return reduce(arguments, function(a,b) { return a & b; }); },\r\n\tbor: function bor() { return reduce(arguments, function(a,b) { return a | b; }); },\r\n\tbxor: function bxor() { return reduce(arguments, function(a,b) { return a | b; }); },\r\n\r\n\trshift: function rshift(b, disp) { return b >> disp; }\r\n};\r\n\r\nenv.require = function require(what) {\r\n\tif ( what == \"bit\" ) return env.bit32;\r\n\tif ( what == \"bit32\" ) return env.bit32;\r\n\tthrow \"Module \" + waht + \" not found\";\r\n};\r\n\r\n__lua.mark(env);\r\n__lua.env = env;\r\nfor ( var idx in env ) this[idx] = env[idx];\r\n\r\n\r\n},{}],4:[function(require,module,exports){\r\nwindow.aetherLua2JS = require('lua2js');\r\n\r\n},{\"lua2js\":1}]},{},[4]);"]}