{"version":3,"sources":["app/lib/aether_utils.coffee"],"names":[],"mappings":";AAAA;;AAAA,QAAQ,QAAR;;AACA,QAAQ,OAAR;;AAEA,QAAQ,QAAQ,YAAR;;AAER,MAAM,CAAC,SAAP,CAAiB,QAAjB,EAA2B,QAAQ,gBAAR,CAA3B;;AACA,MAAM,CAAC,SAAP,CAAiB,GAAjB,EAAsB,CAAtB;;AAEA,MAAM,CAAC,OAAO,CAAC,mBAAf,GAAqC,SAAC,OAAD;AACnC;EAAA,KAA8E,OAAO,CAAC,YAAtF;AAAA,UAAU,UAAM,sDAAN,EAAV;;EACA,KAA8E,OAAO,CAAC,YAAtF;AAAA,UAAU,UAAM,sDAAN,EAAV;;EAEA,gBACE;IAAA,cAAc,OAAO,CAAC,YAAtB;IACA,YAAY,CAAI,OAAO,CAAC,cADxB;IAEA,aAAa,QAAQ,OAAO,CAAC,WAAhB,CAFb;IAGA,mBAAmB,IAHnB;IAIA,6BAA6B,IAJ7B;IAKA,oBAAoB,OAAO,CAAC,YAAR,KAAwB,MAL5C;IAMA,aAAa,IANb;IAOA,oBAAoB,IAPpB;IAQA,SAAS,CAAC,QAAD,EAAW,GAAX,CART;IASA,UACE;MAAA,aAAa;QAAC,OAAO,QAAR;OAAb;MACA,aAAa;QAAC,OAAO,QAAR;OADb;MAEA,aAAa;QAAC,OAAO,QAAR;OAFb;MAGA,aAAa;QAAC,OAAO,QAAR;OAHb;MAIA,aAAa;QAAC,OAAO,QAAR;OAJb;MAKA,gBAAgB;QAAC,OAAO,QAAR;OALhB;MAMA,oBAAoB;QAAC,OAAO,OAAR;OANpB;KAVF;IAiBA,gBAAgB,OAAO,CAAC,cAjBxB;IAmBA,gBAAgB,IAAI,IAAJ,GAAW,IAnB3B;IAoBA,UAAU,OAAO,CAAC,YApBlB;IAqBA,gBAAgB,IArBhB;;EAsBF,aAAa,kBAAmB,QAAO,CAAC,YAAR;EAChC,KAAO,UAAP;IACE,OAAO,CAAC,IAAR,CAAa,oBAAkB,OAAO,CAAC,YAA1B,GAAuC,8DAApD;IACA,aAAa,GAFf;;EAGA,IAAG,OAAO,CAAC,kBAAR,IAA+B,CAAI,CAAC,CAAC,OAAF,CAAU,OAAO,CAAC,kBAAlB,EAAsC,UAAtC,CAAtC;IACE,OAAO,CAAC,KAAR,CAAc,2EAAyE,OAAO,CAAC,YAAjF,GAA8F,SAA9F,GAAuG,UAAvG,GAAkH,iBAAlH,GAAmI,OAAO,CAAC,kBAA3I,GAA8J,GAA5K;IACA,aAAa,OAAO,CAAC,mBAFvB;;EAGA,aAAa,CAAC,kBAAd,GAAmC,UAAU,CAAC,KAAX;AAEnC,SAAO;AApC4B;;AAuCrC,qBACE;EAAA,MAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,MAAvB,CAAN;EACA,SAAS,CAAC,iBAAD,CADT;EAEA,eAAe,CAAC,WAAD,CAFf;EAGA,UAAU,CAAC,MAAD,CAHV;EAIA,eAAe,CAAC,OAAD,EAAU,QAAV,CAJf;EAKA,kBAAkB,CAAC,OAAD,CALlB;EAMA,mBAAmB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,MAAtC,CANnB;EAOA,YAAY,CAAC,QAAD,CAPZ;EASA,cAAc,EATd;EAUA,MAAM,EAVN;EAWA,qBAAqB,EAXrB;EAYA,QAAQ,EAZR;EAaA,iBAAiB,EAbjB;EAcA,KAAK,EAdL","file":"public/javascripts/app/lib/aether_utils.js","sourcesContent":["require 'aether'\r\nrequire 'esper'\r\n\r\nutils = require 'core/utils'\r\n\r\nAether.addGlobal 'Vector', require './world/vector'\r\nAether.addGlobal '_', _\r\n\r\nmodule.exports.createAetherOptions = (options) ->\r\n  throw new Error 'Specify a function name to create an Aether instance' unless options.functionName\r\n  throw new Error 'Specify a code language to create an Aether instance' unless options.codeLanguage\r\n\r\n  aetherOptions =\r\n    functionName: options.functionName\r\n    protectAPI: not options.skipProtectAPI\r\n    includeFlow: Boolean options.includeFlow\r\n    noVariablesInFlow: true\r\n    skipDuplicateUserInfoInFlow: true  # Optimization that won't work if we are stepping with frames\r\n    yieldConditionally: options.functionName is 'plan'\r\n    simpleLoops: true\r\n    whileTrueAutoYield: true\r\n    globals: ['Vector', '_']\r\n    problems:\r\n      jshint_W040: {level: 'ignore'}\r\n      jshint_W030: {level: 'ignore'}  # aether_NoEffect instead\r\n      jshint_W038: {level: 'ignore'}  # eliminates hoisting problems\r\n      jshint_W091: {level: 'ignore'}  # eliminates more hoisting problems\r\n      jshint_E043: {level: 'ignore'}  # https://github.com/codecombat/codecombat/issues/813 -- since we can't actually tell JSHint to really ignore things\r\n      jshint_Unknown: {level: 'ignore'}  # E043 also triggers Unknown, so ignore that, too\r\n      aether_MissingThis: {level: 'error'}\r\n    problemContext: options.problemContext\r\n    #functionParameters: # TODOOOOO\r\n    executionLimit: 3 * 1000 * 1000\r\n    language: options.codeLanguage\r\n    useInterpreter: true\r\n  parameters = functionParameters[options.functionName]\r\n  unless parameters\r\n    console.warn \"Unknown method #{options.functionName}: please add function parameters to lib/aether_utils.coffee.\"\r\n    parameters = []\r\n  if options.functionParameters and not _.isEqual options.functionParameters, parameters\r\n    console.error \"Update lib/aether_utils.coffee with the right function parameters for #{options.functionName} (had: #{parameters} but this gave #{options.functionParameters}.\"\r\n    parameters = options.functionParameters\r\n  aetherOptions.functionParameters = parameters.slice()\r\n  #console.log 'creating aether with options', aetherOptions\r\n  return aetherOptions\r\n\r\n# TODO: figure out some way of saving this info dynamically so that we don't have to hard-code it: #1329\r\nfunctionParameters =\r\n  hear: ['speaker', 'message', 'data']\r\n  makeBid: ['tileGroupLetter']\r\n  findCentroids: ['centroids']\r\n  isFriend: ['name']\r\n  evaluateBoard: ['board', 'player']\r\n  getPossibleMoves: ['board']\r\n  minimax_alphaBeta: ['board', 'player', 'depth', 'alpha', 'beta']\r\n  distanceTo: ['target']\r\n\r\n  chooseAction: []\r\n  plan: []\r\n  initializeCentroids: []\r\n  update: []\r\n  getNearestEnemy: []\r\n  die: []\r\n"]}