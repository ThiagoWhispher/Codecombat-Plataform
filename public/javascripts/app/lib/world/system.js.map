{"version":3,"sources":["app/lib/world/system.coffee"],"names":[],"mappings":";AAIA;EAAA;;AAAA,MAAM,CAAC,OAAP,GAAuB;EACrB,MAAC,UAAD,GAAY;;EACC,gBAAC,KAAD,EAAS,MAAT;AAGX;IAHY,IAAC,SAAD;AAGZ;AAAA;;MACE,IAAE,KAAF,GAAS;AADX;IAEA,IAAC,WAAD,GAAc;IACd,IAAC,OAAD,GAAU;EANC;;mBASb,QAAO,SAAC,MAAD;;mBAIP,SAAQ,SAAC,MAAD;AACN;WAAA,OAAO;EADD;;mBAIR,SAAQ,SAAC,MAAD;;mBAER,cAAa,SAAC,SAAD;AACX;IAAA,WAAW;IACX,IAAC,WAAU,CAAC,IAAZ,CAAiB,CAAC,QAAD,EAAW,SAAX,CAAjB;WACA;EAHW;;mBAMb,WAAU,SAAC,KAAD;AACR;AAAA;AAAA;qBAAK,oBAAU;MACb,IAAG,UAAU,KAAV,CAAH;QACE,IAAG,aAAa,QAAb,YAAH;UACE,QAAQ,CAAC,IAAT,CAAc,KAAd,EADF;SADF;OAAA;QAIE,aAAa,QAAQ,CAAC,OAAT,CAAiB,KAAjB;QACb,IAAG,eAAgB,CAAC,CAApB;UACE,QAAQ,CAAC,MAAT,CAAgB,UAAhB,EAA4B,CAA5B,EADF;SALF;;AADF;WAQA;EATQ;;mBAYV,oBAAmB,SAAC,KAAD,EAAQ,QAAR;;mBAEnB,aAAY,SAAC,CAAD;AACV;IAAA,IAAqB,KAAK,IAAC,OAA3B;AAAA,aAAO,IAAC,OAAO,IAAf;;IACA,OAAO;AACP,SAAS,gGAAT;MACE,OAAO,OAAO,EAAP,GAAY,CAAC,CAAC,UAAF,CAAa,CAAb;AADrB;IAEA,OAAO,IAAC,OAAO,GAAR,GAAa,OAAO;WAC3B;EANU;;mBAQZ,WAAU;WACR,cAAY,IAAC,YAAW,CAAC;EADjB","file":"public/javascripts/app/lib/world/system.js","sourcesContent":["# The System will operate on its Thangs of interest in each WorldFrame.\r\n# Systems so far: AI, UI, Collision, Movement, Targeting, Programming, Combat, Vision, Hearing, Inventory, Actions\r\n# Other Systems might be things like Attraction, EdgeBounce, EdgeWrap, and non-physics ones, too, like Rendering, Animation, ...\r\n\r\nmodule.exports = class System\r\n  @className: 'System'\r\n  constructor: (@world, config) ->\r\n    # Unlike with Component, we don't automatically copy all our properties onto the World.\r\n    # Subclasses can copy select properties here if they like.\r\n    for key, value of (config ? {})\r\n      @[key] = value\r\n    @registries = []\r\n    @hashes = {}\r\n\r\n  # Start is called once the beginning, after all Thangs have been loaded.\r\n  start: (thangs) ->\r\n\r\n  # Update is called once per frame on all thangs that currently have exist=true in the World.\r\n  # We return a simple numeric hash that will combine to a frame hash help us determine whether this frame has changed later on.\r\n  update: (thangs) ->\r\n    hash = 0\r\n\r\n  # Finish is called once at the end, after all frames have been generated.\r\n  finish: (thangs) ->\r\n\r\n  addRegistry: (condition) ->\r\n    registry = []\r\n    @registries.push [registry, condition]\r\n    registry\r\n\r\n  # Register is called whenever a Thang changes important state (exists, dead, etc), and can be called more specifically by individual Thangs.\r\n  register: (thang) ->\r\n    for [registry, condition] in @registries\r\n      if condition thang\r\n        if thang not in registry\r\n          registry.push thang\r\n      else\r\n        thangIndex = registry.indexOf thang\r\n        if thangIndex isnt -1\r\n          registry.splice thangIndex, 1\r\n    null\r\n\r\n  # Override this to determine which registries have which conditions\r\n  checkRegistration: (thang, registry) ->\r\n\r\n  hashString: (s) ->\r\n    return @hashes[s] if s of @hashes\r\n    hash = 0\r\n    for i in [0 ... Math.min(s.length, 100)]\r\n      hash = hash * 31 + s.charCodeAt(i)\r\n    hash = @hashes[s] = hash % 3.141592653589793\r\n    hash\r\n\r\n  toString: ->\r\n    \"<System: #{@constructor.className}\"\r\n"]}