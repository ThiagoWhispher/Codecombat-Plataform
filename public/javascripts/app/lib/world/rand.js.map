{"version":3,"sources":["app/lib/world/rand.coffee"],"names":[],"mappings":";AACA;EAAA;;AAAM;EACJ,IAAC,UAAD,GAAY;;EAEC,cAAC,KAAD;AAEX;IAFY,IAAC,QAAD;;;;;;;;;IAEZ,IAAC,WAAD,GAAc;IACd,IAAC,OAAD,GAAU;IACV,IAAC,OAAD,GAAU;IACV,MAAO,uBAAW,aAAK,IAAC,MAAN,UAAa,IAAC,OAAd,CAAlB;MACE,IAAC,KAAD,GAAQ,CAAK,UAAM,CAAC,OAAP,EAAJ,GAA2B,UAAM,CAAC,eAAP,EAA5B,IAAwD,IAAC,QADnE;;EALW;;iBASb,UAAS,SAAC,IAAD;WACP,IAAC,KAAD,GAAQ,CAAC,CAAC,OAAO,IAAC,OAAT,IAAmB,IAAC,OAArB,IAA+B,IAAC;EADjC;;iBAIT,QAAO;WAEL,IAAC,KAAD,GAAQ,CAAC,IAAC,WAAD,GAAc,IAAC,KAAf,GAAsB,IAAC,OAAxB,IAAkC,IAAC;EAFtC;;iBAKP,QAAO;WACL,IAAC,MAAD,KAAW,IAAC;EADP;;iBAIP,OAAM,SAAC,CAAD;WACJ,IAAI,CAAC,KAAL,CAAW,IAAC,MAAD,KAAW,CAAtB;EADI;;iBAIN,QAAO,SAAC,GAAD,EAAM,GAAN;WACL,MAAM,IAAC,KAAD,CAAM,MAAM,GAAZ;EADD;;iBAIP,SAAQ,SAAC,GAAD,EAAM,GAAN;WACN,MAAM,IAAC,MAAD,KAAW,CAAC,MAAM,GAAP;EADX;;iBAIR,aAAY,SAAC,CAAD,EAAI,KAAJ;WACV,IAAI,CAAC,CAAC,GAAD,GAAO,IAAC,MAAD,EAAR,IAAoB;EADd;;iBAIZ,UAAS,SAAC,GAAD;AACP;IAAA,MAAkB,GAAG,CAAC,MAAJ,GAAa,CAA/B;AAAA,aAAO,IAAP;;AACA,SAAS,kFAAT;MACE,IAAI,IAAI,CAAC,KAAL,CAAW,IAAC,MAAD,KAAW,CAAC,IAAI,CAAL,CAAtB;MACJ,IAAI,GAAI;MACR,GAAI,GAAJ,GAAS,GAAI;MACb,GAAI,GAAJ,GAAS;AAJX;WAKA;EAPO;;iBAST,SAAQ,SAAC,GAAD;AACN,WAAO,GAAI,KAAC,KAAD,CAAM,GAAG,CAAC,MAAV;EADL;;;;;;AAIV,MAAM,CAAC,OAAP,GAAiB","file":"public/javascripts/app/lib/world/rand.js","sourcesContent":["# http://coffeescriptcookbook.com/chapters/math/generating-predictable-random-numbers\r\nclass Rand\r\n  @className: 'Rand'\r\n  # If created without a seed, uses current time as seed.\r\n  constructor: (@seed) ->\r\n    # Knuth and Lewis' improvements to Park and Miller's LCPRNG\r\n    @multiplier = 1664525\r\n    @modulo = 4294967296 # 2**32-1\r\n    @offset = 1013904223\r\n    unless @seed? and 0 <= @seed < @modulo\r\n      @seed = (new Date().valueOf() * new Date().getMilliseconds()) % @modulo\r\n\r\n  # sets new seed value, even handling negative numbers\r\n  setSeed: (seed) ->\r\n    @seed = ((seed % @modulo) + @modulo) % @modulo\r\n\r\n  # return a random integer 0 <= n < @modulo\r\n  randn: =>\r\n    # new_seed = (a * seed + c) % m\r\n    @seed = (@multiplier * @seed + @offset) % @modulo\r\n\r\n # return a random float 0 <= f < 1.0\r\n  randf: =>\r\n    @randn() / @modulo\r\n\r\n  # return a random int 0 <= f < n\r\n  rand: (n) =>\r\n    Math.floor @randf() * n\r\n\r\n  # return a random int min <= f < max\r\n  rand2: (min, max) =>\r\n    min + @rand max - min\r\n\r\n  # return a random float min <= f < max\r\n  randf2: (min, max) =>\r\n    min + @randf() * (max - min)\r\n\r\n  # return a random float within range around x\r\n  randfRange: (x, range) =>\r\n    x + (-0.5 + @randf()) * range\r\n\r\n  # shuffle array in place, and also return it\r\n  shuffle: (arr) =>\r\n    return arr unless arr.length > 2\r\n    for i in [arr.length-1 .. 1]\r\n      j = Math.floor @randf() * (i + 1)\r\n      t = arr[j]\r\n      arr[j] = arr[i]\r\n      arr[i] = t\r\n    arr\r\n  \r\n  choice: (arr) =>\r\n    return arr[@rand arr.length]\r\n\r\n\r\nmodule.exports = Rand\r\n"]}