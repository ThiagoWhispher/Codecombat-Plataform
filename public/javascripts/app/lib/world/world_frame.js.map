{"version":3,"sources":["app/lib/world/world_frame.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/world_frame.js","sourcesContent":["ThangState = require './thang_state'\r\n\r\nmodule.exports = class WorldFrame\r\n  @className: 'WorldFrame'\r\n\r\n  constructor: (@world, @time=0) ->\r\n    @thangStateMap = {}\r\n    @setState() if @world\r\n\r\n  getNextFrame: ->\r\n    # Optimized. Must be called while thangs are current at this frame.\r\n    nextTime = @time + @world.dt\r\n    return null if nextTime > @world.lifespan and not @world.indefiniteLength\r\n    @hash = @world.rand.seed\r\n    @hash += system.update() for system in @world.systems\r\n    nextFrame = new WorldFrame(@world, nextTime)\r\n    return nextFrame\r\n\r\n  setState: ->\r\n    for thang in @world.thangs when not thang.stateless\r\n      @thangStateMap[thang.id] = thang.getState()\r\n\r\n  restoreState: ->\r\n    thangState.restore() for thangID, thangState of @thangStateMap\r\n    for thang in @world.thangs\r\n      if not @thangStateMap[thang.id] and not thang.stateless\r\n        #console.log 'Frame', @time, 'restoring state for', thang.id, 'and saying it don\\'t exist'\r\n        thang.exists = false\r\n\r\n  restorePartialState: (ratio) ->\r\n    thangState.restorePartial ratio for thangID, thangState of @thangStateMap\r\n\r\n  restoreStateForThang: (thang) ->\r\n    thangState = @thangStateMap[thang.id]\r\n    if not thangState\r\n      if not thang.stateless\r\n        thang.exists = false\r\n        #console.log 'Frame', @time, 'restoring state for', thang.id, 'in particular and saying it don\\'t exist'\r\n      return\r\n    thangState.restore()\r\n\r\n  clearEvents: -> thang.currentEvents = [] for thang in @world.thangs\r\n\r\n  toString: ->\r\n    map = ((' ' for x in [0 .. @world.width])  \\\r\n           for y in [0 .. @world.height])\r\n    symbols = '.ox@dfga[]/D'\r\n    for thang, i in @world.thangs when thang.rectangle\r\n      rect = thang.rectangle().axisAlignedBoundingBox()\r\n      for y in [Math.floor(rect.y - rect.height / 2) ... Math.ceil(rect.y + rect.height / 2)]\r\n        for x in [Math.floor(rect.x - rect.width / 2) ... Math.ceil(rect.x + rect.width / 2)]\r\n          map[y][x] = symbols[i % symbols.length] if 0 <= y < @world.height and 0 <= x < @world.width\r\n    @time + '\\n' + (xs.join(' ') for xs in map).join('\\n') + '\\n'\r\n\r\n  serialize: (frameIndex, trackedPropertiesThangIDs, trackedPropertiesPerThangIndices, trackedPropertiesPerThangTypes, trackedPropertiesPerThangValues, specialValuesToKeys, specialKeysToValues) ->\r\n    # Optimize\r\n    for thangID, thangIndex in trackedPropertiesThangIDs\r\n      thangState = @thangStateMap[thangID]\r\n      if thangState\r\n        thangState.serialize(frameIndex, trackedPropertiesPerThangIndices[thangIndex], trackedPropertiesPerThangTypes[thangIndex], trackedPropertiesPerThangValues[thangIndex], specialValuesToKeys, specialKeysToValues)\r\n    @hash\r\n\r\n  @deserialize: (world, frameIndex, trackedPropertiesThangIDs, trackedPropertiesThangs, trackedPropertiesPerThangKeys, trackedPropertiesPerThangTypes, trackedPropertiesPerThangValues, specialKeysToValues, hash, age) ->\r\n    # Optimize\r\n    wf = new WorldFrame null, age\r\n    wf.world = world\r\n    wf.hash = hash\r\n    for thangID, thangIndex in trackedPropertiesThangIDs\r\n      wf.thangStateMap[thangID] = ThangState.deserialize world, frameIndex, trackedPropertiesThangs[thangIndex], trackedPropertiesPerThangKeys[thangIndex], trackedPropertiesPerThangTypes[thangIndex], trackedPropertiesPerThangValues[thangIndex], specialKeysToValues\r\n    wf\r\n"]}