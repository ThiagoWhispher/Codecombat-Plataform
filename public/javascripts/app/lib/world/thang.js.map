{"version":3,"sources":["app/lib/world/thang.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/thang.js","sourcesContent":["ThangState = require './thang_state'\r\n{thangNames} = require './names'\r\n{ArgumentError} = require './errors'\r\nRand = require './rand'\r\n\r\nmodule.exports = class Thang\r\n  @className: 'Thang'\r\n  @remainingThangNames: {}\r\n\r\n  @nextID: (spriteName, world) ->\r\n    originals = thangNames[spriteName] or [spriteName]\r\n    remaining = Thang.remainingThangNames[spriteName]\r\n    remaining = Thang.remainingThangNames[spriteName] = originals.slice() unless remaining?.length\r\n\r\n    baseName = remaining.splice(world.rand.rand(remaining.length), 1)[0]\r\n    i = 0\r\n    while true\r\n      name = if i then \"#{baseName} #{i}\" else baseName\r\n      extantThang = world.thangMap[name]\r\n      break unless extantThang\r\n      i++\r\n    name\r\n\r\n  @resetThangIDs: -> Thang.remainingThangNames = {}\r\n  isThang: true\r\n  apiProperties: ['id', 'spriteName', 'health', 'pos', 'team']\r\n\r\n  constructor: (@world, @spriteName, @id) ->\r\n    @spriteName ?= @constructor.className\r\n    @id ?= @constructor.nextID @spriteName, @world\r\n    @addTrackedProperties ['exists', 'boolean']  # TODO: move into Systems/Components, too?\r\n    #console.log \"Generated #{@toString()}.\"\r\n\r\n  destroy: ->\r\n    # Just trying to destroy __aetherAPIClone, but might as well nuke everything just in case\r\n    @[key] = undefined for key of @\r\n    @destroyed = true\r\n    @destroy = ->\r\n\r\n  updateRegistration: ->\r\n    system.register @ for system in @world.systems\r\n\r\n  publishNote: (channel, event) ->\r\n    event.thang = @\r\n    @world.publishNote channel, event\r\n\r\n  getGoalState: (goalID) ->\r\n    @world.getGoalState goalID\r\n\r\n  setGoalState: (goalID, status) ->\r\n    @world.setGoalState goalID, status\r\n\r\n  getThangByID: (id) ->\r\n    @world.getThangByID id\r\n\r\n  addComponents: (components...) ->\r\n    # We don't need to keep the components around after attaching them, but we will keep their initial config for recreating Thangs\r\n    @components ?= []\r\n    for [componentClass, componentConfig] in components\r\n      @components.push [componentClass, componentConfig]\r\n      if _.isString componentClass  # We had already turned it into a string, so re-classify it momentarily\r\n        componentClass = @world.classMap[componentClass]\r\n      else\r\n        @world?.classMap[componentClass.className] ?= componentClass\r\n      c = new componentClass componentConfig ? {}\r\n      c.attach @\r\n\r\n  # [prop, type]s of properties which have values tracked across WorldFrames. Also call keepTrackedProperty some non-expensive time when you change it or it will be skipped.\r\n  addTrackedProperties: (props...) ->\r\n    @trackedPropertiesKeys ?= []\r\n    @trackedPropertiesTypes ?= []\r\n    @trackedPropertiesUsed ?= []\r\n    for [prop, type] in props\r\n      unless type in ThangState.trackedPropertyTypes\r\n        # How should errors for busted Components work? We can't recover from this and run the world.\r\n        throw new Error \"Type #{type} for property #{prop} is not a trackable property type: #{ThangState.trackedPropertyTypes}\"\r\n      oldPropIndex = @trackedPropertiesKeys.indexOf prop\r\n      if oldPropIndex is -1\r\n        @trackedPropertiesKeys.push prop\r\n        @trackedPropertiesTypes.push type\r\n        @trackedPropertiesUsed.push false\r\n      else\r\n        oldType = @trackedPropertiesTypes[oldPropIndex]\r\n        if type isnt oldType\r\n          throw new Error \"Two types were specified for trackable property #{prop}: #{oldType} and #{type}.\"\r\n\r\n  keepTrackedProperty: (prop) ->\r\n    # Wish we could do this faster, but I can't think of how.\r\n    propIndex = @trackedPropertiesKeys.indexOf prop\r\n    if propIndex isnt -1\r\n      @trackedPropertiesUsed[propIndex] = true\r\n\r\n  # @trackedFinalProperties: names of properties which need to be tracked once at the end of the World; don't worry about types\r\n  addTrackedFinalProperties: (props...) ->\r\n    @trackedFinalProperties ?= []\r\n    @trackedFinalProperties = @trackedFinalProperties.concat (k for k in props when not (k in @trackedFinalProperties))\r\n\r\n  getState: ->\r\n    @_state = new ThangState @\r\n  setState: (state) ->\r\n    @_state = state.restore()\r\n\r\n  toString: -> @id\r\n\r\n  createMethodChain: (methodName) ->\r\n    @methodChains ?= {}\r\n    chain = @methodChains[methodName]\r\n    return chain if chain\r\n    chain = @methodChains[methodName] = {original: @[methodName], user: null, components: []}\r\n    @[methodName] = _.partial @callChainedMethod, methodName  # Optimize! _.partial is fastest I've found\r\n    chain\r\n\r\n  appendMethod: (methodName, newMethod) ->\r\n    # Components add methods that come after the original method\r\n    @createMethodChain(methodName).components.push newMethod\r\n\r\n  callChainedMethod: (methodName, args...) ->\r\n    # Optimize this like crazy--but how?\r\n    chain = @methodChains[methodName]\r\n    primaryMethod = chain.user or chain.original\r\n    ret = primaryMethod?.apply @, args\r\n    for componentMethod in chain.components\r\n      ret2 = componentMethod.apply @, args\r\n      ret = ret2 ? ret  # override return value only if not null\r\n    ret\r\n\r\n  getMethodSource: (methodName) ->\r\n    source = {}\r\n    if @methodChains? and methodName of @methodChains\r\n      chain = @methodChains[methodName]\r\n      source.original = chain.original.toString()\r\n      source.user = chain.user?.toString()\r\n    else\r\n      source.original = @[methodName]?.toString() ? ''\r\n    source.original = Aether.getFunctionBody source.original\r\n    source\r\n\r\n  serialize: ->\r\n    o = {spriteName: @spriteName, id: @id, components: [], finalState: {}}\r\n    for [componentClass, componentConfig], i in (@components ? [])\r\n      if _.isString componentClass\r\n        componentClassName = componentClass\r\n      else\r\n        componentClassName = componentClass.className\r\n        @world.classMap[componentClass.className] ?= componentClass\r\n      o.components.push [componentClassName, componentConfig]\r\n    for trackedFinalProperty in @trackedFinalProperties ? []\r\n      # TODO: take some (but not all) of serialize logic from ThangState to handle other types\r\n      o.finalState[trackedFinalProperty] = @[trackedFinalProperty]\r\n    # Since we might keep tracked properties later during streaming, we need to know which we think are unused.\r\n    o.unusedTrackedPropertyKeys = (@trackedPropertiesKeys[propIndex] for used, propIndex in @trackedPropertiesUsed when not used)\r\n    o\r\n\r\n  @deserialize: (o, world, classMap, levelComponents) ->\r\n    t = new Thang world, o.spriteName, o.id\r\n    for [componentClassName, componentConfig] in o.components\r\n      unless componentClass = classMap[componentClassName]\r\n        console.debug 'Compiling new Component while deserializing:', componentClassName\r\n        componentModel = _.find levelComponents, name: componentClassName\r\n        componentClass = world.loadClassFromCode componentModel.js, componentClassName, 'component'\r\n        world.classMap[componentClassName] = componentClass\r\n      t.addComponents [componentClass, componentConfig]\r\n    t.unusedTrackedPropertyKeys = o.unusedTrackedPropertyKeys\r\n    t.unusedTrackedPropertyValues = (t[prop] for prop in o.unusedTrackedPropertyKeys)\r\n    for prop, val of o.finalState\r\n      # TODO: take some (but not all) of deserialize logic from ThangState to handle other types\r\n      t[prop] = val\r\n    t\r\n\r\n  serializeForAether: ->\r\n    {CN: @constructor.className, id: @id}\r\n\r\n  getLankOptions: ->\r\n    colorConfigs = @teamColors or @world?.getTeamColors() or {}\r\n    options = {colorConfig: {}}\r\n    if @id is 'Hero Placeholder' and not @world.getThangByID 'Hero Placeholder 1'\r\n      return options  # No team colors for heroes on single-player levels\r\n    if @team and teamColor = colorConfigs[@team]\r\n      options.colorConfig.team = teamColor\r\n    if @color and color = @grabColorConfig @color\r\n      options.colorConfig.color = color\r\n    if @colors\r\n      options.colorConfig[colorType] = colorValue for colorType, colorValue of @colors\r\n    options\r\n\r\n  grabColorConfig: (color) ->\r\n    {\r\n      green: {hue: 0.33, saturation: 0.5, lightness: 0.5}\r\n      black: {hue: 0, saturation: 0, lightness: 0.25}\r\n      violet: {hue: 0.83, saturation: 0.5, lightness: 0.5}\r\n    }[color]\r\n"]}