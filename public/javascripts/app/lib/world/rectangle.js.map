{"version":3,"sources":["app/lib/world/rectangle.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/rectangle.js","sourcesContent":["Vector = require './vector'\r\nLineSegment = require './line_segment'\r\n\r\nclass Rectangle\r\n  @className: 'Rectangle'\r\n  # Class methods for nondestructively operating - TODO: add rotate\r\n  for name in ['add', 'subtract', 'multiply', 'divide']\r\n    do (name) ->\r\n      Rectangle[name] = (a, b) ->\r\n        a.copy()[name](b)\r\n\r\n  isRectangle: true\r\n  apiProperties: ['x', 'y', 'width', 'height', 'rotation', 'getPos', 'vertices', 'touchesRect', 'touchesPoint', 'distanceToPoint', 'distanceSquaredToPoint', 'distanceToRectangle', 'distanceSquaredToRectangle', 'distanceToEllipse', 'distanceSquaredToEllipse', 'distanceToShape', 'distanceSquaredToShape', 'containsPoint', 'copy', 'intersectsLineSegment', 'intersectsEllipse', 'intersectsRectangle', 'intersectsShape']\r\n\r\n  constructor: (@x=0, @y=0, @width=0, @height=0, @rotation=0) ->\r\n\r\n  copy: ->\r\n    new Rectangle(@x, @y, @width, @height, @rotation)\r\n\r\n  getPos: ->\r\n    new Vector(@x, @y)\r\n\r\n  vertices: ->\r\n    # Counter-clockwise, starting from bottom left (when unrotated)\r\n    [w2, h2, cos, sin] = [@width / 2, @height / 2, Math.cos(@rotation), Math.sin(-@rotation)]\r\n    [\r\n      new Vector @x - (w2 * cos - h2 * sin), @y - (w2 * sin + h2 * cos)\r\n      new Vector @x - (w2 * cos + h2 * sin), @y - (w2 * sin - h2 * cos)\r\n      new Vector @x + (w2 * cos - h2 * sin), @y + (w2 * sin + h2 * cos)\r\n      new Vector @x + (w2 * cos + h2 * sin), @y + (w2 * sin - h2 * cos)\r\n    ]\r\n\r\n  lineSegments: ->\r\n    vertices = @vertices()\r\n    lineSegment0 = new LineSegment vertices[0], vertices[1]\r\n    lineSegment1 = new LineSegment vertices[1], vertices[2]\r\n    lineSegment2 = new LineSegment vertices[2], vertices[3]\r\n    lineSegment3 = new LineSegment vertices[3], vertices[0]\r\n    [lineSegment0, lineSegment1, lineSegment2, lineSegment3]\r\n\r\n  touchesRect: (other) ->\r\n    # Whether this rect shares part of any edge with other rect, for non-rotated, non-overlapping rectangles.\r\n    # I think it says kitty-corner rects touch, but I don't think I want that.\r\n    # Float instability might get me, too.\r\n    [bl1, tl1, tr1, br1] = @vertices()\r\n    [bl2, tl2, tr2, br2] = other.vertices()\r\n    return false if tl1.x > tr2.x or tl2.x > tr1.x\r\n    return false if bl1.y > tl2.y or bl2.y > tl1.y\r\n    return true if tl1.x is tr2.x or tl2.x is tr1.x\r\n    return true if tl1.y is bl2.y or tl2.y is bl1.y\r\n    false\r\n\r\n  touchesPoint: (p) ->\r\n    # Whether this rect has point p exactly on one of its edges, assuming no rotation.\r\n    [bl, tl, tr, br] = @vertices()\r\n    return false unless p.y >= bl.y and p.y <= tl.y\r\n    return false unless p.x >= bl.x and p.x <= br.x\r\n    return true if p.x is bl.x or p.x is br.x\r\n    return true if p.y is bl.y or p.y is tl.y\r\n    false\r\n\r\n  axisAlignedBoundingBox: (rounded=true) ->\r\n    box = @copy()\r\n    return box unless @rotation\r\n    box.rotation = 0\r\n    [left, top] = [9001, 9001]\r\n    for vertex in @vertices()\r\n      [left, top] = [Math.min(left, vertex.x), Math.min(top, vertex.y)]\r\n    if rounded\r\n      [left, top] = [Math.round(left), Math.round(top)]\r\n    [box.width, box.height] = [2 * (@x - left), 2 * (@y - top)]\r\n    box\r\n\r\n  distanceToPoint: (p) ->\r\n    # Get p in rect's coordinate space, then operate in one quadrant.\r\n    p = Vector.subtract(p, @getPos()).rotate(-@rotation)\r\n    dx = Math.max(Math.abs(p.x) - @width / 2, 0)\r\n    dy = Math.max(Math.abs(p.y) - @height / 2, 0)\r\n    Math.sqrt dx * dx + dy * dy\r\n\r\n  distanceSquaredToPoint: (p) ->\r\n    # Doesn't handle rotation; just supposed to be faster than distanceToPoint.\r\n    p = Vector.subtract(p, @getPos())\r\n    dx = Math.max(Math.abs(p.x) - @width / 2, 0)\r\n    dy = Math.max(Math.abs(p.y) - @height / 2, 0)\r\n    dx * dx + dy * dy\r\n\r\n  distanceToRectangle: (other) ->\r\n    Math.sqrt @distanceSquaredToRectangle other\r\n\r\n  distanceSquaredToRectangle: (other) ->\r\n    return 0 if @intersectsRectangle other\r\n    [firstVertices, secondVertices] = [@vertices(), other.vertices()]\r\n    [firstEdges, secondEdges] = [@lineSegments(), other.lineSegments()]\r\n    ans = Infinity\r\n    for i in [0 ... 4]\r\n      for j in [0 ... firstEdges.length]\r\n        ans = Math.min ans, firstEdges[j].distanceSquaredToPoint(secondVertices[i])\r\n      for j in [0 ... secondEdges.length]\r\n        ans = Math.min ans, secondEdges[j].distanceSquaredToPoint(firstVertices[i])\r\n    ans\r\n\r\n  distanceToEllipse: (ellipse) ->\r\n    Math.sqrt @distanceSquaredToEllipse ellipse\r\n\r\n  distanceSquaredToEllipse: (ellipse) ->\r\n    @distanceSquaredToRectangle ellipse.rectangle()  # TODO: actually implement rectangle-ellipse distance\r\n\r\n  distanceToShape: (shape) ->\r\n    Math.sqrt @distanceSquaredToShape shape\r\n\r\n  distanceSquaredToShape: (shape) ->\r\n    if shape.isEllipse then @distanceSquaredToEllipse shape else @distanceSquaredToRectangle shape\r\n\r\n  containsPoint: (p, withRotation=true) ->\r\n    if withRotation and @rotation\r\n      not @distanceToPoint(p)\r\n    else\r\n      @x - @width / 2 < p.x < @x + @width / 2 and @y - @height / 2 < p.y < @y + @height / 2\r\n\r\n  intersectsLineSegment: (p1, p2) ->\r\n    [px1, py1, px2, py2] = [p1.x, p1.y, p2.x, p2.y]\r\n    m1 = (py1 - py2) / (px1 - px2)\r\n    b1 = py1 - (m1 * px1)\r\n    vertices = @vertices()\r\n    lineSegments = [[vertices[0], vertices[1]], [vertices[1], vertices[2]], [vertices[2], vertices[3]], [vertices[3], vertices[0]]]\r\n    for lineSegment in lineSegments\r\n      [px1, py1, px2, py2] = [p1.x, p1.y, p2.x, p2.y]\r\n      m2 = (py1 - py2) / (px1 - px2)\r\n      b2 = py1 - (m * px1)\r\n      if m1 isnt m2\r\n        m = m1 - m2\r\n        b = b2 - b1\r\n        x = b / m\r\n        [littleX, bigX] = if px1 < px2 then [px1, px2] else [px2, px1]\r\n        if x >= littleX and x <= bigX\r\n          y = (m1 * x) + b1\r\n          [littleY, bigY] = if py1 < py2 then [py1, py2] else [py2, py1]\r\n          if littleY <= solution and bigY >= solution\r\n            return true\r\n    false\r\n\r\n  intersectsRectangle: (rectangle) ->\r\n    return true if @containsPoint rectangle.getPos()\r\n    for thisLineSegment in @lineSegments()\r\n      for thatLineSegment in rectangle.lineSegments()\r\n        if thisLineSegment.intersectsLineSegment(thatLineSegment)\r\n          return true\r\n    false\r\n\r\n  intersectsEllipse: (ellipse) ->\r\n    return true if @containsPoint ellipse.getPos()\r\n    return true for lineSegment in @lineSegments() when ellipse.intersectsLineSegment lineSegment.a, lineSegment.b\r\n    false\r\n\r\n  intersectsShape: (shape) ->\r\n    if shape.isEllipse then @intersectsEllipse shape else @intersectsRectangle shape\r\n\r\n  subtract: (point) ->\r\n    @x -= point.x\r\n    @y -= point.y\r\n    @pos.subtract point\r\n    @\r\n\r\n  add: (point) ->\r\n    @x += point.x\r\n    @y += point.y\r\n    @pos.add point\r\n    @\r\n\r\n  divide: (n) ->\r\n    [@width, @height] = [@width / n, @height / n]\r\n    @\r\n\r\n  multiply: (n) ->\r\n    [@width, @height] = [@width * n, @height * n]\r\n    @\r\n\r\n  isEmpty: () ->\r\n    @width is 0 and @height is 0\r\n\r\n  invalid: () ->\r\n    return (@x is Infinity) || isNaN(@x) || @y is Infinity || isNaN(@y) || @width is Infinity || isNaN(@width) || @height is Infinity || isNaN(@height) || @rotation is Infinity || isNaN(@rotation)\r\n\r\n  toString: ->\r\n    return \"{x: #{@x.toFixed(0)}, y: #{@y.toFixed(0)}, w: #{@width.toFixed(0)}, h: #{@height.toFixed(0)}, rot: #{@rotation.toFixed(3)}}\"\r\n\r\n  serialize: ->\r\n    {CN: @constructor.className, x: @x, y: @y, w: @width, h: @height, r: @rotation}\r\n\r\n  @deserialize: (o, world, classMap) ->\r\n    new Rectangle o.x, o.y, o.w, o.h, o.r\r\n\r\n  serializeForAether: -> @serialize()\r\n  @deserializeFromAether: (o) -> @deserialize o\r\n\r\nmodule.exports = Rectangle\r\n"]}