{"version":3,"sources":["app/lib/sprites/SpriteBuilder.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/sprites/SpriteBuilder.js","sourcesContent":["{hexToHSL, hslToHex} = require 'core/utils'\r\n\r\nmodule.exports = class SpriteBuilder\r\n  constructor: (@thangType, @options) ->\r\n    @options ?= {}\r\n    raw = @thangType.get('raw') or {}\r\n    @shapeStore = raw.shapes\r\n    @containerStore = raw.containers\r\n    @animationStore = raw.animations\r\n    @buildColorMaps()\r\n\r\n  setOptions: (@options) ->\r\n\r\n  buildMovieClip: (animationName, mode, startPosition, loops, labels) ->\r\n    animData = @animationStore[animationName]\r\n    unless animData\r\n      console.error 'couldn\\'t find animData from', @animationStore, 'for', animationName\r\n      return null\r\n    locals = {}\r\n    _.extend locals, @buildMovieClipShapes(animData.shapes)\r\n    _.extend locals, @buildMovieClipContainers(animData.containers)\r\n    _.extend locals, @buildMovieClipAnimations(animData.animations)\r\n    _.extend locals, @buildMovieClipGraphics(animData.graphics)\r\n    anim = new createjs.MovieClip()\r\n    if not labels\r\n      labels = {}\r\n      labels[animationName] = 0\r\n    anim.initialize(mode ? createjs.MovieClip.INDEPENDENT, startPosition ? 0, loops ? true, labels)\r\n    for tweenData in animData.tweens\r\n      tween = createjs.Tween\r\n      stopped = false\r\n      for func in tweenData\r\n        args = _.cloneDeep(func.a)\r\n        @dereferenceArgs(args, locals)\r\n        if tween[func.n]\r\n          tween = tween[func.n](args...)\r\n        else\r\n          # If we, say, skipped a shadow get(), then the wait() may not be present\r\n          stopped = true\r\n          break\r\n      anim.timeline.addTween(tween) unless stopped\r\n\r\n    anim.nominalBounds = new createjs.Rectangle(animData.bounds...)\r\n    if animData.frameBounds\r\n      anim.frameBounds = (new createjs.Rectangle(bounds...) for bounds in animData.frameBounds)\r\n    anim\r\n\r\n  dereferenceArgs: (args, locals) ->\r\n    for key, val of args\r\n      if locals[val]\r\n        args[key] = locals[val]\r\n      else if val is null\r\n        args[key] = {}\r\n      else if _.isString(val) and val.indexOf('createjs.') is 0\r\n        args[key] = eval(val) # TODO: Security risk\r\n      else if _.isObject(val) or _.isArray(val)\r\n        @dereferenceArgs(val, locals)\r\n    args\r\n\r\n  buildMovieClipShapes: (localShapes) ->\r\n    map = {}\r\n    for localShape in localShapes\r\n      if localShape.im\r\n        shape = new createjs.Shape()\r\n        shape._off = true\r\n      else\r\n        shape = @buildShapeFromStore(localShape.gn)\r\n        if localShape.m\r\n          shape.mask = map[localShape.m]\r\n      map[localShape.bn] = shape\r\n    map\r\n\r\n  buildMovieClipContainers: (localContainers) ->\r\n    map = {}\r\n    for localContainer in localContainers\r\n      container = @buildContainerFromStore(localContainer.gn)\r\n      container.setTransform(localContainer.t...)\r\n      container._off = localContainer.o if localContainer.o?\r\n      container.alpha = localContainer.al if localContainer.al?\r\n      map[localContainer.bn] = container\r\n    map\r\n\r\n  buildMovieClipAnimations: (localAnimations) ->\r\n    map = {}\r\n    for localAnimation in localAnimations\r\n      animation = @buildMovieClip(localAnimation.gn, localAnimation.a...)\r\n      animation.setTransform(localAnimation.t...)\r\n      map[localAnimation.bn] = animation\r\n    map\r\n\r\n  buildMovieClipGraphics: (localGraphics) ->\r\n    map = {}\r\n    for localGraphic in localGraphics\r\n      graphic = new createjs.Graphics().p(localGraphic.p)\r\n      map[localGraphic.bn] = graphic\r\n    map\r\n\r\n  buildShapeFromStore: (shapeKey, debug=false) ->\r\n    shapeData = @shapeStore[shapeKey]\r\n    shape = new createjs.Shape()\r\n    if shapeData.lf?\r\n      shape.graphics.lf shapeData.lf...\r\n    else if shapeData.fc?\r\n      shape.graphics.f @colorMap[shapeKey] or shapeData.fc\r\n    else if shapeData.rf?\r\n      shape.graphics.rf shapeData.rf...\r\n    if shapeData.ls?\r\n      shape.graphics.ls shapeData.ls...\r\n    else if shapeData.sc?\r\n      shape.graphics.s shapeData.sc\r\n    shape.graphics.ss shapeData.ss... if shapeData.ss?\r\n    shape.graphics.de shapeData.de... if shapeData.de?\r\n    shape.graphics.p shapeData.p if shapeData.p?\r\n    shape.setTransform shapeData.t...\r\n    shape\r\n\r\n  buildContainerFromStore: (containerKey) ->\r\n    console.error 'Yo we don\\'t have no containerKey' unless containerKey\r\n    contData = @containerStore[containerKey]\r\n    cont = new createjs.Container()\r\n    cont.initialize()\r\n    for childData in contData.c\r\n      if _.isString(childData)\r\n        child = @buildShapeFromStore(childData)\r\n      else\r\n        continue if not childData.gn\r\n        child = @buildContainerFromStore(childData.gn)\r\n        child.setTransform(childData.t...)\r\n      cont.addChild(child)\r\n    cont.bounds = new createjs.Rectangle(contData.b...)\r\n    cont\r\n\r\n  buildColorMaps: ->\r\n    @colorMap = {}\r\n    colorGroups = @thangType.get('colorGroups')\r\n    return if _.isEmpty colorGroups\r\n    return unless _.size @shapeStore  # We don't have the shapes loaded because we are doing a prerendered spritesheet approach\r\n    colorConfig = @options.colorConfig\r\n#    colorConfig ?= {team: {hue:0.4, saturation: -0.5, lightness: -0.5}} # test config\r\n    return if not colorConfig\r\n\r\n    for group, config of colorConfig\r\n      continue unless colorGroups[group] # color group not found...\r\n      @buildColorMapForGroup(colorGroups[group], config)\r\n\r\n  buildColorMapForGroup: (shapes, config) ->\r\n    return unless shapes.length\r\n    colors = @initColorMap(shapes)\r\n    @adjustHuesForColorMap(colors, config.hue)\r\n    @adjustValueForColorMap(colors, 1, config.saturation)\r\n    @adjustValueForColorMap(colors, 2, config.lightness)\r\n    @applyColorMap(shapes, colors)\r\n\r\n  initColorMap: (shapes) ->\r\n    colors = {}\r\n    for shapeKey in shapes\r\n      shape = @shapeStore[shapeKey]\r\n      continue if (not shape.fc?) or colors[shape.fc]\r\n      hsl = hexToHSL(shape.fc)\r\n      colors[shape.fc] = hsl\r\n    colors\r\n\r\n  adjustHuesForColorMap: (colors, targetHue) ->\r\n    hues = (hsl[0] for hex, hsl of colors)\r\n\r\n    # 'rotate' the hue spectrum so averaging works\r\n    if Math.max(hues) - Math.min(hues) > 0.5\r\n      hues = (if h < 0.5 then h + 1.0 else h for h in hues)\r\n    averageHue = sum(hues) / hues.length\r\n    averageHue %= 1\r\n    # end result should be something like a hue array of [0.9, 0.3] gets an average of 0.1\r\n\r\n    targetHue ?= 0\r\n    diff = targetHue - averageHue\r\n    hsl[0] = (hsl[0] + diff + 1) % 1 for hex, hsl of colors\r\n\r\n  adjustValueForColorMap: (colors, index, targetValue) ->\r\n    values = (hsl[index] for hex, hsl of colors)\r\n    averageValue = sum(values) / values.length\r\n    targetValue ?= 0.5\r\n    diff = targetValue - averageValue\r\n    for hex, hsl of colors\r\n      hsl[index] = Math.max(0, Math.min(1, hsl[index] + diff))\r\n\r\n  applyColorMap: (shapes, colors) ->\r\n    for shapeKey in shapes\r\n      shape = @shapeStore[shapeKey]\r\n      continue if (not shape.fc?) or not(colors[shape.fc])\r\n      @colorMap[shapeKey] = hslToHex(colors[shape.fc])\r\n\r\nsum = (nums) -> _.reduce(nums, (s, num) -> s + num)\r\n"]}