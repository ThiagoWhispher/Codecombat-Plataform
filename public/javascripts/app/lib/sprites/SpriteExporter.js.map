{"version":3,"sources":["app/lib/sprites/SpriteExporter.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/sprites/SpriteExporter.js","sourcesContent":["SpriteBuilder = require('./SpriteBuilder')\r\nThangType = require('models/ThangType')\r\nCocoClass = require('core/CocoClass')\r\n\r\n\r\nclass SpriteExporter extends CocoClass\r\n  '''\r\n  To be used by the ThangTypeEditView to export ThangTypes to single sprite sheets which can be uploaded to\r\n  GridFS and used in gameplay, avoiding rendering vector images.\r\n\r\n  Code has been copied and reworked and simplified from LayerAdapter. Some shared code has been refactored into\r\n  ThangType, but more work could be done to rethink and reorganize Sprite rendering.\r\n  '''\r\n\r\n  constructor: (thangType, options) ->\r\n    @thangType = thangType\r\n    options ?= {}\r\n    @colorConfig = options.colorConfig or {}\r\n    @resolutionFactor = options.resolutionFactor or 1\r\n    @actionNames = options.actionNames or (action.name for action in @thangType.getDefaultActions())\r\n    @spriteType = options.spriteType or @thangType.get('spriteType') or 'segmented'\r\n    super()\r\n\r\n  build: ->\r\n    spriteSheetBuilder = new createjs.SpriteSheetBuilder()\r\n    if @spriteType is 'segmented'\r\n      @renderSegmentedThangType(spriteSheetBuilder)\r\n    else\r\n      @renderSingularThangType(spriteSheetBuilder)\r\n    try\r\n      spriteSheetBuilder.buildAsync()\r\n    catch e\r\n      @resolutionFactor *= 0.9\r\n      return @build()\r\n    spriteSheetBuilder.on 'complete', @onBuildSpriteSheetComplete, @, true, spriteSheetBuilder\r\n    @asyncBuilder = spriteSheetBuilder\r\n\r\n  renderSegmentedThangType: (spriteSheetBuilder) ->\r\n    containersToRender = @thangType.getContainersForActions(@actionNames)\r\n    spriteBuilder = new SpriteBuilder(@thangType, {colorConfig: @colorConfig})\r\n    for containerGlobalName in containersToRender\r\n      container = spriteBuilder.buildContainerFromStore(containerGlobalName)\r\n      frame = spriteSheetBuilder.addFrame(container, null, @resolutionFactor * (@thangType.get('scale') or 1))\r\n      spriteSheetBuilder.addAnimation(containerGlobalName, [frame], false)\r\n\r\n  renderSingularThangType: (spriteSheetBuilder) ->\r\n    actionObjects = _.values(@thangType.getActions())\r\n    animationActions = []\r\n    for a in actionObjects\r\n      continue unless a.animation\r\n      continue unless a.name in @actionNames\r\n      animationActions.push(a)\r\n\r\n    spriteBuilder = new SpriteBuilder(@thangType, {colorConfig: @colorConfig})\r\n\r\n    animationGroups = _.groupBy animationActions, (action) -> action.animation\r\n    for animationName, actions of animationGroups\r\n      scale = actions[0].scale or @thangType.get('scale') or 1\r\n      mc = spriteBuilder.buildMovieClip(animationName, null, null, null, {'temp':0})\r\n      spriteSheetBuilder.addMovieClip(mc, null, scale * @resolutionFactor)\r\n      frames = spriteSheetBuilder._animations['temp'].frames\r\n      framesMap = _.zipObject _.range(frames.length), frames\r\n      for action in actions\r\n        if action.frames\r\n          frames = (framesMap[parseInt(frame)] for frame in action.frames.split(','))\r\n        else\r\n          frames = _.sortBy(_.values(framesMap))\r\n        next = @thangType.nextForAction(action)\r\n        spriteSheetBuilder.addAnimation(action.name, frames, next)\r\n\r\n    containerActions = []\r\n    for a in actionObjects\r\n      continue unless a.container\r\n      continue unless a.name in @actionNames\r\n      containerActions.push(a)\r\n\r\n    containerGroups = _.groupBy containerActions, (action) -> action.container\r\n    for containerName, actions of containerGroups\r\n      container = spriteBuilder.buildContainerFromStore(containerName)\r\n      scale = actions[0].scale or @thangType.get('scale') or 1\r\n      frame = spriteSheetBuilder.addFrame(container, null, scale * @resolutionFactor)\r\n      for action in actions\r\n        spriteSheetBuilder.addAnimation(action.name, [frame], false)\r\n\r\n  onBuildSpriteSheetComplete: (e, builder) ->\r\n    if builder.spriteSheet._images.length > 1\r\n      total = 0\r\n      # get a rough estimate of how much smaller the spritesheet needs to be\r\n      for image, index in builder.spriteSheet._images\r\n        total += image.height / builder.maxHeight\r\n      @resolutionFactor /= (Math.max(1.1, Math.sqrt(total)))\r\n      @_renderNewSpriteSheet(e.async)\r\n      return\r\n\r\n    @trigger 'build', { spriteSheet: builder.spriteSheet }\r\n\r\n\r\n\r\nmodule.exports = SpriteExporter"]}