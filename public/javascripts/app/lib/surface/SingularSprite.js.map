{"version":3,"sources":["app/lib/surface/SingularSprite.coffee"],"names":[],"mappings":";AAAA;EAAA;;;;AAAA,gBAAgB,QAAQ,2BAAR;;AAEhB,SAAS,CAAC,eAAD,EAAkB,cAAlB,EAAkC,OAAlC,EAA2C,SAA3C,EAAsD,SAAtD,EAAiE,SAAjE,EAA4E,SAA5E,EAAuF,SAAvF,EAAkG,cAAlG,EAAkH,UAAlH,EAA8H,SAA9H,EAAyI,SAAzI,EAAoJ,SAApJ,EAA+J,SAA/J,EAA0K,SAA1K,EAAqL,SAArL,EAAgM,SAAhM,EAA2M,SAA3M,EAAsN,SAAtN,EAAiO,SAAjO,EAA4O,SAA5O,EAAuP,SAAvP,EAAkQ,QAAlQ,EAA4Q,QAA5Q,EAAsR,QAAtR,EAAgS,QAAhS,EAA0S,QAA1S,EAAoT,QAApT,EAA8T,YAA9T,EAA4U,YAA5U,EAA0V,YAA1V,EAAwW,YAAxW,EAAsX,UAAtX,EAAkY,iBAAlY;;AAET,SAAS,CAAC,aAAD,EAAgB,cAAhB;;AAET,MAAM,CAAC,OAAP,GAAuB;;;2BACrB,kBAAiB;;EAEJ,wBAAC,WAAD,EAAe,SAAf,EAA2B,iBAA3B,EAA+C,gBAA/C;IAAC,IAAC,eAAD;IAAc,IAAC,aAAD;IAAY,IAAC,qBAAD;IAAoB,IAAC,+CAAD,mBAAkB;IAC5E,gDAAM,IAAC,YAAP;EADW;;2BAGb,UAAS;WACP,IAAC,wBAAD;EADO;;2BAGT,cAAa,SAAC,UAAD;WAAgB,IAAC,KAAD,CAAM,UAAN,EAAkB,KAAlB;EAAhB;;2BACb,cAAa,SAAC,UAAD;WAAgB,IAAC,KAAD,CAAM,UAAN,EAAkB,IAAlB;EAAhB;;2BACb,eAAc,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;;2BACxC,eAAc,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;;2BAExC,OAAM,SAAC,UAAD,EAAa,MAAb;AACJ;IADiB,IAAC,2BAAD,SAAQ;IACzB,IAAC,mBAAD,GAAsB;IAEtB,SAAS,IAAC,UAAS,CAAC,UAAX,EAAwB;IACjC,cAAc,CAAC,CAAC,MAAM,CAAC,UAAT,CAAoB,UAApB,EAAgC,MAAhC;IACd,6CAAsB,CAAE,sBAAlB,4DAA6D,CAAE,sBAA/D,IAA+E;MAAC,GAAE,CAAH;MAAM,GAAE,CAAR;;IAErF,IAAG,MAAM,CAAC,SAAV;MACE,IAAC,UAAD,GAAa,4CAAoB,EAApB,IAA0B,wCAAgB,CAAhB;MAEvC,OAAU,IAAC,OAAJ,GAAgB,cAAhB,GAAoC;MAC3C,gBAAgB,IAAC,kBAAD,GAAqB;MACrC,IAAE,MAAF,CAAQ,aAAR;MACA,IAAG,IAAC,aAAD,KAAiB,CAAjB,IAAsB,IAAC,gBAA1B;QACE,IAAC,aAAD,CAAc,CAAd;QACA,IAAC,wBAAD,CAAyB,MAAzB;QACA,uIAA6D,CAAE;;UAC/D,SAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;;QACV,2GAAwD;QACxD,IAAC,OAAD,GAAU,cAAc,MAAO,GAArB,GAA0B,CAAC,2BAA2B,IAAC,iBAA7B;QACpC,IAAC,OAAD,GAAU,cAAc,MAAO,GAArB,GAA0B,CAAC,2BAA2B,IAAC,iBAA7B;QACpC,IAAC,KAAD,GAAQ,CAAC,2BAA2B,IAAC,iBAA7B,IAAiD,CAAC,CAAC,CAAC,GAAG,CAAC,CAAL,GAAS,MAAO,GAAjB,IAAuB,MAAO,GAA/B;QACzD,IAAC,KAAD,GAAQ,CAAC,2BAA2B,IAAC,iBAA7B,IAAiD,CAAC,CAAC,CAAC,GAAG,CAAC,CAAL,GAAS,MAAO,GAAjB,IAAuB,MAAO,GAA/B,EAT3D;OAAA;QAWE,QAAQ,IAAC,iBAAD,GAAoB,gGAA0C,CAA1C;QAC5B,IAAC,KAAD,GAAQ,CAAC,GAAG,CAAC,CAAL,GAAS;QACjB,IAAC,KAAD,GAAQ,CAAC,GAAG,CAAC,CAAL,GAAS;QACjB,IAAC,OAAD,GAAU,IAAC,OAAD,GAAU,IAAI,IAAC;QACzB,IAAC,UAAD,GAAa,MAAM,CAAC,SAAP,IAAoB;QACjC,IAAG,eAAgB,gFAAiD,CAAE,eAAnD,CAAnB;UACE,IAAC,sBAAD,GAAyB,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,MAAM,CAAC,MAAlC,EAD3B;SAhBF;OANF;;IAyBA,IAAG,MAAM,CAAC,SAAV;MACE,gBAAgB,IAAC,kBAAD,GAAqB;MACrC,IAAC,aAAD,CAAc,aAAd;MACA,IAAG,IAAC,aAAD,KAAiB,CAAjB,IAAsB,IAAC,gBAA1B;QACE,IAAC,aAAD,CAAc,CAAd;QACA,IAAC,wBAAD,CAAyB,MAAzB;QACA,SAAS,IAAC,UAAS,CAAC,GAAX,CAAe,KAAf,CAAqB,CAAC,UAAW,OAAM,CAAC,SAAP,CAAiB,CAAC;QAC5D,+GAAwD;QACxD,IAAC,OAAD,GAAU,cAAc,MAAO,GAArB,GAA0B,CAAC,2BAA2B,IAAC,iBAA7B;QACpC,IAAC,OAAD,GAAU,cAAc,MAAO,GAArB,GAA0B,CAAC,2BAA2B,IAAC,iBAA7B;QACpC,IAAC,KAAD,GAAQ,CAAC,2BAA2B,IAAC,iBAA7B,IAAiD,CAAC,CAAC,CAAC,GAAG,CAAC,CAAL,GAAS,MAAO,GAAjB,IAAuB,MAAO,GAA/B;QACzD,IAAC,KAAD,GAAQ,CAAC,2BAA2B,IAAC,iBAA7B,IAAiD,CAAC,CAAC,CAAC,GAAG,CAAC,CAAL,GAAS,MAAO,GAAjB,IAAuB,MAAO,GAA/B,EAR3D;OAAA;QAUE,QAAQ,IAAC,iBAAD,GAAoB,kGAA0C,CAA1C;QAC5B,IAAC,KAAD,GAAQ,CAAC,GAAG,CAAC,CAAL,GAAS;QACjB,IAAC,KAAD,GAAQ,CAAC,GAAG,CAAC,CAAL,GAAS;QACjB,IAAC,OAAD,GAAU,IAAC,OAAD,GAAU,IAAI,IAAC,kBAb3B;OAHF;;IAkBA,IAAiB,MAAM,CAAC,KAAxB;MAAA,IAAC,OAAD,IAAW,CAAC,EAAZ;;IACA,IAAiB,MAAM,CAAC,KAAxB;MAAA,IAAC,OAAD,IAAW,CAAC,EAAZ;;IACA,IAAC,WAAD,GAAc,IAAC;IACf,IAAC,WAAD,GAAc,IAAC;IACf,IAAG,IAAC,OAAD,IAAY,aAAC,UAAS,CAAC,GAAX,CAAe,MAAf,gBAA0B,MAA1B,cAAf;MACE,IAAC,WAAD,IAAe,IAAC,OAAM,CAAC,IADzB;KAAA,MAEK,IAAG,IAAC,OAAD,IAAY,aAAC,UAAS,CAAC,GAAX,CAAe,MAAf,gBAA0B,MAA1B,cAAf;MACH,IAAG,eAAc,WAAjB;QACE,IAAC,WAAD,IAAe,IAAC,OAAM,CAAC;QACvB,IAAC,WAAD,IAAe,IAAC,OAAM,CAAC,GAAR,GAAc,KAF/B;OAAA;QAIE,IAAC,WAAD,IAAe,IAAC,OAAM,CAAC,GAAR,GAAc,KAJ/B;OADG;;IAML,IAAC,iBAAD,GAAoB;EA9DhB;;2BAiEN,0BAAyB,SAAC,MAAD;AACvB;0CAAK,CAAE,OAAP,CAAe,qBAAf,EAAsC,IAAC,KAAvC,EAA6C,MAA7C;EADuB;;;;GA/EmB,QAAQ,CAAC","file":"public/javascripts/app/lib/surface/SingularSprite.js","sourcesContent":["SpriteBuilder = require 'lib/sprites/SpriteBuilder'\r\n\r\nfloors = ['Dungeon Floor', 'Indoor Floor', 'Grass', 'Grass01', 'Grass02', 'Grass03', 'Grass04', 'Grass05', 'Goal Trigger', 'Obstacle', 'Sand 01', 'Sand 02', 'Sand 03', 'Sand 04', 'Sand 05', 'Sand 06', 'Talus 1', 'Talus 2', 'Talus 3', 'Talus 4', 'Talus 5', 'Talus 6', 'Firn 1', 'Firn 2', 'Firn 3', 'Firn 4', 'Firn 5', 'Firn 6', 'Ice Rink 1', 'Ice Rink 2', 'Ice Rink 3', 'Firn Cliff', 'VR Floor', 'Classroom Floor']\r\n\r\ncliffs = ['Dungeon Pit', 'Grass Cliffs']\r\n\r\nmodule.exports = class SingularSprite extends createjs.Sprite\r\n  childMovieClips: null\r\n\r\n  constructor: (@spriteSheet, @thangType, @spriteSheetPrefix, @resolutionFactor=SPRITE_RESOLUTION_FACTOR) ->\r\n    super(@spriteSheet)\r\n\r\n  destroy: ->\r\n    @removeAllEventListeners()\r\n\r\n  gotoAndPlay: (actionName) -> @goto(actionName, false)\r\n  gotoAndStop: (actionName) -> @goto(actionName, true)\r\n  _gotoAndPlay: createjs.Sprite.prototype.gotoAndPlay\r\n  _gotoAndStop: createjs.Sprite.prototype.gotoAndStop\r\n\r\n  goto: (actionName, @paused=true) ->\r\n    @actionNotSupported = false\r\n\r\n    action = @thangType.getActions()[actionName]\r\n    randomStart = _.string.startsWith(actionName, 'move')\r\n    reg = action.positions?.registration or @thangType.get('positions')?.registration or {x:0, y:0}\r\n\r\n    if action.animation\r\n      @framerate = (action.framerate ? 20) * (action.speed ? 1)\r\n\r\n      func = if @paused then '_gotoAndStop' else '_gotoAndPlay'\r\n      animationName = @spriteSheetPrefix + actionName\r\n      @[func](animationName)\r\n      if @currentFrame is 0 or @usePlaceholders\r\n        @_gotoAndStop(0)\r\n        @notifyActionNeedsRender(action)\r\n        bounds = @thangType.get('raw')?.animations?[action.animation]?.bounds # checking for just-prerendered-spritesheet thangs\r\n        bounds ?= [0, 0, 1, 1]\r\n        actionScale = (action.scale ? @thangType.get('scale') ? 1)\r\n        @scaleX = actionScale * bounds[2] / (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor)\r\n        @scaleY = actionScale * bounds[3] / (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor)\r\n        @regX = (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor) * ((-reg.x - bounds[0]) / bounds[2])\r\n        @regY = (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor) * ((-reg.y - bounds[1]) / bounds[3])\r\n      else\r\n        scale = @resolutionFactor * (action.scale ? @thangType.get('scale') ? 1)\r\n        @regX = -reg.x * scale\r\n        @regY = -reg.y * scale\r\n        @scaleX = @scaleY = 1 / @resolutionFactor\r\n        @framerate = action.framerate or 20\r\n        if randomStart and frames = @spriteSheet.getAnimation(animationName)?.frames\r\n          @currentAnimationFrame = Math.floor(Math.random() * frames.length)\r\n\r\n    if action.container\r\n      animationName = @spriteSheetPrefix + actionName\r\n      @_gotoAndStop(animationName)\r\n      if @currentFrame is 0 or @usePlaceholders\r\n        @_gotoAndStop(0)\r\n        @notifyActionNeedsRender(action)\r\n        bounds = @thangType.get('raw').containers[action.container].b\r\n        actionScale = (action.scale ? @thangType.get('scale') ? 1)\r\n        @scaleX = actionScale * bounds[2] / (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor)\r\n        @scaleY = actionScale * bounds[3] / (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor)\r\n        @regX = (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor) * ((-reg.x - bounds[0]) / bounds[2])\r\n        @regY = (SPRITE_PLACEHOLDER_WIDTH * @resolutionFactor) * ((-reg.y - bounds[1]) / bounds[3])\r\n      else\r\n        scale = @resolutionFactor * (action.scale ? @thangType.get('scale') ? 1)\r\n        @regX = -reg.x * scale\r\n        @regY = -reg.y * scale\r\n        @scaleX = @scaleY = 1 / @resolutionFactor\r\n\r\n    @scaleX *= -1 if action.flipX\r\n    @scaleY *= -1 if action.flipY\r\n    @baseScaleX = @scaleX\r\n    @baseScaleY = @scaleY\r\n    if @camera and @thangType.get('name') in floors\r\n      @baseScaleY *= @camera.y2x\r\n    else if @camera and @thangType.get('name') in cliffs\r\n      if actionName is 'idle_side'\r\n        @baseScaleX *= @camera.x2y# / 0.85\r\n        @baseScaleY *= @camera.y2x * 0.85\r\n      else\r\n        @baseScaleY *= @camera.y2x / 0.85\r\n    @currentAnimation = actionName\r\n    return\r\n\r\n  notifyActionNeedsRender: (action) ->\r\n    @lank?.trigger('action-needs-render', @lank, action)\r\n"]}