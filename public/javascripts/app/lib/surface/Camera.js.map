{"version":3,"sources":["app/lib/surface/Camera.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/surface/Camera.js","sourcesContent":["CocoClass = require 'core/CocoClass'\r\nGameUIState = require 'models/GameUIState'\r\n\r\n# If I were the kind of math major who remembered his math, this would all be done with matrix transforms.\r\n\r\nr2d = (radians) -> radians * 180 / Math.PI\r\nd2r = (degrees) -> degrees / 180 * Math.PI\r\n\r\nMAX_ZOOM = 8\r\nMIN_ZOOM = 0.1\r\nDEFAULT_ZOOM = 2.0\r\nDEFAULT_TARGET = {x: 0, y: 0}\r\nDEFAULT_TIME = 1000\r\nSTANDARD_ZOOM_WIDTH = 924\r\nSTANDARD_ZOOM_HEIGHT = 589\r\n\r\n# You can't mutate any of the constructor parameters after construction.\r\n# You can only call zoomTo to change the zoom target and zoom level.\r\nmodule.exports = class Camera extends CocoClass\r\n  @PPM: 10   # pixels per meter\r\n  @MPP: 0.1  # meters per pixel; should match @PPM\r\n\r\n  bounds: null  # list of two surface points defining the viewable rectangle in the world\r\n                # or null if there are no bounds\r\n\r\n  # what the camera is pointed at right now\r\n  target: DEFAULT_TARGET\r\n  zoom: DEFAULT_ZOOM\r\n  canvasScaleFactorX: 1\r\n  canvasScaleFactorY: 1\r\n\r\n  # properties for tracking going between targets\r\n  oldZoom: null\r\n  newZoom: null\r\n  oldTarget: null\r\n  newTarget: null\r\n  tweenProgress: 0.0\r\n\r\n  instant: false\r\n\r\n  # INIT\r\n\r\n  subscriptions:\r\n    'camera:zoom-in': 'onZoomIn'\r\n    'camera:zoom-out': 'onZoomOut'\r\n    'camera:zoom-to': 'onZoomTo'\r\n    'level:restarted': 'onLevelRestarted'\r\n\r\n  constructor: (@canvas, @options={}) ->\r\n    angle=Math.asin(0.75)\r\n    hFOV=d2r(30)\r\n    super()\r\n    @gameUIState = @options.gameUIState or new GameUIState()\r\n    @listenTo @gameUIState, 'surface:stage-mouse-move', @onMouseMove\r\n    @listenTo @gameUIState, 'surface:stage-mouse-down', @onMouseDown\r\n    @listenTo @gameUIState, 'surface:stage-mouse-up', @onMouseUp\r\n    @listenTo @gameUIState, 'surface:mouse-scrolled', @onMouseScrolled\r\n    @handleEvents = @options.handleEvents ? true\r\n    @canvasWidth = parseInt(@canvas.attr('width'), 10)\r\n    @canvasHeight = parseInt(@canvas.attr('height'), 10)\r\n    @offset = {x: 0, y: 0}\r\n    @calculateViewingAngle angle\r\n    @calculateFieldOfView hFOV\r\n    @calculateAxisConversionFactors()\r\n    @calculateMinMaxZoom()\r\n    @updateViewports()\r\n\r\n  onResize: (newCanvasWidth, newCanvasHeight) ->\r\n    @canvasScaleFactorX = newCanvasWidth / @canvasWidth\r\n    @canvasScaleFactorY = newCanvasHeight / @canvasHeight\r\n    Backbone.Mediator.publish 'camera:zoom-updated', camera: @, zoom: @zoom, surfaceViewport: @surfaceViewport\r\n\r\n  calculateViewingAngle: (angle) ->\r\n    # Operate on open interval between 0 - 90 degrees to make the math easier\r\n    epsilon = 0.000001  # Too small and numerical instability will get us.\r\n    @angle = Math.max(Math.min(Math.PI / 2 - epsilon, angle), epsilon)\r\n    if @angle isnt angle and angle isnt 0 and angle isnt Math.PI / 2\r\n      console.log \"Restricted given camera angle of #{r2d(angle)} to #{r2d(@angle)}.\"\r\n\r\n  calculateFieldOfView: (hFOV) ->\r\n    # http://en.wikipedia.org/wiki/Field_of_view_in_video_games\r\n    epsilon = 0.000001  # Too small and numerical instability will get us.\r\n    @hFOV = Math.max(Math.min(Math.PI - epsilon, hFOV), epsilon)\r\n    if @hFOV isnt hFOV and hFOV isnt 0 and hFOV isnt Math.PI\r\n      console.log \"Restricted given horizontal field of view to #{r2d(hFOV)} to #{r2d(@hFOV)}.\"\r\n    @vFOV = 2 * Math.atan(Math.tan(@hFOV / 2) * @canvasHeight / @canvasWidth)\r\n    if @vFOV > Math.PI\r\n      console.log 'Vertical field of view problem: expected canvas not to be taller than it is wide with high field of view.'\r\n      @vFOV = Math.PI - epsilon\r\n\r\n  calculateAxisConversionFactors: ->\r\n    @y2x = Math.sin @angle      # 1 unit along y is equivalent to y2x units along x\r\n    @z2x = Math.cos @angle      # 1 unit along z is equivalent to z2x units along x\r\n    @z2y = @z2x / @y2x          # 1 unit along z is equivalent to z2y units along y\r\n    @x2y = 1 / @y2x             # 1 unit along x is equivalent to x2y units along y\r\n    @x2z = 1 / @z2x             # 1 unit along x is equivalent to x2z units along z\r\n    @y2z = 1 / @z2y             # 1 unit along y is equivalent to y2z units along z\r\n\r\n  # CONVERSIONS AND CALCULATIONS\r\n\r\n  worldToSurface: (pos) ->\r\n    x = pos.x * Camera.PPM\r\n    y = -pos.y * @y2x * Camera.PPM\r\n    if pos.z\r\n      y -= @z2y * @y2x * pos.z * Camera.PPM\r\n    {x: x, y: y}\r\n\r\n  surfaceToCanvas: (pos) ->\r\n    {x: (pos.x - @surfaceViewport.x) * @zoom, y: (pos.y - @surfaceViewport.y) * @zoom}\r\n\r\n  canvasToScreen: (pos) ->\r\n    {x: pos.x * @canvasScaleFactorX, y: pos.y * @canvasScaleFactorY}\r\n\r\n  screenToCanvas: (pos) ->\r\n    {x: pos.x / @canvasScaleFactorX, y: pos.y / @canvasScaleFactorY}\r\n\r\n  canvasToSurface: (pos) ->\r\n    {x: pos.x / @zoom + @surfaceViewport.x, y: pos.y / @zoom + @surfaceViewport.y}\r\n\r\n  surfaceToWorld: (pos) ->\r\n    {x: pos.x * Camera.MPP, y: -pos.y * Camera.MPP * @x2y, z: 0}\r\n\r\n  canvasToWorld: (pos) -> @surfaceToWorld @canvasToSurface pos\r\n  worldToCanvas: (pos) -> @surfaceToCanvas @worldToSurface pos\r\n  worldToScreen: (pos) -> @canvasToScreen @worldToCanvas pos\r\n  surfaceToScreen: (pos) -> @canvasToScreen @surfaceToCanvas pos\r\n  screenToSurface: (pos) -> @canvasToSurface @screenToCanvas pos\r\n  screenToWorld: (pos) -> @surfaceToWorld @screenToSurface pos\r\n\r\n  cameraWorldPos: ->\r\n    # I tried to figure out the math for how much of @vFOV is below the midpoint (botFOV) and how much is above (topFOV), but I failed.\r\n    # So I'm just making something up. This would give botFOV 20deg, topFOV 10deg at @vFOV 30deg and @angle 45deg, or an even 15/15 at @angle 90deg.\r\n    botFOV = @x2y * @vFOV / (@y2x + @x2y)\r\n    topFOV = @y2x * @vFOV / (@y2x + @x2y)\r\n    botDist = @worldViewport.height / 2 * Math.sin(@angle) / Math.sin(botFOV)\r\n    z = botDist * Math.sin(@angle + botFOV)\r\n    x: @worldViewport.cx, y: @worldViewport.cy - z * @z2y, z: z\r\n\r\n  distanceTo: (pos) ->\r\n    # Get the physical distance in meters from the camera to the given world pos.\r\n    cpos = @cameraWorldPos()\r\n    dx = pos.x - cpos.x\r\n    dy = pos.y - cpos.y\r\n    dz = (pos.z or 0) - cpos.z\r\n    Math.sqrt dx * dx + dy * dy + dz * dz\r\n\r\n  distanceRatioTo: (pos) ->\r\n    # Get the ratio of the distance to the given world pos over the distance to the center of the camera view.\r\n    cpos = @cameraWorldPos()\r\n    dy = @worldViewport.cy - cpos.y\r\n    camDist = Math.sqrt(dy * dy + cpos.z * cpos.z)\r\n    return @distanceTo(pos) / camDist\r\n\r\n    # Old method for flying things below; could re-integrate this\r\n    ## Because none of our maps are designed to get smaller with distance along the y-axis, we'll only use z, as if we were looking straight down, until we get high enough. Based on worldPos.z, we gradually shift over to the more-realistic scale. This is pretty hacky.\r\n    #ratioWithoutY = dz * dz / (cPos.z * cPos.z)\r\n    #zv = Math.min(Math.max(0, worldPos.z - 5), cPos.z - 5) / (cPos.z - 5)\r\n    #zv * ratioWithY + (1 - zv) * ratioWithoutY\r\n\r\n  # SUBSCRIPTIONS\r\n\r\n  onZoomIn: (e) -> @zoomTo @target, @zoom * 1.15, 300\r\n  onZoomOut: (e) -> @zoomTo @target, @zoom / 1.15, 300\r\n\r\n  onMouseDown: (e) ->\r\n    return if @dragDisabled\r\n    @lastPos = {x: e.originalEvent.rawX, y: e.originalEvent.rawY}\r\n    @mousePressed = true\r\n\r\n  onMouseMove: (e) ->\r\n    return unless @mousePressed and @gameUIState.get('canDragCamera')\r\n    return if @dragDisabled\r\n    target = @boundTarget(@target, @zoom)\r\n    newPos =\r\n      x: target.x + (@lastPos.x - e.originalEvent.rawX) / @zoom\r\n      y: target.y + (@lastPos.y - e.originalEvent.rawY) / @zoom\r\n    @zoomTo newPos, @zoom, 0\r\n    @lastPos = {x: e.originalEvent.rawX, y: e.originalEvent.rawY}\r\n    Backbone.Mediator.publish 'camera:dragged', {}\r\n\r\n  onMouseUp: (e) ->\r\n    @mousePressed = false\r\n\r\n  onMouseScrolled: (e) ->\r\n    ratio = 1 + 0.05 * Math.sqrt(Math.abs(e.deltaY))\r\n    ratio = 1 / ratio if e.deltaY > 0\r\n    newZoom = @zoom * ratio\r\n    if e.screenPos and not @focusedOnSprite()\r\n      # zoom based on mouse position, adjusting the target so the point under the mouse stays the same\r\n      mousePoint = @screenToSurface(e.screenPos)\r\n      ratioPosX = (mousePoint.x - @surfaceViewport.x) / @surfaceViewport.width\r\n      ratioPosY = (mousePoint.y - @surfaceViewport.y) / @surfaceViewport.height\r\n      newWidth = @canvasWidth / newZoom\r\n      newHeight = @canvasHeight / newZoom\r\n      newTargetX = mousePoint.x - (newWidth * ratioPosX) + (newWidth / 2)\r\n      newTargetY = mousePoint.y - (newHeight * ratioPosY) + (newHeight / 2)\r\n      target = {x: newTargetX, y: newTargetY}\r\n    else\r\n      target = @target\r\n    @zoomTo target, newZoom, 0\r\n\r\n  onLevelRestarted: ->\r\n    @setBounds(@firstBounds, false)\r\n\r\n  # COMMANDS\r\n\r\n  setBounds: (worldBounds, updateZoom=true) ->\r\n    # receives an array of two world points. Normalize and apply them\r\n    @firstBounds = worldBounds unless @firstBounds\r\n    @bounds = @normalizeBounds(worldBounds)\r\n    @calculateMinMaxZoom()\r\n    @updateZoom true if updateZoom\r\n    @target = @currentTarget unless @focusedOnSprite()\r\n\r\n  normalizeBounds: (worldBounds) ->\r\n    return null unless worldBounds\r\n    top = Math.max(worldBounds[0].y, worldBounds[1].y)\r\n    left = Math.min(worldBounds[0].x, worldBounds[1].x)\r\n    bottom = Math.min(worldBounds[0].y, worldBounds[1].y)\r\n    right = Math.max(worldBounds[0].x, worldBounds[1].x)\r\n    bottom -= 1 if top is bottom\r\n    right += 1 if left is right\r\n    p1 = @worldToSurface({x: left, y: top})\r\n    p2 = @worldToSurface({x: right, y: bottom})\r\n    {x: p1.x, y: p1.y, width: p2.x-p1.x, height: p2.y-p1.y}\r\n\r\n  calculateMinMaxZoom: ->\r\n    # Zoom targets are always done in Surface coordinates.\r\n    @maxZoom = MAX_ZOOM\r\n    return @minZoom = MIN_ZOOM unless @bounds\r\n    @minZoom = Math.max @canvasWidth / @bounds.width, @canvasHeight / @bounds.height\r\n    if @zoom\r\n      @zoom = Math.max @minZoom, @zoom\r\n      @zoom = Math.min @maxZoom, @zoom\r\n\r\n  zoomTo: (newTarget=null, newZoom=1.0, time=1500) ->\r\n    # Target is either just a {x, y} pos or a display object with {x, y} that might change; surface coordinates.\r\n    time = 0 if @instant\r\n    newTarget ?= {x: 0, y: 0}\r\n    newTarget = (@newTarget or @target) if @locked\r\n    newZoom = Math.max newZoom, @minZoom\r\n    newZoom = Math.min newZoom, @maxZoom\r\n\r\n    thangType = @target?.sprite?.thangType\r\n    if thangType\r\n      @offset = _.clone(thangType.get('positions')?.torso or {x: 0, y: 0})\r\n      scale = thangType.get('scale') or 1\r\n      @offset.x *= scale\r\n      @offset.y *= scale\r\n    else\r\n      @offset = {x: 0, y: 0}\r\n\r\n    return if @zoom is newZoom and newTarget is newTarget.x and newTarget.y is newTarget.y\r\n\r\n    @finishTween(true)\r\n    if time\r\n      @newTarget = newTarget\r\n      @oldTarget = @boundTarget(@target, @zoom)\r\n      @oldZoom = @zoom\r\n      @newZoom = newZoom\r\n      @tweenProgress = 0.01\r\n      createjs.Tween.get(@)\r\n        .to({tweenProgress: 1.0}, time, createjs.Ease.getPowOut(4))\r\n        .call @finishTween\r\n\r\n    else\r\n      @target = newTarget\r\n      @zoom = newZoom\r\n      @updateZoom true\r\n\r\n  focusedOnSprite: ->\r\n    return @target?.name\r\n\r\n  finishTween: (abort=false) =>\r\n    createjs.Tween.removeTweens(@)\r\n    return unless @newTarget\r\n    unless abort is true\r\n      @target = @newTarget\r\n      @zoom = @newZoom\r\n    @newZoom = @oldZoom = @newTarget = @newTarget = @tweenProgress = null\r\n    @updateZoom true\r\n\r\n  updateZoom: (force=false) ->\r\n    # Update when we're focusing on a Thang, tweening, or forcing it, unless we're locked\r\n    return if (not force) and (@locked or (not @newTarget and not @focusedOnSprite()))\r\n    if @newTarget\r\n      t = @tweenProgress\r\n      @zoom = @oldZoom + t * (@newZoom - @oldZoom)\r\n      [p1, p2] = [@oldTarget, @boundTarget(@newTarget, @newZoom)]\r\n      target = @target = x: p1.x + t * (p2.x - p1.x), y: p1.y + t * (p2.y - p1.y)\r\n    else\r\n      target = @boundTarget @target, @zoom\r\n      return if not force and _.isEqual target, @currentTarget\r\n    @currentTarget = target\r\n    viewportDifference = @updateViewports target\r\n    if viewportDifference > 0.1  # Roughly 0.1 pixel difference in what we can see\r\n      Backbone.Mediator.publish 'camera:zoom-updated', camera: @, zoom: @zoom, surfaceViewport: @surfaceViewport, minZoom: @minZoom\r\n\r\n  boundTarget: (pos, zoom) ->\r\n    # Given an {x, y} in Surface coordinates, return one that will keep our viewport on the Surface.\r\n    return pos unless @bounds\r\n    y = pos.y\r\n    if thang = pos.sprite?.thang\r\n      y = @worldToSurface(x: thang.pos.x, y: thang.pos.y).y  # ignore z\r\n    marginX = (@canvasWidth / zoom / 2)\r\n    marginY = (@canvasHeight / zoom / 2)\r\n    x = Math.min(Math.max(marginX + @bounds.x, pos.x + @offset.x), @bounds.x + @bounds.width - marginX)\r\n    y = Math.min(Math.max(marginY + @bounds.y, y + @offset.y), @bounds.y + @bounds.height - marginY)\r\n    {x: x, y: y}\r\n\r\n  updateViewports: (target) ->\r\n    target ?= @target\r\n    sv = width: @canvasWidth / @zoom, height: @canvasHeight / @zoom, cx: target.x, cy: target.y\r\n    sv.x = sv.cx - sv.width / 2\r\n    sv.y = sv.cy - sv.height / 2\r\n    if @surfaceViewport\r\n      # Calculate how different this viewport is. (If it's basically not different, we can avoid visualizing the update.)\r\n      viewportDifference = Math.abs(@surfaceViewport.x - sv.x) + 1.01 * Math.abs(@surfaceViewport.y - sv.y) + 1.02 * Math.abs(@surfaceViewport.width - sv.width)\r\n    else\r\n      viewportDifference = 9001\r\n    @surfaceViewport = sv\r\n\r\n    wv = @surfaceToWorld sv  # get x and y\r\n    wv.width = sv.width * Camera.MPP\r\n    wv.height = sv.height * Camera.MPP * @x2y\r\n    wv.cx = wv.x + wv.width / 2\r\n    wv.cy = wv.y + wv.height / 2\r\n    @worldViewport = wv\r\n\r\n    viewportDifference\r\n\r\n  lock: ->\r\n    @target = @currentTarget\r\n    @locked = true\r\n\r\n  unlock: ->\r\n    @locked = false\r\n\r\n  destroy: ->\r\n    createjs.Tween.removeTweens @\r\n    super()\r\n\r\n  onZoomTo: (e) ->\r\n    @zoomTo @worldToSurface(e.pos), @zoom, e.duration\r\n"]}