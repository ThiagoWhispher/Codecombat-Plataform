{"version":3,"sources":["app/lib/surface/LayerAdapter.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/surface/LayerAdapter.js","sourcesContent":["###\r\n  * SpriteStage (WebGL Canvas)\r\n  ** Land texture\r\n  ** Ground-based selection/target marks, range radii\r\n  ** Walls/obstacles\r\n  ** Paths and target pieces (and ghosts?)\r\n  ** Normal Thangs, bots, wizards (z-indexing based on World-determined sprite.thang.pos.z/y, mainly, instead of sprite-map-determined sprite.z, which we rename to... something)\r\n  ** Above-thang marks (blood, highlight) and health bars\r\n\r\n  * Stage (Regular Canvas)\r\n  ** Camera border\r\n  ** surfaceTextLayer (speech, names)\r\n  ** screenLayer\r\n  *** Letterbox\r\n  **** Letterbox top and bottom\r\n  *** FPS display, maybe grid axis labels, coordinate hover\r\n\r\n  ** Grid lines--somewhere--we will figure it out, do not really need it at first\r\n###\r\n\r\nSpriteBuilder = require 'lib/sprites/SpriteBuilder'\r\nCocoClass = require 'core/CocoClass'\r\nSegmentedSprite = require './SegmentedSprite'\r\nSingularSprite = require './SingularSprite'\r\nThangType = require 'models/ThangType'\r\n\r\nNEVER_RENDER_ANYTHING = false # set to true to test placeholders\r\n\r\nmodule.exports = LayerAdapter = class LayerAdapter extends CocoClass\r\n\r\n  # Intermediary between a Surface Stage and a top-level static normal Container or hot-swapped WebGL SpriteContainer.\r\n  # It handles zooming in different ways and, if webGL, creating and assigning spriteSheets.\r\n\r\n  @TRANSFORM_SURFACE: 'surface'  # Layer moves/scales/zooms with the Surface of the World\r\n  @TRANSFORM_SURFACE_TEXT: 'surface_text'  # Layer moves with the Surface but is size-independent\r\n  @TRANSFORM_SCREEN: 'screen'  # Layer stays fixed to the screen\r\n\r\n  # WebGL properties\r\n  actionRenderState: null\r\n  needToRerender: false\r\n  toRenderBundles: null\r\n  willRender: false\r\n  buildAutomatically: true\r\n  buildAsync: true\r\n  resolutionFactor: SPRITE_RESOLUTION_FACTOR\r\n  numThingsLoading: 0\r\n  lanks: null\r\n  spriteSheet: null\r\n  container: null\r\n  customGraphics: null\r\n\r\n  subscriptions:\r\n    'camera:zoom-updated': 'onZoomUpdated'\r\n\r\n  constructor: (options) ->\r\n    super()\r\n    options ?= {}\r\n    @name = options.name ? 'Unnamed'\r\n    @defaultSpriteType = if @name is 'Default' then 'segmented' else 'singular'\r\n    @customGraphics = {}\r\n    @layerPriority = options.layerPriority ? 0\r\n    @transformStyle = options.transform ? LayerAdapter.TRANSFORM_SURFACE\r\n    @camera = options.camera\r\n    @updateLayerOrder = _.throttle @updateLayerOrder, 1000 / 30  # Don't call multiple times in one frame; 30 FPS is probably good enough\r\n\r\n    @webGL = !!options.webGL\r\n    if @webGL\r\n      @initializing = true\r\n      @spriteSheet = @_renderNewSpriteSheet(false) # builds an empty spritesheet\r\n      @container = new createjs.SpriteContainer(@spriteSheet)\r\n      @actionRenderState = {}\r\n      @toRenderBundles = []\r\n      @lanks = []\r\n      @initializing = false\r\n\r\n    else\r\n      @container = new createjs.Container()\r\n\r\n  toString: -> \"<Layer #{@layerPriority}: #{@name}>\"\r\n\r\n  #- Layer ordering\r\n\r\n  updateLayerOrder: ->\r\n    return if @destroyed\r\n    @container.sortChildren @layerOrderComparator\r\n\r\n  layerOrderComparator: (a, b) ->\r\n    # Optimize\r\n    alp = a.layerPriority or 0\r\n    blp = b.layerPriority or 0\r\n    return alp - blp if alp isnt blp\r\n    # TODO: remove this z stuff\r\n    az = a.z or 1000\r\n    bz = b.z or 1000\r\n    if aLank = a.lank\r\n      if aThang = aLank.thang\r\n        aPos = aThang.pos\r\n        if aThang.health < 0 and aThang.pos.z <= aThang.depth / 2\r\n          # Nice for not being knee deep in the dead, just not nice for ogres flying behind trees when exploded\r\n          --az\r\n    if bLank = b.lank\r\n      if bThang = bLank.thang\r\n        bPos = bThang.pos\r\n        if bThang.health < 0 and bThang.pos.z <= bThang.depth / 2\r\n          --bz\r\n    if az is bz\r\n      return 0 unless aPos and bPos\r\n      return (bPos.y - aPos.y) or (bPos.x - aPos.x)\r\n    return az - bz\r\n\r\n  #- Zoom updating\r\n\r\n  onZoomUpdated: (e) ->\r\n    return unless e.camera is @camera\r\n    if @transformStyle in [LayerAdapter.TRANSFORM_SURFACE, LayerAdapter.TRANSFORM_SURFACE_TEXT]\r\n      change = @container.scaleX / e.zoom\r\n      @container.scaleX = @container.scaleY = e.zoom\r\n      if @webGL\r\n        @container.scaleX *= @camera.canvasScaleFactorX\r\n        @container.scaleY *= @camera.canvasScaleFactorY\r\n      @container.regX = e.surfaceViewport.x\r\n      @container.regY = e.surfaceViewport.y\r\n      if @transformStyle is LayerAdapter.TRANSFORM_SURFACE_TEXT\r\n        for child in @container.children\r\n          continue if child.skipScaling\r\n          child.scaleX *= change\r\n          child.scaleY *= change\r\n\r\n  #- Container-like child functions\r\n\r\n  addChild: (children...) ->\r\n    @container.addChild children...\r\n    if @transformStyle is LayerAdapter.TRANSFORM_SURFACE_TEXT\r\n      for child in children\r\n        continue if child.skipScaling\r\n        child.scaleX /= @container.scaleX\r\n        child.scaleY /= @container.scaleY\r\n\r\n  removeChild: (children...) ->\r\n    @container.removeChild children...\r\n    # TODO: Do we actually need to scale children that were removed?\r\n    if @transformStyle is LayerAdapter.TRANSFORM_SURFACE_TEXT\r\n      for child in children\r\n        child.scaleX *= @container.scaleX\r\n        child.scaleY *= @container.scaleY\r\n\r\n  #- Adding, removing children for WebGL layers.\r\n\r\n  addLank: (lank) ->\r\n    lank.options.resolutionFactor = @resolutionFactor\r\n    lank.layer = @\r\n    @listenTo(lank, 'action-needs-render', @onActionNeedsRender)\r\n    @lanks.push lank\r\n    lank.thangType.initPrerenderedSpriteSheets() unless currentView.getQueryVariable 'jitSpritesheets'\r\n    prerenderedSpriteSheet = lank.thangType.getPrerenderedSpriteSheet(lank.options.colorConfig, @defaultSpriteType)\r\n    prerenderedSpriteSheet?.markToLoad()\r\n    @loadThangType(lank.thangType)\r\n    @addDefaultActionsToRender(lank)\r\n    @setSpriteToLank(lank)\r\n    @updateLayerOrder()\r\n    lank.addHealthBar()\r\n\r\n  removeLank: (lank) ->\r\n    @stopListening(lank)\r\n    lank.layer = null\r\n    @container.removeChild lank.sprite\r\n    @lanks = _.without @lanks, lank\r\n\r\n  #- Loading network resources dynamically\r\n\r\n  loadThangType: (thangType) ->\r\n    if not thangType.isFullyLoaded()\r\n      thangType.setProjection null\r\n      thangType.fetch() unless thangType.loading\r\n      @numThingsLoading++\r\n      @listenToOnce(thangType, 'sync', @somethingLoaded)\r\n    else if thangType.get('raster') and not thangType.loadedRaster\r\n      thangType.loadRasterImage()\r\n      @listenToOnce(thangType, 'raster-image-loaded', @somethingLoaded)\r\n      @numThingsLoading++\r\n    else if prerenderedSpriteSheet = thangType.getPrerenderedSpriteSheetToLoad()\r\n      startedLoading = prerenderedSpriteSheet.loadImage()\r\n      return if not startedLoading\r\n      @listenToOnce(prerenderedSpriteSheet, 'image-loaded', -> @somethingLoaded(thangType))\r\n      @numThingsLoading++\r\n\r\n  somethingLoaded: (thangType) ->\r\n    @numThingsLoading--\r\n    @loadThangType(thangType) # might need to load the raster image object\r\n    for lank in @lanks\r\n      if lank.thangType is thangType\r\n        @addDefaultActionsToRender(lank)\r\n    @renderNewSpriteSheet()\r\n\r\n  #- Adding to the list of things we need to render\r\n\r\n  onActionNeedsRender: (lank, action) ->\r\n    @upsertActionToRender(lank.thangType, action.name, lank.options.colorConfig)\r\n\r\n  addDefaultActionsToRender: (lank) ->\r\n    needToRender = false\r\n    if lank.thangType.get('raster')\r\n      @upsertActionToRender(lank.thangType)\r\n    else\r\n      for action in _.values(lank.thangType.getActions())\r\n        continue unless _.any ThangType.defaultActions, (prefix) -> _.string.startsWith(action.name, prefix)\r\n        @upsertActionToRender(lank.thangType, action.name, lank.options.colorConfig)\r\n\r\n  upsertActionToRender: (thangType, actionName, colorConfig) ->\r\n    groupKey = @renderGroupingKey(thangType, actionName, colorConfig)\r\n    return false if @actionRenderState[groupKey] isnt undefined\r\n    @actionRenderState[groupKey] = 'need-to-render'\r\n    @toRenderBundles.push({thangType: thangType, actionName: actionName, colorConfig: colorConfig})\r\n    return true if @willRender or not @buildAutomatically\r\n    @willRender = _.defer => @renderNewSpriteSheet()\r\n    return true\r\n\r\n  addCustomGraphic: (key, graphic, bounds) ->\r\n    return false if @customGraphics[key]\r\n    @customGraphics[key] = { graphic: graphic, bounds: new createjs.Rectangle(bounds...) }\r\n    return true if @willRender or not @buildAutomatically\r\n    @_renderNewSpriteSheet(false)\r\n\r\n  #- Rendering sprite sheets\r\n\r\n  renderNewSpriteSheet: ->\r\n    @willRender = false\r\n    return if @numThingsLoading\r\n    @_renderNewSpriteSheet()\r\n\r\n  _renderNewSpriteSheet: (async) ->\r\n    @asyncBuilder.stopAsync() if @asyncBuilder\r\n    @asyncBuilder = null\r\n\r\n    async ?= @buildAsync\r\n    builder = new createjs.SpriteSheetBuilder()\r\n    groups = _.groupBy(@toRenderBundles, ((bundle) -> @renderGroupingKey(bundle.thangType, '', bundle.colorConfig)), @)\r\n\r\n    # The first frame is always the 'loading', ie placeholder, image.\r\n    placeholder = @createPlaceholder()\r\n    dimension = @resolutionFactor * SPRITE_PLACEHOLDER_WIDTH\r\n    placeholder.setBounds(0, 0, dimension, dimension)\r\n    builder.addFrame(placeholder)\r\n\r\n    # Add custom graphics\r\n    extantGraphics = if @spriteSheet?.resolutionFactor is @resolutionFactor then @spriteSheet.getAnimations() else []\r\n    for key, graphic of @customGraphics\r\n      if key in extantGraphics\r\n        graphic = new createjs.Sprite(@spriteSheet)\r\n        graphic.gotoAndStop(key)\r\n        frame = builder.addFrame(graphic)\r\n      else\r\n        frame = builder.addFrame(graphic.graphic, graphic.bounds, @resolutionFactor)\r\n      builder.addAnimation(key, [frame], false)\r\n\r\n    # Render ThangTypes\r\n    groups = {} if NEVER_RENDER_ANYTHING\r\n    for bundleGrouping in _.values(groups)\r\n      thangType = bundleGrouping[0].thangType\r\n      colorConfig = bundleGrouping[0].colorConfig\r\n      actionNames = (bundle.actionName for bundle in bundleGrouping)\r\n      args = [thangType, colorConfig, actionNames, builder]\r\n      if thangType.get('raw') or thangType.get('prerenderedSpriteSheetData')\r\n        if (thangType.get('spriteType') or @defaultSpriteType) is 'segmented'\r\n          @renderSegmentedThangType(args...)\r\n        else\r\n          @renderSingularThangType(args...)\r\n      else\r\n        @renderRasterThangType(thangType, builder)\r\n\r\n    if async\r\n      try\r\n        builder.buildAsync()\r\n      catch e\r\n        @resolutionFactor *= 0.9\r\n        #console.log \"  Rerendering sprite sheet didn't fit, going down to resolutionFactor\", @resolutionFactor, \"async\", async\r\n        return @_renderNewSpriteSheet(async)\r\n      builder.on 'complete', @onBuildSpriteSheetComplete, @, true, builder\r\n      @asyncBuilder = builder\r\n    else\r\n      sheet = builder.build()\r\n      @onBuildSpriteSheetComplete({async:async}, builder)\r\n      return sheet\r\n\r\n  onBuildSpriteSheetComplete: (e, builder) ->\r\n    return if @initializing or @destroyed\r\n    @asyncBuilder = null\r\n\r\n    if builder.spriteSheet._images.length > 1\r\n      total = 0\r\n      # get a rough estimate of how much smaller the spritesheet needs to be\r\n      for image, index in builder.spriteSheet._images\r\n        total += image.height / builder.maxHeight\r\n      @resolutionFactor /= (Math.max(1.25, Math.sqrt(total)))\r\n      #console.log \"#{@name} rerendering new sprite sheet with resolutionFactor\", @resolutionFactor, \"async\", e.async\r\n      @_renderNewSpriteSheet(e.async)\r\n      return\r\n\r\n    @spriteSheet = builder.spriteSheet\r\n    @spriteSheet.resolutionFactor = @resolutionFactor\r\n    oldLayer = @container\r\n    @container = new createjs.SpriteContainer(@spriteSheet)\r\n    for lank in @lanks\r\n      console.log 'zombie sprite found on layer', @name if lank.destroyed\r\n      continue if lank.destroyed\r\n      @setSpriteToLank(lank)\r\n    for prop in ['scaleX', 'scaleY', 'regX', 'regY']\r\n      @container[prop] = oldLayer[prop]\r\n    if parent = oldLayer.parent\r\n      index = parent.getChildIndex(oldLayer)\r\n      parent.removeChildAt(index)\r\n      parent.addChildAt(@container, index)\r\n    @camera?.updateZoom(true)\r\n    @updateLayerOrder()\r\n    for lank in @lanks\r\n      lank.options.resolutionFactor = @resolutionFactor\r\n      lank.updateScale()\r\n      lank.updateRotation()\r\n    @trigger 'new-spritesheet'\r\n\r\n  resetSpriteSheet: ->\r\n    @removeLank(lank) for lank in @lanks.slice(0)\r\n    @toRenderBundles = []\r\n    @actionRenderState = {}\r\n    @initializing = true\r\n    @spriteSheet = @_renderNewSpriteSheet(false) # builds an empty spritesheet\r\n    @initializing = false\r\n\r\n  #- Placeholder\r\n\r\n  createPlaceholder: ->\r\n    # TODO: Experiment with this. Perhaps have rectangles if default layer is obstacle or floor,\r\n    # and different colors for different layers.\r\n    g = new createjs.Graphics()\r\n    g.setStrokeStyle(5)\r\n    color = {\r\n      'Land': [0, 50, 0]\r\n      'Ground': [230, 230, 230]\r\n      'Obstacle': [20, 70, 20]\r\n      'Path': [200, 100, 200]\r\n      'Default': [64, 64, 64]\r\n      'Floating': [100, 100, 200]\r\n    }[@name] or [0, 0, 0]\r\n    g.beginStroke(createjs.Graphics.getRGB(color...))\r\n    color.push 0.7\r\n    g.beginFill(createjs.Graphics.getRGB(color...))\r\n    width = @resolutionFactor * SPRITE_PLACEHOLDER_WIDTH\r\n    bounds = [0, 0, width, width]\r\n    if @name in ['Default', 'Ground', 'Floating', 'Path']\r\n      g.drawEllipse(bounds...)\r\n    else\r\n      g.drawRect(bounds...)\r\n    new createjs.Shape(g)\r\n\r\n  #- Rendering containers for segmented thang types\r\n\r\n  renderSegmentedThangType: (thangType, colorConfig, actionNames, spriteSheetBuilder) ->\r\n    prerenderedSpriteSheet = thangType.getPrerenderedSpriteSheet(colorConfig, 'segmented')\r\n    if prerenderedSpriteSheet and not prerenderedSpriteSheet.loadedImage\r\n      return\r\n    else if prerenderedSpriteSheet\r\n      animations = prerenderedSpriteSheet.spriteSheet._animations\r\n      renderedActions = _.zipObject(animations, _.times(animations.length, -> true))\r\n    containersToRender = thangType.getContainersForActions(actionNames)\r\n    #console.log 'render segmented', thangType.get('name'), actionNames, colorConfig, 'because we do not have prerendered sprite sheet?', prerenderedSpriteSheet\r\n    spriteBuilder = new SpriteBuilder(thangType, {colorConfig: colorConfig})\r\n    for containerGlobalName in containersToRender\r\n      containerKey = @renderGroupingKey(thangType, containerGlobalName, colorConfig)\r\n      if @spriteSheet?.resolutionFactor is @resolutionFactor and containerKey in @spriteSheet.getAnimations()\r\n        container = new createjs.Sprite(@spriteSheet)\r\n        container.gotoAndStop(containerKey)\r\n        frame = spriteSheetBuilder.addFrame(container)\r\n      else if prerenderedSpriteSheet and renderedActions[containerGlobalName]\r\n        container = new createjs.Sprite(prerenderedSpriteSheet.spriteSheet)\r\n        container.gotoAndStop(containerGlobalName)\r\n        scale = @resolutionFactor / (prerenderedSpriteSheet.get('resolutionFactor') or 1)\r\n        frame = spriteSheetBuilder.addFrame(container, null, scale)\r\n      else\r\n        container = spriteBuilder.buildContainerFromStore(containerGlobalName)\r\n        frame = spriteSheetBuilder.addFrame(container, null, @resolutionFactor * (thangType.get('scale') or 1))\r\n      spriteSheetBuilder.addAnimation(containerKey, [frame], false)\r\n\r\n  #- Rendering sprite sheets for singular thang types\r\n\r\n  renderSingularThangType: (thangType, colorConfig, actionNames, spriteSheetBuilder) ->\r\n    prerenderedSpriteSheet = thangType.getPrerenderedSpriteSheet(colorConfig, 'singular')\r\n    prerenderedFramesMap = {}\r\n    if prerenderedSpriteSheet\r\n      if not prerenderedSpriteSheet.loadedImage\r\n        return\r\n      scale = @resolutionFactor / (prerenderedSpriteSheet.get('resolutionFactor') or 1)\r\n      for frame, i in prerenderedSpriteSheet.spriteSheet._frames\r\n        sprite = new createjs.Sprite(prerenderedSpriteSheet.spriteSheet)\r\n        sprite.gotoAndStop(i)\r\n        prerenderedFramesMap[i] = spriteSheetBuilder.addFrame(sprite, null, scale)\r\n    #else\r\n    #  console.log '    Rerendering singular thang type', thangType.get('name'), thangType.get('spriteType'), colorConfig, actionNames\r\n\r\n    actionObjects = _.values(thangType.getActions())\r\n    animationActions = []\r\n    for a in actionObjects\r\n      continue unless a.animation\r\n      continue unless a.name in actionNames\r\n      animationActions.push(a)\r\n\r\n    spriteBuilder = new SpriteBuilder(thangType, {colorConfig: colorConfig})\r\n\r\n    animationGroups = _.groupBy animationActions, (action) -> action.animation\r\n    for animationName, actions of animationGroups\r\n      renderAll = _.any actions, (action) -> action.frames is undefined\r\n      scale = actions[0].scale or thangType.get('scale') or 1\r\n\r\n      actionKeys = (@renderGroupingKey(thangType, action.name, colorConfig) for action in actions)\r\n      if @spriteSheet?.resolutionFactor is @resolutionFactor and _.all(actionKeys, (key) => key in @spriteSheet.getAnimations())\r\n        framesNeeded = _.uniq(_.flatten((@spriteSheet.getAnimation(key)).frames for key in actionKeys))\r\n        framesMap = {}\r\n        for frame in framesNeeded\r\n          sprite = new createjs.Sprite(@spriteSheet)\r\n          sprite.gotoAndStop(frame)\r\n          framesMap[frame] = spriteSheetBuilder.addFrame(sprite)\r\n        for key, index in actionKeys\r\n          action = actions[index]\r\n          frames = (framesMap[f] for f in @spriteSheet.getAnimation(key).frames)\r\n          next = thangType.nextForAction(action)\r\n          spriteSheetBuilder.addAnimation(key, frames, next)\r\n        continue\r\n\r\n      if prerenderedSpriteSheet\r\n        for action in actions\r\n          name = @renderGroupingKey(thangType, action.name, colorConfig)\r\n          prerenderedFrames = prerenderedSpriteSheet.get('animations')?[action.name]?.frames\r\n          continue if not prerenderedFrames\r\n          frames = (prerenderedFramesMap[frame] for frame in prerenderedFrames)\r\n          next = thangType.nextForAction(action)\r\n          spriteSheetBuilder.addAnimation(name, frames, next)\r\n        continue\r\n\r\n      mc = spriteBuilder.buildMovieClip(animationName, null, null, null, {'temp':0})\r\n\r\n      if renderAll\r\n        res = spriteSheetBuilder.addMovieClip(mc, null, scale * @resolutionFactor)\r\n        frames = spriteSheetBuilder._animations['temp'].frames\r\n        framesMap = _.zipObject _.range(frames.length), frames\r\n      else\r\n        framesMap = {}\r\n        framesToRender = _.uniq(_.flatten((a.frames.split(',') for a in actions)))\r\n        for frame in framesToRender\r\n          frame = parseInt(frame)\r\n          f = _.bind(mc.gotoAndStop, mc, frame)\r\n          framesMap[frame] = spriteSheetBuilder.addFrame(mc, null, scale * @resolutionFactor, f)\r\n\r\n      for action in actions\r\n        name = @renderGroupingKey(thangType, action.name, colorConfig)\r\n\r\n        if action.frames\r\n          frames = (framesMap[parseInt(frame)] for frame in action.frames.split(','))\r\n        else\r\n          frames = _.sortBy(_.values(framesMap))\r\n        next = thangType.nextForAction(action)\r\n        spriteSheetBuilder.addAnimation(name, frames, next)\r\n\r\n    containerActions = []\r\n    for a in actionObjects\r\n      continue unless a.container\r\n      continue unless a.name in actionNames\r\n      containerActions.push(a)\r\n\r\n    containerGroups = _.groupBy containerActions, (action) -> action.container\r\n    for containerName, actions of containerGroups\r\n      if prerenderedSpriteSheet\r\n        for action in actions\r\n          name = @renderGroupingKey(thangType, action.name, colorConfig)\r\n          prerenderedFrames = prerenderedSpriteSheet.get('animations')?[action.name]?.frames\r\n          continue if not prerenderedFrames\r\n          frame = prerenderedFramesMap[prerenderedFrames[0]]\r\n          spriteSheetBuilder.addAnimation(name, [frame], false)\r\n        continue\r\n      container = spriteBuilder.buildContainerFromStore(containerName)\r\n      scale = actions[0].scale or thangType.get('scale') or 1\r\n      frame = spriteSheetBuilder.addFrame(container, null, scale * @resolutionFactor)\r\n      for action in actions\r\n        name = @renderGroupingKey(thangType, action.name, colorConfig)\r\n        spriteSheetBuilder.addAnimation(name, [frame], false)\r\n\r\n  #- Rendering frames for raster thang types\r\n\r\n  renderRasterThangType: (thangType, spriteSheetBuilder) ->\r\n    unless thangType.rasterImage\r\n      console.error(\"Cannot render the LayerAdapter SpriteSheet until the raster image for <#{thangType.get('name')}> is loaded.\")\r\n\r\n    # hack for IE9, otherwise width/height are not set\r\n    $img = $(thangType.rasterImage[0])\r\n    $('body').append($img)\r\n\r\n    bm = new createjs.Bitmap(thangType.rasterImage[0])\r\n    scale = thangType.get('scale') or 1\r\n    frame = spriteSheetBuilder.addFrame(bm, null, scale)\r\n    spriteSheetBuilder.addAnimation(@renderGroupingKey(thangType), [frame], false)\r\n    $img.remove()\r\n\r\n  #- Distributing new Segmented/Singular/RasterSprites to Lanks\r\n\r\n  setSpriteToLank: (lank) ->\r\n    if not lank.thangType.isFullyLoaded()\r\n      # just give a placeholder\r\n      sprite = new createjs.Sprite(@spriteSheet)\r\n      sprite.gotoAndStop(0)\r\n      sprite.placeholder = true\r\n      sprite.regX = @resolutionFactor * SPRITE_PLACEHOLDER_WIDTH / 2\r\n      sprite.regY = @resolutionFactor * SPRITE_PLACEHOLDER_WIDTH\r\n      sprite.baseScaleX = sprite.baseScaleY = sprite.scaleX = sprite.scaleY = 10 / (@resolutionFactor * SPRITE_PLACEHOLDER_WIDTH)\r\n\r\n    else if lank.thangType.get('raster')\r\n      sprite = new createjs.Sprite(@spriteSheet)\r\n      scale = lank.thangType.get('scale') or 1\r\n      reg = lank.getOffset 'registration'\r\n      sprite.regX = -reg.x * scale\r\n      sprite.regY = -reg.y * scale\r\n      sprite.gotoAndStop(@renderGroupingKey(lank.thangType))\r\n      sprite.baseScaleX = sprite.baseScaleY = 1\r\n\r\n    else\r\n      SpriteClass = if (lank.thangType.get('spriteType') or @defaultSpriteType) is 'segmented' then SegmentedSprite else SingularSprite\r\n      prefix = @renderGroupingKey(lank.thangType, null, lank.options.colorConfig) + '.'\r\n      sprite = new SpriteClass(@spriteSheet, lank.thangType, prefix, @resolutionFactor)\r\n\r\n    sprite.lank = lank\r\n    sprite.camera = @camera\r\n    sprite.layerPriority = lank.thang?.layerPriority ? lank.thangType.get 'layerPriority'\r\n    sprite.name = lank.thang?.spriteName or lank.thangType.get 'name'\r\n    lank.setSprite(sprite)\r\n    lank.update(true)\r\n    @container.addChild(sprite)\r\n    lank.updateScale true if lank.thangType.get 'matchWorldDimensions'  # Otherwise it's at the wrong scale for some reason.\r\n\r\n  renderGroupingKey: (thangType, grouping, colorConfig) ->\r\n    key = thangType.get('slug')\r\n    for colorKey, colorValue of colorConfig ? {}\r\n      key += \"(#{colorKey}:#{colorValue.hue},#{colorValue.saturation},#{colorValue.lightness})\"\r\n    key += '.'+grouping if grouping\r\n    key\r\n\r\n  destroy: ->\r\n    child.destroy?() for child in @container.children\r\n    @asyncBuilder.stopAsync() if @asyncBuilder\r\n    super()\r\n"]}