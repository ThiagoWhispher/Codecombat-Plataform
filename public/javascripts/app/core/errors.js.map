{"version":3,"sources":["app/core/errors.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/core/errors.js","sourcesContent":["errorModalTemplate = require 'templates/core/error'\r\n{applyErrorsToForm} = require 'core/forms'\r\n\r\nmodule.exports.parseServerError = (text) ->\r\n  try\r\n    error = JSON.parse(text) or {message: 'Unknown error.'}\r\n  catch SyntaxError\r\n    error = {message: text or 'Unknown error.'}\r\n  error = error[0] if _.isArray(error)\r\n  error\r\n\r\nmodule.exports.genericFailure = (jqxhr) ->\r\n  Backbone.Mediator.publish('errors:server-error', {response: jqxhr})\r\n  return connectionFailure() if not jqxhr.status\r\n\r\n  error = module.exports.parseServerError(jqxhr.responseText)\r\n  message = error.message\r\n  message = error.property + ' ' + message if error.property\r\n  console.warn(jqxhr.status, jqxhr.statusText, error)\r\n  existingForm = $('.form:visible:first')\r\n  if existingForm[0]\r\n    missingErrors = applyErrorsToForm(existingForm, [error])\r\n    for error in missingErrors\r\n      existingForm.append($('<div class=\"alert alert-danger\"></div>').text(error.message))\r\n  else\r\n    res = errorModalTemplate(\r\n      status: jqxhr.status\r\n      statusText: jqxhr.statusText\r\n      message: message\r\n    )\r\n    showErrorModal(res)\r\n\r\nmodule.exports.backboneFailure = (model, jqxhr, options) ->\r\n  module.exports.genericFailure(jqxhr)\r\n\r\nmodule.exports.connectionFailure = connectionFailure = ->\r\n  html = errorModalTemplate(\r\n    status: 0\r\n    statusText: 'Connection Gone'\r\n    message: 'No response from the CoCo servers, captain.'\r\n  )\r\n  showErrorModal(html)\r\n\r\nmodule.exports.showNotyNetworkError = ->\r\n  jqxhr = _.find(arguments, 'promise') # handles jquery or backbone network error (jqxhr is first or second parameter)\r\n  noty({\r\n    text: jqxhr.responseJSON?.message or jqxhr.responseJSON?.errorName or 'Unknown error'\r\n    layout: 'topCenter'\r\n    type: 'error'\r\n    timeout: 5000\r\n    killer: false,\r\n    dismissQueue: true\r\n  })\r\n\r\nshowErrorModal = (html) ->\r\n  # TODO: make a views/modal/error_modal view for this to use so the template can reuse templates/core/modal-base?\r\n  $('#modal-wrapper').html(html)\r\n  $('.modal:visible').modal('hide')\r\n  $('#modal-error').modal('show')\r\n\r\nshownWorkerError = false\r\n  \r\nmodule.exports.onWorkerError = ->\r\n  # TODO: Improve worker error handling in general\r\n  # TODO: Remove this code when IE11 is deprecated OR Aether is removed.\r\n  \r\n  # Sometimes on IE11, Aether isn't loaded. Handle that error by messaging the user, reloading the page.\r\n  # Note: Edge is also considered 'msie'.\r\n  if (not shownWorkerError) and $.browser.msie and $.browser.versionNumber is 11\r\n    text = 'Explorer failure. Reloading...'\r\n    shownWorkerError = true\r\n    setTimeout((-> document.location.reload()), 5000)\r\n    noty({text, layout: 'topCenter', type: 'error'})\r\n"]}