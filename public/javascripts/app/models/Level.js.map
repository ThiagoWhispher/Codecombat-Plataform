{"version":3,"sources":["app/models/Level.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/models/Level.js","sourcesContent":["CocoModel = require './CocoModel'\r\nLevelComponent = require './LevelComponent'\r\nLevelSystem = require './LevelSystem'\r\nThangType = require './ThangType'\r\n\r\nmodule.exports = class Level extends CocoModel\r\n  @className: 'Level'\r\n  @schema: require 'schemas/models/level'\r\n  @levels:\r\n    'dungeons-of-kithgard': '5411cb3769152f1707be029c'\r\n    'defense-of-plainswood': '541b67f71ccc8eaae19f3c62'\r\n  urlRoot: '/db/level'\r\n  editableByArtisans: true\r\n\r\n  serialize: (options) ->\r\n    {supermodel, session, otherSession, @headless, @sessionless, cached=false} = options\r\n    o = @denormalize supermodel, session, otherSession # hot spot to optimize\r\n\r\n    # Figure out Components\r\n    o.levelComponents = if cached then @getCachedLevelComponents(supermodel) else $.extend true, [], (lc.attributes for lc in supermodel.getModels LevelComponent)\r\n    @sortThangComponents o.thangs, o.levelComponents, 'Level Thang'\r\n    @fillInDefaultComponentConfiguration o.thangs, o.levelComponents # hot spot to optimize\r\n\r\n    # Figure out Systems\r\n    systemModels = $.extend true, [], (ls.attributes for ls in supermodel.getModels LevelSystem)\r\n    o.systems = @sortSystems o.systems, systemModels\r\n    @fillInDefaultSystemConfiguration o.systems\r\n\r\n    # Figure out ThangTypes' Components\r\n    tmap = {}\r\n    tmap[t.thangType] = true for t in o.thangs ? []\r\n    sessionHeroes = [session?.get('heroConfig')?.thangType, otherSession?.get('heroConfig')?.thangType]\r\n    o.thangTypes = []\r\n    for tt in supermodel.getModels ThangType\r\n      if tmap[tt.get('original')] or\r\n        (tt.get('kind') isnt 'Hero' and tt.get('kind')? and tt.get('components') and not tt.notInLevel) or\r\n        (tt.get('kind') is 'Hero' and (@isType('course', 'course-ladder', 'game-dev') or tt.get('original') in sessionHeroes))\r\n          o.thangTypes.push (original: tt.get('original'), name: tt.get('name'), components: $.extend(true, [], tt.get('components')), kind: tt.get('kind'))\r\n    @sortThangComponents o.thangTypes, o.levelComponents, 'ThangType'\r\n    @fillInDefaultComponentConfiguration o.thangTypes, o.levelComponents\r\n\r\n    o.picoCTFProblem = @picoCTFProblem if @picoCTFProblem\r\n\r\n    o\r\n\r\n  cachedLevelComponents: null\r\n\r\n  getCachedLevelComponents: (supermodel) ->\r\n    @cachedLevelComponents ?= {}\r\n    levelComponents = supermodel.getModels LevelComponent\r\n    newLevelComponents = []\r\n    for levelComponent in levelComponents\r\n      if levelComponent.hasLocalChanges()\r\n        newLevelComponents.push $.extend(true, {}, levelComponent.attributes)\r\n        continue\r\n      @cachedLevelComponents[levelComponent.id] ?= @cachedLevelComponents[levelComponent.id] = $.extend(true, {}, levelComponent.attributes)\r\n      newLevelComponents.push(@cachedLevelComponents[levelComponent.id])\r\n    newLevelComponents\r\n\r\n  denormalize: (supermodel, session, otherSession) ->\r\n    o = $.extend true, {}, @attributes\r\n    if o.thangs and @isType('hero', 'hero-ladder', 'hero-coop', 'course', 'course-ladder', 'game-dev', 'web-dev')\r\n      thangTypesWithComponents = (tt for tt in supermodel.getModels(ThangType) when tt.get('components')?)\r\n      thangTypesByOriginal = _.indexBy thangTypesWithComponents, (tt) -> tt.get('original')  # Optimization\r\n      for levelThang in o.thangs\r\n        @denormalizeThang(levelThang, supermodel, session, otherSession, thangTypesByOriginal)\r\n    o\r\n\r\n  denormalizeThang: (levelThang, supermodel, session, otherSession, thangTypesByOriginal) ->\r\n    levelThang.components ?= []\r\n    isHero = /Hero Placeholder/.test(levelThang.id) and @isType('hero', 'hero-ladder', 'hero-coop')\r\n    if isHero and otherSession\r\n      # If it's a hero and there's another session, find the right session for it.\r\n      # If there is no other session (playing against default code, or on single player), clone all placeholders.\r\n      # TODO: actually look at the teams on these Thangs to determine which session should go with which placeholder.\r\n      if levelThang.id is 'Hero Placeholder 1' and session.get('team') is 'humans'\r\n        session = otherSession\r\n      else if levelThang.id is 'Hero Placeholder' and session.get('team') is 'ogres'\r\n        session = otherSession\r\n\r\n    # Empty out placeholder Components and store their values if we're the hero placeholder.\r\n    if isHero\r\n      placeholders = {}\r\n      placeholdersUsed = {}\r\n      placeholderThangType = thangTypesByOriginal[levelThang.thangType]\r\n      unless placeholderThangType\r\n        console.error \"Couldn't find placeholder ThangType for the hero!\"\r\n        isHero = false\r\n      else\r\n        for defaultPlaceholderComponent in placeholderThangType.get('components')\r\n          placeholders[defaultPlaceholderComponent.original] = defaultPlaceholderComponent\r\n        for thangComponent in levelThang.components\r\n          placeholders[thangComponent.original] = thangComponent\r\n        levelThang.components = []  # We have stored the placeholder values, so we can inherit everything else.\r\n        heroThangType = session?.get('heroConfig')?.thangType\r\n        levelThang.thangType = heroThangType if heroThangType\r\n\r\n    thangType = thangTypesByOriginal[levelThang.thangType]\r\n\r\n    configs = {}\r\n    for thangComponent in levelThang.components\r\n      configs[thangComponent.original] = thangComponent\r\n\r\n    for defaultThangComponent in thangType?.get('components') or []\r\n      if levelThangComponent = configs[defaultThangComponent.original]\r\n        # Take the ThangType default Components and merge level-specific Component config into it\r\n        copy = $.extend true, {}, defaultThangComponent.config\r\n        levelThangComponent.config = _.merge copy, levelThangComponent.config\r\n\r\n      else\r\n        # Just add the Component as is\r\n        levelThangComponent = $.extend true, {}, defaultThangComponent\r\n        levelThang.components.push levelThangComponent\r\n\r\n      if isHero and placeholderComponent = placeholders[defaultThangComponent.original]\r\n        placeholdersUsed[placeholderComponent.original] = true\r\n        placeholderConfig = placeholderComponent.config ? {}\r\n        levelThangComponent.config ?= {}\r\n        config = levelThangComponent.config\r\n        if placeholderConfig.pos  # Pull in Physical pos x and y\r\n          config.pos ?= {}\r\n          config.pos.x = placeholderConfig.pos.x\r\n          config.pos.y = placeholderConfig.pos.y\r\n          config.rotation = placeholderConfig.rotation\r\n        else if placeholderConfig.team  # Pull in Allied team\r\n          config.team = placeholderConfig.team\r\n        else if placeholderConfig.significantProperty  # For levels where we cheat on what counts as an enemy\r\n          config.significantProperty = placeholderConfig.significantProperty\r\n        else if placeholderConfig.programmableMethods\r\n          # Take the ThangType default Programmable and merge level-specific Component config into it\r\n          copy = $.extend true, {}, placeholderConfig\r\n          programmableProperties = config?.programmableProperties ? []\r\n          copy.programmableProperties = _.union programmableProperties, copy.programmableProperties ? []\r\n          levelThangComponent.config = config = _.merge copy, config\r\n        else if placeholderConfig.extraHUDProperties\r\n          config.extraHUDProperties = _.union(config.extraHUDProperties ? [], placeholderConfig.extraHUDProperties)\r\n        else if placeholderConfig.voiceRange  # Pull in voiceRange\r\n          config.voiceRange = placeholderConfig.voiceRange\r\n          config.cooldown = placeholderConfig.cooldown\r\n\r\n    if isHero\r\n      if equips = _.find levelThang.components, {original: LevelComponent.EquipsID}\r\n        inventory = session?.get('heroConfig')?.inventory\r\n        equips.config ?= {}\r\n        equips.config.inventory = $.extend true, {}, inventory if inventory\r\n      for original, placeholderComponent of placeholders when not placeholdersUsed[original]\r\n        levelThang.components.push placeholderComponent\r\n\r\n    # Load the user's chosen hero AFTER getting stats from default char\r\n    if /Hero Placeholder/.test(levelThang.id) and @isType('course') and not @headless and not @sessionless and not window.serverConfig.picoCTF\r\n      heroThangType = me.get('heroConfig')?.thangType or ThangType.heroes.captain\r\n      levelThang.thangType = heroThangType if heroThangType\r\n\r\n  sortSystems: (levelSystems, systemModels) ->\r\n    [sorted, originalsSeen] = [[], {}]\r\n    visit = (system) ->\r\n      return if system.original of originalsSeen\r\n      systemModel = _.find systemModels, {original: system.original}\r\n      return console.error 'Couldn\\'t find model for original', system.original, 'from', systemModels unless systemModel\r\n      for d in systemModel.dependencies or []\r\n        system2 = _.find levelSystems, {original: d.original}\r\n        visit system2\r\n      #console.log 'sorted systems adding', systemModel.name\r\n      sorted.push {model: systemModel, config: $.extend true, {}, system.config}\r\n      originalsSeen[system.original] = true\r\n    visit system for system in levelSystems ? []\r\n    sorted\r\n\r\n  sortThangComponents: (thangs, levelComponents, parentType) ->\r\n    # Here we have to sort the Components by their dependencies.\r\n    # It's a bit tricky though, because we don't have either soft dependencies or priority levels.\r\n    # Example: Programmable must come last, since it has to override any Component-provided methods that any other Component might have created. Can't enumerate all soft dependencies.\r\n    # Example: Plans needs to come after everything except Programmable, since other Components that add plannable methods need to have done so by the time Plans is attached.\r\n    # Example: Collides doesn't depend on Allied, but if both exist, Collides must come after Allied. Soft dependency example. Can't just figure out a proper priority to take care of it.\r\n    # Example: Moves doesn't depend on Acts, but if both exist, Moves must come after Acts. Another soft dependency example.\r\n    # Decision? Just special case the sort logic in here until we have more examples than these two and decide how best to handle most of the cases then, since we don't really know the whole of the problem yet.\r\n    # TODO: anything that depends on Programmable will break right now.\r\n\r\n    originalsToComponents = _.indexBy levelComponents, 'original'  # Optimization for speed\r\n    alliedComponent = _.find levelComponents, name: 'Allied'\r\n    actsComponent = _.find levelComponents, name: 'Acts'\r\n\r\n    for thang in thangs ? []\r\n      originalsToThangComponents = _.indexBy thang.components, 'original'\r\n      sorted = []\r\n      visit = (c, namesToIgnore) ->\r\n        return if c in sorted\r\n        lc = originalsToComponents[c.original]\r\n        console.error thang.id or thang.name, 'couldn\\'t find lc for', c, 'of', levelComponents unless lc\r\n        return unless lc\r\n        return if namesToIgnore and lc.name in namesToIgnore\r\n        if lc.name is 'Plans'\r\n          # Plans always comes second-to-last, behind Programmable\r\n          visit c2, [lc.name, 'Programmable'] for c2 in thang.components\r\n        else if lc.name is 'Programmable'\r\n          # Programmable always comes last\r\n          visit c2, [lc.name] for c2 in thang.components\r\n        else\r\n          for d in lc.dependencies or []\r\n            c2 = originalsToThangComponents[d.original]\r\n            unless c2\r\n              dependent = originalsToComponents[d.original]\r\n              dependent = dependent?.name or d.original\r\n              console.error parentType, thang.id or thang.name, 'does not have dependent Component', dependent, 'from', lc.name\r\n            visit c2 if c2\r\n          if lc.name is 'Collides' and alliedComponent\r\n            if allied = originalsToThangComponents[alliedComponent.original]\r\n              visit allied\r\n          if lc.name is 'Moves' and actsComponent\r\n            if acts = originalsToThangComponents[actsComponent.original]\r\n              visit acts\r\n        #console.log thang.id, 'sorted comps adding', lc.name\r\n        sorted.push c\r\n      for comp in thang.components\r\n        visit comp\r\n      thang.components = sorted\r\n\r\n  fillInDefaultComponentConfiguration: (thangs, levelComponents) ->\r\n    # This is slow, so I inserted some optimizations to speed it up by caching the eventual defaults of commonly-used Components.\r\n    @defaultComponentConfigurations ?= {}\r\n    cached = 0\r\n    missed = 0\r\n    cachedConfigs = 0\r\n    for thang in thangs ? []\r\n      for component in thang.components or []\r\n        isPhysical = component.original is LevelComponent.PhysicalID\r\n        if not isPhysical and defaultConfiguration = _.find @defaultComponentConfigurations[component.original], ((d) -> _.isEqual component, d.originalComponent)\r\n          component.config = defaultConfiguration.defaultedConfig\r\n          ++cached\r\n          continue\r\n        continue unless lc = _.find levelComponents, {original: component.original}\r\n        unless isPhysical\r\n          originalComponent = $.extend true, {}, component\r\n        component.config ?= {}\r\n        TreemaUtils.populateDefaults(component.config, lc.configSchema ? {}, tv4)\r\n        @lastType = 'component'\r\n        @lastOriginal = component.original\r\n        unless isPhysical\r\n          @defaultComponentConfigurations[component.original] ?= []\r\n          @defaultComponentConfigurations[component.original].push originalComponent: originalComponent, defaultedConfig: component.config\r\n          ++cachedConfigs\r\n        ++missed\r\n    #console.log 'cached', cached, 'missed', missed\r\n\r\n  fillInDefaultSystemConfiguration: (levelSystems) ->\r\n    for system in levelSystems ? []\r\n      system.config ?= {}\r\n      TreemaUtils.populateDefaults(system.config, system.model.configSchema, tv4)\r\n      @lastType = 'system'\r\n      @lastOriginal = system.model.name\r\n\r\n  dimensions: ->\r\n    width = 0\r\n    height = 0\r\n    for thang in @get('thangs') or []\r\n      for component in thang.components\r\n        c = component.config\r\n        continue unless c?\r\n        width = c.width if c.width? and c.width > width\r\n        height = c.height if c.height? and c.height > height\r\n    return {width: width, height: height}\r\n\r\n  isLadder: ->\r\n    return @get('type')?.indexOf('ladder') > -1\r\n\r\n  isProject: ->\r\n    return @get('shareable') is 'project'\r\n\r\n  isType: (types...) ->\r\n    return @get('type', true) in types\r\n\r\n  fetchNextForCourse: ({ levelOriginalID, courseInstanceID, courseID, sessionID }, options={}) ->\r\n    if courseInstanceID\r\n      options.url = \"/db/course_instance/#{courseInstanceID}/levels/#{levelOriginalID}/sessions/#{sessionID}/next\"\r\n    else\r\n      options.url = \"/db/course/#{courseID}/levels/#{levelOriginalID}/next\"\r\n    @fetch(options)\r\n\r\n  getSolutions: ->\r\n    return [] unless hero = _.find (@get(\"thangs\") ? []), id: 'Hero Placeholder'\r\n    return [] unless plan = _.find(hero.components ? [], (x) -> x.config?.programmableMethods?.plan)?.config.programmableMethods.plan\r\n    solutions = _.cloneDeep plan.solutions ? []\r\n    for solution in solutions\r\n      try\r\n        solution.source = _.template(solution.source)(plan.context)\r\n      catch e\r\n        console.error \"Problem with template and solution comments for\", @get('slug'), e\r\n    solutions\r\n\r\n  getSampleCode: ->\r\n    return {} unless hero = _.find (@get(\"thangs\") ? []), id: 'Hero Placeholder'\r\n    return {} unless plan = _.find(hero.components ? [], (x) -> x.config?.programmableMethods?.plan)?.config.programmableMethods.plan\r\n    sampleCode = _.cloneDeep plan.languages ? {}\r\n    sampleCode.javascript = plan.source\r\n    for language, code of sampleCode\r\n      try\r\n        sampleCode[language] = _.template(code)(plan.context)\r\n      catch e\r\n        console.error \"Problem with template and solution comments for\", @get('slug'), e\r\n    sampleCode\r\n"]}