{"version":3,"sources":["app/models/Prepaid.coffee"],"names":[],"mappings":";AAAA;EAAA;;;;AAAA,YAAY,QAAQ,aAAR;;AACZ,SAAS,QAAQ,+BAAR;;AAEP,6BAA+B,QAAQ,gBAAR,EAA/B;;AAEF,MAAM,CAAC,OAAP,GAAuB;;;;;;;EACrB,OAAC,UAAD,GAAY;;oBACZ,UAAS;;oBAET,YAAW;AACT;IAAA,IAA2D,6BAA3D;AAAA,aAAO,IAAC,IAAD,CAAK,cAAL,gDAAwC,CAAE,iBAAjD;;WACA,IAAC,IAAD,CAAK,cAAL;EAFS;;oBAIX,kBAAiB,SAAC,MAAD;AACf;AAAA;AAAA;;MACE,IAAwB,QAAQ,CAAC,MAAT,KAAmB,MAA3C;AAAA,eAAO,QAAQ,CAAC,KAAhB;;AADF;AAEA,WAAO;EAHQ;;oBAKjB,aAAY;IACV,IAAC,SAAD,CAAU,IAAV,EAAa,KAAb,EAAoB;AAClB;MAAA,eAAe,IAAC,IAAD,CAAK,cAAL;MACf,IAAG,CAAC,CAAC,QAAF,CAAW,YAAX,CAAH;eACE,IAAC,IAAD,CAAK,cAAL,EAAqB,SAAS,YAAT,CAArB,EADF;;IAFkB,CAApB;WAIA,yCAAM,SAAN;EALU;;oBAOZ,SAAQ;AACN;IAAA,UAAU,IAAC,IAAD,CAAK,SAAL;IACV,IAAG,WAAgB,SAAK,OAAL,CAAJ,GAAwB,UAAvC;AACE,aAAO,UADT;;IAGA,YAAY,IAAC,IAAD,CAAK,WAAL;IACZ,IAAG,aAAkB,SAAK,SAAL,CAAJ,GAA0B,UAA3C;AACE,aAAO,UADT;;IAGA,IAAG,IAAC,UAAD,MAAgB,CAAnB;AACE,aAAO,QADT;;AAGA,WAAO;EAZD;;oBAcR,SAAQ,SAAC,IAAD,EAAO,OAAP;;MAAO,UAAQ;;IACrB,OAAO,CAAC,GAAR,GAAc,CAAC,CAAC,MAAF,CAAS,IAAT,EAAY,KAAZ,IAAmB;IACjC,OAAO,CAAC,IAAR,GAAe;;MACf,OAAO,CAAC,OAAQ;;IAChB,OAAO,CAAC,IAAI,CAAC,MAAb,GAAsB,IAAI,CAAC,EAAL,IAAW;WACjC,IAAC,MAAD,CAAO,OAAP;EALM;;oBAOR,iBAAgB,SAAC,MAAD;AACd;IAAA,+CAAW,MAAM,CAAC,IAAK,iBAAZ,IAAuB;IAClC,IAAG,IAAC,IAAD,CAAK,MAAL,MAAgB,iBAAnB;AACE,aAAO,aAAY,IAAC,IAAD,CAAK,mBAAL,CAAZ,iBADT;KAAA;AAGE,aAAO,KAHT;;EAFc;;;;GAzCqB","file":"public/javascripts/app/models/Prepaid.js","sourcesContent":["CocoModel = require './CocoModel'\r\nschema = require 'schemas/models/prepaid.schema'\r\n\r\n{ STARTER_LICENSE_COURSE_IDS } = require 'core/constants'\r\n\r\nmodule.exports = class Prepaid extends CocoModel\r\n  @className: \"Prepaid\"\r\n  urlRoot: '/db/prepaid'\r\n\r\n  openSpots: ->\r\n    return @get('maxRedeemers') - @get('redeemers')?.length if @get('redeemers')?\r\n    @get('maxRedeemers')\r\n\r\n  userHasRedeemed: (userID) ->\r\n    for redeemer in @get('redeemers')\r\n      return redeemer.date if redeemer.userID is userID\r\n    return null\r\n\r\n  initialize: ->\r\n    @listenTo @, 'add', ->\r\n      maxRedeemers = @get('maxRedeemers')\r\n      if _.isString(maxRedeemers)\r\n        @set 'maxRedeemers', parseInt(maxRedeemers)\r\n    super(arguments...)\r\n        \r\n  status: ->\r\n    endDate = @get('endDate')\r\n    if endDate and new Date(endDate) < new Date()\r\n      return 'expired'\r\n\r\n    startDate = @get('startDate')\r\n    if startDate and new Date(startDate) > new Date()\r\n      return 'pending'\r\n      \r\n    if @openSpots() <= 0\r\n      return 'empty'\r\n      \r\n    return 'available'\r\n\r\n  redeem: (user, options={}) ->\r\n    options.url = _.result(@, 'url')+'/redeemers'\r\n    options.type = 'POST'\r\n    options.data ?= {}\r\n    options.data.userID = user.id or user\r\n    @fetch(options)\r\n\r\n  includesCourse: (course) ->\r\n    courseID = course.get?('name') or course\r\n    if @get('type') is 'starter_license'\r\n      return courseID in @get('includedCourseIDs')\r\n    else\r\n      return true\r\n"]}