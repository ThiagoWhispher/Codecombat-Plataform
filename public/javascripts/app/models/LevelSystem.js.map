{"version":3,"sources":["app/models/LevelSystem.coffee"],"names":[],"mappings":";AAAA;EAAA;;;;AAAA,YAAY,QAAQ,aAAR;;AACZ,mBAAmB,QAAQ,uBAAR;;AAEnB,MAAM,CAAC,OAAP,GAAuB;;;;;;;EACrB,WAAC,UAAD,GAAY;;EACZ,WAAC,OAAD,GAAS,QAAQ,6BAAR;;wBACT,UAAS;;wBACT,qBAAoB;;wBAEpB,MAAK,SAAC,GAAD,EAAM,GAAN,EAAW,OAAX;AACH;IAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;MACE,MAAmB,CAAC,GAAD,EAAM,GAAN,CAAnB,EAAC,cAAD,EAAQ,iBADV;KAAA;MAGE,CAAC,QAAQ,EAAT,CAAa,KAAb,GAAoB,IAHtB;;IAIA,IAAG,UAAU,KAAV,IAAoB,CAAI,CAAC,QAAQ,KAAT,CAA3B;MACE,KAAK,CAAC,EAAN,GAAW,IAAC,QAAD,CAAS,KAAK,CAAC,IAAf,EADb;;WAEA,qCAAM,KAAN,EAAa,OAAb;EAPG;;wBASL,WAAU;IACR;IACA,KAAwC,IAAC,IAAD,CAAK,IAAL,CAAxC;MAAA,IAAC,IAAD,CAAK,IAAL,EAAW,IAAC,QAAD,CAAS,IAAC,IAAD,CAAK,MAAL,CAAT,CAAX;;WACA,gBAAgB,CAAC,OAAjB,CAAyB,IAAzB;EAHQ;;wBAKV,UAAS,SAAC,IAAD;AACP;IAAA,IAAG,IAAC,IAAD,CAAK,cAAL,KAAyB,IAAC,IAAD,CAAK,cAAL,MAA0B,cAAtD;AACE,aAAO,OAAO,CAAC,KAAR,CAAc,gBAAd,EAAgC,IAAC,IAAD,CAAK,cAAL,CAAhC,EAAsD,uBAAtD,EAA+E,IAA/E,EADT;;AAEA;MACE,KAAK,YAAY,CAAC,OAAb,CAAqB,IAArB,EAA2B;QAAA,MAAM,IAAN;OAA3B,EADP;KAAA;MAEM;MAEJ,KAAK,IAAC,IAAD,CAAK,IAAL,EAJP;;WAKA;EARO;;wBAUT,kBAAiB,SAAC,UAAD;AACf;IAAA,UAAU;AACV;AAAA;;MACE,SAAS,CAAC,CAAC,IAAF,CAAO,UAAP,EAAmB,SAAC,GAAD;eAC1B,GAAG,CAAC,GAAJ,CAAQ,UAAR,MAAuB,GAAG,CAAC,QAA3B,IAAwC,GAAG,CAAC,GAAJ,CAAQ,SAAR,CAAkB,CAAC,KAAnB,KAA4B,GAAG,CAAC;MAD9C,CAAnB;AAET;AAAA;;QACE,IAA2B,aAAU,OAAV,aAA3B;UAAA,OAAO,CAAC,IAAR,CAAa,MAAb;;AADF;AAHF;WAKA;EAPe;;;;GA9BwB","file":"public/javascripts/app/models/LevelSystem.js","sourcesContent":["CocoModel = require './CocoModel'\r\nSystemNameLoader = require 'core/SystemNameLoader'\r\n\r\nmodule.exports = class LevelSystem extends CocoModel\r\n  @className: 'LevelSystem'\r\n  @schema: require 'schemas/models/level_system'\r\n  urlRoot: '/db/level.system'\r\n  editableByArtisans: true\r\n\r\n  set: (key, val, options) ->\r\n    if _.isObject key\r\n      [attrs, options] = [key, val]\r\n    else\r\n      (attrs = {})[key] = val\r\n    if 'code' of attrs and not ('js' of attrs)\r\n      attrs.js = @compile attrs.code\r\n    super attrs, options\r\n\r\n  onLoaded: ->\r\n    super()\r\n    @set 'js', @compile(@get 'code') unless @get 'js'\r\n    SystemNameLoader.setName @\r\n\r\n  compile: (code) ->\r\n    if @get('codeLanguage') and @get('codeLanguage') isnt 'coffeescript'\r\n      return console.error('Can\\'t compile', @get('codeLanguage'), '-- only CoffeeScript.', @)\r\n    try\r\n      js = CoffeeScript.compile(code, bare: true)\r\n    catch e\r\n      #console.log 'couldn\\'t compile', code, 'for', @get('name'), 'because', e\r\n      js = @get 'js'\r\n    js\r\n\r\n  getDependencies: (allSystems) ->\r\n    results = []\r\n    for dep in @get('dependencies') or []\r\n      system = _.find allSystems, (sys) ->\r\n        sys.get('original') is dep.original and sys.get('version').major is dep.majorVersion\r\n      for result in system.getDependencies(allSystems).concat [system]\r\n        results.push result unless result in results\r\n    results\r\n"]}