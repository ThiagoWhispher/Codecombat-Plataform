{"version":3,"sources":["bower_components/aether/build/aether.js"],"names":[],"mappingsfile":"public/javascripts/aether.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var Aether, defaults, esprima, execution, interpreter, languages, optionsValidator, problems, protectBuiltins, self, transforms, traversal, _, _ref, _ref1, _ref2,\r\n    __slice = [].slice;\r\n\r\n  if ((typeof window !== \"undefined\" && window !== null) && (typeof self === \"undefined\" || self === null)) {\r\n    self = window;\r\n  }\r\n\r\n  if ((typeof global !== \"undefined\" && global !== null) && (self == null)) {\r\n    self = global;\r\n  }\r\n\r\n  if (self.self == null) {\r\n    self.self = self;\r\n  }\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : self != null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  esprima = require('esprima');\r\n\r\n  defaults = require('./defaults');\r\n\r\n  problems = require('./problems');\r\n\r\n  execution = require('./execution');\r\n\r\n  traversal = require('./traversal');\r\n\r\n  transforms = require('./transforms');\r\n\r\n  protectBuiltins = require('./protectBuiltins');\r\n\r\n  optionsValidator = require('./validators/options');\r\n\r\n  languages = require('./languages/languages');\r\n\r\n  interpreter = require('./interpreter');\r\n\r\n  module.exports = Aether = (function() {\r\n    Aether.execution = execution;\r\n\r\n    Aether.addGlobal = protectBuiltins.addGlobal;\r\n\r\n    Aether.replaceBuiltin = protectBuiltins.replaceBuiltin;\r\n\r\n    Aether.globals = protectBuiltins.addedGlobals;\r\n\r\n    Aether.prototype.depth = 0;\r\n\r\n    Aether.prototype.getAddedGlobals = function() {\r\n      return protectBuiltins.addedGlobals;\r\n    };\r\n\r\n    Aether.prototype.addGlobal = function(name, value) {\r\n      if (this.esperEngine != null) {\r\n        return this.esperEngine.addGlobal(name, value);\r\n      }\r\n    };\r\n\r\n    function Aether(options) {\r\n      var defaultsCopy, validationResults;\r\n      if (options == null) {\r\n        options = {};\r\n      }\r\n      validationResults = optionsValidator(options);\r\n      if (!validationResults.valid) {\r\n        throw new Error(\"Aether options are invalid: \" + JSON.stringify(validationResults.errors, null, 4));\r\n      }\r\n      this.originalOptions = _.cloneDeep(options);\r\n      defaultsCopy = _.cloneDeep(defaults);\r\n      this.options = _.merge(defaultsCopy, options);\r\n      this.setLanguage(this.options.language);\r\n      this.allGlobals = this.options.globals.concat(protectBuiltins.builtinNames, Object.keys(this.language.runtimeGlobals));\r\n      Object.defineProperty(this, 'lastStatementRange', {\r\n        get: function() {\r\n          var rng, _ref3, _ref4, _ref5;\r\n          rng = (_ref3 = this.esperEngine) != null ? (_ref4 = _ref3.evaluator) != null ? (_ref5 = _ref4.lastASTNodeProcessed) != null ? _ref5.originalRange : void 0 : void 0 : void 0;\r\n          if (rng) {\r\n            return [rng.start, rng.end];\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    Aether.prototype.setLanguage = function(language) {\r\n      var validationResults;\r\n      if (this.language && this.language.id === language) {\r\n        return;\r\n      }\r\n      validationResults = optionsValidator({\r\n        language: language\r\n      });\r\n      if (!validationResults.valid) {\r\n        throw new Error(\"New language is invalid: \" + JSON.stringify(validationResults.errors, null, 4));\r\n      }\r\n      this.originalOptions.language = this.options.language = language;\r\n      this.language = new languages[language]();\r\n      if (this.languageJS == null) {\r\n        this.languageJS = language === 'javascript' ? this.language : new languages.javascript('ES5');\r\n      }\r\n      this.reset();\r\n      return language;\r\n    };\r\n\r\n    Aether.prototype.reset = function() {\r\n      this.problems = {\r\n        errors: [],\r\n        warnings: [],\r\n        infos: []\r\n      };\r\n      this.style = {};\r\n      this.flow = {};\r\n      this.metrics = {};\r\n      return this.pure = null;\r\n    };\r\n\r\n    Aether.prototype.serialize = function() {\r\n      return _.pick(this, ['originalOptions', 'raw', 'pure', 'problems', 'flow', 'metrics', 'style', 'ast']);\r\n    };\r\n\r\n    Aether.deserialize = function(serialized) {\r\n      var aether, prop, val;\r\n      aether = new Aether(serialized.originalOptions);\r\n      for (prop in serialized) {\r\n        val = serialized[prop];\r\n        if (prop !== \"originalOptions\") {\r\n          aether[prop] = val;\r\n        }\r\n      }\r\n      return aether;\r\n    };\r\n\r\n    Aether.prototype.canTranspile = function(rawCode, thorough) {\r\n      if (thorough == null) {\r\n        thorough = false;\r\n      }\r\n      if (!rawCode) {\r\n        return true;\r\n      }\r\n      if (this.language.obviouslyCannotTranspile(rawCode)) {\r\n        return false;\r\n      }\r\n      if (!thorough) {\r\n        return true;\r\n      }\r\n      return this.lint(rawCode, this).errors.length === 0;\r\n    };\r\n\r\n    Aether.prototype.hasChangedSignificantly = function(a, b, careAboutLineNumbers, careAboutLint) {\r\n      if (careAboutLineNumbers == null) {\r\n        careAboutLineNumbers = false;\r\n      }\r\n      if (careAboutLint == null) {\r\n        careAboutLint = false;\r\n      }\r\n      if (!((a != null) && (b != null))) {\r\n        return true;\r\n      }\r\n      if (a === b) {\r\n        return false;\r\n      }\r\n      if (careAboutLineNumbers && this.language.hasChangedLineNumbers(a, b)) {\r\n        return true;\r\n      }\r\n      if (careAboutLint && this.hasChangedLintProblems(a, b)) {\r\n        return true;\r\n      }\r\n      return this.language.hasChangedASTs(a, b);\r\n    };\r\n\r\n    Aether.prototype.hasChangedLintProblems = function(a, b) {\r\n      var aLintProblems, bLintProblems, p;\r\n      aLintProblems = (function() {\r\n        var _i, _len, _ref3, _results;\r\n        _ref3 = this.getAllProblems(this.lint(a));\r\n        _results = [];\r\n        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n          p = _ref3[_i];\r\n          _results.push([p.id, p.message, p.hint]);\r\n        }\r\n        return _results;\r\n      }).call(this);\r\n      bLintProblems = (function() {\r\n        var _i, _len, _ref3, _results;\r\n        _ref3 = this.getAllProblems(this.lint(b));\r\n        _results = [];\r\n        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n          p = _ref3[_i];\r\n          _results.push([p.id, p.message, p.hint]);\r\n        }\r\n        return _results;\r\n      }).call(this);\r\n      return !_.isEqual(aLintProblems, bLintProblems);\r\n    };\r\n\r\n    Aether.prototype.beautify = function(rawCode) {\r\n      return this.language.beautify(rawCode, this);\r\n    };\r\n\r\n    Aether.prototype.transpile = function(raw) {\r\n      var loopProblems, rawCode, _ref3, _ref4;\r\n      this.raw = raw;\r\n      this.reset();\r\n      rawCode = this.raw;\r\n      if (this.options.simpleLoops) {\r\n        rawCode = _.cloneDeep(this.raw);\r\n        _ref3 = this.language.replaceLoops(rawCode), rawCode = _ref3[0], this.replacedLoops = _ref3[1], loopProblems = _ref3[2];\r\n      }\r\n      this.problems = this.lint(rawCode);\r\n      if (loopProblems == null) {\r\n        loopProblems = [];\r\n      }\r\n      if (loopProblems.length > 0) {\r\n        (_ref4 = this.problems.warnings).push.apply(_ref4, loopProblems);\r\n      }\r\n      this.pure = this.purifyCode(rawCode);\r\n      return this.pure;\r\n    };\r\n\r\n    Aether.prototype.lint = function(rawCode) {\r\n      var lintProblems, problem, _i, _len, _ref3;\r\n      lintProblems = {\r\n        errors: [],\r\n        warnings: [],\r\n        infos: []\r\n      };\r\n      _ref3 = this.language.lint(rawCode, this);\r\n      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n        problem = _ref3[_i];\r\n        this.addProblem(problem, lintProblems);\r\n      }\r\n      return lintProblems;\r\n    };\r\n\r\n    Aether.prototype.createFunction = function() {\r\n      return interpreter.createFunction(this);\r\n    };\r\n\r\n    Aether.prototype.createMethod = function(thisValue) {\r\n      return _.bind(this.createFunction(), thisValue);\r\n    };\r\n\r\n    Aether.prototype.run = function() {\r\n      var args, error, fn, problem;\r\n      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\r\n      try {\r\n        if (fn == null) {\r\n          fn = this.createFunction();\r\n        }\r\n      } catch (_error) {\r\n        error = _error;\r\n        problem = this.createUserCodeProblem({\r\n          error: error,\r\n          code: this.raw,\r\n          type: 'transpile',\r\n          reporter: 'aether'\r\n        });\r\n        this.addProblem(problem);\r\n        return;\r\n      }\r\n      try {\r\n        return fn.apply(null, args);\r\n      } catch (_error) {\r\n        error = _error;\r\n        problem = this.createUserCodeProblem({\r\n          error: error,\r\n          code: this.raw,\r\n          type: 'runtime',\r\n          reporter: 'aether'\r\n        });\r\n        this.addProblem(problem);\r\n      }\r\n    };\r\n\r\n    Aether.prototype.createUserCodeProblem = problems.createUserCodeProblem;\r\n\r\n    Aether.prototype.createThread = function(fx) {\r\n      return interpreter.createThread(this, fx);\r\n    };\r\n\r\n    Aether.prototype.updateProblemContext = function(problemContext) {\r\n      return this.options.problemContext = problemContext;\r\n    };\r\n\r\n    Aether.prototype.addProblem = function(problem, problems) {\r\n      if (problems == null) {\r\n        problems = null;\r\n      }\r\n      if (problem.level === \"ignore\") {\r\n        return;\r\n      }\r\n      (problems != null ? problems : this.problems)[problem.level + \"s\"].push(problem);\r\n      return problem;\r\n    };\r\n\r\n    Aether.prototype.getAllProblems = function(problems) {\r\n      return _.flatten(_.values(problems != null ? problems : this.problems));\r\n    };\r\n\r\n    Aether.prototype.purifyCode = function(rawCode) {\r\n      var error, nodeGatherer, originalNodeRanges, parameter, preNormalizationTransforms, preprocessedCode, problemOptions, transformedAST, transformedCode, varNames, wrappedCode, _i, _len, _ref3, _ref4, _ref5,\r\n        _this = this;\r\n      preprocessedCode = this.language.hackCommonMistakes(rawCode, this);\r\n      wrappedCode = this.language.wrap(preprocessedCode, this);\r\n      originalNodeRanges = [];\r\n      varNames = {};\r\n      _ref3 = this.options.functionParameters;\r\n      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n        parameter = _ref3[_i];\r\n        varNames[parameter] = true;\r\n      }\r\n      preNormalizationTransforms = [transforms.makeGatherNodeRanges(originalNodeRanges, wrappedCode, this.language.wrappedCodePrefix), transforms.makeCheckThisKeywords(this.allGlobals, varNames, this.language, this.options.problemContext), transforms.makeCheckIncompleteMembers(this.language, this.options.problemContext)];\r\n      try {\r\n        _ref4 = this.transform(wrappedCode, preNormalizationTransforms, this.language.parse), transformedCode = _ref4[0], transformedAST = _ref4[1];\r\n        this.ast = transformedAST;\r\n      } catch (_error) {\r\n        error = _error;\r\n        problemOptions = {\r\n          error: error,\r\n          code: wrappedCode,\r\n          codePrefix: this.language.wrappedCodePrefix,\r\n          reporter: this.language.parserID,\r\n          kind: error.index || error.id,\r\n          type: 'transpile'\r\n        };\r\n        this.addProblem(this.createUserCodeProblem(problemOptions));\r\n        if (!this.language.parseDammit) {\r\n          return '';\r\n        }\r\n        originalNodeRanges.splice();\r\n        try {\r\n          _ref5 = this.transform(wrappedCode, preNormalizationTransforms, this.language.parseDammit), transformedCode = _ref5[0], transformedAST = _ref5[1];\r\n          this.ast = transformedAST;\r\n        } catch (_error) {\r\n          error = _error;\r\n          problemOptions.kind = error.index || error.id;\r\n          if (this.language.id === 'javascript') {\r\n            problemOptions.reporter = 'acorn_loose';\r\n          }\r\n          this.addProblem(this.createUserCodeProblem(problemOptions));\r\n          return '';\r\n        }\r\n      }\r\n      nodeGatherer = transforms.makeGatherNodeRanges(originalNodeRanges, wrappedCode, this.language.wrappedCodePrefix);\r\n      traversal.walkASTCorrect(this.ast, function(node) {\r\n        var startEndRangeArray;\r\n        nodeGatherer(node);\r\n        if (node.originalRange != null) {\r\n          startEndRangeArray = _this.language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);\r\n          return node.originalRange = {\r\n            start: startEndRangeArray[0],\r\n            end: startEndRangeArray[1]\r\n          };\r\n        }\r\n      });\r\n      return rawCode;\r\n    };\r\n\r\n    Aether.prototype.transform = function(code, transforms, parseFn) {\r\n      var t, transformedAST, transformedCode;\r\n      transformedCode = traversal.morphAST(code, (function() {\r\n        var _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = transforms.length; _i < _len; _i++) {\r\n          t = transforms[_i];\r\n          _results.push(_.bind(t, this));\r\n        }\r\n        return _results;\r\n      }).call(this), parseFn, this);\r\n      transformedAST = parseFn(transformedCode, this);\r\n      return [transformedCode, transformedAST];\r\n    };\r\n\r\n    Aether.getFunctionBody = function(func) {\r\n      var indent, line, lines, source;\r\n      source = _.isString(func) ? func : func.toString();\r\n      if (source.trim() === \"function () {}\") {\r\n        return \"\";\r\n      }\r\n      source = source.substring(source.indexOf('{') + 2, source.lastIndexOf('}'));\r\n      lines = source.split(/\\r?\\n/);\r\n      indent = lines.length ? lines[0].length - lines[0].replace(/^ +/, '').length : 0;\r\n      return ((function() {\r\n        var _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = lines.length; _i < _len; _i++) {\r\n          line = lines[_i];\r\n          _results.push(line.slice(indent));\r\n        }\r\n        return _results;\r\n      })()).join('\\n');\r\n    };\r\n\r\n    Aether.prototype.convertToNativeType = function(obj) {\r\n      return this.language.convertToNativeType(obj);\r\n    };\r\n\r\n    Aether.prototype.getStatementCount = function() {\r\n      var count, root;\r\n      count = 0;\r\n      if (this.language.usesFunctionWrapping()) {\r\n        root = this.ast.body[0].body;\r\n      } else {\r\n        root = this.ast.body;\r\n      }\r\n      traversal.walkASTCorrect(root, function(node) {\r\n        var _ref3;\r\n        if (node.type == null) {\r\n          return;\r\n        }\r\n        if (node.userCode === false) {\r\n          return;\r\n        }\r\n        if ((_ref3 = node.type) === 'ExpressionStatement' || _ref3 === 'ReturnStatement' || _ref3 === 'ForStatement' || _ref3 === 'ForInStatement' || _ref3 === 'WhileStatement' || _ref3 === 'DoWhileStatement' || _ref3 === 'FunctionDeclaration' || _ref3 === 'VariableDeclaration' || _ref3 === 'IfStatement' || _ref3 === 'SwitchStatement' || _ref3 === 'ThrowStatement' || _ref3 === 'ContinueStatement' || _ref3 === 'BreakStatement') {\r\n          return ++count;\r\n        }\r\n      });\r\n      return count;\r\n    };\r\n\r\n    return Aether;\r\n\r\n  })();\r\n\r\n  if (self != null) {\r\n    self.Aether = Aether;\r\n  }\r\n\r\n  if (typeof window !== \"undefined\" && window !== null) {\r\n    window.Aether = Aether;\r\n  }\r\n\r\n  if (self != null) {\r\n    if (self.esprima == null) {\r\n      self.esprima = esprima;\r\n    }\r\n  }\r\n\r\n  if (typeof window !== \"undefined\" && window !== null) {\r\n    if (window.esprima == null) {\r\n      window.esprima = esprima;\r\n    }\r\n  }\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./defaults\":2,\"./execution\":3,\"./interpreter\":4,\"./languages/languages\":10,\"./problems\":13,\"./protectBuiltins\":14,\"./transforms\":16,\"./traversal\":17,\"./validators/options\":18,\"esprima\":39,\"lodash\":41}],2:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var defaults, execution, _, _ref, _ref1, _ref2;\r\n\r\n  execution = require('./execution');\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  module.exports = defaults = {\r\n    thisValue: null,\r\n    globals: [],\r\n    language: \"javascript\",\r\n    functionName: null,\r\n    functionParameters: [],\r\n    yieldAutomatically: false,\r\n    yieldConditionally: false,\r\n    executionCosts: {},\r\n    noSerializationInFlow: false,\r\n    noVariablesInFlow: false,\r\n    skipDuplicateUserInfoInFlow: false,\r\n    includeFlow: true,\r\n    includeMetrics: true,\r\n    includeStyle: true,\r\n    protectBuiltins: true,\r\n    protectAPI: false,\r\n    debug: false\r\n  };\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./execution\":3,\"lodash\":41}],3:[function(require,module,exports){\r\n(function() {\r\n  var execution;\r\n\r\n  module.exports = execution = {\r\n    ArrayExpression: 1,\r\n    ArrayPattern: 1,\r\n    ArrowFunctionExpression: 1,\r\n    AssignmentExpression: 1,\r\n    BinaryExpression: 1,\r\n    BlockStatement: 1,\r\n    BreakStatement: 1,\r\n    CallExpression: 1,\r\n    CatchClause: 1,\r\n    ClassBody: 1,\r\n    ClassDeclaration: 1,\r\n    ClassExpression: 1,\r\n    ClassHeritage: 1,\r\n    ComprehensionBlock: 1,\r\n    ComprehensionExpression: 1,\r\n    ConditionalExpression: 1,\r\n    ContinueStatement: 1,\r\n    DebuggerStatement: 1,\r\n    DoWhileStatement: 1,\r\n    EmptyStatement: 1,\r\n    ExportDeclaration: 1,\r\n    ExportBatchSpecifier: 1,\r\n    ExportSpecifier: 1,\r\n    ExpressionStatement: 1,\r\n    ForInStatement: 1,\r\n    ForOfStatement: 1,\r\n    ForStatement: 1,\r\n    FunctionDeclaration: 1,\r\n    FunctionExpression: 1,\r\n    Identifier: 1,\r\n    IfStatement: 1,\r\n    ImportDeclaration: 1,\r\n    ImportSpecifier: 1,\r\n    LabeledStatement: 1,\r\n    Literal: 1,\r\n    LogicalExpression: 1,\r\n    MemberExpression: 1,\r\n    MethodDefinition: 1,\r\n    ModuleDeclaration: 1,\r\n    NewExpression: 1,\r\n    ObjectExpression: 1,\r\n    ObjectPattern: 1,\r\n    Program: 1,\r\n    Property: 1,\r\n    ReturnStatement: 1,\r\n    SequenceExpression: 1,\r\n    SpreadElement: 1,\r\n    SwitchCase: 1,\r\n    SwitchStatement: 1,\r\n    TaggedTemplateExpression: 1,\r\n    TemplateElement: 1,\r\n    TemplateLiteral: 1,\r\n    ThisExpression: 1,\r\n    ThrowStatement: 1,\r\n    TryStatement: 1,\r\n    UnaryExpression: 1,\r\n    UpdateExpression: 1,\r\n    VariableDeclaration: 1,\r\n    VariableDeclarator: 1,\r\n    WhileStatement: 1,\r\n    WithStatement: 1,\r\n    YieldExpression: 1\r\n  };\r\n\r\n}).call(this);\r\n\r\n},{}],4:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var addedGlobals, debugDumper, emptyAST, isStatement, makeYieldFilter, shouldFlow, updateState, upgradeEvaluator, _, _ref, _ref1, _ref2;\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  addedGlobals = require('./protectBuiltins').addedGlobals;\r\n\r\n  isStatement = function(name) {\r\n    return name !== 'Literal' && name !== 'Identifier' && name !== 'ThisExpression' && name !== 'BlockStatement' && name !== 'MemberExpression' && name !== 'FunctionExpression' && name !== 'LogicalExpression' && name !== 'BinaryExpression' && name !== 'UnaryExpression' && name !== 'Program';\r\n  };\r\n\r\n  shouldFlow = function(name) {\r\n    return name !== 'IfStatement' && name !== 'WhileStatement' && name !== 'DoWhileStatement' && name !== 'ForStatement' && name !== 'ForInStatement' && name !== 'ForOfStatement';\r\n  };\r\n\r\n  updateState = function(aether, evaluator) {\r\n    var astStack, bottom, f, frame_stack, n, p, rng, s, statementStack, top, variables, x, _base, _base1, _base2, _i, _j, _len, _ref3, _ref4;\r\n    frame_stack = evaluator.frames;\r\n    top = frame_stack[0];\r\n    bottom = frame_stack[frame_stack.length - 1];\r\n    if (aether.options.includeFlow) {\r\n      if (bottom.flow == null) {\r\n        bottom.flow = {\r\n          statementsExecuted: 0,\r\n          statements: []\r\n        };\r\n        if ((_base = aether.flow).states == null) {\r\n          _base.states = [];\r\n        }\r\n        aether.flow.states.push(bottom.flow);\r\n      }\r\n    }\r\n    if (aether.options.includeMetrics) {\r\n      if ((_base1 = aether.metrics).statementsExecuted == null) {\r\n        _base1.statementsExecuted = 0;\r\n      }\r\n      if ((_base2 = aether.metrics).callsExecuted == null) {\r\n        _base2.callsExecuted = 0;\r\n      }\r\n    }\r\n    astStack = (function() {\r\n      var _i, _len, _results;\r\n      _results = [];\r\n      for (_i = 0, _len = frame_stack.length; _i < _len; _i++) {\r\n        x = frame_stack[_i];\r\n        if (x.ast != null) {\r\n          _results.push(x.ast);\r\n        }\r\n      }\r\n      return _results;\r\n    })();\r\n    statementStack = (function() {\r\n      var _i, _len, _results;\r\n      _results = [];\r\n      for (_i = 0, _len = astStack.length; _i < _len; _i++) {\r\n        x = astStack[_i];\r\n        if (isStatement(x.type)) {\r\n          _results.push(x);\r\n        }\r\n      }\r\n      return _results;\r\n    })();\r\n    if (top.ast != null) {\r\n      if (aether.options.includeMetrics && top.ast.type === 'CallExpression') {\r\n        ++aether.metrics.callsExecuted;\r\n      }\r\n      if (isStatement(top.ast.type)) {\r\n        if (aether.options.includeMetrics) {\r\n          ++aether.metrics.statementsExecuted;\r\n        }\r\n        if (bottom.flow != null) {\r\n          ++bottom.flow.statementsExecuted;\r\n        }\r\n        if ((bottom.flow != null) && shouldFlow(top.ast.type)) {\r\n          f = {};\r\n          if (aether._userInfo != null) {\r\n            f.userInfo = _.cloneDeep(aether._userInfo);\r\n          }\r\n          if (!aether.options.noVariablesInFlow) {\r\n            variables = {};\r\n            for (s = _i = _ref3 = frame_stack.length - 2; _ref3 <= 0 ? _i <= 0 : _i >= 0; s = _ref3 <= 0 ? ++_i : --_i) {\r\n              p = frame_stack[s];\r\n              if (!(p && p.scope)) {\r\n                continue;\r\n              }\r\n              _ref4 = Object.keys(p.scope.object.properties);\r\n              for (_j = 0, _len = _ref4.length; _j < _len; _j++) {\r\n                n = _ref4[_j];\r\n                if (n[0] === '_') {\r\n                  continue;\r\n                }\r\n                if (p.value) {\r\n                  variables[n] = p.value.debugString;\r\n                }\r\n              }\r\n            }\r\n            f.variables = variables;\r\n          }\r\n          rng = top.ast.originalRange;\r\n          if (rng) {\r\n            f.range = [rng.start, rng.end];\r\n          }\r\n          f.type = top.ast.type;\r\n          if (!!f.range) {\r\n            return bottom.flow.statements.push(f);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  module.exports.createFunction = function(aether, code) {\r\n    var engine, error, esper, fx, fxName, messWithLoops, name, state, _i, _len, _ref3, _ref4, _ref5, _ref6;\r\n    esper = (_ref3 = (_ref4 = (_ref5 = typeof window !== \"undefined\" && window !== null ? window.esper : void 0) != null ? _ref5 : typeof self !== \"undefined\" && self !== null ? self.esper : void 0) != null ? _ref4 : typeof global !== \"undefined\" && global !== null ? global.esper : void 0) != null ? _ref3 : require('esper.js');\r\n    state = {};\r\n    messWithLoops = false;\r\n    if (aether.options.whileTrueAutoYield || aether.options.simpleLoops) {\r\n      messWithLoops = true;\r\n    }\r\n    if (!aether.esperEngine) {\r\n      aether.esperEngine = new esper.Engine({\r\n        strict: aether.language.id !== 'python',\r\n        foreignObjectMode: aether.options.protectAPI ? 'smart' : 'link',\r\n        extraErrorInfo: true,\r\n        yieldPower: 2,\r\n        debug: aether.options.debug\r\n      });\r\n    }\r\n    engine = aether.esperEngine;\r\n    fxName = aether.options.functionName || 'foo';\r\n    aether.language.setupInterpreter(engine);\r\n    if (aether.language.injectCode != null) {\r\n      engine.evalASTSync(aether.language.injectCode, {\r\n        nonUserCode: true\r\n      });\r\n    } else {\r\n      engine.evalSync('');\r\n    }\r\n    _ref6 = Object.keys(addedGlobals);\r\n    for (_i = 0, _len = _ref6.length; _i < _len; _i++) {\r\n      name = _ref6[_i];\r\n      engine.addGlobal(name, addedGlobals[name]);\r\n    }\r\n    upgradeEvaluator(aether, engine.evaluator);\r\n    try {\r\n      if (aether.language.usesFunctionWrapping()) {\r\n        engine.evalASTSync(aether.ast);\r\n        if (aether.options.yieldConditionally) {\r\n          fx = engine.fetchFunction(fxName, makeYieldFilter(aether));\r\n        } else if (aether.options.yieldAutomatically) {\r\n          fx = engine.fetchFunction(fxName, function(engine) {\r\n            return true;\r\n          });\r\n        } else {\r\n          fx = engine.fetchFunctionSync(fxName);\r\n        }\r\n      } else {\r\n        if (aether.options.yieldConditionally) {\r\n          fx = engine.functionFromAST(aether.ast, makeYieldFilter(aether));\r\n        } else if (aether.options.yieldAutomatically) {\r\n          fx = engine.functionFromAST(aether.ast, function(engine) {\r\n            return true;\r\n          });\r\n        } else {\r\n          fx = engine.functionFromASTSync(aether.ast);\r\n        }\r\n      }\r\n    } catch (_error) {\r\n      error = _error;\r\n      console.log('Esper: error parsing AST. Returning empty function.', error.message);\r\n      if (aether.language.id === 'javascript') {\r\n        error.message = \"Couldn't understand your code. Are your { and } braces matched?\";\r\n      } else {\r\n        error.message = \"Couldn't understand your code. Do you have extra spaces at the beginning, or unmatched ( and ) parentheses?\";\r\n      }\r\n      aether.addProblem(aether.createUserCodeProblem({\r\n        error: error,\r\n        code: aether.raw,\r\n        type: 'transpile',\r\n        reporter: 'aether'\r\n      }));\r\n      engine.evalASTSync(emptyAST);\r\n    }\r\n    return fx;\r\n  };\r\n\r\n  debugDumper = _.debounce(function(evaluator) {\r\n    return evaluator.dumpProfilingInformation();\r\n  }, 5000);\r\n\r\n  makeYieldFilter = function(aether) {\r\n    return function(engine, evaluator, e) {\r\n      var currentMark, frame_stack, top, yieldValue;\r\n      frame_stack = evaluator.frames;\r\n      top = frame_stack[0];\r\n      if ((e != null) && e.type === 'event' && e.event === 'loopBodyStart') {\r\n        if (top.srcAst.type === 'WhileStatement' && top.srcAst.test.type === 'Literal') {\r\n          if (aether.whileLoopMarker != null) {\r\n            currentMark = aether.whileLoopMarker();\r\n            if (currentMark === top.mark) {\r\n              top.mark = currentMark + 1;\r\n              return true;\r\n            } else {\r\n              top.mark = currentMark;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (aether._shouldYield) {\r\n        yieldValue = aether._shouldYield;\r\n        aether._shouldYield = false;\r\n        if (frame_stack[1].type === 'loop') {\r\n          frame_stack[1].didYield = true;\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n  };\r\n\r\n  module.exports.createThread = function(aether, fx) {\r\n    var engine, internalFx;\r\n    internalFx = esper.Value.getBookmark(fx);\r\n    engine = aether.esperEngine.fork();\r\n    upgradeEvaluator(aether, engine.evaluator);\r\n    return engine.makeFunctionFromClosure(internalFx, makeYieldFilter(aether));\r\n  };\r\n\r\n  module.exports.upgradeEvaluator = upgradeEvaluator = function(aether, evaluator) {\r\n    var executionCount;\r\n    executionCount = 0;\r\n    return evaluator.instrument = function(evalu, evt) {\r\n      debugDumper(evaluator);\r\n      if (++executionCount > aether.options.executionLimit) {\r\n        throw new TypeError('Statement execution limit reached');\r\n      }\r\n      return updateState(aether, evalu, evt);\r\n    };\r\n  };\r\n\r\n  emptyAST = {\r\n    \"type\": \"Program\",\r\n    \"body\": [\r\n      {\r\n        \"type\": \"FunctionDeclaration\",\r\n        \"id\": {\r\n          \"type\": \"Identifier\",\r\n          \"name\": \"plan\",\r\n          \"range\": [9, 13],\r\n          \"loc\": {\r\n            \"start\": {\r\n              \"line\": 1,\r\n              \"column\": 9\r\n            },\r\n            \"end\": {\r\n              \"line\": 1,\r\n              \"column\": 13\r\n            }\r\n          },\r\n          \"originalRange\": {\r\n            \"start\": {\r\n              \"ofs\": -8,\r\n              \"row\": 0,\r\n              \"col\": -8\r\n            },\r\n            \"end\": {\r\n              \"ofs\": -4,\r\n              \"row\": 0,\r\n              \"col\": -4\r\n            }\r\n          }\r\n        },\r\n        \"params\": [],\r\n        \"defaults\": [],\r\n        \"body\": {\r\n          \"type\": \"BlockStatement\",\r\n          \"body\": [\r\n            {\r\n              \"type\": \"VariableDeclaration\",\r\n              \"declarations\": [\r\n                {\r\n                  \"type\": \"VariableDeclarator\",\r\n                  \"id\": {\r\n                    \"type\": \"Identifier\",\r\n                    \"name\": \"hero\"\r\n                  },\r\n                  \"init\": {\r\n                    \"type\": \"ThisExpression\"\r\n                  }\r\n                }\r\n              ],\r\n              \"kind\": \"var\",\r\n              \"userCode\": false\r\n            }\r\n          ],\r\n          \"range\": [16, 19],\r\n          \"loc\": {\r\n            \"start\": {\r\n              \"line\": 1,\r\n              \"column\": 16\r\n            },\r\n            \"end\": {\r\n              \"line\": 2,\r\n              \"column\": 1\r\n            }\r\n          },\r\n          \"originalRange\": {\r\n            \"start\": {\r\n              \"ofs\": -1,\r\n              \"row\": 0,\r\n              \"col\": -1\r\n            },\r\n            \"end\": {\r\n              \"ofs\": 2,\r\n              \"row\": 1,\r\n              \"col\": 1\r\n            }\r\n          }\r\n        },\r\n        \"rest\": null,\r\n        \"generator\": false,\r\n        \"expression\": false,\r\n        \"range\": [0, 19],\r\n        \"loc\": {\r\n          \"start\": {\r\n            \"line\": 1,\r\n            \"column\": 0\r\n          },\r\n          \"end\": {\r\n            \"line\": 2,\r\n            \"column\": 1\r\n          }\r\n        },\r\n        \"originalRange\": {\r\n          \"start\": {\r\n            \"ofs\": -17,\r\n            \"row\": 0,\r\n            \"col\": -17\r\n          },\r\n          \"end\": {\r\n            \"ofs\": 2,\r\n            \"row\": 1,\r\n            \"col\": 1\r\n          }\r\n        }\r\n      }\r\n    ],\r\n    \"range\": [0, 19],\r\n    \"loc\": {\r\n      \"start\": {\r\n        \"line\": 1,\r\n        \"column\": 0\r\n      },\r\n      \"end\": {\r\n        \"line\": 2,\r\n        \"column\": 1\r\n      }\r\n    },\r\n    \"originalRange\": {\r\n      \"start\": {\r\n        \"ofs\": -17,\r\n        \"row\": 0,\r\n        \"col\": -17\r\n      },\r\n      \"end\": {\r\n        \"ofs\": 2,\r\n        \"row\": 1,\r\n        \"col\": 1\r\n      }\r\n    }\r\n  };\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./protectBuiltins\":14,\"esper.js\":41,\"lodash\":41}],5:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var CoffeeScript, Language, StructuredCode, estraverse, fixLocations, parserHolder, _, _ref, _ref1, _ref2,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  parserHolder = {};\r\n\r\n  estraverse = require('estraverse');\r\n\r\n  Language = require('./language');\r\n\r\n  module.exports = CoffeeScript = (function(_super) {\r\n    __extends(CoffeeScript, _super);\r\n\r\n    CoffeeScript.prototype.name = 'CoffeeScript';\r\n\r\n    CoffeeScript.prototype.id = 'coffeescript';\r\n\r\n    CoffeeScript.prototype.parserID = 'csredux';\r\n\r\n    CoffeeScript.prototype.thisValue = '@';\r\n\r\n    CoffeeScript.prototype.thisValueAccess = '@';\r\n\r\n    CoffeeScript.prototype.heroValueAccess = 'hero.';\r\n\r\n    CoffeeScript.prototype.wrappedCodeIndentLen = 4;\r\n\r\n    function CoffeeScript() {\r\n      var _ref3;\r\n      CoffeeScript.__super__.constructor.apply(this, arguments);\r\n      this.indent = Array(this.wrappedCodeIndentLen + 1).join(' ');\r\n      if (parserHolder.csredux == null) {\r\n        parserHolder.csredux = (_ref3 = typeof self !== \"undefined\" && self !== null ? self.aetherCoffeeScriptRedux : void 0) != null ? _ref3 : require('coffee-script-redux');\r\n      }\r\n    }\r\n\r\n    CoffeeScript.prototype.wrap = function(rawCode, aether) {\r\n      var indentedCode, line;\r\n      if (this.wrappedCodePrefix == null) {\r\n        this.wrappedCodePrefix = \"\" + (aether.options.functionName || 'foo') + \" = (\" + (aether.options.functionParameters.join(', ')) + \") ->\\n\\n\";\r\n      }\r\n      if (this.wrappedCodeSuffix == null) {\r\n        this.wrappedCodeSuffix = '\\n';\r\n      }\r\n      indentedCode = ((function() {\r\n        var _i, _len, _ref3, _results;\r\n        _ref3 = rawCode.split('\\n');\r\n        _results = [];\r\n        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n          line = _ref3[_i];\r\n          _results.push(this.indent + line);\r\n        }\r\n        return _results;\r\n      }).call(this)).join('\\n');\r\n      return this.wrappedCodePrefix + indentedCode + this.wrappedCodeSuffix;\r\n    };\r\n\r\n    CoffeeScript.prototype.removeWrappedIndent = function(range) {\r\n      range = _.cloneDeep(range);\r\n      range[0].ofs -= this.wrappedCodeIndentLen * range[0].row;\r\n      range[1].ofs -= this.wrappedCodeIndentLen * range[1].row;\r\n      return range;\r\n    };\r\n\r\n    CoffeeScript.prototype.parse = function(code, aether) {\r\n      var csAST, jsAST;\r\n      csAST = parserHolder.csredux.parse(code, {\r\n        optimise: false,\r\n        raw: true\r\n      });\r\n      jsAST = parserHolder.csredux.compile(csAST, {\r\n        bare: true\r\n      });\r\n      fixLocations(jsAST);\r\n      return jsAST;\r\n    };\r\n\r\n    return CoffeeScript;\r\n\r\n  })(Language);\r\n\r\n  StructuredCode = (function() {\r\n    function StructuredCode(code) {\r\n      var _ref3;\r\n      _ref3 = this.generateOffsets(code), this.cursors = _ref3[0], this.indentations = _ref3[1];\r\n      this.length = this.cursors.length;\r\n    }\r\n\r\n    StructuredCode.prototype.generateOffsets = function(code) {\r\n      var cursor, indentations, reg, res, result, _ref3, _ref4;\r\n      reg = /(?:\\r\\n|[\\r\\n\\u2028\\u2029])/g;\r\n      result = [0];\r\n      indentations = [0];\r\n      while (res = reg.exec(code)) {\r\n        cursor = res.index + res[0].length;\r\n        reg.lastIndex = cursor;\r\n        result.push(cursor);\r\n        indentations.push((_ref3 = code.substr(cursor).match(/^\\s+/)) != null ? (_ref4 = _ref3[0]) != null ? _ref4.length : void 0 : void 0);\r\n      }\r\n      return [result, indentations];\r\n    };\r\n\r\n    StructuredCode.prototype.column = function(offset) {\r\n      return this.loc(offset).column;\r\n    };\r\n\r\n    StructuredCode.prototype.line = function(offset) {\r\n      return this.loc(offset).line;\r\n    };\r\n\r\n    StructuredCode.prototype.fixRange = function(range, loc) {\r\n      var fix;\r\n      fix = Math.floor(this.indentations[loc.start.line - 1] + 5 / 4);\r\n      range[0] -= fix;\r\n      range[1] -= fix;\r\n      return range;\r\n    };\r\n\r\n    StructuredCode.prototype.loc = function(offset) {\r\n      var column, index, line;\r\n      index = _.sortedIndex(this.cursors, offset);\r\n      if (this.cursors.length > index && this.cursors[index] === offset) {\r\n        column = 0;\r\n        line = index + 1;\r\n      } else {\r\n        column = offset - 4 - this.cursors[index - 1];\r\n        line = index;\r\n      }\r\n      return {\r\n        column: column,\r\n        line: line\r\n      };\r\n    };\r\n\r\n    return StructuredCode;\r\n\r\n  })();\r\n\r\n  fixLocations = function(program) {\r\n    var structured;\r\n    structured = new StructuredCode(program.raw);\r\n    return estraverse.traverse(program, {\r\n      leave: function(node, parent) {\r\n        var loc;\r\n        if (node.range != null) {\r\n          loc = {\r\n            start: null,\r\n            end: structured.loc(node.range[1])\r\n          };\r\n          if (node.loc != null) {\r\n            loc.start = node.loc.start;\r\n          } else {\r\n            loc.start = structured.loc(node.range[0]);\r\n          }\r\n          if (_.isNaN(loc.end.column)) {\r\n            loc.end.column = loc.start.column + 1;\r\n          }\r\n          node.loc = loc;\r\n          if (node.range[1] == null) {\r\n            node.range[1] = node.range[0] + 1;\r\n          }\r\n          node.range = structured.fixRange(node.range, loc);\r\n        } else {\r\n          node.loc = (function() {\r\n            var _ref3;\r\n            switch (node.type) {\r\n              case 'BlockStatement':\r\n                if (node.body.length) {\r\n                  return {\r\n                    start: node.body[0].loc.start,\r\n                    end: node.body[node.body.length - 1].loc.end\r\n                  };\r\n                } else {\r\n                  return parent.loc;\r\n                }\r\n                break;\r\n              case 'VariableDeclarator':\r\n                if ((node != null ? (_ref3 = node.init) != null ? _ref3.loc : void 0 : void 0) != null) {\r\n                  return {\r\n                    start: node.id.loc.start,\r\n                    end: node.init.loc.end\r\n                  };\r\n                } else {\r\n                  return node.id.loc;\r\n                }\r\n                break;\r\n              case 'ExpressionStatement':\r\n                return node.expression.loc;\r\n              case 'ReturnStatement':\r\n                if (node.argument != null) {\r\n                  return node.argument.loc;\r\n                } else {\r\n                  return node.loc;\r\n                }\r\n                break;\r\n              case 'VariableDeclaration':\r\n                return {\r\n                  start: node.declarations[0].loc.start,\r\n                  end: node.declarations[node.declarations.length - 1].loc.end\r\n                };\r\n              default:\r\n                return {\r\n                  start: {\r\n                    line: 0,\r\n                    column: 0\r\n                  },\r\n                  end: {\r\n                    line: 0,\r\n                    column: 0\r\n                  }\r\n                };\r\n            }\r\n          })();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./language\":9,\"coffee-script-redux\":41,\"estraverse\":40,\"lodash\":41}],6:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var HTML, Language, _, _ref, _ref1, _ref2,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  Language = require('./language');\r\n\r\n  module.exports = HTML = (function(_super) {\r\n    __extends(HTML, _super);\r\n\r\n    HTML.prototype.name = 'HTML';\r\n\r\n    HTML.prototype.id = 'html';\r\n\r\n    HTML.prototype.parserID = 'html';\r\n\r\n    function HTML() {\r\n      HTML.__super__.constructor.apply(this, arguments);\r\n    }\r\n\r\n    HTML.prototype.hasChangedASTs = function(a, b) {\r\n      return a.replace(/\\s/g) !== b.replace(/\\s/g);\r\n    };\r\n\r\n    HTML.prototype.usesFunctionWrapping = function() {\r\n      return false;\r\n    };\r\n\r\n    HTML.prototype.parse = function(code, aether) {\r\n      return code;\r\n    };\r\n\r\n    HTML.prototype.replaceLoops = function(rawCode) {\r\n      return [rawCode, []];\r\n    };\r\n\r\n    return HTML;\r\n\r\n  })(Language);\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./language\":9,\"lodash\":41}],7:[function(require,module,exports){\r\n(function() {\r\n  var Java, Language, parserHolder,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  Language = require('./language');\r\n\r\n  parserHolder = {};\r\n\r\n  module.exports = Java = (function(_super) {\r\n    __extends(Java, _super);\r\n\r\n    Java.prototype.name = 'Java';\r\n\r\n    Java.prototype.id = 'java';\r\n\r\n    Java.prototype.parserID = 'cashew';\r\n\r\n    function Java() {\r\n      var _ref;\r\n      Java.__super__.constructor.apply(this, arguments);\r\n      if (parserHolder.cashew == null) {\r\n        parserHolder.cashew = (_ref = typeof self !== \"undefined\" && self !== null ? self.aetherCashew : void 0) != null ? _ref : require('cashew-js');\r\n      }\r\n      this.runtimeGlobals = {\r\n        ___JavaRuntime: parserHolder.cashew.___JavaRuntime,\r\n        _Object: parserHolder.cashew._Object,\r\n        Integer: parserHolder.cashew.Integer,\r\n        Double: parserHolder.cashew.Double,\r\n        _NotInitialized: parserHolder.cashew._NotInitialized,\r\n        _ArrayList: parserHolder.cashew._ArrayList\r\n      };\r\n    }\r\n\r\n    Java.prototype.obviouslyCannotTranspile = function(rawCode) {\r\n      return false;\r\n    };\r\n\r\n    Java.prototype.parse = function(code, aether) {\r\n      var ast;\r\n      ast = parserHolder.cashew.Parse(code);\r\n      ast = parserHolder.cashew.wrapFunction(ast, aether.options.functionName, aether.className, aether.staticCall);\r\n      return ast;\r\n    };\r\n\r\n    return Java;\r\n\r\n  })(Language);\r\n\r\n}).call(this);\r\n\r\n},{\"./language\":9,\"cashew-js\":41}],8:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var JavaScript, Language, acorn_loose, escodegen, esprima, jshintHolder, traversal, _, _ref, _ref1, _ref2,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  jshintHolder = {};\r\n\r\n  esprima = require('esprima');\r\n\r\n  acorn_loose = require('acorn/acorn_loose');\r\n\r\n  escodegen = require('escodegen');\r\n\r\n  Language = require('./language');\r\n\r\n  traversal = require('../traversal');\r\n\r\n  module.exports = JavaScript = (function(_super) {\r\n    __extends(JavaScript, _super);\r\n\r\n    JavaScript.prototype.name = 'JavaScript';\r\n\r\n    JavaScript.prototype.id = 'javascript';\r\n\r\n    JavaScript.prototype.parserID = 'esprima';\r\n\r\n    JavaScript.prototype.thisValue = 'this';\r\n\r\n    JavaScript.prototype.thisValueAccess = 'this.';\r\n\r\n    JavaScript.prototype.heroValueAccess = 'hero.';\r\n\r\n    function JavaScript() {\r\n      var _ref3;\r\n      JavaScript.__super__.constructor.apply(this, arguments);\r\n      if (jshintHolder.jshint == null) {\r\n        jshintHolder.jshint = ((_ref3 = typeof self !== \"undefined\" && self !== null ? self.aetherJSHint : void 0) != null ? _ref3 : require('jshint')).JSHINT;\r\n      }\r\n    }\r\n\r\n    JavaScript.prototype.obviouslyCannotTranspile = function(rawCode) {\r\n      var e;\r\n      try {\r\n        eval(\"'use strict;'\\nthrow 0;\" + rawCode);\r\n      } catch (_error) {\r\n        e = _error;\r\n        if (e !== 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    JavaScript.prototype.hasChangedASTs = function(a, b) {\r\n      var aAST, bAST, options, removeLocations, _ref3, _ref4, _ref5;\r\n      options = {\r\n        loc: false,\r\n        range: false,\r\n        comment: false,\r\n        tolerant: true\r\n      };\r\n      _ref3 = [null, null], aAST = _ref3[0], bAST = _ref3[1];\r\n      try {\r\n        aAST = esprima.parse(a, options);\r\n      } catch (_error) {}\r\n      try {\r\n        bAST = esprima.parse(b, options);\r\n      } catch (_error) {}\r\n      if ((!aAST || !bAST) && (aAST || bAST)) {\r\n        return true;\r\n      }\r\n      if (aAST && bAST) {\r\n        if (((_ref4 = aAST.errors) != null ? _ref4 : []).length !== ((_ref5 = bAST.errors) != null ? _ref5 : []).length) {\r\n          return true;\r\n        }\r\n        return !_.isEqual(aAST.body, bAST.body);\r\n      }\r\n      options = {\r\n        locations: false,\r\n        tabSize: 4,\r\n        ecmaVersion: 5\r\n      };\r\n      aAST = acorn_loose.parse_dammit(a, options);\r\n      bAST = acorn_loose.parse_dammit(b, options);\r\n      if (!(aAST && bAST)) {\r\n        console.log(\"Couldn't even loosely parse; are you sure \" + a + \" and \" + b + \" are \" + this.name + \"?\");\r\n        return true;\r\n      }\r\n      removeLocations = function(node) {\r\n        if (node) {\r\n          return node.start = node.end = null;\r\n        }\r\n      };\r\n      traversal.walkAST(aAST, removeLocations);\r\n      traversal.walkAST(bAST, removeLocations);\r\n      return !_.isEqual(aAST, bAST);\r\n    };\r\n\r\n    JavaScript.prototype.replaceLoops = function(rawCode) {\r\n      var a, convertedCode, line, lineNumber, lines, rangeIndex, replacedLoops, start, _i, _len, _ref3;\r\n      if (rawCode.indexOf('loop') === -1) {\r\n        return [rawCode, []];\r\n      }\r\n      convertedCode = \"\";\r\n      replacedLoops = [];\r\n      rangeIndex = 0;\r\n      lines = rawCode.split('\\n');\r\n      for (lineNumber = _i = 0, _len = lines.length; _i < _len; lineNumber = ++_i) {\r\n        line = lines[lineNumber];\r\n        if (line.replace(/^\\s+/g, \"\").indexOf('loop') === 0) {\r\n          start = line.indexOf('loop');\r\n          a = line.split(\"\");\r\n          [].splice.apply(a, [start, (start + 3) - start + 1].concat(_ref3 = 'while (true)'.split(\"\"))), _ref3;\r\n          line = a.join(\"\");\r\n          replacedLoops.push(rangeIndex + start);\r\n        }\r\n        convertedCode += line;\r\n        if (lineNumber !== lines.length - 1) {\r\n          convertedCode += '\\n';\r\n        }\r\n        rangeIndex += line.length + 1;\r\n      }\r\n      return [convertedCode, replacedLoops];\r\n    };\r\n\r\n    JavaScript.prototype.lint = function(rawCode, aether) {\r\n      var c, e, error, firstParen, firstSemiColon, g, i, jshintGlobals, jshintOptions, jshintSuccess, line, lines, lintProblems, offset, parenCount, row, wrappedCode, _i, _j, _k, _len, _len1, _len2, _ref3, _ref4;\r\n      lintProblems = [];\r\n      if (!jshintHolder.jshint) {\r\n        return lintProblems;\r\n      }\r\n      wrappedCode = this.wrap(rawCode, aether);\r\n      jshintOptions = {\r\n        browser: false,\r\n        couch: false,\r\n        devel: false,\r\n        dojo: false,\r\n        jquery: false,\r\n        mootools: false,\r\n        node: false,\r\n        nonstandard: false,\r\n        phantom: false,\r\n        prototypejs: false,\r\n        rhino: false,\r\n        worker: false,\r\n        wsh: false,\r\n        yui: false\r\n      };\r\n      jshintGlobals = _.zipObject(jshintGlobals, (function() {\r\n        var _i, _len, _ref3, _results;\r\n        _ref3 = aether.allGlobals;\r\n        _results = [];\r\n        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n          g = _ref3[_i];\r\n          _results.push(false);\r\n        }\r\n        return _results;\r\n      })());\r\n      try {\r\n        jshintSuccess = jshintHolder.jshint(wrappedCode, jshintOptions, jshintGlobals);\r\n      } catch (_error) {\r\n        e = _error;\r\n        console.warn(\"JSHint died with error\", e);\r\n      }\r\n      _ref3 = jshintHolder.jshint.errors;\r\n      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n        error = _ref3[_i];\r\n        lintProblems.push(aether.createUserCodeProblem({\r\n          type: 'transpile',\r\n          reporter: 'jshint',\r\n          error: error,\r\n          code: wrappedCode,\r\n          codePrefix: this.wrappedCodePrefix\r\n        }));\r\n      }\r\n      if (_.isEmpty(lintProblems)) {\r\n        lines = rawCode.split(/\\r\\n|[\\n\\r\\u2028\\u2029]/g);\r\n        offset = 0;\r\n        for (row = _j = 0, _len1 = lines.length; _j < _len1; row = ++_j) {\r\n          line = lines[row];\r\n          if (/^\\s*if /.test(line)) {\r\n            if ((firstParen = line.indexOf('(')) >= 0) {\r\n              parenCount = 1;\r\n              _ref4 = line.slice(firstParen + 1, +line.length + 1 || 9e9);\r\n              for (i = _k = 0, _len2 = _ref4.length; _k < _len2; i = ++_k) {\r\n                c = _ref4[i];\r\n                if (c === '(') {\r\n                  parenCount++;\r\n                }\r\n                if (c === ')') {\r\n                  parenCount--;\r\n                }\r\n                if (parenCount === 0) {\r\n                  break;\r\n                }\r\n              }\r\n              i += firstParen + 1 + 1;\r\n              if (parenCount === 0 && /^[ \\t]*;/.test(line.slice(i, +line.length + 1 || 9e9))) {\r\n                firstSemiColon = line.indexOf(';');\r\n                lintProblems.push({\r\n                  type: 'transpile',\r\n                  reporter: 'aether',\r\n                  level: 'warning',\r\n                  message: \"Don't put a ';' after an if statement.\",\r\n                  range: [\r\n                    {\r\n                      ofs: offset + firstSemiColon,\r\n                      row: row,\r\n                      col: firstSemiColon\r\n                    }, {\r\n                      ofs: offset + firstSemiColon + 1,\r\n                      row: row,\r\n                      col: firstSemiColon + 1\r\n                    }\r\n                  ]\r\n                });\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          offset += line.length + 1;\r\n        }\r\n      }\r\n      return lintProblems;\r\n    };\r\n\r\n    JavaScript.prototype.beautify = function(rawCode, aether) {\r\n      var ast, beautified, e;\r\n      try {\r\n        ast = esprima.parse(rawCode, {\r\n          range: true,\r\n          tokens: true,\r\n          comment: true,\r\n          tolerant: true\r\n        });\r\n        ast = escodegen.attachComments(ast, ast.comments, ast.tokens);\r\n      } catch (_error) {\r\n        e = _error;\r\n        console.log('got error beautifying', e);\r\n        ast = acorn_loose.parse_dammit(rawCode, {\r\n          tabSize: 4,\r\n          ecmaVersion: 5\r\n        });\r\n      }\r\n      beautified = escodegen.generate(ast, {\r\n        comment: true,\r\n        parse: esprima.parse\r\n      });\r\n      return beautified;\r\n    };\r\n\r\n    JavaScript.prototype.usesFunctionWrapping = function() {\r\n      return false;\r\n    };\r\n\r\n    JavaScript.prototype.hackCommonMistakes = function(code, aether) {\r\n      code = code.replace(/this\\.\\s*?\\n/g, \"this.IncompleteThisReference;\");\r\n      return code;\r\n    };\r\n\r\n    JavaScript.prototype.parse = function(code, aether) {\r\n      var ast, errors, x;\r\n      ast = esprima.parse(code, {\r\n        range: true,\r\n        loc: true,\r\n        tolerant: true\r\n      });\r\n      errors = [];\r\n      if (ast.errors) {\r\n        errors = (function() {\r\n          var _i, _len, _ref3, _results;\r\n          _ref3 = ast.errors;\r\n          _results = [];\r\n          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n            x = _ref3[_i];\r\n            if (x.description !== 'Illegal return statement') {\r\n              _results.push(x);\r\n            }\r\n          }\r\n          return _results;\r\n        })();\r\n        delete ast.errors;\r\n      }\r\n      if (errors[0]) {\r\n        throw errors[0];\r\n      }\r\n      return ast;\r\n    };\r\n\r\n    JavaScript.prototype.parseDammit = function(code, aether) {\r\n      var ast, fixNodeRange, lines, locToRange, posToOffset;\r\n      ast = acorn_loose.parse_dammit(code, {\r\n        locations: true,\r\n        tabSize: 4,\r\n        ecmaVersion: 5\r\n      });\r\n      if ((ast != null) && ast.body.length !== 1) {\r\n        ast.body = ast.body.slice(0, 0);\r\n      }\r\n      ast;\r\n      lines = code.replace(/\\n/g, '\\n空').split('空');\r\n      posToOffset = function(pos) {\r\n        return _.reduce(lines.slice(0, pos.line - 1), (function(sum, line) {\r\n          return sum + line.length;\r\n        }), 0) + pos.column;\r\n      };\r\n      locToRange = function(loc) {\r\n        return [posToOffset(loc.start), posToOffset(loc.end)];\r\n      };\r\n      fixNodeRange = function(node) {\r\n        if (node && node.loc) {\r\n          return node.range = locToRange(node.loc);\r\n        }\r\n      };\r\n      traversal.walkAST(ast, fixNodeRange);\r\n      return ast;\r\n    };\r\n\r\n    return JavaScript;\r\n\r\n  })(Language);\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"../traversal\":17,\"./language\":9,\"acorn/acorn_loose\":20,\"escodegen\":23,\"esprima\":39,\"jshint\":41,\"lodash\":41}],9:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var Language, _, _ref, _ref1, _ref2;\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  module.exports = Language = (function() {\r\n    Language.prototype.name = 'Abstract Language';\r\n\r\n    Language.prototype.id = 'abstract-language';\r\n\r\n    Language.prototype.parserID = 'abstract-parser';\r\n\r\n    Language.prototype.runtimeGlobals = {};\r\n\r\n    Language.prototype.thisValue = 'this';\r\n\r\n    Language.prototype.thisValueAccess = 'this.';\r\n\r\n    Language.prototype.heroValueAccess = 'hero.';\r\n\r\n    Language.prototype.wrappedCodeIndentLen = 0;\r\n\r\n    function Language() {}\r\n\r\n    Language.prototype.obviouslyCannotTranspile = function(rawCode) {\r\n      return false;\r\n    };\r\n\r\n    Language.prototype.hasChangedASTs = function(a, b) {\r\n      return true;\r\n    };\r\n\r\n    Language.prototype.hasChangedLineNumbers = function(a, b) {\r\n      if (!String.prototype.trimRight) {\r\n        String.prototype.trimRight = function() {\r\n          return String(this).replace(/\\s\\s*$/, '');\r\n        };\r\n      }\r\n      a = a.replace(/^[ \\t]+\\/\\/.*/g, '').trimRight();\r\n      b = b.replace(/^[ \\t]+\\/\\/.*/g, '').trimRight();\r\n      return a.split('\\n').length !== b.split('\\n').length;\r\n    };\r\n\r\n    Language.prototype.replaceLoops = function(rawCode) {\r\n      console.warn(\"Simple loop not implemented for \" + this.name);\r\n      return [rawCode, []];\r\n    };\r\n\r\n    Language.prototype.lint = function(rawCode, aether) {\r\n      return [];\r\n    };\r\n\r\n    Language.prototype.beautify = function(rawCode, aether) {\r\n      return rawCode;\r\n    };\r\n\r\n    Language.prototype.wrap = function(rawCode, aether) {\r\n      if (this.wrappedCodePrefix == null) {\r\n        this.wrappedCodePrefix = '';\r\n      }\r\n      if (this.wrappedCodeSuffix == null) {\r\n        this.wrappedCodeSuffix = '';\r\n      }\r\n      return this.wrappedCodePrefix + rawCode + this.wrappedCodeSuffix;\r\n    };\r\n\r\n    Language.prototype.removeWrappedIndent = function(range) {\r\n      return range;\r\n    };\r\n\r\n    Language.prototype.hackCommonMistakes = function(rawCode, aether) {\r\n      return rawCode;\r\n    };\r\n\r\n    Language.prototype.parse = function(code, aether) {\r\n      throw new Error(\"parse() not implemented for \" + this.id + \".\");\r\n    };\r\n\r\n    Language.prototype.convertToNativeType = function(obj) {\r\n      return obj;\r\n    };\r\n\r\n    Language.prototype.usesFunctionWrapping = function() {\r\n      return true;\r\n    };\r\n\r\n    Language.prototype.cloneObj = function(obj, cloneFn) {\r\n      var k, result, v;\r\n      if (cloneFn == null) {\r\n        cloneFn = function(o) {\r\n          return o;\r\n        };\r\n      }\r\n      if (_.isArray(obj)) {\r\n        result = (function() {\r\n          var _i, _len, _results;\r\n          _results = [];\r\n          for (_i = 0, _len = obj.length; _i < _len; _i++) {\r\n            v = obj[_i];\r\n            _results.push(cloneFn(v));\r\n          }\r\n          return _results;\r\n        })();\r\n      } else if (_.isObject(obj)) {\r\n        result = {};\r\n        for (k in obj) {\r\n          v = obj[k];\r\n          result[k] = cloneFn(v);\r\n        }\r\n      } else {\r\n        result = cloneFn(obj);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    Language.prototype.pryOpenCall = function(call, val, finder) {\r\n      return null;\r\n    };\r\n\r\n    Language.prototype.rewriteFunctionID = function(fid) {\r\n      return fid;\r\n    };\r\n\r\n    Language.prototype.setupInterpreter = function(esper) {};\r\n\r\n    return Language;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"lodash\":41}],10:[function(require,module,exports){\r\n(function() {\r\n  module.exports = {\r\n    javascript: require('./javascript'),\r\n    coffeescript: require('./coffeescript'),\r\n    python: require('./python'),\r\n    lua: require('./lua'),\r\n    java: require('./java'),\r\n    html: require('./html')\r\n  };\r\n\r\n}).call(this);\r\n\r\n},{\"./coffeescript\":5,\"./html\":6,\"./java\":7,\"./javascript\":8,\"./lua\":11,\"./python\":12}],11:[function(require,module,exports){\r\n(function() {\r\n  var Language, Lua, parserHolder, ranges,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  Language = require('./language');\r\n\r\n  ranges = require('../ranges');\r\n\r\n  parserHolder = {};\r\n\r\n  module.exports = Lua = (function(_super) {\r\n    __extends(Lua, _super);\r\n\r\n    Lua.prototype.name = 'Lua';\r\n\r\n    Lua.prototype.id = 'lua';\r\n\r\n    Lua.prototype.parserID = 'lua2js';\r\n\r\n    Lua.prototype.heroValueAccess = 'hero:';\r\n\r\n    function Lua() {\r\n      var _ref;\r\n      Lua.__super__.constructor.apply(this, arguments);\r\n      if (parserHolder.lua2js == null) {\r\n        parserHolder.lua2js = (_ref = typeof self !== \"undefined\" && self !== null ? self.aetherLua2JS : void 0) != null ? _ref : require('lua2js');\r\n      }\r\n      this.runtimeGlobals = parserHolder.lua2js.stdlib;\r\n      this.injectCode = require('aether-lang-stdlibs/lua-stdlib.ast.json');\r\n      this.fidMap = {};\r\n    }\r\n\r\n    Lua.prototype.obviouslyCannotTranspile = function(rawCode) {\r\n      return false;\r\n    };\r\n\r\n    Lua.prototype.callParser = function(code, loose) {\r\n      var ast;\r\n      ast = parserHolder.lua2js.parse(code, {\r\n        loose: loose,\r\n        forceVar: false,\r\n        decorateLuaObjects: true,\r\n        luaCalls: true,\r\n        luaOperators: true,\r\n        encloseWithFunctions: false\r\n      });\r\n      return ast;\r\n    };\r\n\r\n    Lua.prototype.replaceLoops = function(rawCode) {\r\n      var a, convertedCode, line, lineNumber, lines, rangeIndex, replacedLoops, start, _i, _len, _ref;\r\n      if (rawCode.indexOf('loop') === -1) {\r\n        return [rawCode, []];\r\n      }\r\n      convertedCode = \"\";\r\n      replacedLoops = [];\r\n      rangeIndex = 0;\r\n      lines = rawCode.split('\\n');\r\n      for (lineNumber = _i = 0, _len = lines.length; _i < _len; lineNumber = ++_i) {\r\n        line = lines[lineNumber];\r\n        if (line.replace(/^\\s+/g, \"\").indexOf('loop') === 0) {\r\n          start = line.indexOf('loop');\r\n          a = line.split(\"\");\r\n          [].splice.apply(a, [start, (start + 3) - start + 1].concat(_ref = 'while true do'.split(\"\"))), _ref;\r\n          line = a.join(\"\");\r\n          replacedLoops.push(rangeIndex + start);\r\n        }\r\n        convertedCode += line;\r\n        if (lineNumber !== lines.length - 1) {\r\n          convertedCode += '\\n';\r\n        }\r\n        rangeIndex += line.length + 1;\r\n      }\r\n      return [convertedCode, replacedLoops];\r\n    };\r\n\r\n    Lua.prototype.lint = function(rawCode, aether) {\r\n      var ast, e, error, lintProblems, rng, _i, _len, _ref;\r\n      lintProblems = [];\r\n      try {\r\n        ast = this.callParser(rawCode, true);\r\n      } catch (_error) {\r\n        e = _error;\r\n        return [];\r\n        return [\r\n          aether.createUserCodeProblem({\r\n            type: 'transpile',\r\n            reporter: 'lua2js',\r\n            error: e,\r\n            code: rawCode,\r\n            codePrefix: \"\"\r\n          })\r\n        ];\r\n      }\r\n      _ref = ast.errors;\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        error = _ref[_i];\r\n        rng = ranges.offsetsToRange(error.range[0], error.range[1], rawCode, '');\r\n        lintProblems.push(aether.createUserCodeProblem({\r\n          type: 'transpile',\r\n          reporter: 'lua2js',\r\n          message: error.msg,\r\n          code: rawCode,\r\n          codePrefix: \"\",\r\n          range: [rng.start, rng.end]\r\n        }));\r\n      }\r\n      return lintProblems;\r\n    };\r\n\r\n    Lua.prototype.usesFunctionWrapping = function() {\r\n      return false;\r\n    };\r\n\r\n    Lua.prototype.wrapResult = function(ast, name, params) {\r\n      ast.body.unshift({\r\n        \"type\": \"VariableDeclaration\",\r\n        \"declarations\": [\r\n          {\r\n            \"type\": \"VariableDeclarator\",\r\n            \"id\": {\r\n              \"type\": \"Identifier\",\r\n              \"name\": \"self\"\r\n            },\r\n            \"init\": {\r\n              \"type\": \"ThisExpression\"\r\n            }\r\n          }\r\n        ],\r\n        \"kind\": \"var\",\r\n        \"userCode\": false\r\n      });\r\n      return ast;\r\n    };\r\n\r\n    Lua.prototype.parse = function(code, aether) {\r\n      var ast;\r\n      ast = Lua.prototype.wrapResult(Lua.prototype.callParser(code, false), aether.options.functionName, aether.options.functionParameters);\r\n      return ast;\r\n    };\r\n\r\n    Lua.prototype.parseDammit = function(code, aether) {\r\n      var ast, error;\r\n      try {\r\n        ast = Lua.prototype.wrapResult(Lua.prototype.callParser(code, true), aether.options.functionName, aether.options.functionParameters);\r\n        return ast;\r\n      } catch (_error) {\r\n        error = _error;\r\n        return {\r\n          \"type\": {\r\n            \"BlockStatement\": {\r\n              body: [\r\n                {\r\n                  type: \"EmptyStatement\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        };\r\n      }\r\n    };\r\n\r\n    Lua.prototype.pryOpenCall = function(call, val, finder) {\r\n      var node, target;\r\n      node = call.right;\r\n      if (val[1] !== \"__lua\") {\r\n        return null;\r\n      }\r\n      if (val[2] === \"call\") {\r\n        target = node[\"arguments\"][1];\r\n        return finder(target);\r\n      }\r\n      if (val[2] === \"makeFunction\") {\r\n        this.fidMap[node[\"arguments\"][0].name] = finder(call.left);\r\n      }\r\n      return null;\r\n    };\r\n\r\n    Lua.prototype.rewriteFunctionID = function(fid) {\r\n      return this.fidMap[fid] || fid;\r\n    };\r\n\r\n    return Lua;\r\n\r\n  })(Language);\r\n\r\n}).call(this);\r\n\r\n},{\"../ranges\":15,\"./language\":9,\"aether-lang-stdlibs/lua-stdlib.ast.json\":21,\"lua2js\":41}],12:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var Language, Python, parserHolder, traversal, _, _ref, _ref1, _ref2,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  parserHolder = {};\r\n\r\n  traversal = require('../traversal');\r\n\r\n  Language = require('./language');\r\n\r\n  module.exports = Python = (function(_super) {\r\n    var selfToThis;\r\n\r\n    __extends(Python, _super);\r\n\r\n    Python.prototype.name = 'Python';\r\n\r\n    Python.prototype.id = 'python';\r\n\r\n    Python.prototype.parserID = 'filbert';\r\n\r\n    Python.prototype.thisValue = 'self';\r\n\r\n    Python.prototype.thisValueAccess = 'self.';\r\n\r\n    Python.prototype.heroValueAccess = 'hero.';\r\n\r\n    Python.prototype.wrappedCodeIndentLen = 4;\r\n\r\n    function Python() {\r\n      var _ref3, _ref4, _ref5;\r\n      Python.__super__.constructor.apply(this, arguments);\r\n      this.injectCode = require('aether-lang-stdlibs/python-stdlib.ast.json');\r\n      this.indent = Array(this.wrappedCodeIndentLen + 1).join(' ');\r\n      if (((_ref3 = parserHolder.parser) != null ? _ref3.pythonRuntime : void 0) == null) {\r\n        if (parserHolder.parser != null) {\r\n          console.log('Aether python parser ONLY missing pythonRuntime');\r\n        }\r\n        parserHolder.parser = (_ref4 = typeof self !== \"undefined\" && self !== null ? self.aetherFilbert : void 0) != null ? _ref4 : require('skulpty');\r\n        if (!parserHolder.parser.pythonRuntime) {\r\n          console.error(\"Couldn't import Python runtime; our filbert import only gave us\", parserHolder.parser);\r\n        }\r\n      }\r\n      if (parserHolder.parserLoose == null) {\r\n        parserHolder.parserLoose = (_ref5 = typeof self !== \"undefined\" && self !== null ? self.aetherFilbertLoose : void 0) != null ? _ref5 : require('skulpty');\r\n      }\r\n      this.runtimeGlobals = {\r\n        __pythonRuntime: parserHolder.parser.pythonRuntime\r\n      };\r\n    }\r\n\r\n    Python.prototype.hasChangedASTs = function(a, b) {\r\n      var aAST, bAST, error, options, _ref3;\r\n      try {\r\n        _ref3 = [null, null], aAST = _ref3[0], bAST = _ref3[1];\r\n        options = {\r\n          locations: false,\r\n          ranges: false\r\n        };\r\n        aAST = parserHolder.parserLoose.parse_dammit(a, options);\r\n        bAST = parserHolder.parserLoose.parse_dammit(b, options);\r\n        if (!(aAST && bAST)) {\r\n          return true;\r\n        }\r\n        return !_.isEqual(aAST, bAST);\r\n      } catch (_error) {\r\n        error = _error;\r\n        return true;\r\n      }\r\n    };\r\n\r\n    Python.prototype.replaceLoops = function(rawCode) {\r\n      var a, convertedCode, end, line, lineNumber, lines, problems, rangeIndex, start, _i, _len, _ref3;\r\n      if (!rawCode.match(/^\\s*loop/m)) {\r\n        return [rawCode, []];\r\n      }\r\n      convertedCode = \"\";\r\n      this.replacedLoops = [];\r\n      problems = [];\r\n      rangeIndex = 0;\r\n      lines = rawCode.split('\\n');\r\n      for (lineNumber = _i = 0, _len = lines.length; _i < _len; lineNumber = ++_i) {\r\n        line = lines[lineNumber];\r\n        if (line.match(/^\\s*loop\\b/, \"\") && lineNumber < lines.length - 1) {\r\n          start = line.indexOf('loop');\r\n          end = start + 4;\r\n          while (end < line.length && line[end].match(/\\s/)) {\r\n            end++;\r\n          }\r\n          if (line[end] !== ':') {\r\n            problems.push({\r\n              type: 'transpile',\r\n              message: \"You are missing a ':' after 'loop'. Try `loop:`\",\r\n              range: [\r\n                {\r\n                  row: lineNumber,\r\n                  column: start\r\n                }, {\r\n                  row: lineNumber,\r\n                  column: end\r\n                }\r\n              ]\r\n            });\r\n          }\r\n          a = line.split(\"\");\r\n          [].splice.apply(a, [start, end - start + 1].concat(_ref3 = 'while True:'.split(\"\"))), _ref3;\r\n          line = a.join(\"\");\r\n          this.replacedLoops.push(rangeIndex + start);\r\n        }\r\n        convertedCode += line;\r\n        if (lineNumber !== lines.length - 1) {\r\n          convertedCode += '\\n';\r\n        }\r\n        rangeIndex += line.length + 1;\r\n      }\r\n      return [convertedCode, this.replacedLoops, problems];\r\n    };\r\n\r\n    Python.prototype.lint = function(rawCode, aether) {\r\n      var ast, error, problems,\r\n        _this = this;\r\n      problems = [];\r\n      try {\r\n        ast = parserHolder.parser.parse(rawCode, {\r\n          locations: true,\r\n          ranges: true,\r\n          allowReturnOutsideFunction: true\r\n        });\r\n        traversal.walkASTCorrect(ast, function(node) {\r\n          if (node.type !== \"WhileStatement\") {\r\n            return;\r\n          }\r\n          if (node.body.body.length !== 0) {\r\n            return;\r\n          }\r\n          return problems.push({\r\n            type: 'transpile',\r\n            reporter: 'aether',\r\n            level: 'warning',\r\n            message: \"Empty loop. Put 4 spaces in front of statements inside loops.\",\r\n            range: [\r\n              {\r\n                ofs: node.range[0],\r\n                row: node.loc.start.line - 1,\r\n                col: node.loc.start.column\r\n              }, {\r\n                ofs: node.range[1],\r\n                row: node.loc.end.line - 1,\r\n                col: node.loc.end.column\r\n              }\r\n            ]\r\n          });\r\n        });\r\n        if (problems.length === 0) {\r\n          traversal.walkASTCorrect(ast, function(node) {\r\n            if (node.type !== \"IfStatement\") {\r\n              return;\r\n            }\r\n            if (node.consequent.body.length !== 0) {\r\n              return;\r\n            }\r\n            return problems.push({\r\n              type: 'transpile',\r\n              reporter: 'aether',\r\n              level: 'warning',\r\n              message: \"Empty if statement. Put 4 spaces in front of statements inside the if statement.\",\r\n              range: [\r\n                {\r\n                  ofs: node.range[0],\r\n                  row: node.loc.start.line - 1,\r\n                  col: node.loc.start.column\r\n                }, {\r\n                  ofs: node.range[1],\r\n                  row: node.loc.end.line - 1,\r\n                  col: node.loc.end.column\r\n                }\r\n              ]\r\n            });\r\n          });\r\n        }\r\n      } catch (_error) {\r\n        error = _error;\r\n      }\r\n      return problems;\r\n    };\r\n\r\n    Python.prototype.usesFunctionWrapping = function() {\r\n      return false;\r\n    };\r\n\r\n    Python.prototype.removeWrappedIndent = function(range) {\r\n      range = _.cloneDeep(range);\r\n      return range;\r\n    };\r\n\r\n    Python.prototype.parse = function(code, aether) {\r\n      var ast;\r\n      ast = parserHolder.parser.parse(code, {\r\n        locations: false,\r\n        ranges: true,\r\n        allowReturnOutsideFunction: true\r\n      });\r\n      selfToThis(ast);\r\n      return ast;\r\n    };\r\n\r\n    Python.prototype.parseDammit = function(code, aether) {\r\n      var ast, error;\r\n      try {\r\n        ast = parserHolder.parserLoose.parse_dammit(code, {\r\n          locations: false,\r\n          ranges: true\r\n        });\r\n        selfToThis(ast);\r\n      } catch (_error) {\r\n        error = _error;\r\n        ast = {\r\n          type: \"Program\",\r\n          body: [\r\n            {\r\n              \"type\": \"EmptyStatement\"\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      return ast;\r\n    };\r\n\r\n    Python.prototype.convertToNativeType = function(obj) {\r\n      if (!(obj != null ? obj._isPython : void 0) && _.isArray(obj)) {\r\n        parserHolder.parser.pythonRuntime.utils.convertToList(obj);\r\n      }\r\n      if (!(obj != null ? obj._isPython : void 0) && _.isObject(obj)) {\r\n        parserHolder.parser.pythonRuntime.utils.convertToDict(obj);\r\n      }\r\n      return obj;\r\n    };\r\n\r\n    Python.prototype.cloneObj = function(obj, cloneFn) {\r\n      var k, result, v, _i, _len;\r\n      if (cloneFn == null) {\r\n        cloneFn = function(o) {\r\n          return o;\r\n        };\r\n      }\r\n      if (_.isArray(obj)) {\r\n        result = new parserHolder.parser.pythonRuntime.objects.list();\r\n        for (_i = 0, _len = obj.length; _i < _len; _i++) {\r\n          v = obj[_i];\r\n          result.append(cloneFn(v));\r\n        }\r\n      } else if (_.isObject(obj)) {\r\n        result = new parserHolder.parser.pythonRuntime.objects.dict();\r\n        for (k in obj) {\r\n          v = obj[k];\r\n          result[k] = cloneFn(v);\r\n        }\r\n      } else {\r\n        result = cloneFn(obj);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    selfToThis = function(ast) {\r\n      ast.body.unshift({\r\n        \"type\": \"VariableDeclaration\",\r\n        \"declarations\": [\r\n          {\r\n            \"type\": \"VariableDeclarator\",\r\n            \"id\": {\r\n              \"type\": \"Identifier\",\r\n              \"name\": \"self\"\r\n            },\r\n            \"init\": {\r\n              \"type\": \"ThisExpression\"\r\n            }\r\n          }\r\n        ],\r\n        \"kind\": \"var\",\r\n        \"userCode\": false\r\n      });\r\n      return ast;\r\n    };\r\n\r\n    Python.prototype.setupInterpreter = function(esper) {\r\n      var realm;\r\n      realm = esper.realm;\r\n      return realm.options.linkValueCallReturnValueWrapper = function(value) {\r\n        var ArrayPrototype, defineProperties, gen, it, listPropertyDescriptor;\r\n        ArrayPrototype = realm.ArrayPrototype;\r\n        if (value.jsTypeName !== 'object') {\r\n          return value;\r\n        }\r\n        if (value.clazz === 'Array') {\r\n          defineProperties = realm.Object.getImmediate('defineProperties');\r\n          listPropertyDescriptor = realm.globalScope.get('__pythonRuntime').getImmediate('utils').getImmediate('listPropertyDescriptor');\r\n          gen = defineProperties.call(realm.Object, [value, listPropertyDescriptor], realm.globalScope);\r\n          it = gen.next();\r\n          while (!it.done) {\r\n            it = gen.next();\r\n          }\r\n        }\r\n        return value;\r\n      };\r\n    };\r\n\r\n    return Python;\r\n\r\n  })(Language);\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"../traversal\":17,\"./language\":9,\"aether-lang-stdlibs/python-stdlib.ast.json\":22,\"lodash\":41,\"skulpty\":44}],13:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var HintCreator, acceptMatchThreshold, extractRuntimeErrorDetails, extractTranspileErrorDetails, getRuntimeHint, getTranspileHint, ranges, scoreFuzziness, string_score, _, _ref, _ref1, _ref2,\r\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\r\n\r\n  ranges = require('./ranges');\r\n\r\n  string_score = require('string_score');\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  scoreFuzziness = 0.8;\r\n\r\n  acceptMatchThreshold = 0.5;\r\n\r\n  module.exports.createUserCodeProblem = function(options) {\r\n    var config, id, kind, p, reporter, _ref3, _ref4, _ref5, _ref6;\r\n    if (options == null) {\r\n      options = {};\r\n    }\r\n    if (options.aether == null) {\r\n      options.aether = this;\r\n    }\r\n    if (options.type === 'transpile' && options.error) {\r\n      extractTranspileErrorDetails(options);\r\n    }\r\n    if (options.type === 'runtime') {\r\n      extractRuntimeErrorDetails(options);\r\n    }\r\n    reporter = options.reporter || 'unknown';\r\n    kind = options.kind || 'Unknown';\r\n    id = reporter + '_' + kind;\r\n    config = ((_ref3 = options.aether) != null ? (_ref4 = _ref3.options) != null ? (_ref5 = _ref4.problems) != null ? _ref5[id] : void 0 : void 0 : void 0) || {};\r\n    p = {\r\n      isUserCodeProblem: true\r\n    };\r\n    p.id = id;\r\n    p.level = config.level || options.level || 'error';\r\n    p.type = options.type || 'generic';\r\n    p.message = config.message || options.message || (\"Unknown \" + p.type + \" \" + p.level);\r\n    p.hint = config.hint || options.hint || '';\r\n    p.range = options.range;\r\n    p.userInfo = (_ref6 = options.userInfo) != null ? _ref6 : {};\r\n    return p;\r\n  };\r\n\r\n  extractTranspileErrorDetails = function(options) {\r\n    var code, codePrefix, col, columnOffset, doubleVar, end, endCol, error, errorContext, languageID, line, lineOffset, originalLines, range, rng, row, start, startCol, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;\r\n    code = options.code || '';\r\n    codePrefix = options.codePrefix || '';\r\n    error = options.error;\r\n    options.message = error.message;\r\n    errorContext = options.problemContext || ((_ref3 = options.aether) != null ? (_ref4 = _ref3.options) != null ? _ref4.problemContext : void 0 : void 0);\r\n    languageID = (_ref5 = options.aether) != null ? (_ref6 = _ref5.options) != null ? _ref6.language : void 0 : void 0;\r\n    originalLines = code.slice(codePrefix.length).split('\\n');\r\n    lineOffset = codePrefix.split('\\n').length - 1;\r\n    switch (options.reporter) {\r\n      case 'jshint':\r\n        if (options.message == null) {\r\n          options.message = error.reason;\r\n        }\r\n        if (options.kind == null) {\r\n          options.kind = error.code;\r\n        }\r\n        if (doubleVar = options.message.match(/'([\\w]+)' is already defined\\./)) {\r\n          options.hint = \"Don't use the 'var' keyword for '\" + doubleVar[1] + \"' the second time.\";\r\n        }\r\n        if (!options.level) {\r\n          options.level = {\r\n            E: 'error',\r\n            W: 'warning',\r\n            I: 'info'\r\n          }[error.code[0]];\r\n        }\r\n        line = error.line - codePrefix.split('\\n').length;\r\n        if (line >= 0) {\r\n          if ((_ref7 = error.evidence) != null ? _ref7.length : void 0) {\r\n            startCol = originalLines[line].indexOf(error.evidence);\r\n            endCol = startCol + error.evidence.length;\r\n          } else {\r\n            _ref8 = [0, originalLines[line].length - 1], startCol = _ref8[0], endCol = _ref8[1];\r\n          }\r\n          options.range = [ranges.rowColToPos(line, startCol, code, codePrefix), ranges.rowColToPos(line, endCol, code, codePrefix)];\r\n        } else {\r\n          options.range = [ranges.offsetToPos(0, code, codePrefix), ranges.offsetToPos(code.length - 1, code, codePrefix)];\r\n        }\r\n        break;\r\n      case 'esprima':\r\n        options.range = [ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column - 1, code, codePrefix), ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column, code, codePrefix)];\r\n        break;\r\n      case 'acorn_loose':\r\n        null;\r\n        break;\r\n      case 'csredux':\r\n        options.range = [ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column - 1, code, codePrefix), ranges.rowColToPos(error.lineNumber - 1 - lineOffset, error.column, code, codePrefix)];\r\n        break;\r\n      case 'aether':\r\n        null;\r\n        break;\r\n      case 'closer':\r\n        if (error.startOffset && error.endOffset) {\r\n          range = ranges.offsetsToRange(error.startOffset, error.endOffset, code);\r\n          options.range = [range.start, range.end];\r\n        }\r\n        break;\r\n      case 'lua2js':\r\n        if (options.message == null) {\r\n          options.message = error.message;\r\n        }\r\n        rng = ranges.offsetsToRange(error.offset, error.offset, code, '');\r\n        options.range = [rng.start, rng.end];\r\n        break;\r\n      case 'filbert':\r\n        if (error.loc) {\r\n          columnOffset = 0;\r\n          row = error.loc.line - lineOffset - 1;\r\n          col = error.loc.column - columnOffset;\r\n          start = ranges.rowColToPos(row, col, code, codePrefix);\r\n          end = ranges.rowColToPos(row, col + error.raisedAt - error.pos, code, codePrefix);\r\n          options.range = [start, end];\r\n        }\r\n        break;\r\n      case 'iota':\r\n        null;\r\n        break;\r\n      case 'cashew':\r\n        options.range = [ranges.offsetToPos(error.range[0], code, codePrefix), ranges.offsetToPos(error.range[1], code, codePrefix)];\r\n        options.hint = error.message;\r\n        break;\r\n      default:\r\n        console.warn(\"Unhandled UserCodeProblem reporter\", options.reporter);\r\n    }\r\n    options.hint = error.hint || getTranspileHint(options.message, errorContext, languageID, options.aether.raw, options.range, (_ref9 = options.aether.options) != null ? _ref9.simpleLoops : void 0);\r\n    return options;\r\n  };\r\n\r\n  getTranspileHint = function(msg, context, languageID, code, range, simpleLoops) {\r\n    var c, codeSnippet, firstQuoteIndex, hintCreator, index, lineStart, lineStartLow, nonAlphNumMatch, parens, prevIndex, quoteCharacter, _i, _len;\r\n    if (simpleLoops == null) {\r\n      simpleLoops = false;\r\n    }\r\n    if ((msg === \"Unterminated string constant\" || msg === \"Unclosed string.\") && (range != null)) {\r\n      codeSnippet = code.substring(range[0].ofs, range[1].ofs);\r\n      firstQuoteIndex = codeSnippet.search(/['\"]/);\r\n      if (firstQuoteIndex !== -1) {\r\n        quoteCharacter = codeSnippet[firstQuoteIndex];\r\n        codeSnippet = codeSnippet.slice(firstQuoteIndex + 1);\r\n        if (nonAlphNumMatch = codeSnippet.match(/[^\\w]/)) {\r\n          codeSnippet = codeSnippet.substring(0, nonAlphNumMatch.index);\r\n        }\r\n        return \"Missing a quotation mark. Try `\" + quoteCharacter + codeSnippet + quoteCharacter + \"`\";\r\n      }\r\n    } else if (msg === \"Unexpected indent\") {\r\n      if (range != null) {\r\n        index = range[0].ofs;\r\n        while (index > 0 && /\\s/.test(code[index])) {\r\n          index--;\r\n        }\r\n        if (index >= 3 && /else/.test(code.substring(index - 3, index + 1))) {\r\n          return \"You are missing a ':' after 'else'. Try `else:`\";\r\n        }\r\n      }\r\n      return \"Code needs to line up.\";\r\n    } else if (((msg.indexOf(\"Unexpected token\") >= 0) || (msg.indexOf(\"Unexpected identifier\") >= 0)) && (context != null)) {\r\n      codeSnippet = code.substring(range[0].ofs, range[1].ofs);\r\n      lineStart = code.substring(range[0].ofs - range[0].col, range[0].ofs);\r\n      lineStartLow = lineStart.toLowerCase();\r\n      hintCreator = new HintCreator(context, languageID);\r\n      if (lineStart.indexOf(hintCreator.thisValue) === 0 && lineStart.trim().length < lineStart.length) {\r\n        if (codeSnippet.indexOf(hintCreator.thisValue) === 0) {\r\n          return \"Delete extra `\" + hintCreator.thisValue + \"`\";\r\n        } else {\r\n          return hintCreator.getReferenceErrorHint(codeSnippet);\r\n        }\r\n      }\r\n      prevIndex = range[0].ofs - 1;\r\n      while (prevIndex >= 0 && /[\\t ]/.test(code[prevIndex])) {\r\n        prevIndex--;\r\n      }\r\n      if (prevIndex >= 0 && code[prevIndex] === ')') {\r\n        if (codeSnippet === ')') {\r\n          return \"Delete extra `)`\";\r\n        } else if (!/^\\s*$/.test(codeSnippet)) {\r\n          return \"Put each command on a separate line\";\r\n        }\r\n      }\r\n      parens = 0;\r\n      for (_i = 0, _len = lineStart.length; _i < _len; _i++) {\r\n        c = lineStart[_i];\r\n        parens += (c === '(' ? 1 : c === ')' ? -1 : 0);\r\n      }\r\n      if (parens !== 0) {\r\n        return \"Your parentheses must match.\";\r\n      }\r\n      if (simpleLoops && codeSnippet === ':' && lineStart !== lineStartLow && lineStartLow === 'loop') {\r\n        return \"Should be lowercase. Try `loop`\";\r\n      }\r\n      if (/^\\s*if /.test(lineStart)) {\r\n        if (codeSnippet === ':') {\r\n          return \"Your if statement is missing a test clause. Try `if True:`\";\r\n        } else if (/^\\s*$/.test(codeSnippet)) {\r\n          return \"You are missing a ':' after '\" + lineStart + \"'. Try `\" + lineStart + \":`\";\r\n        }\r\n      }\r\n      if (/Unexpected [token|identifier]/.test(msg)) {\r\n        return \"There is a problem with your code.\";\r\n      }\r\n    }\r\n  };\r\n\r\n  extractRuntimeErrorDetails = function(options) {\r\n    var error, lineNumber, _ref3;\r\n    if (error = options.error) {\r\n      if (options.kind == null) {\r\n        options.kind = error.name;\r\n      }\r\n      if (options.aether.options.useInterpreter) {\r\n        options.message = error.toString();\r\n      } else {\r\n        options.message = error.message || error.toString();\r\n      }\r\n      console.log(\"Extracting\", error);\r\n      options.hint = error.hint || getRuntimeHint(options);\r\n      if (options.level == null) {\r\n        options.level = error.level;\r\n      }\r\n      if (options.userInfo == null) {\r\n        options.userInfo = error.userInfo;\r\n      }\r\n    }\r\n    if (options.range == null) {\r\n      options.range = (_ref3 = options.aether) != null ? _ref3.lastStatementRange : void 0;\r\n    }\r\n    if (options.range != null) {\r\n      lineNumber = options.range[0].row + 1;\r\n      if (options.message.search(/^Line \\d+/) !== -1) {\r\n        return options.message = options.message.replace(/^Line \\d+/, function(match, n) {\r\n          return \"Line \" + lineNumber;\r\n        });\r\n      } else {\r\n        return options.message = \"Line \" + lineNumber + \": \" + options.message;\r\n      }\r\n    }\r\n  };\r\n\r\n  getRuntimeHint = function(options) {\r\n    var code, context, hint, hintCreator, index, languageID, simpleLoops, _ref3, _ref4, _ref5;\r\n    code = options.aether.raw || '';\r\n    context = options.problemContext || ((_ref3 = options.aether.options) != null ? _ref3.problemContext : void 0);\r\n    languageID = (_ref4 = options.aether.options) != null ? _ref4.language : void 0;\r\n    simpleLoops = (_ref5 = options.aether.options) != null ? _ref5.simpleLoops : void 0;\r\n    if (options.message === \"RangeError: Maximum call stack size exceeded\") {\r\n      return \"Did you call a function recursively?\";\r\n    }\r\n    if (simpleLoops && languageID === 'python' && /ReferenceError: loop is not defined/.test(options.message)) {\r\n      if (options.range != null) {\r\n        index = options.range[1].ofs;\r\n        while (index < code.length && /[^\\n:]/.test(code[index])) {\r\n          index++;\r\n        }\r\n        if (index >= code.length || code[index] === '\\n') {\r\n          hint = \"You are missing a ':' after 'loop'. Try `loop:`\";\r\n        }\r\n      } else {\r\n        hint = \"Are you missing a ':' after 'loop'? Try `loop:`\";\r\n      }\r\n      return hint;\r\n    }\r\n    if (context == null) {\r\n      return;\r\n    }\r\n    hintCreator = new HintCreator(context, languageID);\r\n    return hintCreator.getHint(code, options);\r\n  };\r\n\r\n  HintCreator = (function() {\r\n    function HintCreator(context, languageID) {\r\n      this.thisValue = (function() {\r\n        switch (languageID) {\r\n          case 'python':\r\n            return 'self';\r\n          case 'cofeescript':\r\n            return '@';\r\n          default:\r\n            return 'this';\r\n        }\r\n      })();\r\n      this.realThisValueAccess = (function() {\r\n        switch (languageID) {\r\n          case 'python':\r\n            return 'self.';\r\n          case 'cofeescript':\r\n            return '@';\r\n          default:\r\n            return 'this.';\r\n        }\r\n      })();\r\n      this.thisValueAccess = (function() {\r\n        switch (languageID) {\r\n          case 'python':\r\n            return 'hero.';\r\n          case 'cofeescript':\r\n            return 'hero.';\r\n          case 'lua':\r\n            return 'hero:';\r\n          default:\r\n            return 'hero.';\r\n        }\r\n      })();\r\n      this.newVariableTemplate = (function() {\r\n        switch (languageID) {\r\n          case 'javascript':\r\n            return _.template('var <%= name %> = ');\r\n          default:\r\n            return _.template('<%= name %> = ');\r\n        }\r\n      })();\r\n      this.methodRegex = (function() {\r\n        switch (languageID) {\r\n          case 'python':\r\n            return new RegExp(\"self\\\\.(\\\\w+)\\\\s*\\\\(\");\r\n          case 'cofeescript':\r\n            return new RegExp(\"@(\\\\w+)\\\\s*\\\\(\");\r\n          default:\r\n            return new RegExp(\"this\\\\.(\\\\w+)\\\\(\");\r\n        }\r\n      })();\r\n      this.context = context != null ? context : {};\r\n    }\r\n\r\n    HintCreator.prototype.getHint = function(code, _arg) {\r\n      var aether, ast, candidatesLow, codeSnippet, error, extra, hint, idx, line, message, missingMethodMatch, missingProperty, missingReference, newName, nullObjMatch, nullObjRegex, range, s, sm, target;\r\n      message = _arg.message, range = _arg.range, error = _arg.error, aether = _arg.aether;\r\n      if (this.context == null) {\r\n        return;\r\n      }\r\n      if (error.code === 'UndefinedVariable' && error.when === 'write' && aether.language.id === 'javascript') {\r\n        return \"Missing `var`. Use `var \" + error.ident + \" =` to make a new variable.\";\r\n      }\r\n      if (error.code === \"CallNonFunction\") {\r\n        ast = error.targetAst;\r\n        if (ast.type === \"MemberExpression\" && !ast.computed) {\r\n          extra = \"\";\r\n          target = ast.property.name;\r\n          if (error.candidates != null) {\r\n            candidatesLow = (function() {\r\n              var _i, _len, _ref3, _results;\r\n              _ref3 = error.candidates;\r\n              _results = [];\r\n              for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n                s = _ref3[_i];\r\n                _results.push(s.toLowerCase());\r\n              }\r\n              return _results;\r\n            })();\r\n            idx = candidatesLow.indexOf(target.toLowerCase());\r\n            if (idx !== -1) {\r\n              newName = error.targetName.replace(target, error.candidates[idx]);\r\n              return \"Look out for capitalization: `\" + error.targetName + \"` should be `\" + newName + \"`.\";\r\n            }\r\n            sm = this.getScoreMatch(target, [\r\n              {\r\n                candidates: error.candidates,\r\n                msgFormatFn: function(match) {\r\n                  return match;\r\n                }\r\n              }\r\n            ]);\r\n            if (sm != null) {\r\n              newName = error.targetName.replace(target, sm);\r\n              return \"Look out for spelling issues: did you mean `\" + newName + \"` instead of `\" + error.targetName + \"`?\";\r\n            }\r\n          }\r\n          return \"`\" + ast.object.srcName + \"` has no method `\" + ast.property.name + \"`.\";\r\n        }\r\n      }\r\n      if ((missingMethodMatch = message.match(/has no method '(.*?)'/)) || message.match(/is not a function/) || message.match(/has no method/)) {\r\n        if (missingMethodMatch) {\r\n          target = missingMethodMatch[1];\r\n        } else if (range != null) {\r\n          codeSnippet = code.substring(range[0].ofs, range[1].ofs);\r\n          missingMethodMatch = this.methodRegex.exec(codeSnippet);\r\n          if (missingMethodMatch != null) {\r\n            target = missingMethodMatch[1];\r\n          }\r\n        }\r\n        hint = target != null ? this.getNoFunctionHint(target) : void 0;\r\n      } else if (missingReference = message.match(/([^\\s]+) is not defined/)) {\r\n        hint = this.getReferenceErrorHint(missingReference[1]);\r\n      } else if (missingProperty = message.match(/Cannot (?:read|call) (?:property|method) '([\\w]+)' of (?:undefined|null)/)) {\r\n        hint = this.getReferenceErrorHint(missingProperty[1]);\r\n        if ((hint == null) && (range != null)) {\r\n          line = code.substring(range[0].ofs - range[0].col, code.indexOf('\\n', range[1].ofs));\r\n          nullObjRegex = new RegExp(\"(\\\\w+)\\\\.\" + missingProperty[1]);\r\n          if (nullObjMatch = nullObjRegex.exec(line)) {\r\n            hint = \"'\" + nullObjMatch[1] + \"' was null. Use a null check before accessing properties. Try `if \" + nullObjMatch[1] + \":`\";\r\n          }\r\n        }\r\n      }\r\n      return hint;\r\n    };\r\n\r\n    HintCreator.prototype.getNoFunctionHint = function(target) {\r\n      var hint,\r\n        _this = this;\r\n      hint = this.getNoCaseMatch(target, this.context.thisMethods, function(match) {\r\n        return \"Uppercase or lowercase problem. Try `\" + _this.thisValueAccess + match + \"()`\";\r\n      });\r\n      if (hint == null) {\r\n        hint = this.getScoreMatch(target, [\r\n          {\r\n            candidates: this.context.thisMethods,\r\n            msgFormatFn: function(match) {\r\n              return \"Try `\" + _this.thisValueAccess + match + \"()`\";\r\n            }\r\n          }\r\n        ]);\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getExactMatch(target, this.context.commonThisMethods, function(match) {\r\n          return \"You do not have an item equipped with the \" + match + \" skill.\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getNoCaseMatch(target, this.context.commonThisMethods, function(match) {\r\n          return \"Did you mean \" + match + \"? You do not have an item equipped with that skill.\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getScoreMatch(target, [\r\n          {\r\n            candidates: this.context.commonThisMethods,\r\n            msgFormatFn: function(match) {\r\n              return \"Did you mean \" + match + \"? You do not have an item equipped with that skill.\";\r\n            }\r\n          }\r\n        ]);\r\n      }\r\n      if (hint == null) {\r\n        hint = \"You don't have a `\" + target + \"` method.\";\r\n      }\r\n      return hint;\r\n    };\r\n\r\n    HintCreator.prototype.getReferenceErrorHint = function(target) {\r\n      var hint, method, thisPrefixed, _ref3,\r\n        _this = this;\r\n      hint = this.getExactMatch(target, this.context.stringReferences, function(match) {\r\n        return \"Missing quotes. Try `\\\"\" + match + \"\\\"`\";\r\n      });\r\n      if (hint == null) {\r\n        hint = this.getExactMatch(target, this.context.thisMethods, function(match) {\r\n          return \"Try `\" + _this.thisValueAccess + match + \"()`\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getExactMatch(target, this.context.thisProperties, function(match) {\r\n          return \"Try `\" + _this.thisValueAccess + match + \"`\";\r\n        });\r\n      }\r\n      if ((hint == null) && target.toLowerCase() === this.thisValue.toLowerCase()) {\r\n        hint = \"Uppercase or lowercase problem. Try `\" + this.thisValue + \"`\";\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getNoCaseMatch(target, this.context.stringReferences, function(match) {\r\n          return \"Missing quotes.  Try `\\\"\" + match + \"\\\"`\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getNoCaseMatch(target, this.context.thisMethods, function(match) {\r\n          return \"Try `\" + _this.thisValueAccess + match + \"()`\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getNoCaseMatch(target, this.context.thisProperties, function(match) {\r\n          return \"Try `\" + _this.thisValueAccess + match + \"`\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getScoreMatch(target, [\r\n          {\r\n            candidates: [this.thisValue],\r\n            msgFormatFn: function(match) {\r\n              return \"Try `\" + match + \"`\";\r\n            }\r\n          }, {\r\n            candidates: this.context.stringReferences,\r\n            msgFormatFn: function(match) {\r\n              return \"Missing quotes. Try `\\\"\" + match + \"\\\"`\";\r\n            }\r\n          }, {\r\n            candidates: this.context.thisMethods,\r\n            msgFormatFn: function(match) {\r\n              return \"Try `\" + _this.thisValueAccess + match + \"()`\";\r\n            }\r\n          }, {\r\n            candidates: this.context.thisProperties,\r\n            msgFormatFn: function(match) {\r\n              return \"Try `\" + _this.thisValueAccess + match + \"`\";\r\n            }\r\n          }\r\n        ]);\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getExactMatch(target, this.context.commonThisMethods, function(match) {\r\n          return \"You do not have an item equipped with the \" + match + \" skill.\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getNoCaseMatch(target, this.context.commonThisMethods, function(match) {\r\n          return \"Did you mean \" + match + \"? You do not have an item equipped with that skill.\";\r\n        });\r\n      }\r\n      if (hint == null) {\r\n        hint = this.getScoreMatch(target, [\r\n          {\r\n            candidates: this.context.commonThisMethods,\r\n            msgFormatFn: function(match) {\r\n              return \"Did you mean \" + match + \"? You do not have an item equipped with that skill.\";\r\n            }\r\n          }\r\n        ]);\r\n      }\r\n      if (!hint && target.toLowerCase().indexOf('enemy') > -1 && _.contains(this.context.thisMethods, 'findNearestEnemy')) {\r\n        hint = \"There is no `\" + target + \"`. Use `\" + (this.newVariableTemplate({\r\n          name: target\r\n        })) + this.thisValueAccess + \"findNearestEnemy()` first.\";\r\n      }\r\n      if ((hint == null) && (((_ref3 = this.context) != null ? _ref3.thisMethods : void 0) != null)) {\r\n        thisPrefixed = (function() {\r\n          var _i, _len, _ref4, _results;\r\n          _ref4 = this.context.thisMethods;\r\n          _results = [];\r\n          for (_i = 0, _len = _ref4.length; _i < _len; _i++) {\r\n            method = _ref4[_i];\r\n            _results.push(this.thisValueAccess + method);\r\n          }\r\n          return _results;\r\n        }).call(this);\r\n        hint = this.getScoreMatch(target, [\r\n          {\r\n            candidates: thisPrefixed,\r\n            msgFormatFn: function(match) {\r\n              return \"Try `\" + match + \"()`\";\r\n            }\r\n          }\r\n        ]);\r\n      }\r\n      return hint;\r\n    };\r\n\r\n    HintCreator.prototype.getExactMatch = function(target, candidates, msgFormatFn) {\r\n      if (candidates == null) {\r\n        return;\r\n      }\r\n      if (__indexOf.call(candidates, target) >= 0) {\r\n        return msgFormatFn(target);\r\n      }\r\n    };\r\n\r\n    HintCreator.prototype.getNoCaseMatch = function(target, candidates, msgFormatFn) {\r\n      var candidatesLow, index, s;\r\n      if (candidates == null) {\r\n        return;\r\n      }\r\n      candidatesLow = (function() {\r\n        var _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = candidates.length; _i < _len; _i++) {\r\n          s = candidates[_i];\r\n          _results.push(s.toLowerCase());\r\n        }\r\n        return _results;\r\n      })();\r\n      if ((index = candidatesLow.indexOf(target.toLowerCase())) >= 0) {\r\n        return msgFormatFn(candidates[index]);\r\n      }\r\n    };\r\n\r\n    HintCreator.prototype.getScoreMatch = function(target, candidatesList) {\r\n      var closestMatch, closestScore, match, matchScore, msg, set, _i, _j, _len, _len1, _ref3, _ref4, _ref5;\r\n      if (string_score == null) {\r\n        return;\r\n      }\r\n      _ref3 = ['', 0, ''], closestMatch = _ref3[0], closestScore = _ref3[1], msg = _ref3[2];\r\n      for (_i = 0, _len = candidatesList.length; _i < _len; _i++) {\r\n        set = candidatesList[_i];\r\n        if (set.candidates != null) {\r\n          _ref4 = set.candidates;\r\n          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {\r\n            match = _ref4[_j];\r\n            matchScore = match.score(target, scoreFuzziness);\r\n            if (matchScore > closestScore) {\r\n              _ref5 = [match, matchScore, set.msgFormatFn(match)], closestMatch = _ref5[0], closestScore = _ref5[1], msg = _ref5[2];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (closestScore >= acceptMatchThreshold) {\r\n        return msg;\r\n      }\r\n    };\r\n\r\n    return HintCreator;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./ranges\":15,\"lodash\":41,\"string_score\":45}],14:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var addGlobal, addedGlobals, builtinClones, builtinNames, builtinObjectNames, builtinReal, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, globalScope, name, problems, replaceBuiltin, _, _i, _len, _ref, _ref1, _ref2;\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  problems = require('./problems');\r\n\r\n  module.exports.builtinObjectNames = builtinObjectNames = ['Object', 'Function', 'Array', 'String', 'Boolean', 'Number', 'Date', 'RegExp', 'Math', 'JSON', 'Error', 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError'];\r\n\r\n  module.exports.builtinNames = builtinNames = builtinObjectNames.concat(['NaN', 'Infinity', 'undefined', 'parseInt', 'parseFloat', 'isNaN', 'isFinite', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent']);\r\n\r\n  getOwnPropertyNames = Object.getOwnPropertyNames;\r\n\r\n  getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n\r\n  defineProperty = Object.defineProperty.bind(Object);\r\n\r\n  globalScope = (function() {\r\n    return this;\r\n  })();\r\n\r\n  builtinClones = [];\r\n\r\n  builtinReal = [];\r\n\r\n  module.exports.addedGlobals = addedGlobals = {};\r\n\r\n  module.exports.addGlobal = addGlobal = function(name, value) {\r\n    if (addedGlobals[name] != null) {\r\n      return;\r\n    }\r\n    if (value == null) {\r\n      value = globalScope[name];\r\n    }\r\n    return addedGlobals[name] = value;\r\n  };\r\n\r\n  for (_i = 0, _len = builtinObjectNames.length; _i < _len; _i++) {\r\n    name = builtinObjectNames[_i];\r\n    addGlobal(name);\r\n  }\r\n\r\n  module.exports.replaceBuiltin = replaceBuiltin = function(name, value) {};\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./problems\":13,\"lodash\":41}],15:[function(require,module,exports){\r\n(function() {\r\n  var buildRowOffsets, lastRowOffsets, lastRowOffsetsPrefix, lastRowOffsetsSource, locToPos, locsToRange, offsetToPos, offsetToRow, offsetsToRange, rowColToPos, rowColsToRange, stringifyPos, stringifyRange;\r\n\r\n  module.exports.offsetToPos = offsetToPos = function(offset, source, prefix) {\r\n    var col, row, rowOffsets;\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    rowOffsets = buildRowOffsets(source, prefix);\r\n    offset -= prefix.length;\r\n    row = offsetToRow(offset, rowOffsets);\r\n    col = offset - rowOffsets[row];\r\n    return {\r\n      ofs: offset,\r\n      row: row,\r\n      col: col\r\n    };\r\n  };\r\n\r\n  module.exports.offsetsToRange = offsetsToRange = function(start, end, source, prefix) {\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    return {\r\n      start: offsetToPos(start, source, prefix),\r\n      end: offsetToPos(end, source, prefix)\r\n    };\r\n  };\r\n\r\n  module.exports.rowColToPos = rowColToPos = function(row, col, source, prefix) {\r\n    var offset, rowOffsets;\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    rowOffsets = buildRowOffsets(source, prefix);\r\n    offset = rowOffsets[row] + col;\r\n    return {\r\n      ofs: offset,\r\n      row: row,\r\n      col: col\r\n    };\r\n  };\r\n\r\n  module.exports.rowColsToRange = rowColsToRange = function(start, end, source, prefix) {\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    return {\r\n      start: rowColToPos(start.row, start.col, source, prefix),\r\n      end: rowColToPos(end.row, end.col, source, prefix)\r\n    };\r\n  };\r\n\r\n  module.exports.locToPos = locToPos = function(loc, source, prefix) {\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    return rowColToPos(loc.line, loc.column, source, prefix);\r\n  };\r\n\r\n  module.exports.locsToRange = locsToRange = function(start, end, source, prefix) {\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    return {\r\n      start: locToPos(start, source, prefix),\r\n      end: locToPos(end, source, prefix)\r\n    };\r\n  };\r\n\r\n  module.exports.stringifyPos = stringifyPos = function(pos) {\r\n    return \"{ofs: \" + pos.ofs + \", row: \" + pos.row + \", col: \" + pos.col + \"}\";\r\n  };\r\n\r\n  module.exports.stringifyRange = stringifyRange = function(start, end) {\r\n    return \"[\" + (stringifyPos(start)) + \", \" + (stringifyPos(end)) + \"]\";\r\n  };\r\n\r\n  lastRowOffsets = null;\r\n\r\n  lastRowOffsetsSource = null;\r\n\r\n  lastRowOffsetsPrefix = null;\r\n\r\n  buildRowOffsets = function(source, prefix) {\r\n    var c, offset, rowOffsets, _i, _len, _ref;\r\n    if (prefix == null) {\r\n      prefix = '';\r\n    }\r\n    if (source === lastRowOffsetsSource && prefix === lastRowOffsetsPrefix) {\r\n      return lastRowOffsets;\r\n    }\r\n    rowOffsets = [0];\r\n    _ref = source.substr(prefix.length);\r\n    for (offset = _i = 0, _len = _ref.length; _i < _len; offset = ++_i) {\r\n      c = _ref[offset];\r\n      if (c === '\\n') {\r\n        rowOffsets.push(offset + 1);\r\n      }\r\n    }\r\n    lastRowOffsets = rowOffsets;\r\n    lastRowOffsetsSource = source;\r\n    lastRowOffsetsPrefix = prefix;\r\n    return rowOffsets;\r\n  };\r\n\r\n  offsetToRow = function(offset, rowOffsets) {\r\n    var alen, hi, lo, mid;\r\n    alen = rowOffsets.length;\r\n    if (offset <= 0) {\r\n      return 0;\r\n    }\r\n    if (offset >= rowOffsets[alen - 1]) {\r\n      return alen - 1;\r\n    }\r\n    lo = 0;\r\n    hi = alen - 1;\r\n    while (lo < hi) {\r\n      mid = ~~((hi + lo) / 2);\r\n      if (offset >= rowOffsets[mid] && offset < rowOffsets[mid + 1]) {\r\n        return mid;\r\n      }\r\n      if (offset < rowOffsets[mid]) {\r\n        hi = mid;\r\n      } else {\r\n        lo = mid;\r\n      }\r\n    }\r\n    throw new Error(\"Bug in offsetToRow()\");\r\n  };\r\n\r\n}).call(this);\r\n\r\n},{}],16:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var S, getFunctionNestingLevel, getImmediateParentOfType, getParents, getParentsOfTypes, makeCheckIncompleteMembers, makeCheckThisKeywords, makeGatherNodeRanges, ranges, statements, _, _ref, _ref1, _ref2,\r\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  S = require('esprima').Syntax;\r\n\r\n  ranges = require('./ranges');\r\n\r\n  statements = [S.EmptyStatement, S.ExpressionStatement, S.BreakStatement, S.ContinueStatement, S.DebuggerStatement, S.DoWhileStatement, S.ForStatement, S.FunctionDeclaration, S.ClassDeclaration, S.IfStatement, S.ReturnStatement, S.SwitchStatement, S.ThrowStatement, S.TryStatement, S.VariableStatement, S.WhileStatement, S.WithStatement, S.VariableDeclaration];\r\n\r\n  getParents = function(node) {\r\n    var parents;\r\n    parents = [];\r\n    while (node.parent) {\r\n      parents.push(node = node.parent);\r\n    }\r\n    return parents;\r\n  };\r\n\r\n  getParentsOfTypes = function(node, types) {\r\n    return _.filter(getParents(node), function(elem) {\r\n      var _ref3;\r\n      return _ref3 = elem.type, __indexOf.call(types, _ref3) >= 0;\r\n    });\r\n  };\r\n\r\n  getFunctionNestingLevel = function(node) {\r\n    return getParentsOfTypes(node, [S.FunctionExpression]).length;\r\n  };\r\n\r\n  getImmediateParentOfType = function(node, type) {\r\n    while (node) {\r\n      if (node.type === type) {\r\n        return node;\r\n      }\r\n      node = node.parent;\r\n    }\r\n  };\r\n\r\n  module.exports.makeGatherNodeRanges = makeGatherNodeRanges = function(nodeRanges, code, codePrefix) {\r\n    return function(node) {\r\n      if (!node.range) {\r\n        return;\r\n      }\r\n      node.originalRange = ranges.offsetsToRange(node.range[0], node.range[1], code, codePrefix);\r\n      if (node.source) {\r\n        node.originalSource = node.source();\r\n      } else {\r\n\r\n      }\r\n      return nodeRanges.push(node);\r\n    };\r\n  };\r\n\r\n  module.exports.makeCheckThisKeywords = makeCheckThisKeywords = function(globals, varNames, language, problemContext) {\r\n    return function(node) {\r\n      var hint, message, p, param, problem, range, v, _i, _j, _k, _len, _len1, _len2, _ref3, _ref4, _ref5, _ref6, _results;\r\n      if (node.type === S.VariableDeclarator) {\r\n        return varNames[node.id.name] = true;\r\n      } else if (node.type === S.AssignmentExpression) {\r\n        return varNames[node.left.name] = true;\r\n      } else if (node.type === S.FunctionDeclaration || node.type === S.FunctionExpression) {\r\n        if (node.id != null) {\r\n          varNames[node.id.name] = true;\r\n        }\r\n        _ref3 = node.params;\r\n        _results = [];\r\n        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\r\n          param = _ref3[_i];\r\n          _results.push(varNames[param.name] = true);\r\n        }\r\n        return _results;\r\n      } else if (node.type === S.CallExpression) {\r\n        v = node;\r\n        while ((_ref4 = v.type) === S.CallExpression || _ref4 === S.MemberExpression) {\r\n          v = v.object != null ? v.object : v.callee;\r\n        }\r\n        v = v.name;\r\n        if (v && !varNames[v] && !(__indexOf.call(globals, v) >= 0)) {\r\n          if (!problemContext) {\r\n            return;\r\n          }\r\n          _ref5 = getParentsOfTypes(node, [S.FunctionDeclaration, S.FunctionExpression, S.VariableDeclarator, S.AssignmentExpression]);\r\n          for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {\r\n            p = _ref5[_j];\r\n            if (p.id != null) {\r\n              varNames[p.id.name] = true;\r\n            }\r\n            if (p.left != null) {\r\n              varNames[p.left.name] = true;\r\n            }\r\n            if (p.params != null) {\r\n              _ref6 = p.params;\r\n              for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {\r\n                param = _ref6[_k];\r\n                varNames[param.name] = true;\r\n              }\r\n            }\r\n            if (varNames[v] === true) {\r\n              return;\r\n            }\r\n          }\r\n          if (/\\$$/.test(v)) {\r\n            return;\r\n          }\r\n          if (((problemContext != null ? problemContext.thisMethods : void 0) != null) && __indexOf.call(problemContext.thisMethods, v) < 0) {\r\n            return;\r\n          }\r\n          message = \"Missing `hero` keyword; should be `\" + language.heroValueAccess + v + \"`.\";\r\n          hint = \"There is no function `\" + v + \"`, but `hero` has a method `\" + v + \"`.\";\r\n          if (node.originalRange) {\r\n            range = language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);\r\n          }\r\n          problem = this.createUserCodeProblem({\r\n            type: 'transpile',\r\n            reporter: 'aether',\r\n            kind: 'MissingThis',\r\n            message: message,\r\n            hint: hint,\r\n            range: range\r\n          });\r\n          return this.addProblem(problem);\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  module.exports.makeCheckIncompleteMembers = makeCheckIncompleteMembers = function(language, problemContext) {\r\n    return function(node) {\r\n      var exp, hint, kind, m, problem, range, _ref3, _ref4;\r\n      if (node.type === 'ExpressionStatement') {\r\n        exp = node.expression;\r\n        if (exp.type === 'MemberExpression') {\r\n          if (exp.property.name === \"IncompleteThisReference\") {\r\n            kind = 'IncompleteThis';\r\n            m = \"this.what? (Check available spells below.)\";\r\n            return hint = '';\r\n          } else if (exp.object.source() === language.thisValue) {\r\n            kind = 'NoEffect';\r\n            m = \"\" + (exp.source()) + \" has no effect.\";\r\n            if (((problemContext != null ? problemContext.thisMethods : void 0) != null) && (_ref3 = exp.property.name, __indexOf.call(problemContext.thisMethods, _ref3) >= 0)) {\r\n              m += \" It needs parentheses: \" + (exp.source()) + \"()\";\r\n            } else if (((problemContext != null ? problemContext.commonThisMethods : void 0) != null) && (_ref4 = exp.property.name, __indexOf.call(problemContext.commonThisMethods, _ref4) >= 0)) {\r\n              m = \"\" + (exp.source()) + \" is not currently available.\";\r\n            } else {\r\n              hint = \"Is it a method? Those need parentheses: \" + (exp.source()) + \"()\";\r\n            }\r\n            if (node.originalRange) {\r\n              range = language.removeWrappedIndent([node.originalRange.start, node.originalRange.end]);\r\n            }\r\n            problem = this.createUserCodeProblem({\r\n              type: 'transpile',\r\n              reporter: 'aether',\r\n              message: m,\r\n              kind: kind,\r\n              hint: hint,\r\n              range: range\r\n            });\r\n            return this.addProblem(problem);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./ranges\":15,\"esprima\":39,\"lodash\":41}],17:[function(require,module,exports){\r\n(function (global){\r\n(function() {\r\n  var insertHelpers, morphAST, walkAST, walkASTCorrect, _, _ref, _ref1, _ref2;\r\n\r\n  _ = (_ref = (_ref1 = (_ref2 = typeof window !== \"undefined\" && window !== null ? window._ : void 0) != null ? _ref2 : typeof self !== \"undefined\" && self !== null ? self._ : void 0) != null ? _ref1 : typeof global !== \"undefined\" && global !== null ? global._ : void 0) != null ? _ref : require('lodash');\r\n\r\n  module.exports.walkAST = walkAST = function(node, fn) {\r\n    var child, grandchild, key, _i, _len, _results;\r\n    _results = [];\r\n    for (key in node) {\r\n      child = node[key];\r\n      if (_.isArray(child)) {\r\n        for (_i = 0, _len = child.length; _i < _len; _i++) {\r\n          grandchild = child[_i];\r\n          if (_.isString(grandchild != null ? grandchild.type : void 0)) {\r\n            walkAST(grandchild, fn);\r\n          }\r\n        }\r\n      } else if (_.isString(child != null ? child.type : void 0)) {\r\n        walkAST(child, fn);\r\n      }\r\n      _results.push(fn(child));\r\n    }\r\n    return _results;\r\n  };\r\n\r\n  module.exports.walkASTCorrect = walkASTCorrect = function(node, fn) {\r\n    var child, grandchild, key, _i, _len;\r\n    for (key in node) {\r\n      child = node[key];\r\n      if (_.isArray(child)) {\r\n        for (_i = 0, _len = child.length; _i < _len; _i++) {\r\n          grandchild = child[_i];\r\n          if (_.isString(grandchild != null ? grandchild.type : void 0)) {\r\n            walkASTCorrect(grandchild, fn);\r\n          }\r\n        }\r\n      } else if (_.isString(child != null ? child.type : void 0)) {\r\n        walkASTCorrect(child, fn);\r\n      }\r\n    }\r\n    return fn(node);\r\n  };\r\n\r\n  module.exports.morphAST = morphAST = function(source, transforms, parseFn, aether) {\r\n    var ast, chunks, morphWalk;\r\n    chunks = source.split('');\r\n    ast = parseFn(source, aether);\r\n    morphWalk = function(node, parent) {\r\n      var child, grandchild, key, transform, _i, _j, _len, _len1, _results;\r\n      insertHelpers(node, parent, chunks);\r\n      for (key in node) {\r\n        child = node[key];\r\n        if (key === 'parent' || key === 'leadingComments') {\r\n          continue;\r\n        }\r\n        if (_.isArray(child)) {\r\n          for (_i = 0, _len = child.length; _i < _len; _i++) {\r\n            grandchild = child[_i];\r\n            if (_.isString(grandchild != null ? grandchild.type : void 0)) {\r\n              morphWalk(grandchild, node);\r\n            }\r\n          }\r\n        } else if (_.isString(child != null ? child.type : void 0)) {\r\n          morphWalk(child, node);\r\n        }\r\n      }\r\n      _results = [];\r\n      for (_j = 0, _len1 = transforms.length; _j < _len1; _j++) {\r\n        transform = transforms[_j];\r\n        _results.push(transform(node, aether));\r\n      }\r\n      return _results;\r\n    };\r\n    morphWalk(ast, void 0);\r\n    return chunks.join('');\r\n  };\r\n\r\n  insertHelpers = function(node, parent, chunks) {\r\n    var update;\r\n    if (!node.range) {\r\n      return;\r\n    }\r\n    node.parent = parent;\r\n    node.source = function() {\r\n      return chunks.slice(node.range[0], node.range[1]).join('');\r\n    };\r\n    update = function(s) {\r\n      var i, _i, _ref3, _ref4, _results;\r\n      chunks[node.range[0]] = s;\r\n      _results = [];\r\n      for (i = _i = _ref3 = node.range[0] + 1, _ref4 = node.range[1]; _ref3 <= _ref4 ? _i < _ref4 : _i > _ref4; i = _ref3 <= _ref4 ? ++_i : --_i) {\r\n        _results.push(chunks[i] = '');\r\n      }\r\n      return _results;\r\n    };\r\n    if (_.isObject(node.update)) {\r\n      _.extend(update, node.update);\r\n    }\r\n    return node.update = update;\r\n  };\r\n\r\n}).call(this);\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"lodash\":41}],18:[function(require,module,exports){\r\n(function() {\r\n  var tv4;\r\n\r\n  tv4 = require('tv4').tv4;\r\n\r\n  module.exports = function(options) {\r\n    return tv4.validateMultiple(options, {\r\n      \"type\": \"object\",\r\n      additionalProperties: false,\r\n      properties: {\r\n        thisValue: {\r\n          required: false\r\n        },\r\n        globals: {\r\n          type: 'array'\r\n        },\r\n        functionName: {\r\n          type: 'string'\r\n        },\r\n        functionParameters: {\r\n          type: ['array', 'undefined']\r\n        },\r\n        yieldAutomatically: {\r\n          type: 'boolean'\r\n        },\r\n        yieldConditionally: {\r\n          type: 'boolean'\r\n        },\r\n        executionCosts: {\r\n          type: 'object'\r\n        },\r\n        executionLimit: {\r\n          type: 'integer',\r\n          minimum: 0,\r\n          description: 'If given and non-zero, user code will throw execution exceeded errors after using too many statements.'\r\n        },\r\n        language: {\r\n          type: 'string',\r\n          description: \"Input language\",\r\n          minLength: 1,\r\n          'enum': ['javascript', 'coffeescript', 'python', 'lua', 'java', 'html']\r\n        },\r\n        languageVersion: {\r\n          type: ['string', 'null', 'undefined']\r\n        },\r\n        problems: {\r\n          type: ['object', 'undefined']\r\n        },\r\n        problemContext: {\r\n          type: ['object', 'null', 'undefined']\r\n        },\r\n        includeFlow: {\r\n          type: 'boolean',\r\n          \"default\": true,\r\n          description: \"Whether to record control flow and variable values as user code executes.\"\r\n        },\r\n        noSerializationInFlow: {\r\n          type: 'boolean',\r\n          \"default\": false,\r\n          description: \"Whether to skip serializing variable values when recording variables in flow.\"\r\n        },\r\n        noVariablesInFlow: {\r\n          type: 'boolean',\r\n          \"default\": false,\r\n          description: \"Whether to skip capturing variable values at all when instrumenting flow.\"\r\n        },\r\n        skipDuplicateUserInfoInFlow: {\r\n          type: 'boolean',\r\n          \"default\": false,\r\n          description: \"Whether to skip recording calls with the same userInfo as the previous call when instrumenting flow.\"\r\n        },\r\n        includeMetrics: {\r\n          type: 'boolean',\r\n          \"default\": true\r\n        },\r\n        includeStyle: {\r\n          type: 'boolean',\r\n          \"default\": true\r\n        },\r\n        protectAPI: {\r\n          type: ['boolean', 'null', 'undefined'],\r\n          \"default\": false\r\n        },\r\n        simpleLoops: {\r\n          type: 'boolean',\r\n          \"default\": false,\r\n          description: \"Whether simple loops will be supported, per language.  E.g. 'loop()' will be transpiled as 'while(true)'.\"\r\n        },\r\n        protectBuiltins: {\r\n          type: 'boolean',\r\n          \"default\": true,\r\n          description: 'Whether builtins will be protected and restored for enhanced security.'\r\n        },\r\n        whileTrueAutoYield: {\r\n          type: 'boolean',\r\n          \"default\": false,\r\n          description: \"Make while True loops automatically yield if no other yields\"\r\n        },\r\n        useInterpreter: {\r\n          type: ['boolean', 'null', 'undefined'],\r\n          \"default\": true\r\n        },\r\n        debug: {\r\n          type: ['boolean'],\r\n          \"default\": false\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n}).call(this);\r\n\r\n},{\"tv4\":46}],19:[function(require,module,exports){\r\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\r\n//\r\n// Acorn was written by Marijn Haverbeke and released under an MIT\r\n// license. The Unicode regexps (for identifiers and whitespace) were\r\n// taken from [Esprima](http://esprima.org) by Ariya Hidayat.\r\n//\r\n// Git repositories for Acorn are available at\r\n//\r\n//     http://marijnhaverbeke.nl/git/acorn\r\n//     https://github.com/marijnh/acorn.git\r\n//\r\n// Please use the [github bug tracker][ghbt] to report issues.\r\n//\r\n// [ghbt]: https://github.com/marijnh/acorn/issues\r\n//\r\n// This file defines the main parser interface. The library also comes\r\n// with a [error-tolerant parser][dammit] and an\r\n// [abstract syntax tree walker][walk], defined in other files.\r\n//\r\n// [dammit]: acorn_loose.js\r\n// [walk]: util/walk.js\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports); // CommonJS\r\n  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod); // AMD\r\n  mod(this.acorn || (this.acorn = {})); // Plain browser env\r\n})(function(exports) {\r\n  \"use strict\";\r\n\r\n  exports.version = \"0.3.1\";\r\n\r\n  // The main exported interface (under `self.acorn` when in the\r\n  // browser) is a `parse` function that takes a code string and\r\n  // returns an abstract syntax tree as specified by [Mozilla parser\r\n  // API][api], with the caveat that the SpiderMonkey-specific syntax\r\n  // (`let`, `yield`, inline XML, etc) is not recognized.\r\n  //\r\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\r\n\r\n  var options, input, inputLen, sourceFile;\r\n\r\n  exports.parse = function(inpt, opts) {\r\n    input = String(inpt); inputLen = input.length;\r\n    setOptions(opts);\r\n    initTokenState();\r\n    return parseTopLevel(options.program);\r\n  };\r\n\r\n  // A second optional argument can be given to further configure\r\n  // the parser process. These options are recognized:\r\n\r\n  var defaultOptions = exports.defaultOptions = {\r\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\r\n    // be either 3 or 5. This\r\n    // influences support for strict mode, the set of reserved words, and\r\n    // support for getters and setter.\r\n    ecmaVersion: 5,\r\n    // Turn on `strictSemicolons` to prevent the parser from doing\r\n    // automatic semicolon insertion.\r\n    strictSemicolons: false,\r\n    // When `allowTrailingCommas` is false, the parser will not allow\r\n    // trailing commas in array and object literals.\r\n    allowTrailingCommas: true,\r\n    // By default, reserved words are not enforced. Enable\r\n    // `forbidReserved` to enforce them.\r\n    forbidReserved: false,\r\n    // When `locations` is on, `loc` properties holding objects with\r\n    // `start` and `end` properties in `{line, column}` form (with\r\n    // line being 1-based and column 0-based) will be attached to the\r\n    // nodes.\r\n    locations: false,\r\n    // A function can be passed as `onComment` option, which will\r\n    // cause Acorn to call that function with `(block, text, start,\r\n    // end)` parameters whenever a comment is skipped. `block` is a\r\n    // boolean indicating whether this is a block (`/* */`) comment,\r\n    // `text` is the content of the comment, and `start` and `end` are\r\n    // character offsets that denote the start and end of the comment.\r\n    // When the `locations` option is on, two more parameters are\r\n    // passed, the full `{line, column}` locations of the start and\r\n    // end of the comments.\r\n    onComment: null,\r\n    // Nodes have their start and end characters offsets recorded in\r\n    // `start` and `end` properties (directly on the node, rather than\r\n    // the `loc` object, which holds line/column data. To also add a\r\n    // [semi-standardized][range] `range` property holding a `[start,\r\n    // end]` array with the same numbers, set the `ranges` option to\r\n    // `true`.\r\n    //\r\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\r\n    ranges: false,\r\n    // It is possible to parse multiple files into a single AST by\r\n    // passing the tree produced by parsing the first file as\r\n    // `program` option in subsequent parses. This will add the\r\n    // toplevel forms of the parsed file to the `Program` (top) node\r\n    // of an existing parse tree.\r\n    program: null,\r\n    // When `location` is on, you can pass this to record the source\r\n    // file in every node's `loc` object.\r\n    sourceFile: null\r\n  };\r\n\r\n  function setOptions(opts) {\r\n    options = opts || {};\r\n    for (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))\r\n      options[opt] = defaultOptions[opt];\r\n    sourceFile = options.sourceFile || null;\r\n  }\r\n\r\n  // The `getLineInfo` function is mostly useful when the\r\n  // `locations` option is off (for performance reasons) and you\r\n  // want to find the line/column position for a given character\r\n  // offset. `input` should be the code string that the offset refers\r\n  // into.\r\n\r\n  var getLineInfo = exports.getLineInfo = function(input, offset) {\r\n    for (var line = 1, cur = 0;;) {\r\n      lineBreak.lastIndex = cur;\r\n      var match = lineBreak.exec(input);\r\n      if (match && match.index < offset) {\r\n        ++line;\r\n        cur = match.index + match[0].length;\r\n      } else break;\r\n    }\r\n    return {line: line, column: offset - cur};\r\n  };\r\n\r\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\r\n  // The `tokenize` export provides an interface to the tokenizer.\r\n  // Because the tokenizer is optimized for being efficiently used by\r\n  // the Acorn parser itself, this interface is somewhat crude and not\r\n  // very modular. Performing another parse or call to `tokenize` will\r\n  // reset the internal state, and invalidate existing tokenizers.\r\n\r\n  exports.tokenize = function(inpt, opts) {\r\n    input = String(inpt); inputLen = input.length;\r\n    setOptions(opts);\r\n    initTokenState();\r\n\r\n    var t = {};\r\n    function getToken(forceRegexp) {\r\n      readToken(forceRegexp);\r\n      t.start = tokStart; t.end = tokEnd;\r\n      t.startLoc = tokStartLoc; t.endLoc = tokEndLoc;\r\n      t.type = tokType; t.value = tokVal;\r\n      return t;\r\n    }\r\n    getToken.jumpTo = function(pos, reAllowed) {\r\n      tokPos = pos;\r\n      if (options.locations) {\r\n        tokCurLine = tokLineStart = lineBreak.lastIndex = 0;\r\n        var match;\r\n        while ((match = lineBreak.exec(input)) && match.index < pos) {\r\n          ++tokCurLine;\r\n          tokLineStart = match.index + match[0].length;\r\n        }\r\n      }\r\n      var ch = input.charAt(pos - 1);\r\n      tokRegexpAllowed = reAllowed;\r\n      skipSpace();\r\n    };\r\n    return getToken;\r\n  };\r\n\r\n  // State is kept in (closure-)global variables. We already saw the\r\n  // `options`, `input`, and `inputLen` variables above.\r\n\r\n  // The current position of the tokenizer in the input.\r\n\r\n  var tokPos;\r\n\r\n  // The start and end offsets of the current token.\r\n\r\n  var tokStart, tokEnd;\r\n\r\n  // When `options.locations` is true, these hold objects\r\n  // containing the tokens start and end line/column pairs.\r\n\r\n  var tokStartLoc, tokEndLoc;\r\n\r\n  // The type and value of the current token. Token types are objects,\r\n  // named by variables against which they can be compared, and\r\n  // holding properties that describe them (indicating, for example,\r\n  // the precedence of an infix operator, and the original name of a\r\n  // keyword token). The kind of value that's held in `tokVal` depends\r\n  // on the type of the token. For literals, it is the literal value,\r\n  // for operators, the operator name, and so on.\r\n\r\n  var tokType, tokVal;\r\n\r\n  // Interal state for the tokenizer. To distinguish between division\r\n  // operators and regular expressions, it remembers whether the last\r\n  // token was one that is allowed to be followed by an expression.\r\n  // (If it is, a slash is probably a regexp, if it isn't it's a\r\n  // division operator. See the `parseStatement` function for a\r\n  // caveat.)\r\n\r\n  var tokRegexpAllowed;\r\n\r\n  // When `options.locations` is true, these are used to keep\r\n  // track of the current line, and know when a new line has been\r\n  // entered.\r\n\r\n  var tokCurLine, tokLineStart;\r\n\r\n  // These store the position of the previous token, which is useful\r\n  // when finishing a node and assigning its `end` position.\r\n\r\n  var lastStart, lastEnd, lastEndLoc;\r\n\r\n  // This is the parser's state. `inFunction` is used to reject\r\n  // `return` statements outside of functions, `labels` to verify that\r\n  // `break` and `continue` have somewhere to jump to, and `strict`\r\n  // indicates whether strict mode is on.\r\n\r\n  var inFunction, labels, strict;\r\n\r\n  // This function is used to raise exceptions on parse errors. It\r\n  // takes an offset integer (into the current `input`) to indicate\r\n  // the location of the error, attaches the position to the end\r\n  // of the error message, and then raises a `SyntaxError` with that\r\n  // message.\r\n\r\n  function raise(pos, message) {\r\n    var loc = getLineInfo(input, pos);\r\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\r\n    var err = new SyntaxError(message);\r\n    err.pos = pos; err.loc = loc; err.raisedAt = tokPos;\r\n    throw err;\r\n  }\r\n\r\n  // ## Token types\r\n\r\n  // The assignment of fine-grained, information-carrying type objects\r\n  // allows the tokenizer to store the information it has about a\r\n  // token in a way that is very cheap for the parser to look up.\r\n\r\n  // All token type variables start with an underscore, to make them\r\n  // easy to recognize.\r\n\r\n  // These are the general types. The `type` property is only used to\r\n  // make them recognizeable when debugging.\r\n\r\n  var _num = {type: \"num\"}, _regexp = {type: \"regexp\"}, _string = {type: \"string\"};\r\n  var _name = {type: \"name\"}, _eof = {type: \"eof\"};\r\n\r\n  // Keyword tokens. The `keyword` property (also used in keyword-like\r\n  // operators) indicates that the token originated from an\r\n  // identifier-like word, which is used when parsing property names.\r\n  //\r\n  // The `beforeExpr` property is used to disambiguate between regular\r\n  // expressions and divisions. It is set on all token types that can\r\n  // be followed by an expression (thus, a slash after them would be a\r\n  // regular expression).\r\n  //\r\n  // `isLoop` marks a keyword as starting a loop, which is important\r\n  // to know when parsing a label, in order to allow or disallow\r\n  // continue jumps to that label.\r\n\r\n  var _break = {keyword: \"break\"}, _case = {keyword: \"case\", beforeExpr: true}, _catch = {keyword: \"catch\"};\r\n  var _continue = {keyword: \"continue\"}, _debugger = {keyword: \"debugger\"}, _default = {keyword: \"default\"};\r\n  var _do = {keyword: \"do\", isLoop: true}, _else = {keyword: \"else\", beforeExpr: true};\r\n  var _finally = {keyword: \"finally\"}, _for = {keyword: \"for\", isLoop: true}, _function = {keyword: \"function\"};\r\n  var _if = {keyword: \"if\"}, _return = {keyword: \"return\", beforeExpr: true}, _switch = {keyword: \"switch\"};\r\n  var _throw = {keyword: \"throw\", beforeExpr: true}, _try = {keyword: \"try\"}, _var = {keyword: \"var\"};\r\n  var _while = {keyword: \"while\", isLoop: true}, _with = {keyword: \"with\"}, _new = {keyword: \"new\", beforeExpr: true};\r\n  var _this = {keyword: \"this\"};\r\n\r\n  // The keywords that denote values.\r\n\r\n  var _null = {keyword: \"null\", atomValue: null}, _true = {keyword: \"true\", atomValue: true};\r\n  var _false = {keyword: \"false\", atomValue: false};\r\n\r\n  // Some keywords are treated as regular operators. `in` sometimes\r\n  // (when parsing `for`) needs to be tested against specifically, so\r\n  // we assign a variable name to it for quick comparing.\r\n\r\n  var _in = {keyword: \"in\", binop: 7, beforeExpr: true};\r\n\r\n  // Map keyword names to token types.\r\n\r\n  var keywordTypes = {\"break\": _break, \"case\": _case, \"catch\": _catch,\r\n                      \"continue\": _continue, \"debugger\": _debugger, \"default\": _default,\r\n                      \"do\": _do, \"else\": _else, \"finally\": _finally, \"for\": _for,\r\n                      \"function\": _function, \"if\": _if, \"return\": _return, \"switch\": _switch,\r\n                      \"throw\": _throw, \"try\": _try, \"var\": _var, \"while\": _while, \"with\": _with,\r\n                      \"null\": _null, \"true\": _true, \"false\": _false, \"new\": _new, \"in\": _in,\r\n                      \"instanceof\": {keyword: \"instanceof\", binop: 7, beforeExpr: true}, \"this\": _this,\r\n                      \"typeof\": {keyword: \"typeof\", prefix: true, beforeExpr: true},\r\n                      \"void\": {keyword: \"void\", prefix: true, beforeExpr: true},\r\n                      \"delete\": {keyword: \"delete\", prefix: true, beforeExpr: true}};\r\n\r\n  // Punctuation token types. Again, the `type` property is purely for debugging.\r\n\r\n  var _bracketL = {type: \"[\", beforeExpr: true}, _bracketR = {type: \"]\"}, _braceL = {type: \"{\", beforeExpr: true};\r\n  var _braceR = {type: \"}\"}, _parenL = {type: \"(\", beforeExpr: true}, _parenR = {type: \")\"};\r\n  var _comma = {type: \",\", beforeExpr: true}, _semi = {type: \";\", beforeExpr: true};\r\n  var _colon = {type: \":\", beforeExpr: true}, _dot = {type: \".\"}, _question = {type: \"?\", beforeExpr: true};\r\n\r\n  // Operators. These carry several kinds of properties to help the\r\n  // parser use them properly (the presence of these properties is\r\n  // what categorizes them as operators).\r\n  //\r\n  // `binop`, when present, specifies that this operator is a binary\r\n  // operator, and will refer to its precedence.\r\n  //\r\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\r\n  // unary operator. `isUpdate` specifies that the node produced by\r\n  // the operator should be of type UpdateExpression rather than\r\n  // simply UnaryExpression (`++` and `--`).\r\n  //\r\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\r\n  // binary operators with a very low precedence, that should result\r\n  // in AssignmentExpression nodes.\r\n\r\n  var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};\r\n  var _assign = {isAssign: true, beforeExpr: true}, _plusmin = {binop: 9, prefix: true, beforeExpr: true};\r\n  var _incdec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};\r\n  var _bin1 = {binop: 1, beforeExpr: true}, _bin2 = {binop: 2, beforeExpr: true};\r\n  var _bin3 = {binop: 3, beforeExpr: true}, _bin4 = {binop: 4, beforeExpr: true};\r\n  var _bin5 = {binop: 5, beforeExpr: true}, _bin6 = {binop: 6, beforeExpr: true};\r\n  var _bin7 = {binop: 7, beforeExpr: true}, _bin8 = {binop: 8, beforeExpr: true};\r\n  var _bin10 = {binop: 10, beforeExpr: true};\r\n\r\n  // Provide access to the token types for external users of the\r\n  // tokenizer.\r\n\r\n  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,\r\n                      parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,\r\n                      dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,\r\n                      num: _num, regexp: _regexp, string: _string};\r\n  for (var kw in keywordTypes) exports.tokTypes[\"_\" + kw] = keywordTypes[kw];\r\n\r\n  // This is a trick taken from Esprima. It turns out that, on\r\n  // non-Chrome browsers, to check whether a string is in a set, a\r\n  // predicate containing a big ugly `switch` statement is faster than\r\n  // a regular expression, and on Chrome the two are about on par.\r\n  // This function uses `eval` (non-lexical) to produce such a\r\n  // predicate from a space-separated string of words.\r\n  //\r\n  // It starts by sorting the words by length.\r\n\r\n  function makePredicate(words) {\r\n    words = words.split(\" \");\r\n    var f = \"\", cats = [];\r\n    out: for (var i = 0; i < words.length; ++i) {\r\n      for (var j = 0; j < cats.length; ++j)\r\n        if (cats[j][0].length == words[i].length) {\r\n          cats[j].push(words[i]);\r\n          continue out;\r\n        }\r\n      cats.push([words[i]]);\r\n    }\r\n    function compareTo(arr) {\r\n      if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\r\n      f += \"switch(str){\";\r\n      for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";\r\n      f += \"return true}return false;\";\r\n    }\r\n\r\n    // When there are more than three length categories, an outer\r\n    // switch first dispatches on the lengths, to save on comparisons.\r\n\r\n    if (cats.length > 3) {\r\n      cats.sort(function(a, b) {return b.length - a.length;});\r\n      f += \"switch(str.length){\";\r\n      for (var i = 0; i < cats.length; ++i) {\r\n        var cat = cats[i];\r\n        f += \"case \" + cat[0].length + \":\";\r\n        compareTo(cat);\r\n      }\r\n      f += \"}\";\r\n\r\n    // Otherwise, simply generate a flat `switch` statement.\r\n\r\n    } else {\r\n      compareTo(words);\r\n    }\r\n    return new Function(\"str\", f);\r\n  }\r\n\r\n  // The ECMAScript 3 reserved word list.\r\n\r\n  var isReservedWord3 = makePredicate(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\");\r\n\r\n  // ECMAScript 5 reserved words.\r\n\r\n  var isReservedWord5 = makePredicate(\"class enum extends super const export import\");\r\n\r\n  // The additional reserved words in strict mode.\r\n\r\n  var isStrictReservedWord = makePredicate(\"implements interface let package private protected public static yield\");\r\n\r\n  // The forbidden variable names in strict mode.\r\n\r\n  var isStrictBadIdWord = makePredicate(\"eval arguments\");\r\n\r\n  // And the keywords.\r\n\r\n  var isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\");\r\n\r\n  // ## Character categories\r\n\r\n  // Big ugly regular expressions that match characters in the\r\n  // whitespace, identifier, and identifier-start categories. These\r\n  // are only applied when a character is found to actually have a\r\n  // code point above 128.\r\n\r\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]/;\r\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\r\n  var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\r\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\r\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\r\n\r\n  // Whether a single character denotes a newline.\r\n\r\n  var newline = /[\\n\\r\\u2028\\u2029]/;\r\n\r\n  // Matches a whole line break (where CRLF is considered a single\r\n  // line break). Used to count lines.\r\n\r\n  var lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\r\n\r\n  // Test whether a given character code starts an identifier.\r\n\r\n  var isIdentifierStart = exports.isIdentifierStart = function(code) {\r\n    if (code < 65) return code === 36;\r\n    if (code < 91) return true;\r\n    if (code < 97) return code === 95;\r\n    if (code < 123)return true;\r\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\r\n  };\r\n\r\n  // Test whether a given character is part of an identifier.\r\n\r\n  var isIdentifierChar = exports.isIdentifierChar = function(code) {\r\n    if (code < 48) return code === 36;\r\n    if (code < 58) return true;\r\n    if (code < 65) return false;\r\n    if (code < 91) return true;\r\n    if (code < 97) return code === 95;\r\n    if (code < 123)return true;\r\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\r\n  };\r\n\r\n  // ## Tokenizer\r\n\r\n  // These are used when `options.locations` is on, for the\r\n  // `tokStartLoc` and `tokEndLoc` properties.\r\n\r\n  function line_loc_t() {\r\n    this.line = tokCurLine;\r\n    this.column = tokPos - tokLineStart;\r\n  }\r\n\r\n  // Reset the token state. Used at the start of a parse.\r\n\r\n  function initTokenState() {\r\n    tokCurLine = 1;\r\n    tokPos = tokLineStart = 0;\r\n    tokRegexpAllowed = true;\r\n    skipSpace();\r\n  }\r\n\r\n  // Called at the end of every token. Sets `tokEnd`, `tokVal`, and\r\n  // `tokRegexpAllowed`, and skips the space after the token, so that\r\n  // the next one's `tokStart` will point at the right position.\r\n\r\n  function finishToken(type, val) {\r\n    tokEnd = tokPos;\r\n    if (options.locations) tokEndLoc = new line_loc_t;\r\n    tokType = type;\r\n    skipSpace();\r\n    tokVal = val;\r\n    tokRegexpAllowed = type.beforeExpr;\r\n  }\r\n\r\n  function skipBlockComment() {\r\n    var startLoc = options.onComment && options.locations && new line_loc_t;\r\n    var start = tokPos, end = input.indexOf(\"*/\", tokPos += 2);\r\n    if (end === -1) raise(tokPos - 2, \"Unterminated comment\");\r\n    tokPos = end + 2;\r\n    if (options.locations) {\r\n      lineBreak.lastIndex = start;\r\n      var match;\r\n      while ((match = lineBreak.exec(input)) && match.index < tokPos) {\r\n        ++tokCurLine;\r\n        tokLineStart = match.index + match[0].length;\r\n      }\r\n    }\r\n    if (options.onComment)\r\n      options.onComment(true, input.slice(start + 2, end), start, tokPos,\r\n                        startLoc, options.locations && new line_loc_t);\r\n  }\r\n\r\n  function skipLineComment() {\r\n    var start = tokPos;\r\n    var startLoc = options.onComment && options.locations && new line_loc_t;\r\n    var ch = input.charCodeAt(tokPos+=2);\r\n    while (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8329) {\r\n      ++tokPos;\r\n      ch = input.charCodeAt(tokPos);\r\n    }\r\n    if (options.onComment)\r\n      options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,\r\n                        startLoc, options.locations && new line_loc_t);\r\n  }\r\n\r\n  // Called at the start of the parse and after every token. Skips\r\n  // whitespace and comments, and.\r\n\r\n  function skipSpace() {\r\n    while (tokPos < inputLen) {\r\n      var ch = input.charCodeAt(tokPos);\r\n      if (ch === 32) { // ' '\r\n        ++tokPos;\r\n      } else if(ch === 13) {\r\n        ++tokPos;\r\n        var next = input.charCodeAt(tokPos);\r\n        if(next === 10) {\r\n          ++tokPos;\r\n        }\r\n        if(options.locations) {\r\n          ++tokCurLine;\r\n          tokLineStart = tokPos;\r\n        }\r\n      } else if (ch === 10) {\r\n        ++tokPos;\r\n        ++tokCurLine;\r\n        tokLineStart = tokPos;\r\n      } else if(ch < 14 && ch > 8) {\r\n        ++tokPos;\r\n      } else if (ch === 47) { // '/'\r\n        var next = input.charCodeAt(tokPos+1);\r\n        if (next === 42) { // '*'\r\n          skipBlockComment();\r\n        } else if (next === 47) { // '/'\r\n          skipLineComment();\r\n        } else break;\r\n      } else if ((ch < 14 && ch > 8) || ch === 32 || ch === 160) { // ' ', '\\xa0'\r\n        ++tokPos;\r\n      } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\r\n        ++tokPos;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // ### Token reading\r\n\r\n  // This is the function that is called to fetch the next token. It\r\n  // is somewhat obscure, because it works in character codes rather\r\n  // than characters, and because operator parsing has been inlined\r\n  // into it.\r\n  //\r\n  // All in the name of speed.\r\n  //\r\n  // The `forceRegexp` parameter is used in the one case where the\r\n  // `tokRegexpAllowed` trick does not work. See `parseStatement`.\r\n\r\n  function readToken_dot() {\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (next >= 48 && next <= 57) return readNumber(true);\r\n    ++tokPos;\r\n    return finishToken(_dot);\r\n  }\r\n\r\n  function readToken_slash() { // '/'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (tokRegexpAllowed) {++tokPos; return readRegexp();}\r\n    if (next === 61) return finishOp(_assign, 2);\r\n    return finishOp(_slash, 1);\r\n  }\r\n\r\n  function readToken_mult_modulo() { // '%*'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (next === 61) return finishOp(_assign, 2);\r\n    return finishOp(_bin10, 1);\r\n  }\r\n\r\n  function readToken_pipe_amp(code) { // '|&'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (next === code) return finishOp(code === 124 ? _bin1 : _bin2, 2);\r\n    if (next === 61) return finishOp(_assign, 2);\r\n    return finishOp(code === 124 ? _bin3 : _bin5, 1);\r\n  }\r\n\r\n  function readToken_caret() { // '^'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (next === 61) return finishOp(_assign, 2);\r\n    return finishOp(_bin4, 1);\r\n  }\r\n\r\n  function readToken_plus_min(code) { // '+-'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (next === code) return finishOp(_incdec, 2);\r\n    if (next === 61) return finishOp(_assign, 2);\r\n    return finishOp(_plusmin, 1);\r\n  }\r\n\r\n  function readToken_lt_gt(code) { // '<>'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    var size = 1;\r\n    if (next === code) {\r\n      size = code === 62 && input.charCodeAt(tokPos+2) === 62 ? 3 : 2;\r\n      if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);\r\n      return finishOp(_bin8, size);\r\n    }\r\n    if (next === 61)\r\n      size = input.charCodeAt(tokPos+2) === 61 ? 3 : 2;\r\n    return finishOp(_bin7, size);\r\n  }\r\n\r\n  function readToken_eq_excl(code) { // '=!'\r\n    var next = input.charCodeAt(tokPos+1);\r\n    if (next === 61) return finishOp(_bin6, input.charCodeAt(tokPos+2) === 61 ? 3 : 2);\r\n    return finishOp(code === 61 ? _eq : _prefix, 1);\r\n  }\r\n\r\n  function getTokenFromCode(code) {\r\n    switch(code) {\r\n      // The interpretation of a dot depends on whether it is followed\r\n      // by a digit.\r\n    case 46: // '.'\r\n      return readToken_dot();\r\n\r\n      // Punctuation tokens.\r\n    case 40: ++tokPos; return finishToken(_parenL);\r\n    case 41: ++tokPos; return finishToken(_parenR);\r\n    case 59: ++tokPos; return finishToken(_semi);\r\n    case 44: ++tokPos; return finishToken(_comma);\r\n    case 91: ++tokPos; return finishToken(_bracketL);\r\n    case 93: ++tokPos; return finishToken(_bracketR);\r\n    case 123: ++tokPos; return finishToken(_braceL);\r\n    case 125: ++tokPos; return finishToken(_braceR);\r\n    case 58: ++tokPos; return finishToken(_colon);\r\n    case 63: ++tokPos; return finishToken(_question);\r\n\r\n      // '0x' is a hexadecimal number.\r\n    case 48: // '0'\r\n      var next = input.charCodeAt(tokPos+1);\r\n      if (next === 120 || next === 88) return readHexNumber();\r\n      // Anything else beginning with a digit is an integer, octal\r\n      // number, or float.\r\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\r\n      return readNumber(false);\r\n\r\n      // Quotes produce strings.\r\n    case 34: case 39: // '\"', \"'\"\r\n      return readString(code);\r\n\r\n    // Operators are parsed inline in tiny state machines. '=' (61) is\r\n    // often referred to. `finishOp` simply skips the amount of\r\n    // characters it is given as second argument, and returns a token\r\n    // of the type given by its first argument.\r\n\r\n    case 47: // '/'\r\n      return readToken_slash(code);\r\n\r\n    case 37: case 42: // '%*'\r\n      return readToken_mult_modulo();\r\n\r\n    case 124: case 38: // '|&'\r\n      return readToken_pipe_amp(code);\r\n\r\n    case 94: // '^'\r\n      return readToken_caret();\r\n\r\n    case 43: case 45: // '+-'\r\n      return readToken_plus_min(code);\r\n\r\n    case 60: case 62: // '<>'\r\n      return readToken_lt_gt(code);\r\n\r\n    case 61: case 33: // '=!'\r\n      return readToken_eq_excl(code);\r\n\r\n    case 126: // '~'\r\n      return finishOp(_prefix, 1);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function readToken(forceRegexp) {\r\n    if (!forceRegexp) tokStart = tokPos;\r\n    else tokPos = tokStart + 1;\r\n    if (options.locations) tokStartLoc = new line_loc_t;\r\n    if (forceRegexp) return readRegexp();\r\n    if (tokPos >= inputLen) return finishToken(_eof);\r\n\r\n    var code = input.charCodeAt(tokPos);\r\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\r\n    // identifiers, so '\\' also dispatches to that.\r\n    if (isIdentifierStart(code) || code === 92 /* '\\' */) return readWord();\r\n\r\n    var tok = getTokenFromCode(code);\r\n\r\n    if (tok === false) {\r\n      // If we are here, we either found a non-ASCII identifier\r\n      // character, or something that's entirely disallowed.\r\n      var ch = String.fromCharCode(code);\r\n      if (ch === \"\\\\\" || nonASCIIidentifierStart.test(ch)) return readWord();\r\n      raise(tokPos, \"Unexpected character '\" + ch + \"'\");\r\n    }\r\n    return tok;\r\n  }\r\n\r\n  function finishOp(type, size) {\r\n    var str = input.slice(tokPos, tokPos + size);\r\n    tokPos += size;\r\n    finishToken(type, str);\r\n  }\r\n\r\n  // Parse a regular expression. Some context-awareness is necessary,\r\n  // since a '/' inside a '[]' set does not end the expression.\r\n\r\n  function readRegexp() {\r\n    var content = \"\", escaped, inClass, start = tokPos;\r\n    for (;;) {\r\n      if (tokPos >= inputLen) raise(start, \"Unterminated regular expression\");\r\n      var ch = input.charAt(tokPos);\r\n      if (newline.test(ch)) raise(start, \"Unterminated regular expression\");\r\n      if (!escaped) {\r\n        if (ch === \"[\") inClass = true;\r\n        else if (ch === \"]\" && inClass) inClass = false;\r\n        else if (ch === \"/\" && !inClass) break;\r\n        escaped = ch === \"\\\\\";\r\n      } else escaped = false;\r\n      ++tokPos;\r\n    }\r\n    var content = input.slice(start, tokPos);\r\n    ++tokPos;\r\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\r\n    // here (don't ask).\r\n    var mods = readWord1();\r\n    if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, \"Invalid regexp flag\");\r\n    return finishToken(_regexp, new RegExp(content, mods));\r\n  }\r\n\r\n  // Read an integer in the given radix. Return null if zero digits\r\n  // were read, the integer value otherwise. When `len` is given, this\r\n  // will return `null` unless the integer has exactly `len` digits.\r\n\r\n  function readInt(radix, len) {\r\n    var start = tokPos, total = 0;\r\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\r\n      var code = input.charCodeAt(tokPos), val;\r\n      if (code >= 97) val = code - 97 + 10; // a\r\n      else if (code >= 65) val = code - 65 + 10; // A\r\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\r\n      else val = Infinity;\r\n      if (val >= radix) break;\r\n      ++tokPos;\r\n      total = total * radix + val;\r\n    }\r\n    if (tokPos === start || len != null && tokPos - start !== len) return null;\r\n\r\n    return total;\r\n  }\r\n\r\n  function readHexNumber() {\r\n    tokPos += 2; // 0x\r\n    var val = readInt(16);\r\n    if (val == null) raise(tokStart + 2, \"Expected hexadecimal number\");\r\n    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\r\n    return finishToken(_num, val);\r\n  }\r\n\r\n  // Read an integer, octal integer, or floating-point number.\r\n\r\n  function readNumber(startsWithDot) {\r\n    var start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;\r\n    if (!startsWithDot && readInt(10) === null) raise(start, \"Invalid number\");\r\n    if (input.charCodeAt(tokPos) === 46) {\r\n      ++tokPos;\r\n      readInt(10);\r\n      isFloat = true;\r\n    }\r\n    var next = input.charCodeAt(tokPos);\r\n    if (next === 69 || next === 101) { // 'eE'\r\n      next = input.charCodeAt(++tokPos);\r\n      if (next === 43 || next === 45) ++tokPos; // '+-'\r\n      if (readInt(10) === null) raise(start, \"Invalid number\");\r\n      isFloat = true;\r\n    }\r\n    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\r\n\r\n    var str = input.slice(start, tokPos), val;\r\n    if (isFloat) val = parseFloat(str);\r\n    else if (!octal || str.length === 1) val = parseInt(str, 10);\r\n    else if (/[89]/.test(str) || strict) raise(start, \"Invalid number\");\r\n    else val = parseInt(str, 8);\r\n    return finishToken(_num, val);\r\n  }\r\n\r\n  // Read a string value, interpreting backslash-escapes.\r\n\r\n  function readString(quote) {\r\n    tokPos++;\r\n    var out = \"\";\r\n    for (;;) {\r\n      if (tokPos >= inputLen) raise(tokStart, \"Unterminated string constant\");\r\n      var ch = input.charCodeAt(tokPos);\r\n      if (ch === quote) {\r\n        ++tokPos;\r\n        return finishToken(_string, out);\r\n      }\r\n      if (ch === 92) { // '\\'\r\n        ch = input.charCodeAt(++tokPos);\r\n        var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));\r\n        if (octal) octal = octal[0];\r\n        while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, octal.length - 1);\r\n        if (octal === \"0\") octal = null;\r\n        ++tokPos;\r\n        if (octal) {\r\n          if (strict) raise(tokPos - 2, \"Octal literal in strict mode\");\r\n          out += String.fromCharCode(parseInt(octal, 8));\r\n          tokPos += octal.length - 1;\r\n        } else {\r\n          switch (ch) {\r\n          case 110: out += \"\\n\"; break; // 'n' -> '\\n'\r\n          case 114: out += \"\\r\"; break; // 'r' -> '\\r'\r\n          case 120: out += String.fromCharCode(readHexChar(2)); break; // 'x'\r\n          case 117: out += String.fromCharCode(readHexChar(4)); break; // 'u'\r\n          case 85: out += String.fromCharCode(readHexChar(8)); break; // 'U'\r\n          case 116: out += \"\\t\"; break; // 't' -> '\\t'\r\n          case 98: out += \"\\b\"; break; // 'b' -> '\\b'\r\n          case 118: out += \"\\u000b\"; break; // 'v' -> '\\u000b'\r\n          case 102: out += \"\\f\"; break; // 'f' -> '\\f'\r\n          case 48: out += \"\\0\"; break; // 0 -> '\\0'\r\n          case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos; // '\\r\\n'\r\n          case 10: // ' \\n'\r\n            if (options.locations) { tokLineStart = tokPos; ++tokCurLine; }\r\n            break;\r\n          default: out += String.fromCharCode(ch); break;\r\n          }\r\n        }\r\n      } else {\r\n        if (ch === 13 || ch === 10 || ch === 8232 || ch === 8329) raise(tokStart, \"Unterminated string constant\");\r\n        out += String.fromCharCode(ch); // '\\'\r\n        ++tokPos;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\r\n\r\n  function readHexChar(len) {\r\n    var n = readInt(16, len);\r\n    if (n === null) raise(tokStart, \"Bad character escape sequence\");\r\n    return n;\r\n  }\r\n\r\n  // Used to signal to callers of `readWord1` whether the word\r\n  // contained any escape sequences. This is needed because words with\r\n  // escape sequences must not be interpreted as keywords.\r\n\r\n  var containsEsc;\r\n\r\n  // Read an identifier, and return it as a string. Sets `containsEsc`\r\n  // to whether the word contained a '\\u' escape.\r\n  //\r\n  // Only builds up the word character-by-character when it actually\r\n  // containeds an escape, as a micro-optimization.\r\n\r\n  function readWord1() {\r\n    containsEsc = false;\r\n    var word, first = true, start = tokPos;\r\n    for (;;) {\r\n      var ch = input.charCodeAt(tokPos);\r\n      if (isIdentifierChar(ch)) {\r\n        if (containsEsc) word += input.charAt(tokPos);\r\n        ++tokPos;\r\n      } else if (ch === 92) { // \"\\\"\r\n        if (!containsEsc) word = input.slice(start, tokPos);\r\n        containsEsc = true;\r\n        if (input.charCodeAt(++tokPos) != 117) // \"u\"\r\n          raise(tokPos, \"Expecting Unicode escape sequence \\\\uXXXX\");\r\n        ++tokPos;\r\n        var esc = readHexChar(4);\r\n        var escStr = String.fromCharCode(esc);\r\n        if (!escStr) raise(tokPos - 1, \"Invalid Unicode escape\");\r\n        if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))\r\n          raise(tokPos - 4, \"Invalid Unicode escape\");\r\n        word += escStr;\r\n      } else {\r\n        break;\r\n      }\r\n      first = false;\r\n    }\r\n    return containsEsc ? word : input.slice(start, tokPos);\r\n  }\r\n\r\n  // Read an identifier or keyword token. Will check for reserved\r\n  // words when necessary.\r\n\r\n  function readWord() {\r\n    var word = readWord1();\r\n    var type = _name;\r\n    if (!containsEsc) {\r\n      if (isKeyword(word)) type = keywordTypes[word];\r\n      else if (options.forbidReserved &&\r\n               (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(word) ||\r\n               strict && isStrictReservedWord(word))\r\n        raise(tokStart, \"The keyword '\" + word + \"' is reserved\");\r\n    }\r\n    return finishToken(type, word);\r\n  }\r\n\r\n  // ## Parser\r\n\r\n  // A recursive descent parser operates by defining functions for all\r\n  // syntactic elements, and recursively calling those, each function\r\n  // advancing the input stream and returning an AST node. Precedence\r\n  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\r\n  // instead of `(!x)[1]` is handled by the fact that the parser\r\n  // function that parses unary prefix operators is called first, and\r\n  // in turn calls the function that parses `[]` subscripts — that\r\n  // way, it'll receive the node for `x[1]` already parsed, and wraps\r\n  // *that* in the unary operator node.\r\n  //\r\n  // Acorn uses an [operator precedence parser][opp] to handle binary\r\n  // operator precedence, because it is much more compact than using\r\n  // the technique outlined above, which uses different, nesting\r\n  // functions to specify precedence, for all of the ten binary\r\n  // precedence levels that JavaScript defines.\r\n  //\r\n  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\r\n\r\n  // ### Parser utilities\r\n\r\n  // Continue to the next token.\r\n\r\n  function next() {\r\n    lastStart = tokStart;\r\n    lastEnd = tokEnd;\r\n    lastEndLoc = tokEndLoc;\r\n    readToken();\r\n  }\r\n\r\n  // Enter strict mode. Re-reads the next token to please pedantic\r\n  // tests (\"use strict\"; 010; -- should fail).\r\n\r\n  function setStrict(strct) {\r\n    strict = strct;\r\n    tokPos = lastEnd;\r\n    while (tokPos < tokLineStart) {\r\n      tokLineStart = input.lastIndexOf(\"\\n\", tokLineStart - 2) + 1;\r\n      --tokCurLine;\r\n    }\r\n    skipSpace();\r\n    readToken();\r\n  }\r\n\r\n  // Start an AST node, attaching a start offset.\r\n\r\n  function node_t() {\r\n    this.type = null;\r\n    this.start = tokStart;\r\n    this.end = null;\r\n  }\r\n\r\n  function node_loc_t() {\r\n    this.start = tokStartLoc;\r\n    this.end = null;\r\n    if (sourceFile !== null) this.source = sourceFile;\r\n  }\r\n\r\n  function startNode() {\r\n    var node = new node_t();\r\n    if (options.locations)\r\n      node.loc = new node_loc_t();\r\n    if (options.ranges)\r\n      node.range = [tokStart, 0];\r\n    return node;\r\n  }\r\n\r\n  // Start a node whose start offset information should be based on\r\n  // the start of another node. For example, a binary operator node is\r\n  // only started after its left-hand side has already been parsed.\r\n\r\n  function startNodeFrom(other) {\r\n    var node = new node_t();\r\n    node.start = other.start;\r\n    if (options.locations) {\r\n      node.loc = new node_loc_t();\r\n      node.loc.start = other.loc.start;\r\n    }\r\n    if (options.ranges)\r\n      node.range = [other.range[0], 0];\r\n\r\n    return node;\r\n  }\r\n\r\n  // Finish an AST node, adding `type` and `end` properties.\r\n\r\n  function finishNode(node, type) {\r\n    node.type = type;\r\n    node.end = lastEnd;\r\n    if (options.locations)\r\n      node.loc.end = lastEndLoc;\r\n    if (options.ranges)\r\n      node.range[1] = lastEnd;\r\n    return node;\r\n  }\r\n\r\n  // Test whether a statement node is the string literal `\"use strict\"`.\r\n\r\n  function isUseStrict(stmt) {\r\n    return options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\r\n      stmt.expression.type === \"Literal\" && stmt.expression.value === \"use strict\";\r\n  }\r\n\r\n  // Predicate that tests whether the next token is of the given\r\n  // type, and if yes, consumes it as a side effect.\r\n\r\n  function eat(type) {\r\n    if (tokType === type) {\r\n      next();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Test whether a semicolon can be inserted at the current position.\r\n\r\n  function canInsertSemicolon() {\r\n    return !options.strictSemicolons &&\r\n      (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));\r\n  }\r\n\r\n  // Consume a semicolon, or, failing that, see if we are allowed to\r\n  // pretend that there is a semicolon at this position.\r\n\r\n  function semicolon() {\r\n    if (!eat(_semi) && !canInsertSemicolon()) unexpected();\r\n  }\r\n\r\n  // Expect a token of a given type. If found, consume it, otherwise,\r\n  // raise an unexpected token error.\r\n\r\n  function expect(type) {\r\n    if (tokType === type) next();\r\n    else unexpected();\r\n  }\r\n\r\n  // Raise an unexpected token error.\r\n\r\n  function unexpected() {\r\n    raise(tokStart, \"Unexpected token\");\r\n  }\r\n\r\n  // Verify that a node is an lval — something that can be assigned\r\n  // to.\r\n\r\n  function checkLVal(expr) {\r\n    if (expr.type !== \"Identifier\" && expr.type !== \"MemberExpression\")\r\n      raise(expr.start, \"Assigning to rvalue\");\r\n    if (strict && expr.type === \"Identifier\" && isStrictBadIdWord(expr.name))\r\n      raise(expr.start, \"Assigning to \" + expr.name + \" in strict mode\");\r\n  }\r\n\r\n  // ### Statement parsing\r\n\r\n  // Parse a program. Initializes the parser, reads any number of\r\n  // statements, and wraps them in a Program node.  Optionally takes a\r\n  // `program` argument.  If present, the statements will be appended\r\n  // to its body instead of creating a new node.\r\n\r\n  function parseTopLevel(program) {\r\n    lastStart = lastEnd = tokPos;\r\n    if (options.locations) lastEndLoc = new line_loc_t;\r\n    inFunction = strict = null;\r\n    labels = [];\r\n    readToken();\r\n\r\n    var node = program || startNode(), first = true;\r\n    if (!program) node.body = [];\r\n    while (tokType !== _eof) {\r\n      var stmt = parseStatement();\r\n      node.body.push(stmt);\r\n      if (first && isUseStrict(stmt)) setStrict(true);\r\n      first = false;\r\n    }\r\n    return finishNode(node, \"Program\");\r\n  }\r\n\r\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\r\n\r\n  // Parse a single statement.\r\n  //\r\n  // If expecting a statement and finding a slash operator, parse a\r\n  // regular expression literal. This is to handle cases like\r\n  // `if (foo) /blah/.exec(foo);`, where looking at the previous token\r\n  // does not help.\r\n\r\n  function parseStatement() {\r\n    if (tokType === _slash)\r\n      readToken(true);\r\n\r\n    var starttype = tokType, node = startNode();\r\n\r\n    // Most types of statements are recognized by the keyword they\r\n    // start with. Many are trivial to parse, some require a bit of\r\n    // complexity.\r\n\r\n    switch (starttype) {\r\n    case _break: case _continue:\r\n      next();\r\n      var isBreak = starttype === _break;\r\n      if (eat(_semi) || canInsertSemicolon()) node.label = null;\r\n      else if (tokType !== _name) unexpected();\r\n      else {\r\n        node.label = parseIdent();\r\n        semicolon();\r\n      }\r\n\r\n      // Verify that there is an actual destination to break or\r\n      // continue to.\r\n      for (var i = 0; i < labels.length; ++i) {\r\n        var lab = labels[i];\r\n        if (node.label == null || lab.name === node.label.name) {\r\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\r\n          if (node.label && isBreak) break;\r\n        }\r\n      }\r\n      if (i === labels.length) raise(node.start, \"Unsyntactic \" + starttype.keyword);\r\n      return finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\r\n\r\n    case _debugger:\r\n      next();\r\n      semicolon();\r\n      return finishNode(node, \"DebuggerStatement\");\r\n\r\n    case _do:\r\n      next();\r\n      labels.push(loopLabel);\r\n      node.body = parseStatement();\r\n      labels.pop();\r\n      expect(_while);\r\n      node.test = parseParenExpression();\r\n      semicolon();\r\n      return finishNode(node, \"DoWhileStatement\");\r\n\r\n      // Disambiguating between a `for` and a `for`/`in` loop is\r\n      // non-trivial. Basically, we have to parse the init `var`\r\n      // statement or expression, disallowing the `in` operator (see\r\n      // the second parameter to `parseExpression`), and then check\r\n      // whether the next token is `in`. When there is no init part\r\n      // (semicolon immediately after the opening parenthesis), it is\r\n      // a regular `for` loop.\r\n\r\n    case _for:\r\n      next();\r\n      labels.push(loopLabel);\r\n      expect(_parenL);\r\n      if (tokType === _semi) return parseFor(node, null);\r\n      if (tokType === _var) {\r\n        var init = startNode();\r\n        next();\r\n        parseVar(init, true);\r\n        if (init.declarations.length === 1 && eat(_in))\r\n          return parseForIn(node, init);\r\n        return parseFor(node, init);\r\n      }\r\n      var init = parseExpression(false, true);\r\n      if (eat(_in)) {checkLVal(init); return parseForIn(node, init);}\r\n      return parseFor(node, init);\r\n\r\n    case _function:\r\n      next();\r\n      return parseFunction(node, true);\r\n\r\n    case _if:\r\n      next();\r\n      node.test = parseParenExpression();\r\n      node.consequent = parseStatement();\r\n      node.alternate = eat(_else) ? parseStatement() : null;\r\n      return finishNode(node, \"IfStatement\");\r\n\r\n    case _return:\r\n      if (!inFunction) raise(tokStart, \"'return' outside of function\");\r\n      next();\r\n\r\n      // In `return` (and `break`/`continue`), the keywords with\r\n      // optional arguments, we eagerly look for a semicolon or the\r\n      // possibility to insert one.\r\n\r\n      if (eat(_semi) || canInsertSemicolon()) node.argument = null;\r\n      else { node.argument = parseExpression(); semicolon(); }\r\n      return finishNode(node, \"ReturnStatement\");\r\n\r\n    case _switch:\r\n      next();\r\n      node.discriminant = parseParenExpression();\r\n      node.cases = [];\r\n      expect(_braceL);\r\n      labels.push(switchLabel);\r\n\r\n      // Statements under must be grouped (by label) in SwitchCase\r\n      // nodes. `cur` is used to keep the node that we are currently\r\n      // adding statements to.\r\n\r\n      for (var cur, sawDefault; tokType != _braceR;) {\r\n        if (tokType === _case || tokType === _default) {\r\n          var isCase = tokType === _case;\r\n          if (cur) finishNode(cur, \"SwitchCase\");\r\n          node.cases.push(cur = startNode());\r\n          cur.consequent = [];\r\n          next();\r\n          if (isCase) cur.test = parseExpression();\r\n          else {\r\n            if (sawDefault) raise(lastStart, \"Multiple default clauses\"); sawDefault = true;\r\n            cur.test = null;\r\n          }\r\n          expect(_colon);\r\n        } else {\r\n          if (!cur) unexpected();\r\n          cur.consequent.push(parseStatement());\r\n        }\r\n      }\r\n      if (cur) finishNode(cur, \"SwitchCase\");\r\n      next(); // Closing brace\r\n      labels.pop();\r\n      return finishNode(node, \"SwitchStatement\");\r\n\r\n    case _throw:\r\n      next();\r\n      if (newline.test(input.slice(lastEnd, tokStart)))\r\n        raise(lastEnd, \"Illegal newline after throw\");\r\n      node.argument = parseExpression();\r\n      semicolon();\r\n      return finishNode(node, \"ThrowStatement\");\r\n\r\n    case _try:\r\n      next();\r\n      node.block = parseBlock();\r\n      node.handler = null;\r\n      if (tokType === _catch) {\r\n        var clause = startNode();\r\n        next();\r\n        expect(_parenL);\r\n        clause.param = parseIdent();\r\n        if (strict && isStrictBadIdWord(clause.param.name))\r\n          raise(clause.param.start, \"Binding \" + clause.param.name + \" in strict mode\");\r\n        expect(_parenR);\r\n        clause.guard = null;\r\n        clause.body = parseBlock();\r\n        node.handler = finishNode(clause, \"CatchClause\");\r\n      }\r\n      node.finalizer = eat(_finally) ? parseBlock() : null;\r\n      if (!node.handler && !node.finalizer)\r\n        raise(node.start, \"Missing catch or finally clause\");\r\n      return finishNode(node, \"TryStatement\");\r\n\r\n    case _var:\r\n      next();\r\n      node = parseVar(node);\r\n      semicolon();\r\n      return node;\r\n\r\n    case _while:\r\n      next();\r\n      node.test = parseParenExpression();\r\n      labels.push(loopLabel);\r\n      node.body = parseStatement();\r\n      labels.pop();\r\n      return finishNode(node, \"WhileStatement\");\r\n\r\n    case _with:\r\n      if (strict) raise(tokStart, \"'with' in strict mode\");\r\n      next();\r\n      node.object = parseParenExpression();\r\n      node.body = parseStatement();\r\n      return finishNode(node, \"WithStatement\");\r\n\r\n    case _braceL:\r\n      return parseBlock();\r\n\r\n    case _semi:\r\n      next();\r\n      return finishNode(node, \"EmptyStatement\");\r\n\r\n      // If the statement does not start with a statement keyword or a\r\n      // brace, it's an ExpressionStatement or LabeledStatement. We\r\n      // simply start parsing an expression, and afterwards, if the\r\n      // next token is a colon and the expression was a simple\r\n      // Identifier node, we switch to interpreting it as a label.\r\n\r\n    default:\r\n      var maybeName = tokVal, expr = parseExpression();\r\n      if (starttype === _name && expr.type === \"Identifier\" && eat(_colon)) {\r\n        for (var i = 0; i < labels.length; ++i)\r\n          if (labels[i].name === maybeName) raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\r\n        var kind = tokType.isLoop ? \"loop\" : tokType === _switch ? \"switch\" : null;\r\n        labels.push({name: maybeName, kind: kind});\r\n        node.body = parseStatement();\r\n        labels.pop();\r\n        node.label = expr;\r\n        return finishNode(node, \"LabeledStatement\");\r\n      } else {\r\n        node.expression = expr;\r\n        semicolon();\r\n        return finishNode(node, \"ExpressionStatement\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used for constructs like `switch` and `if` that insist on\r\n  // parentheses around their expression.\r\n\r\n  function parseParenExpression() {\r\n    expect(_parenL);\r\n    var val = parseExpression();\r\n    expect(_parenR);\r\n    return val;\r\n  }\r\n\r\n  // Parse a semicolon-enclosed block of statements, handling `\"use\r\n  // strict\"` declarations when `allowStrict` is true (used for\r\n  // function bodies).\r\n\r\n  function parseBlock(allowStrict) {\r\n    var node = startNode(), first = true, strict = false, oldStrict;\r\n    node.body = [];\r\n    expect(_braceL);\r\n    while (!eat(_braceR)) {\r\n      var stmt = parseStatement();\r\n      node.body.push(stmt);\r\n      if (first && isUseStrict(stmt)) {\r\n        oldStrict = strict;\r\n        setStrict(strict = true);\r\n      }\r\n      first = false\r\n    }\r\n    if (strict && !oldStrict) setStrict(false);\r\n    return finishNode(node, \"BlockStatement\");\r\n  }\r\n\r\n  // Parse a regular `for` loop. The disambiguation code in\r\n  // `parseStatement` will already have parsed the init statement or\r\n  // expression.\r\n\r\n  function parseFor(node, init) {\r\n    node.init = init;\r\n    expect(_semi);\r\n    node.test = tokType === _semi ? null : parseExpression();\r\n    expect(_semi);\r\n    node.update = tokType === _parenR ? null : parseExpression();\r\n    expect(_parenR);\r\n    node.body = parseStatement();\r\n    labels.pop();\r\n    return finishNode(node, \"ForStatement\");\r\n  }\r\n\r\n  // Parse a `for`/`in` loop.\r\n\r\n  function parseForIn(node, init) {\r\n    node.left = init;\r\n    node.right = parseExpression();\r\n    expect(_parenR);\r\n    node.body = parseStatement();\r\n    labels.pop();\r\n    return finishNode(node, \"ForInStatement\");\r\n  }\r\n\r\n  // Parse a list of variable declarations.\r\n\r\n  function parseVar(node, noIn) {\r\n    node.declarations = [];\r\n    node.kind = \"var\";\r\n    for (;;) {\r\n      var decl = startNode();\r\n      decl.id = parseIdent();\r\n      if (strict && isStrictBadIdWord(decl.id.name))\r\n        raise(decl.id.start, \"Binding \" + decl.id.name + \" in strict mode\");\r\n      decl.init = eat(_eq) ? parseExpression(true, noIn) : null;\r\n      node.declarations.push(finishNode(decl, \"VariableDeclarator\"));\r\n      if (!eat(_comma)) break;\r\n    }\r\n    return finishNode(node, \"VariableDeclaration\");\r\n  }\r\n\r\n  // ### Expression parsing\r\n\r\n  // These nest, from the most general expression type at the top to\r\n  // 'atomic', nondivisible expression types at the bottom. Most of\r\n  // the functions will simply let the function(s) below them parse,\r\n  // and, *if* the syntactic construct they handle is present, wrap\r\n  // the AST node that the inner parser gave them in another node.\r\n\r\n  // Parse a full expression. The arguments are used to forbid comma\r\n  // sequences (in argument lists, array literals, or object literals)\r\n  // or the `in` operator (in for loops initalization expressions).\r\n\r\n  function parseExpression(noComma, noIn) {\r\n    var expr = parseMaybeAssign(noIn);\r\n    if (!noComma && tokType === _comma) {\r\n      var node = startNodeFrom(expr);\r\n      node.expressions = [expr];\r\n      while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));\r\n      return finishNode(node, \"SequenceExpression\");\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // Parse an assignment expression. This includes applications of\r\n  // operators like `+=`.\r\n\r\n  function parseMaybeAssign(noIn) {\r\n    var left = parseMaybeConditional(noIn);\r\n    if (tokType.isAssign) {\r\n      var node = startNodeFrom(left);\r\n      node.operator = tokVal;\r\n      node.left = left;\r\n      next();\r\n      node.right = parseMaybeAssign(noIn);\r\n      checkLVal(left);\r\n      return finishNode(node, \"AssignmentExpression\");\r\n    }\r\n    return left;\r\n  }\r\n\r\n  // Parse a ternary conditional (`?:`) operator.\r\n\r\n  function parseMaybeConditional(noIn) {\r\n    var expr = parseExprOps(noIn);\r\n    if (eat(_question)) {\r\n      var node = startNodeFrom(expr);\r\n      node.test = expr;\r\n      node.consequent = parseExpression(true);\r\n      expect(_colon);\r\n      node.alternate = parseExpression(true, noIn);\r\n      return finishNode(node, \"ConditionalExpression\");\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // Start the precedence parser.\r\n\r\n  function parseExprOps(noIn) {\r\n    return parseExprOp(parseMaybeUnary(noIn), -1, noIn);\r\n  }\r\n\r\n  // Parse binary operators with the operator precedence parsing\r\n  // algorithm. `left` is the left-hand side of the operator.\r\n  // `minPrec` provides context that allows the function to stop and\r\n  // defer further parser to one of its callers when it encounters an\r\n  // operator that has a lower precedence than the set it is parsing.\r\n\r\n  function parseExprOp(left, minPrec, noIn) {\r\n    var prec = tokType.binop;\r\n    if (prec != null && (!noIn || tokType !== _in)) {\r\n      if (prec > minPrec) {\r\n        var node = startNodeFrom(left);\r\n        node.left = left;\r\n        node.operator = tokVal;\r\n        next();\r\n        node.right = parseExprOp(parseMaybeUnary(noIn), prec, noIn);\r\n        var node = finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\r\n        return parseExprOp(node, minPrec, noIn);\r\n      }\r\n    }\r\n    return left;\r\n  }\r\n\r\n  // Parse unary operators, both prefix and postfix.\r\n\r\n  function parseMaybeUnary(noIn) {\r\n    if (tokType.prefix) {\r\n      var node = startNode(), update = tokType.isUpdate;\r\n      node.operator = tokVal;\r\n      node.prefix = true;\r\n      next();\r\n      node.argument = parseMaybeUnary(noIn);\r\n      if (update) checkLVal(node.argument);\r\n      else if (strict && node.operator === \"delete\" &&\r\n               node.argument.type === \"Identifier\")\r\n        raise(node.start, \"Deleting local variable in strict mode\");\r\n      return finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\r\n    }\r\n    var expr = parseExprSubscripts();\r\n    while (tokType.postfix && !canInsertSemicolon()) {\r\n      var node = startNodeFrom(expr);\r\n      node.operator = tokVal;\r\n      node.prefix = false;\r\n      node.argument = expr;\r\n      checkLVal(expr);\r\n      next();\r\n      expr = finishNode(node, \"UpdateExpression\");\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // Parse call, dot, and `[]`-subscript expressions.\r\n\r\n  function parseExprSubscripts() {\r\n    return parseSubscripts(parseExprAtom());\r\n  }\r\n\r\n  function parseSubscripts(base, noCalls) {\r\n    if (eat(_dot)) {\r\n      var node = startNodeFrom(base);\r\n      node.object = base;\r\n      node.property = parseIdent(true);\r\n      node.computed = false;\r\n      return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\r\n    } else if (eat(_bracketL)) {\r\n      var node = startNodeFrom(base);\r\n      node.object = base;\r\n      node.property = parseExpression();\r\n      node.computed = true;\r\n      expect(_bracketR);\r\n      return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\r\n    } else if (!noCalls && eat(_parenL)) {\r\n      var node = startNodeFrom(base);\r\n      node.callee = base;\r\n      node.arguments = parseExprList(_parenR, false);\r\n      return parseSubscripts(finishNode(node, \"CallExpression\"), noCalls);\r\n    } else return base;\r\n  }\r\n\r\n  // Parse an atomic expression — either a single token that is an\r\n  // expression, an expression started by a keyword like `function` or\r\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\r\n  // or `{}`.\r\n\r\n  function parseExprAtom() {\r\n    switch (tokType) {\r\n    case _this:\r\n      var node = startNode();\r\n      next();\r\n      return finishNode(node, \"ThisExpression\");\r\n    case _name:\r\n      return parseIdent();\r\n    case _num: case _string: case _regexp:\r\n      var node = startNode();\r\n      node.value = tokVal;\r\n      node.raw = input.slice(tokStart, tokEnd);\r\n      next();\r\n      return finishNode(node, \"Literal\");\r\n\r\n    case _null: case _true: case _false:\r\n      var node = startNode();\r\n      node.value = tokType.atomValue;\r\n      node.raw = tokType.keyword\r\n      next();\r\n      return finishNode(node, \"Literal\");\r\n\r\n    case _parenL:\r\n      var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;\r\n      next();\r\n      var val = parseExpression();\r\n      val.start = tokStart1;\r\n      val.end = tokEnd;\r\n      if (options.locations) {\r\n        val.loc.start = tokStartLoc1;\r\n        val.loc.end = tokEndLoc;\r\n      }\r\n      if (options.ranges)\r\n        val.range = [tokStart1, tokEnd];\r\n      expect(_parenR);\r\n      return val;\r\n\r\n    case _bracketL:\r\n      var node = startNode();\r\n      next();\r\n      node.elements = parseExprList(_bracketR, true, true);\r\n      return finishNode(node, \"ArrayExpression\");\r\n\r\n    case _braceL:\r\n      return parseObj();\r\n\r\n    case _function:\r\n      var node = startNode();\r\n      next();\r\n      return parseFunction(node, false);\r\n\r\n    case _new:\r\n      return parseNew();\r\n\r\n    default:\r\n      unexpected();\r\n    }\r\n  }\r\n\r\n  // New's precedence is slightly tricky. It must allow its argument\r\n  // to be a `[]` or dot subscript expression, but not a call — at\r\n  // least, not without wrapping it in parentheses. Thus, it uses the\r\n\r\n  function parseNew() {\r\n    var node = startNode();\r\n    next();\r\n    node.callee = parseSubscripts(parseExprAtom(), true);\r\n    if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);\r\n    else node.arguments = [];\r\n    return finishNode(node, \"NewExpression\");\r\n  }\r\n\r\n  // Parse an object literal.\r\n\r\n  function parseObj() {\r\n    var node = startNode(), first = true, sawGetSet = false;\r\n    node.properties = [];\r\n    next();\r\n    while (!eat(_braceR)) {\r\n      if (!first) {\r\n        expect(_comma);\r\n        if (options.allowTrailingCommas && eat(_braceR)) break;\r\n      } else first = false;\r\n\r\n      var prop = {key: parsePropertyName()}, isGetSet = false, kind;\r\n      if (eat(_colon)) {\r\n        prop.value = parseExpression(true);\r\n        kind = prop.kind = \"init\";\r\n      } else if (options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\r\n                 (prop.key.name === \"get\" || prop.key.name === \"set\")) {\r\n        isGetSet = sawGetSet = true;\r\n        kind = prop.kind = prop.key.name;\r\n        prop.key = parsePropertyName();\r\n        if (tokType !== _parenL) unexpected();\r\n        prop.value = parseFunction(startNode(), false);\r\n      } else unexpected();\r\n\r\n      // getters and setters are not allowed to clash — either with\r\n      // each other or with an init property — and in strict mode,\r\n      // init properties are also not allowed to be repeated.\r\n\r\n      if (prop.key.type === \"Identifier\" && (strict || sawGetSet)) {\r\n        for (var i = 0; i < node.properties.length; ++i) {\r\n          var other = node.properties[i];\r\n          if (other.key.name === prop.key.name) {\r\n            var conflict = kind == other.kind || isGetSet && other.kind === \"init\" ||\r\n              kind === \"init\" && (other.kind === \"get\" || other.kind === \"set\");\r\n            if (conflict && !strict && kind === \"init\" && other.kind === \"init\") conflict = false;\r\n            if (conflict) raise(prop.key.start, \"Redefinition of property\");\r\n          }\r\n        }\r\n      }\r\n      node.properties.push(prop);\r\n    }\r\n    return finishNode(node, \"ObjectExpression\");\r\n  }\r\n\r\n  function parsePropertyName() {\r\n    if (tokType === _num || tokType === _string) return parseExprAtom();\r\n    return parseIdent(true);\r\n  }\r\n\r\n  // Parse a function declaration or literal (depending on the\r\n  // `isStatement` parameter).\r\n\r\n  function parseFunction(node, isStatement) {\r\n    if (tokType === _name) node.id = parseIdent();\r\n    else if (isStatement) unexpected();\r\n    else node.id = null;\r\n    node.params = [];\r\n    var first = true;\r\n    expect(_parenL);\r\n    while (!eat(_parenR)) {\r\n      if (!first) expect(_comma); else first = false;\r\n      node.params.push(parseIdent());\r\n    }\r\n\r\n    // Start a new scope with regard to labels and the `inFunction`\r\n    // flag (restore them to their old value afterwards).\r\n    var oldInFunc = inFunction, oldLabels = labels;\r\n    inFunction = true; labels = [];\r\n    node.body = parseBlock(true);\r\n    inFunction = oldInFunc; labels = oldLabels;\r\n\r\n    // If this is a strict mode function, verify that argument names\r\n    // are not repeated, and it does not try to bind the words `eval`\r\n    // or `arguments`.\r\n    if (strict || node.body.body.length && isUseStrict(node.body.body[0])) {\r\n      for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {\r\n        var id = i < 0 ? node.id : node.params[i];\r\n        if (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))\r\n          raise(id.start, \"Defining '\" + id.name + \"' in strict mode\");\r\n        if (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name)\r\n          raise(id.start, \"Argument name clash in strict mode\");\r\n      }\r\n    }\r\n\r\n    return finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\r\n  }\r\n\r\n  // Parses a comma-separated list of expressions, and returns them as\r\n  // an array. `close` is the token type that ends the list, and\r\n  // `allowEmpty` can be turned on to allow subsequent commas with\r\n  // nothing in between them to be parsed as `null` (which is needed\r\n  // for array literals).\r\n\r\n  function parseExprList(close, allowTrailingComma, allowEmpty) {\r\n    var elts = [], first = true;\r\n    while (!eat(close)) {\r\n      if (!first) {\r\n        expect(_comma);\r\n        if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;\r\n      } else first = false;\r\n\r\n      if (allowEmpty && tokType === _comma) elts.push(null);\r\n      else elts.push(parseExpression(true));\r\n    }\r\n    return elts;\r\n  }\r\n\r\n  // Parse the next token as an identifier. If `liberal` is true (used\r\n  // when parsing properties), it will also convert keywords into\r\n  // identifiers.\r\n\r\n  function parseIdent(liberal) {\r\n    var node = startNode();\r\n    node.name = tokType === _name ? tokVal : (liberal && !options.forbidReserved && tokType.keyword) || unexpected();\r\n    next();\r\n    return finishNode(node, \"Identifier\");\r\n  }\r\n\r\n});\r\n\r\n},{}],20:[function(require,module,exports){\r\n// Acorn: Loose parser\r\n//\r\n// This module provides an alternative parser (`parse_dammit`) that\r\n// exposes that same interface as `parse`, but will try to parse\r\n// anything as JavaScript, repairing syntax error the best it can.\r\n// There are circumstances in which it will raise an error and give\r\n// up, but they are very rare. The resulting AST will be a mostly\r\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\r\n// that:\r\n//\r\n// - Return outside functions is allowed\r\n//\r\n// - Label consistency (no conflicts, break only to existing labels)\r\n//   is not enforced.\r\n//\r\n// - Bogus Identifier nodes with a name of `\"✖\"` are inserted whenever\r\n//   the parser got too confused to return anything meaningful.\r\n//\r\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\r\n//\r\n// The expected use for this is to *first* try `acorn.parse`, and only\r\n// if that fails switch to `parse_dammit`. The loose parser might\r\n// parse badly indented code incorrectly, so **don't** use it as\r\n// your default parser.\r\n//\r\n// Quite a lot of acorn.js is duplicated here. The alternative was to\r\n// add a *lot* of extra cruft to that file, making it less readable\r\n// and slower. Copying and editing the code allowed me to make\r\n// invasive changes and simplifications without creating a complicated\r\n// tangle.\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"./acorn\")); // CommonJS\r\n  if (typeof define == \"function\" && define.amd) return define([\"exports\", \"./acorn\"], mod); // AMD\r\n  mod(this.acorn || (this.acorn = {}), this.acorn); // Plain browser env\r\n})(function(exports, acorn) {\r\n  \"use strict\";\r\n\r\n  var tt = acorn.tokTypes;\r\n\r\n  var options, input, fetchToken, context;\r\n\r\n  exports.parse_dammit = function(inpt, opts) {\r\n    if (!opts) opts = {};\r\n    input = String(inpt);\r\n    options = opts;\r\n    if (!opts.tabSize) opts.tabSize = 4;\r\n    fetchToken = acorn.tokenize(inpt, opts);\r\n    sourceFile = options.sourceFile || null;\r\n    context = [];\r\n    nextLineStart = 0;\r\n    ahead.length = 0;\r\n    next();\r\n    return parseTopLevel();\r\n  };\r\n\r\n  var lastEnd, token = {start: 0, end: 0}, ahead = [];\r\n  var curLineStart, nextLineStart, curIndent, lastEndLoc, sourceFile;\r\n\r\n  function next() {\r\n    lastEnd = token.end;\r\n    if (options.locations)\r\n      lastEndLoc = token.endLoc;\r\n\r\n    if (ahead.length)\r\n      token = ahead.shift();\r\n    else\r\n      token = readToken();\r\n\r\n    if (token.start >= nextLineStart) {\r\n      while (token.start >= nextLineStart) {\r\n        curLineStart = nextLineStart;\r\n        nextLineStart = lineEnd(curLineStart) + 1;\r\n      }\r\n      curIndent = indentationAfter(curLineStart);\r\n    }\r\n  }\r\n\r\n  function readToken() {\r\n    for (;;) {\r\n      try {\r\n        return fetchToken();\r\n      } catch(e) {\r\n        if (!(e instanceof SyntaxError)) throw e;\r\n\r\n        // Try to skip some text, based on the error message, and then continue\r\n        var msg = e.message, pos = e.raisedAt, replace = true;\r\n        if (/unterminated/i.test(msg)) {\r\n          pos = lineEnd(e.pos);\r\n          if (/string/.test(msg)) {\r\n            replace = {start: e.pos, end: pos, type: tt.string, value: input.slice(e.pos + 1, pos)};\r\n          } else if (/regular expr/i.test(msg)) {\r\n            var re = input.slice(e.pos, pos);\r\n            try { re = new RegExp(re); } catch(e) {}\r\n            replace = {start: e.pos, end: pos, type: tt.regexp, value: re};\r\n          } else {\r\n            replace = false;\r\n          }\r\n        } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number/i.test(msg)) {\r\n          while (pos < input.length && !isSpace(input.charCodeAt(pos))) ++pos;\r\n        } else if (/character escape|expected hexadecimal/i.test(msg)) {\r\n          while (pos < input.length) {\r\n            var ch = input.charCodeAt(pos++);\r\n            if (ch === 34 || ch === 39 || isNewline(ch)) break;\r\n          }\r\n        } else if (/unexpected character/i.test(msg)) {\r\n          pos++;\r\n          replace = false;\r\n        } else {\r\n          throw e;\r\n        }\r\n        resetTo(pos);\r\n        if (replace === true) replace = {start: pos, end: pos, type: tt.name, value: \"✖\"};\r\n        if (replace) {\r\n          if (options.locations) {\r\n            replace.startLoc = acorn.getLineInfo(input, replace.start);\r\n            replace.endLoc = acorn.getLineInfo(input, replace.end);\r\n          }\r\n          return replace;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function resetTo(pos) {\r\n    var ch = input.charAt(pos - 1);\r\n    var reAllowed = !ch || /[\\[\\{\\(,;:?\\/*=+\\-~!|&%^<>]/.test(ch) ||\r\n      /[enwfd]/.test(ch) && /\\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(input.slice(pos - 10, pos));\r\n    fetchToken.jumpTo(pos, reAllowed);\r\n  }\r\n\r\n  function copyToken(token) {\r\n    var copy = {start: token.start, end: token.end, type: token.type, value: token.value};\r\n    if (options.locations) {\r\n      copy.startLoc = token.startLoc;\r\n      copy.endLoc = token.endLoc;\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  function lookAhead(n) {\r\n    // Copy token objects, because fetchToken will overwrite the one\r\n    // it returns, and in this case we still need it\r\n    if (!ahead.length)\r\n      token = copyToken(token);\r\n    while (n > ahead.length)\r\n      ahead.push(copyToken(readToken()));\r\n    return ahead[n-1];\r\n  }\r\n\r\n  var newline = /[\\n\\r\\u2028\\u2029]/;\r\n\r\n  function isNewline(ch) {\r\n    return ch === 10 || ch === 13 || ch === 8232 || ch === 8329;\r\n  }\r\n  function isSpace(ch) {\r\n    return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewline(ch);\r\n  }\r\n\r\n  function pushCx() {\r\n    context.push(curIndent);\r\n  }\r\n  function popCx() {\r\n    curIndent = context.pop();\r\n  }\r\n\r\n  function lineEnd(pos) {\r\n    while (pos < input.length && !isNewline(input.charCodeAt(pos))) ++pos;\r\n    return pos;\r\n  }\r\n  function lineStart(pos) {\r\n    while (pos > 0 && !isNewline(input.charCodeAt(pos - 1))) --pos;\r\n    return pos;\r\n  }\r\n  function indentationAfter(pos) {\r\n    for (var count = 0;; ++pos) {\r\n      var ch = input.charCodeAt(pos);\r\n      if (ch === 32) ++count;\r\n      else if (ch === 9) count += options.tabSize;\r\n      else return count;\r\n    }\r\n  }\r\n\r\n  function closes(closeTok, indent, line, blockHeuristic) {\r\n    if (token.type === closeTok || token.type === tt.eof) return true;\r\n    if (line != curLineStart && curIndent < indent && tokenStartsLine() &&\r\n        (!blockHeuristic || nextLineStart >= input.length ||\r\n         indentationAfter(nextLineStart) < indent)) return true;\r\n    return false;\r\n  }\r\n\r\n  function tokenStartsLine() {\r\n    for (var p = token.start - 1; p >= curLineStart; --p) {\r\n      var ch = input.charCodeAt(p);\r\n      if (ch !== 9 && ch !== 32) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function node_t(start) {\r\n    this.type = null;\r\n    this.start = start;\r\n    this.end = null;\r\n  }\r\n\r\n  function node_loc_t(start) {\r\n    this.start = start || token.startLoc || {line: 1, column: 0};\r\n    this.end = null;\r\n    if (sourceFile !== null) this.source = sourceFile;\r\n  }\r\n\r\n  function startNode() {\r\n    var node = new node_t(token.start);\r\n    if (options.locations)\r\n      node.loc = new node_loc_t();\r\n    return node;\r\n  }\r\n\r\n  function startNodeFrom(other) {\r\n    var node = new node_t(other.start);\r\n    if (options.locations)\r\n      node.loc = new node_loc_t(other.loc.start);\r\n    return node;\r\n  }\r\n\r\n  function finishNode(node, type) {\r\n    node.type = type;\r\n    node.end = lastEnd;\r\n    if (options.locations)\r\n      node.loc.end = lastEndLoc;\r\n    return node;\r\n  }\r\n\r\n  function getDummyLoc() {\r\n    if (options.locations) {\r\n      var loc = new node_loc_t();\r\n      loc.end = loc.start;\r\n      return loc;\r\n    }\r\n  };\r\n\r\n  function dummyIdent() {\r\n    var dummy = new node_t(token.start);\r\n    dummy.type = \"Identifier\";\r\n    dummy.end = token.start;\r\n    dummy.name = \"✖\";\r\n    dummy.loc = getDummyLoc();\r\n    return dummy;\r\n  }\r\n  function isDummy(node) { return node.name == \"✖\"; }\r\n\r\n  function eat(type) {\r\n    if (token.type === type) {\r\n      next();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function canInsertSemicolon() {\r\n    return (token.type === tt.eof || token.type === tt.braceR || newline.test(input.slice(lastEnd, token.start)));\r\n  }\r\n  function semicolon() {\r\n    eat(tt.semi);\r\n  }\r\n\r\n  function expect(type) {\r\n    if (eat(type)) return true;\r\n    if (lookAhead(1).type == type) {\r\n      next(); next();\r\n      return true;\r\n    }\r\n    if (lookAhead(2).type == type) {\r\n      next(); next(); next();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function checkLVal(expr) {\r\n    if (expr.type === \"Identifier\" || expr.type === \"MemberExpression\") return expr;\r\n    return dummyIdent();\r\n  }\r\n\r\n  function parseTopLevel() {\r\n    var node = startNode();\r\n    node.body = [];\r\n    while (token.type !== tt.eof) node.body.push(parseStatement());\r\n    return finishNode(node, \"Program\");\r\n  }\r\n\r\n  function parseStatement() {\r\n    var starttype = token.type, node = startNode();\r\n\r\n    switch (starttype) {\r\n    case tt._break: case tt._continue:\r\n      next();\r\n      var isBreak = starttype === tt._break;\r\n      node.label = token.type === tt.name ? parseIdent() : null;\r\n      semicolon();\r\n      return finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\r\n\r\n    case tt._debugger:\r\n      next();\r\n      semicolon();\r\n      return finishNode(node, \"DebuggerStatement\");\r\n\r\n    case tt._do:\r\n      next();\r\n      node.body = parseStatement();\r\n      node.test = eat(tt._while) ? parseParenExpression() : dummyIdent();\r\n      semicolon();\r\n      return finishNode(node, \"DoWhileStatement\");\r\n\r\n    case tt._for:\r\n      next();\r\n      pushCx();\r\n      expect(tt.parenL);\r\n      if (token.type === tt.semi) return parseFor(node, null);\r\n      if (token.type === tt._var) {\r\n        var init = startNode();\r\n        next();\r\n        parseVar(init, true);\r\n        if (init.declarations.length === 1 && eat(tt._in))\r\n          return parseForIn(node, init);\r\n        return parseFor(node, init);\r\n      }\r\n      var init = parseExpression(false, true);\r\n      if (eat(tt._in)) {return parseForIn(node, checkLVal(init));}\r\n      return parseFor(node, init);\r\n\r\n    case tt._function:\r\n      next();\r\n      return parseFunction(node, true);\r\n\r\n    case tt._if:\r\n      next();\r\n      node.test = parseParenExpression();\r\n      node.consequent = parseStatement();\r\n      node.alternate = eat(tt._else) ? parseStatement() : null;\r\n      return finishNode(node, \"IfStatement\");\r\n\r\n    case tt._return:\r\n      next();\r\n      if (eat(tt.semi) || canInsertSemicolon()) node.argument = null;\r\n      else { node.argument = parseExpression(); semicolon(); }\r\n      return finishNode(node, \"ReturnStatement\");\r\n\r\n    case tt._switch:\r\n      var blockIndent = curIndent, line = curLineStart;\r\n      next();\r\n      node.discriminant = parseParenExpression();\r\n      node.cases = [];\r\n      pushCx();\r\n      expect(tt.braceL);\r\n\r\n      for (var cur; !closes(tt.braceR, blockIndent, line, true);) {\r\n        if (token.type === tt._case || token.type === tt._default) {\r\n          var isCase = token.type === tt._case;\r\n          if (cur) finishNode(cur, \"SwitchCase\");\r\n          node.cases.push(cur = startNode());\r\n          cur.consequent = [];\r\n          next();\r\n          if (isCase) cur.test = parseExpression();\r\n          else cur.test = null;\r\n          expect(tt.colon);\r\n        } else {\r\n          if (!cur) {\r\n            node.cases.push(cur = startNode());\r\n            cur.consequent = [];\r\n            cur.test = null;\r\n          }\r\n          cur.consequent.push(parseStatement());\r\n        }\r\n      }\r\n      if (cur) finishNode(cur, \"SwitchCase\");\r\n      popCx();\r\n      eat(tt.braceR);\r\n      return finishNode(node, \"SwitchStatement\");\r\n\r\n    case tt._throw:\r\n      next();\r\n      node.argument = parseExpression();\r\n      semicolon();\r\n      return finishNode(node, \"ThrowStatement\");\r\n\r\n    case tt._try:\r\n      next();\r\n      node.block = parseBlock();\r\n      node.handler = null;\r\n      if (token.type === tt._catch) {\r\n        var clause = startNode();\r\n        next();\r\n        expect(tt.parenL);\r\n        clause.param = parseIdent();\r\n        expect(tt.parenR);\r\n        clause.guard = null;\r\n        clause.body = parseBlock();\r\n        node.handler = finishNode(clause, \"CatchClause\");\r\n      }\r\n      node.finalizer = eat(tt._finally) ? parseBlock() : null;\r\n      if (!node.handler && !node.finalizer) return node.block;\r\n      return finishNode(node, \"TryStatement\");\r\n\r\n    case tt._var:\r\n      next();\r\n      node = parseVar(node);\r\n      semicolon();\r\n      return node;\r\n\r\n    case tt._while:\r\n      next();\r\n      node.test = parseParenExpression();\r\n      node.body = parseStatement();\r\n      return finishNode(node, \"WhileStatement\");\r\n\r\n    case tt._with:\r\n      next();\r\n      node.object = parseParenExpression();\r\n      node.body = parseStatement();\r\n      return finishNode(node, \"WithStatement\");\r\n\r\n    case tt.braceL:\r\n      return parseBlock();\r\n\r\n    case tt.semi:\r\n      next();\r\n      return finishNode(node, \"EmptyStatement\");\r\n\r\n    default:\r\n      var maybeName = token.value, expr = parseExpression();\r\n      if (isDummy(expr)) {\r\n        next();\r\n        if (token.type === tt.eof) return finishNode(node, \"EmptyStatement\");\r\n        return parseStatement();\r\n      } else if (starttype === tt.name && expr.type === \"Identifier\" && eat(tt.colon)) {\r\n        node.body = parseStatement();\r\n        node.label = expr;\r\n        return finishNode(node, \"LabeledStatement\");\r\n      } else {\r\n        node.expression = expr;\r\n        semicolon();\r\n        return finishNode(node, \"ExpressionStatement\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function parseBlock() {\r\n    var node = startNode();\r\n    pushCx();\r\n    expect(tt.braceL);\r\n    var blockIndent = curIndent, line = curLineStart;\r\n    node.body = [];\r\n    while (!closes(tt.braceR, blockIndent, line, true))\r\n      node.body.push(parseStatement());\r\n    popCx();\r\n    eat(tt.braceR);\r\n    return finishNode(node, \"BlockStatement\");\r\n  }\r\n\r\n  function parseFor(node, init) {\r\n    node.init = init;\r\n    node.test = node.update = null;\r\n    if (eat(tt.semi) && token.type !== tt.semi) node.test = parseExpression();\r\n    if (eat(tt.semi) && token.type !== tt.parenR) node.update = parseExpression();\r\n    popCx();\r\n    expect(tt.parenR);\r\n    node.body = parseStatement();\r\n    return finishNode(node, \"ForStatement\");\r\n  }\r\n\r\n  function parseForIn(node, init) {\r\n    node.left = init;\r\n    node.right = parseExpression();\r\n    popCx();\r\n    expect(tt.parenR);\r\n    node.body = parseStatement();\r\n    return finishNode(node, \"ForInStatement\");\r\n  }\r\n\r\n  function parseVar(node, noIn) {\r\n    node.declarations = [];\r\n    node.kind = \"var\";\r\n    while (token.type === tt.name) {\r\n      var decl = startNode();\r\n      decl.id = parseIdent();\r\n      decl.init = eat(tt.eq) ? parseExpression(true, noIn) : null;\r\n      node.declarations.push(finishNode(decl, \"VariableDeclarator\"));\r\n      if (!eat(tt.comma)) break;\r\n    }\r\n    return finishNode(node, \"VariableDeclaration\");\r\n  }\r\n\r\n  function parseExpression(noComma, noIn) {\r\n    var expr = parseMaybeAssign(noIn);\r\n    if (!noComma && token.type === tt.comma) {\r\n      var node = startNodeFrom(expr);\r\n      node.expressions = [expr];\r\n      while (eat(tt.comma)) node.expressions.push(parseMaybeAssign(noIn));\r\n      return finishNode(node, \"SequenceExpression\");\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  function parseParenExpression() {\r\n    pushCx();\r\n    expect(tt.parenL);\r\n    var val = parseExpression();\r\n    popCx();\r\n    expect(tt.parenR);\r\n    return val;\r\n  }\r\n\r\n  function parseMaybeAssign(noIn) {\r\n    var left = parseMaybeConditional(noIn);\r\n    if (token.type.isAssign) {\r\n      var node = startNodeFrom(left);\r\n      node.operator = token.value;\r\n      node.left = checkLVal(left);\r\n      next();\r\n      node.right = parseMaybeAssign(noIn);\r\n      return finishNode(node, \"AssignmentExpression\");\r\n    }\r\n    return left;\r\n  }\r\n\r\n  function parseMaybeConditional(noIn) {\r\n    var expr = parseExprOps(noIn);\r\n    if (eat(tt.question)) {\r\n      var node = startNodeFrom(expr);\r\n      node.test = expr;\r\n      node.consequent = parseExpression(true);\r\n      node.alternate = expect(tt.colon) ? parseExpression(true, noIn) : dummyIdent();\r\n      return finishNode(node, \"ConditionalExpression\");\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  function parseExprOps(noIn) {\r\n    var indent = curIndent, line = curLineStart;\r\n    return parseExprOp(parseMaybeUnary(noIn), -1, noIn, indent, line);\r\n  }\r\n\r\n  function parseExprOp(left, minPrec, noIn, indent, line) {\r\n    if (curLineStart != line && curIndent < indent && tokenStartsLine()) return left;\r\n    var prec = token.type.binop;\r\n    if (prec != null && (!noIn || token.type !== tt._in)) {\r\n      if (prec > minPrec) {\r\n        var node = startNodeFrom(left);\r\n        node.left = left;\r\n        node.operator = token.value;\r\n        next();\r\n        if (curLineStart != line && curIndent < indent && tokenStartsLine())\r\n          node.right = dummyIdent();\r\n        else\r\n          node.right = parseExprOp(parseMaybeUnary(noIn), prec, noIn, indent, line);\r\n        var node = finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\r\n        return parseExprOp(node, minPrec, noIn, indent, line);\r\n      }\r\n    }\r\n    return left;\r\n  }\r\n\r\n  function parseMaybeUnary(noIn) {\r\n    if (token.type.prefix) {\r\n      var node = startNode(), update = token.type.isUpdate;\r\n      node.operator = token.value;\r\n      node.prefix = true;\r\n      next();\r\n      node.argument = parseMaybeUnary(noIn);\r\n      if (update) node.argument = checkLVal(node.argument);\r\n      return finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\r\n    }\r\n    var expr = parseExprSubscripts();\r\n    while (token.type.postfix && !canInsertSemicolon()) {\r\n      var node = startNodeFrom(expr);\r\n      node.operator = token.value;\r\n      node.prefix = false;\r\n      node.argument = checkLVal(expr);\r\n      next();\r\n      expr = finishNode(node, \"UpdateExpression\");\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  function parseExprSubscripts() {\r\n    var indent = curIndent, line = curLineStart;\r\n    return parseSubscripts(parseExprAtom(), false, curIndent, line);\r\n  }\r\n\r\n  function parseSubscripts(base, noCalls, startIndent, line) {\r\n    for (;;) {\r\n      if (curLineStart != line && curIndent <= startIndent && tokenStartsLine()) {\r\n        if (token.type == tt.dot && curIndent == startIndent)\r\n          --startIndent;\r\n        else\r\n          return base;\r\n      }\r\n\r\n      if (eat(tt.dot)) {\r\n        var node = startNodeFrom(base);\r\n        node.object = base;\r\n        if (curLineStart != line && curIndent <= startIndent && tokenStartsLine())\r\n          node.property = dummyIdent();\r\n        else\r\n          node.property = parsePropertyName() || dummyIdent();\r\n        node.computed = false;\r\n        base = finishNode(node, \"MemberExpression\");\r\n      } else if (token.type == tt.bracketL) {\r\n        pushCx();\r\n        next();\r\n        var node = startNodeFrom(base);\r\n        node.object = base;\r\n        node.property = parseExpression();\r\n        node.computed = true;\r\n        popCx();\r\n        expect(tt.bracketR);\r\n        base = finishNode(node, \"MemberExpression\");\r\n      } else if (!noCalls && token.type == tt.parenL) {\r\n        pushCx();\r\n        var node = startNodeFrom(base);\r\n        node.callee = base;\r\n        node.arguments = parseExprList(tt.parenR);\r\n        base = finishNode(node, \"CallExpression\");\r\n      } else {\r\n        return base;\r\n      }\r\n    }\r\n  }\r\n\r\n  function parseExprAtom() {\r\n    switch (token.type) {\r\n    case tt._this:\r\n      var node = startNode();\r\n      next();\r\n      return finishNode(node, \"ThisExpression\");\r\n    case tt.name:\r\n      return parseIdent();\r\n    case tt.num: case tt.string: case tt.regexp:\r\n      var node = startNode();\r\n      node.value = token.value;\r\n      node.raw = input.slice(token.start, token.end);\r\n      next();\r\n      return finishNode(node, \"Literal\");\r\n\r\n    case tt._null: case tt._true: case tt._false:\r\n      var node = startNode();\r\n      node.value = token.type.atomValue;\r\n      node.raw = token.type.keyword;\r\n      next();\r\n      return finishNode(node, \"Literal\");\r\n\r\n    case tt.parenL:\r\n      var tokStart1 = token.start;\r\n      next();\r\n      var val = parseExpression();\r\n      val.start = tokStart1;\r\n      val.end = token.end;\r\n      expect(tt.parenR);\r\n      return val;\r\n\r\n    case tt.bracketL:\r\n      var node = startNode();\r\n      pushCx();\r\n      node.elements = parseExprList(tt.bracketR);\r\n      return finishNode(node, \"ArrayExpression\");\r\n\r\n    case tt.braceL:\r\n      return parseObj();\r\n\r\n    case tt._function:\r\n      var node = startNode();\r\n      next();\r\n      return parseFunction(node, false);\r\n\r\n    case tt._new:\r\n      return parseNew();\r\n\r\n    default:\r\n      return dummyIdent();\r\n    }\r\n  }\r\n\r\n  function parseNew() {\r\n    var node = startNode(), startIndent = curIndent, line = curLineStart;\r\n    next();\r\n    node.callee = parseSubscripts(parseExprAtom(), true, startIndent, line);\r\n    if (token.type == tt.parenL) {\r\n      pushCx();\r\n      node.arguments = parseExprList(tt.parenR);\r\n    } else {\r\n      node.arguments = [];\r\n    }\r\n    return finishNode(node, \"NewExpression\");\r\n  }\r\n\r\n  function parseObj() {\r\n    var node = startNode();\r\n    node.properties = [];\r\n    pushCx();\r\n    next();\r\n    var propIndent = curIndent, line = curLineStart;\r\n    while (!closes(tt.braceR, propIndent, line)) {\r\n      var name = parsePropertyName();\r\n      if (!name) { if (isDummy(parseExpression(true))) next(); eat(tt.comma); continue; }\r\n      var prop = {key: name}, isGetSet = false, kind;\r\n      if (eat(tt.colon)) {\r\n        prop.value = parseExpression(true);\r\n        kind = prop.kind = \"init\";\r\n      } else if (options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\r\n                 (prop.key.name === \"get\" || prop.key.name === \"set\")) {\r\n        isGetSet = true;\r\n        kind = prop.kind = prop.key.name;\r\n        prop.key = parsePropertyName() || dummyIdent();\r\n        prop.value = parseFunction(startNode(), false);\r\n      } else {\r\n        next();\r\n        eat(tt.comma);\r\n        continue;\r\n      }\r\n\r\n      node.properties.push(prop);\r\n      eat(tt.comma);\r\n    }\r\n    popCx();\r\n    eat(tt.braceR);\r\n    return finishNode(node, \"ObjectExpression\");\r\n  }\r\n\r\n  function parsePropertyName() {\r\n    if (token.type === tt.num || token.type === tt.string) return parseExprAtom();\r\n    if (token.type === tt.name || token.type.keyword) return parseIdent();\r\n  }\r\n\r\n  function parseIdent() {\r\n    var node = startNode();\r\n    node.name = token.type === tt.name ? token.value : token.type.keyword;\r\n    next();\r\n    return finishNode(node, \"Identifier\");\r\n  }\r\n\r\n  function parseFunction(node, isStatement) {\r\n    if (token.type === tt.name) node.id = parseIdent();\r\n    else if (isStatement) node.id = dummyIdent();\r\n    else node.id = null;\r\n    node.params = [];\r\n    pushCx();\r\n    expect(tt.parenL);\r\n    while (token.type == tt.name) {\r\n      node.params.push(parseIdent());\r\n      eat(tt.comma);\r\n    }\r\n    popCx();\r\n    eat(tt.parenR);\r\n    node.body = parseBlock();\r\n    return finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\r\n  }\r\n\r\n  function parseExprList(close) {\r\n    var indent = curIndent, line = curLineStart, elts = [], continuedLine = nextLineStart;\r\n    next(); // Opening bracket\r\n    while (!closes(close, indent + (curLineStart <= continuedLine ? 1 : 0), line)) {\r\n      var elt = parseExpression(true);\r\n      if (isDummy(elt)) {\r\n        if (closes(close, indent, line)) break;\r\n        next();\r\n      } else {\r\n        elts.push(elt);\r\n      }\r\n      while (eat(tt.comma)) {}\r\n    }\r\n    popCx();\r\n    eat(close);\r\n    return elts;\r\n  }\r\n});\r\n\r\n},{\"./acorn\":19}],21:[function(require,module,exports){\r\nmodule.exports={\"type\":\"Program\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":7}}},\"init\":{\"type\":\"ObjectExpression\",\"properties\":[],\"loc\":{\"start\":{\"line\":1,\"column\":10},\"end\":{\"line\":1,\"column\":12}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":12}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":13}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":2,\"column\":4},\"end\":{\"line\":2,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":5,\"column\":5},\"end\":{\"line\":5,\"column\":14}}},\"init\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Array\",\"loc\":{\"start\":{\"line\":5,\"column\":17},\"end\":{\"line\":5,\"column\":22}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isArray\",\"loc\":{\"start\":{\"line\":5,\"column\":23},\"end\":{\"line\":5,\"column\":30}}},\"loc\":{\"start\":{\"line\":5,\"column\":17},\"end\":{\"line\":5,\"column\":30}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"obj\",\"loc\":{\"start\":{\"line\":5,\"column\":43},\"end\":{\"line\":5,\"column\":46}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"toString\",\"loc\":{\"start\":{\"line\":5,\"column\":57},\"end\":{\"line\":5,\"column\":65}}},\"property\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":5,\"column\":66},\"end\":{\"line\":5,\"column\":70}}},\"loc\":{\"start\":{\"line\":5,\"column\":57},\"end\":{\"line\":5,\"column\":70}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"obj\",\"loc\":{\"start\":{\"line\":5,\"column\":71},\"end\":{\"line\":5,\"column\":74}}}],\"loc\":{\"start\":{\"line\":5,\"column\":57},\"end\":{\"line\":5,\"column\":75}}},\"right\":{\"type\":\"Literal\",\"value\":\"[object Array]\",\"raw\":\"'[object Array]'\",\"loc\":{\"start\":{\"line\":5,\"column\":80},\"end\":{\"line\":5,\"column\":96}}},\"loc\":{\"start\":{\"line\":5,\"column\":57},\"end\":{\"line\":5,\"column\":96}}},\"loc\":{\"start\":{\"line\":5,\"column\":50},\"end\":{\"line\":5,\"column\":97}}}],\"loc\":{\"start\":{\"line\":5,\"column\":48},\"end\":{\"line\":5,\"column\":99}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":5,\"column\":34},\"end\":{\"line\":5,\"column\":99}}},\"loc\":{\"start\":{\"line\":5,\"column\":17},\"end\":{\"line\":5,\"column\":99}}},\"loc\":{\"start\":{\"line\":5,\"column\":5},\"end\":{\"line\":5,\"column\":99}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":5,\"column\":1},\"end\":{\"line\":5,\"column\":100}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":7,\"column\":10},\"end\":{\"line\":7,\"column\":14}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":7,\"column\":15},\"end\":{\"line\":7,\"column\":19}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":8,\"column\":7},\"end\":{\"line\":8,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":8,\"column\":16},\"end\":{\"line\":8,\"column\":20}}},\"loc\":{\"start\":{\"line\":8,\"column\":7},\"end\":{\"line\":8,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":8,\"column\":24},\"end\":{\"line\":8,\"column\":28}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":8,\"column\":33},\"end\":{\"line\":8,\"column\":42}}},\"loc\":{\"start\":{\"line\":8,\"column\":24},\"end\":{\"line\":8,\"column\":42}}},\"loc\":{\"start\":{\"line\":8,\"column\":7},\"end\":{\"line\":8,\"column\":42}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"nil\",\"raw\":\"\\\"nil\\\"\",\"loc\":{\"start\":{\"line\":8,\"column\":52},\"end\":{\"line\":8,\"column\":57}}},\"loc\":{\"start\":{\"line\":8,\"column\":45},\"end\":{\"line\":8,\"column\":58}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":8,\"column\":2},\"end\":{\"line\":8,\"column\":58}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"isNaN\",\"loc\":{\"start\":{\"line\":9,\"column\":7},\"end\":{\"line\":9,\"column\":12}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":9,\"column\":13},\"end\":{\"line\":9,\"column\":17}}}],\"loc\":{\"start\":{\"line\":9,\"column\":7},\"end\":{\"line\":9,\"column\":18}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":9,\"column\":28},\"end\":{\"line\":9,\"column\":36}}},\"loc\":{\"start\":{\"line\":9,\"column\":21},\"end\":{\"line\":9,\"column\":37}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":9,\"column\":2},\"end\":{\"line\":9,\"column\":37}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":10,\"column\":6},\"end\":{\"line\":10,\"column\":7}}},\"init\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":10,\"column\":17},\"end\":{\"line\":10,\"column\":21}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":10,\"column\":10},\"end\":{\"line\":10,\"column\":21}}},\"loc\":{\"start\":{\"line\":10,\"column\":6},\"end\":{\"line\":10,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":10,\"column\":2},\"end\":{\"line\":10,\"column\":22}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":11,\"column\":7},\"end\":{\"line\":11,\"column\":8}}},\"right\":{\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"\\\"object\\\"\",\"loc\":{\"start\":{\"line\":11,\"column\":12},\"end\":{\"line\":11,\"column\":20}}},\"loc\":{\"start\":{\"line\":11,\"column\":7},\"end\":{\"line\":11,\"column\":20}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"table\",\"raw\":\"\\\"table\\\"\",\"loc\":{\"start\":{\"line\":11,\"column\":30},\"end\":{\"line\":11,\"column\":37}}},\"loc\":{\"start\":{\"line\":11,\"column\":23},\"end\":{\"line\":11,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":11,\"column\":2},\"end\":{\"line\":11,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":12,\"column\":9},\"end\":{\"line\":12,\"column\":10}}},\"loc\":{\"start\":{\"line\":12,\"column\":2},\"end\":{\"line\":12,\"column\":11}}}],\"loc\":{\"start\":{\"line\":7,\"column\":21},\"end\":{\"line\":13,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":7,\"column\":1},\"end\":{\"line\":13,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":15,\"column\":10},\"end\":{\"line\":15,\"column\":24}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":15,\"column\":25},\"end\":{\"line\":15,\"column\":26}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":16,\"column\":7},\"end\":{\"line\":16,\"column\":11}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":16,\"column\":12},\"end\":{\"line\":16,\"column\":13}}}],\"loc\":{\"start\":{\"line\":16,\"column\":7},\"end\":{\"line\":16,\"column\":14}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":16,\"column\":18},\"end\":{\"line\":16,\"column\":26}}},\"loc\":{\"start\":{\"line\":16,\"column\":7},\"end\":{\"line\":16,\"column\":26}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":16,\"column\":36},\"end\":{\"line\":16,\"column\":37}}},\"loc\":{\"start\":{\"line\":16,\"column\":29},\"end\":{\"line\":16,\"column\":38}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":17,\"column\":19},\"end\":{\"line\":17,\"column\":20}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":17,\"column\":12},\"end\":{\"line\":17,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"\\\"string\\\"\",\"loc\":{\"start\":{\"line\":17,\"column\":24},\"end\":{\"line\":17,\"column\":32}}},\"loc\":{\"start\":{\"line\":17,\"column\":12},\"end\":{\"line\":17,\"column\":32}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":18,\"column\":3},\"end\":{\"line\":18,\"column\":4}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseInt\",\"loc\":{\"start\":{\"line\":18,\"column\":7},\"end\":{\"line\":18,\"column\":15}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":18,\"column\":16},\"end\":{\"line\":18,\"column\":17}}}],\"loc\":{\"start\":{\"line\":18,\"column\":7},\"end\":{\"line\":18,\"column\":18}}},\"loc\":{\"start\":{\"line\":18,\"column\":3},\"end\":{\"line\":18,\"column\":18}}},\"loc\":{\"start\":{\"line\":18,\"column\":3},\"end\":{\"line\":18,\"column\":19}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"isNaN\",\"loc\":{\"start\":{\"line\":19,\"column\":9},\"end\":{\"line\":19,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":19,\"column\":15},\"end\":{\"line\":19,\"column\":16}}}],\"loc\":{\"start\":{\"line\":19,\"column\":9},\"end\":{\"line\":19,\"column\":17}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":19,\"column\":8},\"end\":{\"line\":19,\"column\":17}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":19,\"column\":27},\"end\":{\"line\":19,\"column\":28}}},\"loc\":{\"start\":{\"line\":19,\"column\":20},\"end\":{\"line\":19,\"column\":29}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":19,\"column\":3},\"end\":{\"line\":19,\"column\":29}}}],\"loc\":{\"start\":{\"line\":17,\"column\":35},\"end\":{\"line\":21,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":17,\"column\":7},\"end\":{\"line\":21,\"column\":3}}},\"loc\":{\"start\":{\"line\":16,\"column\":2},\"end\":{\"line\":21,\"column\":3}}},{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to perform arithmetic on a \",\"raw\":\"\\\"attempt to perform arithmetic on a \\\"\",\"loc\":{\"start\":{\"line\":23,\"column\":8},\"end\":{\"line\":23,\"column\":45}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":23,\"column\":49},\"end\":{\"line\":23,\"column\":53}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":23,\"column\":54},\"end\":{\"line\":23,\"column\":55}}}],\"loc\":{\"start\":{\"line\":23,\"column\":49},\"end\":{\"line\":23,\"column\":56}}},\"loc\":{\"start\":{\"line\":23,\"column\":8},\"end\":{\"line\":23,\"column\":56}}},\"right\":{\"type\":\"Literal\",\"value\":\" value: \",\"raw\":\"\\\" value: \\\"\",\"loc\":{\"start\":{\"line\":23,\"column\":59},\"end\":{\"line\":23,\"column\":69}}},\"loc\":{\"start\":{\"line\":23,\"column\":8},\"end\":{\"line\":23,\"column\":69}}},\"right\":{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":23,\"column\":72},\"end\":{\"line\":23,\"column\":73}}},\"loc\":{\"start\":{\"line\":23,\"column\":8},\"end\":{\"line\":23,\"column\":73}}},\"loc\":{\"start\":{\"line\":23,\"column\":2},\"end\":{\"line\":23,\"column\":74}}}],\"loc\":{\"start\":{\"line\":15,\"column\":28},\"end\":{\"line\":24,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":15,\"column\":1},\"end\":{\"line\":24,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":26,\"column\":10},\"end\":{\"line\":26,\"column\":20}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":26,\"column\":21},\"end\":{\"line\":26,\"column\":22}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":27,\"column\":2},\"end\":{\"line\":27,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":27,\"column\":6},\"end\":{\"line\":27,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":27,\"column\":15},\"end\":{\"line\":27,\"column\":16}}}],\"loc\":{\"start\":{\"line\":27,\"column\":6},\"end\":{\"line\":27,\"column\":17}}},\"loc\":{\"start\":{\"line\":27,\"column\":2},\"end\":{\"line\":27,\"column\":17}}},\"loc\":{\"start\":{\"line\":27,\"column\":2},\"end\":{\"line\":27,\"column\":18}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":29,\"column\":6},\"end\":{\"line\":29,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":29,\"column\":12},\"end\":{\"line\":29,\"column\":27}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":29,\"column\":28},\"end\":{\"line\":29,\"column\":29}}},{\"type\":\"Literal\",\"value\":\"__tostring\",\"raw\":\"\\\"__tostring\\\"\",\"loc\":{\"start\":{\"line\":29,\"column\":31},\"end\":{\"line\":29,\"column\":43}}}],\"loc\":{\"start\":{\"line\":29,\"column\":12},\"end\":{\"line\":29,\"column\":44}}},\"loc\":{\"start\":{\"line\":29,\"column\":6},\"end\":{\"line\":29,\"column\":44}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":29,\"column\":2},\"end\":{\"line\":29,\"column\":45}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":30,\"column\":7},\"end\":{\"line\":30,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":30,\"column\":15},\"end\":{\"line\":30,\"column\":19}}},\"loc\":{\"start\":{\"line\":30,\"column\":7},\"end\":{\"line\":30,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":30,\"column\":29},\"end\":{\"line\":30,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":30,\"column\":33},\"end\":{\"line\":30,\"column\":34}}}],\"loc\":{\"start\":{\"line\":30,\"column\":29},\"end\":{\"line\":30,\"column\":35}}},\"loc\":{\"start\":{\"line\":30,\"column\":22},\"end\":{\"line\":30,\"column\":36}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":30,\"column\":2},\"end\":{\"line\":30,\"column\":36}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":32,\"column\":7},\"end\":{\"line\":32,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":32,\"column\":13},\"end\":{\"line\":32,\"column\":22}}},\"loc\":{\"start\":{\"line\":32,\"column\":7},\"end\":{\"line\":32,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":32,\"column\":26},\"end\":{\"line\":32,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":32,\"column\":32},\"end\":{\"line\":32,\"column\":36}}},\"loc\":{\"start\":{\"line\":32,\"column\":26},\"end\":{\"line\":32,\"column\":36}}},\"loc\":{\"start\":{\"line\":32,\"column\":7},\"end\":{\"line\":32,\"column\":36}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"nil\",\"raw\":\"\\\"nil\\\"\",\"loc\":{\"start\":{\"line\":32,\"column\":46},\"end\":{\"line\":32,\"column\":51}}},\"loc\":{\"start\":{\"line\":32,\"column\":39},\"end\":{\"line\":32,\"column\":52}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":32,\"column\":2},\"end\":{\"line\":32,\"column\":52}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":33,\"column\":7},\"end\":{\"line\":33,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":33,\"column\":20},\"end\":{\"line\":33,\"column\":28}}},\"loc\":{\"start\":{\"line\":33,\"column\":7},\"end\":{\"line\":33,\"column\":28}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"table: 0x\",\"raw\":\"\\\"table: 0x\\\"\",\"loc\":{\"start\":{\"line\":34,\"column\":10},\"end\":{\"line\":34,\"column\":21}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":34,\"column\":24},\"end\":{\"line\":34,\"column\":25}}},\"property\":{\"type\":\"Identifier\",\"name\":\"id\",\"loc\":{\"start\":{\"line\":34,\"column\":26},\"end\":{\"line\":34,\"column\":28}}},\"loc\":{\"start\":{\"line\":34,\"column\":24},\"end\":{\"line\":34,\"column\":28}}},\"loc\":{\"start\":{\"line\":34,\"column\":10},\"end\":{\"line\":34,\"column\":28}}},\"loc\":{\"start\":{\"line\":34,\"column\":3},\"end\":{\"line\":34,\"column\":29}}}],\"loc\":{\"start\":{\"line\":33,\"column\":31},\"end\":{\"line\":35,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":35,\"column\":21},\"end\":{\"line\":35,\"column\":22}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":35,\"column\":14},\"end\":{\"line\":35,\"column\":22}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":35,\"column\":26},\"end\":{\"line\":35,\"column\":34}}},\"loc\":{\"start\":{\"line\":35,\"column\":14},\"end\":{\"line\":35,\"column\":34}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"~\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"~\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":36,\"column\":10},\"end\":{\"line\":36,\"column\":11}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":36,\"column\":9},\"end\":{\"line\":36,\"column\":11}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":36,\"column\":8},\"end\":{\"line\":36,\"column\":11}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":36,\"column\":15},\"end\":{\"line\":36,\"column\":16}}},\"loc\":{\"start\":{\"line\":36,\"column\":8},\"end\":{\"line\":36,\"column\":16}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":36,\"column\":26},\"end\":{\"line\":36,\"column\":27}}},\"property\":{\"type\":\"Identifier\",\"name\":\"toString\",\"loc\":{\"start\":{\"line\":36,\"column\":28},\"end\":{\"line\":36,\"column\":36}}},\"loc\":{\"start\":{\"line\":36,\"column\":26},\"end\":{\"line\":36,\"column\":36}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":36,\"column\":26},\"end\":{\"line\":36,\"column\":38}}},\"loc\":{\"start\":{\"line\":36,\"column\":19},\"end\":{\"line\":36,\"column\":39}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":36,\"column\":3},\"end\":{\"line\":36,\"column\":39}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"rep\",\"loc\":{\"start\":{\"line\":37,\"column\":7},\"end\":{\"line\":37,\"column\":10}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":37,\"column\":13},\"end\":{\"line\":37,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"toPrecision\",\"loc\":{\"start\":{\"line\":37,\"column\":15},\"end\":{\"line\":37,\"column\":26}}},\"loc\":{\"start\":{\"line\":37,\"column\":13},\"end\":{\"line\":37,\"column\":26}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":37,\"column\":13},\"end\":{\"line\":37,\"column\":28}}},\"loc\":{\"start\":{\"line\":37,\"column\":7},\"end\":{\"line\":37,\"column\":28}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":37,\"column\":3},\"end\":{\"line\":37,\"column\":29}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"rep\",\"loc\":{\"start\":{\"line\":38,\"column\":8},\"end\":{\"line\":38,\"column\":11}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":38,\"column\":12},\"end\":{\"line\":38,\"column\":18}}},\"loc\":{\"start\":{\"line\":38,\"column\":8},\"end\":{\"line\":38,\"column\":18}}},\"right\":{\"type\":\"Literal\",\"value\":14,\"raw\":\"14\",\"loc\":{\"start\":{\"line\":38,\"column\":21},\"end\":{\"line\":38,\"column\":23}}},\"loc\":{\"start\":{\"line\":38,\"column\":8},\"end\":{\"line\":38,\"column\":23}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":38,\"column\":33},\"end\":{\"line\":38,\"column\":34}}},\"property\":{\"type\":\"Identifier\",\"name\":\"toPrecision\",\"loc\":{\"start\":{\"line\":38,\"column\":35},\"end\":{\"line\":38,\"column\":46}}},\"loc\":{\"start\":{\"line\":38,\"column\":33},\"end\":{\"line\":38,\"column\":46}}},\"arguments\":[{\"type\":\"Literal\",\"value\":14,\"raw\":\"14\",\"loc\":{\"start\":{\"line\":38,\"column\":47},\"end\":{\"line\":38,\"column\":49}}}],\"loc\":{\"start\":{\"line\":38,\"column\":33},\"end\":{\"line\":38,\"column\":50}}},\"loc\":{\"start\":{\"line\":38,\"column\":26},\"end\":{\"line\":38,\"column\":51}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":38,\"column\":3},\"end\":{\"line\":38,\"column\":51}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"rep\",\"loc\":{\"start\":{\"line\":39,\"column\":10},\"end\":{\"line\":39,\"column\":13}}},\"loc\":{\"start\":{\"line\":39,\"column\":3},\"end\":{\"line\":39,\"column\":14}}}],\"loc\":{\"start\":{\"line\":35,\"column\":37},\"end\":{\"line\":40,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":35,\"column\":9},\"end\":{\"line\":40,\"column\":3}}},\"loc\":{\"start\":{\"line\":33,\"column\":2},\"end\":{\"line\":40,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":41,\"column\":9},\"end\":{\"line\":41,\"column\":11}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":41,\"column\":14},\"end\":{\"line\":41,\"column\":15}}},\"loc\":{\"start\":{\"line\":41,\"column\":9},\"end\":{\"line\":41,\"column\":15}}},\"loc\":{\"start\":{\"line\":41,\"column\":2},\"end\":{\"line\":41,\"column\":16}}}],\"loc\":{\"start\":{\"line\":26,\"column\":24},\"end\":{\"line\":42,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":26,\"column\":1},\"end\":{\"line\":42,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"add\",\"loc\":{\"start\":{\"line\":44,\"column\":10},\"end\":{\"line\":44,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":44,\"column\":14},\"end\":{\"line\":44,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":44,\"column\":16},\"end\":{\"line\":44,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":45,\"column\":2},\"end\":{\"line\":45,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":45,\"column\":6},\"end\":{\"line\":45,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":45,\"column\":15},\"end\":{\"line\":45,\"column\":16}}}],\"loc\":{\"start\":{\"line\":45,\"column\":6},\"end\":{\"line\":45,\"column\":17}}},\"loc\":{\"start\":{\"line\":45,\"column\":2},\"end\":{\"line\":45,\"column\":17}}},\"loc\":{\"start\":{\"line\":45,\"column\":2},\"end\":{\"line\":45,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":45,\"column\":19},\"end\":{\"line\":45,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":45,\"column\":23},\"end\":{\"line\":45,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":45,\"column\":32},\"end\":{\"line\":45,\"column\":33}}}],\"loc\":{\"start\":{\"line\":45,\"column\":23},\"end\":{\"line\":45,\"column\":34}}},\"loc\":{\"start\":{\"line\":45,\"column\":19},\"end\":{\"line\":45,\"column\":34}}},\"loc\":{\"start\":{\"line\":45,\"column\":19},\"end\":{\"line\":45,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":47,\"column\":6},\"end\":{\"line\":47,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":47,\"column\":12},\"end\":{\"line\":47,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":47,\"column\":31},\"end\":{\"line\":47,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":47,\"column\":34},\"end\":{\"line\":47,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__add\",\"raw\":\"\\\"__add\\\"\",\"loc\":{\"start\":{\"line\":47,\"column\":37},\"end\":{\"line\":47,\"column\":44}}}],\"loc\":{\"start\":{\"line\":47,\"column\":12},\"end\":{\"line\":47,\"column\":45}}},\"loc\":{\"start\":{\"line\":47,\"column\":6},\"end\":{\"line\":47,\"column\":45}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":47,\"column\":2},\"end\":{\"line\":47,\"column\":46}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":48,\"column\":7},\"end\":{\"line\":48,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":48,\"column\":15},\"end\":{\"line\":48,\"column\":19}}},\"loc\":{\"start\":{\"line\":48,\"column\":7},\"end\":{\"line\":48,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":48,\"column\":29},\"end\":{\"line\":48,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":48,\"column\":33},\"end\":{\"line\":48,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":48,\"column\":35},\"end\":{\"line\":48,\"column\":36}}}],\"loc\":{\"start\":{\"line\":48,\"column\":29},\"end\":{\"line\":48,\"column\":37}}},\"loc\":{\"start\":{\"line\":48,\"column\":22},\"end\":{\"line\":48,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":48,\"column\":2},\"end\":{\"line\":48,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":50,\"column\":9},\"end\":{\"line\":50,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":50,\"column\":24},\"end\":{\"line\":50,\"column\":25}}}],\"loc\":{\"start\":{\"line\":50,\"column\":9},\"end\":{\"line\":50,\"column\":26}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":50,\"column\":29},\"end\":{\"line\":50,\"column\":43}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":50,\"column\":44},\"end\":{\"line\":50,\"column\":45}}}],\"loc\":{\"start\":{\"line\":50,\"column\":29},\"end\":{\"line\":50,\"column\":46}}},\"loc\":{\"start\":{\"line\":50,\"column\":9},\"end\":{\"line\":50,\"column\":46}}},\"loc\":{\"start\":{\"line\":50,\"column\":2},\"end\":{\"line\":50,\"column\":47}}}],\"loc\":{\"start\":{\"line\":44,\"column\":19},\"end\":{\"line\":51,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":44,\"column\":1},\"end\":{\"line\":51,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"sub\",\"loc\":{\"start\":{\"line\":53,\"column\":10},\"end\":{\"line\":53,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":53,\"column\":14},\"end\":{\"line\":53,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":53,\"column\":16},\"end\":{\"line\":53,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":54,\"column\":2},\"end\":{\"line\":54,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":54,\"column\":6},\"end\":{\"line\":54,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":54,\"column\":15},\"end\":{\"line\":54,\"column\":16}}}],\"loc\":{\"start\":{\"line\":54,\"column\":6},\"end\":{\"line\":54,\"column\":17}}},\"loc\":{\"start\":{\"line\":54,\"column\":2},\"end\":{\"line\":54,\"column\":17}}},\"loc\":{\"start\":{\"line\":54,\"column\":2},\"end\":{\"line\":54,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":54,\"column\":19},\"end\":{\"line\":54,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":54,\"column\":23},\"end\":{\"line\":54,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":54,\"column\":32},\"end\":{\"line\":54,\"column\":33}}}],\"loc\":{\"start\":{\"line\":54,\"column\":23},\"end\":{\"line\":54,\"column\":34}}},\"loc\":{\"start\":{\"line\":54,\"column\":19},\"end\":{\"line\":54,\"column\":34}}},\"loc\":{\"start\":{\"line\":54,\"column\":19},\"end\":{\"line\":54,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":56,\"column\":6},\"end\":{\"line\":56,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":56,\"column\":12},\"end\":{\"line\":56,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":56,\"column\":31},\"end\":{\"line\":56,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":56,\"column\":34},\"end\":{\"line\":56,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__sub\",\"raw\":\"\\\"__sub\\\"\",\"loc\":{\"start\":{\"line\":56,\"column\":37},\"end\":{\"line\":56,\"column\":44}}}],\"loc\":{\"start\":{\"line\":56,\"column\":12},\"end\":{\"line\":56,\"column\":45}}},\"loc\":{\"start\":{\"line\":56,\"column\":6},\"end\":{\"line\":56,\"column\":45}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":56,\"column\":2},\"end\":{\"line\":56,\"column\":46}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":57,\"column\":7},\"end\":{\"line\":57,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":57,\"column\":15},\"end\":{\"line\":57,\"column\":19}}},\"loc\":{\"start\":{\"line\":57,\"column\":7},\"end\":{\"line\":57,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":57,\"column\":29},\"end\":{\"line\":57,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":57,\"column\":33},\"end\":{\"line\":57,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":57,\"column\":35},\"end\":{\"line\":57,\"column\":36}}}],\"loc\":{\"start\":{\"line\":57,\"column\":29},\"end\":{\"line\":57,\"column\":37}}},\"loc\":{\"start\":{\"line\":57,\"column\":22},\"end\":{\"line\":57,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":57,\"column\":2},\"end\":{\"line\":57,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":59,\"column\":9},\"end\":{\"line\":59,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":59,\"column\":24},\"end\":{\"line\":59,\"column\":25}}}],\"loc\":{\"start\":{\"line\":59,\"column\":9},\"end\":{\"line\":59,\"column\":26}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":59,\"column\":29},\"end\":{\"line\":59,\"column\":43}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":59,\"column\":44},\"end\":{\"line\":59,\"column\":45}}}],\"loc\":{\"start\":{\"line\":59,\"column\":29},\"end\":{\"line\":59,\"column\":46}}},\"loc\":{\"start\":{\"line\":59,\"column\":9},\"end\":{\"line\":59,\"column\":46}}},\"loc\":{\"start\":{\"line\":59,\"column\":2},\"end\":{\"line\":59,\"column\":47}}}],\"loc\":{\"start\":{\"line\":53,\"column\":19},\"end\":{\"line\":60,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":53,\"column\":1},\"end\":{\"line\":60,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"mul\",\"loc\":{\"start\":{\"line\":62,\"column\":10},\"end\":{\"line\":62,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":62,\"column\":14},\"end\":{\"line\":62,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":62,\"column\":16},\"end\":{\"line\":62,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":63,\"column\":2},\"end\":{\"line\":63,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":63,\"column\":6},\"end\":{\"line\":63,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":63,\"column\":15},\"end\":{\"line\":63,\"column\":16}}}],\"loc\":{\"start\":{\"line\":63,\"column\":6},\"end\":{\"line\":63,\"column\":17}}},\"loc\":{\"start\":{\"line\":63,\"column\":2},\"end\":{\"line\":63,\"column\":17}}},\"loc\":{\"start\":{\"line\":63,\"column\":2},\"end\":{\"line\":63,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":63,\"column\":19},\"end\":{\"line\":63,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":63,\"column\":23},\"end\":{\"line\":63,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":63,\"column\":32},\"end\":{\"line\":63,\"column\":33}}}],\"loc\":{\"start\":{\"line\":63,\"column\":23},\"end\":{\"line\":63,\"column\":34}}},\"loc\":{\"start\":{\"line\":63,\"column\":19},\"end\":{\"line\":63,\"column\":34}}},\"loc\":{\"start\":{\"line\":63,\"column\":19},\"end\":{\"line\":63,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":65,\"column\":6},\"end\":{\"line\":65,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":65,\"column\":12},\"end\":{\"line\":65,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":65,\"column\":31},\"end\":{\"line\":65,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":65,\"column\":34},\"end\":{\"line\":65,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__mul\",\"raw\":\"\\\"__mul\\\"\",\"loc\":{\"start\":{\"line\":65,\"column\":37},\"end\":{\"line\":65,\"column\":44}}}],\"loc\":{\"start\":{\"line\":65,\"column\":12},\"end\":{\"line\":65,\"column\":45}}},\"loc\":{\"start\":{\"line\":65,\"column\":6},\"end\":{\"line\":65,\"column\":45}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":65,\"column\":2},\"end\":{\"line\":65,\"column\":46}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":66,\"column\":7},\"end\":{\"line\":66,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":66,\"column\":15},\"end\":{\"line\":66,\"column\":19}}},\"loc\":{\"start\":{\"line\":66,\"column\":7},\"end\":{\"line\":66,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":66,\"column\":29},\"end\":{\"line\":66,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":66,\"column\":33},\"end\":{\"line\":66,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":66,\"column\":35},\"end\":{\"line\":66,\"column\":36}}}],\"loc\":{\"start\":{\"line\":66,\"column\":29},\"end\":{\"line\":66,\"column\":37}}},\"loc\":{\"start\":{\"line\":66,\"column\":22},\"end\":{\"line\":66,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":66,\"column\":2},\"end\":{\"line\":66,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"*\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":68,\"column\":9},\"end\":{\"line\":68,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":68,\"column\":24},\"end\":{\"line\":68,\"column\":25}}}],\"loc\":{\"start\":{\"line\":68,\"column\":9},\"end\":{\"line\":68,\"column\":26}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":68,\"column\":29},\"end\":{\"line\":68,\"column\":43}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":68,\"column\":44},\"end\":{\"line\":68,\"column\":45}}}],\"loc\":{\"start\":{\"line\":68,\"column\":29},\"end\":{\"line\":68,\"column\":46}}},\"loc\":{\"start\":{\"line\":68,\"column\":9},\"end\":{\"line\":68,\"column\":46}}},\"loc\":{\"start\":{\"line\":68,\"column\":2},\"end\":{\"line\":68,\"column\":47}}}],\"loc\":{\"start\":{\"line\":62,\"column\":19},\"end\":{\"line\":69,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":62,\"column\":1},\"end\":{\"line\":69,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"div\",\"loc\":{\"start\":{\"line\":71,\"column\":10},\"end\":{\"line\":71,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":71,\"column\":14},\"end\":{\"line\":71,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":71,\"column\":16},\"end\":{\"line\":71,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":72,\"column\":2},\"end\":{\"line\":72,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":72,\"column\":6},\"end\":{\"line\":72,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":72,\"column\":15},\"end\":{\"line\":72,\"column\":16}}}],\"loc\":{\"start\":{\"line\":72,\"column\":6},\"end\":{\"line\":72,\"column\":17}}},\"loc\":{\"start\":{\"line\":72,\"column\":2},\"end\":{\"line\":72,\"column\":17}}},\"loc\":{\"start\":{\"line\":72,\"column\":2},\"end\":{\"line\":72,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":72,\"column\":19},\"end\":{\"line\":72,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":72,\"column\":23},\"end\":{\"line\":72,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":72,\"column\":32},\"end\":{\"line\":72,\"column\":33}}}],\"loc\":{\"start\":{\"line\":72,\"column\":23},\"end\":{\"line\":72,\"column\":34}}},\"loc\":{\"start\":{\"line\":72,\"column\":19},\"end\":{\"line\":72,\"column\":34}}},\"loc\":{\"start\":{\"line\":72,\"column\":19},\"end\":{\"line\":72,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":74,\"column\":6},\"end\":{\"line\":74,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":74,\"column\":12},\"end\":{\"line\":74,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":74,\"column\":31},\"end\":{\"line\":74,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":74,\"column\":34},\"end\":{\"line\":74,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__div\",\"raw\":\"\\\"__div\\\"\",\"loc\":{\"start\":{\"line\":74,\"column\":37},\"end\":{\"line\":74,\"column\":44}}}],\"loc\":{\"start\":{\"line\":74,\"column\":12},\"end\":{\"line\":74,\"column\":45}}},\"loc\":{\"start\":{\"line\":74,\"column\":6},\"end\":{\"line\":74,\"column\":45}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":74,\"column\":2},\"end\":{\"line\":74,\"column\":46}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":75,\"column\":7},\"end\":{\"line\":75,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":75,\"column\":15},\"end\":{\"line\":75,\"column\":19}}},\"loc\":{\"start\":{\"line\":75,\"column\":7},\"end\":{\"line\":75,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":75,\"column\":29},\"end\":{\"line\":75,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":75,\"column\":33},\"end\":{\"line\":75,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":75,\"column\":35},\"end\":{\"line\":75,\"column\":36}}}],\"loc\":{\"start\":{\"line\":75,\"column\":29},\"end\":{\"line\":75,\"column\":37}}},\"loc\":{\"start\":{\"line\":75,\"column\":22},\"end\":{\"line\":75,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":75,\"column\":2},\"end\":{\"line\":75,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"/\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":77,\"column\":9},\"end\":{\"line\":77,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":77,\"column\":24},\"end\":{\"line\":77,\"column\":25}}}],\"loc\":{\"start\":{\"line\":77,\"column\":9},\"end\":{\"line\":77,\"column\":26}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":77,\"column\":29},\"end\":{\"line\":77,\"column\":43}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":77,\"column\":44},\"end\":{\"line\":77,\"column\":45}}}],\"loc\":{\"start\":{\"line\":77,\"column\":29},\"end\":{\"line\":77,\"column\":46}}},\"loc\":{\"start\":{\"line\":77,\"column\":9},\"end\":{\"line\":77,\"column\":46}}},\"loc\":{\"start\":{\"line\":77,\"column\":2},\"end\":{\"line\":77,\"column\":47}}}],\"loc\":{\"start\":{\"line\":71,\"column\":19},\"end\":{\"line\":78,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":71,\"column\":1},\"end\":{\"line\":78,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"intdiv\",\"loc\":{\"start\":{\"line\":80,\"column\":10},\"end\":{\"line\":80,\"column\":16}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":80,\"column\":17},\"end\":{\"line\":80,\"column\":18}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":80,\"column\":19},\"end\":{\"line\":80,\"column\":20}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":81,\"column\":2},\"end\":{\"line\":81,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":81,\"column\":6},\"end\":{\"line\":81,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":81,\"column\":15},\"end\":{\"line\":81,\"column\":16}}}],\"loc\":{\"start\":{\"line\":81,\"column\":6},\"end\":{\"line\":81,\"column\":17}}},\"loc\":{\"start\":{\"line\":81,\"column\":2},\"end\":{\"line\":81,\"column\":17}}},\"loc\":{\"start\":{\"line\":81,\"column\":2},\"end\":{\"line\":81,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":81,\"column\":19},\"end\":{\"line\":81,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":81,\"column\":23},\"end\":{\"line\":81,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":81,\"column\":32},\"end\":{\"line\":81,\"column\":33}}}],\"loc\":{\"start\":{\"line\":81,\"column\":23},\"end\":{\"line\":81,\"column\":34}}},\"loc\":{\"start\":{\"line\":81,\"column\":19},\"end\":{\"line\":81,\"column\":34}}},\"loc\":{\"start\":{\"line\":81,\"column\":19},\"end\":{\"line\":81,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":83,\"column\":6},\"end\":{\"line\":83,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":83,\"column\":12},\"end\":{\"line\":83,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":83,\"column\":31},\"end\":{\"line\":83,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":83,\"column\":34},\"end\":{\"line\":83,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__idiv\",\"raw\":\"\\\"__idiv\\\"\",\"loc\":{\"start\":{\"line\":83,\"column\":37},\"end\":{\"line\":83,\"column\":45}}}],\"loc\":{\"start\":{\"line\":83,\"column\":12},\"end\":{\"line\":83,\"column\":46}}},\"loc\":{\"start\":{\"line\":83,\"column\":6},\"end\":{\"line\":83,\"column\":46}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":83,\"column\":2},\"end\":{\"line\":83,\"column\":47}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":84,\"column\":7},\"end\":{\"line\":84,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":84,\"column\":15},\"end\":{\"line\":84,\"column\":19}}},\"loc\":{\"start\":{\"line\":84,\"column\":7},\"end\":{\"line\":84,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":84,\"column\":29},\"end\":{\"line\":84,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":84,\"column\":33},\"end\":{\"line\":84,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":84,\"column\":35},\"end\":{\"line\":84,\"column\":36}}}],\"loc\":{\"start\":{\"line\":84,\"column\":29},\"end\":{\"line\":84,\"column\":37}}},\"loc\":{\"start\":{\"line\":84,\"column\":22},\"end\":{\"line\":84,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":84,\"column\":2},\"end\":{\"line\":84,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"~\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"~\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"/\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":86,\"column\":12},\"end\":{\"line\":86,\"column\":26}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":86,\"column\":27},\"end\":{\"line\":86,\"column\":28}}}],\"loc\":{\"start\":{\"line\":86,\"column\":12},\"end\":{\"line\":86,\"column\":29}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":86,\"column\":32},\"end\":{\"line\":86,\"column\":46}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":86,\"column\":47},\"end\":{\"line\":86,\"column\":48}}}],\"loc\":{\"start\":{\"line\":86,\"column\":32},\"end\":{\"line\":86,\"column\":49}}},\"loc\":{\"start\":{\"line\":86,\"column\":12},\"end\":{\"line\":86,\"column\":49}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":86,\"column\":10},\"end\":{\"line\":86,\"column\":50}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":86,\"column\":9},\"end\":{\"line\":86,\"column\":50}}},\"loc\":{\"start\":{\"line\":86,\"column\":2},\"end\":{\"line\":86,\"column\":51}}}],\"loc\":{\"start\":{\"line\":80,\"column\":22},\"end\":{\"line\":87,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":80,\"column\":1},\"end\":{\"line\":87,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"mod\",\"loc\":{\"start\":{\"line\":89,\"column\":10},\"end\":{\"line\":89,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":89,\"column\":14},\"end\":{\"line\":89,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":89,\"column\":16},\"end\":{\"line\":89,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":90,\"column\":2},\"end\":{\"line\":90,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":90,\"column\":6},\"end\":{\"line\":90,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":90,\"column\":15},\"end\":{\"line\":90,\"column\":16}}}],\"loc\":{\"start\":{\"line\":90,\"column\":6},\"end\":{\"line\":90,\"column\":17}}},\"loc\":{\"start\":{\"line\":90,\"column\":2},\"end\":{\"line\":90,\"column\":17}}},\"loc\":{\"start\":{\"line\":90,\"column\":2},\"end\":{\"line\":90,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":90,\"column\":19},\"end\":{\"line\":90,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":90,\"column\":23},\"end\":{\"line\":90,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":90,\"column\":32},\"end\":{\"line\":90,\"column\":33}}}],\"loc\":{\"start\":{\"line\":90,\"column\":23},\"end\":{\"line\":90,\"column\":34}}},\"loc\":{\"start\":{\"line\":90,\"column\":19},\"end\":{\"line\":90,\"column\":34}}},\"loc\":{\"start\":{\"line\":90,\"column\":19},\"end\":{\"line\":90,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":92,\"column\":6},\"end\":{\"line\":92,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":92,\"column\":12},\"end\":{\"line\":92,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":92,\"column\":31},\"end\":{\"line\":92,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":92,\"column\":34},\"end\":{\"line\":92,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__mod\",\"raw\":\"\\\"__mod\\\"\",\"loc\":{\"start\":{\"line\":92,\"column\":37},\"end\":{\"line\":92,\"column\":44}}}],\"loc\":{\"start\":{\"line\":92,\"column\":12},\"end\":{\"line\":92,\"column\":45}}},\"loc\":{\"start\":{\"line\":92,\"column\":6},\"end\":{\"line\":92,\"column\":45}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":92,\"column\":2},\"end\":{\"line\":92,\"column\":46}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":93,\"column\":7},\"end\":{\"line\":93,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":93,\"column\":15},\"end\":{\"line\":93,\"column\":19}}},\"loc\":{\"start\":{\"line\":93,\"column\":7},\"end\":{\"line\":93,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":93,\"column\":29},\"end\":{\"line\":93,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":93,\"column\":33},\"end\":{\"line\":93,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":93,\"column\":35},\"end\":{\"line\":93,\"column\":36}}}],\"loc\":{\"start\":{\"line\":93,\"column\":29},\"end\":{\"line\":93,\"column\":37}}},\"loc\":{\"start\":{\"line\":93,\"column\":22},\"end\":{\"line\":93,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":93,\"column\":2},\"end\":{\"line\":93,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"%\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":95,\"column\":9},\"end\":{\"line\":95,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":95,\"column\":24},\"end\":{\"line\":95,\"column\":25}}}],\"loc\":{\"start\":{\"line\":95,\"column\":9},\"end\":{\"line\":95,\"column\":26}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":95,\"column\":29},\"end\":{\"line\":95,\"column\":43}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":95,\"column\":44},\"end\":{\"line\":95,\"column\":45}}}],\"loc\":{\"start\":{\"line\":95,\"column\":29},\"end\":{\"line\":95,\"column\":46}}},\"loc\":{\"start\":{\"line\":95,\"column\":9},\"end\":{\"line\":95,\"column\":46}}},\"loc\":{\"start\":{\"line\":95,\"column\":2},\"end\":{\"line\":95,\"column\":47}}}],\"loc\":{\"start\":{\"line\":89,\"column\":19},\"end\":{\"line\":96,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":89,\"column\":1},\"end\":{\"line\":96,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"pow\",\"loc\":{\"start\":{\"line\":98,\"column\":10},\"end\":{\"line\":98,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":98,\"column\":14},\"end\":{\"line\":98,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":98,\"column\":16},\"end\":{\"line\":98,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":99,\"column\":2},\"end\":{\"line\":99,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":99,\"column\":6},\"end\":{\"line\":99,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":99,\"column\":15},\"end\":{\"line\":99,\"column\":16}}}],\"loc\":{\"start\":{\"line\":99,\"column\":6},\"end\":{\"line\":99,\"column\":17}}},\"loc\":{\"start\":{\"line\":99,\"column\":2},\"end\":{\"line\":99,\"column\":17}}},\"loc\":{\"start\":{\"line\":99,\"column\":2},\"end\":{\"line\":99,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":99,\"column\":19},\"end\":{\"line\":99,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":99,\"column\":23},\"end\":{\"line\":99,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":99,\"column\":32},\"end\":{\"line\":99,\"column\":33}}}],\"loc\":{\"start\":{\"line\":99,\"column\":23},\"end\":{\"line\":99,\"column\":34}}},\"loc\":{\"start\":{\"line\":99,\"column\":19},\"end\":{\"line\":99,\"column\":34}}},\"loc\":{\"start\":{\"line\":99,\"column\":19},\"end\":{\"line\":99,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":101,\"column\":6},\"end\":{\"line\":101,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":101,\"column\":12},\"end\":{\"line\":101,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":101,\"column\":31},\"end\":{\"line\":101,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":101,\"column\":34},\"end\":{\"line\":101,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__pow\",\"raw\":\"\\\"__pow\\\"\",\"loc\":{\"start\":{\"line\":101,\"column\":37},\"end\":{\"line\":101,\"column\":44}}}],\"loc\":{\"start\":{\"line\":101,\"column\":12},\"end\":{\"line\":101,\"column\":45}}},\"loc\":{\"start\":{\"line\":101,\"column\":6},\"end\":{\"line\":101,\"column\":45}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":101,\"column\":2},\"end\":{\"line\":101,\"column\":46}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":102,\"column\":7},\"end\":{\"line\":102,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":102,\"column\":15},\"end\":{\"line\":102,\"column\":19}}},\"loc\":{\"start\":{\"line\":102,\"column\":7},\"end\":{\"line\":102,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":102,\"column\":29},\"end\":{\"line\":102,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":102,\"column\":33},\"end\":{\"line\":102,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":102,\"column\":35},\"end\":{\"line\":102,\"column\":36}}}],\"loc\":{\"start\":{\"line\":102,\"column\":29},\"end\":{\"line\":102,\"column\":37}}},\"loc\":{\"start\":{\"line\":102,\"column\":22},\"end\":{\"line\":102,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":102,\"column\":2},\"end\":{\"line\":102,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Math\",\"loc\":{\"start\":{\"line\":104,\"column\":9},\"end\":{\"line\":104,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"pow\",\"loc\":{\"start\":{\"line\":104,\"column\":14},\"end\":{\"line\":104,\"column\":17}}},\"loc\":{\"start\":{\"line\":104,\"column\":9},\"end\":{\"line\":104,\"column\":17}}},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":104,\"column\":18},\"end\":{\"line\":104,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":104,\"column\":33},\"end\":{\"line\":104,\"column\":34}}}],\"loc\":{\"start\":{\"line\":104,\"column\":18},\"end\":{\"line\":104,\"column\":35}}},{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"numberForArith\",\"loc\":{\"start\":{\"line\":104,\"column\":36},\"end\":{\"line\":104,\"column\":50}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":104,\"column\":51},\"end\":{\"line\":104,\"column\":52}}}],\"loc\":{\"start\":{\"line\":104,\"column\":36},\"end\":{\"line\":104,\"column\":53}}}],\"loc\":{\"start\":{\"line\":104,\"column\":9},\"end\":{\"line\":104,\"column\":54}}},\"loc\":{\"start\":{\"line\":104,\"column\":2},\"end\":{\"line\":104,\"column\":55}}}],\"loc\":{\"start\":{\"line\":98,\"column\":19},\"end\":{\"line\":105,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":98,\"column\":1},\"end\":{\"line\":105,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"concat\",\"loc\":{\"start\":{\"line\":107,\"column\":10},\"end\":{\"line\":107,\"column\":16}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":107,\"column\":17},\"end\":{\"line\":107,\"column\":18}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":107,\"column\":19},\"end\":{\"line\":107,\"column\":20}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":108,\"column\":2},\"end\":{\"line\":108,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":108,\"column\":6},\"end\":{\"line\":108,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":108,\"column\":15},\"end\":{\"line\":108,\"column\":16}}}],\"loc\":{\"start\":{\"line\":108,\"column\":6},\"end\":{\"line\":108,\"column\":17}}},\"loc\":{\"start\":{\"line\":108,\"column\":2},\"end\":{\"line\":108,\"column\":17}}},\"loc\":{\"start\":{\"line\":108,\"column\":2},\"end\":{\"line\":108,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":108,\"column\":19},\"end\":{\"line\":108,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":108,\"column\":23},\"end\":{\"line\":108,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":108,\"column\":32},\"end\":{\"line\":108,\"column\":33}}}],\"loc\":{\"start\":{\"line\":108,\"column\":23},\"end\":{\"line\":108,\"column\":34}}},\"loc\":{\"start\":{\"line\":108,\"column\":19},\"end\":{\"line\":108,\"column\":34}}},\"loc\":{\"start\":{\"line\":108,\"column\":19},\"end\":{\"line\":108,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":110,\"column\":6},\"end\":{\"line\":110,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":110,\"column\":12},\"end\":{\"line\":110,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":110,\"column\":31},\"end\":{\"line\":110,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":110,\"column\":34},\"end\":{\"line\":110,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__concat\",\"raw\":\"\\\"__concat\\\"\",\"loc\":{\"start\":{\"line\":110,\"column\":37},\"end\":{\"line\":110,\"column\":47}}}],\"loc\":{\"start\":{\"line\":110,\"column\":12},\"end\":{\"line\":110,\"column\":48}}},\"loc\":{\"start\":{\"line\":110,\"column\":6},\"end\":{\"line\":110,\"column\":48}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":110,\"column\":2},\"end\":{\"line\":110,\"column\":49}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":111,\"column\":7},\"end\":{\"line\":111,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":111,\"column\":15},\"end\":{\"line\":111,\"column\":19}}},\"loc\":{\"start\":{\"line\":111,\"column\":7},\"end\":{\"line\":111,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":111,\"column\":29},\"end\":{\"line\":111,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":111,\"column\":33},\"end\":{\"line\":111,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":111,\"column\":35},\"end\":{\"line\":111,\"column\":36}}}],\"loc\":{\"start\":{\"line\":111,\"column\":29},\"end\":{\"line\":111,\"column\":37}}},\"loc\":{\"start\":{\"line\":111,\"column\":22},\"end\":{\"line\":111,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":111,\"column\":2},\"end\":{\"line\":111,\"column\":38}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":112,\"column\":7},\"end\":{\"line\":112,\"column\":8}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":112,\"column\":13},\"end\":{\"line\":112,\"column\":17}}},\"loc\":{\"start\":{\"line\":112,\"column\":7},\"end\":{\"line\":112,\"column\":17}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":112,\"column\":21},\"end\":{\"line\":112,\"column\":22}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":112,\"column\":27},\"end\":{\"line\":112,\"column\":36}}},\"loc\":{\"start\":{\"line\":112,\"column\":21},\"end\":{\"line\":112,\"column\":36}}},\"loc\":{\"start\":{\"line\":112,\"column\":7},\"end\":{\"line\":112,\"column\":36}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":112,\"column\":40},\"end\":{\"line\":112,\"column\":41}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":112,\"column\":46},\"end\":{\"line\":112,\"column\":50}}},\"loc\":{\"start\":{\"line\":112,\"column\":40},\"end\":{\"line\":112,\"column\":50}}},\"loc\":{\"start\":{\"line\":112,\"column\":7},\"end\":{\"line\":112,\"column\":50}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":112,\"column\":54},\"end\":{\"line\":112,\"column\":55}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":112,\"column\":60},\"end\":{\"line\":112,\"column\":69}}},\"loc\":{\"start\":{\"line\":112,\"column\":54},\"end\":{\"line\":112,\"column\":69}}},\"loc\":{\"start\":{\"line\":112,\"column\":7},\"end\":{\"line\":112,\"column\":69}}},\"consequent\":{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"attempt to concatenate a nil value\",\"raw\":\"\\\"attempt to concatenate a nil value\\\"\",\"loc\":{\"start\":{\"line\":112,\"column\":78},\"end\":{\"line\":112,\"column\":114}}},\"loc\":{\"start\":{\"line\":112,\"column\":72},\"end\":{\"line\":112,\"column\":115}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":112,\"column\":2},\"end\":{\"line\":112,\"column\":115}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":114,\"column\":10},\"end\":{\"line\":114,\"column\":20}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":114,\"column\":21},\"end\":{\"line\":114,\"column\":22}}}],\"loc\":{\"start\":{\"line\":114,\"column\":10},\"end\":{\"line\":114,\"column\":23}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":114,\"column\":26},\"end\":{\"line\":114,\"column\":36}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":114,\"column\":37},\"end\":{\"line\":114,\"column\":38}}}],\"loc\":{\"start\":{\"line\":114,\"column\":26},\"end\":{\"line\":114,\"column\":39}}},\"loc\":{\"start\":{\"line\":114,\"column\":10},\"end\":{\"line\":114,\"column\":39}}},\"loc\":{\"start\":{\"line\":114,\"column\":2},\"end\":{\"line\":114,\"column\":40}}}],\"loc\":{\"start\":{\"line\":107,\"column\":22},\"end\":{\"line\":115,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":107,\"column\":1},\"end\":{\"line\":115,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"lte\",\"loc\":{\"start\":{\"line\":117,\"column\":10},\"end\":{\"line\":117,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":117,\"column\":14},\"end\":{\"line\":117,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":117,\"column\":16},\"end\":{\"line\":117,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":118,\"column\":2},\"end\":{\"line\":118,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":118,\"column\":6},\"end\":{\"line\":118,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":118,\"column\":15},\"end\":{\"line\":118,\"column\":16}}}],\"loc\":{\"start\":{\"line\":118,\"column\":6},\"end\":{\"line\":118,\"column\":17}}},\"loc\":{\"start\":{\"line\":118,\"column\":2},\"end\":{\"line\":118,\"column\":17}}},\"loc\":{\"start\":{\"line\":118,\"column\":2},\"end\":{\"line\":118,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":118,\"column\":19},\"end\":{\"line\":118,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":118,\"column\":23},\"end\":{\"line\":118,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":118,\"column\":32},\"end\":{\"line\":118,\"column\":33}}}],\"loc\":{\"start\":{\"line\":118,\"column\":23},\"end\":{\"line\":118,\"column\":34}}},\"loc\":{\"start\":{\"line\":118,\"column\":19},\"end\":{\"line\":118,\"column\":34}}},\"loc\":{\"start\":{\"line\":118,\"column\":19},\"end\":{\"line\":118,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":120,\"column\":6},\"end\":{\"line\":120,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":120,\"column\":12},\"end\":{\"line\":120,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":120,\"column\":31},\"end\":{\"line\":120,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":120,\"column\":34},\"end\":{\"line\":120,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__le\",\"raw\":\"\\\"__le\\\"\",\"loc\":{\"start\":{\"line\":120,\"column\":37},\"end\":{\"line\":120,\"column\":43}}}],\"loc\":{\"start\":{\"line\":120,\"column\":12},\"end\":{\"line\":120,\"column\":44}}},\"loc\":{\"start\":{\"line\":120,\"column\":6},\"end\":{\"line\":120,\"column\":44}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":120,\"column\":2},\"end\":{\"line\":120,\"column\":45}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":121,\"column\":7},\"end\":{\"line\":121,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":121,\"column\":15},\"end\":{\"line\":121,\"column\":19}}},\"loc\":{\"start\":{\"line\":121,\"column\":7},\"end\":{\"line\":121,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":121,\"column\":29},\"end\":{\"line\":121,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":121,\"column\":33},\"end\":{\"line\":121,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":121,\"column\":35},\"end\":{\"line\":121,\"column\":36}}}],\"loc\":{\"start\":{\"line\":121,\"column\":29},\"end\":{\"line\":121,\"column\":37}}},\"loc\":{\"start\":{\"line\":121,\"column\":22},\"end\":{\"line\":121,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":121,\"column\":2},\"end\":{\"line\":121,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":123,\"column\":9},\"end\":{\"line\":123,\"column\":10}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":123,\"column\":14},\"end\":{\"line\":123,\"column\":15}}},\"loc\":{\"start\":{\"line\":123,\"column\":9},\"end\":{\"line\":123,\"column\":15}}},\"loc\":{\"start\":{\"line\":123,\"column\":2},\"end\":{\"line\":123,\"column\":16}}}],\"loc\":{\"start\":{\"line\":117,\"column\":19},\"end\":{\"line\":124,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":117,\"column\":1},\"end\":{\"line\":124,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"lt\",\"loc\":{\"start\":{\"line\":126,\"column\":10},\"end\":{\"line\":126,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":126,\"column\":13},\"end\":{\"line\":126,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":126,\"column\":15},\"end\":{\"line\":126,\"column\":16}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":127,\"column\":2},\"end\":{\"line\":127,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":127,\"column\":6},\"end\":{\"line\":127,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":127,\"column\":15},\"end\":{\"line\":127,\"column\":16}}}],\"loc\":{\"start\":{\"line\":127,\"column\":6},\"end\":{\"line\":127,\"column\":17}}},\"loc\":{\"start\":{\"line\":127,\"column\":2},\"end\":{\"line\":127,\"column\":17}}},\"loc\":{\"start\":{\"line\":127,\"column\":2},\"end\":{\"line\":127,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":127,\"column\":19},\"end\":{\"line\":127,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":127,\"column\":23},\"end\":{\"line\":127,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":127,\"column\":32},\"end\":{\"line\":127,\"column\":33}}}],\"loc\":{\"start\":{\"line\":127,\"column\":23},\"end\":{\"line\":127,\"column\":34}}},\"loc\":{\"start\":{\"line\":127,\"column\":19},\"end\":{\"line\":127,\"column\":34}}},\"loc\":{\"start\":{\"line\":127,\"column\":19},\"end\":{\"line\":127,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":129,\"column\":6},\"end\":{\"line\":129,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":129,\"column\":12},\"end\":{\"line\":129,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":129,\"column\":31},\"end\":{\"line\":129,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":129,\"column\":34},\"end\":{\"line\":129,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__lt\",\"raw\":\"\\\"__lt\\\"\",\"loc\":{\"start\":{\"line\":129,\"column\":37},\"end\":{\"line\":129,\"column\":43}}}],\"loc\":{\"start\":{\"line\":129,\"column\":12},\"end\":{\"line\":129,\"column\":44}}},\"loc\":{\"start\":{\"line\":129,\"column\":6},\"end\":{\"line\":129,\"column\":44}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":129,\"column\":2},\"end\":{\"line\":129,\"column\":45}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":130,\"column\":7},\"end\":{\"line\":130,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":130,\"column\":15},\"end\":{\"line\":130,\"column\":19}}},\"loc\":{\"start\":{\"line\":130,\"column\":7},\"end\":{\"line\":130,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":130,\"column\":29},\"end\":{\"line\":130,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":130,\"column\":33},\"end\":{\"line\":130,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":130,\"column\":35},\"end\":{\"line\":130,\"column\":36}}}],\"loc\":{\"start\":{\"line\":130,\"column\":29},\"end\":{\"line\":130,\"column\":37}}},\"loc\":{\"start\":{\"line\":130,\"column\":22},\"end\":{\"line\":130,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":130,\"column\":2},\"end\":{\"line\":130,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":132,\"column\":9},\"end\":{\"line\":132,\"column\":10}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":132,\"column\":13},\"end\":{\"line\":132,\"column\":14}}},\"loc\":{\"start\":{\"line\":132,\"column\":9},\"end\":{\"line\":132,\"column\":14}}},\"loc\":{\"start\":{\"line\":132,\"column\":2},\"end\":{\"line\":132,\"column\":15}}}],\"loc\":{\"start\":{\"line\":126,\"column\":18},\"end\":{\"line\":133,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":126,\"column\":1},\"end\":{\"line\":133,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"gte\",\"loc\":{\"start\":{\"line\":135,\"column\":10},\"end\":{\"line\":135,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":135,\"column\":14},\"end\":{\"line\":135,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":135,\"column\":16},\"end\":{\"line\":135,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lte\",\"loc\":{\"start\":{\"line\":135,\"column\":28},\"end\":{\"line\":135,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":135,\"column\":32},\"end\":{\"line\":135,\"column\":33}}},{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":135,\"column\":34},\"end\":{\"line\":135,\"column\":35}}}],\"loc\":{\"start\":{\"line\":135,\"column\":28},\"end\":{\"line\":135,\"column\":36}}},\"loc\":{\"start\":{\"line\":135,\"column\":21},\"end\":{\"line\":135,\"column\":37}}}],\"loc\":{\"start\":{\"line\":135,\"column\":19},\"end\":{\"line\":135,\"column\":39}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":135,\"column\":1},\"end\":{\"line\":135,\"column\":39}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"gt\",\"loc\":{\"start\":{\"line\":136,\"column\":10},\"end\":{\"line\":136,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":136,\"column\":13},\"end\":{\"line\":136,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":136,\"column\":15},\"end\":{\"line\":136,\"column\":16}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lt\",\"loc\":{\"start\":{\"line\":136,\"column\":27},\"end\":{\"line\":136,\"column\":29}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":136,\"column\":30},\"end\":{\"line\":136,\"column\":31}}},{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":136,\"column\":32},\"end\":{\"line\":136,\"column\":33}}}],\"loc\":{\"start\":{\"line\":136,\"column\":27},\"end\":{\"line\":136,\"column\":34}}},\"loc\":{\"start\":{\"line\":136,\"column\":20},\"end\":{\"line\":136,\"column\":35}}}],\"loc\":{\"start\":{\"line\":136,\"column\":18},\"end\":{\"line\":136,\"column\":37}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":136,\"column\":1},\"end\":{\"line\":136,\"column\":37}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"forcomp\",\"loc\":{\"start\":{\"line\":139,\"column\":10},\"end\":{\"line\":139,\"column\":17}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"d\",\"loc\":{\"start\":{\"line\":139,\"column\":18},\"end\":{\"line\":139,\"column\":19}}},{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":139,\"column\":20},\"end\":{\"line\":139,\"column\":21}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":139,\"column\":22},\"end\":{\"line\":139,\"column\":23}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"d\",\"loc\":{\"start\":{\"line\":140,\"column\":7},\"end\":{\"line\":140,\"column\":8}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":140,\"column\":11},\"end\":{\"line\":140,\"column\":12}}},\"loc\":{\"start\":{\"line\":140,\"column\":7},\"end\":{\"line\":140,\"column\":12}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":140,\"column\":22},\"end\":{\"line\":140,\"column\":23}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":140,\"column\":27},\"end\":{\"line\":140,\"column\":28}}},\"loc\":{\"start\":{\"line\":140,\"column\":22},\"end\":{\"line\":140,\"column\":28}}},\"loc\":{\"start\":{\"line\":140,\"column\":15},\"end\":{\"line\":140,\"column\":29}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"d\",\"loc\":{\"start\":{\"line\":141,\"column\":12},\"end\":{\"line\":141,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":141,\"column\":16},\"end\":{\"line\":141,\"column\":17}}},\"loc\":{\"start\":{\"line\":141,\"column\":12},\"end\":{\"line\":141,\"column\":17}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":141,\"column\":27},\"end\":{\"line\":141,\"column\":28}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":141,\"column\":32},\"end\":{\"line\":141,\"column\":33}}},\"loc\":{\"start\":{\"line\":141,\"column\":27},\"end\":{\"line\":141,\"column\":33}}},\"loc\":{\"start\":{\"line\":141,\"column\":20},\"end\":{\"line\":141,\"column\":34}}},\"alternate\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":142,\"column\":14},\"end\":{\"line\":142,\"column\":19}}},\"loc\":{\"start\":{\"line\":142,\"column\":7},\"end\":{\"line\":142,\"column\":20}}},\"loc\":{\"start\":{\"line\":141,\"column\":7},\"end\":{\"line\":142,\"column\":20}}},\"loc\":{\"start\":{\"line\":140,\"column\":2},\"end\":{\"line\":142,\"column\":20}}}],\"loc\":{\"start\":{\"line\":139,\"column\":25},\"end\":{\"line\":143,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":139,\"column\":1},\"end\":{\"line\":143,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"eq\",\"loc\":{\"start\":{\"line\":146,\"column\":10},\"end\":{\"line\":146,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":146,\"column\":13},\"end\":{\"line\":146,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":146,\"column\":15},\"end\":{\"line\":146,\"column\":16}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":147,\"column\":2},\"end\":{\"line\":147,\"column\":3}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":147,\"column\":6},\"end\":{\"line\":147,\"column\":14}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":147,\"column\":15},\"end\":{\"line\":147,\"column\":16}}}],\"loc\":{\"start\":{\"line\":147,\"column\":6},\"end\":{\"line\":147,\"column\":17}}},\"loc\":{\"start\":{\"line\":147,\"column\":2},\"end\":{\"line\":147,\"column\":17}}},\"loc\":{\"start\":{\"line\":147,\"column\":2},\"end\":{\"line\":147,\"column\":18}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":147,\"column\":19},\"end\":{\"line\":147,\"column\":20}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":147,\"column\":23},\"end\":{\"line\":147,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":147,\"column\":32},\"end\":{\"line\":147,\"column\":33}}}],\"loc\":{\"start\":{\"line\":147,\"column\":23},\"end\":{\"line\":147,\"column\":34}}},\"loc\":{\"start\":{\"line\":147,\"column\":19},\"end\":{\"line\":147,\"column\":34}}},\"loc\":{\"start\":{\"line\":147,\"column\":19},\"end\":{\"line\":147,\"column\":35}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":149,\"column\":6},\"end\":{\"line\":149,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":149,\"column\":12},\"end\":{\"line\":149,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":149,\"column\":31},\"end\":{\"line\":149,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":149,\"column\":34},\"end\":{\"line\":149,\"column\":35}}},{\"type\":\"Literal\",\"value\":\"__eq\",\"raw\":\"\\\"__eq\\\"\",\"loc\":{\"start\":{\"line\":149,\"column\":37},\"end\":{\"line\":149,\"column\":43}}}],\"loc\":{\"start\":{\"line\":149,\"column\":12},\"end\":{\"line\":149,\"column\":44}}},\"loc\":{\"start\":{\"line\":149,\"column\":6},\"end\":{\"line\":149,\"column\":44}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":149,\"column\":2},\"end\":{\"line\":149,\"column\":45}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":150,\"column\":7},\"end\":{\"line\":150,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":150,\"column\":15},\"end\":{\"line\":150,\"column\":19}}},\"loc\":{\"start\":{\"line\":150,\"column\":7},\"end\":{\"line\":150,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":150,\"column\":29},\"end\":{\"line\":150,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":150,\"column\":33},\"end\":{\"line\":150,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":150,\"column\":35},\"end\":{\"line\":150,\"column\":36}}}],\"loc\":{\"start\":{\"line\":150,\"column\":29},\"end\":{\"line\":150,\"column\":37}}},\"loc\":{\"start\":{\"line\":150,\"column\":22},\"end\":{\"line\":150,\"column\":38}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":150,\"column\":2},\"end\":{\"line\":150,\"column\":38}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":153,\"column\":7},\"end\":{\"line\":153,\"column\":8}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":153,\"column\":13},\"end\":{\"line\":153,\"column\":17}}},\"loc\":{\"start\":{\"line\":153,\"column\":7},\"end\":{\"line\":153,\"column\":17}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":153,\"column\":21},\"end\":{\"line\":153,\"column\":22}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":153,\"column\":27},\"end\":{\"line\":153,\"column\":36}}},\"loc\":{\"start\":{\"line\":153,\"column\":21},\"end\":{\"line\":153,\"column\":36}}},\"loc\":{\"start\":{\"line\":153,\"column\":7},\"end\":{\"line\":153,\"column\":36}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":154,\"column\":12},\"end\":{\"line\":154,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":154,\"column\":18},\"end\":{\"line\":154,\"column\":22}}},\"loc\":{\"start\":{\"line\":154,\"column\":12},\"end\":{\"line\":154,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":154,\"column\":26},\"end\":{\"line\":154,\"column\":27}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":154,\"column\":32},\"end\":{\"line\":154,\"column\":41}}},\"loc\":{\"start\":{\"line\":154,\"column\":26},\"end\":{\"line\":154,\"column\":41}}},\"loc\":{\"start\":{\"line\":154,\"column\":12},\"end\":{\"line\":154,\"column\":41}}},\"loc\":{\"start\":{\"line\":154,\"column\":3},\"end\":{\"line\":154,\"column\":44}}}],\"loc\":{\"start\":{\"line\":153,\"column\":39},\"end\":{\"line\":155,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":153,\"column\":2},\"end\":{\"line\":155,\"column\":3}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":156,\"column\":7},\"end\":{\"line\":156,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":156,\"column\":13},\"end\":{\"line\":156,\"column\":14}}},\"loc\":{\"start\":{\"line\":156,\"column\":7},\"end\":{\"line\":156,\"column\":14}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":156,\"column\":24},\"end\":{\"line\":156,\"column\":28}}},\"loc\":{\"start\":{\"line\":156,\"column\":17},\"end\":{\"line\":156,\"column\":29}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":156,\"column\":2},\"end\":{\"line\":156,\"column\":29}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":157,\"column\":9},\"end\":{\"line\":157,\"column\":14}}},\"loc\":{\"start\":{\"line\":157,\"column\":2},\"end\":{\"line\":157,\"column\":15}}}],\"loc\":{\"start\":{\"line\":146,\"column\":18},\"end\":{\"line\":158,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":146,\"column\":1},\"end\":{\"line\":158,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"ne\",\"loc\":{\"start\":{\"line\":160,\"column\":10},\"end\":{\"line\":160,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":160,\"column\":13},\"end\":{\"line\":160,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":160,\"column\":15},\"end\":{\"line\":160,\"column\":16}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"eq\",\"loc\":{\"start\":{\"line\":160,\"column\":28},\"end\":{\"line\":160,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":160,\"column\":31},\"end\":{\"line\":160,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":160,\"column\":33},\"end\":{\"line\":160,\"column\":34}}}],\"loc\":{\"start\":{\"line\":160,\"column\":28},\"end\":{\"line\":160,\"column\":35}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":160,\"column\":27},\"end\":{\"line\":160,\"column\":35}}},\"loc\":{\"start\":{\"line\":160,\"column\":20},\"end\":{\"line\":160,\"column\":36}}}],\"loc\":{\"start\":{\"line\":160,\"column\":18},\"end\":{\"line\":160,\"column\":38}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":160,\"column\":1},\"end\":{\"line\":160,\"column\":38}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"count\",\"loc\":{\"start\":{\"line\":162,\"column\":10},\"end\":{\"line\":162,\"column\":15}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":162,\"column\":16},\"end\":{\"line\":162,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":163,\"column\":7},\"end\":{\"line\":163,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":163,\"column\":20},\"end\":{\"line\":163,\"column\":28}}},\"loc\":{\"start\":{\"line\":163,\"column\":7},\"end\":{\"line\":163,\"column\":28}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"cnt\",\"loc\":{\"start\":{\"line\":164,\"column\":7},\"end\":{\"line\":164,\"column\":10}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":164,\"column\":13},\"end\":{\"line\":164,\"column\":14}}},\"loc\":{\"start\":{\"line\":164,\"column\":7},\"end\":{\"line\":164,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":164,\"column\":3},\"end\":{\"line\":164,\"column\":15}}},{\"type\":\"WhileStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":165,\"column\":11},\"end\":{\"line\":165,\"column\":12}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":165,\"column\":13},\"end\":{\"line\":165,\"column\":20}}},\"loc\":{\"start\":{\"line\":165,\"column\":11},\"end\":{\"line\":165,\"column\":20}}},\"property\":{\"type\":\"Identifier\",\"name\":\"cnt\",\"loc\":{\"start\":{\"line\":165,\"column\":21},\"end\":{\"line\":165,\"column\":24}}},\"loc\":{\"start\":{\"line\":165,\"column\":11},\"end\":{\"line\":165,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":165,\"column\":30},\"end\":{\"line\":165,\"column\":39}}},\"loc\":{\"start\":{\"line\":165,\"column\":11},\"end\":{\"line\":165,\"column\":39}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"cnt\",\"loc\":{\"start\":{\"line\":165,\"column\":44},\"end\":{\"line\":165,\"column\":47}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":165,\"column\":42},\"end\":{\"line\":165,\"column\":47}}},\"loc\":{\"start\":{\"line\":165,\"column\":42},\"end\":{\"line\":165,\"column\":48}}},\"loc\":{\"start\":{\"line\":165,\"column\":3},\"end\":{\"line\":165,\"column\":48}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"cnt\",\"loc\":{\"start\":{\"line\":166,\"column\":10},\"end\":{\"line\":166,\"column\":13}}},\"loc\":{\"start\":{\"line\":166,\"column\":3},\"end\":{\"line\":166,\"column\":14}}}],\"loc\":{\"start\":{\"line\":163,\"column\":31},\"end\":{\"line\":167,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":163,\"column\":2},\"end\":{\"line\":167,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":168,\"column\":9},\"end\":{\"line\":168,\"column\":10}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":168,\"column\":11},\"end\":{\"line\":168,\"column\":17}}},\"loc\":{\"start\":{\"line\":168,\"column\":9},\"end\":{\"line\":168,\"column\":17}}},\"loc\":{\"start\":{\"line\":168,\"column\":2},\"end\":{\"line\":168,\"column\":18}}}],\"loc\":{\"start\":{\"line\":162,\"column\":19},\"end\":{\"line\":169,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":162,\"column\":1},\"end\":{\"line\":169,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"and\",\"loc\":{\"start\":{\"line\":171,\"column\":10},\"end\":{\"line\":171,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":171,\"column\":14},\"end\":{\"line\":171,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":171,\"column\":16},\"end\":{\"line\":171,\"column\":17}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":171,\"column\":28},\"end\":{\"line\":171,\"column\":29}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":171,\"column\":33},\"end\":{\"line\":171,\"column\":34}}},\"loc\":{\"start\":{\"line\":171,\"column\":28},\"end\":{\"line\":171,\"column\":34}}},\"loc\":{\"start\":{\"line\":171,\"column\":21},\"end\":{\"line\":171,\"column\":35}}}],\"loc\":{\"start\":{\"line\":171,\"column\":19},\"end\":{\"line\":171,\"column\":37}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":171,\"column\":1},\"end\":{\"line\":171,\"column\":37}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"or\",\"loc\":{\"start\":{\"line\":172,\"column\":10},\"end\":{\"line\":172,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":172,\"column\":13},\"end\":{\"line\":172,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":172,\"column\":15},\"end\":{\"line\":172,\"column\":16}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":172,\"column\":27},\"end\":{\"line\":172,\"column\":28}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":172,\"column\":32},\"end\":{\"line\":172,\"column\":33}}},\"loc\":{\"start\":{\"line\":172,\"column\":27},\"end\":{\"line\":172,\"column\":33}}},\"loc\":{\"start\":{\"line\":172,\"column\":20},\"end\":{\"line\":172,\"column\":34}}}],\"loc\":{\"start\":{\"line\":172,\"column\":18},\"end\":{\"line\":172,\"column\":36}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":172,\"column\":1},\"end\":{\"line\":172,\"column\":36}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":174,\"column\":10},\"end\":{\"line\":174,\"column\":14}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"flags\",\"loc\":{\"start\":{\"line\":174,\"column\":15},\"end\":{\"line\":174,\"column\":20}}},{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":174,\"column\":22},\"end\":{\"line\":174,\"column\":26}}},{\"type\":\"Identifier\",\"name\":\"that\",\"loc\":{\"start\":{\"line\":174,\"column\":28},\"end\":{\"line\":174,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":174,\"column\":34},\"end\":{\"line\":174,\"column\":40}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"injectSelf\",\"loc\":{\"start\":{\"line\":175,\"column\":6},\"end\":{\"line\":175,\"column\":16}}},\"init\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"&\",\"left\":{\"type\":\"Identifier\",\"name\":\"flags\",\"loc\":{\"start\":{\"line\":175,\"column\":22},\"end\":{\"line\":175,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":175,\"column\":30},\"end\":{\"line\":175,\"column\":31}}},\"loc\":{\"start\":{\"line\":175,\"column\":22},\"end\":{\"line\":175,\"column\":31}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":175,\"column\":20},\"end\":{\"line\":175,\"column\":32}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":175,\"column\":19},\"end\":{\"line\":175,\"column\":32}}},\"loc\":{\"start\":{\"line\":175,\"column\":6},\"end\":{\"line\":175,\"column\":32}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":175,\"column\":2},\"end\":{\"line\":175,\"column\":33}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"detectLua\",\"loc\":{\"start\":{\"line\":176,\"column\":6},\"end\":{\"line\":176,\"column\":15}}},\"init\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"&\",\"left\":{\"type\":\"Identifier\",\"name\":\"flags\",\"loc\":{\"start\":{\"line\":176,\"column\":21},\"end\":{\"line\":176,\"column\":26}}},\"right\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":176,\"column\":29},\"end\":{\"line\":176,\"column\":30}}},\"loc\":{\"start\":{\"line\":176,\"column\":21},\"end\":{\"line\":176,\"column\":30}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":176,\"column\":19},\"end\":{\"line\":176,\"column\":31}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":176,\"column\":18},\"end\":{\"line\":176,\"column\":31}}},\"loc\":{\"start\":{\"line\":176,\"column\":6},\"end\":{\"line\":176,\"column\":31}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":176,\"column\":2},\"end\":{\"line\":176,\"column\":32}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":178,\"column\":7},\"end\":{\"line\":178,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":178,\"column\":16},\"end\":{\"line\":178,\"column\":20}}},\"loc\":{\"start\":{\"line\":178,\"column\":7},\"end\":{\"line\":178,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":178,\"column\":24},\"end\":{\"line\":178,\"column\":28}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":178,\"column\":33},\"end\":{\"line\":178,\"column\":42}}},\"loc\":{\"start\":{\"line\":178,\"column\":24},\"end\":{\"line\":178,\"column\":42}}},\"loc\":{\"start\":{\"line\":178,\"column\":7},\"end\":{\"line\":178,\"column\":42}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":179,\"column\":8},\"end\":{\"line\":179,\"column\":14}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":179,\"column\":19},\"end\":{\"line\":179,\"column\":28}}},\"loc\":{\"start\":{\"line\":179,\"column\":8},\"end\":{\"line\":179,\"column\":28}}},\"consequent\":{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to call a \",\"raw\":\"\\\"attempt to call a \\\"\",\"loc\":{\"start\":{\"line\":179,\"column\":37},\"end\":{\"line\":179,\"column\":57}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":179,\"column\":60},\"end\":{\"line\":179,\"column\":64}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":179,\"column\":65},\"end\":{\"line\":179,\"column\":69}}}],\"loc\":{\"start\":{\"line\":179,\"column\":60},\"end\":{\"line\":179,\"column\":70}}},\"loc\":{\"start\":{\"line\":179,\"column\":37},\"end\":{\"line\":179,\"column\":70}}},\"right\":{\"type\":\"Literal\",\"value\":\" value\",\"raw\":\"\\\" value\\\"\",\"loc\":{\"start\":{\"line\":179,\"column\":73},\"end\":{\"line\":179,\"column\":81}}},\"loc\":{\"start\":{\"line\":179,\"column\":37},\"end\":{\"line\":179,\"column\":81}}},\"loc\":{\"start\":{\"line\":179,\"column\":31},\"end\":{\"line\":179,\"column\":82}}},\"alternate\":{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to call '\",\"raw\":\"\\\"attempt to call '\\\"\",\"loc\":{\"start\":{\"line\":180,\"column\":14},\"end\":{\"line\":180,\"column\":33}}},\"right\":{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":180,\"column\":36},\"end\":{\"line\":180,\"column\":42}}},\"loc\":{\"start\":{\"line\":180,\"column\":14},\"end\":{\"line\":180,\"column\":42}}},\"right\":{\"type\":\"Literal\",\"value\":\"' (a \",\"raw\":\"\\\"' (a \\\"\",\"loc\":{\"start\":{\"line\":180,\"column\":45},\"end\":{\"line\":180,\"column\":52}}},\"loc\":{\"start\":{\"line\":180,\"column\":14},\"end\":{\"line\":180,\"column\":52}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":180,\"column\":55},\"end\":{\"line\":180,\"column\":59}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":180,\"column\":60},\"end\":{\"line\":180,\"column\":64}}}],\"loc\":{\"start\":{\"line\":180,\"column\":55},\"end\":{\"line\":180,\"column\":65}}},\"loc\":{\"start\":{\"line\":180,\"column\":14},\"end\":{\"line\":180,\"column\":65}}},\"right\":{\"type\":\"Literal\",\"value\":\" value)\",\"raw\":\"\\\" value)\\\"\",\"loc\":{\"start\":{\"line\":180,\"column\":68},\"end\":{\"line\":180,\"column\":77}}},\"loc\":{\"start\":{\"line\":180,\"column\":14},\"end\":{\"line\":180,\"column\":77}}},\"loc\":{\"start\":{\"line\":180,\"column\":8},\"end\":{\"line\":180,\"column\":78}}},\"loc\":{\"start\":{\"line\":179,\"column\":3},\"end\":{\"line\":180,\"column\":78}}}],\"loc\":{\"start\":{\"line\":178,\"column\":45},\"end\":{\"line\":181,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":178,\"column\":2},\"end\":{\"line\":181,\"column\":3}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":183,\"column\":6},\"end\":{\"line\":183,\"column\":10}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":183,\"column\":13},\"end\":{\"line\":183,\"column\":19}}},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Array\",\"loc\":{\"start\":{\"line\":183,\"column\":20},\"end\":{\"line\":183,\"column\":25}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":183,\"column\":26},\"end\":{\"line\":183,\"column\":35}}},\"loc\":{\"start\":{\"line\":183,\"column\":20},\"end\":{\"line\":183,\"column\":35}}},\"property\":{\"type\":\"Identifier\",\"name\":\"slice\",\"loc\":{\"start\":{\"line\":183,\"column\":36},\"end\":{\"line\":183,\"column\":41}}},\"loc\":{\"start\":{\"line\":183,\"column\":20},\"end\":{\"line\":183,\"column\":41}}},\"property\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":183,\"column\":42},\"end\":{\"line\":183,\"column\":46}}},\"loc\":{\"start\":{\"line\":183,\"column\":20},\"end\":{\"line\":183,\"column\":46}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":183,\"column\":47},\"end\":{\"line\":183,\"column\":56}}},{\"type\":\"Literal\",\"value\":4,\"raw\":\"4\",\"loc\":{\"start\":{\"line\":183,\"column\":58},\"end\":{\"line\":183,\"column\":59}}}],\"loc\":{\"start\":{\"line\":183,\"column\":20},\"end\":{\"line\":183,\"column\":60}}},{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":183,\"column\":62},\"end\":{\"line\":183,\"column\":66}}}],\"loc\":{\"start\":{\"line\":183,\"column\":13},\"end\":{\"line\":183,\"column\":67}}},\"loc\":{\"start\":{\"line\":183,\"column\":6},\"end\":{\"line\":183,\"column\":67}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":183,\"column\":2},\"end\":{\"line\":183,\"column\":68}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"doInject\",\"loc\":{\"start\":{\"line\":185,\"column\":6},\"end\":{\"line\":185,\"column\":14}}},\"init\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":185,\"column\":17},\"end\":{\"line\":185,\"column\":21}}},\"loc\":{\"start\":{\"line\":185,\"column\":6},\"end\":{\"line\":185,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":185,\"column\":2},\"end\":{\"line\":185,\"column\":22}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"Identifier\",\"name\":\"detectLua\",\"loc\":{\"start\":{\"line\":187,\"column\":7},\"end\":{\"line\":187,\"column\":16}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"doInject\",\"loc\":{\"start\":{\"line\":188,\"column\":3},\"end\":{\"line\":188,\"column\":11}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":188,\"column\":14},\"end\":{\"line\":188,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__luaType\",\"loc\":{\"start\":{\"line\":188,\"column\":19},\"end\":{\"line\":188,\"column\":28}}},\"loc\":{\"start\":{\"line\":188,\"column\":14},\"end\":{\"line\":188,\"column\":28}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":188,\"column\":32},\"end\":{\"line\":188,\"column\":42}}},\"loc\":{\"start\":{\"line\":188,\"column\":14},\"end\":{\"line\":188,\"column\":42}}},\"loc\":{\"start\":{\"line\":188,\"column\":3},\"end\":{\"line\":188,\"column\":42}}},\"loc\":{\"start\":{\"line\":188,\"column\":3},\"end\":{\"line\":188,\"column\":43}}}],\"loc\":{\"start\":{\"line\":187,\"column\":19},\"end\":{\"line\":189,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":187,\"column\":2},\"end\":{\"line\":189,\"column\":3}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"type\":\"Identifier\",\"name\":\"injectSelf\",\"loc\":{\"start\":{\"line\":191,\"column\":7},\"end\":{\"line\":191,\"column\":17}}},\"right\":{\"type\":\"Identifier\",\"name\":\"doInject\",\"loc\":{\"start\":{\"line\":191,\"column\":21},\"end\":{\"line\":191,\"column\":29}}},\"loc\":{\"start\":{\"line\":191,\"column\":7},\"end\":{\"line\":191,\"column\":29}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":192,\"column\":3},\"end\":{\"line\":192,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"unshift\",\"loc\":{\"start\":{\"line\":192,\"column\":8},\"end\":{\"line\":192,\"column\":15}}},\"loc\":{\"start\":{\"line\":192,\"column\":3},\"end\":{\"line\":192,\"column\":15}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"that\",\"loc\":{\"start\":{\"line\":192,\"column\":16},\"end\":{\"line\":192,\"column\":20}}}],\"loc\":{\"start\":{\"line\":192,\"column\":3},\"end\":{\"line\":192,\"column\":21}}},\"loc\":{\"start\":{\"line\":192,\"column\":3},\"end\":{\"line\":192,\"column\":22}}}],\"loc\":{\"start\":{\"line\":191,\"column\":32},\"end\":{\"line\":193,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":191,\"column\":2},\"end\":{\"line\":193,\"column\":3}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"type\":\"Identifier\",\"name\":\"detectLua\",\"loc\":{\"start\":{\"line\":195,\"column\":7},\"end\":{\"line\":195,\"column\":16}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"!=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":195,\"column\":20},\"end\":{\"line\":195,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__luaType\",\"loc\":{\"start\":{\"line\":195,\"column\":25},\"end\":{\"line\":195,\"column\":34}}},\"loc\":{\"start\":{\"line\":195,\"column\":20},\"end\":{\"line\":195,\"column\":34}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":195,\"column\":38},\"end\":{\"line\":195,\"column\":48}}},\"loc\":{\"start\":{\"line\":195,\"column\":20},\"end\":{\"line\":195,\"column\":48}}},\"loc\":{\"start\":{\"line\":195,\"column\":7},\"end\":{\"line\":195,\"column\":48}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"args2\",\"loc\":{\"start\":{\"line\":196,\"column\":7},\"end\":{\"line\":196,\"column\":12}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":196,\"column\":15},\"end\":{\"line\":196,\"column\":17}}},\"loc\":{\"start\":{\"line\":196,\"column\":7},\"end\":{\"line\":196,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":196,\"column\":3},\"end\":{\"line\":196,\"column\":18}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":197,\"column\":13},\"end\":{\"line\":197,\"column\":14}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":197,\"column\":17},\"end\":{\"line\":197,\"column\":18}}},\"loc\":{\"start\":{\"line\":197,\"column\":13},\"end\":{\"line\":197,\"column\":18}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":197,\"column\":9},\"end\":{\"line\":197,\"column\":18}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":197,\"column\":20},\"end\":{\"line\":197,\"column\":21}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":197,\"column\":24},\"end\":{\"line\":197,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":197,\"column\":29},\"end\":{\"line\":197,\"column\":35}}},\"loc\":{\"start\":{\"line\":197,\"column\":24},\"end\":{\"line\":197,\"column\":35}}},\"loc\":{\"start\":{\"line\":197,\"column\":20},\"end\":{\"line\":197,\"column\":35}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":197,\"column\":39},\"end\":{\"line\":197,\"column\":40}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":197,\"column\":37},\"end\":{\"line\":197,\"column\":40}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":198,\"column\":8},\"end\":{\"line\":198,\"column\":9}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":198,\"column\":12},\"end\":{\"line\":198,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":198,\"column\":17},\"end\":{\"line\":198,\"column\":18}}},\"loc\":{\"start\":{\"line\":198,\"column\":12},\"end\":{\"line\":198,\"column\":19}}},\"loc\":{\"start\":{\"line\":198,\"column\":8},\"end\":{\"line\":198,\"column\":19}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":198,\"column\":4},\"end\":{\"line\":198,\"column\":20}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":199,\"column\":9},\"end\":{\"line\":199,\"column\":10}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":199,\"column\":22},\"end\":{\"line\":199,\"column\":30}}},\"loc\":{\"start\":{\"line\":199,\"column\":9},\"end\":{\"line\":199,\"column\":30}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":200,\"column\":10},\"end\":{\"line\":200,\"column\":11}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":200,\"column\":12},\"end\":{\"line\":200,\"column\":19}}},\"loc\":{\"start\":{\"line\":200,\"column\":10},\"end\":{\"line\":200,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":200,\"column\":20},\"end\":{\"line\":200,\"column\":26}}},\"loc\":{\"start\":{\"line\":200,\"column\":10},\"end\":{\"line\":200,\"column\":26}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":200,\"column\":30},\"end\":{\"line\":200,\"column\":31}}},\"loc\":{\"start\":{\"line\":200,\"column\":10},\"end\":{\"line\":200,\"column\":31}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"args2\",\"loc\":{\"start\":{\"line\":200,\"column\":34},\"end\":{\"line\":200,\"column\":39}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":200,\"column\":40},\"end\":{\"line\":200,\"column\":41}}},\"loc\":{\"start\":{\"line\":200,\"column\":34},\"end\":{\"line\":200,\"column\":42}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":200,\"column\":45},\"end\":{\"line\":200,\"column\":46}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":200,\"column\":47},\"end\":{\"line\":200,\"column\":51}}},\"loc\":{\"start\":{\"line\":200,\"column\":45},\"end\":{\"line\":200,\"column\":51}}},\"loc\":{\"start\":{\"line\":200,\"column\":34},\"end\":{\"line\":200,\"column\":51}}},\"loc\":{\"start\":{\"line\":200,\"column\":34},\"end\":{\"line\":200,\"column\":52}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":201,\"column\":15},\"end\":{\"line\":201,\"column\":21}}},\"property\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":201,\"column\":22},\"end\":{\"line\":201,\"column\":26}}},\"loc\":{\"start\":{\"line\":201,\"column\":15},\"end\":{\"line\":201,\"column\":26}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":201,\"column\":27},\"end\":{\"line\":201,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":201,\"column\":29},\"end\":{\"line\":201,\"column\":33}}},\"loc\":{\"start\":{\"line\":201,\"column\":27},\"end\":{\"line\":201,\"column\":33}}}],\"loc\":{\"start\":{\"line\":201,\"column\":15},\"end\":{\"line\":201,\"column\":34}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":201,\"column\":35},\"end\":{\"line\":201,\"column\":41}}},\"loc\":{\"start\":{\"line\":201,\"column\":15},\"end\":{\"line\":201,\"column\":41}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":201,\"column\":45},\"end\":{\"line\":201,\"column\":46}}},\"loc\":{\"start\":{\"line\":201,\"column\":15},\"end\":{\"line\":201,\"column\":46}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"args2\",\"loc\":{\"start\":{\"line\":201,\"column\":49},\"end\":{\"line\":201,\"column\":54}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":201,\"column\":55},\"end\":{\"line\":201,\"column\":56}}},\"loc\":{\"start\":{\"line\":201,\"column\":49},\"end\":{\"line\":201,\"column\":57}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":201,\"column\":60},\"end\":{\"line\":201,\"column\":61}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":201,\"column\":62},\"end\":{\"line\":201,\"column\":69}}},\"loc\":{\"start\":{\"line\":201,\"column\":60},\"end\":{\"line\":201,\"column\":69}}},\"loc\":{\"start\":{\"line\":201,\"column\":49},\"end\":{\"line\":201,\"column\":69}}},\"loc\":{\"start\":{\"line\":201,\"column\":49},\"end\":{\"line\":201,\"column\":70}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"args2\",\"loc\":{\"start\":{\"line\":202,\"column\":10},\"end\":{\"line\":202,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":202,\"column\":16},\"end\":{\"line\":202,\"column\":17}}},\"loc\":{\"start\":{\"line\":202,\"column\":10},\"end\":{\"line\":202,\"column\":18}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":202,\"column\":21},\"end\":{\"line\":202,\"column\":22}}},\"loc\":{\"start\":{\"line\":202,\"column\":10},\"end\":{\"line\":202,\"column\":22}}},\"loc\":{\"start\":{\"line\":202,\"column\":10},\"end\":{\"line\":202,\"column\":23}}},\"loc\":{\"start\":{\"line\":201,\"column\":10},\"end\":{\"line\":202,\"column\":23}}},\"loc\":{\"start\":{\"line\":200,\"column\":5},\"end\":{\"line\":202,\"column\":23}}}],\"loc\":{\"start\":{\"line\":199,\"column\":33},\"end\":{\"line\":203,\"column\":5}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"args2\",\"loc\":{\"start\":{\"line\":204,\"column\":5},\"end\":{\"line\":204,\"column\":10}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":204,\"column\":11},\"end\":{\"line\":204,\"column\":12}}},\"loc\":{\"start\":{\"line\":204,\"column\":5},\"end\":{\"line\":204,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":204,\"column\":16},\"end\":{\"line\":204,\"column\":17}}},\"loc\":{\"start\":{\"line\":204,\"column\":5},\"end\":{\"line\":204,\"column\":17}}},\"loc\":{\"start\":{\"line\":204,\"column\":5},\"end\":{\"line\":204,\"column\":18}}}],\"loc\":{\"start\":{\"line\":203,\"column\":11},\"end\":{\"line\":205,\"column\":5}}},\"loc\":{\"start\":{\"line\":199,\"column\":4},\"end\":{\"line\":205,\"column\":5}}}],\"loc\":{\"start\":{\"line\":197,\"column\":43},\"end\":{\"line\":206,\"column\":4}}},\"loc\":{\"start\":{\"line\":197,\"column\":3},\"end\":{\"line\":206,\"column\":4}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":207,\"column\":3},\"end\":{\"line\":207,\"column\":7}}},\"right\":{\"type\":\"Identifier\",\"name\":\"args2\",\"loc\":{\"start\":{\"line\":207,\"column\":10},\"end\":{\"line\":207,\"column\":15}}},\"loc\":{\"start\":{\"line\":207,\"column\":3},\"end\":{\"line\":207,\"column\":15}}},\"loc\":{\"start\":{\"line\":207,\"column\":3},\"end\":{\"line\":207,\"column\":16}}}],\"loc\":{\"start\":{\"line\":195,\"column\":51},\"end\":{\"line\":208,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":195,\"column\":2},\"end\":{\"line\":208,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":210,\"column\":9},\"end\":{\"line\":210,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":210,\"column\":14},\"end\":{\"line\":210,\"column\":19}}},\"loc\":{\"start\":{\"line\":210,\"column\":9},\"end\":{\"line\":210,\"column\":19}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"that\",\"loc\":{\"start\":{\"line\":210,\"column\":20},\"end\":{\"line\":210,\"column\":24}}},{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":210,\"column\":26},\"end\":{\"line\":210,\"column\":30}}}],\"loc\":{\"start\":{\"line\":210,\"column\":9},\"end\":{\"line\":210,\"column\":31}}},\"loc\":{\"start\":{\"line\":210,\"column\":2},\"end\":{\"line\":210,\"column\":32}}}],\"loc\":{\"start\":{\"line\":174,\"column\":58},\"end\":{\"line\":211,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":174,\"column\":1},\"end\":{\"line\":211,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"rest\",\"loc\":{\"start\":{\"line\":213,\"column\":10},\"end\":{\"line\":213,\"column\":14}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":213,\"column\":15},\"end\":{\"line\":213,\"column\":19}}},{\"type\":\"Identifier\",\"name\":\"cnt\",\"loc\":{\"start\":{\"line\":213,\"column\":21},\"end\":{\"line\":213,\"column\":24}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":214,\"column\":6},\"end\":{\"line\":214,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":214,\"column\":12},\"end\":{\"line\":214,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"loc\":{\"start\":{\"line\":214,\"column\":19},\"end\":{\"line\":214,\"column\":25}}},\"loc\":{\"start\":{\"line\":214,\"column\":12},\"end\":{\"line\":214,\"column\":25}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"LuaReturnValues\",\"loc\":{\"start\":{\"line\":214,\"column\":26},\"end\":{\"line\":214,\"column\":41}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":214,\"column\":42},\"end\":{\"line\":214,\"column\":51}}},\"loc\":{\"start\":{\"line\":214,\"column\":26},\"end\":{\"line\":214,\"column\":51}}},{\"type\":\"ObjectExpression\",\"properties\":[],\"loc\":{\"start\":{\"line\":214,\"column\":53},\"end\":{\"line\":214,\"column\":55}}}],\"loc\":{\"start\":{\"line\":214,\"column\":12},\"end\":{\"line\":214,\"column\":56}}},\"loc\":{\"start\":{\"line\":214,\"column\":6},\"end\":{\"line\":214,\"column\":56}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":214,\"column\":2},\"end\":{\"line\":214,\"column\":57}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":215,\"column\":2},\"end\":{\"line\":215,\"column\":5}}},\"property\":{\"type\":\"Identifier\",\"name\":\"values\",\"loc\":{\"start\":{\"line\":215,\"column\":6},\"end\":{\"line\":215,\"column\":12}}},\"loc\":{\"start\":{\"line\":215,\"column\":2},\"end\":{\"line\":215,\"column\":12}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Array\",\"loc\":{\"start\":{\"line\":215,\"column\":15},\"end\":{\"line\":215,\"column\":20}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":215,\"column\":21},\"end\":{\"line\":215,\"column\":30}}},\"loc\":{\"start\":{\"line\":215,\"column\":15},\"end\":{\"line\":215,\"column\":30}}},\"property\":{\"type\":\"Identifier\",\"name\":\"slice\",\"loc\":{\"start\":{\"line\":215,\"column\":31},\"end\":{\"line\":215,\"column\":36}}},\"loc\":{\"start\":{\"line\":215,\"column\":15},\"end\":{\"line\":215,\"column\":36}}},\"property\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":215,\"column\":37},\"end\":{\"line\":215,\"column\":41}}},\"loc\":{\"start\":{\"line\":215,\"column\":15},\"end\":{\"line\":215,\"column\":41}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"args\",\"loc\":{\"start\":{\"line\":215,\"column\":42},\"end\":{\"line\":215,\"column\":46}}},{\"type\":\"Identifier\",\"name\":\"cnt\",\"loc\":{\"start\":{\"line\":215,\"column\":48},\"end\":{\"line\":215,\"column\":51}}}],\"loc\":{\"start\":{\"line\":215,\"column\":15},\"end\":{\"line\":215,\"column\":52}}},\"loc\":{\"start\":{\"line\":215,\"column\":2},\"end\":{\"line\":215,\"column\":52}}},\"loc\":{\"start\":{\"line\":215,\"column\":2},\"end\":{\"line\":215,\"column\":53}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":216,\"column\":9},\"end\":{\"line\":216,\"column\":12}}},\"loc\":{\"start\":{\"line\":216,\"column\":2},\"end\":{\"line\":216,\"column\":13}}}],\"loc\":{\"start\":{\"line\":213,\"column\":26},\"end\":{\"line\":217,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":213,\"column\":1},\"end\":{\"line\":217,\"column\":2}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"id\",\"loc\":{\"start\":{\"line\":219,\"column\":5},\"end\":{\"line\":219,\"column\":7}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":219,\"column\":10},\"end\":{\"line\":219,\"column\":11}}},\"loc\":{\"start\":{\"line\":219,\"column\":5},\"end\":{\"line\":219,\"column\":11}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":219,\"column\":1},\"end\":{\"line\":219,\"column\":12}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":220,\"column\":10},\"end\":{\"line\":220,\"column\":18}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":221,\"column\":2},\"end\":{\"line\":221,\"column\":6}}},\"property\":{\"type\":\"Identifier\",\"name\":\"id\",\"loc\":{\"start\":{\"line\":221,\"column\":7},\"end\":{\"line\":221,\"column\":9}}},\"loc\":{\"start\":{\"line\":221,\"column\":2},\"end\":{\"line\":221,\"column\":9}}},\"right\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"id\",\"loc\":{\"start\":{\"line\":221,\"column\":14},\"end\":{\"line\":221,\"column\":16}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":221,\"column\":12},\"end\":{\"line\":221,\"column\":16}}},\"loc\":{\"start\":{\"line\":221,\"column\":2},\"end\":{\"line\":221,\"column\":16}}},\"loc\":{\"start\":{\"line\":221,\"column\":2},\"end\":{\"line\":221,\"column\":17}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":222,\"column\":2},\"end\":{\"line\":222,\"column\":6}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":222,\"column\":7},\"end\":{\"line\":222,\"column\":14}}},\"loc\":{\"start\":{\"line\":222,\"column\":2},\"end\":{\"line\":222,\"column\":14}}},\"right\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":222,\"column\":17},\"end\":{\"line\":222,\"column\":19}}},\"loc\":{\"start\":{\"line\":222,\"column\":2},\"end\":{\"line\":222,\"column\":19}}},\"loc\":{\"start\":{\"line\":222,\"column\":2},\"end\":{\"line\":222,\"column\":20}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":223,\"column\":2},\"end\":{\"line\":223,\"column\":6}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":223,\"column\":7},\"end\":{\"line\":223,\"column\":11}}},\"loc\":{\"start\":{\"line\":223,\"column\":2},\"end\":{\"line\":223,\"column\":11}}},\"right\":{\"type\":\"ObjectExpression\",\"properties\":[],\"loc\":{\"start\":{\"line\":223,\"column\":14},\"end\":{\"line\":223,\"column\":16}}},\"loc\":{\"start\":{\"line\":223,\"column\":2},\"end\":{\"line\":223,\"column\":16}}},\"loc\":{\"start\":{\"line\":223,\"column\":2},\"end\":{\"line\":223,\"column\":17}}}],\"loc\":{\"start\":{\"line\":220,\"column\":21},\"end\":{\"line\":224,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":220,\"column\":1},\"end\":{\"line\":224,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":226,\"column\":1},\"end\":{\"line\":226,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"defineProperty\",\"loc\":{\"start\":{\"line\":226,\"column\":8},\"end\":{\"line\":226,\"column\":22}}},\"loc\":{\"start\":{\"line\":226,\"column\":1},\"end\":{\"line\":226,\"column\":22}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":226,\"column\":23},\"end\":{\"line\":226,\"column\":31}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":226,\"column\":32},\"end\":{\"line\":226,\"column\":41}}},\"loc\":{\"start\":{\"line\":226,\"column\":23},\"end\":{\"line\":226,\"column\":41}}},{\"type\":\"Literal\",\"value\":\"__luaType\",\"raw\":\"\\\"__luaType\\\"\",\"loc\":{\"start\":{\"line\":226,\"column\":43},\"end\":{\"line\":226,\"column\":54}}},{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":226,\"column\":58},\"end\":{\"line\":226,\"column\":63}}},\"value\":{\"type\":\"Literal\",\"value\":\"table\",\"raw\":\"\\\"table\\\"\",\"loc\":{\"start\":{\"line\":226,\"column\":65},\"end\":{\"line\":226,\"column\":72}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":226,\"column\":58},\"end\":{\"line\":226,\"column\":72}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"enumerable\",\"loc\":{\"start\":{\"line\":226,\"column\":75},\"end\":{\"line\":226,\"column\":85}}},\"value\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":226,\"column\":87},\"end\":{\"line\":226,\"column\":92}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":226,\"column\":75},\"end\":{\"line\":226,\"column\":92}}}],\"loc\":{\"start\":{\"line\":226,\"column\":57},\"end\":{\"line\":226,\"column\":93}}}],\"loc\":{\"start\":{\"line\":226,\"column\":1},\"end\":{\"line\":226,\"column\":94}}},\"loc\":{\"start\":{\"line\":226,\"column\":1},\"end\":{\"line\":226,\"column\":95}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":227,\"column\":1},\"end\":{\"line\":227,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"defineProperty\",\"loc\":{\"start\":{\"line\":227,\"column\":8},\"end\":{\"line\":227,\"column\":22}}},\"loc\":{\"start\":{\"line\":227,\"column\":1},\"end\":{\"line\":227,\"column\":22}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":227,\"column\":23},\"end\":{\"line\":227,\"column\":31}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":227,\"column\":32},\"end\":{\"line\":227,\"column\":41}}},\"loc\":{\"start\":{\"line\":227,\"column\":23},\"end\":{\"line\":227,\"column\":41}}},{\"type\":\"Literal\",\"value\":\"toString\",\"raw\":\"\\\"toString\\\"\",\"loc\":{\"start\":{\"line\":227,\"column\":43},\"end\":{\"line\":227,\"column\":53}}},{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":227,\"column\":57},\"end\":{\"line\":227,\"column\":62}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":228,\"column\":9},\"end\":{\"line\":228,\"column\":19}}},\"arguments\":[{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":228,\"column\":20},\"end\":{\"line\":228,\"column\":24}}}],\"loc\":{\"start\":{\"line\":228,\"column\":9},\"end\":{\"line\":228,\"column\":25}}},\"loc\":{\"start\":{\"line\":228,\"column\":2},\"end\":{\"line\":228,\"column\":26}}}],\"loc\":{\"start\":{\"line\":227,\"column\":75},\"end\":{\"line\":229,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":227,\"column\":64},\"end\":{\"line\":229,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":227,\"column\":57},\"end\":{\"line\":229,\"column\":2}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"enumerable\",\"loc\":{\"start\":{\"line\":229,\"column\":5},\"end\":{\"line\":229,\"column\":15}}},\"value\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":229,\"column\":17},\"end\":{\"line\":229,\"column\":22}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":229,\"column\":5},\"end\":{\"line\":229,\"column\":22}}}],\"loc\":{\"start\":{\"line\":227,\"column\":56},\"end\":{\"line\":229,\"column\":23}}}],\"loc\":{\"start\":{\"line\":227,\"column\":1},\"end\":{\"line\":229,\"column\":24}}},\"loc\":{\"start\":{\"line\":227,\"column\":1},\"end\":{\"line\":229,\"column\":25}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"makeTable\",\"loc\":{\"start\":{\"line\":231,\"column\":10},\"end\":{\"line\":231,\"column\":19}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":231,\"column\":20},\"end\":{\"line\":231,\"column\":21}}},{\"type\":\"Identifier\",\"name\":\"allowExpand\",\"loc\":{\"start\":{\"line\":231,\"column\":23},\"end\":{\"line\":231,\"column\":34}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":232,\"column\":6},\"end\":{\"line\":232,\"column\":9}}},\"init\":{\"type\":\"NewExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":232,\"column\":16},\"end\":{\"line\":232,\"column\":24}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":232,\"column\":12},\"end\":{\"line\":232,\"column\":26}}},\"loc\":{\"start\":{\"line\":232,\"column\":6},\"end\":{\"line\":232,\"column\":26}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":232,\"column\":2},\"end\":{\"line\":232,\"column\":27}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":234,\"column\":2},\"end\":{\"line\":234,\"column\":5}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":234,\"column\":6},\"end\":{\"line\":234,\"column\":13}}},\"loc\":{\"start\":{\"line\":234,\"column\":2},\"end\":{\"line\":234,\"column\":13}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":234,\"column\":16},\"end\":{\"line\":234,\"column\":22}}},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Array\",\"loc\":{\"start\":{\"line\":234,\"column\":23},\"end\":{\"line\":234,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":234,\"column\":29},\"end\":{\"line\":234,\"column\":38}}},\"loc\":{\"start\":{\"line\":234,\"column\":23},\"end\":{\"line\":234,\"column\":38}}},\"property\":{\"type\":\"Identifier\",\"name\":\"slice\",\"loc\":{\"start\":{\"line\":234,\"column\":39},\"end\":{\"line\":234,\"column\":44}}},\"loc\":{\"start\":{\"line\":234,\"column\":23},\"end\":{\"line\":234,\"column\":44}}},\"property\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":234,\"column\":45},\"end\":{\"line\":234,\"column\":49}}},\"loc\":{\"start\":{\"line\":234,\"column\":23},\"end\":{\"line\":234,\"column\":49}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":234,\"column\":50},\"end\":{\"line\":234,\"column\":59}}},{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":234,\"column\":61},\"end\":{\"line\":234,\"column\":62}}}],\"loc\":{\"start\":{\"line\":234,\"column\":23},\"end\":{\"line\":234,\"column\":63}}},{\"type\":\"Identifier\",\"name\":\"allowExpand\",\"loc\":{\"start\":{\"line\":234,\"column\":65},\"end\":{\"line\":234,\"column\":76}}}],\"loc\":{\"start\":{\"line\":234,\"column\":16},\"end\":{\"line\":234,\"column\":77}}},\"loc\":{\"start\":{\"line\":234,\"column\":2},\"end\":{\"line\":234,\"column\":77}}},\"loc\":{\"start\":{\"line\":234,\"column\":2},\"end\":{\"line\":234,\"column\":78}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":235,\"column\":8},\"end\":{\"line\":235,\"column\":9}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":235,\"column\":7},\"end\":{\"line\":235,\"column\":9}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":235,\"column\":19},\"end\":{\"line\":235,\"column\":22}}},\"loc\":{\"start\":{\"line\":235,\"column\":12},\"end\":{\"line\":235,\"column\":23}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":235,\"column\":2},\"end\":{\"line\":235,\"column\":23}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":237,\"column\":7},\"end\":{\"line\":237,\"column\":16}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":237,\"column\":17},\"end\":{\"line\":237,\"column\":18}}}],\"loc\":{\"start\":{\"line\":237,\"column\":7},\"end\":{\"line\":237,\"column\":19}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":238,\"column\":13},\"end\":{\"line\":238,\"column\":14}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":238,\"column\":17},\"end\":{\"line\":238,\"column\":18}}},\"loc\":{\"start\":{\"line\":238,\"column\":13},\"end\":{\"line\":238,\"column\":18}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":238,\"column\":9},\"end\":{\"line\":238,\"column\":18}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":238,\"column\":20},\"end\":{\"line\":238,\"column\":21}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":238,\"column\":24},\"end\":{\"line\":238,\"column\":25}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":238,\"column\":26},\"end\":{\"line\":238,\"column\":32}}},\"loc\":{\"start\":{\"line\":238,\"column\":24},\"end\":{\"line\":238,\"column\":32}}},\"loc\":{\"start\":{\"line\":238,\"column\":20},\"end\":{\"line\":238,\"column\":32}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":238,\"column\":36},\"end\":{\"line\":238,\"column\":37}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":238,\"column\":34},\"end\":{\"line\":238,\"column\":37}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"pair\",\"loc\":{\"start\":{\"line\":239,\"column\":8},\"end\":{\"line\":239,\"column\":12}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":239,\"column\":15},\"end\":{\"line\":239,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":239,\"column\":17},\"end\":{\"line\":239,\"column\":18}}},\"loc\":{\"start\":{\"line\":239,\"column\":15},\"end\":{\"line\":239,\"column\":19}}},\"loc\":{\"start\":{\"line\":239,\"column\":8},\"end\":{\"line\":239,\"column\":19}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":239,\"column\":4},\"end\":{\"line\":239,\"column\":20}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"key\",\"loc\":{\"start\":{\"line\":240,\"column\":8},\"end\":{\"line\":240,\"column\":11}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"pair\",\"loc\":{\"start\":{\"line\":240,\"column\":14},\"end\":{\"line\":240,\"column\":18}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":240,\"column\":19},\"end\":{\"line\":240,\"column\":20}}},\"loc\":{\"start\":{\"line\":240,\"column\":14},\"end\":{\"line\":240,\"column\":21}}},\"loc\":{\"start\":{\"line\":240,\"column\":8},\"end\":{\"line\":240,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":240,\"column\":4},\"end\":{\"line\":240,\"column\":22}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":241,\"column\":8},\"end\":{\"line\":241,\"column\":11}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"pair\",\"loc\":{\"start\":{\"line\":241,\"column\":14},\"end\":{\"line\":241,\"column\":18}}},\"property\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":241,\"column\":19},\"end\":{\"line\":241,\"column\":20}}},\"loc\":{\"start\":{\"line\":241,\"column\":14},\"end\":{\"line\":241,\"column\":21}}},\"loc\":{\"start\":{\"line\":241,\"column\":8},\"end\":{\"line\":241,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":241,\"column\":4},\"end\":{\"line\":241,\"column\":22}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"key\",\"loc\":{\"start\":{\"line\":242,\"column\":16},\"end\":{\"line\":242,\"column\":19}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":242,\"column\":9},\"end\":{\"line\":242,\"column\":19}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":242,\"column\":23},\"end\":{\"line\":242,\"column\":31}}},\"loc\":{\"start\":{\"line\":242,\"column\":9},\"end\":{\"line\":242,\"column\":31}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":243,\"column\":5},\"end\":{\"line\":243,\"column\":8}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":243,\"column\":9},\"end\":{\"line\":243,\"column\":16}}},\"loc\":{\"start\":{\"line\":243,\"column\":5},\"end\":{\"line\":243,\"column\":16}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"key\",\"loc\":{\"start\":{\"line\":243,\"column\":17},\"end\":{\"line\":243,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":243,\"column\":23},\"end\":{\"line\":243,\"column\":24}}},\"loc\":{\"start\":{\"line\":243,\"column\":17},\"end\":{\"line\":243,\"column\":24}}},\"loc\":{\"start\":{\"line\":243,\"column\":5},\"end\":{\"line\":243,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":243,\"column\":28},\"end\":{\"line\":243,\"column\":31}}},\"loc\":{\"start\":{\"line\":243,\"column\":5},\"end\":{\"line\":243,\"column\":31}}},\"loc\":{\"start\":{\"line\":243,\"column\":5},\"end\":{\"line\":243,\"column\":32}}}],\"loc\":{\"start\":{\"line\":242,\"column\":34},\"end\":{\"line\":244,\"column\":5}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":245,\"column\":5},\"end\":{\"line\":245,\"column\":8}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":245,\"column\":9},\"end\":{\"line\":245,\"column\":13}}},\"loc\":{\"start\":{\"line\":245,\"column\":5},\"end\":{\"line\":245,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"key\",\"loc\":{\"start\":{\"line\":245,\"column\":14},\"end\":{\"line\":245,\"column\":17}}},\"loc\":{\"start\":{\"line\":245,\"column\":5},\"end\":{\"line\":245,\"column\":18}}},\"right\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":245,\"column\":21},\"end\":{\"line\":245,\"column\":24}}},\"loc\":{\"start\":{\"line\":245,\"column\":5},\"end\":{\"line\":245,\"column\":24}}},\"loc\":{\"start\":{\"line\":245,\"column\":5},\"end\":{\"line\":245,\"column\":25}}}],\"loc\":{\"start\":{\"line\":244,\"column\":11},\"end\":{\"line\":246,\"column\":5}}},\"loc\":{\"start\":{\"line\":242,\"column\":4},\"end\":{\"line\":246,\"column\":5}}}],\"loc\":{\"start\":{\"line\":238,\"column\":40},\"end\":{\"line\":247,\"column\":4}}},\"loc\":{\"start\":{\"line\":238,\"column\":3},\"end\":{\"line\":247,\"column\":4}}}],\"loc\":{\"start\":{\"line\":237,\"column\":22},\"end\":{\"line\":248,\"column\":3}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"k\",\"loc\":{\"start\":{\"line\":249,\"column\":13},\"end\":{\"line\":249,\"column\":14}}},\"init\":null,\"loc\":{\"start\":{\"line\":249,\"column\":13},\"end\":{\"line\":249,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":249,\"column\":9},\"end\":{\"line\":249,\"column\":14}}},\"right\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":249,\"column\":18},\"end\":{\"line\":249,\"column\":19}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":250,\"column\":4},\"end\":{\"line\":250,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":250,\"column\":8},\"end\":{\"line\":250,\"column\":12}}},\"loc\":{\"start\":{\"line\":250,\"column\":4},\"end\":{\"line\":250,\"column\":12}}},\"property\":{\"type\":\"Identifier\",\"name\":\"k\",\"loc\":{\"start\":{\"line\":250,\"column\":13},\"end\":{\"line\":250,\"column\":14}}},\"loc\":{\"start\":{\"line\":250,\"column\":4},\"end\":{\"line\":250,\"column\":15}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":250,\"column\":18},\"end\":{\"line\":250,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"k\",\"loc\":{\"start\":{\"line\":250,\"column\":20},\"end\":{\"line\":250,\"column\":21}}},\"loc\":{\"start\":{\"line\":250,\"column\":18},\"end\":{\"line\":250,\"column\":22}}},\"loc\":{\"start\":{\"line\":250,\"column\":4},\"end\":{\"line\":250,\"column\":22}}},\"loc\":{\"start\":{\"line\":250,\"column\":4},\"end\":{\"line\":250,\"column\":23}}}],\"loc\":{\"start\":{\"line\":249,\"column\":22},\"end\":{\"line\":251,\"column\":4}}},\"each\":false,\"loc\":{\"start\":{\"line\":249,\"column\":3},\"end\":{\"line\":251,\"column\":4}}}],\"loc\":{\"start\":{\"line\":248,\"column\":9},\"end\":{\"line\":252,\"column\":3}}},\"loc\":{\"start\":{\"line\":237,\"column\":2},\"end\":{\"line\":252,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":254,\"column\":9},\"end\":{\"line\":254,\"column\":12}}},\"loc\":{\"start\":{\"line\":254,\"column\":2},\"end\":{\"line\":254,\"column\":13}}}],\"loc\":{\"start\":{\"line\":231,\"column\":55},\"end\":{\"line\":255,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":231,\"column\":1},\"end\":{\"line\":255,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"makeFunction\",\"loc\":{\"start\":{\"line\":257,\"column\":10},\"end\":{\"line\":257,\"column\":22}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"f\",\"loc\":{\"start\":{\"line\":257,\"column\":23},\"end\":{\"line\":257,\"column\":24}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"f\",\"loc\":{\"start\":{\"line\":258,\"column\":2},\"end\":{\"line\":258,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__luaType\",\"loc\":{\"start\":{\"line\":258,\"column\":4},\"end\":{\"line\":258,\"column\":13}}},\"loc\":{\"start\":{\"line\":258,\"column\":2},\"end\":{\"line\":258,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":258,\"column\":16},\"end\":{\"line\":258,\"column\":26}}},\"loc\":{\"start\":{\"line\":258,\"column\":2},\"end\":{\"line\":258,\"column\":26}}},\"loc\":{\"start\":{\"line\":258,\"column\":2},\"end\":{\"line\":258,\"column\":27}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"f\",\"loc\":{\"start\":{\"line\":259,\"column\":9},\"end\":{\"line\":259,\"column\":10}}},\"loc\":{\"start\":{\"line\":259,\"column\":2},\"end\":{\"line\":259,\"column\":11}}}],\"loc\":{\"start\":{\"line\":257,\"column\":26},\"end\":{\"line\":260,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":257,\"column\":1},\"end\":{\"line\":260,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"LuaReturnValues\",\"loc\":{\"start\":{\"line\":262,\"column\":10},\"end\":{\"line\":262,\"column\":25}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":262,\"column\":26},\"end\":{\"line\":262,\"column\":27}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":263,\"column\":2},\"end\":{\"line\":263,\"column\":6}}},\"property\":{\"type\":\"Identifier\",\"name\":\"values\",\"loc\":{\"start\":{\"line\":263,\"column\":7},\"end\":{\"line\":263,\"column\":13}}},\"loc\":{\"start\":{\"line\":263,\"column\":2},\"end\":{\"line\":263,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":263,\"column\":16},\"end\":{\"line\":263,\"column\":17}}},\"loc\":{\"start\":{\"line\":263,\"column\":2},\"end\":{\"line\":263,\"column\":17}}},\"loc\":{\"start\":{\"line\":263,\"column\":2},\"end\":{\"line\":263,\"column\":18}}}],\"loc\":{\"start\":{\"line\":262,\"column\":29},\"end\":{\"line\":264,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":262,\"column\":1},\"end\":{\"line\":264,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":266,\"column\":1},\"end\":{\"line\":266,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"defineProperty\",\"loc\":{\"start\":{\"line\":266,\"column\":8},\"end\":{\"line\":266,\"column\":22}}},\"loc\":{\"start\":{\"line\":266,\"column\":1},\"end\":{\"line\":266,\"column\":22}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"LuaReturnValues\",\"loc\":{\"start\":{\"line\":266,\"column\":23},\"end\":{\"line\":266,\"column\":38}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":266,\"column\":39},\"end\":{\"line\":266,\"column\":48}}},\"loc\":{\"start\":{\"line\":266,\"column\":23},\"end\":{\"line\":266,\"column\":48}}},{\"type\":\"Literal\",\"value\":\"__luaType\",\"raw\":\"\\\"__luaType\\\"\",\"loc\":{\"start\":{\"line\":266,\"column\":50},\"end\":{\"line\":266,\"column\":61}}},{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":266,\"column\":65},\"end\":{\"line\":266,\"column\":70}}},\"value\":{\"type\":\"Literal\",\"value\":\"returnValues\",\"raw\":\"\\\"returnValues\\\"\",\"loc\":{\"start\":{\"line\":266,\"column\":72},\"end\":{\"line\":266,\"column\":86}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":266,\"column\":65},\"end\":{\"line\":266,\"column\":86}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"enumerable\",\"loc\":{\"start\":{\"line\":266,\"column\":89},\"end\":{\"line\":266,\"column\":99}}},\"value\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":266,\"column\":101},\"end\":{\"line\":266,\"column\":106}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":266,\"column\":89},\"end\":{\"line\":266,\"column\":106}}}],\"loc\":{\"start\":{\"line\":266,\"column\":64},\"end\":{\"line\":266,\"column\":107}}}],\"loc\":{\"start\":{\"line\":266,\"column\":1},\"end\":{\"line\":266,\"column\":108}}},\"loc\":{\"start\":{\"line\":266,\"column\":1},\"end\":{\"line\":266,\"column\":109}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":268,\"column\":10},\"end\":{\"line\":268,\"column\":25}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":268,\"column\":26},\"end\":{\"line\":268,\"column\":31}}},{\"type\":\"Identifier\",\"name\":\"entry\",\"loc\":{\"start\":{\"line\":268,\"column\":33},\"end\":{\"line\":268,\"column\":38}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":269,\"column\":7},\"end\":{\"line\":269,\"column\":12}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":269,\"column\":24},\"end\":{\"line\":269,\"column\":32}}},\"loc\":{\"start\":{\"line\":269,\"column\":7},\"end\":{\"line\":269,\"column\":32}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":270,\"column\":8},\"end\":{\"line\":270,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__metatable\",\"loc\":{\"start\":{\"line\":270,\"column\":14},\"end\":{\"line\":270,\"column\":25}}},\"loc\":{\"start\":{\"line\":270,\"column\":8},\"end\":{\"line\":270,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":270,\"column\":30},\"end\":{\"line\":270,\"column\":39}}},\"loc\":{\"start\":{\"line\":270,\"column\":8},\"end\":{\"line\":270,\"column\":39}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":270,\"column\":49},\"end\":{\"line\":270,\"column\":53}}},\"loc\":{\"start\":{\"line\":270,\"column\":42},\"end\":{\"line\":270,\"column\":54}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":270,\"column\":3},\"end\":{\"line\":270,\"column\":54}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":272,\"column\":7},\"end\":{\"line\":272,\"column\":10}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":272,\"column\":13},\"end\":{\"line\":272,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__metatable\",\"loc\":{\"start\":{\"line\":272,\"column\":19},\"end\":{\"line\":272,\"column\":30}}},\"loc\":{\"start\":{\"line\":272,\"column\":13},\"end\":{\"line\":272,\"column\":30}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":272,\"column\":31},\"end\":{\"line\":272,\"column\":35}}},\"loc\":{\"start\":{\"line\":272,\"column\":13},\"end\":{\"line\":272,\"column\":35}}},\"property\":{\"type\":\"Identifier\",\"name\":\"entry\",\"loc\":{\"start\":{\"line\":272,\"column\":36},\"end\":{\"line\":272,\"column\":41}}},\"loc\":{\"start\":{\"line\":272,\"column\":13},\"end\":{\"line\":272,\"column\":42}}},\"loc\":{\"start\":{\"line\":272,\"column\":7},\"end\":{\"line\":272,\"column\":42}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":272,\"column\":3},\"end\":{\"line\":272,\"column\":43}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":273,\"column\":8},\"end\":{\"line\":273,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":273,\"column\":16},\"end\":{\"line\":273,\"column\":20}}},\"loc\":{\"start\":{\"line\":273,\"column\":8},\"end\":{\"line\":273,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":273,\"column\":24},\"end\":{\"line\":273,\"column\":27}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":273,\"column\":32},\"end\":{\"line\":273,\"column\":41}}},\"loc\":{\"start\":{\"line\":273,\"column\":24},\"end\":{\"line\":273,\"column\":41}}},\"loc\":{\"start\":{\"line\":273,\"column\":8},\"end\":{\"line\":273,\"column\":41}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":273,\"column\":51},\"end\":{\"line\":273,\"column\":55}}},\"loc\":{\"start\":{\"line\":273,\"column\":44},\"end\":{\"line\":273,\"column\":56}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":273,\"column\":3},\"end\":{\"line\":273,\"column\":56}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":275,\"column\":10},\"end\":{\"line\":275,\"column\":13}}},\"loc\":{\"start\":{\"line\":275,\"column\":3},\"end\":{\"line\":275,\"column\":14}}}],\"loc\":{\"start\":{\"line\":269,\"column\":35},\"end\":{\"line\":276,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":269,\"column\":2},\"end\":{\"line\":276,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":278,\"column\":9},\"end\":{\"line\":278,\"column\":13}}},\"loc\":{\"start\":{\"line\":278,\"column\":2},\"end\":{\"line\":278,\"column\":14}}}],\"loc\":{\"start\":{\"line\":268,\"column\":40},\"end\":{\"line\":279,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":268,\"column\":1},\"end\":{\"line\":279,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTableBin\",\"loc\":{\"start\":{\"line\":281,\"column\":10},\"end\":{\"line\":281,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":281,\"column\":29},\"end\":{\"line\":281,\"column\":30}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":281,\"column\":32},\"end\":{\"line\":281,\"column\":33}}},{\"type\":\"Identifier\",\"name\":\"entry\",\"loc\":{\"start\":{\"line\":281,\"column\":35},\"end\":{\"line\":281,\"column\":40}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mt\",\"loc\":{\"start\":{\"line\":282,\"column\":6},\"end\":{\"line\":282,\"column\":8}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":282,\"column\":11},\"end\":{\"line\":282,\"column\":26}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":282,\"column\":27},\"end\":{\"line\":282,\"column\":28}}},{\"type\":\"Identifier\",\"name\":\"entry\",\"loc\":{\"start\":{\"line\":282,\"column\":30},\"end\":{\"line\":282,\"column\":35}}}],\"loc\":{\"start\":{\"line\":282,\"column\":11},\"end\":{\"line\":282,\"column\":36}}},\"loc\":{\"start\":{\"line\":282,\"column\":6},\"end\":{\"line\":282,\"column\":36}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":282,\"column\":2},\"end\":{\"line\":282,\"column\":37}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mt\",\"loc\":{\"start\":{\"line\":283,\"column\":7},\"end\":{\"line\":283,\"column\":9}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":283,\"column\":13},\"end\":{\"line\":283,\"column\":17}}},\"loc\":{\"start\":{\"line\":283,\"column\":7},\"end\":{\"line\":283,\"column\":17}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":283,\"column\":27},\"end\":{\"line\":283,\"column\":42}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":283,\"column\":43},\"end\":{\"line\":283,\"column\":44}}},{\"type\":\"Identifier\",\"name\":\"entry\",\"loc\":{\"start\":{\"line\":283,\"column\":46},\"end\":{\"line\":283,\"column\":51}}}],\"loc\":{\"start\":{\"line\":283,\"column\":27},\"end\":{\"line\":283,\"column\":52}}},\"loc\":{\"start\":{\"line\":283,\"column\":20},\"end\":{\"line\":283,\"column\":53}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":283,\"column\":2},\"end\":{\"line\":283,\"column\":53}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"mt\",\"loc\":{\"start\":{\"line\":284,\"column\":9},\"end\":{\"line\":284,\"column\":11}}},\"loc\":{\"start\":{\"line\":284,\"column\":2},\"end\":{\"line\":284,\"column\":12}}}],\"loc\":{\"start\":{\"line\":281,\"column\":42},\"end\":{\"line\":285,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":281,\"column\":1},\"end\":{\"line\":285,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"index\",\"loc\":{\"start\":{\"line\":287,\"column\":10},\"end\":{\"line\":287,\"column\":15}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":287,\"column\":16},\"end\":{\"line\":287,\"column\":21}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":287,\"column\":23},\"end\":{\"line\":287,\"column\":27}}},{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":287,\"column\":29},\"end\":{\"line\":287,\"column\":35}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":288,\"column\":7},\"end\":{\"line\":288,\"column\":12}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":288,\"column\":17},\"end\":{\"line\":288,\"column\":21}}},\"loc\":{\"start\":{\"line\":288,\"column\":7},\"end\":{\"line\":288,\"column\":21}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":288,\"column\":25},\"end\":{\"line\":288,\"column\":30}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":288,\"column\":35},\"end\":{\"line\":288,\"column\":44}}},\"loc\":{\"start\":{\"line\":288,\"column\":25},\"end\":{\"line\":288,\"column\":44}}},\"loc\":{\"start\":{\"line\":288,\"column\":7},\"end\":{\"line\":288,\"column\":44}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":288,\"column\":55},\"end\":{\"line\":288,\"column\":60}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":288,\"column\":48},\"end\":{\"line\":288,\"column\":60}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":288,\"column\":64},\"end\":{\"line\":288,\"column\":72}}},\"loc\":{\"start\":{\"line\":288,\"column\":48},\"end\":{\"line\":288,\"column\":72}}},\"loc\":{\"start\":{\"line\":288,\"column\":7},\"end\":{\"line\":288,\"column\":72}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":289,\"column\":8},\"end\":{\"line\":289,\"column\":14}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":289,\"column\":18},\"end\":{\"line\":289,\"column\":27}}},\"loc\":{\"start\":{\"line\":289,\"column\":8},\"end\":{\"line\":289,\"column\":27}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to index a \",\"raw\":\"\\\"attempt to index a \\\"\",\"loc\":{\"start\":{\"line\":290,\"column\":10},\"end\":{\"line\":290,\"column\":31}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":290,\"column\":34},\"end\":{\"line\":290,\"column\":38}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":290,\"column\":39},\"end\":{\"line\":290,\"column\":44}}}],\"loc\":{\"start\":{\"line\":290,\"column\":34},\"end\":{\"line\":290,\"column\":45}}},\"loc\":{\"start\":{\"line\":290,\"column\":10},\"end\":{\"line\":290,\"column\":45}}},\"right\":{\"type\":\"Literal\",\"value\":\" value\",\"raw\":\"\\\" value\\\"\",\"loc\":{\"start\":{\"line\":290,\"column\":48},\"end\":{\"line\":290,\"column\":56}}},\"loc\":{\"start\":{\"line\":290,\"column\":10},\"end\":{\"line\":290,\"column\":56}}},\"loc\":{\"start\":{\"line\":290,\"column\":4},\"end\":{\"line\":290,\"column\":57}}}],\"loc\":{\"start\":{\"line\":289,\"column\":30},\"end\":{\"line\":291,\"column\":4}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to index '\",\"raw\":\"\\\"attempt to index '\\\"\",\"loc\":{\"start\":{\"line\":292,\"column\":10},\"end\":{\"line\":292,\"column\":30}}},\"right\":{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":292,\"column\":33},\"end\":{\"line\":292,\"column\":39}}},\"loc\":{\"start\":{\"line\":292,\"column\":10},\"end\":{\"line\":292,\"column\":39}}},\"right\":{\"type\":\"Literal\",\"value\":\"' (a \",\"raw\":\"\\\"' (a \\\"\",\"loc\":{\"start\":{\"line\":292,\"column\":42},\"end\":{\"line\":292,\"column\":49}}},\"loc\":{\"start\":{\"line\":292,\"column\":10},\"end\":{\"line\":292,\"column\":49}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":292,\"column\":52},\"end\":{\"line\":292,\"column\":56}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":292,\"column\":57},\"end\":{\"line\":292,\"column\":62}}}],\"loc\":{\"start\":{\"line\":292,\"column\":52},\"end\":{\"line\":292,\"column\":63}}},\"loc\":{\"start\":{\"line\":292,\"column\":10},\"end\":{\"line\":292,\"column\":63}}},\"right\":{\"type\":\"Literal\",\"value\":\" value)\",\"raw\":\"\\\" value)\\\"\",\"loc\":{\"start\":{\"line\":292,\"column\":66},\"end\":{\"line\":292,\"column\":75}}},\"loc\":{\"start\":{\"line\":292,\"column\":10},\"end\":{\"line\":292,\"column\":75}}},\"loc\":{\"start\":{\"line\":292,\"column\":4},\"end\":{\"line\":292,\"column\":76}}}],\"loc\":{\"start\":{\"line\":291,\"column\":10},\"end\":{\"line\":293,\"column\":4}}},\"loc\":{\"start\":{\"line\":289,\"column\":3},\"end\":{\"line\":293,\"column\":4}}}],\"loc\":{\"start\":{\"line\":288,\"column\":75},\"end\":{\"line\":294,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":294,\"column\":14},\"end\":{\"line\":294,\"column\":19}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":294,\"column\":31},\"end\":{\"line\":294,\"column\":39}}},\"loc\":{\"start\":{\"line\":294,\"column\":14},\"end\":{\"line\":294,\"column\":39}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":295,\"column\":7},\"end\":{\"line\":295,\"column\":10}}},\"init\":null,\"loc\":{\"start\":{\"line\":295,\"column\":7},\"end\":{\"line\":295,\"column\":10}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":295,\"column\":3},\"end\":{\"line\":295,\"column\":11}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":296,\"column\":15},\"end\":{\"line\":296,\"column\":19}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":296,\"column\":8},\"end\":{\"line\":296,\"column\":19}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":296,\"column\":23},\"end\":{\"line\":296,\"column\":31}}},\"loc\":{\"start\":{\"line\":296,\"column\":8},\"end\":{\"line\":296,\"column\":31}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":296,\"column\":33},\"end\":{\"line\":296,\"column\":36}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":296,\"column\":39},\"end\":{\"line\":296,\"column\":44}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":296,\"column\":45},\"end\":{\"line\":296,\"column\":52}}},\"loc\":{\"start\":{\"line\":296,\"column\":39},\"end\":{\"line\":296,\"column\":52}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":296,\"column\":53},\"end\":{\"line\":296,\"column\":57}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":296,\"column\":58},\"end\":{\"line\":296,\"column\":59}}},\"loc\":{\"start\":{\"line\":296,\"column\":53},\"end\":{\"line\":296,\"column\":59}}},\"loc\":{\"start\":{\"line\":296,\"column\":39},\"end\":{\"line\":296,\"column\":60}}},\"loc\":{\"start\":{\"line\":296,\"column\":33},\"end\":{\"line\":296,\"column\":60}}},\"loc\":{\"start\":{\"line\":296,\"column\":33},\"end\":{\"line\":296,\"column\":61}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":297,\"column\":8},\"end\":{\"line\":297,\"column\":11}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":297,\"column\":14},\"end\":{\"line\":297,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":297,\"column\":20},\"end\":{\"line\":297,\"column\":24}}},\"loc\":{\"start\":{\"line\":297,\"column\":14},\"end\":{\"line\":297,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":297,\"column\":25},\"end\":{\"line\":297,\"column\":29}}},\"loc\":{\"start\":{\"line\":297,\"column\":14},\"end\":{\"line\":297,\"column\":30}}},\"loc\":{\"start\":{\"line\":297,\"column\":8},\"end\":{\"line\":297,\"column\":30}}},\"loc\":{\"start\":{\"line\":297,\"column\":8},\"end\":{\"line\":297,\"column\":31}}},\"loc\":{\"start\":{\"line\":296,\"column\":3},\"end\":{\"line\":297,\"column\":31}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"&\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":299,\"column\":8},\"end\":{\"line\":299,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":299,\"column\":16},\"end\":{\"line\":299,\"column\":20}}},\"loc\":{\"start\":{\"line\":299,\"column\":8},\"end\":{\"line\":299,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":299,\"column\":23},\"end\":{\"line\":299,\"column\":26}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":299,\"column\":31},\"end\":{\"line\":299,\"column\":40}}},\"loc\":{\"start\":{\"line\":299,\"column\":23},\"end\":{\"line\":299,\"column\":40}}},\"loc\":{\"start\":{\"line\":299,\"column\":8},\"end\":{\"line\":299,\"column\":40}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":299,\"column\":50},\"end\":{\"line\":299,\"column\":53}}},\"loc\":{\"start\":{\"line\":299,\"column\":43},\"end\":{\"line\":299,\"column\":54}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":299,\"column\":3},\"end\":{\"line\":299,\"column\":54}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idxfx\",\"loc\":{\"start\":{\"line\":301,\"column\":7},\"end\":{\"line\":301,\"column\":12}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":301,\"column\":15},\"end\":{\"line\":301,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":301,\"column\":31},\"end\":{\"line\":301,\"column\":36}}},{\"type\":\"Literal\",\"value\":\"__index\",\"raw\":\"\\\"__index\\\"\",\"loc\":{\"start\":{\"line\":301,\"column\":38},\"end\":{\"line\":301,\"column\":47}}}],\"loc\":{\"start\":{\"line\":301,\"column\":15},\"end\":{\"line\":301,\"column\":48}}},\"loc\":{\"start\":{\"line\":301,\"column\":7},\"end\":{\"line\":301,\"column\":48}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":301,\"column\":3},\"end\":{\"line\":301,\"column\":49}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"idxfx\",\"loc\":{\"start\":{\"line\":302,\"column\":8},\"end\":{\"line\":302,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":302,\"column\":17},\"end\":{\"line\":302,\"column\":21}}},\"loc\":{\"start\":{\"line\":302,\"column\":8},\"end\":{\"line\":302,\"column\":21}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":302,\"column\":31},\"end\":{\"line\":302,\"column\":35}}},\"loc\":{\"start\":{\"line\":302,\"column\":24},\"end\":{\"line\":302,\"column\":36}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":302,\"column\":3},\"end\":{\"line\":302,\"column\":36}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"idxfx\",\"loc\":{\"start\":{\"line\":304,\"column\":15},\"end\":{\"line\":304,\"column\":20}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":304,\"column\":8},\"end\":{\"line\":304,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":304,\"column\":24},\"end\":{\"line\":304,\"column\":34}}},\"loc\":{\"start\":{\"line\":304,\"column\":8},\"end\":{\"line\":304,\"column\":34}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":304,\"column\":44},\"end\":{\"line\":304,\"column\":52}}},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"idxfx\",\"loc\":{\"start\":{\"line\":304,\"column\":53},\"end\":{\"line\":304,\"column\":58}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":304,\"column\":59},\"end\":{\"line\":304,\"column\":64}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":304,\"column\":66},\"end\":{\"line\":304,\"column\":70}}}],\"loc\":{\"start\":{\"line\":304,\"column\":53},\"end\":{\"line\":304,\"column\":71}}}],\"loc\":{\"start\":{\"line\":304,\"column\":44},\"end\":{\"line\":304,\"column\":72}}},\"loc\":{\"start\":{\"line\":304,\"column\":37},\"end\":{\"line\":304,\"column\":73}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":304,\"column\":3},\"end\":{\"line\":304,\"column\":73}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"index\",\"loc\":{\"start\":{\"line\":305,\"column\":10},\"end\":{\"line\":305,\"column\":15}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"idxfx\",\"loc\":{\"start\":{\"line\":305,\"column\":16},\"end\":{\"line\":305,\"column\":21}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":305,\"column\":23},\"end\":{\"line\":305,\"column\":27}}}],\"loc\":{\"start\":{\"line\":305,\"column\":10},\"end\":{\"line\":305,\"column\":28}}},\"loc\":{\"start\":{\"line\":305,\"column\":3},\"end\":{\"line\":305,\"column\":29}}}],\"loc\":{\"start\":{\"line\":294,\"column\":42},\"end\":{\"line\":306,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":306,\"column\":14},\"end\":{\"line\":306,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":306,\"column\":24},\"end\":{\"line\":306,\"column\":29}}}],\"loc\":{\"start\":{\"line\":306,\"column\":14},\"end\":{\"line\":306,\"column\":30}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":307,\"column\":10},\"end\":{\"line\":307,\"column\":15}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":307,\"column\":16},\"end\":{\"line\":307,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":307,\"column\":23},\"end\":{\"line\":307,\"column\":24}}},\"loc\":{\"start\":{\"line\":307,\"column\":16},\"end\":{\"line\":307,\"column\":24}}},\"loc\":{\"start\":{\"line\":307,\"column\":10},\"end\":{\"line\":307,\"column\":25}}},\"loc\":{\"start\":{\"line\":307,\"column\":3},\"end\":{\"line\":307,\"column\":26}}}],\"loc\":{\"start\":{\"line\":306,\"column\":33},\"end\":{\"line\":308,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":308,\"column\":21},\"end\":{\"line\":308,\"column\":26}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":308,\"column\":14},\"end\":{\"line\":308,\"column\":26}}},\"right\":{\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"\\\"string\\\"\",\"loc\":{\"start\":{\"line\":308,\"column\":30},\"end\":{\"line\":308,\"column\":38}}},\"loc\":{\"start\":{\"line\":308,\"column\":14},\"end\":{\"line\":308,\"column\":38}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":309,\"column\":7},\"end\":{\"line\":309,\"column\":11}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"tonumber\",\"loc\":{\"start\":{\"line\":309,\"column\":14},\"end\":{\"line\":309,\"column\":22}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":309,\"column\":23},\"end\":{\"line\":309,\"column\":27}}}],\"loc\":{\"start\":{\"line\":309,\"column\":14},\"end\":{\"line\":309,\"column\":28}}},\"loc\":{\"start\":{\"line\":309,\"column\":7},\"end\":{\"line\":309,\"column\":28}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":309,\"column\":3},\"end\":{\"line\":309,\"column\":29}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":310,\"column\":8},\"end\":{\"line\":310,\"column\":12}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":310,\"column\":15},\"end\":{\"line\":310,\"column\":16}}},\"loc\":{\"start\":{\"line\":310,\"column\":8},\"end\":{\"line\":310,\"column\":16}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":310,\"column\":19},\"end\":{\"line\":310,\"column\":23}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":310,\"column\":28},\"end\":{\"line\":310,\"column\":33}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":310,\"column\":34},\"end\":{\"line\":310,\"column\":40}}},\"loc\":{\"start\":{\"line\":310,\"column\":28},\"end\":{\"line\":310,\"column\":40}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":310,\"column\":43},\"end\":{\"line\":310,\"column\":44}}},\"loc\":{\"start\":{\"line\":310,\"column\":28},\"end\":{\"line\":310,\"column\":44}}},\"loc\":{\"start\":{\"line\":310,\"column\":19},\"end\":{\"line\":310,\"column\":45}}},\"loc\":{\"start\":{\"line\":310,\"column\":19},\"end\":{\"line\":310,\"column\":46}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":310,\"column\":3},\"end\":{\"line\":310,\"column\":46}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":311,\"column\":10},\"end\":{\"line\":311,\"column\":15}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":311,\"column\":16},\"end\":{\"line\":311,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":311,\"column\":21},\"end\":{\"line\":311,\"column\":22}}},\"loc\":{\"start\":{\"line\":311,\"column\":16},\"end\":{\"line\":311,\"column\":22}}},\"loc\":{\"start\":{\"line\":311,\"column\":10},\"end\":{\"line\":311,\"column\":23}}},\"loc\":{\"start\":{\"line\":311,\"column\":3},\"end\":{\"line\":311,\"column\":24}}}],\"loc\":{\"start\":{\"line\":308,\"column\":41},\"end\":{\"line\":312,\"column\":3}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":313,\"column\":10},\"end\":{\"line\":313,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":313,\"column\":16},\"end\":{\"line\":313,\"column\":20}}},\"loc\":{\"start\":{\"line\":313,\"column\":10},\"end\":{\"line\":313,\"column\":21}}},\"loc\":{\"start\":{\"line\":313,\"column\":3},\"end\":{\"line\":313,\"column\":22}}}],\"loc\":{\"start\":{\"line\":312,\"column\":9},\"end\":{\"line\":314,\"column\":3}}},\"loc\":{\"start\":{\"line\":308,\"column\":9},\"end\":{\"line\":314,\"column\":3}}},\"loc\":{\"start\":{\"line\":306,\"column\":9},\"end\":{\"line\":314,\"column\":3}}},\"loc\":{\"start\":{\"line\":294,\"column\":9},\"end\":{\"line\":314,\"column\":3}}},\"loc\":{\"start\":{\"line\":288,\"column\":2},\"end\":{\"line\":314,\"column\":3}}}],\"loc\":{\"start\":{\"line\":287,\"column\":37},\"end\":{\"line\":315,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":287,\"column\":1},\"end\":{\"line\":315,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"indexAssign\",\"loc\":{\"start\":{\"line\":317,\"column\":10},\"end\":{\"line\":317,\"column\":21}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":317,\"column\":22},\"end\":{\"line\":317,\"column\":27}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":317,\"column\":29},\"end\":{\"line\":317,\"column\":33}}},{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":317,\"column\":35},\"end\":{\"line\":317,\"column\":40}}},{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":317,\"column\":42},\"end\":{\"line\":317,\"column\":48}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":319,\"column\":7},\"end\":{\"line\":319,\"column\":12}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":319,\"column\":17},\"end\":{\"line\":319,\"column\":21}}},\"loc\":{\"start\":{\"line\":319,\"column\":7},\"end\":{\"line\":319,\"column\":21}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":319,\"column\":25},\"end\":{\"line\":319,\"column\":30}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":319,\"column\":35},\"end\":{\"line\":319,\"column\":44}}},\"loc\":{\"start\":{\"line\":319,\"column\":25},\"end\":{\"line\":319,\"column\":44}}},\"loc\":{\"start\":{\"line\":319,\"column\":7},\"end\":{\"line\":319,\"column\":44}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":319,\"column\":55},\"end\":{\"line\":319,\"column\":60}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":319,\"column\":48},\"end\":{\"line\":319,\"column\":60}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":319,\"column\":64},\"end\":{\"line\":319,\"column\":72}}},\"loc\":{\"start\":{\"line\":319,\"column\":48},\"end\":{\"line\":319,\"column\":72}}},\"loc\":{\"start\":{\"line\":319,\"column\":7},\"end\":{\"line\":319,\"column\":72}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":320,\"column\":8},\"end\":{\"line\":320,\"column\":14}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":320,\"column\":18},\"end\":{\"line\":320,\"column\":27}}},\"loc\":{\"start\":{\"line\":320,\"column\":8},\"end\":{\"line\":320,\"column\":27}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to index a \",\"raw\":\"\\\"attempt to index a \\\"\",\"loc\":{\"start\":{\"line\":321,\"column\":10},\"end\":{\"line\":321,\"column\":31}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":321,\"column\":34},\"end\":{\"line\":321,\"column\":38}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":321,\"column\":39},\"end\":{\"line\":321,\"column\":44}}}],\"loc\":{\"start\":{\"line\":321,\"column\":34},\"end\":{\"line\":321,\"column\":45}}},\"loc\":{\"start\":{\"line\":321,\"column\":10},\"end\":{\"line\":321,\"column\":45}}},\"right\":{\"type\":\"Literal\",\"value\":\" value\",\"raw\":\"\\\" value\\\"\",\"loc\":{\"start\":{\"line\":321,\"column\":48},\"end\":{\"line\":321,\"column\":56}}},\"loc\":{\"start\":{\"line\":321,\"column\":10},\"end\":{\"line\":321,\"column\":56}}},\"loc\":{\"start\":{\"line\":321,\"column\":4},\"end\":{\"line\":321,\"column\":57}}}],\"loc\":{\"start\":{\"line\":320,\"column\":30},\"end\":{\"line\":322,\"column\":4}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"attempt to index '\",\"raw\":\"\\\"attempt to index '\\\"\",\"loc\":{\"start\":{\"line\":323,\"column\":10},\"end\":{\"line\":323,\"column\":30}}},\"right\":{\"type\":\"Identifier\",\"name\":\"helper\",\"loc\":{\"start\":{\"line\":323,\"column\":33},\"end\":{\"line\":323,\"column\":39}}},\"loc\":{\"start\":{\"line\":323,\"column\":10},\"end\":{\"line\":323,\"column\":39}}},\"right\":{\"type\":\"Literal\",\"value\":\"' (a \",\"raw\":\"\\\"' (a \\\"\",\"loc\":{\"start\":{\"line\":323,\"column\":42},\"end\":{\"line\":323,\"column\":49}}},\"loc\":{\"start\":{\"line\":323,\"column\":10},\"end\":{\"line\":323,\"column\":49}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":323,\"column\":52},\"end\":{\"line\":323,\"column\":56}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":323,\"column\":57},\"end\":{\"line\":323,\"column\":62}}}],\"loc\":{\"start\":{\"line\":323,\"column\":52},\"end\":{\"line\":323,\"column\":63}}},\"loc\":{\"start\":{\"line\":323,\"column\":10},\"end\":{\"line\":323,\"column\":63}}},\"right\":{\"type\":\"Literal\",\"value\":\" value)\",\"raw\":\"\\\" value)\\\"\",\"loc\":{\"start\":{\"line\":323,\"column\":66},\"end\":{\"line\":323,\"column\":75}}},\"loc\":{\"start\":{\"line\":323,\"column\":10},\"end\":{\"line\":323,\"column\":75}}},\"loc\":{\"start\":{\"line\":323,\"column\":4},\"end\":{\"line\":323,\"column\":76}}}],\"loc\":{\"start\":{\"line\":322,\"column\":10},\"end\":{\"line\":324,\"column\":4}}},\"loc\":{\"start\":{\"line\":320,\"column\":3},\"end\":{\"line\":324,\"column\":4}}}],\"loc\":{\"start\":{\"line\":319,\"column\":75},\"end\":{\"line\":325,\"column\":3}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":319,\"column\":2},\"end\":{\"line\":325,\"column\":3}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":327,\"column\":7},\"end\":{\"line\":327,\"column\":12}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":327,\"column\":24},\"end\":{\"line\":327,\"column\":32}}},\"loc\":{\"start\":{\"line\":327,\"column\":7},\"end\":{\"line\":327,\"column\":32}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":328,\"column\":7},\"end\":{\"line\":328,\"column\":10}}},\"init\":null,\"loc\":{\"start\":{\"line\":328,\"column\":7},\"end\":{\"line\":328,\"column\":10}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":328,\"column\":3},\"end\":{\"line\":328,\"column\":11}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":330,\"column\":8},\"end\":{\"line\":330,\"column\":12}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":330,\"column\":17},\"end\":{\"line\":330,\"column\":26}}},\"loc\":{\"start\":{\"line\":330,\"column\":8},\"end\":{\"line\":330,\"column\":26}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":330,\"column\":30},\"end\":{\"line\":330,\"column\":34}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":330,\"column\":39},\"end\":{\"line\":330,\"column\":43}}},\"loc\":{\"start\":{\"line\":330,\"column\":30},\"end\":{\"line\":330,\"column\":43}}},\"loc\":{\"start\":{\"line\":330,\"column\":8},\"end\":{\"line\":330,\"column\":43}}},\"consequent\":{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"table index is nil\",\"raw\":\"\\\"table index is nil\\\"\",\"loc\":{\"start\":{\"line\":330,\"column\":52},\"end\":{\"line\":330,\"column\":72}}},\"loc\":{\"start\":{\"line\":330,\"column\":46},\"end\":{\"line\":330,\"column\":73}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":330,\"column\":3},\"end\":{\"line\":330,\"column\":73}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":332,\"column\":15},\"end\":{\"line\":332,\"column\":19}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":332,\"column\":8},\"end\":{\"line\":332,\"column\":19}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":332,\"column\":23},\"end\":{\"line\":332,\"column\":31}}},\"loc\":{\"start\":{\"line\":332,\"column\":8},\"end\":{\"line\":332,\"column\":31}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":332,\"column\":34},\"end\":{\"line\":332,\"column\":37}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":332,\"column\":40},\"end\":{\"line\":332,\"column\":45}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":332,\"column\":46},\"end\":{\"line\":332,\"column\":53}}},\"loc\":{\"start\":{\"line\":332,\"column\":40},\"end\":{\"line\":332,\"column\":53}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":332,\"column\":54},\"end\":{\"line\":332,\"column\":58}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":332,\"column\":59},\"end\":{\"line\":332,\"column\":60}}},\"loc\":{\"start\":{\"line\":332,\"column\":54},\"end\":{\"line\":332,\"column\":60}}},\"loc\":{\"start\":{\"line\":332,\"column\":40},\"end\":{\"line\":332,\"column\":61}}},\"loc\":{\"start\":{\"line\":332,\"column\":34},\"end\":{\"line\":332,\"column\":61}}},\"loc\":{\"start\":{\"line\":332,\"column\":34},\"end\":{\"line\":332,\"column\":62}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":333,\"column\":8},\"end\":{\"line\":333,\"column\":11}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":333,\"column\":14},\"end\":{\"line\":333,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":333,\"column\":20},\"end\":{\"line\":333,\"column\":24}}},\"loc\":{\"start\":{\"line\":333,\"column\":14},\"end\":{\"line\":333,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":333,\"column\":25},\"end\":{\"line\":333,\"column\":29}}},\"loc\":{\"start\":{\"line\":333,\"column\":14},\"end\":{\"line\":333,\"column\":30}}},\"loc\":{\"start\":{\"line\":333,\"column\":8},\"end\":{\"line\":333,\"column\":30}}},\"loc\":{\"start\":{\"line\":333,\"column\":8},\"end\":{\"line\":333,\"column\":31}}},\"loc\":{\"start\":{\"line\":332,\"column\":3},\"end\":{\"line\":333,\"column\":31}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"&\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":335,\"column\":8},\"end\":{\"line\":335,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":335,\"column\":16},\"end\":{\"line\":335,\"column\":20}}},\"loc\":{\"start\":{\"line\":335,\"column\":8},\"end\":{\"line\":335,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":335,\"column\":23},\"end\":{\"line\":335,\"column\":26}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":335,\"column\":31},\"end\":{\"line\":335,\"column\":40}}},\"loc\":{\"start\":{\"line\":335,\"column\":23},\"end\":{\"line\":335,\"column\":40}}},\"loc\":{\"start\":{\"line\":335,\"column\":8},\"end\":{\"line\":335,\"column\":40}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":336,\"column\":16},\"end\":{\"line\":336,\"column\":20}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":336,\"column\":9},\"end\":{\"line\":336,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":336,\"column\":24},\"end\":{\"line\":336,\"column\":32}}},\"loc\":{\"start\":{\"line\":336,\"column\":9},\"end\":{\"line\":336,\"column\":32}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":336,\"column\":34},\"end\":{\"line\":336,\"column\":39}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":336,\"column\":40},\"end\":{\"line\":336,\"column\":47}}},\"loc\":{\"start\":{\"line\":336,\"column\":34},\"end\":{\"line\":336,\"column\":47}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":336,\"column\":48},\"end\":{\"line\":336,\"column\":52}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":336,\"column\":53},\"end\":{\"line\":336,\"column\":54}}},\"loc\":{\"start\":{\"line\":336,\"column\":48},\"end\":{\"line\":336,\"column\":54}}},\"loc\":{\"start\":{\"line\":336,\"column\":34},\"end\":{\"line\":336,\"column\":55}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":336,\"column\":58},\"end\":{\"line\":336,\"column\":63}}},\"loc\":{\"start\":{\"line\":336,\"column\":34},\"end\":{\"line\":336,\"column\":63}}},\"loc\":{\"start\":{\"line\":336,\"column\":34},\"end\":{\"line\":336,\"column\":64}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":337,\"column\":9},\"end\":{\"line\":337,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":337,\"column\":15},\"end\":{\"line\":337,\"column\":19}}},\"loc\":{\"start\":{\"line\":337,\"column\":9},\"end\":{\"line\":337,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":337,\"column\":20},\"end\":{\"line\":337,\"column\":24}}},\"loc\":{\"start\":{\"line\":337,\"column\":9},\"end\":{\"line\":337,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":337,\"column\":28},\"end\":{\"line\":337,\"column\":33}}},\"loc\":{\"start\":{\"line\":337,\"column\":9},\"end\":{\"line\":337,\"column\":33}}},\"loc\":{\"start\":{\"line\":337,\"column\":9},\"end\":{\"line\":337,\"column\":34}}},\"loc\":{\"start\":{\"line\":336,\"column\":4},\"end\":{\"line\":337,\"column\":34}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":338,\"column\":11},\"end\":{\"line\":338,\"column\":15}}},\"loc\":{\"start\":{\"line\":338,\"column\":4},\"end\":{\"line\":338,\"column\":16}}}],\"loc\":{\"start\":{\"line\":335,\"column\":43},\"end\":{\"line\":339,\"column\":4}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":335,\"column\":3},\"end\":{\"line\":339,\"column\":4}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":341,\"column\":8},\"end\":{\"line\":341,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__metatable\",\"loc\":{\"start\":{\"line\":341,\"column\":14},\"end\":{\"line\":341,\"column\":25}}},\"loc\":{\"start\":{\"line\":341,\"column\":8},\"end\":{\"line\":341,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":341,\"column\":30},\"end\":{\"line\":341,\"column\":39}}},\"loc\":{\"start\":{\"line\":341,\"column\":8},\"end\":{\"line\":341,\"column\":39}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":342,\"column\":16},\"end\":{\"line\":342,\"column\":20}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":342,\"column\":9},\"end\":{\"line\":342,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":342,\"column\":24},\"end\":{\"line\":342,\"column\":32}}},\"loc\":{\"start\":{\"line\":342,\"column\":9},\"end\":{\"line\":342,\"column\":32}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":342,\"column\":34},\"end\":{\"line\":342,\"column\":39}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":342,\"column\":40},\"end\":{\"line\":342,\"column\":47}}},\"loc\":{\"start\":{\"line\":342,\"column\":34},\"end\":{\"line\":342,\"column\":47}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":342,\"column\":48},\"end\":{\"line\":342,\"column\":52}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":342,\"column\":53},\"end\":{\"line\":342,\"column\":54}}},\"loc\":{\"start\":{\"line\":342,\"column\":48},\"end\":{\"line\":342,\"column\":54}}},\"loc\":{\"start\":{\"line\":342,\"column\":34},\"end\":{\"line\":342,\"column\":55}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":342,\"column\":58},\"end\":{\"line\":342,\"column\":63}}},\"loc\":{\"start\":{\"line\":342,\"column\":34},\"end\":{\"line\":342,\"column\":63}}},\"loc\":{\"start\":{\"line\":342,\"column\":34},\"end\":{\"line\":342,\"column\":64}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":343,\"column\":9},\"end\":{\"line\":343,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":343,\"column\":15},\"end\":{\"line\":343,\"column\":19}}},\"loc\":{\"start\":{\"line\":343,\"column\":9},\"end\":{\"line\":343,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":343,\"column\":20},\"end\":{\"line\":343,\"column\":24}}},\"loc\":{\"start\":{\"line\":343,\"column\":9},\"end\":{\"line\":343,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":343,\"column\":28},\"end\":{\"line\":343,\"column\":33}}},\"loc\":{\"start\":{\"line\":343,\"column\":9},\"end\":{\"line\":343,\"column\":33}}},\"loc\":{\"start\":{\"line\":343,\"column\":9},\"end\":{\"line\":343,\"column\":34}}},\"loc\":{\"start\":{\"line\":342,\"column\":4},\"end\":{\"line\":343,\"column\":34}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":344,\"column\":11},\"end\":{\"line\":344,\"column\":15}}},\"loc\":{\"start\":{\"line\":344,\"column\":4},\"end\":{\"line\":344,\"column\":16}}}],\"loc\":{\"start\":{\"line\":341,\"column\":42},\"end\":{\"line\":345,\"column\":4}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":341,\"column\":3},\"end\":{\"line\":345,\"column\":4}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":349,\"column\":7},\"end\":{\"line\":349,\"column\":10}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":349,\"column\":13},\"end\":{\"line\":349,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__metatable\",\"loc\":{\"start\":{\"line\":349,\"column\":19},\"end\":{\"line\":349,\"column\":30}}},\"loc\":{\"start\":{\"line\":349,\"column\":13},\"end\":{\"line\":349,\"column\":30}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__newindex\",\"loc\":{\"start\":{\"line\":349,\"column\":31},\"end\":{\"line\":349,\"column\":41}}},\"loc\":{\"start\":{\"line\":349,\"column\":13},\"end\":{\"line\":349,\"column\":41}}},\"loc\":{\"start\":{\"line\":349,\"column\":7},\"end\":{\"line\":349,\"column\":41}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":349,\"column\":3},\"end\":{\"line\":349,\"column\":42}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":350,\"column\":8},\"end\":{\"line\":350,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":350,\"column\":16},\"end\":{\"line\":350,\"column\":20}}},\"loc\":{\"start\":{\"line\":350,\"column\":8},\"end\":{\"line\":350,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":350,\"column\":24},\"end\":{\"line\":350,\"column\":27}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":350,\"column\":32},\"end\":{\"line\":350,\"column\":41}}},\"loc\":{\"start\":{\"line\":350,\"column\":24},\"end\":{\"line\":350,\"column\":41}}},\"loc\":{\"start\":{\"line\":350,\"column\":8},\"end\":{\"line\":350,\"column\":41}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"pop\",\"loc\":{\"start\":{\"line\":351,\"column\":16},\"end\":{\"line\":351,\"column\":19}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":351,\"column\":9},\"end\":{\"line\":351,\"column\":19}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":351,\"column\":23},\"end\":{\"line\":351,\"column\":31}}},\"loc\":{\"start\":{\"line\":351,\"column\":9},\"end\":{\"line\":351,\"column\":31}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":351,\"column\":33},\"end\":{\"line\":351,\"column\":38}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":351,\"column\":39},\"end\":{\"line\":351,\"column\":46}}},\"loc\":{\"start\":{\"line\":351,\"column\":33},\"end\":{\"line\":351,\"column\":46}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":351,\"column\":47},\"end\":{\"line\":351,\"column\":51}}},\"loc\":{\"start\":{\"line\":351,\"column\":33},\"end\":{\"line\":351,\"column\":52}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":351,\"column\":55},\"end\":{\"line\":351,\"column\":60}}},\"loc\":{\"start\":{\"line\":351,\"column\":33},\"end\":{\"line\":351,\"column\":60}}},\"loc\":{\"start\":{\"line\":351,\"column\":33},\"end\":{\"line\":351,\"column\":61}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":352,\"column\":9},\"end\":{\"line\":352,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":352,\"column\":15},\"end\":{\"line\":352,\"column\":19}}},\"loc\":{\"start\":{\"line\":352,\"column\":9},\"end\":{\"line\":352,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":352,\"column\":20},\"end\":{\"line\":352,\"column\":24}}},\"loc\":{\"start\":{\"line\":352,\"column\":9},\"end\":{\"line\":352,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":352,\"column\":28},\"end\":{\"line\":352,\"column\":33}}},\"loc\":{\"start\":{\"line\":352,\"column\":9},\"end\":{\"line\":352,\"column\":33}}},\"loc\":{\"start\":{\"line\":352,\"column\":9},\"end\":{\"line\":352,\"column\":34}}},\"loc\":{\"start\":{\"line\":351,\"column\":4},\"end\":{\"line\":352,\"column\":34}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":353,\"column\":11},\"end\":{\"line\":353,\"column\":15}}},\"loc\":{\"start\":{\"line\":353,\"column\":4},\"end\":{\"line\":353,\"column\":16}}}],\"loc\":{\"start\":{\"line\":350,\"column\":44},\"end\":{\"line\":354,\"column\":4}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":350,\"column\":3},\"end\":{\"line\":354,\"column\":4}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":356,\"column\":15},\"end\":{\"line\":356,\"column\":18}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":356,\"column\":8},\"end\":{\"line\":356,\"column\":18}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":356,\"column\":22},\"end\":{\"line\":356,\"column\":32}}},\"loc\":{\"start\":{\"line\":356,\"column\":8},\"end\":{\"line\":356,\"column\":32}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":356,\"column\":35},\"end\":{\"line\":356,\"column\":38}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":356,\"column\":39},\"end\":{\"line\":356,\"column\":44}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":356,\"column\":46},\"end\":{\"line\":356,\"column\":50}}},{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":356,\"column\":52},\"end\":{\"line\":356,\"column\":57}}}],\"loc\":{\"start\":{\"line\":356,\"column\":35},\"end\":{\"line\":356,\"column\":58}}},\"loc\":{\"start\":{\"line\":356,\"column\":35},\"end\":{\"line\":356,\"column\":59}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"indexAssign\",\"loc\":{\"start\":{\"line\":357,\"column\":8},\"end\":{\"line\":357,\"column\":19}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":357,\"column\":20},\"end\":{\"line\":357,\"column\":23}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":357,\"column\":25},\"end\":{\"line\":357,\"column\":29}}},{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":357,\"column\":31},\"end\":{\"line\":357,\"column\":36}}}],\"loc\":{\"start\":{\"line\":357,\"column\":8},\"end\":{\"line\":357,\"column\":37}}},\"loc\":{\"start\":{\"line\":357,\"column\":8},\"end\":{\"line\":357,\"column\":38}}},\"loc\":{\"start\":{\"line\":356,\"column\":3},\"end\":{\"line\":357,\"column\":38}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":359,\"column\":10},\"end\":{\"line\":359,\"column\":14}}},\"loc\":{\"start\":{\"line\":359,\"column\":3},\"end\":{\"line\":359,\"column\":15}}}],\"loc\":{\"start\":{\"line\":327,\"column\":35},\"end\":{\"line\":362,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":362,\"column\":21},\"end\":{\"line\":362,\"column\":26}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":362,\"column\":14},\"end\":{\"line\":362,\"column\":26}}},\"right\":{\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"\\\"string\\\"\",\"loc\":{\"start\":{\"line\":362,\"column\":30},\"end\":{\"line\":362,\"column\":38}}},\"loc\":{\"start\":{\"line\":362,\"column\":14},\"end\":{\"line\":362,\"column\":38}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"attempt to index string value\",\"raw\":\"\\\"attempt to index string value\\\"\",\"loc\":{\"start\":{\"line\":363,\"column\":9},\"end\":{\"line\":363,\"column\":40}}},\"loc\":{\"start\":{\"line\":363,\"column\":3},\"end\":{\"line\":363,\"column\":41}}}],\"loc\":{\"start\":{\"line\":362,\"column\":41},\"end\":{\"line\":364,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":364,\"column\":14},\"end\":{\"line\":364,\"column\":23}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":364,\"column\":24},\"end\":{\"line\":364,\"column\":29}}}],\"loc\":{\"start\":{\"line\":364,\"column\":14},\"end\":{\"line\":364,\"column\":30}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":365,\"column\":3},\"end\":{\"line\":365,\"column\":8}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":365,\"column\":9},\"end\":{\"line\":365,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":365,\"column\":14},\"end\":{\"line\":365,\"column\":15}}},\"loc\":{\"start\":{\"line\":365,\"column\":9},\"end\":{\"line\":365,\"column\":15}}},\"loc\":{\"start\":{\"line\":365,\"column\":3},\"end\":{\"line\":365,\"column\":16}}},\"right\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":365,\"column\":19},\"end\":{\"line\":365,\"column\":24}}},\"loc\":{\"start\":{\"line\":365,\"column\":3},\"end\":{\"line\":365,\"column\":24}}},\"loc\":{\"start\":{\"line\":365,\"column\":3},\"end\":{\"line\":365,\"column\":25}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":366,\"column\":10},\"end\":{\"line\":366,\"column\":14}}},\"loc\":{\"start\":{\"line\":366,\"column\":3},\"end\":{\"line\":366,\"column\":15}}}],\"loc\":{\"start\":{\"line\":364,\"column\":33},\"end\":{\"line\":367,\"column\":3}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":368,\"column\":10},\"end\":{\"line\":368,\"column\":15}}},\"loc\":{\"start\":{\"line\":368,\"column\":3},\"end\":{\"line\":368,\"column\":16}}}],\"loc\":{\"start\":{\"line\":367,\"column\":9},\"end\":{\"line\":369,\"column\":3}}},\"loc\":{\"start\":{\"line\":364,\"column\":9},\"end\":{\"line\":369,\"column\":3}}},\"loc\":{\"start\":{\"line\":362,\"column\":9},\"end\":{\"line\":369,\"column\":3}}},\"loc\":{\"start\":{\"line\":327,\"column\":2},\"end\":{\"line\":369,\"column\":3}}}],\"loc\":{\"start\":{\"line\":317,\"column\":50},\"end\":{\"line\":370,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":317,\"column\":1},\"end\":{\"line\":370,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":372,\"column\":10},\"end\":{\"line\":372,\"column\":18}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":372,\"column\":19},\"end\":{\"line\":372,\"column\":20}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":373,\"column\":7},\"end\":{\"line\":373,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaReturnValues\",\"loc\":{\"start\":{\"line\":373,\"column\":20},\"end\":{\"line\":373,\"column\":35}}},\"loc\":{\"start\":{\"line\":373,\"column\":7},\"end\":{\"line\":373,\"column\":35}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":373,\"column\":45},\"end\":{\"line\":373,\"column\":46}}},\"property\":{\"type\":\"Identifier\",\"name\":\"values\",\"loc\":{\"start\":{\"line\":373,\"column\":47},\"end\":{\"line\":373,\"column\":53}}},\"loc\":{\"start\":{\"line\":373,\"column\":45},\"end\":{\"line\":373,\"column\":53}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":373,\"column\":54},\"end\":{\"line\":373,\"column\":55}}},\"loc\":{\"start\":{\"line\":373,\"column\":45},\"end\":{\"line\":373,\"column\":56}}},\"loc\":{\"start\":{\"line\":373,\"column\":38},\"end\":{\"line\":373,\"column\":57}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":373,\"column\":2},\"end\":{\"line\":373,\"column\":57}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":374,\"column\":9},\"end\":{\"line\":374,\"column\":10}}},\"loc\":{\"start\":{\"line\":374,\"column\":2},\"end\":{\"line\":374,\"column\":11}}}],\"loc\":{\"start\":{\"line\":372,\"column\":22},\"end\":{\"line\":375,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":372,\"column\":1},\"end\":{\"line\":375,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":377,\"column\":10},\"end\":{\"line\":377,\"column\":25}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"NewExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"LuaReturnValues\",\"loc\":{\"start\":{\"line\":378,\"column\":13},\"end\":{\"line\":378,\"column\":28}}},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":378,\"column\":29},\"end\":{\"line\":378,\"column\":35}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":378,\"column\":36},\"end\":{\"line\":378,\"column\":45}}},{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":378,\"column\":47},\"end\":{\"line\":378,\"column\":51}}}],\"loc\":{\"start\":{\"line\":378,\"column\":29},\"end\":{\"line\":378,\"column\":52}}}],\"loc\":{\"start\":{\"line\":378,\"column\":9},\"end\":{\"line\":378,\"column\":53}}},\"loc\":{\"start\":{\"line\":378,\"column\":2},\"end\":{\"line\":378,\"column\":54}}}],\"loc\":{\"start\":{\"line\":377,\"column\":28},\"end\":{\"line\":379,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":377,\"column\":1},\"end\":{\"line\":379,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":381,\"column\":10},\"end\":{\"line\":381,\"column\":16}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":381,\"column\":17},\"end\":{\"line\":381,\"column\":21}}},{\"type\":\"Identifier\",\"name\":\"allowExpand\",\"loc\":{\"start\":{\"line\":381,\"column\":23},\"end\":{\"line\":381,\"column\":34}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"allowExpand\",\"loc\":{\"start\":{\"line\":382,\"column\":7},\"end\":{\"line\":382,\"column\":18}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":382,\"column\":23},\"end\":{\"line\":382,\"column\":32}}},\"loc\":{\"start\":{\"line\":382,\"column\":7},\"end\":{\"line\":382,\"column\":32}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"allowExpand\",\"loc\":{\"start\":{\"line\":382,\"column\":35},\"end\":{\"line\":382,\"column\":46}}},\"right\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":382,\"column\":49},\"end\":{\"line\":382,\"column\":54}}},\"loc\":{\"start\":{\"line\":382,\"column\":35},\"end\":{\"line\":382,\"column\":54}}},\"loc\":{\"start\":{\"line\":382,\"column\":35},\"end\":{\"line\":382,\"column\":55}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":382,\"column\":2},\"end\":{\"line\":382,\"column\":55}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":384,\"column\":6},\"end\":{\"line\":384,\"column\":9}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":384,\"column\":12},\"end\":{\"line\":384,\"column\":14}}},\"loc\":{\"start\":{\"line\":384,\"column\":6},\"end\":{\"line\":384,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":384,\"column\":2},\"end\":{\"line\":384,\"column\":15}}},{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":385,\"column\":12},\"end\":{\"line\":385,\"column\":15}}},\"init\":null,\"loc\":{\"start\":{\"line\":385,\"column\":12},\"end\":{\"line\":385,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":385,\"column\":8},\"end\":{\"line\":385,\"column\":15}}},\"right\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":385,\"column\":19},\"end\":{\"line\":385,\"column\":23}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":386,\"column\":7},\"end\":{\"line\":386,\"column\":8}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":386,\"column\":11},\"end\":{\"line\":386,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":386,\"column\":16},\"end\":{\"line\":386,\"column\":19}}},\"loc\":{\"start\":{\"line\":386,\"column\":11},\"end\":{\"line\":386,\"column\":20}}},\"loc\":{\"start\":{\"line\":386,\"column\":7},\"end\":{\"line\":386,\"column\":20}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":386,\"column\":3},\"end\":{\"line\":386,\"column\":21}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":387,\"column\":8},\"end\":{\"line\":387,\"column\":9}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaReturnValues\",\"loc\":{\"start\":{\"line\":387,\"column\":21},\"end\":{\"line\":387,\"column\":36}}},\"loc\":{\"start\":{\"line\":387,\"column\":8},\"end\":{\"line\":387,\"column\":36}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":388,\"column\":14},\"end\":{\"line\":388,\"column\":15}}},\"init\":null,\"loc\":{\"start\":{\"line\":388,\"column\":14},\"end\":{\"line\":388,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":388,\"column\":10},\"end\":{\"line\":388,\"column\":15}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":388,\"column\":19},\"end\":{\"line\":388,\"column\":20}}},\"property\":{\"type\":\"Identifier\",\"name\":\"values\",\"loc\":{\"start\":{\"line\":388,\"column\":21},\"end\":{\"line\":388,\"column\":27}}},\"loc\":{\"start\":{\"line\":388,\"column\":19},\"end\":{\"line\":388,\"column\":27}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":389,\"column\":5},\"end\":{\"line\":389,\"column\":8}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":389,\"column\":9},\"end\":{\"line\":389,\"column\":13}}},\"loc\":{\"start\":{\"line\":389,\"column\":5},\"end\":{\"line\":389,\"column\":13}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":389,\"column\":14},\"end\":{\"line\":389,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"values\",\"loc\":{\"start\":{\"line\":389,\"column\":16},\"end\":{\"line\":389,\"column\":22}}},\"loc\":{\"start\":{\"line\":389,\"column\":14},\"end\":{\"line\":389,\"column\":22}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":389,\"column\":23},\"end\":{\"line\":389,\"column\":24}}},\"loc\":{\"start\":{\"line\":389,\"column\":14},\"end\":{\"line\":389,\"column\":25}}}],\"loc\":{\"start\":{\"line\":389,\"column\":5},\"end\":{\"line\":389,\"column\":26}}},\"loc\":{\"start\":{\"line\":389,\"column\":5},\"end\":{\"line\":389,\"column\":27}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":390,\"column\":10},\"end\":{\"line\":390,\"column\":13}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":390,\"column\":16},\"end\":{\"line\":390,\"column\":20}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":390,\"column\":21},\"end\":{\"line\":390,\"column\":27}}},\"loc\":{\"start\":{\"line\":390,\"column\":16},\"end\":{\"line\":390,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":390,\"column\":30},\"end\":{\"line\":390,\"column\":31}}},\"loc\":{\"start\":{\"line\":390,\"column\":16},\"end\":{\"line\":390,\"column\":31}}},\"loc\":{\"start\":{\"line\":390,\"column\":10},\"end\":{\"line\":390,\"column\":31}}},\"right\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"Identifier\",\"name\":\"allowExpand\",\"loc\":{\"start\":{\"line\":390,\"column\":36},\"end\":{\"line\":390,\"column\":47}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":390,\"column\":35},\"end\":{\"line\":390,\"column\":47}}},\"loc\":{\"start\":{\"line\":390,\"column\":10},\"end\":{\"line\":390,\"column\":47}}},\"consequent\":{\"type\":\"BreakStatement\",\"label\":null,\"loc\":{\"start\":{\"line\":390,\"column\":49},\"end\":{\"line\":390,\"column\":55}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":390,\"column\":5},\"end\":{\"line\":390,\"column\":55}}}],\"loc\":{\"start\":{\"line\":388,\"column\":30},\"end\":{\"line\":391,\"column\":5}}},\"each\":false,\"loc\":{\"start\":{\"line\":388,\"column\":4},\"end\":{\"line\":391,\"column\":5}}}],\"loc\":{\"start\":{\"line\":387,\"column\":39},\"end\":{\"line\":392,\"column\":4}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":393,\"column\":4},\"end\":{\"line\":393,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":393,\"column\":8},\"end\":{\"line\":393,\"column\":12}}},\"loc\":{\"start\":{\"line\":393,\"column\":4},\"end\":{\"line\":393,\"column\":12}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":393,\"column\":13},\"end\":{\"line\":393,\"column\":14}}}],\"loc\":{\"start\":{\"line\":393,\"column\":4},\"end\":{\"line\":393,\"column\":15}}},\"loc\":{\"start\":{\"line\":393,\"column\":4},\"end\":{\"line\":393,\"column\":16}}}],\"loc\":{\"start\":{\"line\":392,\"column\":10},\"end\":{\"line\":394,\"column\":4}}},\"loc\":{\"start\":{\"line\":387,\"column\":3},\"end\":{\"line\":394,\"column\":4}}}],\"loc\":{\"start\":{\"line\":385,\"column\":26},\"end\":{\"line\":395,\"column\":3}}},\"each\":false,\"loc\":{\"start\":{\"line\":385,\"column\":2},\"end\":{\"line\":395,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":396,\"column\":9},\"end\":{\"line\":396,\"column\":12}}},\"loc\":{\"start\":{\"line\":396,\"column\":2},\"end\":{\"line\":396,\"column\":13}}}],\"loc\":{\"start\":{\"line\":381,\"column\":36},\"end\":{\"line\":397,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":381,\"column\":1},\"end\":{\"line\":397,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"expandReturnValues\",\"loc\":{\"start\":{\"line\":399,\"column\":10},\"end\":{\"line\":399,\"column\":28}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":400,\"column\":9},\"end\":{\"line\":400,\"column\":15}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":400,\"column\":16},\"end\":{\"line\":400,\"column\":25}}},{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":400,\"column\":27},\"end\":{\"line\":400,\"column\":31}}}],\"loc\":{\"start\":{\"line\":400,\"column\":9},\"end\":{\"line\":400,\"column\":32}}},\"loc\":{\"start\":{\"line\":400,\"column\":2},\"end\":{\"line\":400,\"column\":33}}}],\"loc\":{\"start\":{\"line\":399,\"column\":31},\"end\":{\"line\":401,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":399,\"column\":1},\"end\":{\"line\":401,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"pcall\",\"loc\":{\"start\":{\"line\":403,\"column\":10},\"end\":{\"line\":403,\"column\":15}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":403,\"column\":16},\"end\":{\"line\":403,\"column\":20}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"TryStatement\",\"block\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"result\",\"loc\":{\"start\":{\"line\":405,\"column\":7},\"end\":{\"line\":405,\"column\":13}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":405,\"column\":16},\"end\":{\"line\":405,\"column\":22}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":405,\"column\":24},\"end\":{\"line\":405,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":405,\"column\":29},\"end\":{\"line\":405,\"column\":34}}},\"loc\":{\"start\":{\"line\":405,\"column\":24},\"end\":{\"line\":405,\"column\":34}}},\"arguments\":[{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":405,\"column\":35},\"end\":{\"line\":405,\"column\":39}}},{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Array\",\"loc\":{\"start\":{\"line\":405,\"column\":41},\"end\":{\"line\":405,\"column\":46}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prototype\",\"loc\":{\"start\":{\"line\":405,\"column\":47},\"end\":{\"line\":405,\"column\":56}}},\"loc\":{\"start\":{\"line\":405,\"column\":41},\"end\":{\"line\":405,\"column\":56}}},\"property\":{\"type\":\"Identifier\",\"name\":\"slice\",\"loc\":{\"start\":{\"line\":405,\"column\":57},\"end\":{\"line\":405,\"column\":62}}},\"loc\":{\"start\":{\"line\":405,\"column\":41},\"end\":{\"line\":405,\"column\":62}}},\"property\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":405,\"column\":63},\"end\":{\"line\":405,\"column\":67}}},\"loc\":{\"start\":{\"line\":405,\"column\":41},\"end\":{\"line\":405,\"column\":67}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":405,\"column\":68},\"end\":{\"line\":405,\"column\":77}}},{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":405,\"column\":79},\"end\":{\"line\":405,\"column\":80}}}],\"loc\":{\"start\":{\"line\":405,\"column\":41},\"end\":{\"line\":405,\"column\":81}}}],\"loc\":{\"start\":{\"line\":405,\"column\":24},\"end\":{\"line\":405,\"column\":82}}}],\"loc\":{\"start\":{\"line\":405,\"column\":23},\"end\":{\"line\":405,\"column\":83}}},{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":405,\"column\":85},\"end\":{\"line\":405,\"column\":89}}}],\"loc\":{\"start\":{\"line\":405,\"column\":16},\"end\":{\"line\":405,\"column\":90}}},\"loc\":{\"start\":{\"line\":405,\"column\":7},\"end\":{\"line\":405,\"column\":90}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":405,\"column\":3},\"end\":{\"line\":405,\"column\":91}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"result\",\"loc\":{\"start\":{\"line\":406,\"column\":3},\"end\":{\"line\":406,\"column\":9}}},\"property\":{\"type\":\"Identifier\",\"name\":\"unshift\",\"loc\":{\"start\":{\"line\":406,\"column\":10},\"end\":{\"line\":406,\"column\":17}}},\"loc\":{\"start\":{\"line\":406,\"column\":3},\"end\":{\"line\":406,\"column\":17}}},\"arguments\":[{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":406,\"column\":18},\"end\":{\"line\":406,\"column\":22}}}],\"loc\":{\"start\":{\"line\":406,\"column\":3},\"end\":{\"line\":406,\"column\":23}}},\"loc\":{\"start\":{\"line\":406,\"column\":3},\"end\":{\"line\":406,\"column\":24}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":407,\"column\":10},\"end\":{\"line\":407,\"column\":25}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":407,\"column\":26},\"end\":{\"line\":407,\"column\":31}}},\"loc\":{\"start\":{\"line\":407,\"column\":10},\"end\":{\"line\":407,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":407,\"column\":32},\"end\":{\"line\":407,\"column\":37}}},{\"type\":\"Identifier\",\"name\":\"result\",\"loc\":{\"start\":{\"line\":407,\"column\":39},\"end\":{\"line\":407,\"column\":45}}}],\"loc\":{\"start\":{\"line\":407,\"column\":10},\"end\":{\"line\":407,\"column\":46}}},\"loc\":{\"start\":{\"line\":407,\"column\":3},\"end\":{\"line\":407,\"column\":47}}}],\"loc\":{\"start\":{\"line\":404,\"column\":6},\"end\":{\"line\":408,\"column\":3}}},\"guardedHandlers\":[],\"handlers\":[{\"type\":\"CatchClause\",\"param\":{\"type\":\"Identifier\",\"name\":\"e\",\"loc\":{\"start\":{\"line\":408,\"column\":12},\"end\":{\"line\":408,\"column\":13}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":409,\"column\":10},\"end\":{\"line\":409,\"column\":25}}},\"arguments\":[{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":409,\"column\":26},\"end\":{\"line\":409,\"column\":31}}},{\"type\":\"Identifier\",\"name\":\"e\",\"loc\":{\"start\":{\"line\":409,\"column\":33},\"end\":{\"line\":409,\"column\":34}}}],\"loc\":{\"start\":{\"line\":409,\"column\":10},\"end\":{\"line\":409,\"column\":35}}},\"loc\":{\"start\":{\"line\":409,\"column\":3},\"end\":{\"line\":409,\"column\":36}}}],\"loc\":{\"start\":{\"line\":408,\"column\":16},\"end\":{\"line\":410,\"column\":3}}},\"loc\":{\"start\":{\"line\":408,\"column\":4},\"end\":{\"line\":410,\"column\":3}}}],\"finalizer\":null,\"loc\":{\"start\":{\"line\":404,\"column\":2},\"end\":{\"line\":410,\"column\":3}}}],\"loc\":{\"start\":{\"line\":403,\"column\":38},\"end\":{\"line\":411,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":403,\"column\":1},\"end\":{\"line\":411,\"column\":2}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":413,\"column\":10},\"end\":{\"line\":413,\"column\":17}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":413,\"column\":18},\"end\":{\"line\":413,\"column\":19}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":413,\"column\":30},\"end\":{\"line\":413,\"column\":31}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":413,\"column\":43},\"end\":{\"line\":413,\"column\":51}}},\"loc\":{\"start\":{\"line\":413,\"column\":30},\"end\":{\"line\":413,\"column\":51}}},\"loc\":{\"start\":{\"line\":413,\"column\":23},\"end\":{\"line\":413,\"column\":52}}}],\"loc\":{\"start\":{\"line\":413,\"column\":21},\"end\":{\"line\":413,\"column\":54}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":413,\"column\":1},\"end\":{\"line\":413,\"column\":54}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"mark\",\"loc\":{\"start\":{\"line\":415,\"column\":10},\"end\":{\"line\":415,\"column\":14}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":415,\"column\":15},\"end\":{\"line\":415,\"column\":16}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"seen\",\"loc\":{\"start\":{\"line\":416,\"column\":6},\"end\":{\"line\":416,\"column\":10}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":416,\"column\":13},\"end\":{\"line\":416,\"column\":15}}},\"loc\":{\"start\":{\"line\":416,\"column\":6},\"end\":{\"line\":416,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":416,\"column\":2},\"end\":{\"line\":416,\"column\":16}}},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"domark\",\"loc\":{\"start\":{\"line\":417,\"column\":11},\"end\":{\"line\":417,\"column\":17}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":417,\"column\":18},\"end\":{\"line\":417,\"column\":19}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"in\",\"left\":{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":418,\"column\":8},\"end\":{\"line\":418,\"column\":9}}},\"right\":{\"type\":\"Identifier\",\"name\":\"seen\",\"loc\":{\"start\":{\"line\":418,\"column\":13},\"end\":{\"line\":418,\"column\":17}}},\"loc\":{\"start\":{\"line\":418,\"column\":8},\"end\":{\"line\":418,\"column\":17}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":null,\"loc\":{\"start\":{\"line\":418,\"column\":20},\"end\":{\"line\":418,\"column\":27}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":418,\"column\":3},\"end\":{\"line\":418,\"column\":27}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"seen\",\"loc\":{\"start\":{\"line\":419,\"column\":3},\"end\":{\"line\":419,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":419,\"column\":8},\"end\":{\"line\":419,\"column\":12}}},\"loc\":{\"start\":{\"line\":419,\"column\":3},\"end\":{\"line\":419,\"column\":12}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":419,\"column\":13},\"end\":{\"line\":419,\"column\":14}}}],\"loc\":{\"start\":{\"line\":419,\"column\":3},\"end\":{\"line\":419,\"column\":15}}},\"loc\":{\"start\":{\"line\":419,\"column\":3},\"end\":{\"line\":419,\"column\":16}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":420,\"column\":15},\"end\":{\"line\":420,\"column\":16}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":420,\"column\":8},\"end\":{\"line\":420,\"column\":16}}},\"right\":{\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"\\\"object\\\"\",\"loc\":{\"start\":{\"line\":420,\"column\":20},\"end\":{\"line\":420,\"column\":28}}},\"loc\":{\"start\":{\"line\":420,\"column\":8},\"end\":{\"line\":420,\"column\":28}}},\"consequent\":{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":420,\"column\":41},\"end\":{\"line\":420,\"column\":44}}},\"init\":null,\"loc\":{\"start\":{\"line\":420,\"column\":41},\"end\":{\"line\":420,\"column\":44}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":420,\"column\":37},\"end\":{\"line\":420,\"column\":44}}},\"right\":{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":420,\"column\":48},\"end\":{\"line\":420,\"column\":49}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"domark\",\"loc\":{\"start\":{\"line\":420,\"column\":52},\"end\":{\"line\":420,\"column\":58}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":420,\"column\":59},\"end\":{\"line\":420,\"column\":60}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":420,\"column\":61},\"end\":{\"line\":420,\"column\":64}}},\"loc\":{\"start\":{\"line\":420,\"column\":59},\"end\":{\"line\":420,\"column\":65}}}],\"loc\":{\"start\":{\"line\":420,\"column\":52},\"end\":{\"line\":420,\"column\":66}}},\"loc\":{\"start\":{\"line\":420,\"column\":52},\"end\":{\"line\":420,\"column\":67}}},\"each\":false,\"loc\":{\"start\":{\"line\":420,\"column\":31},\"end\":{\"line\":420,\"column\":67}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":421,\"column\":20},\"end\":{\"line\":421,\"column\":21}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":421,\"column\":13},\"end\":{\"line\":421,\"column\":21}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":421,\"column\":25},\"end\":{\"line\":421,\"column\":35}}},\"loc\":{\"start\":{\"line\":421,\"column\":13},\"end\":{\"line\":421,\"column\":35}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":421,\"column\":38},\"end\":{\"line\":421,\"column\":39}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__luaType\",\"loc\":{\"start\":{\"line\":421,\"column\":40},\"end\":{\"line\":421,\"column\":49}}},\"loc\":{\"start\":{\"line\":421,\"column\":38},\"end\":{\"line\":421,\"column\":49}}},\"right\":{\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"\\\"function\\\"\",\"loc\":{\"start\":{\"line\":421,\"column\":52},\"end\":{\"line\":421,\"column\":62}}},\"loc\":{\"start\":{\"line\":421,\"column\":38},\"end\":{\"line\":421,\"column\":62}}},\"loc\":{\"start\":{\"line\":421,\"column\":38},\"end\":{\"line\":421,\"column\":63}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":421,\"column\":8},\"end\":{\"line\":421,\"column\":63}}},\"loc\":{\"start\":{\"line\":420,\"column\":3},\"end\":{\"line\":421,\"column\":63}}}],\"loc\":{\"start\":{\"line\":417,\"column\":21},\"end\":{\"line\":423,\"column\":3}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":417,\"column\":2},\"end\":{\"line\":423,\"column\":3}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"domark\",\"loc\":{\"start\":{\"line\":424,\"column\":2},\"end\":{\"line\":424,\"column\":8}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"o\",\"loc\":{\"start\":{\"line\":424,\"column\":9},\"end\":{\"line\":424,\"column\":10}}}],\"loc\":{\"start\":{\"line\":424,\"column\":2},\"end\":{\"line\":424,\"column\":11}}},\"loc\":{\"start\":{\"line\":424,\"column\":2},\"end\":{\"line\":424,\"column\":12}}}],\"loc\":{\"start\":{\"line\":415,\"column\":18},\"end\":{\"line\":425,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":415,\"column\":1},\"end\":{\"line\":425,\"column\":2}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"add\",\"loc\":{\"start\":{\"line\":428,\"column\":2},\"end\":{\"line\":428,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"add\",\"loc\":{\"start\":{\"line\":428,\"column\":7},\"end\":{\"line\":428,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":428,\"column\":2},\"end\":{\"line\":428,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"sub\",\"loc\":{\"start\":{\"line\":429,\"column\":2},\"end\":{\"line\":429,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"sub\",\"loc\":{\"start\":{\"line\":429,\"column\":7},\"end\":{\"line\":429,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":429,\"column\":2},\"end\":{\"line\":429,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"mul\",\"loc\":{\"start\":{\"line\":430,\"column\":2},\"end\":{\"line\":430,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"mul\",\"loc\":{\"start\":{\"line\":430,\"column\":7},\"end\":{\"line\":430,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":430,\"column\":2},\"end\":{\"line\":430,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"div\",\"loc\":{\"start\":{\"line\":431,\"column\":2},\"end\":{\"line\":431,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"div\",\"loc\":{\"start\":{\"line\":431,\"column\":7},\"end\":{\"line\":431,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":431,\"column\":2},\"end\":{\"line\":431,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"intdiv\",\"loc\":{\"start\":{\"line\":432,\"column\":2},\"end\":{\"line\":432,\"column\":8}}},\"value\":{\"type\":\"Identifier\",\"name\":\"intdiv\",\"loc\":{\"start\":{\"line\":432,\"column\":10},\"end\":{\"line\":432,\"column\":16}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":432,\"column\":2},\"end\":{\"line\":432,\"column\":16}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"mod\",\"loc\":{\"start\":{\"line\":433,\"column\":2},\"end\":{\"line\":433,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"mod\",\"loc\":{\"start\":{\"line\":433,\"column\":7},\"end\":{\"line\":433,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":433,\"column\":2},\"end\":{\"line\":433,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":434,\"column\":2},\"end\":{\"line\":434,\"column\":6}}},\"value\":{\"type\":\"Identifier\",\"name\":\"call\",\"loc\":{\"start\":{\"line\":434,\"column\":8},\"end\":{\"line\":434,\"column\":12}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":434,\"column\":2},\"end\":{\"line\":434,\"column\":12}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"lte\",\"loc\":{\"start\":{\"line\":435,\"column\":2},\"end\":{\"line\":435,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"lte\",\"loc\":{\"start\":{\"line\":435,\"column\":7},\"end\":{\"line\":435,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":435,\"column\":2},\"end\":{\"line\":435,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"lt\",\"loc\":{\"start\":{\"line\":436,\"column\":2},\"end\":{\"line\":436,\"column\":4}}},\"value\":{\"type\":\"Identifier\",\"name\":\"lt\",\"loc\":{\"start\":{\"line\":436,\"column\":6},\"end\":{\"line\":436,\"column\":8}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":436,\"column\":2},\"end\":{\"line\":436,\"column\":8}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"ne\",\"loc\":{\"start\":{\"line\":437,\"column\":2},\"end\":{\"line\":437,\"column\":4}}},\"value\":{\"type\":\"Identifier\",\"name\":\"ne\",\"loc\":{\"start\":{\"line\":437,\"column\":6},\"end\":{\"line\":437,\"column\":8}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":437,\"column\":2},\"end\":{\"line\":437,\"column\":8}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"gt\",\"loc\":{\"start\":{\"line\":438,\"column\":2},\"end\":{\"line\":438,\"column\":4}}},\"value\":{\"type\":\"Identifier\",\"name\":\"gt\",\"loc\":{\"start\":{\"line\":438,\"column\":6},\"end\":{\"line\":438,\"column\":8}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":438,\"column\":2},\"end\":{\"line\":438,\"column\":8}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"gte\",\"loc\":{\"start\":{\"line\":439,\"column\":2},\"end\":{\"line\":439,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"gte\",\"loc\":{\"start\":{\"line\":439,\"column\":7},\"end\":{\"line\":439,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":439,\"column\":2},\"end\":{\"line\":439,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"eq\",\"loc\":{\"start\":{\"line\":440,\"column\":2},\"end\":{\"line\":440,\"column\":4}}},\"value\":{\"type\":\"Identifier\",\"name\":\"eq\",\"loc\":{\"start\":{\"line\":440,\"column\":6},\"end\":{\"line\":440,\"column\":8}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":440,\"column\":2},\"end\":{\"line\":440,\"column\":8}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"index\",\"loc\":{\"start\":{\"line\":441,\"column\":2},\"end\":{\"line\":441,\"column\":7}}},\"value\":{\"type\":\"Identifier\",\"name\":\"index\",\"loc\":{\"start\":{\"line\":441,\"column\":9},\"end\":{\"line\":441,\"column\":14}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":441,\"column\":2},\"end\":{\"line\":441,\"column\":14}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"indexAssign\",\"loc\":{\"start\":{\"line\":442,\"column\":2},\"end\":{\"line\":442,\"column\":13}}},\"value\":{\"type\":\"Identifier\",\"name\":\"indexAssign\",\"loc\":{\"start\":{\"line\":442,\"column\":15},\"end\":{\"line\":442,\"column\":26}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":442,\"column\":2},\"end\":{\"line\":442,\"column\":26}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"concat\",\"loc\":{\"start\":{\"line\":443,\"column\":2},\"end\":{\"line\":443,\"column\":8}}},\"value\":{\"type\":\"Identifier\",\"name\":\"concat\",\"loc\":{\"start\":{\"line\":443,\"column\":10},\"end\":{\"line\":443,\"column\":16}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":443,\"column\":2},\"end\":{\"line\":443,\"column\":16}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"makeTable\",\"loc\":{\"start\":{\"line\":444,\"column\":2},\"end\":{\"line\":444,\"column\":11}}},\"value\":{\"type\":\"Identifier\",\"name\":\"makeTable\",\"loc\":{\"start\":{\"line\":444,\"column\":13},\"end\":{\"line\":444,\"column\":22}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":444,\"column\":2},\"end\":{\"line\":444,\"column\":22}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"makeFunction\",\"loc\":{\"start\":{\"line\":445,\"column\":2},\"end\":{\"line\":445,\"column\":14}}},\"value\":{\"type\":\"Identifier\",\"name\":\"makeFunction\",\"loc\":{\"start\":{\"line\":445,\"column\":16},\"end\":{\"line\":445,\"column\":28}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":445,\"column\":2},\"end\":{\"line\":445,\"column\":28}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"expandReturnValues\",\"loc\":{\"start\":{\"line\":446,\"column\":2},\"end\":{\"line\":446,\"column\":20}}},\"value\":{\"type\":\"Identifier\",\"name\":\"expandReturnValues\",\"loc\":{\"start\":{\"line\":446,\"column\":22},\"end\":{\"line\":446,\"column\":40}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":446,\"column\":2},\"end\":{\"line\":446,\"column\":40}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":447,\"column\":2},\"end\":{\"line\":447,\"column\":17}}},\"value\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":447,\"column\":19},\"end\":{\"line\":447,\"column\":34}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":447,\"column\":2},\"end\":{\"line\":447,\"column\":34}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"count\",\"loc\":{\"start\":{\"line\":448,\"column\":2},\"end\":{\"line\":448,\"column\":7}}},\"value\":{\"type\":\"Identifier\",\"name\":\"count\",\"loc\":{\"start\":{\"line\":448,\"column\":9},\"end\":{\"line\":448,\"column\":14}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":448,\"column\":2},\"end\":{\"line\":448,\"column\":14}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"and\",\"loc\":{\"start\":{\"line\":449,\"column\":2},\"end\":{\"line\":449,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"and\",\"loc\":{\"start\":{\"line\":449,\"column\":7},\"end\":{\"line\":449,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":449,\"column\":2},\"end\":{\"line\":449,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"or\",\"loc\":{\"start\":{\"line\":450,\"column\":2},\"end\":{\"line\":450,\"column\":4}}},\"value\":{\"type\":\"Identifier\",\"name\":\"or\",\"loc\":{\"start\":{\"line\":450,\"column\":6},\"end\":{\"line\":450,\"column\":8}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":450,\"column\":2},\"end\":{\"line\":450,\"column\":8}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":451,\"column\":2},\"end\":{\"line\":451,\"column\":8}}},\"value\":{\"type\":\"Identifier\",\"name\":\"expand\",\"loc\":{\"start\":{\"line\":451,\"column\":10},\"end\":{\"line\":451,\"column\":16}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":451,\"column\":2},\"end\":{\"line\":451,\"column\":16}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"rest\",\"loc\":{\"start\":{\"line\":452,\"column\":2},\"end\":{\"line\":452,\"column\":6}}},\"value\":{\"type\":\"Identifier\",\"name\":\"rest\",\"loc\":{\"start\":{\"line\":452,\"column\":8},\"end\":{\"line\":452,\"column\":12}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":452,\"column\":2},\"end\":{\"line\":452,\"column\":12}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"pcall\",\"loc\":{\"start\":{\"line\":453,\"column\":2},\"end\":{\"line\":453,\"column\":7}}},\"value\":{\"type\":\"Identifier\",\"name\":\"pcall\",\"loc\":{\"start\":{\"line\":453,\"column\":9},\"end\":{\"line\":453,\"column\":14}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":453,\"column\":2},\"end\":{\"line\":453,\"column\":14}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":454,\"column\":2},\"end\":{\"line\":454,\"column\":6}}},\"value\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":454,\"column\":8},\"end\":{\"line\":454,\"column\":12}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":454,\"column\":2},\"end\":{\"line\":454,\"column\":12}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"pow\",\"loc\":{\"start\":{\"line\":455,\"column\":2},\"end\":{\"line\":455,\"column\":5}}},\"value\":{\"type\":\"Identifier\",\"name\":\"pow\",\"loc\":{\"start\":{\"line\":455,\"column\":7},\"end\":{\"line\":455,\"column\":10}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":455,\"column\":2},\"end\":{\"line\":455,\"column\":10}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":456,\"column\":2},\"end\":{\"line\":456,\"column\":9}}},\"value\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":456,\"column\":11},\"end\":{\"line\":456,\"column\":18}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":456,\"column\":2},\"end\":{\"line\":456,\"column\":18}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"mark\",\"loc\":{\"start\":{\"line\":457,\"column\":2},\"end\":{\"line\":457,\"column\":6}}},\"value\":{\"type\":\"Identifier\",\"name\":\"mark\",\"loc\":{\"start\":{\"line\":457,\"column\":8},\"end\":{\"line\":457,\"column\":12}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":457,\"column\":2},\"end\":{\"line\":457,\"column\":12}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"forcomp\",\"loc\":{\"start\":{\"line\":458,\"column\":2},\"end\":{\"line\":458,\"column\":9}}},\"value\":{\"type\":\"Identifier\",\"name\":\"forcomp\",\"loc\":{\"start\":{\"line\":458,\"column\":11},\"end\":{\"line\":458,\"column\":18}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":458,\"column\":2},\"end\":{\"line\":458,\"column\":18}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":459,\"column\":2},\"end\":{\"line\":459,\"column\":12}}},\"value\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":459,\"column\":14},\"end\":{\"line\":459,\"column\":24}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":459,\"column\":2},\"end\":{\"line\":459,\"column\":24}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":460,\"column\":2},\"end\":{\"line\":460,\"column\":10}}},\"value\":{\"type\":\"Identifier\",\"name\":\"oneValue\",\"loc\":{\"start\":{\"line\":460,\"column\":12},\"end\":{\"line\":460,\"column\":20}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":460,\"column\":2},\"end\":{\"line\":460,\"column\":20}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":461,\"column\":2},\"end\":{\"line\":461,\"column\":17}}},\"value\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":461,\"column\":19},\"end\":{\"line\":461,\"column\":34}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":461,\"column\":2},\"end\":{\"line\":461,\"column\":34}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":462,\"column\":2},\"end\":{\"line\":462,\"column\":11}}},\"value\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":462,\"column\":13},\"end\":{\"line\":462,\"column\":22}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":462,\"column\":2},\"end\":{\"line\":462,\"column\":22}}}],\"loc\":{\"start\":{\"line\":427,\"column\":8},\"end\":{\"line\":463,\"column\":2}}},\"loc\":{\"start\":{\"line\":427,\"column\":1},\"end\":{\"line\":463,\"column\":3}}}],\"loc\":{\"start\":{\"line\":2,\"column\":24},\"end\":{\"line\":465,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":2,\"column\":13},\"end\":{\"line\":465,\"column\":1}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":465,\"column\":4}}},\"loc\":{\"start\":{\"line\":2,\"column\":4},\"end\":{\"line\":465,\"column\":4}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":2,\"column\":0},\"end\":{\"line\":465,\"column\":5}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":468,\"column\":0},\"end\":{\"line\":468,\"column\":4}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":468,\"column\":5},\"end\":{\"line\":468,\"column\":10}}},\"loc\":{\"start\":{\"line\":468,\"column\":0},\"end\":{\"line\":468,\"column\":10}}},\"right\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":468,\"column\":13},\"end\":{\"line\":468,\"column\":18}}},\"loc\":{\"start\":{\"line\":468,\"column\":0},\"end\":{\"line\":468,\"column\":18}}},\"loc\":{\"start\":{\"line\":468,\"column\":0},\"end\":{\"line\":468,\"column\":19}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":470,\"column\":0},\"end\":{\"line\":470,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"string\",\"loc\":{\"start\":{\"line\":470,\"column\":4},\"end\":{\"line\":470,\"column\":10}}},\"loc\":{\"start\":{\"line\":470,\"column\":0},\"end\":{\"line\":470,\"column\":10}}},\"right\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"byte\",\"loc\":{\"start\":{\"line\":471,\"column\":1},\"end\":{\"line\":471,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"byte\",\"loc\":{\"start\":{\"line\":471,\"column\":16},\"end\":{\"line\":471,\"column\":20}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":471,\"column\":21},\"end\":{\"line\":471,\"column\":22}}},{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":471,\"column\":23},\"end\":{\"line\":471,\"column\":24}}},{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":471,\"column\":25},\"end\":{\"line\":471,\"column\":26}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"chars\",\"loc\":{\"start\":{\"line\":472,\"column\":6},\"end\":{\"line\":472,\"column\":11}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":472,\"column\":14},\"end\":{\"line\":472,\"column\":17}}},\"property\":{\"type\":\"Identifier\",\"name\":\"string\",\"loc\":{\"start\":{\"line\":472,\"column\":18},\"end\":{\"line\":472,\"column\":24}}},\"loc\":{\"start\":{\"line\":472,\"column\":14},\"end\":{\"line\":472,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"sub\",\"loc\":{\"start\":{\"line\":472,\"column\":25},\"end\":{\"line\":472,\"column\":28}}},\"loc\":{\"start\":{\"line\":472,\"column\":14},\"end\":{\"line\":472,\"column\":28}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":472,\"column\":29},\"end\":{\"line\":472,\"column\":30}}},{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":472,\"column\":31},\"end\":{\"line\":472,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":472,\"column\":33},\"end\":{\"line\":472,\"column\":34}}}],\"loc\":{\"start\":{\"line\":472,\"column\":14},\"end\":{\"line\":472,\"column\":35}}},\"loc\":{\"start\":{\"line\":472,\"column\":6},\"end\":{\"line\":472,\"column\":35}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":472,\"column\":2},\"end\":{\"line\":472,\"column\":36}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":473,\"column\":6},\"end\":{\"line\":473,\"column\":9}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":473,\"column\":12},\"end\":{\"line\":473,\"column\":14}}},\"loc\":{\"start\":{\"line\":473,\"column\":6},\"end\":{\"line\":473,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":473,\"column\":2},\"end\":{\"line\":473,\"column\":15}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":474,\"column\":12},\"end\":{\"line\":474,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":474,\"column\":16},\"end\":{\"line\":474,\"column\":17}}},\"loc\":{\"start\":{\"line\":474,\"column\":12},\"end\":{\"line\":474,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":474,\"column\":8},\"end\":{\"line\":474,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":474,\"column\":19},\"end\":{\"line\":474,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"chars\",\"loc\":{\"start\":{\"line\":474,\"column\":23},\"end\":{\"line\":474,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":474,\"column\":29},\"end\":{\"line\":474,\"column\":35}}},\"loc\":{\"start\":{\"line\":474,\"column\":23},\"end\":{\"line\":474,\"column\":35}}},\"loc\":{\"start\":{\"line\":474,\"column\":19},\"end\":{\"line\":474,\"column\":35}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":474,\"column\":39},\"end\":{\"line\":474,\"column\":40}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":474,\"column\":37},\"end\":{\"line\":474,\"column\":40}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":474,\"column\":43},\"end\":{\"line\":474,\"column\":46}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":474,\"column\":47},\"end\":{\"line\":474,\"column\":48}}},\"loc\":{\"start\":{\"line\":474,\"column\":43},\"end\":{\"line\":474,\"column\":49}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"chars\",\"loc\":{\"start\":{\"line\":474,\"column\":52},\"end\":{\"line\":474,\"column\":57}}},\"property\":{\"type\":\"Identifier\",\"name\":\"charCodeAt\",\"loc\":{\"start\":{\"line\":474,\"column\":58},\"end\":{\"line\":474,\"column\":68}}},\"loc\":{\"start\":{\"line\":474,\"column\":52},\"end\":{\"line\":474,\"column\":68}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":474,\"column\":69},\"end\":{\"line\":474,\"column\":70}}}],\"loc\":{\"start\":{\"line\":474,\"column\":52},\"end\":{\"line\":474,\"column\":71}}},\"loc\":{\"start\":{\"line\":474,\"column\":43},\"end\":{\"line\":474,\"column\":71}}},\"loc\":{\"start\":{\"line\":474,\"column\":43},\"end\":{\"line\":474,\"column\":72}}},\"loc\":{\"start\":{\"line\":474,\"column\":2},\"end\":{\"line\":474,\"column\":72}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":475,\"column\":9},\"end\":{\"line\":475,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":475,\"column\":15},\"end\":{\"line\":475,\"column\":30}}},\"loc\":{\"start\":{\"line\":475,\"column\":9},\"end\":{\"line\":475,\"column\":30}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":475,\"column\":31},\"end\":{\"line\":475,\"column\":36}}},\"loc\":{\"start\":{\"line\":475,\"column\":9},\"end\":{\"line\":475,\"column\":36}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":475,\"column\":37},\"end\":{\"line\":475,\"column\":42}}},{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":475,\"column\":44},\"end\":{\"line\":475,\"column\":47}}}],\"loc\":{\"start\":{\"line\":475,\"column\":9},\"end\":{\"line\":475,\"column\":48}}},\"loc\":{\"start\":{\"line\":475,\"column\":2},\"end\":{\"line\":475,\"column\":49}}}],\"loc\":{\"start\":{\"line\":471,\"column\":28},\"end\":{\"line\":476,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":471,\"column\":7},\"end\":{\"line\":476,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":471,\"column\":1},\"end\":{\"line\":476,\"column\":2}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"char\",\"loc\":{\"start\":{\"line\":477,\"column\":1},\"end\":{\"line\":477,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"char\",\"loc\":{\"start\":{\"line\":477,\"column\":16},\"end\":{\"line\":477,\"column\":20}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":478,\"column\":6},\"end\":{\"line\":478,\"column\":9}}},\"init\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":478,\"column\":12},\"end\":{\"line\":478,\"column\":14}}},\"loc\":{\"start\":{\"line\":478,\"column\":6},\"end\":{\"line\":478,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":478,\"column\":2},\"end\":{\"line\":478,\"column\":15}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":479,\"column\":12},\"end\":{\"line\":479,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":479,\"column\":16},\"end\":{\"line\":479,\"column\":17}}},\"loc\":{\"start\":{\"line\":479,\"column\":12},\"end\":{\"line\":479,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":479,\"column\":8},\"end\":{\"line\":479,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":479,\"column\":19},\"end\":{\"line\":479,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":479,\"column\":23},\"end\":{\"line\":479,\"column\":32}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":479,\"column\":33},\"end\":{\"line\":479,\"column\":39}}},\"loc\":{\"start\":{\"line\":479,\"column\":23},\"end\":{\"line\":479,\"column\":39}}},\"loc\":{\"start\":{\"line\":479,\"column\":19},\"end\":{\"line\":479,\"column\":39}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":479,\"column\":43},\"end\":{\"line\":479,\"column\":44}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":479,\"column\":41},\"end\":{\"line\":479,\"column\":44}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":480,\"column\":3},\"end\":{\"line\":480,\"column\":6}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"String\",\"loc\":{\"start\":{\"line\":480,\"column\":10},\"end\":{\"line\":480,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"fromCharCode\",\"loc\":{\"start\":{\"line\":480,\"column\":17},\"end\":{\"line\":480,\"column\":29}}},\"loc\":{\"start\":{\"line\":480,\"column\":10},\"end\":{\"line\":480,\"column\":29}}},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"|\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":480,\"column\":30},\"end\":{\"line\":480,\"column\":39}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":480,\"column\":40},\"end\":{\"line\":480,\"column\":41}}},\"loc\":{\"start\":{\"line\":480,\"column\":30},\"end\":{\"line\":480,\"column\":42}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":480,\"column\":43},\"end\":{\"line\":480,\"column\":44}}},\"loc\":{\"start\":{\"line\":480,\"column\":30},\"end\":{\"line\":480,\"column\":44}}}],\"loc\":{\"start\":{\"line\":480,\"column\":10},\"end\":{\"line\":480,\"column\":45}}},\"loc\":{\"start\":{\"line\":480,\"column\":3},\"end\":{\"line\":480,\"column\":45}}},\"loc\":{\"start\":{\"line\":480,\"column\":3},\"end\":{\"line\":480,\"column\":46}}}],\"loc\":{\"start\":{\"line\":479,\"column\":47},\"end\":{\"line\":481,\"column\":3}}},\"loc\":{\"start\":{\"line\":479,\"column\":2},\"end\":{\"line\":481,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"out\",\"loc\":{\"start\":{\"line\":482,\"column\":9},\"end\":{\"line\":482,\"column\":12}}},\"loc\":{\"start\":{\"line\":482,\"column\":2},\"end\":{\"line\":482,\"column\":13}}}],\"loc\":{\"start\":{\"line\":477,\"column\":38},\"end\":{\"line\":484,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":477,\"column\":7},\"end\":{\"line\":484,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":477,\"column\":1},\"end\":{\"line\":484,\"column\":2}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"dump\",\"loc\":{\"start\":{\"line\":485,\"column\":1},\"end\":{\"line\":485,\"column\":5}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":485,\"column\":7},\"end\":{\"line\":485,\"column\":11}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":485,\"column\":1},\"end\":{\"line\":485,\"column\":11}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"find\",\"loc\":{\"start\":{\"line\":486,\"column\":1},\"end\":{\"line\":486,\"column\":5}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":486,\"column\":7},\"end\":{\"line\":486,\"column\":11}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":486,\"column\":1},\"end\":{\"line\":486,\"column\":11}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"gmatch\",\"loc\":{\"start\":{\"line\":487,\"column\":1},\"end\":{\"line\":487,\"column\":7}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":487,\"column\":9},\"end\":{\"line\":487,\"column\":13}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":487,\"column\":1},\"end\":{\"line\":487,\"column\":13}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"gsub\",\"loc\":{\"start\":{\"line\":488,\"column\":1},\"end\":{\"line\":488,\"column\":5}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":488,\"column\":7},\"end\":{\"line\":488,\"column\":11}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":488,\"column\":1},\"end\":{\"line\":488,\"column\":11}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"len\",\"loc\":{\"start\":{\"line\":489,\"column\":1},\"end\":{\"line\":489,\"column\":4}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"len\",\"loc\":{\"start\":{\"line\":489,\"column\":15},\"end\":{\"line\":489,\"column\":18}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":489,\"column\":19},\"end\":{\"line\":489,\"column\":20}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":489,\"column\":32},\"end\":{\"line\":489,\"column\":34}}},\"right\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":489,\"column\":37},\"end\":{\"line\":489,\"column\":38}}},\"loc\":{\"start\":{\"line\":489,\"column\":32},\"end\":{\"line\":489,\"column\":38}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":489,\"column\":40},\"end\":{\"line\":489,\"column\":46}}},\"loc\":{\"start\":{\"line\":489,\"column\":31},\"end\":{\"line\":489,\"column\":46}}},\"loc\":{\"start\":{\"line\":489,\"column\":24},\"end\":{\"line\":489,\"column\":47}}}],\"loc\":{\"start\":{\"line\":489,\"column\":22},\"end\":{\"line\":489,\"column\":49}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":489,\"column\":6},\"end\":{\"line\":489,\"column\":49}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":489,\"column\":1},\"end\":{\"line\":489,\"column\":49}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"lower\",\"loc\":{\"start\":{\"line\":490,\"column\":1},\"end\":{\"line\":490,\"column\":6}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"lower\",\"loc\":{\"start\":{\"line\":490,\"column\":17},\"end\":{\"line\":490,\"column\":22}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":490,\"column\":23},\"end\":{\"line\":490,\"column\":24}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":490,\"column\":36},\"end\":{\"line\":490,\"column\":38}}},\"right\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":490,\"column\":41},\"end\":{\"line\":490,\"column\":42}}},\"loc\":{\"start\":{\"line\":490,\"column\":36},\"end\":{\"line\":490,\"column\":42}}},\"property\":{\"type\":\"Identifier\",\"name\":\"toLowerCase\",\"loc\":{\"start\":{\"line\":490,\"column\":44},\"end\":{\"line\":490,\"column\":55}}},\"loc\":{\"start\":{\"line\":490,\"column\":35},\"end\":{\"line\":490,\"column\":55}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":490,\"column\":35},\"end\":{\"line\":490,\"column\":57}}},\"loc\":{\"start\":{\"line\":490,\"column\":28},\"end\":{\"line\":490,\"column\":58}}}],\"loc\":{\"start\":{\"line\":490,\"column\":26},\"end\":{\"line\":490,\"column\":60}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":490,\"column\":8},\"end\":{\"line\":490,\"column\":60}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":490,\"column\":1},\"end\":{\"line\":490,\"column\":60}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"match\",\"loc\":{\"start\":{\"line\":491,\"column\":1},\"end\":{\"line\":491,\"column\":6}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":491,\"column\":8},\"end\":{\"line\":491,\"column\":12}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":491,\"column\":1},\"end\":{\"line\":491,\"column\":12}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"reverse\",\"loc\":{\"start\":{\"line\":492,\"column\":1},\"end\":{\"line\":492,\"column\":8}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":492,\"column\":19},\"end\":{\"line\":492,\"column\":20}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":493,\"column\":10},\"end\":{\"line\":493,\"column\":12}}},\"right\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":493,\"column\":15},\"end\":{\"line\":493,\"column\":16}}},\"loc\":{\"start\":{\"line\":493,\"column\":10},\"end\":{\"line\":493,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"split\",\"loc\":{\"start\":{\"line\":493,\"column\":18},\"end\":{\"line\":493,\"column\":23}}},\"loc\":{\"start\":{\"line\":493,\"column\":9},\"end\":{\"line\":493,\"column\":23}}},\"arguments\":[{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":493,\"column\":24},\"end\":{\"line\":493,\"column\":26}}}],\"loc\":{\"start\":{\"line\":493,\"column\":9},\"end\":{\"line\":493,\"column\":27}}},\"property\":{\"type\":\"Identifier\",\"name\":\"reverse\",\"loc\":{\"start\":{\"line\":493,\"column\":28},\"end\":{\"line\":493,\"column\":35}}},\"loc\":{\"start\":{\"line\":493,\"column\":9},\"end\":{\"line\":493,\"column\":35}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":493,\"column\":9},\"end\":{\"line\":493,\"column\":37}}},\"property\":{\"type\":\"Identifier\",\"name\":\"join\",\"loc\":{\"start\":{\"line\":493,\"column\":38},\"end\":{\"line\":493,\"column\":42}}},\"loc\":{\"start\":{\"line\":493,\"column\":9},\"end\":{\"line\":493,\"column\":42}}},\"arguments\":[{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":493,\"column\":43},\"end\":{\"line\":493,\"column\":45}}}],\"loc\":{\"start\":{\"line\":493,\"column\":9},\"end\":{\"line\":493,\"column\":46}}},\"loc\":{\"start\":{\"line\":493,\"column\":2},\"end\":{\"line\":493,\"column\":47}}}],\"loc\":{\"start\":{\"line\":492,\"column\":22},\"end\":{\"line\":494,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":492,\"column\":10},\"end\":{\"line\":494,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":492,\"column\":1},\"end\":{\"line\":494,\"column\":2}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"sub\",\"loc\":{\"start\":{\"line\":495,\"column\":1},\"end\":{\"line\":495,\"column\":4}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":495,\"column\":15},\"end\":{\"line\":495,\"column\":16}}},{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":495,\"column\":18},\"end\":{\"line\":495,\"column\":19}}},{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":495,\"column\":21},\"end\":{\"line\":495,\"column\":22}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":496,\"column\":7},\"end\":{\"line\":496,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":496,\"column\":13},\"end\":{\"line\":496,\"column\":22}}},\"loc\":{\"start\":{\"line\":496,\"column\":7},\"end\":{\"line\":496,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":496,\"column\":26},\"end\":{\"line\":496,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":496,\"column\":32},\"end\":{\"line\":496,\"column\":36}}},\"loc\":{\"start\":{\"line\":496,\"column\":26},\"end\":{\"line\":496,\"column\":36}}},\"loc\":{\"start\":{\"line\":496,\"column\":7},\"end\":{\"line\":496,\"column\":36}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":496,\"column\":39},\"end\":{\"line\":496,\"column\":40}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":496,\"column\":43},\"end\":{\"line\":496,\"column\":44}}},\"loc\":{\"start\":{\"line\":496,\"column\":39},\"end\":{\"line\":496,\"column\":44}}},\"loc\":{\"start\":{\"line\":496,\"column\":39},\"end\":{\"line\":496,\"column\":45}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":496,\"column\":2},\"end\":{\"line\":496,\"column\":45}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":497,\"column\":7},\"end\":{\"line\":497,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":497,\"column\":13},\"end\":{\"line\":497,\"column\":22}}},\"loc\":{\"start\":{\"line\":497,\"column\":7},\"end\":{\"line\":497,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":497,\"column\":26},\"end\":{\"line\":497,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":497,\"column\":32},\"end\":{\"line\":497,\"column\":36}}},\"loc\":{\"start\":{\"line\":497,\"column\":26},\"end\":{\"line\":497,\"column\":36}}},\"loc\":{\"start\":{\"line\":497,\"column\":7},\"end\":{\"line\":497,\"column\":36}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":497,\"column\":39},\"end\":{\"line\":497,\"column\":40}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":497,\"column\":43},\"end\":{\"line\":497,\"column\":44}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":497,\"column\":45},\"end\":{\"line\":497,\"column\":51}}},\"loc\":{\"start\":{\"line\":497,\"column\":43},\"end\":{\"line\":497,\"column\":51}}},\"loc\":{\"start\":{\"line\":497,\"column\":39},\"end\":{\"line\":497,\"column\":51}}},\"loc\":{\"start\":{\"line\":497,\"column\":39},\"end\":{\"line\":497,\"column\":52}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":497,\"column\":2},\"end\":{\"line\":497,\"column\":52}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":498,\"column\":7},\"end\":{\"line\":498,\"column\":8}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":498,\"column\":11},\"end\":{\"line\":498,\"column\":12}}},\"loc\":{\"start\":{\"line\":498,\"column\":7},\"end\":{\"line\":498,\"column\":12}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":498,\"column\":15},\"end\":{\"line\":498,\"column\":16}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":498,\"column\":21},\"end\":{\"line\":498,\"column\":22}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":498,\"column\":23},\"end\":{\"line\":498,\"column\":29}}},\"loc\":{\"start\":{\"line\":498,\"column\":21},\"end\":{\"line\":498,\"column\":29}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":498,\"column\":30},\"end\":{\"line\":498,\"column\":31}}},\"loc\":{\"start\":{\"line\":498,\"column\":21},\"end\":{\"line\":498,\"column\":31}}},\"loc\":{\"start\":{\"line\":498,\"column\":15},\"end\":{\"line\":498,\"column\":32}}},\"loc\":{\"start\":{\"line\":498,\"column\":15},\"end\":{\"line\":498,\"column\":33}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":498,\"column\":2},\"end\":{\"line\":498,\"column\":33}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":499,\"column\":7},\"end\":{\"line\":499,\"column\":8}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":499,\"column\":11},\"end\":{\"line\":499,\"column\":12}}},\"loc\":{\"start\":{\"line\":499,\"column\":7},\"end\":{\"line\":499,\"column\":12}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":16}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":499,\"column\":21},\"end\":{\"line\":499,\"column\":22}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":499,\"column\":23},\"end\":{\"line\":499,\"column\":29}}},\"loc\":{\"start\":{\"line\":499,\"column\":21},\"end\":{\"line\":499,\"column\":29}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":499,\"column\":30},\"end\":{\"line\":499,\"column\":31}}},\"loc\":{\"start\":{\"line\":499,\"column\":21},\"end\":{\"line\":499,\"column\":31}}},\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":32}}},\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":33}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":499,\"column\":2},\"end\":{\"line\":499,\"column\":33}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":501,\"column\":9},\"end\":{\"line\":501,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":501,\"column\":15},\"end\":{\"line\":501,\"column\":25}}},\"loc\":{\"start\":{\"line\":501,\"column\":9},\"end\":{\"line\":501,\"column\":25}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":501,\"column\":26},\"end\":{\"line\":501,\"column\":27}}}],\"loc\":{\"start\":{\"line\":501,\"column\":9},\"end\":{\"line\":501,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"substring\",\"loc\":{\"start\":{\"line\":501,\"column\":29},\"end\":{\"line\":501,\"column\":38}}},\"loc\":{\"start\":{\"line\":501,\"column\":9},\"end\":{\"line\":501,\"column\":38}}},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":501,\"column\":39},\"end\":{\"line\":501,\"column\":40}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":501,\"column\":41},\"end\":{\"line\":501,\"column\":42}}},\"loc\":{\"start\":{\"line\":501,\"column\":39},\"end\":{\"line\":501,\"column\":42}}},{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":501,\"column\":43},\"end\":{\"line\":501,\"column\":44}}}],\"loc\":{\"start\":{\"line\":501,\"column\":9},\"end\":{\"line\":501,\"column\":45}}},\"loc\":{\"start\":{\"line\":501,\"column\":2},\"end\":{\"line\":501,\"column\":46}}}],\"loc\":{\"start\":{\"line\":495,\"column\":24},\"end\":{\"line\":503,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":495,\"column\":6},\"end\":{\"line\":503,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":495,\"column\":1},\"end\":{\"line\":503,\"column\":2}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"upper\",\"loc\":{\"start\":{\"line\":504,\"column\":1},\"end\":{\"line\":504,\"column\":6}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"lower\",\"loc\":{\"start\":{\"line\":504,\"column\":17},\"end\":{\"line\":504,\"column\":22}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":504,\"column\":23},\"end\":{\"line\":504,\"column\":24}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":504,\"column\":36},\"end\":{\"line\":504,\"column\":38}}},\"right\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":504,\"column\":41},\"end\":{\"line\":504,\"column\":42}}},\"loc\":{\"start\":{\"line\":504,\"column\":36},\"end\":{\"line\":504,\"column\":42}}},\"property\":{\"type\":\"Identifier\",\"name\":\"toUpperCase\",\"loc\":{\"start\":{\"line\":504,\"column\":44},\"end\":{\"line\":504,\"column\":55}}},\"loc\":{\"start\":{\"line\":504,\"column\":35},\"end\":{\"line\":504,\"column\":55}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":504,\"column\":35},\"end\":{\"line\":504,\"column\":57}}},\"loc\":{\"start\":{\"line\":504,\"column\":28},\"end\":{\"line\":504,\"column\":58}}}],\"loc\":{\"start\":{\"line\":504,\"column\":26},\"end\":{\"line\":504,\"column\":60}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":504,\"column\":8},\"end\":{\"line\":504,\"column\":60}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":504,\"column\":1},\"end\":{\"line\":504,\"column\":60}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"format\",\"loc\":{\"start\":{\"line\":505,\"column\":1},\"end\":{\"line\":505,\"column\":7}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"format\",\"loc\":{\"start\":{\"line\":505,\"column\":18},\"end\":{\"line\":505,\"column\":24}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"format\",\"loc\":{\"start\":{\"line\":505,\"column\":25},\"end\":{\"line\":505,\"column\":31}}},{\"type\":\"Identifier\",\"name\":\"etc\",\"loc\":{\"start\":{\"line\":505,\"column\":33},\"end\":{\"line\":505,\"column\":36}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"arg\",\"loc\":{\"start\":{\"line\":506,\"column\":6},\"end\":{\"line\":506,\"column\":9}}},\"init\":{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":506,\"column\":12},\"end\":{\"line\":506,\"column\":21}}},\"loc\":{\"start\":{\"line\":506,\"column\":6},\"end\":{\"line\":506,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":506,\"column\":2},\"end\":{\"line\":506,\"column\":22}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":507,\"column\":6},\"end\":{\"line\":507,\"column\":7}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":507,\"column\":10},\"end\":{\"line\":507,\"column\":11}}},\"loc\":{\"start\":{\"line\":507,\"column\":6},\"end\":{\"line\":507,\"column\":11}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":507,\"column\":2},\"end\":{\"line\":507,\"column\":12}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"format\",\"loc\":{\"start\":{\"line\":508,\"column\":9},\"end\":{\"line\":508,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"replace\",\"loc\":{\"start\":{\"line\":508,\"column\":16},\"end\":{\"line\":508,\"column\":23}}},\"loc\":{\"start\":{\"line\":508,\"column\":9},\"end\":{\"line\":508,\"column\":23}}},\"arguments\":[{\"type\":\"Literal\",\"value\":{},\"raw\":\"/%([0-9.]+)?([%sfdgi])/g\",\"regex\":{\"pattern\":\"%([0-9.]+)?([%sfdgi])\",\"flags\":\"g\"},\"loc\":{\"start\":{\"line\":508,\"column\":24},\"end\":{\"line\":508,\"column\":48}}},{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"m\",\"loc\":{\"start\":{\"line\":508,\"column\":60},\"end\":{\"line\":508,\"column\":61}}},{\"type\":\"Identifier\",\"name\":\"w\",\"loc\":{\"start\":{\"line\":508,\"column\":63},\"end\":{\"line\":508,\"column\":64}}},{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":508,\"column\":66},\"end\":{\"line\":508,\"column\":67}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":509,\"column\":7},\"end\":{\"line\":509,\"column\":8}}},\"init\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":509,\"column\":11},\"end\":{\"line\":509,\"column\":15}}},\"loc\":{\"start\":{\"line\":509,\"column\":7},\"end\":{\"line\":509,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":509,\"column\":3},\"end\":{\"line\":509,\"column\":16}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":510,\"column\":8},\"end\":{\"line\":510,\"column\":9}}},\"right\":{\"type\":\"Literal\",\"value\":\"%\",\"raw\":\"\\\"%\\\"\",\"loc\":{\"start\":{\"line\":510,\"column\":13},\"end\":{\"line\":510,\"column\":16}}},\"loc\":{\"start\":{\"line\":510,\"column\":8},\"end\":{\"line\":510,\"column\":16}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"%\",\"raw\":\"\\\"%\\\"\",\"loc\":{\"start\":{\"line\":510,\"column\":26},\"end\":{\"line\":510,\"column\":29}}},\"loc\":{\"start\":{\"line\":510,\"column\":19},\"end\":{\"line\":510,\"column\":30}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":511,\"column\":13},\"end\":{\"line\":511,\"column\":14}}},\"right\":{\"type\":\"Literal\",\"value\":\"s\",\"raw\":\"\\\"s\\\"\",\"loc\":{\"start\":{\"line\":511,\"column\":18},\"end\":{\"line\":511,\"column\":21}}},\"loc\":{\"start\":{\"line\":511,\"column\":13},\"end\":{\"line\":511,\"column\":21}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":511,\"column\":23},\"end\":{\"line\":511,\"column\":24}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arg\",\"loc\":{\"start\":{\"line\":511,\"column\":27},\"end\":{\"line\":511,\"column\":30}}},\"property\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":511,\"column\":31},\"end\":{\"line\":511,\"column\":32}}},\"prefix\":false,\"loc\":{\"start\":{\"line\":511,\"column\":31},\"end\":{\"line\":511,\"column\":34}}},\"loc\":{\"start\":{\"line\":511,\"column\":27},\"end\":{\"line\":511,\"column\":35}}},\"loc\":{\"start\":{\"line\":511,\"column\":23},\"end\":{\"line\":511,\"column\":35}}},\"loc\":{\"start\":{\"line\":511,\"column\":23},\"end\":{\"line\":511,\"column\":36}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":512,\"column\":13},\"end\":{\"line\":512,\"column\":14}}},\"right\":{\"type\":\"Literal\",\"value\":\"d\",\"raw\":\"\\\"d\\\"\",\"loc\":{\"start\":{\"line\":512,\"column\":18},\"end\":{\"line\":512,\"column\":21}}},\"loc\":{\"start\":{\"line\":512,\"column\":13},\"end\":{\"line\":512,\"column\":21}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":512,\"column\":23},\"end\":{\"line\":512,\"column\":24}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseInt\",\"loc\":{\"start\":{\"line\":512,\"column\":27},\"end\":{\"line\":512,\"column\":35}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arg\",\"loc\":{\"start\":{\"line\":512,\"column\":36},\"end\":{\"line\":512,\"column\":39}}},\"property\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":512,\"column\":40},\"end\":{\"line\":512,\"column\":41}}},\"prefix\":false,\"loc\":{\"start\":{\"line\":512,\"column\":40},\"end\":{\"line\":512,\"column\":43}}},\"loc\":{\"start\":{\"line\":512,\"column\":36},\"end\":{\"line\":512,\"column\":44}}}],\"loc\":{\"start\":{\"line\":512,\"column\":27},\"end\":{\"line\":512,\"column\":45}}},\"loc\":{\"start\":{\"line\":512,\"column\":23},\"end\":{\"line\":512,\"column\":45}}},\"loc\":{\"start\":{\"line\":512,\"column\":23},\"end\":{\"line\":512,\"column\":46}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":513,\"column\":13},\"end\":{\"line\":513,\"column\":14}}},\"right\":{\"type\":\"Literal\",\"value\":\"i\",\"raw\":\"\\\"i\\\"\",\"loc\":{\"start\":{\"line\":513,\"column\":18},\"end\":{\"line\":513,\"column\":21}}},\"loc\":{\"start\":{\"line\":513,\"column\":13},\"end\":{\"line\":513,\"column\":21}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":513,\"column\":23},\"end\":{\"line\":513,\"column\":24}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseInt\",\"loc\":{\"start\":{\"line\":513,\"column\":27},\"end\":{\"line\":513,\"column\":35}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arg\",\"loc\":{\"start\":{\"line\":513,\"column\":36},\"end\":{\"line\":513,\"column\":39}}},\"property\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":513,\"column\":40},\"end\":{\"line\":513,\"column\":41}}},\"prefix\":false,\"loc\":{\"start\":{\"line\":513,\"column\":40},\"end\":{\"line\":513,\"column\":43}}},\"loc\":{\"start\":{\"line\":513,\"column\":36},\"end\":{\"line\":513,\"column\":44}}}],\"loc\":{\"start\":{\"line\":513,\"column\":27},\"end\":{\"line\":513,\"column\":45}}},\"loc\":{\"start\":{\"line\":513,\"column\":23},\"end\":{\"line\":513,\"column\":45}}},\"loc\":{\"start\":{\"line\":513,\"column\":23},\"end\":{\"line\":513,\"column\":46}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"t\",\"loc\":{\"start\":{\"line\":514,\"column\":13},\"end\":{\"line\":514,\"column\":14}}},\"right\":{\"type\":\"Literal\",\"value\":\"f\",\"raw\":\"\\\"f\\\"\",\"loc\":{\"start\":{\"line\":514,\"column\":18},\"end\":{\"line\":514,\"column\":21}}},\"loc\":{\"start\":{\"line\":514,\"column\":13},\"end\":{\"line\":514,\"column\":21}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":514,\"column\":24},\"end\":{\"line\":514,\"column\":25}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arg\",\"loc\":{\"start\":{\"line\":514,\"column\":28},\"end\":{\"line\":514,\"column\":31}}},\"property\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":514,\"column\":32},\"end\":{\"line\":514,\"column\":33}}},\"prefix\":false,\"loc\":{\"start\":{\"line\":514,\"column\":32},\"end\":{\"line\":514,\"column\":35}}},\"loc\":{\"start\":{\"line\":514,\"column\":28},\"end\":{\"line\":514,\"column\":36}}},\"property\":{\"type\":\"Identifier\",\"name\":\"toFixed\",\"loc\":{\"start\":{\"line\":514,\"column\":37},\"end\":{\"line\":514,\"column\":44}}},\"loc\":{\"start\":{\"line\":514,\"column\":28},\"end\":{\"line\":514,\"column\":44}}},\"arguments\":[{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseFloat\",\"loc\":{\"start\":{\"line\":514,\"column\":45},\"end\":{\"line\":514,\"column\":55}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"m\",\"loc\":{\"start\":{\"line\":514,\"column\":56},\"end\":{\"line\":514,\"column\":57}}},\"property\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":514,\"column\":58},\"end\":{\"line\":514,\"column\":59}}},\"loc\":{\"start\":{\"line\":514,\"column\":56},\"end\":{\"line\":514,\"column\":60}}}],\"loc\":{\"start\":{\"line\":514,\"column\":45},\"end\":{\"line\":514,\"column\":61}}},\"right\":{\"type\":\"Literal\",\"value\":6,\"raw\":\"6\",\"loc\":{\"start\":{\"line\":514,\"column\":65},\"end\":{\"line\":514,\"column\":66}}},\"loc\":{\"start\":{\"line\":514,\"column\":45},\"end\":{\"line\":514,\"column\":66}}}],\"loc\":{\"start\":{\"line\":514,\"column\":28},\"end\":{\"line\":514,\"column\":67}}},\"loc\":{\"start\":{\"line\":514,\"column\":24},\"end\":{\"line\":514,\"column\":67}}},\"loc\":{\"start\":{\"line\":514,\"column\":24},\"end\":{\"line\":514,\"column\":68}}},\"alternate\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":515,\"column\":8},\"end\":{\"line\":515,\"column\":9}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arg\",\"loc\":{\"start\":{\"line\":515,\"column\":12},\"end\":{\"line\":515,\"column\":15}}},\"property\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":515,\"column\":16},\"end\":{\"line\":515,\"column\":17}}},\"prefix\":false,\"loc\":{\"start\":{\"line\":515,\"column\":16},\"end\":{\"line\":515,\"column\":19}}},\"loc\":{\"start\":{\"line\":515,\"column\":12},\"end\":{\"line\":515,\"column\":20}}},\"loc\":{\"start\":{\"line\":515,\"column\":8},\"end\":{\"line\":515,\"column\":20}}},\"loc\":{\"start\":{\"line\":515,\"column\":8},\"end\":{\"line\":515,\"column\":21}}},\"loc\":{\"start\":{\"line\":514,\"column\":8},\"end\":{\"line\":515,\"column\":21}}},\"loc\":{\"start\":{\"line\":513,\"column\":8},\"end\":{\"line\":515,\"column\":21}}},\"loc\":{\"start\":{\"line\":512,\"column\":8},\"end\":{\"line\":515,\"column\":21}}},\"loc\":{\"start\":{\"line\":511,\"column\":8},\"end\":{\"line\":515,\"column\":21}}},\"loc\":{\"start\":{\"line\":510,\"column\":3},\"end\":{\"line\":515,\"column\":21}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":516,\"column\":3},\"end\":{\"line\":516,\"column\":4}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":516,\"column\":7},\"end\":{\"line\":516,\"column\":9}}},\"right\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":516,\"column\":12},\"end\":{\"line\":516,\"column\":13}}},\"loc\":{\"start\":{\"line\":516,\"column\":7},\"end\":{\"line\":516,\"column\":13}}},\"loc\":{\"start\":{\"line\":516,\"column\":3},\"end\":{\"line\":516,\"column\":13}}},\"loc\":{\"start\":{\"line\":516,\"column\":3},\"end\":{\"line\":516,\"column\":14}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseInt\",\"loc\":{\"start\":{\"line\":517,\"column\":8},\"end\":{\"line\":517,\"column\":16}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"w\",\"loc\":{\"start\":{\"line\":517,\"column\":17},\"end\":{\"line\":517,\"column\":18}}}],\"loc\":{\"start\":{\"line\":517,\"column\":8},\"end\":{\"line\":517,\"column\":19}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"extra\",\"loc\":{\"start\":{\"line\":518,\"column\":8},\"end\":{\"line\":518,\"column\":13}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseInt\",\"loc\":{\"start\":{\"line\":518,\"column\":16},\"end\":{\"line\":518,\"column\":24}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"w\",\"loc\":{\"start\":{\"line\":518,\"column\":25},\"end\":{\"line\":518,\"column\":26}}}],\"loc\":{\"start\":{\"line\":518,\"column\":16},\"end\":{\"line\":518,\"column\":27}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":518,\"column\":30},\"end\":{\"line\":518,\"column\":31}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":518,\"column\":32},\"end\":{\"line\":518,\"column\":38}}},\"loc\":{\"start\":{\"line\":518,\"column\":30},\"end\":{\"line\":518,\"column\":38}}},\"loc\":{\"start\":{\"line\":518,\"column\":16},\"end\":{\"line\":518,\"column\":38}}},\"loc\":{\"start\":{\"line\":518,\"column\":8},\"end\":{\"line\":518,\"column\":38}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":518,\"column\":4},\"end\":{\"line\":518,\"column\":39}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"extra\",\"loc\":{\"start\":{\"line\":519,\"column\":9},\"end\":{\"line\":519,\"column\":14}}},\"right\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":519,\"column\":17},\"end\":{\"line\":519,\"column\":18}}},\"loc\":{\"start\":{\"line\":519,\"column\":9},\"end\":{\"line\":519,\"column\":18}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":519,\"column\":21},\"end\":{\"line\":519,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"NewExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"Array\",\"loc\":{\"start\":{\"line\":519,\"column\":29},\"end\":{\"line\":519,\"column\":34}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"extra\",\"loc\":{\"start\":{\"line\":519,\"column\":35},\"end\":{\"line\":519,\"column\":40}}}],\"loc\":{\"start\":{\"line\":519,\"column\":25},\"end\":{\"line\":519,\"column\":41}}},\"property\":{\"type\":\"Identifier\",\"name\":\"join\",\"loc\":{\"start\":{\"line\":519,\"column\":42},\"end\":{\"line\":519,\"column\":46}}},\"loc\":{\"start\":{\"line\":519,\"column\":25},\"end\":{\"line\":519,\"column\":46}}},\"arguments\":[{\"type\":\"Literal\",\"value\":\" \",\"raw\":\"\\\" \\\"\",\"loc\":{\"start\":{\"line\":519,\"column\":47},\"end\":{\"line\":519,\"column\":50}}}],\"loc\":{\"start\":{\"line\":519,\"column\":25},\"end\":{\"line\":519,\"column\":51}}},\"right\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":519,\"column\":54},\"end\":{\"line\":519,\"column\":55}}},\"loc\":{\"start\":{\"line\":519,\"column\":25},\"end\":{\"line\":519,\"column\":55}}},\"loc\":{\"start\":{\"line\":519,\"column\":21},\"end\":{\"line\":519,\"column\":55}}},\"loc\":{\"start\":{\"line\":519,\"column\":21},\"end\":{\"line\":519,\"column\":56}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":519,\"column\":4},\"end\":{\"line\":519,\"column\":56}}}],\"loc\":{\"start\":{\"line\":517,\"column\":22},\"end\":{\"line\":520,\"column\":4}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":517,\"column\":3},\"end\":{\"line\":520,\"column\":4}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"r\",\"loc\":{\"start\":{\"line\":521,\"column\":10},\"end\":{\"line\":521,\"column\":11}}},\"loc\":{\"start\":{\"line\":521,\"column\":3},\"end\":{\"line\":521,\"column\":12}}}],\"loc\":{\"start\":{\"line\":508,\"column\":69},\"end\":{\"line\":522,\"column\":3}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":508,\"column\":50},\"end\":{\"line\":522,\"column\":3}}}],\"loc\":{\"start\":{\"line\":508,\"column\":9},\"end\":{\"line\":522,\"column\":4}}},\"loc\":{\"start\":{\"line\":508,\"column\":2},\"end\":{\"line\":522,\"column\":5}}}],\"loc\":{\"start\":{\"line\":505,\"column\":38},\"end\":{\"line\":523,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":505,\"column\":9},\"end\":{\"line\":523,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":505,\"column\":1},\"end\":{\"line\":523,\"column\":2}}}],\"loc\":{\"start\":{\"line\":470,\"column\":13},\"end\":{\"line\":525,\"column\":1}}},\"loc\":{\"start\":{\"line\":470,\"column\":0},\"end\":{\"line\":525,\"column\":1}}},\"loc\":{\"start\":{\"line\":470,\"column\":0},\"end\":{\"line\":525,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":527,\"column\":0},\"end\":{\"line\":527,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":527,\"column\":4},\"end\":{\"line\":527,\"column\":9}}},\"loc\":{\"start\":{\"line\":527,\"column\":0},\"end\":{\"line\":527,\"column\":9}}},\"right\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"concat\",\"loc\":{\"start\":{\"line\":528,\"column\":1},\"end\":{\"line\":528,\"column\":7}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":528,\"column\":9},\"end\":{\"line\":528,\"column\":13}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":528,\"column\":1},\"end\":{\"line\":528,\"column\":13}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"insert\",\"loc\":{\"start\":{\"line\":529,\"column\":1},\"end\":{\"line\":529,\"column\":7}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":529,\"column\":9},\"end\":{\"line\":529,\"column\":13}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":529,\"column\":1},\"end\":{\"line\":529,\"column\":13}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"pack\",\"loc\":{\"start\":{\"line\":530,\"column\":1},\"end\":{\"line\":530,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"obj\",\"loc\":{\"start\":{\"line\":531,\"column\":6},\"end\":{\"line\":531,\"column\":9}}},\"init\":{\"type\":\"ObjectExpression\",\"properties\":[],\"loc\":{\"start\":{\"line\":531,\"column\":12},\"end\":{\"line\":531,\"column\":14}}},\"loc\":{\"start\":{\"line\":531,\"column\":6},\"end\":{\"line\":531,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":531,\"column\":2},\"end\":{\"line\":531,\"column\":14}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":532,\"column\":12},\"end\":{\"line\":532,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":532,\"column\":16},\"end\":{\"line\":532,\"column\":17}}},\"loc\":{\"start\":{\"line\":532,\"column\":12},\"end\":{\"line\":532,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":532,\"column\":8},\"end\":{\"line\":532,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":532,\"column\":19},\"end\":{\"line\":532,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":532,\"column\":23},\"end\":{\"line\":532,\"column\":32}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":532,\"column\":33},\"end\":{\"line\":532,\"column\":39}}},\"loc\":{\"start\":{\"line\":532,\"column\":23},\"end\":{\"line\":532,\"column\":39}}},\"loc\":{\"start\":{\"line\":532,\"column\":19},\"end\":{\"line\":532,\"column\":39}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":532,\"column\":43},\"end\":{\"line\":532,\"column\":44}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":532,\"column\":41},\"end\":{\"line\":532,\"column\":44}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"obj\",\"loc\":{\"start\":{\"line\":533,\"column\":3},\"end\":{\"line\":533,\"column\":6}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\",\"loc\":{\"start\":{\"line\":533,\"column\":8},\"end\":{\"line\":533,\"column\":10}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":533,\"column\":14},\"end\":{\"line\":533,\"column\":15}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":533,\"column\":18},\"end\":{\"line\":533,\"column\":19}}},\"loc\":{\"start\":{\"line\":533,\"column\":14},\"end\":{\"line\":533,\"column\":19}}},\"loc\":{\"start\":{\"line\":533,\"column\":8},\"end\":{\"line\":533,\"column\":20}}},\"loc\":{\"start\":{\"line\":533,\"column\":3},\"end\":{\"line\":533,\"column\":22}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":533,\"column\":25},\"end\":{\"line\":533,\"column\":34}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":533,\"column\":35},\"end\":{\"line\":533,\"column\":36}}},\"loc\":{\"start\":{\"line\":533,\"column\":25},\"end\":{\"line\":533,\"column\":37}}},\"loc\":{\"start\":{\"line\":533,\"column\":3},\"end\":{\"line\":533,\"column\":37}}},\"loc\":{\"start\":{\"line\":533,\"column\":3},\"end\":{\"line\":533,\"column\":38}}}],\"loc\":{\"start\":{\"line\":532,\"column\":46},\"end\":{\"line\":534,\"column\":3}}},\"loc\":{\"start\":{\"line\":532,\"column\":2},\"end\":{\"line\":534,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":535,\"column\":9},\"end\":{\"line\":535,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeTable\",\"loc\":{\"start\":{\"line\":535,\"column\":15},\"end\":{\"line\":535,\"column\":24}}},\"loc\":{\"start\":{\"line\":535,\"column\":9},\"end\":{\"line\":535,\"column\":24}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"obj\",\"loc\":{\"start\":{\"line\":535,\"column\":25},\"end\":{\"line\":535,\"column\":28}}}],\"loc\":{\"start\":{\"line\":535,\"column\":9},\"end\":{\"line\":535,\"column\":29}}},\"loc\":{\"start\":{\"line\":535,\"column\":2},\"end\":{\"line\":535,\"column\":30}}}],\"loc\":{\"start\":{\"line\":530,\"column\":33},\"end\":{\"line\":536,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":530,\"column\":7},\"end\":{\"line\":536,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":530,\"column\":1},\"end\":{\"line\":536,\"column\":2}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"remove\",\"loc\":{\"start\":{\"line\":537,\"column\":1},\"end\":{\"line\":537,\"column\":7}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":537,\"column\":9},\"end\":{\"line\":537,\"column\":13}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":537,\"column\":1},\"end\":{\"line\":537,\"column\":13}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"sort\",\"loc\":{\"start\":{\"line\":538,\"column\":1},\"end\":{\"line\":538,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"sort\",\"loc\":{\"start\":{\"line\":538,\"column\":16},\"end\":{\"line\":538,\"column\":20}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":538,\"column\":21},\"end\":{\"line\":538,\"column\":26}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":538,\"column\":37},\"end\":{\"line\":538,\"column\":42}}},\"loc\":{\"start\":{\"line\":538,\"column\":30},\"end\":{\"line\":538,\"column\":43}}}],\"loc\":{\"start\":{\"line\":538,\"column\":28},\"end\":{\"line\":538,\"column\":45}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":538,\"column\":7},\"end\":{\"line\":538,\"column\":45}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":538,\"column\":1},\"end\":{\"line\":538,\"column\":45}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"unpack\",\"loc\":{\"start\":{\"line\":539,\"column\":1},\"end\":{\"line\":539,\"column\":7}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":539,\"column\":18},\"end\":{\"line\":539,\"column\":23}}},{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":539,\"column\":24},\"end\":{\"line\":539,\"column\":25}}},{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":539,\"column\":26},\"end\":{\"line\":539,\"column\":27}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":540,\"column\":7},\"end\":{\"line\":540,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":540,\"column\":13},\"end\":{\"line\":540,\"column\":22}}},\"loc\":{\"start\":{\"line\":540,\"column\":7},\"end\":{\"line\":540,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":540,\"column\":26},\"end\":{\"line\":540,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":540,\"column\":32},\"end\":{\"line\":540,\"column\":36}}},\"loc\":{\"start\":{\"line\":540,\"column\":26},\"end\":{\"line\":540,\"column\":36}}},\"loc\":{\"start\":{\"line\":540,\"column\":7},\"end\":{\"line\":540,\"column\":36}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":540,\"column\":39},\"end\":{\"line\":540,\"column\":40}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":540,\"column\":43},\"end\":{\"line\":540,\"column\":44}}},\"loc\":{\"start\":{\"line\":540,\"column\":39},\"end\":{\"line\":540,\"column\":44}}},\"loc\":{\"start\":{\"line\":540,\"column\":39},\"end\":{\"line\":540,\"column\":45}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":540,\"column\":2},\"end\":{\"line\":540,\"column\":45}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":541,\"column\":7},\"end\":{\"line\":541,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":541,\"column\":13},\"end\":{\"line\":541,\"column\":22}}},\"loc\":{\"start\":{\"line\":541,\"column\":7},\"end\":{\"line\":541,\"column\":22}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":541,\"column\":26},\"end\":{\"line\":541,\"column\":27}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":541,\"column\":32},\"end\":{\"line\":541,\"column\":36}}},\"loc\":{\"start\":{\"line\":541,\"column\":26},\"end\":{\"line\":541,\"column\":36}}},\"loc\":{\"start\":{\"line\":541,\"column\":7},\"end\":{\"line\":541,\"column\":36}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":541,\"column\":39},\"end\":{\"line\":541,\"column\":40}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":541,\"column\":43},\"end\":{\"line\":541,\"column\":48}}},\"property\":{\"type\":\"Identifier\",\"name\":\"count\",\"loc\":{\"start\":{\"line\":541,\"column\":49},\"end\":{\"line\":541,\"column\":54}}},\"loc\":{\"start\":{\"line\":541,\"column\":43},\"end\":{\"line\":541,\"column\":54}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":541,\"column\":55},\"end\":{\"line\":541,\"column\":60}}}],\"loc\":{\"start\":{\"line\":541,\"column\":43},\"end\":{\"line\":541,\"column\":61}}},\"loc\":{\"start\":{\"line\":541,\"column\":39},\"end\":{\"line\":541,\"column\":61}}},\"loc\":{\"start\":{\"line\":541,\"column\":39},\"end\":{\"line\":541,\"column\":62}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":541,\"column\":2},\"end\":{\"line\":541,\"column\":62}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":543,\"column\":6},\"end\":{\"line\":543,\"column\":9}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":543,\"column\":12},\"end\":{\"line\":543,\"column\":14}}},\"loc\":{\"start\":{\"line\":543,\"column\":6},\"end\":{\"line\":543,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":543,\"column\":2},\"end\":{\"line\":543,\"column\":15}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":544,\"column\":7},\"end\":{\"line\":544,\"column\":12}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":544,\"column\":13},\"end\":{\"line\":544,\"column\":20}}},\"loc\":{\"start\":{\"line\":544,\"column\":7},\"end\":{\"line\":544,\"column\":20}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":544,\"column\":21},\"end\":{\"line\":544,\"column\":26}}}],\"loc\":{\"start\":{\"line\":544,\"column\":7},\"end\":{\"line\":544,\"column\":27}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":545,\"column\":13},\"end\":{\"line\":545,\"column\":14}}},\"init\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":545,\"column\":17},\"end\":{\"line\":545,\"column\":18}}},\"loc\":{\"start\":{\"line\":545,\"column\":13},\"end\":{\"line\":545,\"column\":18}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":545,\"column\":9},\"end\":{\"line\":545,\"column\":18}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":545,\"column\":20},\"end\":{\"line\":545,\"column\":21}}},\"right\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":545,\"column\":25},\"end\":{\"line\":545,\"column\":26}}},\"loc\":{\"start\":{\"line\":545,\"column\":20},\"end\":{\"line\":545,\"column\":26}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":545,\"column\":30},\"end\":{\"line\":545,\"column\":31}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":545,\"column\":28},\"end\":{\"line\":545,\"column\":31}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":546,\"column\":4},\"end\":{\"line\":546,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":546,\"column\":8},\"end\":{\"line\":546,\"column\":12}}},\"loc\":{\"start\":{\"line\":546,\"column\":4},\"end\":{\"line\":546,\"column\":12}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":546,\"column\":13},\"end\":{\"line\":546,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":546,\"column\":19},\"end\":{\"line\":546,\"column\":26}}},\"loc\":{\"start\":{\"line\":546,\"column\":13},\"end\":{\"line\":546,\"column\":26}}},\"property\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":546,\"column\":27},\"end\":{\"line\":546,\"column\":28}}},\"loc\":{\"start\":{\"line\":546,\"column\":13},\"end\":{\"line\":546,\"column\":29}}}],\"loc\":{\"start\":{\"line\":546,\"column\":4},\"end\":{\"line\":546,\"column\":30}}},\"loc\":{\"start\":{\"line\":546,\"column\":4},\"end\":{\"line\":546,\"column\":31}}}],\"loc\":{\"start\":{\"line\":545,\"column\":34},\"end\":{\"line\":547,\"column\":4}}},\"loc\":{\"start\":{\"line\":545,\"column\":3},\"end\":{\"line\":547,\"column\":4}}}],\"loc\":{\"start\":{\"line\":544,\"column\":30},\"end\":{\"line\":548,\"column\":3}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":549,\"column\":13},\"end\":{\"line\":549,\"column\":14}}},\"init\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":549,\"column\":17},\"end\":{\"line\":549,\"column\":18}}},\"loc\":{\"start\":{\"line\":549,\"column\":13},\"end\":{\"line\":549,\"column\":18}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":549,\"column\":9},\"end\":{\"line\":549,\"column\":18}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":549,\"column\":20},\"end\":{\"line\":549,\"column\":21}}},\"right\":{\"type\":\"Identifier\",\"name\":\"j\",\"loc\":{\"start\":{\"line\":549,\"column\":25},\"end\":{\"line\":549,\"column\":26}}},\"loc\":{\"start\":{\"line\":549,\"column\":20},\"end\":{\"line\":549,\"column\":26}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":549,\"column\":30},\"end\":{\"line\":549,\"column\":31}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":549,\"column\":28},\"end\":{\"line\":549,\"column\":31}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":550,\"column\":4},\"end\":{\"line\":550,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":550,\"column\":8},\"end\":{\"line\":550,\"column\":12}}},\"loc\":{\"start\":{\"line\":550,\"column\":4},\"end\":{\"line\":550,\"column\":12}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":550,\"column\":13},\"end\":{\"line\":550,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":550,\"column\":19},\"end\":{\"line\":550,\"column\":20}}},\"loc\":{\"start\":{\"line\":550,\"column\":13},\"end\":{\"line\":550,\"column\":21}}}],\"loc\":{\"start\":{\"line\":550,\"column\":4},\"end\":{\"line\":550,\"column\":22}}},\"loc\":{\"start\":{\"line\":550,\"column\":4},\"end\":{\"line\":550,\"column\":23}}}],\"loc\":{\"start\":{\"line\":549,\"column\":34},\"end\":{\"line\":551,\"column\":4}}},\"loc\":{\"start\":{\"line\":549,\"column\":3},\"end\":{\"line\":551,\"column\":4}}}],\"loc\":{\"start\":{\"line\":548,\"column\":9},\"end\":{\"line\":552,\"column\":3}}},\"loc\":{\"start\":{\"line\":544,\"column\":2},\"end\":{\"line\":552,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":554,\"column\":9},\"end\":{\"line\":554,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":554,\"column\":15},\"end\":{\"line\":554,\"column\":30}}},\"loc\":{\"start\":{\"line\":554,\"column\":9},\"end\":{\"line\":554,\"column\":30}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":554,\"column\":31},\"end\":{\"line\":554,\"column\":36}}},\"loc\":{\"start\":{\"line\":554,\"column\":9},\"end\":{\"line\":554,\"column\":36}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":554,\"column\":37},\"end\":{\"line\":554,\"column\":42}}},{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":554,\"column\":44},\"end\":{\"line\":554,\"column\":47}}}],\"loc\":{\"start\":{\"line\":554,\"column\":9},\"end\":{\"line\":554,\"column\":48}}},\"loc\":{\"start\":{\"line\":554,\"column\":2},\"end\":{\"line\":554,\"column\":49}}}],\"loc\":{\"start\":{\"line\":539,\"column\":29},\"end\":{\"line\":557,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":539,\"column\":9},\"end\":{\"line\":557,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":539,\"column\":1},\"end\":{\"line\":557,\"column\":2}}}],\"loc\":{\"start\":{\"line\":527,\"column\":12},\"end\":{\"line\":559,\"column\":1}}},\"loc\":{\"start\":{\"line\":527,\"column\":0},\"end\":{\"line\":559,\"column\":1}}},\"loc\":{\"start\":{\"line\":527,\"column\":0},\"end\":{\"line\":559,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":561,\"column\":0},\"end\":{\"line\":561,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"unpack\",\"loc\":{\"start\":{\"line\":561,\"column\":4},\"end\":{\"line\":561,\"column\":10}}},\"loc\":{\"start\":{\"line\":561,\"column\":0},\"end\":{\"line\":561,\"column\":10}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":561,\"column\":13},\"end\":{\"line\":561,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":561,\"column\":17},\"end\":{\"line\":561,\"column\":22}}},\"loc\":{\"start\":{\"line\":561,\"column\":13},\"end\":{\"line\":561,\"column\":22}}},\"property\":{\"type\":\"Identifier\",\"name\":\"unpack\",\"loc\":{\"start\":{\"line\":561,\"column\":23},\"end\":{\"line\":561,\"column\":29}}},\"loc\":{\"start\":{\"line\":561,\"column\":13},\"end\":{\"line\":561,\"column\":29}}},\"loc\":{\"start\":{\"line\":561,\"column\":0},\"end\":{\"line\":561,\"column\":29}}},\"loc\":{\"start\":{\"line\":561,\"column\":0},\"end\":{\"line\":561,\"column\":30}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":563,\"column\":0},\"end\":{\"line\":563,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"tonumber\",\"loc\":{\"start\":{\"line\":563,\"column\":4},\"end\":{\"line\":563,\"column\":12}}},\"loc\":{\"start\":{\"line\":563,\"column\":0},\"end\":{\"line\":563,\"column\":12}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":563,\"column\":24},\"end\":{\"line\":563,\"column\":25}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"parseInt\",\"loc\":{\"start\":{\"line\":564,\"column\":8},\"end\":{\"line\":564,\"column\":16}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":564,\"column\":17},\"end\":{\"line\":564,\"column\":18}}}],\"loc\":{\"start\":{\"line\":564,\"column\":8},\"end\":{\"line\":564,\"column\":19}}},\"loc\":{\"start\":{\"line\":564,\"column\":1},\"end\":{\"line\":564,\"column\":20}}}],\"loc\":{\"start\":{\"line\":563,\"column\":27},\"end\":{\"line\":565,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":563,\"column\":15},\"end\":{\"line\":565,\"column\":1}}},\"loc\":{\"start\":{\"line\":563,\"column\":0},\"end\":{\"line\":565,\"column\":1}}},\"loc\":{\"start\":{\"line\":563,\"column\":0},\"end\":{\"line\":565,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":567,\"column\":0},\"end\":{\"line\":567,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"tostring\",\"loc\":{\"start\":{\"line\":567,\"column\":4},\"end\":{\"line\":567,\"column\":12}}},\"loc\":{\"start\":{\"line\":567,\"column\":0},\"end\":{\"line\":567,\"column\":12}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":567,\"column\":24},\"end\":{\"line\":567,\"column\":25}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":568,\"column\":8},\"end\":{\"line\":568,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeString\",\"loc\":{\"start\":{\"line\":568,\"column\":14},\"end\":{\"line\":568,\"column\":24}}},\"loc\":{\"start\":{\"line\":568,\"column\":8},\"end\":{\"line\":568,\"column\":24}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"n\",\"loc\":{\"start\":{\"line\":568,\"column\":25},\"end\":{\"line\":568,\"column\":26}}}],\"loc\":{\"start\":{\"line\":568,\"column\":8},\"end\":{\"line\":568,\"column\":27}}},\"loc\":{\"start\":{\"line\":568,\"column\":1},\"end\":{\"line\":568,\"column\":28}}}],\"loc\":{\"start\":{\"line\":567,\"column\":27},\"end\":{\"line\":569,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":567,\"column\":15},\"end\":{\"line\":569,\"column\":1}}},\"loc\":{\"start\":{\"line\":567,\"column\":0},\"end\":{\"line\":569,\"column\":1}}},\"loc\":{\"start\":{\"line\":567,\"column\":0},\"end\":{\"line\":569,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":571,\"column\":0},\"end\":{\"line\":571,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"os\",\"loc\":{\"start\":{\"line\":571,\"column\":4},\"end\":{\"line\":571,\"column\":6}}},\"loc\":{\"start\":{\"line\":571,\"column\":0},\"end\":{\"line\":571,\"column\":6}}},\"right\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"clock\",\"loc\":{\"start\":{\"line\":572,\"column\":1},\"end\":{\"line\":572,\"column\":6}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":572,\"column\":8},\"end\":{\"line\":572,\"column\":12}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":572,\"column\":1},\"end\":{\"line\":572,\"column\":12}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"date\",\"loc\":{\"start\":{\"line\":573,\"column\":1},\"end\":{\"line\":573,\"column\":5}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":573,\"column\":7},\"end\":{\"line\":573,\"column\":11}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":573,\"column\":1},\"end\":{\"line\":573,\"column\":11}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"difftime\",\"loc\":{\"start\":{\"line\":574,\"column\":1},\"end\":{\"line\":574,\"column\":9}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"difftime\",\"loc\":{\"start\":{\"line\":574,\"column\":20},\"end\":{\"line\":574,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"t1\",\"loc\":{\"start\":{\"line\":574,\"column\":29},\"end\":{\"line\":574,\"column\":31}}},{\"type\":\"Identifier\",\"name\":\"t2\",\"loc\":{\"start\":{\"line\":574,\"column\":32},\"end\":{\"line\":574,\"column\":34}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"t2\",\"loc\":{\"start\":{\"line\":574,\"column\":45},\"end\":{\"line\":574,\"column\":47}}},\"right\":{\"type\":\"Identifier\",\"name\":\"t1\",\"loc\":{\"start\":{\"line\":574,\"column\":50},\"end\":{\"line\":574,\"column\":52}}},\"loc\":{\"start\":{\"line\":574,\"column\":45},\"end\":{\"line\":574,\"column\":52}}},\"loc\":{\"start\":{\"line\":574,\"column\":38},\"end\":{\"line\":574,\"column\":53}}}],\"loc\":{\"start\":{\"line\":574,\"column\":36},\"end\":{\"line\":574,\"column\":55}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":574,\"column\":11},\"end\":{\"line\":574,\"column\":55}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":574,\"column\":1},\"end\":{\"line\":574,\"column\":55}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"execute\",\"loc\":{\"start\":{\"line\":575,\"column\":1},\"end\":{\"line\":575,\"column\":8}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":575,\"column\":10},\"end\":{\"line\":575,\"column\":14}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":575,\"column\":1},\"end\":{\"line\":575,\"column\":14}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"exit\",\"loc\":{\"start\":{\"line\":576,\"column\":1},\"end\":{\"line\":576,\"column\":5}}},\"value\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":576,\"column\":7},\"end\":{\"line\":576,\"column\":11}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":576,\"column\":1},\"end\":{\"line\":576,\"column\":11}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"time\",\"loc\":{\"start\":{\"line\":577,\"column\":1},\"end\":{\"line\":577,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"time\",\"loc\":{\"start\":{\"line\":577,\"column\":16},\"end\":{\"line\":577,\"column\":20}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":577,\"column\":21},\"end\":{\"line\":577,\"column\":26}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":578,\"column\":7},\"end\":{\"line\":578,\"column\":12}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":578,\"column\":16},\"end\":{\"line\":578,\"column\":20}}},\"loc\":{\"start\":{\"line\":578,\"column\":7},\"end\":{\"line\":578,\"column\":20}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"NewExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"Date\",\"loc\":{\"start\":{\"line\":578,\"column\":34},\"end\":{\"line\":578,\"column\":38}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":578,\"column\":30},\"end\":{\"line\":578,\"column\":40}}},\"property\":{\"type\":\"Identifier\",\"name\":\"getTime\",\"loc\":{\"start\":{\"line\":578,\"column\":41},\"end\":{\"line\":578,\"column\":48}}},\"loc\":{\"start\":{\"line\":578,\"column\":30},\"end\":{\"line\":578,\"column\":48}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":578,\"column\":30},\"end\":{\"line\":578,\"column\":50}}},\"loc\":{\"start\":{\"line\":578,\"column\":23},\"end\":{\"line\":578,\"column\":51}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":578,\"column\":2},\"end\":{\"line\":578,\"column\":51}}},{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"Literal\",\"value\":\"Time given a table not implemented yet.\",\"raw\":\"\\\"Time given a table not implemented yet.\\\"\",\"loc\":{\"start\":{\"line\":579,\"column\":8},\"end\":{\"line\":579,\"column\":49}}},\"loc\":{\"start\":{\"line\":579,\"column\":2},\"end\":{\"line\":579,\"column\":50}}}],\"loc\":{\"start\":{\"line\":577,\"column\":28},\"end\":{\"line\":580,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":577,\"column\":7},\"end\":{\"line\":580,\"column\":2}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":577,\"column\":1},\"end\":{\"line\":580,\"column\":2}}}],\"loc\":{\"start\":{\"line\":571,\"column\":9},\"end\":{\"line\":581,\"column\":1}}},\"loc\":{\"start\":{\"line\":571,\"column\":0},\"end\":{\"line\":581,\"column\":1}}},\"loc\":{\"start\":{\"line\":571,\"column\":0},\"end\":{\"line\":581,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":583,\"column\":0},\"end\":{\"line\":583,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"io\",\"loc\":{\"start\":{\"line\":583,\"column\":4},\"end\":{\"line\":583,\"column\":6}}},\"loc\":{\"start\":{\"line\":583,\"column\":0},\"end\":{\"line\":583,\"column\":6}}},\"right\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"write\",\"loc\":{\"start\":{\"line\":584,\"column\":1},\"end\":{\"line\":584,\"column\":6}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":584,\"column\":21},\"end\":{\"line\":584,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"print\",\"loc\":{\"start\":{\"line\":584,\"column\":25},\"end\":{\"line\":584,\"column\":30}}},\"loc\":{\"start\":{\"line\":584,\"column\":21},\"end\":{\"line\":584,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":584,\"column\":31},\"end\":{\"line\":584,\"column\":40}}}],\"loc\":{\"start\":{\"line\":584,\"column\":21},\"end\":{\"line\":584,\"column\":41}}},\"loc\":{\"start\":{\"line\":584,\"column\":21},\"end\":{\"line\":584,\"column\":42}}}],\"loc\":{\"start\":{\"line\":584,\"column\":19},\"end\":{\"line\":584,\"column\":44}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":584,\"column\":8},\"end\":{\"line\":584,\"column\":44}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":584,\"column\":1},\"end\":{\"line\":584,\"column\":44}}}],\"loc\":{\"start\":{\"line\":583,\"column\":9},\"end\":{\"line\":585,\"column\":1}}},\"loc\":{\"start\":{\"line\":583,\"column\":0},\"end\":{\"line\":585,\"column\":1}}},\"loc\":{\"start\":{\"line\":583,\"column\":0},\"end\":{\"line\":585,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":587,\"column\":0},\"end\":{\"line\":587,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"error\",\"loc\":{\"start\":{\"line\":587,\"column\":4},\"end\":{\"line\":587,\"column\":9}}},\"loc\":{\"start\":{\"line\":587,\"column\":0},\"end\":{\"line\":587,\"column\":9}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"error\",\"loc\":{\"start\":{\"line\":587,\"column\":21},\"end\":{\"line\":587,\"column\":26}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":587,\"column\":27},\"end\":{\"line\":587,\"column\":28}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"s\",\"loc\":{\"start\":{\"line\":587,\"column\":38},\"end\":{\"line\":587,\"column\":39}}},\"loc\":{\"start\":{\"line\":587,\"column\":32},\"end\":{\"line\":587,\"column\":40}}}],\"loc\":{\"start\":{\"line\":587,\"column\":30},\"end\":{\"line\":587,\"column\":42}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":587,\"column\":12},\"end\":{\"line\":587,\"column\":42}}},\"loc\":{\"start\":{\"line\":587,\"column\":0},\"end\":{\"line\":587,\"column\":42}}},\"loc\":{\"start\":{\"line\":587,\"column\":0},\"end\":{\"line\":587,\"column\":43}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":589,\"column\":0},\"end\":{\"line\":589,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"assert\",\"loc\":{\"start\":{\"line\":589,\"column\":4},\"end\":{\"line\":589,\"column\":10}}},\"loc\":{\"start\":{\"line\":589,\"column\":0},\"end\":{\"line\":589,\"column\":10}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"assert\",\"loc\":{\"start\":{\"line\":589,\"column\":22},\"end\":{\"line\":589,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":589,\"column\":29},\"end\":{\"line\":589,\"column\":33}}},{\"type\":\"Identifier\",\"name\":\"msg\",\"loc\":{\"start\":{\"line\":589,\"column\":35},\"end\":{\"line\":589,\"column\":38}}},{\"type\":\"Identifier\",\"name\":\"code\",\"loc\":{\"start\":{\"line\":589,\"column\":40},\"end\":{\"line\":589,\"column\":44}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"code\",\"loc\":{\"start\":{\"line\":590,\"column\":6},\"end\":{\"line\":590,\"column\":10}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":590,\"column\":15},\"end\":{\"line\":590,\"column\":24}}},\"loc\":{\"start\":{\"line\":590,\"column\":6},\"end\":{\"line\":590,\"column\":24}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"code\",\"loc\":{\"start\":{\"line\":591,\"column\":2},\"end\":{\"line\":591,\"column\":6}}},\"right\":{\"type\":\"Identifier\",\"name\":\"msg\",\"loc\":{\"start\":{\"line\":591,\"column\":9},\"end\":{\"line\":591,\"column\":12}}},\"loc\":{\"start\":{\"line\":591,\"column\":2},\"end\":{\"line\":591,\"column\":12}}},\"loc\":{\"start\":{\"line\":591,\"column\":2},\"end\":{\"line\":591,\"column\":13}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"msg\",\"loc\":{\"start\":{\"line\":592,\"column\":2},\"end\":{\"line\":592,\"column\":5}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":592,\"column\":8},\"end\":{\"line\":592,\"column\":17}}},\"loc\":{\"start\":{\"line\":592,\"column\":2},\"end\":{\"line\":592,\"column\":17}}},\"loc\":{\"start\":{\"line\":592,\"column\":2},\"end\":{\"line\":592,\"column\":18}}}],\"loc\":{\"start\":{\"line\":590,\"column\":27},\"end\":{\"line\":593,\"column\":2}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":590,\"column\":1},\"end\":{\"line\":593,\"column\":2}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":595,\"column\":8},\"end\":{\"line\":595,\"column\":12}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":595,\"column\":7},\"end\":{\"line\":595,\"column\":12}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":595,\"column\":6},\"end\":{\"line\":595,\"column\":12}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":595,\"column\":22},\"end\":{\"line\":595,\"column\":26}}},\"loc\":{\"start\":{\"line\":595,\"column\":15},\"end\":{\"line\":595,\"column\":27}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":595,\"column\":1},\"end\":{\"line\":595,\"column\":27}}},{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"Assert Failed!! \",\"raw\":\"\\\"Assert Failed!! \\\"\",\"loc\":{\"start\":{\"line\":597,\"column\":7},\"end\":{\"line\":597,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"code\",\"loc\":{\"start\":{\"line\":597,\"column\":28},\"end\":{\"line\":597,\"column\":32}}},\"loc\":{\"start\":{\"line\":597,\"column\":7},\"end\":{\"line\":597,\"column\":32}}},\"loc\":{\"start\":{\"line\":597,\"column\":1},\"end\":{\"line\":597,\"column\":34}}}],\"loc\":{\"start\":{\"line\":589,\"column\":46},\"end\":{\"line\":598,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":589,\"column\":13},\"end\":{\"line\":598,\"column\":1}}},\"loc\":{\"start\":{\"line\":589,\"column\":0},\"end\":{\"line\":598,\"column\":1}}},\"loc\":{\"start\":{\"line\":589,\"column\":0},\"end\":{\"line\":598,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":600,\"column\":0},\"end\":{\"line\":600,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":600,\"column\":4},\"end\":{\"line\":600,\"column\":8}}},\"loc\":{\"start\":{\"line\":600,\"column\":0},\"end\":{\"line\":600,\"column\":8}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":600,\"column\":20},\"end\":{\"line\":600,\"column\":24}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":600,\"column\":25},\"end\":{\"line\":600,\"column\":29}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"type\",\"loc\":{\"start\":{\"line\":601,\"column\":14},\"end\":{\"line\":601,\"column\":18}}},\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":18}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":601,\"column\":19},\"end\":{\"line\":601,\"column\":23}}}],\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":24}}},\"loc\":{\"start\":{\"line\":601,\"column\":1},\"end\":{\"line\":601,\"column\":25}}}],\"loc\":{\"start\":{\"line\":600,\"column\":31},\"end\":{\"line\":602,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":600,\"column\":11},\"end\":{\"line\":602,\"column\":1}}},\"loc\":{\"start\":{\"line\":600,\"column\":0},\"end\":{\"line\":602,\"column\":1}}},\"loc\":{\"start\":{\"line\":600,\"column\":0},\"end\":{\"line\":602,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":605,\"column\":0},\"end\":{\"line\":605,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"pairs\",\"loc\":{\"start\":{\"line\":605,\"column\":4},\"end\":{\"line\":605,\"column\":9}}},\"loc\":{\"start\":{\"line\":605,\"column\":0},\"end\":{\"line\":605,\"column\":9}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"pairs\",\"loc\":{\"start\":{\"line\":605,\"column\":21},\"end\":{\"line\":605,\"column\":26}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":605,\"column\":27},\"end\":{\"line\":605,\"column\":32}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":607,\"column\":5},\"end\":{\"line\":607,\"column\":8}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":607,\"column\":11},\"end\":{\"line\":607,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":607,\"column\":17},\"end\":{\"line\":607,\"column\":32}}},\"loc\":{\"start\":{\"line\":607,\"column\":11},\"end\":{\"line\":607,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":607,\"column\":33},\"end\":{\"line\":607,\"column\":38}}},{\"type\":\"Literal\",\"value\":\"__pairs\",\"raw\":\"\\\"__pairs\\\"\",\"loc\":{\"start\":{\"line\":607,\"column\":40},\"end\":{\"line\":607,\"column\":49}}}],\"loc\":{\"start\":{\"line\":607,\"column\":11},\"end\":{\"line\":607,\"column\":50}}},\"loc\":{\"start\":{\"line\":607,\"column\":5},\"end\":{\"line\":607,\"column\":50}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":607,\"column\":1},\"end\":{\"line\":607,\"column\":51}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":608,\"column\":6},\"end\":{\"line\":608,\"column\":9}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":608,\"column\":14},\"end\":{\"line\":608,\"column\":18}}},\"loc\":{\"start\":{\"line\":608,\"column\":6},\"end\":{\"line\":608,\"column\":18}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":608,\"column\":28},\"end\":{\"line\":608,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":608,\"column\":32},\"end\":{\"line\":608,\"column\":37}}}],\"loc\":{\"start\":{\"line\":608,\"column\":28},\"end\":{\"line\":608,\"column\":38}}},\"loc\":{\"start\":{\"line\":608,\"column\":21},\"end\":{\"line\":608,\"column\":39}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":608,\"column\":1},\"end\":{\"line\":608,\"column\":39}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":610,\"column\":5},\"end\":{\"line\":610,\"column\":9}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":610,\"column\":12},\"end\":{\"line\":610,\"column\":14}}},\"loc\":{\"start\":{\"line\":610,\"column\":5},\"end\":{\"line\":610,\"column\":14}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":610,\"column\":1},\"end\":{\"line\":610,\"column\":15}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":611,\"column\":6},\"end\":{\"line\":611,\"column\":11}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":611,\"column\":12},\"end\":{\"line\":611,\"column\":19}}},\"loc\":{\"start\":{\"line\":611,\"column\":6},\"end\":{\"line\":611,\"column\":19}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":611,\"column\":20},\"end\":{\"line\":611,\"column\":25}}}],\"loc\":{\"start\":{\"line\":611,\"column\":6},\"end\":{\"line\":611,\"column\":26}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":612,\"column\":12},\"end\":{\"line\":612,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":612,\"column\":16},\"end\":{\"line\":612,\"column\":17}}},\"loc\":{\"start\":{\"line\":612,\"column\":12},\"end\":{\"line\":612,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":612,\"column\":8},\"end\":{\"line\":612,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":612,\"column\":19},\"end\":{\"line\":612,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":612,\"column\":23},\"end\":{\"line\":612,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":612,\"column\":29},\"end\":{\"line\":612,\"column\":36}}},\"loc\":{\"start\":{\"line\":612,\"column\":23},\"end\":{\"line\":612,\"column\":36}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":612,\"column\":37},\"end\":{\"line\":612,\"column\":43}}},\"loc\":{\"start\":{\"line\":612,\"column\":23},\"end\":{\"line\":612,\"column\":43}}},\"loc\":{\"start\":{\"line\":612,\"column\":19},\"end\":{\"line\":612,\"column\":43}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":612,\"column\":47},\"end\":{\"line\":612,\"column\":48}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":612,\"column\":45},\"end\":{\"line\":612,\"column\":48}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":612,\"column\":51},\"end\":{\"line\":612,\"column\":55}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":612,\"column\":56},\"end\":{\"line\":612,\"column\":60}}},\"loc\":{\"start\":{\"line\":612,\"column\":51},\"end\":{\"line\":612,\"column\":60}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":612,\"column\":62},\"end\":{\"line\":612,\"column\":63}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":612,\"column\":66},\"end\":{\"line\":612,\"column\":67}}},\"loc\":{\"start\":{\"line\":612,\"column\":62},\"end\":{\"line\":612,\"column\":67}}},{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":612,\"column\":69},\"end\":{\"line\":612,\"column\":70}}},{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":612,\"column\":72},\"end\":{\"line\":612,\"column\":77}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":612,\"column\":78},\"end\":{\"line\":612,\"column\":85}}},\"loc\":{\"start\":{\"line\":612,\"column\":72},\"end\":{\"line\":612,\"column\":85}}}],\"loc\":{\"start\":{\"line\":612,\"column\":61},\"end\":{\"line\":612,\"column\":86}}}],\"loc\":{\"start\":{\"line\":612,\"column\":51},\"end\":{\"line\":612,\"column\":87}}},\"loc\":{\"start\":{\"line\":612,\"column\":51},\"end\":{\"line\":612,\"column\":88}}},\"loc\":{\"start\":{\"line\":612,\"column\":2},\"end\":{\"line\":612,\"column\":88}}},{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":613,\"column\":12},\"end\":{\"line\":613,\"column\":15}}},\"init\":null,\"loc\":{\"start\":{\"line\":613,\"column\":12},\"end\":{\"line\":613,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":613,\"column\":8},\"end\":{\"line\":613,\"column\":15}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":613,\"column\":19},\"end\":{\"line\":613,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":613,\"column\":25},\"end\":{\"line\":613,\"column\":29}}},\"loc\":{\"start\":{\"line\":613,\"column\":19},\"end\":{\"line\":613,\"column\":29}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":613,\"column\":32},\"end\":{\"line\":613,\"column\":36}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":613,\"column\":37},\"end\":{\"line\":613,\"column\":41}}},\"loc\":{\"start\":{\"line\":613,\"column\":32},\"end\":{\"line\":613,\"column\":41}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":613,\"column\":43},\"end\":{\"line\":613,\"column\":46}}},{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":613,\"column\":48},\"end\":{\"line\":613,\"column\":51}}},{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":613,\"column\":53},\"end\":{\"line\":613,\"column\":58}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":613,\"column\":59},\"end\":{\"line\":613,\"column\":63}}},\"loc\":{\"start\":{\"line\":613,\"column\":53},\"end\":{\"line\":613,\"column\":63}}}],\"loc\":{\"start\":{\"line\":613,\"column\":42},\"end\":{\"line\":613,\"column\":64}}}],\"loc\":{\"start\":{\"line\":613,\"column\":32},\"end\":{\"line\":613,\"column\":65}}},\"loc\":{\"start\":{\"line\":613,\"column\":32},\"end\":{\"line\":613,\"column\":66}}},\"each\":false,\"loc\":{\"start\":{\"line\":613,\"column\":2},\"end\":{\"line\":613,\"column\":66}}}],\"loc\":{\"start\":{\"line\":611,\"column\":29},\"end\":{\"line\":614,\"column\":2}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":614,\"column\":13},\"end\":{\"line\":614,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":614,\"column\":19},\"end\":{\"line\":614,\"column\":28}}},\"loc\":{\"start\":{\"line\":614,\"column\":13},\"end\":{\"line\":614,\"column\":28}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":614,\"column\":29},\"end\":{\"line\":614,\"column\":34}}}],\"loc\":{\"start\":{\"line\":614,\"column\":13},\"end\":{\"line\":614,\"column\":35}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":615,\"column\":12},\"end\":{\"line\":615,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":615,\"column\":16},\"end\":{\"line\":615,\"column\":17}}},\"loc\":{\"start\":{\"line\":615,\"column\":12},\"end\":{\"line\":615,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":615,\"column\":8},\"end\":{\"line\":615,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":615,\"column\":19},\"end\":{\"line\":615,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":615,\"column\":23},\"end\":{\"line\":615,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":615,\"column\":29},\"end\":{\"line\":615,\"column\":35}}},\"loc\":{\"start\":{\"line\":615,\"column\":23},\"end\":{\"line\":615,\"column\":35}}},\"loc\":{\"start\":{\"line\":615,\"column\":19},\"end\":{\"line\":615,\"column\":35}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":615,\"column\":39},\"end\":{\"line\":615,\"column\":40}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":615,\"column\":37},\"end\":{\"line\":615,\"column\":40}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":615,\"column\":43},\"end\":{\"line\":615,\"column\":47}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":615,\"column\":48},\"end\":{\"line\":615,\"column\":52}}},\"loc\":{\"start\":{\"line\":615,\"column\":43},\"end\":{\"line\":615,\"column\":52}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":615,\"column\":54},\"end\":{\"line\":615,\"column\":55}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":615,\"column\":58},\"end\":{\"line\":615,\"column\":59}}},\"loc\":{\"start\":{\"line\":615,\"column\":54},\"end\":{\"line\":615,\"column\":59}}},{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":615,\"column\":61},\"end\":{\"line\":615,\"column\":62}}},{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":615,\"column\":64},\"end\":{\"line\":615,\"column\":69}}}],\"loc\":{\"start\":{\"line\":615,\"column\":53},\"end\":{\"line\":615,\"column\":70}}}],\"loc\":{\"start\":{\"line\":615,\"column\":43},\"end\":{\"line\":615,\"column\":71}}},\"loc\":{\"start\":{\"line\":615,\"column\":43},\"end\":{\"line\":615,\"column\":72}}},\"loc\":{\"start\":{\"line\":615,\"column\":2},\"end\":{\"line\":615,\"column\":72}}}],\"loc\":{\"start\":{\"line\":614,\"column\":38},\"end\":{\"line\":616,\"column\":2}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":617,\"column\":6},\"end\":{\"line\":617,\"column\":10}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":617,\"column\":13},\"end\":{\"line\":617,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":617,\"column\":20},\"end\":{\"line\":617,\"column\":24}}},\"loc\":{\"start\":{\"line\":617,\"column\":13},\"end\":{\"line\":617,\"column\":24}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":617,\"column\":25},\"end\":{\"line\":617,\"column\":30}}}],\"loc\":{\"start\":{\"line\":617,\"column\":13},\"end\":{\"line\":617,\"column\":31}}},\"loc\":{\"start\":{\"line\":617,\"column\":6},\"end\":{\"line\":617,\"column\":31}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":617,\"column\":2},\"end\":{\"line\":617,\"column\":32}}},{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":618,\"column\":12},\"end\":{\"line\":618,\"column\":15}}},\"init\":null,\"loc\":{\"start\":{\"line\":618,\"column\":12},\"end\":{\"line\":618,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":618,\"column\":8},\"end\":{\"line\":618,\"column\":15}}},\"right\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":618,\"column\":19},\"end\":{\"line\":618,\"column\":23}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":618,\"column\":26},\"end\":{\"line\":618,\"column\":30}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":618,\"column\":31},\"end\":{\"line\":618,\"column\":35}}},\"loc\":{\"start\":{\"line\":618,\"column\":26},\"end\":{\"line\":618,\"column\":35}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":618,\"column\":37},\"end\":{\"line\":618,\"column\":41}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":618,\"column\":42},\"end\":{\"line\":618,\"column\":45}}},\"loc\":{\"start\":{\"line\":618,\"column\":37},\"end\":{\"line\":618,\"column\":46}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":618,\"column\":48},\"end\":{\"line\":618,\"column\":52}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":618,\"column\":53},\"end\":{\"line\":618,\"column\":56}}},\"loc\":{\"start\":{\"line\":618,\"column\":48},\"end\":{\"line\":618,\"column\":57}}},{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":618,\"column\":59},\"end\":{\"line\":618,\"column\":64}}}],\"loc\":{\"start\":{\"line\":618,\"column\":36},\"end\":{\"line\":618,\"column\":65}}}],\"loc\":{\"start\":{\"line\":618,\"column\":26},\"end\":{\"line\":618,\"column\":66}}},\"loc\":{\"start\":{\"line\":618,\"column\":26},\"end\":{\"line\":618,\"column\":67}}},\"each\":false,\"loc\":{\"start\":{\"line\":618,\"column\":2},\"end\":{\"line\":618,\"column\":67}}}],\"loc\":{\"start\":{\"line\":616,\"column\":8},\"end\":{\"line\":619,\"column\":2}}},\"loc\":{\"start\":{\"line\":614,\"column\":8},\"end\":{\"line\":619,\"column\":2}}},\"loc\":{\"start\":{\"line\":611,\"column\":1},\"end\":{\"line\":619,\"column\":2}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":621,\"column\":8},\"end\":{\"line\":621,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":621,\"column\":14},\"end\":{\"line\":621,\"column\":29}}},\"loc\":{\"start\":{\"line\":621,\"column\":8},\"end\":{\"line\":621,\"column\":29}}},\"arguments\":[{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"handle\",\"loc\":{\"start\":{\"line\":621,\"column\":39},\"end\":{\"line\":621,\"column\":45}}},{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":621,\"column\":47},\"end\":{\"line\":621,\"column\":50}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"handle\",\"loc\":{\"start\":{\"line\":622,\"column\":7},\"end\":{\"line\":622,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":622,\"column\":14},\"end\":{\"line\":622,\"column\":20}}},\"loc\":{\"start\":{\"line\":622,\"column\":7},\"end\":{\"line\":622,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":622,\"column\":23},\"end\":{\"line\":622,\"column\":24}}},\"loc\":{\"start\":{\"line\":622,\"column\":7},\"end\":{\"line\":622,\"column\":24}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":622,\"column\":34},\"end\":{\"line\":622,\"column\":38}}},\"loc\":{\"start\":{\"line\":622,\"column\":27},\"end\":{\"line\":622,\"column\":39}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":622,\"column\":2},\"end\":{\"line\":622,\"column\":39}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"nfo\",\"loc\":{\"start\":{\"line\":623,\"column\":6},\"end\":{\"line\":623,\"column\":9}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"handle\",\"loc\":{\"start\":{\"line\":623,\"column\":12},\"end\":{\"line\":623,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"shift\",\"loc\":{\"start\":{\"line\":623,\"column\":19},\"end\":{\"line\":623,\"column\":24}}},\"loc\":{\"start\":{\"line\":623,\"column\":12},\"end\":{\"line\":623,\"column\":24}}},\"arguments\":[],\"loc\":{\"start\":{\"line\":623,\"column\":12},\"end\":{\"line\":623,\"column\":26}}},\"loc\":{\"start\":{\"line\":623,\"column\":6},\"end\":{\"line\":623,\"column\":26}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":623,\"column\":2},\"end\":{\"line\":623,\"column\":27}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"k\",\"loc\":{\"start\":{\"line\":624,\"column\":6},\"end\":{\"line\":624,\"column\":7}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"nfo\",\"loc\":{\"start\":{\"line\":624,\"column\":10},\"end\":{\"line\":624,\"column\":13}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":624,\"column\":14},\"end\":{\"line\":624,\"column\":15}}},\"loc\":{\"start\":{\"line\":624,\"column\":10},\"end\":{\"line\":624,\"column\":16}}},\"loc\":{\"start\":{\"line\":624,\"column\":6},\"end\":{\"line\":624,\"column\":16}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":624,\"column\":2},\"end\":{\"line\":624,\"column\":17}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":625,\"column\":6},\"end\":{\"line\":625,\"column\":7}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"nfo\",\"loc\":{\"start\":{\"line\":625,\"column\":10},\"end\":{\"line\":625,\"column\":13}}},\"property\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":625,\"column\":14},\"end\":{\"line\":625,\"column\":15}}},\"loc\":{\"start\":{\"line\":625,\"column\":10},\"end\":{\"line\":625,\"column\":16}}},\"property\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"nfo\",\"loc\":{\"start\":{\"line\":625,\"column\":17},\"end\":{\"line\":625,\"column\":20}}},\"property\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":625,\"column\":21},\"end\":{\"line\":625,\"column\":22}}},\"loc\":{\"start\":{\"line\":625,\"column\":17},\"end\":{\"line\":625,\"column\":23}}},\"loc\":{\"start\":{\"line\":625,\"column\":10},\"end\":{\"line\":625,\"column\":24}}},\"loc\":{\"start\":{\"line\":625,\"column\":6},\"end\":{\"line\":625,\"column\":24}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":625,\"column\":2},\"end\":{\"line\":625,\"column\":25}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":626,\"column\":9},\"end\":{\"line\":626,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":626,\"column\":15},\"end\":{\"line\":626,\"column\":30}}},\"loc\":{\"start\":{\"line\":626,\"column\":9},\"end\":{\"line\":626,\"column\":30}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"k\",\"loc\":{\"start\":{\"line\":626,\"column\":31},\"end\":{\"line\":626,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"v\",\"loc\":{\"start\":{\"line\":626,\"column\":33},\"end\":{\"line\":626,\"column\":34}}}],\"loc\":{\"start\":{\"line\":626,\"column\":9},\"end\":{\"line\":626,\"column\":35}}},\"loc\":{\"start\":{\"line\":626,\"column\":2},\"end\":{\"line\":626,\"column\":36}}}],\"loc\":{\"start\":{\"line\":621,\"column\":52},\"end\":{\"line\":627,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":621,\"column\":30},\"end\":{\"line\":627,\"column\":2}}},{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":627,\"column\":4},\"end\":{\"line\":627,\"column\":8}}},{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":627,\"column\":10},\"end\":{\"line\":627,\"column\":14}}}],\"loc\":{\"start\":{\"line\":621,\"column\":8},\"end\":{\"line\":627,\"column\":15}}},\"loc\":{\"start\":{\"line\":621,\"column\":1},\"end\":{\"line\":627,\"column\":16}}}],\"loc\":{\"start\":{\"line\":605,\"column\":34},\"end\":{\"line\":628,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":605,\"column\":12},\"end\":{\"line\":628,\"column\":1}}},\"loc\":{\"start\":{\"line\":605,\"column\":0},\"end\":{\"line\":628,\"column\":1}}},\"loc\":{\"start\":{\"line\":605,\"column\":0},\"end\":{\"line\":628,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":630,\"column\":0},\"end\":{\"line\":630,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"ipairs\",\"loc\":{\"start\":{\"line\":630,\"column\":4},\"end\":{\"line\":630,\"column\":10}}},\"loc\":{\"start\":{\"line\":630,\"column\":0},\"end\":{\"line\":630,\"column\":10}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"ipairs\",\"loc\":{\"start\":{\"line\":630,\"column\":22},\"end\":{\"line\":630,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":630,\"column\":29},\"end\":{\"line\":630,\"column\":34}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":632,\"column\":5},\"end\":{\"line\":632,\"column\":8}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":632,\"column\":11},\"end\":{\"line\":632,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"lookupMetaTable\",\"loc\":{\"start\":{\"line\":632,\"column\":17},\"end\":{\"line\":632,\"column\":32}}},\"loc\":{\"start\":{\"line\":632,\"column\":11},\"end\":{\"line\":632,\"column\":32}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":632,\"column\":33},\"end\":{\"line\":632,\"column\":38}}},{\"type\":\"Literal\",\"value\":\"__ipairs\",\"raw\":\"\\\"__ipairs\\\"\",\"loc\":{\"start\":{\"line\":632,\"column\":40},\"end\":{\"line\":632,\"column\":50}}}],\"loc\":{\"start\":{\"line\":632,\"column\":11},\"end\":{\"line\":632,\"column\":51}}},\"loc\":{\"start\":{\"line\":632,\"column\":5},\"end\":{\"line\":632,\"column\":51}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":632,\"column\":1},\"end\":{\"line\":632,\"column\":52}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":633,\"column\":6},\"end\":{\"line\":633,\"column\":9}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":633,\"column\":14},\"end\":{\"line\":633,\"column\":18}}},\"loc\":{\"start\":{\"line\":633,\"column\":6},\"end\":{\"line\":633,\"column\":18}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"mtf\",\"loc\":{\"start\":{\"line\":633,\"column\":28},\"end\":{\"line\":633,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":633,\"column\":32},\"end\":{\"line\":633,\"column\":37}}}],\"loc\":{\"start\":{\"line\":633,\"column\":28},\"end\":{\"line\":633,\"column\":38}}},\"loc\":{\"start\":{\"line\":633,\"column\":21},\"end\":{\"line\":633,\"column\":39}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":633,\"column\":1},\"end\":{\"line\":633,\"column\":39}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":635,\"column\":8},\"end\":{\"line\":635,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":635,\"column\":14},\"end\":{\"line\":635,\"column\":29}}},\"loc\":{\"start\":{\"line\":635,\"column\":8},\"end\":{\"line\":635,\"column\":29}}},\"arguments\":[{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"ipairsitr\",\"loc\":{\"start\":{\"line\":635,\"column\":39},\"end\":{\"line\":635,\"column\":48}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":635,\"column\":49},\"end\":{\"line\":635,\"column\":54}}},{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":635,\"column\":56},\"end\":{\"line\":635,\"column\":59}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":636,\"column\":2},\"end\":{\"line\":636,\"column\":5}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":636,\"column\":8},\"end\":{\"line\":636,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":636,\"column\":14},\"end\":{\"line\":636,\"column\":15}}},\"loc\":{\"start\":{\"line\":636,\"column\":8},\"end\":{\"line\":636,\"column\":15}}},\"loc\":{\"start\":{\"line\":636,\"column\":2},\"end\":{\"line\":636,\"column\":15}}},\"loc\":{\"start\":{\"line\":636,\"column\":2},\"end\":{\"line\":636,\"column\":16}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":637,\"column\":7},\"end\":{\"line\":637,\"column\":12}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isJSArray\",\"loc\":{\"start\":{\"line\":637,\"column\":13},\"end\":{\"line\":637,\"column\":22}}},\"loc\":{\"start\":{\"line\":637,\"column\":7},\"end\":{\"line\":637,\"column\":22}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":637,\"column\":23},\"end\":{\"line\":637,\"column\":28}}}],\"loc\":{\"start\":{\"line\":637,\"column\":7},\"end\":{\"line\":637,\"column\":29}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":638,\"column\":8},\"end\":{\"line\":638,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":638,\"column\":14},\"end\":{\"line\":638,\"column\":20}}},\"loc\":{\"start\":{\"line\":638,\"column\":8},\"end\":{\"line\":638,\"column\":20}}},\"right\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":638,\"column\":23},\"end\":{\"line\":638,\"column\":26}}},\"loc\":{\"start\":{\"line\":638,\"column\":8},\"end\":{\"line\":638,\"column\":26}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":638,\"column\":36},\"end\":{\"line\":638,\"column\":40}}},\"loc\":{\"start\":{\"line\":638,\"column\":29},\"end\":{\"line\":638,\"column\":41}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":638,\"column\":3},\"end\":{\"line\":638,\"column\":41}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":639,\"column\":10},\"end\":{\"line\":639,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":639,\"column\":16},\"end\":{\"line\":639,\"column\":31}}},\"loc\":{\"start\":{\"line\":639,\"column\":10},\"end\":{\"line\":639,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":639,\"column\":32},\"end\":{\"line\":639,\"column\":35}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":639,\"column\":37},\"end\":{\"line\":639,\"column\":42}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":639,\"column\":43},\"end\":{\"line\":639,\"column\":46}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":639,\"column\":47},\"end\":{\"line\":639,\"column\":48}}},\"loc\":{\"start\":{\"line\":639,\"column\":43},\"end\":{\"line\":639,\"column\":48}}},\"loc\":{\"start\":{\"line\":639,\"column\":37},\"end\":{\"line\":639,\"column\":49}}}],\"loc\":{\"start\":{\"line\":639,\"column\":10},\"end\":{\"line\":639,\"column\":50}}},\"loc\":{\"start\":{\"line\":639,\"column\":3},\"end\":{\"line\":639,\"column\":51}}}],\"loc\":{\"start\":{\"line\":637,\"column\":32},\"end\":{\"line\":640,\"column\":3}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":640,\"column\":14},\"end\":{\"line\":640,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":640,\"column\":20},\"end\":{\"line\":640,\"column\":27}}},\"loc\":{\"start\":{\"line\":640,\"column\":14},\"end\":{\"line\":640,\"column\":27}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":640,\"column\":28},\"end\":{\"line\":640,\"column\":33}}}],\"loc\":{\"start\":{\"line\":640,\"column\":14},\"end\":{\"line\":640,\"column\":34}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":641,\"column\":8},\"end\":{\"line\":641,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":641,\"column\":14},\"end\":{\"line\":641,\"column\":21}}},\"loc\":{\"start\":{\"line\":641,\"column\":8},\"end\":{\"line\":641,\"column\":21}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":641,\"column\":22},\"end\":{\"line\":641,\"column\":25}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":641,\"column\":26},\"end\":{\"line\":641,\"column\":27}}},\"loc\":{\"start\":{\"line\":641,\"column\":22},\"end\":{\"line\":641,\"column\":27}}},\"loc\":{\"start\":{\"line\":641,\"column\":8},\"end\":{\"line\":641,\"column\":28}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":641,\"column\":33},\"end\":{\"line\":641,\"column\":37}}},\"loc\":{\"start\":{\"line\":641,\"column\":8},\"end\":{\"line\":641,\"column\":37}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":641,\"column\":41},\"end\":{\"line\":641,\"column\":46}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":641,\"column\":47},\"end\":{\"line\":641,\"column\":54}}},\"loc\":{\"start\":{\"line\":641,\"column\":41},\"end\":{\"line\":641,\"column\":54}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":641,\"column\":55},\"end\":{\"line\":641,\"column\":58}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":641,\"column\":59},\"end\":{\"line\":641,\"column\":60}}},\"loc\":{\"start\":{\"line\":641,\"column\":55},\"end\":{\"line\":641,\"column\":60}}},\"loc\":{\"start\":{\"line\":641,\"column\":41},\"end\":{\"line\":641,\"column\":61}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":641,\"column\":66},\"end\":{\"line\":641,\"column\":75}}},\"loc\":{\"start\":{\"line\":641,\"column\":41},\"end\":{\"line\":641,\"column\":75}}},\"loc\":{\"start\":{\"line\":641,\"column\":8},\"end\":{\"line\":641,\"column\":75}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":641,\"column\":85},\"end\":{\"line\":641,\"column\":89}}},\"loc\":{\"start\":{\"line\":641,\"column\":78},\"end\":{\"line\":641,\"column\":90}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":641,\"column\":3},\"end\":{\"line\":641,\"column\":90}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":642,\"column\":10},\"end\":{\"line\":642,\"column\":15}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":642,\"column\":16},\"end\":{\"line\":642,\"column\":31}}},\"loc\":{\"start\":{\"line\":642,\"column\":10},\"end\":{\"line\":642,\"column\":31}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":642,\"column\":32},\"end\":{\"line\":642,\"column\":35}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":642,\"column\":37},\"end\":{\"line\":642,\"column\":42}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":642,\"column\":43},\"end\":{\"line\":642,\"column\":50}}},\"loc\":{\"start\":{\"line\":642,\"column\":37},\"end\":{\"line\":642,\"column\":50}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":642,\"column\":51},\"end\":{\"line\":642,\"column\":54}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":642,\"column\":55},\"end\":{\"line\":642,\"column\":56}}},\"loc\":{\"start\":{\"line\":642,\"column\":51},\"end\":{\"line\":642,\"column\":56}}},\"loc\":{\"start\":{\"line\":642,\"column\":37},\"end\":{\"line\":642,\"column\":57}}}],\"loc\":{\"start\":{\"line\":642,\"column\":10},\"end\":{\"line\":642,\"column\":58}}},\"loc\":{\"start\":{\"line\":642,\"column\":3},\"end\":{\"line\":642,\"column\":59}}}],\"loc\":{\"start\":{\"line\":640,\"column\":37},\"end\":{\"line\":643,\"column\":3}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":644,\"column\":10},\"end\":{\"line\":644,\"column\":15}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":644,\"column\":16},\"end\":{\"line\":644,\"column\":19}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":644,\"column\":20},\"end\":{\"line\":644,\"column\":21}}},\"loc\":{\"start\":{\"line\":644,\"column\":16},\"end\":{\"line\":644,\"column\":21}}},\"loc\":{\"start\":{\"line\":644,\"column\":10},\"end\":{\"line\":644,\"column\":22}}},\"loc\":{\"start\":{\"line\":644,\"column\":3},\"end\":{\"line\":644,\"column\":23}}}],\"loc\":{\"start\":{\"line\":643,\"column\":9},\"end\":{\"line\":645,\"column\":3}}},\"loc\":{\"start\":{\"line\":640,\"column\":9},\"end\":{\"line\":645,\"column\":3}}},\"loc\":{\"start\":{\"line\":637,\"column\":2},\"end\":{\"line\":645,\"column\":3}}}],\"loc\":{\"start\":{\"line\":635,\"column\":61},\"end\":{\"line\":646,\"column\":2}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":635,\"column\":30},\"end\":{\"line\":646,\"column\":2}}},{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":646,\"column\":4},\"end\":{\"line\":646,\"column\":9}}},{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":646,\"column\":11},\"end\":{\"line\":646,\"column\":12}}}],\"loc\":{\"start\":{\"line\":635,\"column\":8},\"end\":{\"line\":646,\"column\":13}}},\"loc\":{\"start\":{\"line\":635,\"column\":1},\"end\":{\"line\":646,\"column\":14}}}],\"loc\":{\"start\":{\"line\":630,\"column\":36},\"end\":{\"line\":647,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":630,\"column\":13},\"end\":{\"line\":647,\"column\":1}}},\"loc\":{\"start\":{\"line\":630,\"column\":0},\"end\":{\"line\":647,\"column\":1}}},\"loc\":{\"start\":{\"line\":630,\"column\":0},\"end\":{\"line\":647,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":649,\"column\":0},\"end\":{\"line\":649,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"next\",\"loc\":{\"start\":{\"line\":649,\"column\":4},\"end\":{\"line\":649,\"column\":8}}},\"loc\":{\"start\":{\"line\":649,\"column\":0},\"end\":{\"line\":649,\"column\":8}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"next\",\"loc\":{\"start\":{\"line\":649,\"column\":20},\"end\":{\"line\":649,\"column\":24}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":649,\"column\":25},\"end\":{\"line\":649,\"column\":30}}},{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":649,\"column\":32},\"end\":{\"line\":649,\"column\":35}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":650,\"column\":6},\"end\":{\"line\":650,\"column\":11}}},\"property\":{\"type\":\"Identifier\",\"name\":\"isTable\",\"loc\":{\"start\":{\"line\":650,\"column\":12},\"end\":{\"line\":650,\"column\":19}}},\"loc\":{\"start\":{\"line\":650,\"column\":6},\"end\":{\"line\":650,\"column\":19}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":650,\"column\":20},\"end\":{\"line\":650,\"column\":25}}}],\"loc\":{\"start\":{\"line\":650,\"column\":6},\"end\":{\"line\":650,\"column\":26}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":651,\"column\":6},\"end\":{\"line\":651,\"column\":10}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":651,\"column\":13},\"end\":{\"line\":651,\"column\":15}}},\"loc\":{\"start\":{\"line\":651,\"column\":6},\"end\":{\"line\":651,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":651,\"column\":2},\"end\":{\"line\":651,\"column\":16}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":652,\"column\":12},\"end\":{\"line\":652,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":652,\"column\":16},\"end\":{\"line\":652,\"column\":17}}},\"loc\":{\"start\":{\"line\":652,\"column\":12},\"end\":{\"line\":652,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":652,\"column\":8},\"end\":{\"line\":652,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":652,\"column\":19},\"end\":{\"line\":652,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":652,\"column\":23},\"end\":{\"line\":652,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":652,\"column\":29},\"end\":{\"line\":652,\"column\":36}}},\"loc\":{\"start\":{\"line\":652,\"column\":23},\"end\":{\"line\":652,\"column\":36}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":652,\"column\":37},\"end\":{\"line\":652,\"column\":43}}},\"loc\":{\"start\":{\"line\":652,\"column\":23},\"end\":{\"line\":652,\"column\":43}}},\"loc\":{\"start\":{\"line\":652,\"column\":19},\"end\":{\"line\":652,\"column\":43}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":652,\"column\":47},\"end\":{\"line\":652,\"column\":48}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":652,\"column\":45},\"end\":{\"line\":652,\"column\":48}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":652,\"column\":51},\"end\":{\"line\":652,\"column\":55}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":652,\"column\":56},\"end\":{\"line\":652,\"column\":60}}},\"loc\":{\"start\":{\"line\":652,\"column\":51},\"end\":{\"line\":652,\"column\":60}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":652,\"column\":62},\"end\":{\"line\":652,\"column\":63}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":652,\"column\":66},\"end\":{\"line\":652,\"column\":67}}},\"loc\":{\"start\":{\"line\":652,\"column\":62},\"end\":{\"line\":652,\"column\":67}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":652,\"column\":69},\"end\":{\"line\":652,\"column\":74}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":652,\"column\":75},\"end\":{\"line\":652,\"column\":82}}},\"loc\":{\"start\":{\"line\":652,\"column\":69},\"end\":{\"line\":652,\"column\":82}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":652,\"column\":83},\"end\":{\"line\":652,\"column\":84}}},\"loc\":{\"start\":{\"line\":652,\"column\":69},\"end\":{\"line\":652,\"column\":85}}}],\"loc\":{\"start\":{\"line\":652,\"column\":61},\"end\":{\"line\":652,\"column\":86}}}],\"loc\":{\"start\":{\"line\":652,\"column\":51},\"end\":{\"line\":652,\"column\":87}}},\"loc\":{\"start\":{\"line\":652,\"column\":51},\"end\":{\"line\":652,\"column\":88}}},\"loc\":{\"start\":{\"line\":652,\"column\":2},\"end\":{\"line\":652,\"column\":88}}},{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"tidx\",\"loc\":{\"start\":{\"line\":653,\"column\":12},\"end\":{\"line\":653,\"column\":16}}},\"init\":null,\"loc\":{\"start\":{\"line\":653,\"column\":12},\"end\":{\"line\":653,\"column\":16}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":653,\"column\":8},\"end\":{\"line\":653,\"column\":16}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":653,\"column\":20},\"end\":{\"line\":653,\"column\":25}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":653,\"column\":26},\"end\":{\"line\":653,\"column\":30}}},\"loc\":{\"start\":{\"line\":653,\"column\":20},\"end\":{\"line\":653,\"column\":30}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":653,\"column\":33},\"end\":{\"line\":653,\"column\":37}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":653,\"column\":38},\"end\":{\"line\":653,\"column\":42}}},\"loc\":{\"start\":{\"line\":653,\"column\":33},\"end\":{\"line\":653,\"column\":42}}},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"Identifier\",\"name\":\"tidx\",\"loc\":{\"start\":{\"line\":653,\"column\":44},\"end\":{\"line\":653,\"column\":48}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":653,\"column\":50},\"end\":{\"line\":653,\"column\":55}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":653,\"column\":56},\"end\":{\"line\":653,\"column\":60}}},\"loc\":{\"start\":{\"line\":653,\"column\":50},\"end\":{\"line\":653,\"column\":60}}},\"property\":{\"type\":\"Identifier\",\"name\":\"tidx\",\"loc\":{\"start\":{\"line\":653,\"column\":61},\"end\":{\"line\":653,\"column\":65}}},\"loc\":{\"start\":{\"line\":653,\"column\":50},\"end\":{\"line\":653,\"column\":66}}}],\"loc\":{\"start\":{\"line\":653,\"column\":43},\"end\":{\"line\":653,\"column\":67}}}],\"loc\":{\"start\":{\"line\":653,\"column\":33},\"end\":{\"line\":653,\"column\":68}}},\"loc\":{\"start\":{\"line\":653,\"column\":33},\"end\":{\"line\":653,\"column\":69}}},\"each\":false,\"loc\":{\"start\":{\"line\":653,\"column\":2},\"end\":{\"line\":653,\"column\":69}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"trigger\",\"loc\":{\"start\":{\"line\":654,\"column\":6},\"end\":{\"line\":654,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":654,\"column\":16},\"end\":{\"line\":654,\"column\":21}}},\"loc\":{\"start\":{\"line\":654,\"column\":6},\"end\":{\"line\":654,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":654,\"column\":2},\"end\":{\"line\":654,\"column\":22}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":655,\"column\":12},\"end\":{\"line\":655,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":655,\"column\":16},\"end\":{\"line\":655,\"column\":17}}},\"loc\":{\"start\":{\"line\":655,\"column\":12},\"end\":{\"line\":655,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":655,\"column\":8},\"end\":{\"line\":655,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":655,\"column\":19},\"end\":{\"line\":655,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":655,\"column\":23},\"end\":{\"line\":655,\"column\":27}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":655,\"column\":28},\"end\":{\"line\":655,\"column\":34}}},\"loc\":{\"start\":{\"line\":655,\"column\":23},\"end\":{\"line\":655,\"column\":34}}},\"loc\":{\"start\":{\"line\":655,\"column\":19},\"end\":{\"line\":655,\"column\":34}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":655,\"column\":38},\"end\":{\"line\":655,\"column\":39}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":655,\"column\":36},\"end\":{\"line\":655,\"column\":39}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"itm\",\"loc\":{\"start\":{\"line\":656,\"column\":7},\"end\":{\"line\":656,\"column\":10}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"list\",\"loc\":{\"start\":{\"line\":656,\"column\":13},\"end\":{\"line\":656,\"column\":17}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":656,\"column\":18},\"end\":{\"line\":656,\"column\":19}}},\"loc\":{\"start\":{\"line\":656,\"column\":13},\"end\":{\"line\":656,\"column\":20}}},\"loc\":{\"start\":{\"line\":656,\"column\":7},\"end\":{\"line\":656,\"column\":20}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":656,\"column\":3},\"end\":{\"line\":656,\"column\":21}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":657,\"column\":8},\"end\":{\"line\":657,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":657,\"column\":16},\"end\":{\"line\":657,\"column\":20}}},\"loc\":{\"start\":{\"line\":657,\"column\":8},\"end\":{\"line\":657,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":657,\"column\":24},\"end\":{\"line\":657,\"column\":27}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":657,\"column\":32},\"end\":{\"line\":657,\"column\":41}}},\"loc\":{\"start\":{\"line\":657,\"column\":24},\"end\":{\"line\":657,\"column\":41}}},\"loc\":{\"start\":{\"line\":657,\"column\":8},\"end\":{\"line\":657,\"column\":41}}},\"right\":{\"type\":\"Identifier\",\"name\":\"trigger\",\"loc\":{\"start\":{\"line\":657,\"column\":45},\"end\":{\"line\":657,\"column\":52}}},\"loc\":{\"start\":{\"line\":657,\"column\":8},\"end\":{\"line\":657,\"column\":52}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"itm\",\"loc\":{\"start\":{\"line\":658,\"column\":9},\"end\":{\"line\":658,\"column\":12}}},\"property\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":658,\"column\":13},\"end\":{\"line\":658,\"column\":14}}},\"loc\":{\"start\":{\"line\":658,\"column\":9},\"end\":{\"line\":658,\"column\":15}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":658,\"column\":20},\"end\":{\"line\":658,\"column\":29}}},\"loc\":{\"start\":{\"line\":658,\"column\":9},\"end\":{\"line\":658,\"column\":29}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"itm\",\"loc\":{\"start\":{\"line\":658,\"column\":33},\"end\":{\"line\":658,\"column\":36}}},\"property\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":658,\"column\":37},\"end\":{\"line\":658,\"column\":38}}},\"loc\":{\"start\":{\"line\":658,\"column\":33},\"end\":{\"line\":658,\"column\":39}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":658,\"column\":44},\"end\":{\"line\":658,\"column\":48}}},\"loc\":{\"start\":{\"line\":658,\"column\":33},\"end\":{\"line\":658,\"column\":48}}},\"loc\":{\"start\":{\"line\":658,\"column\":9},\"end\":{\"line\":658,\"column\":48}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":659,\"column\":12},\"end\":{\"line\":659,\"column\":17}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":659,\"column\":18},\"end\":{\"line\":659,\"column\":33}}},\"loc\":{\"start\":{\"line\":659,\"column\":12},\"end\":{\"line\":659,\"column\":33}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"itm\",\"loc\":{\"start\":{\"line\":659,\"column\":34},\"end\":{\"line\":659,\"column\":37}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":659,\"column\":38},\"end\":{\"line\":659,\"column\":39}}},\"loc\":{\"start\":{\"line\":659,\"column\":34},\"end\":{\"line\":659,\"column\":40}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"itm\",\"loc\":{\"start\":{\"line\":659,\"column\":42},\"end\":{\"line\":659,\"column\":45}}},\"property\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":659,\"column\":46},\"end\":{\"line\":659,\"column\":47}}},\"loc\":{\"start\":{\"line\":659,\"column\":42},\"end\":{\"line\":659,\"column\":48}}}],\"loc\":{\"start\":{\"line\":659,\"column\":12},\"end\":{\"line\":659,\"column\":49}}},\"loc\":{\"start\":{\"line\":659,\"column\":5},\"end\":{\"line\":659,\"column\":50}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":658,\"column\":4},\"end\":{\"line\":659,\"column\":50}}}],\"loc\":{\"start\":{\"line\":657,\"column\":55},\"end\":{\"line\":660,\"column\":4}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":657,\"column\":3},\"end\":{\"line\":660,\"column\":4}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":661,\"column\":8},\"end\":{\"line\":661,\"column\":11}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"itm\",\"loc\":{\"start\":{\"line\":661,\"column\":16},\"end\":{\"line\":661,\"column\":19}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":661,\"column\":20},\"end\":{\"line\":661,\"column\":21}}},\"loc\":{\"start\":{\"line\":661,\"column\":16},\"end\":{\"line\":661,\"column\":22}}},\"loc\":{\"start\":{\"line\":661,\"column\":8},\"end\":{\"line\":661,\"column\":22}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"trigger\",\"loc\":{\"start\":{\"line\":661,\"column\":25},\"end\":{\"line\":661,\"column\":32}}},\"right\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":661,\"column\":35},\"end\":{\"line\":661,\"column\":39}}},\"loc\":{\"start\":{\"line\":661,\"column\":25},\"end\":{\"line\":661,\"column\":39}}},\"loc\":{\"start\":{\"line\":661,\"column\":25},\"end\":{\"line\":661,\"column\":40}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":661,\"column\":3},\"end\":{\"line\":661,\"column\":40}}}],\"loc\":{\"start\":{\"line\":655,\"column\":42},\"end\":{\"line\":662,\"column\":3}}},\"loc\":{\"start\":{\"line\":655,\"column\":2},\"end\":{\"line\":662,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":664,\"column\":9},\"end\":{\"line\":664,\"column\":13}}},\"loc\":{\"start\":{\"line\":664,\"column\":2},\"end\":{\"line\":664,\"column\":14}}}],\"loc\":{\"start\":{\"line\":650,\"column\":29},\"end\":{\"line\":665,\"column\":2}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"listk\",\"loc\":{\"start\":{\"line\":666,\"column\":6},\"end\":{\"line\":666,\"column\":11}}},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":666,\"column\":14},\"end\":{\"line\":666,\"column\":20}}},\"property\":{\"type\":\"Identifier\",\"name\":\"keys\",\"loc\":{\"start\":{\"line\":666,\"column\":21},\"end\":{\"line\":666,\"column\":25}}},\"loc\":{\"start\":{\"line\":666,\"column\":14},\"end\":{\"line\":666,\"column\":25}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":666,\"column\":26},\"end\":{\"line\":666,\"column\":31}}}],\"loc\":{\"start\":{\"line\":666,\"column\":14},\"end\":{\"line\":666,\"column\":32}}},\"loc\":{\"start\":{\"line\":666,\"column\":6},\"end\":{\"line\":666,\"column\":32}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":666,\"column\":2},\"end\":{\"line\":666,\"column\":33}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"trigger\",\"loc\":{\"start\":{\"line\":667,\"column\":6},\"end\":{\"line\":667,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":667,\"column\":16},\"end\":{\"line\":667,\"column\":21}}},\"loc\":{\"start\":{\"line\":667,\"column\":6},\"end\":{\"line\":667,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":667,\"column\":2},\"end\":{\"line\":667,\"column\":22}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":668,\"column\":12},\"end\":{\"line\":668,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":668,\"column\":16},\"end\":{\"line\":668,\"column\":17}}},\"loc\":{\"start\":{\"line\":668,\"column\":12},\"end\":{\"line\":668,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":668,\"column\":8},\"end\":{\"line\":668,\"column\":17}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":668,\"column\":19},\"end\":{\"line\":668,\"column\":20}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"listk\",\"loc\":{\"start\":{\"line\":668,\"column\":23},\"end\":{\"line\":668,\"column\":28}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":668,\"column\":29},\"end\":{\"line\":668,\"column\":35}}},\"loc\":{\"start\":{\"line\":668,\"column\":23},\"end\":{\"line\":668,\"column\":35}}},\"loc\":{\"start\":{\"line\":668,\"column\":19},\"end\":{\"line\":668,\"column\":35}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":668,\"column\":39},\"end\":{\"line\":668,\"column\":40}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":668,\"column\":37},\"end\":{\"line\":668,\"column\":40}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":669,\"column\":7},\"end\":{\"line\":669,\"column\":10}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"listk\",\"loc\":{\"start\":{\"line\":669,\"column\":13},\"end\":{\"line\":669,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":669,\"column\":19},\"end\":{\"line\":669,\"column\":20}}},\"loc\":{\"start\":{\"line\":669,\"column\":13},\"end\":{\"line\":669,\"column\":21}}},\"loc\":{\"start\":{\"line\":669,\"column\":7},\"end\":{\"line\":669,\"column\":21}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":669,\"column\":3},\"end\":{\"line\":669,\"column\":22}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":670,\"column\":7},\"end\":{\"line\":670,\"column\":11}}},\"init\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":670,\"column\":14},\"end\":{\"line\":670,\"column\":17}}},\"loc\":{\"start\":{\"line\":670,\"column\":7},\"end\":{\"line\":670,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":670,\"column\":3},\"end\":{\"line\":670,\"column\":18}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":671,\"column\":15},\"end\":{\"line\":671,\"column\":19}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":671,\"column\":8},\"end\":{\"line\":671,\"column\":19}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":671,\"column\":23},\"end\":{\"line\":671,\"column\":31}}},\"loc\":{\"start\":{\"line\":671,\"column\":8},\"end\":{\"line\":671,\"column\":31}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":671,\"column\":34},\"end\":{\"line\":671,\"column\":38}}},\"right\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":671,\"column\":41},\"end\":{\"line\":671,\"column\":45}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":671,\"column\":48},\"end\":{\"line\":671,\"column\":49}}},\"loc\":{\"start\":{\"line\":671,\"column\":41},\"end\":{\"line\":671,\"column\":49}}},\"loc\":{\"start\":{\"line\":671,\"column\":34},\"end\":{\"line\":671,\"column\":49}}},\"loc\":{\"start\":{\"line\":671,\"column\":34},\"end\":{\"line\":671,\"column\":50}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":671,\"column\":3},\"end\":{\"line\":671,\"column\":50}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":672,\"column\":8},\"end\":{\"line\":672,\"column\":11}}},\"right\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":672,\"column\":16},\"end\":{\"line\":672,\"column\":20}}},\"loc\":{\"start\":{\"line\":672,\"column\":8},\"end\":{\"line\":672,\"column\":20}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":672,\"column\":24},\"end\":{\"line\":672,\"column\":27}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":672,\"column\":32},\"end\":{\"line\":672,\"column\":41}}},\"loc\":{\"start\":{\"line\":672,\"column\":24},\"end\":{\"line\":672,\"column\":41}}},\"loc\":{\"start\":{\"line\":672,\"column\":8},\"end\":{\"line\":672,\"column\":41}}},\"right\":{\"type\":\"Identifier\",\"name\":\"trigger\",\"loc\":{\"start\":{\"line\":672,\"column\":45},\"end\":{\"line\":672,\"column\":52}}},\"loc\":{\"start\":{\"line\":672,\"column\":8},\"end\":{\"line\":672,\"column\":52}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":672,\"column\":62},\"end\":{\"line\":672,\"column\":67}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":672,\"column\":68},\"end\":{\"line\":672,\"column\":83}}},\"loc\":{\"start\":{\"line\":672,\"column\":62},\"end\":{\"line\":672,\"column\":83}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":672,\"column\":84},\"end\":{\"line\":672,\"column\":87}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":672,\"column\":89},\"end\":{\"line\":672,\"column\":94}}},\"property\":{\"type\":\"Identifier\",\"name\":\"sidx\",\"loc\":{\"start\":{\"line\":672,\"column\":95},\"end\":{\"line\":672,\"column\":99}}},\"loc\":{\"start\":{\"line\":672,\"column\":89},\"end\":{\"line\":672,\"column\":100}}}],\"loc\":{\"start\":{\"line\":672,\"column\":62},\"end\":{\"line\":672,\"column\":101}}},\"loc\":{\"start\":{\"line\":672,\"column\":55},\"end\":{\"line\":672,\"column\":102}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":672,\"column\":3},\"end\":{\"line\":672,\"column\":102}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"cur\",\"loc\":{\"start\":{\"line\":673,\"column\":8},\"end\":{\"line\":673,\"column\":11}}},\"right\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":673,\"column\":16},\"end\":{\"line\":673,\"column\":19}}},\"loc\":{\"start\":{\"line\":673,\"column\":8},\"end\":{\"line\":673,\"column\":19}}},\"consequent\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"trigger\",\"loc\":{\"start\":{\"line\":673,\"column\":22},\"end\":{\"line\":673,\"column\":29}}},\"right\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":673,\"column\":32},\"end\":{\"line\":673,\"column\":36}}},\"loc\":{\"start\":{\"line\":673,\"column\":22},\"end\":{\"line\":673,\"column\":36}}},\"loc\":{\"start\":{\"line\":673,\"column\":22},\"end\":{\"line\":673,\"column\":37}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":673,\"column\":3},\"end\":{\"line\":673,\"column\":37}}}],\"loc\":{\"start\":{\"line\":668,\"column\":43},\"end\":{\"line\":674,\"column\":3}}},\"loc\":{\"start\":{\"line\":668,\"column\":2},\"end\":{\"line\":674,\"column\":3}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":null,\"raw\":\"null\",\"loc\":{\"start\":{\"line\":675,\"column\":9},\"end\":{\"line\":675,\"column\":13}}},\"loc\":{\"start\":{\"line\":675,\"column\":2},\"end\":{\"line\":675,\"column\":14}}}],\"loc\":{\"start\":{\"line\":665,\"column\":8},\"end\":{\"line\":676,\"column\":2}}},\"loc\":{\"start\":{\"line\":650,\"column\":1},\"end\":{\"line\":676,\"column\":2}}}],\"loc\":{\"start\":{\"line\":649,\"column\":37},\"end\":{\"line\":677,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":649,\"column\":11},\"end\":{\"line\":677,\"column\":1}}},\"loc\":{\"start\":{\"line\":649,\"column\":0},\"end\":{\"line\":677,\"column\":1}}},\"loc\":{\"start\":{\"line\":649,\"column\":0},\"end\":{\"line\":677,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":679,\"column\":0},\"end\":{\"line\":679,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"print\",\"loc\":{\"start\":{\"line\":679,\"column\":4},\"end\":{\"line\":679,\"column\":9}}},\"loc\":{\"start\":{\"line\":679,\"column\":0},\"end\":{\"line\":679,\"column\":9}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"print\",\"loc\":{\"start\":{\"line\":679,\"column\":21},\"end\":{\"line\":679,\"column\":26}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"console\",\"loc\":{\"start\":{\"line\":679,\"column\":31},\"end\":{\"line\":679,\"column\":38}}},\"property\":{\"type\":\"Identifier\",\"name\":\"log\",\"loc\":{\"start\":{\"line\":679,\"column\":39},\"end\":{\"line\":679,\"column\":42}}},\"loc\":{\"start\":{\"line\":679,\"column\":31},\"end\":{\"line\":679,\"column\":42}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":679,\"column\":43},\"end\":{\"line\":679,\"column\":48}}},\"loc\":{\"start\":{\"line\":679,\"column\":31},\"end\":{\"line\":679,\"column\":48}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"console\",\"loc\":{\"start\":{\"line\":679,\"column\":49},\"end\":{\"line\":679,\"column\":56}}},{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":679,\"column\":58},\"end\":{\"line\":679,\"column\":67}}}],\"loc\":{\"start\":{\"line\":679,\"column\":31},\"end\":{\"line\":679,\"column\":68}}},\"loc\":{\"start\":{\"line\":679,\"column\":31},\"end\":{\"line\":679,\"column\":69}}}],\"loc\":{\"start\":{\"line\":679,\"column\":29},\"end\":{\"line\":679,\"column\":71}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":679,\"column\":12},\"end\":{\"line\":679,\"column\":71}}},\"loc\":{\"start\":{\"line\":679,\"column\":0},\"end\":{\"line\":679,\"column\":71}}},\"loc\":{\"start\":{\"line\":679,\"column\":0},\"end\":{\"line\":679,\"column\":72}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":680,\"column\":0},\"end\":{\"line\":680,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"pcall\",\"loc\":{\"start\":{\"line\":680,\"column\":4},\"end\":{\"line\":680,\"column\":9}}},\"loc\":{\"start\":{\"line\":680,\"column\":0},\"end\":{\"line\":680,\"column\":9}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":680,\"column\":12},\"end\":{\"line\":680,\"column\":16}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":680,\"column\":17},\"end\":{\"line\":680,\"column\":22}}},\"loc\":{\"start\":{\"line\":680,\"column\":12},\"end\":{\"line\":680,\"column\":22}}},\"property\":{\"type\":\"Identifier\",\"name\":\"pcall\",\"loc\":{\"start\":{\"line\":680,\"column\":23},\"end\":{\"line\":680,\"column\":28}}},\"loc\":{\"start\":{\"line\":680,\"column\":12},\"end\":{\"line\":680,\"column\":28}}},\"loc\":{\"start\":{\"line\":680,\"column\":0},\"end\":{\"line\":680,\"column\":28}}},\"loc\":{\"start\":{\"line\":680,\"column\":0},\"end\":{\"line\":680,\"column\":29}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":682,\"column\":0},\"end\":{\"line\":682,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"rawequals\",\"loc\":{\"start\":{\"line\":682,\"column\":4},\"end\":{\"line\":682,\"column\":13}}},\"loc\":{\"start\":{\"line\":682,\"column\":0},\"end\":{\"line\":682,\"column\":13}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"rawequals\",\"loc\":{\"start\":{\"line\":682,\"column\":25},\"end\":{\"line\":682,\"column\":34}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":682,\"column\":35},\"end\":{\"line\":682,\"column\":36}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":682,\"column\":37},\"end\":{\"line\":682,\"column\":38}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":682,\"column\":49},\"end\":{\"line\":682,\"column\":50}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":682,\"column\":54},\"end\":{\"line\":682,\"column\":55}}},\"loc\":{\"start\":{\"line\":682,\"column\":49},\"end\":{\"line\":682,\"column\":55}}},\"loc\":{\"start\":{\"line\":682,\"column\":42},\"end\":{\"line\":682,\"column\":56}}}],\"loc\":{\"start\":{\"line\":682,\"column\":40},\"end\":{\"line\":682,\"column\":58}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":682,\"column\":16},\"end\":{\"line\":682,\"column\":58}}},\"loc\":{\"start\":{\"line\":682,\"column\":0},\"end\":{\"line\":682,\"column\":58}}},\"loc\":{\"start\":{\"line\":682,\"column\":0},\"end\":{\"line\":682,\"column\":59}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":683,\"column\":0},\"end\":{\"line\":683,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"rawget\",\"loc\":{\"start\":{\"line\":683,\"column\":4},\"end\":{\"line\":683,\"column\":10}}},\"loc\":{\"start\":{\"line\":683,\"column\":0},\"end\":{\"line\":683,\"column\":10}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"rawget\",\"loc\":{\"start\":{\"line\":683,\"column\":22},\"end\":{\"line\":683,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":683,\"column\":29},\"end\":{\"line\":683,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":683,\"column\":36},\"end\":{\"line\":683,\"column\":40}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":684,\"column\":6},\"end\":{\"line\":684,\"column\":11}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":684,\"column\":23},\"end\":{\"line\":684,\"column\":31}}},\"loc\":{\"start\":{\"line\":684,\"column\":6},\"end\":{\"line\":684,\"column\":31}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":685,\"column\":14},\"end\":{\"line\":685,\"column\":18}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":685,\"column\":7},\"end\":{\"line\":685,\"column\":18}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":685,\"column\":22},\"end\":{\"line\":685,\"column\":30}}},\"loc\":{\"start\":{\"line\":685,\"column\":7},\"end\":{\"line\":685,\"column\":30}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":685,\"column\":40},\"end\":{\"line\":685,\"column\":45}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":685,\"column\":46},\"end\":{\"line\":685,\"column\":53}}},\"loc\":{\"start\":{\"line\":685,\"column\":40},\"end\":{\"line\":685,\"column\":53}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":685,\"column\":54},\"end\":{\"line\":685,\"column\":58}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":685,\"column\":61},\"end\":{\"line\":685,\"column\":62}}},\"loc\":{\"start\":{\"line\":685,\"column\":54},\"end\":{\"line\":685,\"column\":62}}},\"loc\":{\"start\":{\"line\":685,\"column\":40},\"end\":{\"line\":685,\"column\":63}}},\"loc\":{\"start\":{\"line\":685,\"column\":33},\"end\":{\"line\":685,\"column\":64}}},\"alternate\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":686,\"column\":14},\"end\":{\"line\":686,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":686,\"column\":20},\"end\":{\"line\":686,\"column\":24}}},\"loc\":{\"start\":{\"line\":686,\"column\":14},\"end\":{\"line\":686,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":686,\"column\":25},\"end\":{\"line\":686,\"column\":29}}},\"loc\":{\"start\":{\"line\":686,\"column\":14},\"end\":{\"line\":686,\"column\":30}}},\"loc\":{\"start\":{\"line\":686,\"column\":7},\"end\":{\"line\":686,\"column\":31}}},\"loc\":{\"start\":{\"line\":685,\"column\":2},\"end\":{\"line\":686,\"column\":31}}}],\"loc\":{\"start\":{\"line\":684,\"column\":34},\"end\":{\"line\":687,\"column\":2}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":684,\"column\":1},\"end\":{\"line\":687,\"column\":2}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":688,\"column\":8},\"end\":{\"line\":688,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":688,\"column\":14},\"end\":{\"line\":688,\"column\":18}}},\"loc\":{\"start\":{\"line\":688,\"column\":8},\"end\":{\"line\":688,\"column\":19}}},\"loc\":{\"start\":{\"line\":688,\"column\":1},\"end\":{\"line\":688,\"column\":20}}}],\"loc\":{\"start\":{\"line\":683,\"column\":42},\"end\":{\"line\":689,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":683,\"column\":13},\"end\":{\"line\":689,\"column\":1}}},\"loc\":{\"start\":{\"line\":683,\"column\":0},\"end\":{\"line\":689,\"column\":1}}},\"loc\":{\"start\":{\"line\":683,\"column\":0},\"end\":{\"line\":689,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":690,\"column\":0},\"end\":{\"line\":690,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"rawset\",\"loc\":{\"start\":{\"line\":690,\"column\":4},\"end\":{\"line\":690,\"column\":10}}},\"loc\":{\"start\":{\"line\":690,\"column\":0},\"end\":{\"line\":690,\"column\":10}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"rawset\",\"loc\":{\"start\":{\"line\":690,\"column\":22},\"end\":{\"line\":690,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":690,\"column\":29},\"end\":{\"line\":690,\"column\":34}}},{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":690,\"column\":36},\"end\":{\"line\":690,\"column\":40}}},{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":690,\"column\":42},\"end\":{\"line\":690,\"column\":45}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":691,\"column\":6},\"end\":{\"line\":691,\"column\":11}}},\"right\":{\"type\":\"Identifier\",\"name\":\"LuaTable\",\"loc\":{\"start\":{\"line\":691,\"column\":23},\"end\":{\"line\":691,\"column\":31}}},\"loc\":{\"start\":{\"line\":691,\"column\":6},\"end\":{\"line\":691,\"column\":31}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":692,\"column\":14},\"end\":{\"line\":692,\"column\":18}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":692,\"column\":7},\"end\":{\"line\":692,\"column\":18}}},\"right\":{\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\",\"loc\":{\"start\":{\"line\":692,\"column\":22},\"end\":{\"line\":692,\"column\":30}}},\"loc\":{\"start\":{\"line\":692,\"column\":7},\"end\":{\"line\":692,\"column\":30}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":692,\"column\":40},\"end\":{\"line\":692,\"column\":45}}},\"property\":{\"type\":\"Identifier\",\"name\":\"numeric\",\"loc\":{\"start\":{\"line\":692,\"column\":46},\"end\":{\"line\":692,\"column\":53}}},\"loc\":{\"start\":{\"line\":692,\"column\":40},\"end\":{\"line\":692,\"column\":53}}},\"property\":{\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":692,\"column\":54},\"end\":{\"line\":692,\"column\":58}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":692,\"column\":61},\"end\":{\"line\":692,\"column\":62}}},\"loc\":{\"start\":{\"line\":692,\"column\":54},\"end\":{\"line\":692,\"column\":62}}},\"loc\":{\"start\":{\"line\":692,\"column\":40},\"end\":{\"line\":692,\"column\":63}}},\"right\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":692,\"column\":66},\"end\":{\"line\":692,\"column\":69}}},\"loc\":{\"start\":{\"line\":692,\"column\":40},\"end\":{\"line\":692,\"column\":69}}},\"loc\":{\"start\":{\"line\":692,\"column\":33},\"end\":{\"line\":692,\"column\":70}}},\"alternate\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":693,\"column\":14},\"end\":{\"line\":693,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"hash\",\"loc\":{\"start\":{\"line\":693,\"column\":20},\"end\":{\"line\":693,\"column\":24}}},\"loc\":{\"start\":{\"line\":693,\"column\":14},\"end\":{\"line\":693,\"column\":24}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":693,\"column\":25},\"end\":{\"line\":693,\"column\":29}}},\"loc\":{\"start\":{\"line\":693,\"column\":14},\"end\":{\"line\":693,\"column\":30}}},\"right\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":693,\"column\":33},\"end\":{\"line\":693,\"column\":36}}},\"loc\":{\"start\":{\"line\":693,\"column\":14},\"end\":{\"line\":693,\"column\":36}}},\"loc\":{\"start\":{\"line\":693,\"column\":7},\"end\":{\"line\":693,\"column\":37}}},\"loc\":{\"start\":{\"line\":692,\"column\":2},\"end\":{\"line\":693,\"column\":37}}}],\"loc\":{\"start\":{\"line\":691,\"column\":34},\"end\":{\"line\":694,\"column\":2}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":691,\"column\":1},\"end\":{\"line\":694,\"column\":2}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":695,\"column\":8},\"end\":{\"line\":695,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"prop\",\"loc\":{\"start\":{\"line\":695,\"column\":14},\"end\":{\"line\":695,\"column\":18}}},\"loc\":{\"start\":{\"line\":695,\"column\":8},\"end\":{\"line\":695,\"column\":19}}},\"right\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":695,\"column\":22},\"end\":{\"line\":695,\"column\":25}}},\"loc\":{\"start\":{\"line\":695,\"column\":8},\"end\":{\"line\":695,\"column\":25}}},\"loc\":{\"start\":{\"line\":695,\"column\":1},\"end\":{\"line\":695,\"column\":26}}}],\"loc\":{\"start\":{\"line\":690,\"column\":47},\"end\":{\"line\":696,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":690,\"column\":13},\"end\":{\"line\":696,\"column\":1}}},\"loc\":{\"start\":{\"line\":690,\"column\":0},\"end\":{\"line\":696,\"column\":1}}},\"loc\":{\"start\":{\"line\":690,\"column\":0},\"end\":{\"line\":696,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":698,\"column\":0},\"end\":{\"line\":698,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"something\",\"loc\":{\"start\":{\"line\":698,\"column\":4},\"end\":{\"line\":698,\"column\":13}}},\"loc\":{\"start\":{\"line\":698,\"column\":0},\"end\":{\"line\":698,\"column\":13}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"something\",\"loc\":{\"start\":{\"line\":698,\"column\":25},\"end\":{\"line\":698,\"column\":34}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":698,\"column\":35},\"end\":{\"line\":698,\"column\":40}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"array\",\"loc\":{\"start\":{\"line\":699,\"column\":5},\"end\":{\"line\":699,\"column\":10}}},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[],\"loc\":{\"start\":{\"line\":699,\"column\":13},\"end\":{\"line\":699,\"column\":15}}},\"loc\":{\"start\":{\"line\":699,\"column\":5},\"end\":{\"line\":699,\"column\":15}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":699,\"column\":1},\"end\":{\"line\":699,\"column\":16}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":700,\"column\":5},\"end\":{\"line\":700,\"column\":8}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":700,\"column\":11},\"end\":{\"line\":700,\"column\":12}}},\"loc\":{\"start\":{\"line\":700,\"column\":5},\"end\":{\"line\":700,\"column\":12}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":700,\"column\":1},\"end\":{\"line\":700,\"column\":13}}},{\"type\":\"WhileStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":701,\"column\":9},\"end\":{\"line\":701,\"column\":14}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":701,\"column\":15},\"end\":{\"line\":701,\"column\":18}}},\"loc\":{\"start\":{\"line\":701,\"column\":9},\"end\":{\"line\":701,\"column\":19}}},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":701,\"column\":24},\"end\":{\"line\":701,\"column\":33}}},\"loc\":{\"start\":{\"line\":701,\"column\":9},\"end\":{\"line\":701,\"column\":33}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"array\",\"loc\":{\"start\":{\"line\":702,\"column\":2},\"end\":{\"line\":702,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"push\",\"loc\":{\"start\":{\"line\":702,\"column\":8},\"end\":{\"line\":702,\"column\":12}}},\"loc\":{\"start\":{\"line\":702,\"column\":2},\"end\":{\"line\":702,\"column\":12}}},\"arguments\":[{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"table\",\"loc\":{\"start\":{\"line\":702,\"column\":13},\"end\":{\"line\":702,\"column\":18}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":702,\"column\":19},\"end\":{\"line\":702,\"column\":22}}},\"loc\":{\"start\":{\"line\":702,\"column\":13},\"end\":{\"line\":702,\"column\":23}}}],\"loc\":{\"start\":{\"line\":702,\"column\":2},\"end\":{\"line\":702,\"column\":24}}},\"loc\":{\"start\":{\"line\":702,\"column\":2},\"end\":{\"line\":702,\"column\":25}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":703,\"column\":4},\"end\":{\"line\":703,\"column\":7}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":703,\"column\":2},\"end\":{\"line\":703,\"column\":7}}},\"loc\":{\"start\":{\"line\":703,\"column\":2},\"end\":{\"line\":703,\"column\":8}}}],\"loc\":{\"start\":{\"line\":701,\"column\":36},\"end\":{\"line\":704,\"column\":2}}},\"loc\":{\"start\":{\"line\":701,\"column\":1},\"end\":{\"line\":704,\"column\":2}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":705,\"column\":8},\"end\":{\"line\":705,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"makeMultiReturn\",\"loc\":{\"start\":{\"line\":705,\"column\":14},\"end\":{\"line\":705,\"column\":29}}},\"loc\":{\"start\":{\"line\":705,\"column\":8},\"end\":{\"line\":705,\"column\":29}}},\"property\":{\"type\":\"Identifier\",\"name\":\"apply\",\"loc\":{\"start\":{\"line\":705,\"column\":30},\"end\":{\"line\":705,\"column\":35}}},\"loc\":{\"start\":{\"line\":705,\"column\":8},\"end\":{\"line\":705,\"column\":35}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":705,\"column\":36},\"end\":{\"line\":705,\"column\":41}}},{\"type\":\"Identifier\",\"name\":\"array\",\"loc\":{\"start\":{\"line\":705,\"column\":43},\"end\":{\"line\":705,\"column\":48}}}],\"loc\":{\"start\":{\"line\":705,\"column\":8},\"end\":{\"line\":705,\"column\":49}}},\"loc\":{\"start\":{\"line\":705,\"column\":1},\"end\":{\"line\":705,\"column\":50}}}],\"loc\":{\"start\":{\"line\":698,\"column\":42},\"end\":{\"line\":706,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":698,\"column\":16},\"end\":{\"line\":706,\"column\":1}}},\"loc\":{\"start\":{\"line\":698,\"column\":0},\"end\":{\"line\":706,\"column\":1}}},\"loc\":{\"start\":{\"line\":698,\"column\":0},\"end\":{\"line\":706,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":707,\"column\":0},\"end\":{\"line\":707,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"math\",\"loc\":{\"start\":{\"line\":707,\"column\":4},\"end\":{\"line\":707,\"column\":8}}},\"loc\":{\"start\":{\"line\":707,\"column\":0},\"end\":{\"line\":707,\"column\":8}}},\"right\":{\"type\":\"Identifier\",\"name\":\"Math\",\"loc\":{\"start\":{\"line\":707,\"column\":11},\"end\":{\"line\":707,\"column\":15}}},\"loc\":{\"start\":{\"line\":707,\"column\":0},\"end\":{\"line\":707,\"column\":15}}},\"loc\":{\"start\":{\"line\":707,\"column\":0},\"end\":{\"line\":707,\"column\":16}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":709,\"column\":0},\"end\":{\"line\":709,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"setmetatable\",\"loc\":{\"start\":{\"line\":709,\"column\":4},\"end\":{\"line\":709,\"column\":16}}},\"loc\":{\"start\":{\"line\":709,\"column\":0},\"end\":{\"line\":709,\"column\":16}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"setmetatable\",\"loc\":{\"start\":{\"line\":709,\"column\":28},\"end\":{\"line\":709,\"column\":40}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"target\",\"loc\":{\"start\":{\"line\":709,\"column\":41},\"end\":{\"line\":709,\"column\":47}}},{\"type\":\"Identifier\",\"name\":\"meta\",\"loc\":{\"start\":{\"line\":709,\"column\":49},\"end\":{\"line\":709,\"column\":53}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"Object\",\"loc\":{\"start\":{\"line\":711,\"column\":1},\"end\":{\"line\":711,\"column\":7}}},\"property\":{\"type\":\"Identifier\",\"name\":\"defineProperty\",\"loc\":{\"start\":{\"line\":711,\"column\":8},\"end\":{\"line\":711,\"column\":22}}},\"loc\":{\"start\":{\"line\":711,\"column\":1},\"end\":{\"line\":711,\"column\":22}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"target\",\"loc\":{\"start\":{\"line\":711,\"column\":23},\"end\":{\"line\":711,\"column\":29}}},{\"type\":\"Literal\",\"value\":\"__metatable\",\"raw\":\"\\\"__metatable\\\"\",\"loc\":{\"start\":{\"line\":711,\"column\":31},\"end\":{\"line\":711,\"column\":44}}},{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"value\",\"loc\":{\"start\":{\"line\":711,\"column\":47},\"end\":{\"line\":711,\"column\":52}}},\"value\":{\"type\":\"Identifier\",\"name\":\"meta\",\"loc\":{\"start\":{\"line\":711,\"column\":54},\"end\":{\"line\":711,\"column\":58}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":711,\"column\":47},\"end\":{\"line\":711,\"column\":58}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"enumerable\",\"loc\":{\"start\":{\"line\":711,\"column\":60},\"end\":{\"line\":711,\"column\":70}}},\"value\":{\"type\":\"Literal\",\"value\":false,\"raw\":\"false\",\"loc\":{\"start\":{\"line\":711,\"column\":72},\"end\":{\"line\":711,\"column\":77}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":711,\"column\":60},\"end\":{\"line\":711,\"column\":77}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"configurable\",\"loc\":{\"start\":{\"line\":711,\"column\":79},\"end\":{\"line\":711,\"column\":91}}},\"value\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":711,\"column\":93},\"end\":{\"line\":711,\"column\":97}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":711,\"column\":79},\"end\":{\"line\":711,\"column\":97}}}],\"loc\":{\"start\":{\"line\":711,\"column\":46},\"end\":{\"line\":711,\"column\":99}}}],\"loc\":{\"start\":{\"line\":711,\"column\":1},\"end\":{\"line\":711,\"column\":100}}},\"loc\":{\"start\":{\"line\":711,\"column\":1},\"end\":{\"line\":711,\"column\":101}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"target\",\"loc\":{\"start\":{\"line\":712,\"column\":8},\"end\":{\"line\":712,\"column\":14}}},\"loc\":{\"start\":{\"line\":712,\"column\":1},\"end\":{\"line\":712,\"column\":15}}}],\"loc\":{\"start\":{\"line\":709,\"column\":55},\"end\":{\"line\":713,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":709,\"column\":19},\"end\":{\"line\":713,\"column\":1}}},\"loc\":{\"start\":{\"line\":709,\"column\":0},\"end\":{\"line\":713,\"column\":1}}},\"loc\":{\"start\":{\"line\":709,\"column\":0},\"end\":{\"line\":713,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":715,\"column\":0},\"end\":{\"line\":715,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"getmetatable\",\"loc\":{\"start\":{\"line\":715,\"column\":4},\"end\":{\"line\":715,\"column\":16}}},\"loc\":{\"start\":{\"line\":715,\"column\":0},\"end\":{\"line\":715,\"column\":16}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"getmetatable\",\"loc\":{\"start\":{\"line\":715,\"column\":28},\"end\":{\"line\":715,\"column\":40}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"taget\",\"loc\":{\"start\":{\"line\":715,\"column\":41},\"end\":{\"line\":715,\"column\":46}}},{\"type\":\"Identifier\",\"name\":\"meta\",\"loc\":{\"start\":{\"line\":715,\"column\":48},\"end\":{\"line\":715,\"column\":52}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"taget\",\"loc\":{\"start\":{\"line\":716,\"column\":8},\"end\":{\"line\":716,\"column\":13}}},\"property\":{\"type\":\"Identifier\",\"name\":\"__metatable\",\"loc\":{\"start\":{\"line\":716,\"column\":14},\"end\":{\"line\":716,\"column\":25}}},\"loc\":{\"start\":{\"line\":716,\"column\":8},\"end\":{\"line\":716,\"column\":25}}},\"loc\":{\"start\":{\"line\":716,\"column\":1},\"end\":{\"line\":716,\"column\":26}}}],\"loc\":{\"start\":{\"line\":715,\"column\":54},\"end\":{\"line\":717,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":715,\"column\":19},\"end\":{\"line\":717,\"column\":1}}},\"loc\":{\"start\":{\"line\":715,\"column\":0},\"end\":{\"line\":717,\"column\":1}}},\"loc\":{\"start\":{\"line\":715,\"column\":0},\"end\":{\"line\":717,\"column\":2}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"reduce\",\"loc\":{\"start\":{\"line\":719,\"column\":4},\"end\":{\"line\":719,\"column\":10}}},\"init\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"reduce\",\"loc\":{\"start\":{\"line\":719,\"column\":22},\"end\":{\"line\":719,\"column\":28}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":719,\"column\":29},\"end\":{\"line\":719,\"column\":32}}},{\"type\":\"Identifier\",\"name\":\"op\",\"loc\":{\"start\":{\"line\":719,\"column\":34},\"end\":{\"line\":719,\"column\":36}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":720,\"column\":6},\"end\":{\"line\":720,\"column\":9}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":720,\"column\":10},\"end\":{\"line\":720,\"column\":16}}},\"loc\":{\"start\":{\"line\":720,\"column\":6},\"end\":{\"line\":720,\"column\":16}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":720,\"column\":19},\"end\":{\"line\":720,\"column\":20}}},\"loc\":{\"start\":{\"line\":720,\"column\":6},\"end\":{\"line\":720,\"column\":20}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"loc\":{\"start\":{\"line\":720,\"column\":30},\"end\":{\"line\":720,\"column\":39}}},\"loc\":{\"start\":{\"line\":720,\"column\":23},\"end\":{\"line\":720,\"column\":40}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":720,\"column\":1},\"end\":{\"line\":720,\"column\":40}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":721,\"column\":5},\"end\":{\"line\":721,\"column\":8}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":721,\"column\":11},\"end\":{\"line\":721,\"column\":14}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":721,\"column\":15},\"end\":{\"line\":721,\"column\":16}}},\"loc\":{\"start\":{\"line\":721,\"column\":11},\"end\":{\"line\":721,\"column\":17}}},\"loc\":{\"start\":{\"line\":721,\"column\":5},\"end\":{\"line\":721,\"column\":17}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":721,\"column\":1},\"end\":{\"line\":721,\"column\":18}}},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":722,\"column\":11},\"end\":{\"line\":722,\"column\":12}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":722,\"column\":15},\"end\":{\"line\":722,\"column\":16}}},\"loc\":{\"start\":{\"line\":722,\"column\":11},\"end\":{\"line\":722,\"column\":16}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":722,\"column\":7},\"end\":{\"line\":722,\"column\":16}}},\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":722,\"column\":18},\"end\":{\"line\":722,\"column\":19}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":722,\"column\":22},\"end\":{\"line\":722,\"column\":25}}},\"property\":{\"type\":\"Identifier\",\"name\":\"length\",\"loc\":{\"start\":{\"line\":722,\"column\":26},\"end\":{\"line\":722,\"column\":32}}},\"loc\":{\"start\":{\"line\":722,\"column\":22},\"end\":{\"line\":722,\"column\":32}}},\"loc\":{\"start\":{\"line\":722,\"column\":18},\"end\":{\"line\":722,\"column\":32}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":722,\"column\":36},\"end\":{\"line\":722,\"column\":37}}},\"prefix\":true,\"loc\":{\"start\":{\"line\":722,\"column\":34},\"end\":{\"line\":722,\"column\":37}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":723,\"column\":2},\"end\":{\"line\":723,\"column\":5}}},\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"op\",\"loc\":{\"start\":{\"line\":723,\"column\":8},\"end\":{\"line\":723,\"column\":10}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":723,\"column\":11},\"end\":{\"line\":723,\"column\":14}}},{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"arr\",\"loc\":{\"start\":{\"line\":723,\"column\":16},\"end\":{\"line\":723,\"column\":19}}},\"property\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":723,\"column\":20},\"end\":{\"line\":723,\"column\":21}}},\"loc\":{\"start\":{\"line\":723,\"column\":16},\"end\":{\"line\":723,\"column\":22}}}],\"loc\":{\"start\":{\"line\":723,\"column\":8},\"end\":{\"line\":723,\"column\":23}}},\"loc\":{\"start\":{\"line\":723,\"column\":2},\"end\":{\"line\":723,\"column\":23}}},\"loc\":{\"start\":{\"line\":723,\"column\":2},\"end\":{\"line\":723,\"column\":24}}}],\"loc\":{\"start\":{\"line\":722,\"column\":40},\"end\":{\"line\":724,\"column\":2}}},\"loc\":{\"start\":{\"line\":722,\"column\":1},\"end\":{\"line\":724,\"column\":2}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"val\",\"loc\":{\"start\":{\"line\":725,\"column\":8},\"end\":{\"line\":725,\"column\":11}}},\"loc\":{\"start\":{\"line\":725,\"column\":1},\"end\":{\"line\":725,\"column\":12}}}],\"loc\":{\"start\":{\"line\":719,\"column\":38},\"end\":{\"line\":726,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":719,\"column\":13},\"end\":{\"line\":726,\"column\":1}}},\"loc\":{\"start\":{\"line\":719,\"column\":4},\"end\":{\"line\":726,\"column\":1}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":719,\"column\":0},\"end\":{\"line\":726,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":728,\"column\":0},\"end\":{\"line\":728,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"bit32\",\"loc\":{\"start\":{\"line\":728,\"column\":4},\"end\":{\"line\":728,\"column\":9}}},\"loc\":{\"start\":{\"line\":728,\"column\":0},\"end\":{\"line\":728,\"column\":9}}},\"right\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"band\",\"loc\":{\"start\":{\"line\":729,\"column\":1},\"end\":{\"line\":729,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"band\",\"loc\":{\"start\":{\"line\":729,\"column\":16},\"end\":{\"line\":729,\"column\":20}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"reduce\",\"loc\":{\"start\":{\"line\":729,\"column\":32},\"end\":{\"line\":729,\"column\":38}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":729,\"column\":39},\"end\":{\"line\":729,\"column\":48}}},{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":729,\"column\":59},\"end\":{\"line\":729,\"column\":60}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":729,\"column\":61},\"end\":{\"line\":729,\"column\":62}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"&\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":729,\"column\":73},\"end\":{\"line\":729,\"column\":74}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":729,\"column\":77},\"end\":{\"line\":729,\"column\":78}}},\"loc\":{\"start\":{\"line\":729,\"column\":73},\"end\":{\"line\":729,\"column\":78}}},\"loc\":{\"start\":{\"line\":729,\"column\":66},\"end\":{\"line\":729,\"column\":79}}}],\"loc\":{\"start\":{\"line\":729,\"column\":64},\"end\":{\"line\":729,\"column\":81}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":729,\"column\":50},\"end\":{\"line\":729,\"column\":81}}}],\"loc\":{\"start\":{\"line\":729,\"column\":32},\"end\":{\"line\":729,\"column\":82}}},\"loc\":{\"start\":{\"line\":729,\"column\":25},\"end\":{\"line\":729,\"column\":83}}}],\"loc\":{\"start\":{\"line\":729,\"column\":23},\"end\":{\"line\":729,\"column\":85}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":729,\"column\":7},\"end\":{\"line\":729,\"column\":85}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":729,\"column\":1},\"end\":{\"line\":729,\"column\":85}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"bor\",\"loc\":{\"start\":{\"line\":730,\"column\":1},\"end\":{\"line\":730,\"column\":4}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"bor\",\"loc\":{\"start\":{\"line\":730,\"column\":15},\"end\":{\"line\":730,\"column\":18}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"reduce\",\"loc\":{\"start\":{\"line\":730,\"column\":30},\"end\":{\"line\":730,\"column\":36}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":730,\"column\":37},\"end\":{\"line\":730,\"column\":46}}},{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":730,\"column\":57},\"end\":{\"line\":730,\"column\":58}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":730,\"column\":59},\"end\":{\"line\":730,\"column\":60}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"|\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":730,\"column\":71},\"end\":{\"line\":730,\"column\":72}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":730,\"column\":75},\"end\":{\"line\":730,\"column\":76}}},\"loc\":{\"start\":{\"line\":730,\"column\":71},\"end\":{\"line\":730,\"column\":76}}},\"loc\":{\"start\":{\"line\":730,\"column\":64},\"end\":{\"line\":730,\"column\":77}}}],\"loc\":{\"start\":{\"line\":730,\"column\":62},\"end\":{\"line\":730,\"column\":79}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":730,\"column\":48},\"end\":{\"line\":730,\"column\":79}}}],\"loc\":{\"start\":{\"line\":730,\"column\":30},\"end\":{\"line\":730,\"column\":80}}},\"loc\":{\"start\":{\"line\":730,\"column\":23},\"end\":{\"line\":730,\"column\":81}}}],\"loc\":{\"start\":{\"line\":730,\"column\":21},\"end\":{\"line\":730,\"column\":83}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":730,\"column\":6},\"end\":{\"line\":730,\"column\":83}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":730,\"column\":1},\"end\":{\"line\":730,\"column\":83}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"bxor\",\"loc\":{\"start\":{\"line\":731,\"column\":1},\"end\":{\"line\":731,\"column\":5}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"bxor\",\"loc\":{\"start\":{\"line\":731,\"column\":16},\"end\":{\"line\":731,\"column\":20}}},\"params\":[],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"reduce\",\"loc\":{\"start\":{\"line\":731,\"column\":32},\"end\":{\"line\":731,\"column\":38}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"arguments\",\"loc\":{\"start\":{\"line\":731,\"column\":39},\"end\":{\"line\":731,\"column\":48}}},{\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":731,\"column\":59},\"end\":{\"line\":731,\"column\":60}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":731,\"column\":61},\"end\":{\"line\":731,\"column\":62}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"|\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":731,\"column\":73},\"end\":{\"line\":731,\"column\":74}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":731,\"column\":77},\"end\":{\"line\":731,\"column\":78}}},\"loc\":{\"start\":{\"line\":731,\"column\":73},\"end\":{\"line\":731,\"column\":78}}},\"loc\":{\"start\":{\"line\":731,\"column\":66},\"end\":{\"line\":731,\"column\":79}}}],\"loc\":{\"start\":{\"line\":731,\"column\":64},\"end\":{\"line\":731,\"column\":81}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":731,\"column\":50},\"end\":{\"line\":731,\"column\":81}}}],\"loc\":{\"start\":{\"line\":731,\"column\":32},\"end\":{\"line\":731,\"column\":82}}},\"loc\":{\"start\":{\"line\":731,\"column\":25},\"end\":{\"line\":731,\"column\":83}}}],\"loc\":{\"start\":{\"line\":731,\"column\":23},\"end\":{\"line\":731,\"column\":85}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":731,\"column\":7},\"end\":{\"line\":731,\"column\":85}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":731,\"column\":1},\"end\":{\"line\":731,\"column\":85}}},{\"type\":\"Property\",\"key\":{\"type\":\"Identifier\",\"name\":\"rshift\",\"loc\":{\"start\":{\"line\":733,\"column\":1},\"end\":{\"line\":733,\"column\":7}}},\"value\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"rshift\",\"loc\":{\"start\":{\"line\":733,\"column\":18},\"end\":{\"line\":733,\"column\":24}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":733,\"column\":25},\"end\":{\"line\":733,\"column\":26}}},{\"type\":\"Identifier\",\"name\":\"disp\",\"loc\":{\"start\":{\"line\":733,\"column\":28},\"end\":{\"line\":733,\"column\":32}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\">>\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":733,\"column\":43},\"end\":{\"line\":733,\"column\":44}}},\"right\":{\"type\":\"Identifier\",\"name\":\"disp\",\"loc\":{\"start\":{\"line\":733,\"column\":48},\"end\":{\"line\":733,\"column\":52}}},\"loc\":{\"start\":{\"line\":733,\"column\":43},\"end\":{\"line\":733,\"column\":52}}},\"loc\":{\"start\":{\"line\":733,\"column\":36},\"end\":{\"line\":733,\"column\":53}}}],\"loc\":{\"start\":{\"line\":733,\"column\":34},\"end\":{\"line\":733,\"column\":55}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":733,\"column\":9},\"end\":{\"line\":733,\"column\":55}}},\"kind\":\"init\",\"method\":false,\"shorthand\":false,\"computed\":false,\"loc\":{\"start\":{\"line\":733,\"column\":1},\"end\":{\"line\":733,\"column\":55}}}],\"loc\":{\"start\":{\"line\":728,\"column\":12},\"end\":{\"line\":734,\"column\":1}}},\"loc\":{\"start\":{\"line\":728,\"column\":0},\"end\":{\"line\":734,\"column\":1}}},\"loc\":{\"start\":{\"line\":728,\"column\":0},\"end\":{\"line\":734,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":736,\"column\":0},\"end\":{\"line\":736,\"column\":3}}},\"property\":{\"type\":\"Identifier\",\"name\":\"require\",\"loc\":{\"start\":{\"line\":736,\"column\":4},\"end\":{\"line\":736,\"column\":11}}},\"loc\":{\"start\":{\"line\":736,\"column\":0},\"end\":{\"line\":736,\"column\":11}}},\"right\":{\"type\":\"FunctionExpression\",\"id\":{\"type\":\"Identifier\",\"name\":\"require\",\"loc\":{\"start\":{\"line\":736,\"column\":23},\"end\":{\"line\":736,\"column\":30}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":736,\"column\":31},\"end\":{\"line\":736,\"column\":35}}}],\"defaults\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":737,\"column\":6},\"end\":{\"line\":737,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":\"bit\",\"raw\":\"\\\"bit\\\"\",\"loc\":{\"start\":{\"line\":737,\"column\":14},\"end\":{\"line\":737,\"column\":19}}},\"loc\":{\"start\":{\"line\":737,\"column\":6},\"end\":{\"line\":737,\"column\":19}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":737,\"column\":29},\"end\":{\"line\":737,\"column\":32}}},\"property\":{\"type\":\"Identifier\",\"name\":\"bit32\",\"loc\":{\"start\":{\"line\":737,\"column\":33},\"end\":{\"line\":737,\"column\":38}}},\"loc\":{\"start\":{\"line\":737,\"column\":29},\"end\":{\"line\":737,\"column\":38}}},\"loc\":{\"start\":{\"line\":737,\"column\":22},\"end\":{\"line\":737,\"column\":39}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":737,\"column\":1},\"end\":{\"line\":737,\"column\":39}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"type\":\"Identifier\",\"name\":\"what\",\"loc\":{\"start\":{\"line\":738,\"column\":6},\"end\":{\"line\":738,\"column\":10}}},\"right\":{\"type\":\"Literal\",\"value\":\"bit32\",\"raw\":\"\\\"bit32\\\"\",\"loc\":{\"start\":{\"line\":738,\"column\":14},\"end\":{\"line\":738,\"column\":21}}},\"loc\":{\"start\":{\"line\":738,\"column\":6},\"end\":{\"line\":738,\"column\":21}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":738,\"column\":31},\"end\":{\"line\":738,\"column\":34}}},\"property\":{\"type\":\"Identifier\",\"name\":\"bit32\",\"loc\":{\"start\":{\"line\":738,\"column\":35},\"end\":{\"line\":738,\"column\":40}}},\"loc\":{\"start\":{\"line\":738,\"column\":31},\"end\":{\"line\":738,\"column\":40}}},\"loc\":{\"start\":{\"line\":738,\"column\":24},\"end\":{\"line\":738,\"column\":41}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":738,\"column\":1},\"end\":{\"line\":738,\"column\":41}}},{\"type\":\"ThrowStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":\"Module \",\"raw\":\"\\\"Module \\\"\",\"loc\":{\"start\":{\"line\":739,\"column\":7},\"end\":{\"line\":739,\"column\":16}}},\"right\":{\"type\":\"Identifier\",\"name\":\"waht\",\"loc\":{\"start\":{\"line\":739,\"column\":19},\"end\":{\"line\":739,\"column\":23}}},\"loc\":{\"start\":{\"line\":739,\"column\":7},\"end\":{\"line\":739,\"column\":23}}},\"right\":{\"type\":\"Literal\",\"value\":\" not found\",\"raw\":\"\\\" not found\\\"\",\"loc\":{\"start\":{\"line\":739,\"column\":26},\"end\":{\"line\":739,\"column\":38}}},\"loc\":{\"start\":{\"line\":739,\"column\":7},\"end\":{\"line\":739,\"column\":38}}},\"loc\":{\"start\":{\"line\":739,\"column\":1},\"end\":{\"line\":739,\"column\":39}}}],\"loc\":{\"start\":{\"line\":736,\"column\":37},\"end\":{\"line\":740,\"column\":1}}},\"rest\":null,\"generator\":false,\"expression\":false,\"loc\":{\"start\":{\"line\":736,\"column\":14},\"end\":{\"line\":740,\"column\":1}}},\"loc\":{\"start\":{\"line\":736,\"column\":0},\"end\":{\"line\":740,\"column\":1}}},\"loc\":{\"start\":{\"line\":736,\"column\":0},\"end\":{\"line\":740,\"column\":2}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":742,\"column\":0},\"end\":{\"line\":742,\"column\":5}}},\"property\":{\"type\":\"Identifier\",\"name\":\"mark\",\"loc\":{\"start\":{\"line\":742,\"column\":6},\"end\":{\"line\":742,\"column\":10}}},\"loc\":{\"start\":{\"line\":742,\"column\":0},\"end\":{\"line\":742,\"column\":10}}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":742,\"column\":11},\"end\":{\"line\":742,\"column\":14}}}],\"loc\":{\"start\":{\"line\":742,\"column\":0},\"end\":{\"line\":742,\"column\":15}}},\"loc\":{\"start\":{\"line\":742,\"column\":0},\"end\":{\"line\":742,\"column\":16}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"type\":\"Identifier\",\"name\":\"__lua\",\"loc\":{\"start\":{\"line\":743,\"column\":0},\"end\":{\"line\":743,\"column\":5}}},\"property\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":743,\"column\":6},\"end\":{\"line\":743,\"column\":9}}},\"loc\":{\"start\":{\"line\":743,\"column\":0},\"end\":{\"line\":743,\"column\":9}}},\"right\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":743,\"column\":12},\"end\":{\"line\":743,\"column\":15}}},\"loc\":{\"start\":{\"line\":743,\"column\":0},\"end\":{\"line\":743,\"column\":15}}},\"loc\":{\"start\":{\"line\":743,\"column\":0},\"end\":{\"line\":743,\"column\":16}}},{\"type\":\"ForInStatement\",\"left\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":744,\"column\":10},\"end\":{\"line\":744,\"column\":13}}},\"init\":null,\"loc\":{\"start\":{\"line\":744,\"column\":10},\"end\":{\"line\":744,\"column\":13}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":744,\"column\":6},\"end\":{\"line\":744,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":744,\"column\":17},\"end\":{\"line\":744,\"column\":20}}},\"body\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"ThisExpression\",\"loc\":{\"start\":{\"line\":744,\"column\":23},\"end\":{\"line\":744,\"column\":27}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":744,\"column\":28},\"end\":{\"line\":744,\"column\":31}}},\"loc\":{\"start\":{\"line\":744,\"column\":23},\"end\":{\"line\":744,\"column\":32}}},\"right\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"env\",\"loc\":{\"start\":{\"line\":744,\"column\":35},\"end\":{\"line\":744,\"column\":38}}},\"property\":{\"type\":\"Identifier\",\"name\":\"idx\",\"loc\":{\"start\":{\"line\":744,\"column\":39},\"end\":{\"line\":744,\"column\":42}}},\"loc\":{\"start\":{\"line\":744,\"column\":35},\"end\":{\"line\":744,\"column\":43}}},\"loc\":{\"start\":{\"line\":744,\"column\":23},\"end\":{\"line\":744,\"column\":43}}},\"loc\":{\"start\":{\"line\":744,\"column\":23},\"end\":{\"line\":744,\"column\":44}}},\"each\":false,\"loc\":{\"start\":{\"line\":744,\"column\":0},\"end\":{\"line\":744,\"column\":44}}}],\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":744,\"column\":44}}}\r\n\r\n},{}],22:[function(require,module,exports){\r\nmodule.exports={\"range\":[0,22849],\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":662,\"column\":4}},\"type\":\"Program\",\"body\":[{\"range\":[0,22849],\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":662,\"column\":4}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1,22847],\"loc\":{\"start\":{\"line\":1,\"column\":1},\"end\":{\"line\":662,\"column\":2}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1,351],\"loc\":{\"start\":{\"line\":1,\"column\":1},\"end\":{\"line\":11,\"column\":1}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[11,15],\"loc\":{\"start\":{\"line\":1,\"column\":11},\"end\":{\"line\":1,\"column\":15}},\"type\":\"Identifier\",\"name\":\"root\"},{\"range\":[17,24],\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":24}},\"type\":\"Identifier\",\"name\":\"factory\"}],\"defaults\":[],\"body\":{\"range\":[26,351],\"loc\":{\"start\":{\"line\":1,\"column\":26},\"end\":{\"line\":11,\"column\":1}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[30,43],\"loc\":{\"start\":{\"line\":2,\"column\":2},\"end\":{\"line\":2,\"column\":15}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[30,42],\"loc\":{\"start\":{\"line\":2,\"column\":2},\"end\":{\"line\":2,\"column\":14}},\"type\":\"Literal\",\"value\":\"use strict\",\"raw\":\"'use strict'\"}},{\"range\":[46,349],\"loc\":{\"start\":{\"line\":3,\"column\":2},\"end\":{\"line\":10,\"column\":40}},\"type\":\"IfStatement\",\"test\":{\"range\":[49,106],\"loc\":{\"start\":{\"line\":3,\"column\":5},\"end\":{\"line\":3,\"column\":62}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[49,76],\"loc\":{\"start\":{\"line\":3,\"column\":5},\"end\":{\"line\":3,\"column\":32}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[49,63],\"loc\":{\"start\":{\"line\":3,\"column\":5},\"end\":{\"line\":3,\"column\":19}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[56,63],\"loc\":{\"start\":{\"line\":3,\"column\":12},\"end\":{\"line\":3,\"column\":19}},\"type\":\"Identifier\",\"name\":\"exports\"},\"prefix\":true},\"right\":{\"range\":[68,76],\"loc\":{\"start\":{\"line\":3,\"column\":24},\"end\":{\"line\":3,\"column\":32}},\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"'object'\"}},\"right\":{\"range\":[80,106],\"loc\":{\"start\":{\"line\":3,\"column\":36},\"end\":{\"line\":3,\"column\":62}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[80,93],\"loc\":{\"start\":{\"line\":3,\"column\":36},\"end\":{\"line\":3,\"column\":49}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[87,93],\"loc\":{\"start\":{\"line\":3,\"column\":43},\"end\":{\"line\":3,\"column\":49}},\"type\":\"Identifier\",\"name\":\"module\"},\"prefix\":true},\"right\":{\"range\":[98,106],\"loc\":{\"start\":{\"line\":3,\"column\":54},\"end\":{\"line\":3,\"column\":62}},\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"'object'\"}}},\"consequent\":{\"range\":[112,139],\"loc\":{\"start\":{\"line\":4,\"column\":4},\"end\":{\"line\":4,\"column\":31}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[112,138],\"loc\":{\"start\":{\"line\":4,\"column\":4},\"end\":{\"line\":4,\"column\":30}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[112,126],\"loc\":{\"start\":{\"line\":4,\"column\":4},\"end\":{\"line\":4,\"column\":18}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[112,118],\"loc\":{\"start\":{\"line\":4,\"column\":4},\"end\":{\"line\":4,\"column\":10}},\"type\":\"Identifier\",\"name\":\"module\"},\"property\":{\"range\":[119,126],\"loc\":{\"start\":{\"line\":4,\"column\":11},\"end\":{\"line\":4,\"column\":18}},\"type\":\"Identifier\",\"name\":\"exports\"}},\"right\":{\"range\":[129,138],\"loc\":{\"start\":{\"line\":4,\"column\":21},\"end\":{\"line\":4,\"column\":30}},\"type\":\"CallExpression\",\"callee\":{\"range\":[129,136],\"loc\":{\"start\":{\"line\":4,\"column\":21},\"end\":{\"line\":4,\"column\":28}},\"type\":\"Identifier\",\"name\":\"factory\"},\"arguments\":[]}}},\"alternate\":{\"range\":[147,349],\"loc\":{\"start\":{\"line\":5,\"column\":7},\"end\":{\"line\":10,\"column\":40}},\"type\":\"IfStatement\",\"test\":{\"range\":[150,192],\"loc\":{\"start\":{\"line\":5,\"column\":10},\"end\":{\"line\":5,\"column\":52}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[150,178],\"loc\":{\"start\":{\"line\":5,\"column\":10},\"end\":{\"line\":5,\"column\":38}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[150,163],\"loc\":{\"start\":{\"line\":5,\"column\":10},\"end\":{\"line\":5,\"column\":23}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[157,163],\"loc\":{\"start\":{\"line\":5,\"column\":17},\"end\":{\"line\":5,\"column\":23}},\"type\":\"Identifier\",\"name\":\"define\"},\"prefix\":true},\"right\":{\"range\":[168,178],\"loc\":{\"start\":{\"line\":5,\"column\":28},\"end\":{\"line\":5,\"column\":38}},\"type\":\"Literal\",\"value\":\"function\",\"raw\":\"'function'\"}},\"right\":{\"range\":[182,192],\"loc\":{\"start\":{\"line\":5,\"column\":42},\"end\":{\"line\":5,\"column\":52}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[182,188],\"loc\":{\"start\":{\"line\":5,\"column\":42},\"end\":{\"line\":5,\"column\":48}},\"type\":\"Identifier\",\"name\":\"define\"},\"property\":{\"range\":[189,192],\"loc\":{\"start\":{\"line\":5,\"column\":49},\"end\":{\"line\":5,\"column\":52}},\"type\":\"Identifier\",\"name\":\"amd\"}}},\"consequent\":{\"range\":[198,218],\"loc\":{\"start\":{\"line\":6,\"column\":4},\"end\":{\"line\":6,\"column\":24}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[198,217],\"loc\":{\"start\":{\"line\":6,\"column\":4},\"end\":{\"line\":6,\"column\":23}},\"type\":\"CallExpression\",\"callee\":{\"range\":[198,204],\"loc\":{\"start\":{\"line\":6,\"column\":4},\"end\":{\"line\":6,\"column\":10}},\"type\":\"Identifier\",\"name\":\"define\"},\"arguments\":[{\"range\":[205,207],\"loc\":{\"start\":{\"line\":6,\"column\":11},\"end\":{\"line\":6,\"column\":13}},\"type\":\"ArrayExpression\",\"elements\":[]},{\"range\":[209,216],\"loc\":{\"start\":{\"line\":6,\"column\":15},\"end\":{\"line\":6,\"column\":22}},\"type\":\"Identifier\",\"name\":\"factory\"}]}},\"alternate\":{\"range\":[226,349],\"loc\":{\"start\":{\"line\":7,\"column\":7},\"end\":{\"line\":10,\"column\":40}},\"type\":\"IfStatement\",\"test\":{\"range\":[229,256],\"loc\":{\"start\":{\"line\":7,\"column\":10},\"end\":{\"line\":7,\"column\":37}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[229,243],\"loc\":{\"start\":{\"line\":7,\"column\":10},\"end\":{\"line\":7,\"column\":24}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[236,243],\"loc\":{\"start\":{\"line\":7,\"column\":17},\"end\":{\"line\":7,\"column\":24}},\"type\":\"Identifier\",\"name\":\"exports\"},\"prefix\":true},\"right\":{\"range\":[248,256],\"loc\":{\"start\":{\"line\":7,\"column\":29},\"end\":{\"line\":7,\"column\":37}},\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"'object'\"}},\"consequent\":{\"range\":[262,301],\"loc\":{\"start\":{\"line\":8,\"column\":4},\"end\":{\"line\":8,\"column\":43}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[262,300],\"loc\":{\"start\":{\"line\":8,\"column\":4},\"end\":{\"line\":8,\"column\":42}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[262,288],\"loc\":{\"start\":{\"line\":8,\"column\":4},\"end\":{\"line\":8,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[262,269],\"loc\":{\"start\":{\"line\":8,\"column\":4},\"end\":{\"line\":8,\"column\":11}},\"type\":\"Identifier\",\"name\":\"exports\"},\"property\":{\"range\":[270,287],\"loc\":{\"start\":{\"line\":8,\"column\":12},\"end\":{\"line\":8,\"column\":29}},\"type\":\"Literal\",\"value\":\"__pythonRuntime\",\"raw\":\"\\\"__pythonRuntime\\\"\"}},\"right\":{\"range\":[291,300],\"loc\":{\"start\":{\"line\":8,\"column\":33},\"end\":{\"line\":8,\"column\":42}},\"type\":\"CallExpression\",\"callee\":{\"range\":[291,298],\"loc\":{\"start\":{\"line\":8,\"column\":33},\"end\":{\"line\":8,\"column\":40}},\"type\":\"Identifier\",\"name\":\"factory\"},\"arguments\":[]}}},\"alternate\":{\"range\":[313,349],\"loc\":{\"start\":{\"line\":10,\"column\":4},\"end\":{\"line\":10,\"column\":40}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[313,348],\"loc\":{\"start\":{\"line\":10,\"column\":4},\"end\":{\"line\":10,\"column\":39}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[313,336],\"loc\":{\"start\":{\"line\":10,\"column\":4},\"end\":{\"line\":10,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[313,317],\"loc\":{\"start\":{\"line\":10,\"column\":4},\"end\":{\"line\":10,\"column\":8}},\"type\":\"Identifier\",\"name\":\"root\"},\"property\":{\"range\":[318,335],\"loc\":{\"start\":{\"line\":10,\"column\":9},\"end\":{\"line\":10,\"column\":26}},\"type\":\"Literal\",\"value\":\"__pythonRuntime\",\"raw\":\"\\\"__pythonRuntime\\\"\"}},\"right\":{\"range\":[339,348],\"loc\":{\"start\":{\"line\":10,\"column\":30},\"end\":{\"line\":10,\"column\":39}},\"type\":\"CallExpression\",\"callee\":{\"range\":[339,346],\"loc\":{\"start\":{\"line\":10,\"column\":30},\"end\":{\"line\":10,\"column\":37}},\"type\":\"Identifier\",\"name\":\"factory\"},\"arguments\":[]}}}}}}]},\"generator\":false,\"expression\":false},\"arguments\":[{\"range\":[352,356],\"loc\":{\"start\":{\"line\":11,\"column\":2},\"end\":{\"line\":11,\"column\":6}},\"type\":\"ThisExpression\"},{\"range\":[358,22846],\"loc\":{\"start\":{\"line\":11,\"column\":8},\"end\":{\"line\":662,\"column\":1}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[369,22846],\"loc\":{\"start\":{\"line\":11,\"column\":19},\"end\":{\"line\":662,\"column\":1}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[373,386],\"loc\":{\"start\":{\"line\":12,\"column\":2},\"end\":{\"line\":12,\"column\":15}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[373,385],\"loc\":{\"start\":{\"line\":12,\"column\":2},\"end\":{\"line\":12,\"column\":14}},\"type\":\"Literal\",\"value\":\"use strict\",\"raw\":\"'use strict'\"}},{\"range\":[389,22694],\"loc\":{\"start\":{\"line\":13,\"column\":2},\"end\":{\"line\":654,\"column\":4}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[393,22693],\"loc\":{\"start\":{\"line\":13,\"column\":6},\"end\":{\"line\":654,\"column\":3}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[393,406],\"loc\":{\"start\":{\"line\":13,\"column\":6},\"end\":{\"line\":13,\"column\":19}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"init\":{\"range\":[409,22693],\"loc\":{\"start\":{\"line\":13,\"column\":22},\"end\":{\"line\":654,\"column\":3}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[415,1777],\"loc\":{\"start\":{\"line\":14,\"column\":4},\"end\":{\"line\":47,\"column\":5}},\"type\":\"Property\",\"key\":{\"range\":[415,423],\"loc\":{\"start\":{\"line\":14,\"column\":4},\"end\":{\"line\":14,\"column\":12}},\"type\":\"Identifier\",\"name\":\"internal\"},\"computed\":false,\"value\":{\"range\":[425,1777],\"loc\":{\"start\":{\"line\":14,\"column\":14},\"end\":{\"line\":47,\"column\":5}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[467,547],\"loc\":{\"start\":{\"line\":16,\"column\":6},\"end\":{\"line\":16,\"column\":86}},\"type\":\"Property\",\"key\":{\"range\":[467,472],\"loc\":{\"start\":{\"line\":16,\"column\":6},\"end\":{\"line\":16,\"column\":11}},\"type\":\"Identifier\",\"name\":\"isSeq\"},\"computed\":false,\"value\":{\"range\":[474,547],\"loc\":{\"start\":{\"line\":16,\"column\":13},\"end\":{\"line\":16,\"column\":86}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[484,485],\"loc\":{\"start\":{\"line\":16,\"column\":23},\"end\":{\"line\":16,\"column\":24}},\"type\":\"Identifier\",\"name\":\"a\"}],\"defaults\":[],\"body\":{\"range\":[487,547],\"loc\":{\"start\":{\"line\":16,\"column\":26},\"end\":{\"line\":16,\"column\":86}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[489,545],\"loc\":{\"start\":{\"line\":16,\"column\":28},\"end\":{\"line\":16,\"column\":84}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[496,544],\"loc\":{\"start\":{\"line\":16,\"column\":35},\"end\":{\"line\":16,\"column\":83}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[496,497],\"loc\":{\"start\":{\"line\":16,\"column\":35},\"end\":{\"line\":16,\"column\":36}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[502,543],\"loc\":{\"start\":{\"line\":16,\"column\":41},\"end\":{\"line\":16,\"column\":82}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[502,520],\"loc\":{\"start\":{\"line\":16,\"column\":41},\"end\":{\"line\":16,\"column\":59}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[502,509],\"loc\":{\"start\":{\"line\":16,\"column\":41},\"end\":{\"line\":16,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[502,503],\"loc\":{\"start\":{\"line\":16,\"column\":41},\"end\":{\"line\":16,\"column\":42}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[504,509],\"loc\":{\"start\":{\"line\":16,\"column\":43},\"end\":{\"line\":16,\"column\":48}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[514,520],\"loc\":{\"start\":{\"line\":16,\"column\":53},\"end\":{\"line\":16,\"column\":59}},\"type\":\"Literal\",\"value\":\"list\",\"raw\":\"\\\"list\\\"\"}},\"right\":{\"range\":[524,543],\"loc\":{\"start\":{\"line\":16,\"column\":63},\"end\":{\"line\":16,\"column\":82}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[524,531],\"loc\":{\"start\":{\"line\":16,\"column\":63},\"end\":{\"line\":16,\"column\":70}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[524,525],\"loc\":{\"start\":{\"line\":16,\"column\":63},\"end\":{\"line\":16,\"column\":64}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[526,531],\"loc\":{\"start\":{\"line\":16,\"column\":65},\"end\":{\"line\":16,\"column\":70}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[536,543],\"loc\":{\"start\":{\"line\":16,\"column\":75},\"end\":{\"line\":16,\"column\":82}},\"type\":\"Literal\",\"value\":\"tuple\",\"raw\":\"\\\"tuple\\\"\"}}}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[555,1656],\"loc\":{\"start\":{\"line\":17,\"column\":6},\"end\":{\"line\":43,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[555,560],\"loc\":{\"start\":{\"line\":17,\"column\":6},\"end\":{\"line\":17,\"column\":11}},\"type\":\"Identifier\",\"name\":\"slice\"},\"computed\":false,\"value\":{\"range\":[562,1656],\"loc\":{\"start\":{\"line\":17,\"column\":13},\"end\":{\"line\":43,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[572,575],\"loc\":{\"start\":{\"line\":17,\"column\":23},\"end\":{\"line\":17,\"column\":26}},\"type\":\"Identifier\",\"name\":\"obj\"},{\"range\":[577,582],\"loc\":{\"start\":{\"line\":17,\"column\":28},\"end\":{\"line\":17,\"column\":33}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[584,587],\"loc\":{\"start\":{\"line\":17,\"column\":35},\"end\":{\"line\":17,\"column\":38}},\"type\":\"Identifier\",\"name\":\"end\"},{\"range\":[589,593],\"loc\":{\"start\":{\"line\":17,\"column\":40},\"end\":{\"line\":17,\"column\":44}},\"type\":\"Identifier\",\"name\":\"step\"}],\"defaults\":[],\"body\":{\"range\":[595,1656],\"loc\":{\"start\":{\"line\":17,\"column\":46},\"end\":{\"line\":43,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[605,615],\"loc\":{\"start\":{\"line\":18,\"column\":8},\"end\":{\"line\":18,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[609,614],\"loc\":{\"start\":{\"line\":18,\"column\":12},\"end\":{\"line\":18,\"column\":17}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[609,614],\"loc\":{\"start\":{\"line\":18,\"column\":12},\"end\":{\"line\":18,\"column\":17}},\"type\":\"Identifier\",\"name\":\"slice\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[624,749],\"loc\":{\"start\":{\"line\":19,\"column\":8},\"end\":{\"line\":20,\"column\":41}},\"type\":\"IfStatement\",\"test\":{\"range\":[629,652],\"loc\":{\"start\":{\"line\":19,\"column\":13},\"end\":{\"line\":19,\"column\":36}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[629,639],\"loc\":{\"start\":{\"line\":19,\"column\":13},\"end\":{\"line\":19,\"column\":23}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[636,639],\"loc\":{\"start\":{\"line\":19,\"column\":20},\"end\":{\"line\":19,\"column\":23}},\"type\":\"Identifier\",\"name\":\"obj\"},\"prefix\":true},\"right\":{\"range\":[644,652],\"loc\":{\"start\":{\"line\":19,\"column\":28},\"end\":{\"line\":19,\"column\":36}},\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"'string'\"}},\"consequent\":{\"range\":[655,707],\"loc\":{\"start\":{\"line\":19,\"column\":39},\"end\":{\"line\":19,\"column\":91}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[655,707],\"loc\":{\"start\":{\"line\":19,\"column\":39},\"end\":{\"line\":19,\"column\":91}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[655,660],\"loc\":{\"start\":{\"line\":19,\"column\":39},\"end\":{\"line\":19,\"column\":44}},\"type\":\"Identifier\",\"name\":\"slice\"},\"right\":{\"range\":[663,707],\"loc\":{\"start\":{\"line\":19,\"column\":47},\"end\":{\"line\":19,\"column\":91}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[672,673],\"loc\":{\"start\":{\"line\":19,\"column\":56},\"end\":{\"line\":19,\"column\":57}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[674,675],\"loc\":{\"start\":{\"line\":19,\"column\":58},\"end\":{\"line\":19,\"column\":59}},\"type\":\"Identifier\",\"name\":\"y\"}],\"defaults\":[],\"body\":{\"range\":[677,707],\"loc\":{\"start\":{\"line\":19,\"column\":61},\"end\":{\"line\":19,\"column\":91}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[679,705],\"loc\":{\"start\":{\"line\":19,\"column\":63},\"end\":{\"line\":19,\"column\":89}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[686,704],\"loc\":{\"start\":{\"line\":19,\"column\":70},\"end\":{\"line\":19,\"column\":88}},\"type\":\"CallExpression\",\"callee\":{\"range\":[686,699],\"loc\":{\"start\":{\"line\":19,\"column\":70},\"end\":{\"line\":19,\"column\":83}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[686,689],\"loc\":{\"start\":{\"line\":19,\"column\":70},\"end\":{\"line\":19,\"column\":73}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[690,699],\"loc\":{\"start\":{\"line\":19,\"column\":74},\"end\":{\"line\":19,\"column\":83}},\"type\":\"Identifier\",\"name\":\"substring\"}},\"arguments\":[{\"range\":[700,701],\"loc\":{\"start\":{\"line\":19,\"column\":84},\"end\":{\"line\":19,\"column\":85}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[702,703],\"loc\":{\"start\":{\"line\":19,\"column\":86},\"end\":{\"line\":19,\"column\":87}},\"type\":\"Identifier\",\"name\":\"y\"}]}}]},\"generator\":false,\"expression\":false}}},\"alternate\":{\"range\":[721,749],\"loc\":{\"start\":{\"line\":20,\"column\":13},\"end\":{\"line\":20,\"column\":41}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[721,748],\"loc\":{\"start\":{\"line\":20,\"column\":13},\"end\":{\"line\":20,\"column\":40}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[721,726],\"loc\":{\"start\":{\"line\":20,\"column\":13},\"end\":{\"line\":20,\"column\":18}},\"type\":\"Identifier\",\"name\":\"slice\"},\"right\":{\"range\":[729,748],\"loc\":{\"start\":{\"line\":20,\"column\":21},\"end\":{\"line\":20,\"column\":40}},\"type\":\"CallExpression\",\"callee\":{\"range\":[729,743],\"loc\":{\"start\":{\"line\":20,\"column\":21},\"end\":{\"line\":20,\"column\":35}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[729,738],\"loc\":{\"start\":{\"line\":20,\"column\":21},\"end\":{\"line\":20,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[729,732],\"loc\":{\"start\":{\"line\":20,\"column\":21},\"end\":{\"line\":20,\"column\":24}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[733,738],\"loc\":{\"start\":{\"line\":20,\"column\":25},\"end\":{\"line\":20,\"column\":30}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"property\":{\"range\":[739,743],\"loc\":{\"start\":{\"line\":20,\"column\":31},\"end\":{\"line\":20,\"column\":35}},\"type\":\"Identifier\",\"name\":\"bind\"}},\"arguments\":[{\"range\":[744,747],\"loc\":{\"start\":{\"line\":20,\"column\":36},\"end\":{\"line\":20,\"column\":39}},\"type\":\"Identifier\",\"name\":\"obj\"}]}}}},{\"range\":[759,800],\"loc\":{\"start\":{\"line\":22,\"column\":8},\"end\":{\"line\":22,\"column\":49}},\"type\":\"IfStatement\",\"test\":{\"range\":[763,789],\"loc\":{\"start\":{\"line\":22,\"column\":12},\"end\":{\"line\":22,\"column\":38}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[763,775],\"loc\":{\"start\":{\"line\":22,\"column\":12},\"end\":{\"line\":22,\"column\":24}},\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"range\":[763,767],\"loc\":{\"start\":{\"line\":22,\"column\":12},\"end\":{\"line\":22,\"column\":16}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[771,775],\"loc\":{\"start\":{\"line\":22,\"column\":20},\"end\":{\"line\":22,\"column\":24}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"right\":{\"range\":[779,789],\"loc\":{\"start\":{\"line\":22,\"column\":28},\"end\":{\"line\":22,\"column\":38}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[779,783],\"loc\":{\"start\":{\"line\":22,\"column\":28},\"end\":{\"line\":22,\"column\":32}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[788,789],\"loc\":{\"start\":{\"line\":22,\"column\":37},\"end\":{\"line\":22,\"column\":38}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}},\"consequent\":{\"range\":[791,800],\"loc\":{\"start\":{\"line\":22,\"column\":40},\"end\":{\"line\":22,\"column\":49}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[791,799],\"loc\":{\"start\":{\"line\":22,\"column\":40},\"end\":{\"line\":22,\"column\":48}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[791,795],\"loc\":{\"start\":{\"line\":22,\"column\":40},\"end\":{\"line\":22,\"column\":44}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[798,799],\"loc\":{\"start\":{\"line\":22,\"column\":47},\"end\":{\"line\":22,\"column\":48}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}},\"alternate\":null},{\"range\":[848,993],\"loc\":{\"start\":{\"line\":23,\"column\":8},\"end\":{\"line\":26,\"column\":50}},\"type\":\"IfStatement\",\"test\":{\"range\":[852,865],\"loc\":{\"start\":{\"line\":23,\"column\":12},\"end\":{\"line\":23,\"column\":25}},\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"range\":[852,857],\"loc\":{\"start\":{\"line\":23,\"column\":12},\"end\":{\"line\":23,\"column\":17}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[861,865],\"loc\":{\"start\":{\"line\":23,\"column\":21},\"end\":{\"line\":23,\"column\":25}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"consequent\":{\"range\":[867,952],\"loc\":{\"start\":{\"line\":23,\"column\":27},\"end\":{\"line\":26,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[879,942],\"loc\":{\"start\":{\"line\":24,\"column\":10},\"end\":{\"line\":25,\"column\":25}},\"type\":\"IfStatement\",\"test\":{\"range\":[883,891],\"loc\":{\"start\":{\"line\":24,\"column\":14},\"end\":{\"line\":24,\"column\":22}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[883,887],\"loc\":{\"start\":{\"line\":24,\"column\":14},\"end\":{\"line\":24,\"column\":18}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[890,891],\"loc\":{\"start\":{\"line\":24,\"column\":21},\"end\":{\"line\":24,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[893,916],\"loc\":{\"start\":{\"line\":24,\"column\":24},\"end\":{\"line\":24,\"column\":47}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[893,915],\"loc\":{\"start\":{\"line\":24,\"column\":24},\"end\":{\"line\":24,\"column\":46}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[893,898],\"loc\":{\"start\":{\"line\":24,\"column\":24},\"end\":{\"line\":24,\"column\":29}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[901,915],\"loc\":{\"start\":{\"line\":24,\"column\":32},\"end\":{\"line\":24,\"column\":46}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[901,911],\"loc\":{\"start\":{\"line\":24,\"column\":32},\"end\":{\"line\":24,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[901,904],\"loc\":{\"start\":{\"line\":24,\"column\":32},\"end\":{\"line\":24,\"column\":35}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[905,911],\"loc\":{\"start\":{\"line\":24,\"column\":36},\"end\":{\"line\":24,\"column\":42}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[914,915],\"loc\":{\"start\":{\"line\":24,\"column\":45},\"end\":{\"line\":24,\"column\":46}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}}},\"alternate\":{\"range\":[932,942],\"loc\":{\"start\":{\"line\":25,\"column\":15},\"end\":{\"line\":25,\"column\":25}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[932,941],\"loc\":{\"start\":{\"line\":25,\"column\":15},\"end\":{\"line\":25,\"column\":24}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[932,937],\"loc\":{\"start\":{\"line\":25,\"column\":15},\"end\":{\"line\":25,\"column\":20}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[940,941],\"loc\":{\"start\":{\"line\":25,\"column\":23},\"end\":{\"line\":25,\"column\":24}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}}]},\"alternate\":{\"range\":[958,993],\"loc\":{\"start\":{\"line\":26,\"column\":15},\"end\":{\"line\":26,\"column\":50}},\"type\":\"IfStatement\",\"test\":{\"range\":[962,971],\"loc\":{\"start\":{\"line\":26,\"column\":19},\"end\":{\"line\":26,\"column\":28}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[962,967],\"loc\":{\"start\":{\"line\":26,\"column\":19},\"end\":{\"line\":26,\"column\":24}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[970,971],\"loc\":{\"start\":{\"line\":26,\"column\":27},\"end\":{\"line\":26,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[973,993],\"loc\":{\"start\":{\"line\":26,\"column\":30},\"end\":{\"line\":26,\"column\":50}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[973,992],\"loc\":{\"start\":{\"line\":26,\"column\":30},\"end\":{\"line\":26,\"column\":49}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[973,978],\"loc\":{\"start\":{\"line\":26,\"column\":30},\"end\":{\"line\":26,\"column\":35}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[982,992],\"loc\":{\"start\":{\"line\":26,\"column\":39},\"end\":{\"line\":26,\"column\":49}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[982,985],\"loc\":{\"start\":{\"line\":26,\"column\":39},\"end\":{\"line\":26,\"column\":42}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[986,992],\"loc\":{\"start\":{\"line\":26,\"column\":43},\"end\":{\"line\":26,\"column\":49}},\"type\":\"Identifier\",\"name\":\"length\"}}}},\"alternate\":null}},{\"range\":[1002,1134],\"loc\":{\"start\":{\"line\":27,\"column\":8},\"end\":{\"line\":30,\"column\":46}},\"type\":\"IfStatement\",\"test\":{\"range\":[1006,1017],\"loc\":{\"start\":{\"line\":27,\"column\":12},\"end\":{\"line\":27,\"column\":23}},\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"range\":[1006,1009],\"loc\":{\"start\":{\"line\":27,\"column\":12},\"end\":{\"line\":27,\"column\":15}},\"type\":\"Identifier\",\"name\":\"end\"},\"right\":{\"range\":[1013,1017],\"loc\":{\"start\":{\"line\":27,\"column\":19},\"end\":{\"line\":27,\"column\":23}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"consequent\":{\"range\":[1019,1097],\"loc\":{\"start\":{\"line\":27,\"column\":25},\"end\":{\"line\":30,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[1031,1087],\"loc\":{\"start\":{\"line\":28,\"column\":10},\"end\":{\"line\":29,\"column\":32}},\"type\":\"IfStatement\",\"test\":{\"range\":[1035,1043],\"loc\":{\"start\":{\"line\":28,\"column\":14},\"end\":{\"line\":28,\"column\":22}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[1035,1039],\"loc\":{\"start\":{\"line\":28,\"column\":14},\"end\":{\"line\":28,\"column\":18}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[1042,1043],\"loc\":{\"start\":{\"line\":28,\"column\":21},\"end\":{\"line\":28,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[1045,1054],\"loc\":{\"start\":{\"line\":28,\"column\":24},\"end\":{\"line\":28,\"column\":33}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1045,1053],\"loc\":{\"start\":{\"line\":28,\"column\":24},\"end\":{\"line\":28,\"column\":32}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1045,1048],\"loc\":{\"start\":{\"line\":28,\"column\":24},\"end\":{\"line\":28,\"column\":27}},\"type\":\"Identifier\",\"name\":\"end\"},\"right\":{\"range\":[1051,1053],\"loc\":{\"start\":{\"line\":28,\"column\":30},\"end\":{\"line\":28,\"column\":32}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[1052,1053],\"loc\":{\"start\":{\"line\":28,\"column\":31},\"end\":{\"line\":28,\"column\":32}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"},\"prefix\":true}}},\"alternate\":{\"range\":[1070,1087],\"loc\":{\"start\":{\"line\":29,\"column\":15},\"end\":{\"line\":29,\"column\":32}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1070,1086],\"loc\":{\"start\":{\"line\":29,\"column\":15},\"end\":{\"line\":29,\"column\":31}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1070,1073],\"loc\":{\"start\":{\"line\":29,\"column\":15},\"end\":{\"line\":29,\"column\":18}},\"type\":\"Identifier\",\"name\":\"end\"},\"right\":{\"range\":[1076,1086],\"loc\":{\"start\":{\"line\":29,\"column\":21},\"end\":{\"line\":29,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1076,1079],\"loc\":{\"start\":{\"line\":29,\"column\":21},\"end\":{\"line\":29,\"column\":24}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[1080,1086],\"loc\":{\"start\":{\"line\":29,\"column\":25},\"end\":{\"line\":29,\"column\":31}},\"type\":\"Identifier\",\"name\":\"length\"}}}}}]},\"alternate\":{\"range\":[1103,1134],\"loc\":{\"start\":{\"line\":30,\"column\":15},\"end\":{\"line\":30,\"column\":46}},\"type\":\"IfStatement\",\"test\":{\"range\":[1107,1114],\"loc\":{\"start\":{\"line\":30,\"column\":19},\"end\":{\"line\":30,\"column\":26}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[1107,1110],\"loc\":{\"start\":{\"line\":30,\"column\":19},\"end\":{\"line\":30,\"column\":22}},\"type\":\"Identifier\",\"name\":\"end\"},\"right\":{\"range\":[1113,1114],\"loc\":{\"start\":{\"line\":30,\"column\":25},\"end\":{\"line\":30,\"column\":26}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[1116,1134],\"loc\":{\"start\":{\"line\":30,\"column\":28},\"end\":{\"line\":30,\"column\":46}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1116,1133],\"loc\":{\"start\":{\"line\":30,\"column\":28},\"end\":{\"line\":30,\"column\":45}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[1116,1119],\"loc\":{\"start\":{\"line\":30,\"column\":28},\"end\":{\"line\":30,\"column\":31}},\"type\":\"Identifier\",\"name\":\"end\"},\"right\":{\"range\":[1123,1133],\"loc\":{\"start\":{\"line\":30,\"column\":35},\"end\":{\"line\":30,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1123,1126],\"loc\":{\"start\":{\"line\":30,\"column\":35},\"end\":{\"line\":30,\"column\":38}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[1127,1133],\"loc\":{\"start\":{\"line\":30,\"column\":39},\"end\":{\"line\":30,\"column\":45}},\"type\":\"Identifier\",\"name\":\"length\"}}}},\"alternate\":null}},{\"range\":[1144,1195],\"loc\":{\"start\":{\"line\":32,\"column\":8},\"end\":{\"line\":32,\"column\":59}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[1148,1186],\"loc\":{\"start\":{\"line\":32,\"column\":12},\"end\":{\"line\":32,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[1148,1151],\"loc\":{\"start\":{\"line\":32,\"column\":12},\"end\":{\"line\":32,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[1154,1186],\"loc\":{\"start\":{\"line\":32,\"column\":18},\"end\":{\"line\":32,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[1158,1184],\"loc\":{\"start\":{\"line\":32,\"column\":22},\"end\":{\"line\":32,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1158,1179],\"loc\":{\"start\":{\"line\":32,\"column\":22},\"end\":{\"line\":32,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1158,1171],\"loc\":{\"start\":{\"line\":32,\"column\":22},\"end\":{\"line\":32,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[1172,1179],\"loc\":{\"start\":{\"line\":32,\"column\":36},\"end\":{\"line\":32,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[1180,1184],\"loc\":{\"start\":{\"line\":32,\"column\":44},\"end\":{\"line\":32,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}},{\"range\":[1188,1191],\"loc\":{\"start\":{\"line\":32,\"column\":52},\"end\":{\"line\":32,\"column\":55}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[1188,1191],\"loc\":{\"start\":{\"line\":32,\"column\":52},\"end\":{\"line\":32,\"column\":55}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"init\":null},{\"range\":[1193,1194],\"loc\":{\"start\":{\"line\":32,\"column\":57},\"end\":{\"line\":32,\"column\":58}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[1193,1194],\"loc\":{\"start\":{\"line\":32,\"column\":57},\"end\":{\"line\":32,\"column\":58}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[1204,1568],\"loc\":{\"start\":{\"line\":33,\"column\":8},\"end\":{\"line\":40,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[1208,1216],\"loc\":{\"start\":{\"line\":33,\"column\":12},\"end\":{\"line\":33,\"column\":20}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[1208,1212],\"loc\":{\"start\":{\"line\":33,\"column\":12},\"end\":{\"line\":33,\"column\":16}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[1215,1216],\"loc\":{\"start\":{\"line\":33,\"column\":19},\"end\":{\"line\":33,\"column\":20}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[1218,1346],\"loc\":{\"start\":{\"line\":33,\"column\":22},\"end\":{\"line\":36,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[1230,1262],\"loc\":{\"start\":{\"line\":34,\"column\":10},\"end\":{\"line\":34,\"column\":42}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1230,1261],\"loc\":{\"start\":{\"line\":34,\"column\":10},\"end\":{\"line\":34,\"column\":41}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1230,1233],\"loc\":{\"start\":{\"line\":34,\"column\":10},\"end\":{\"line\":34,\"column\":13}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"right\":{\"range\":[1236,1261],\"loc\":{\"start\":{\"line\":34,\"column\":16},\"end\":{\"line\":34,\"column\":41}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1236,1241],\"loc\":{\"start\":{\"line\":34,\"column\":16},\"end\":{\"line\":34,\"column\":21}},\"type\":\"Identifier\",\"name\":\"slice\"},\"arguments\":[{\"range\":[1242,1249],\"loc\":{\"start\":{\"line\":34,\"column\":22},\"end\":{\"line\":34,\"column\":29}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[1242,1245],\"loc\":{\"start\":{\"line\":34,\"column\":22},\"end\":{\"line\":34,\"column\":25}},\"type\":\"Identifier\",\"name\":\"end\"},\"right\":{\"range\":[1248,1249],\"loc\":{\"start\":{\"line\":34,\"column\":28},\"end\":{\"line\":34,\"column\":29}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}},{\"range\":[1251,1260],\"loc\":{\"start\":{\"line\":34,\"column\":31},\"end\":{\"line\":34,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[1251,1256],\"loc\":{\"start\":{\"line\":34,\"column\":31},\"end\":{\"line\":34,\"column\":36}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[1259,1260],\"loc\":{\"start\":{\"line\":34,\"column\":39},\"end\":{\"line\":34,\"column\":40}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}]}}},{\"range\":[1273,1336],\"loc\":{\"start\":{\"line\":35,\"column\":10},\"end\":{\"line\":35,\"column\":73}},\"type\":\"ForStatement\",\"init\":{\"range\":[1278,1296],\"loc\":{\"start\":{\"line\":35,\"column\":15},\"end\":{\"line\":35,\"column\":33}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1278,1279],\"loc\":{\"start\":{\"line\":35,\"column\":15},\"end\":{\"line\":35,\"column\":16}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[1282,1296],\"loc\":{\"start\":{\"line\":35,\"column\":19},\"end\":{\"line\":35,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[1282,1292],\"loc\":{\"start\":{\"line\":35,\"column\":19},\"end\":{\"line\":35,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1282,1285],\"loc\":{\"start\":{\"line\":35,\"column\":19},\"end\":{\"line\":35,\"column\":22}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"property\":{\"range\":[1286,1292],\"loc\":{\"start\":{\"line\":35,\"column\":23},\"end\":{\"line\":35,\"column\":29}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[1295,1296],\"loc\":{\"start\":{\"line\":35,\"column\":32},\"end\":{\"line\":35,\"column\":33}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}},\"test\":{\"range\":[1298,1304],\"loc\":{\"start\":{\"line\":35,\"column\":35},\"end\":{\"line\":35,\"column\":41}},\"type\":\"BinaryExpression\",\"operator\":\">=\",\"left\":{\"range\":[1298,1299],\"loc\":{\"start\":{\"line\":35,\"column\":35},\"end\":{\"line\":35,\"column\":36}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[1303,1304],\"loc\":{\"start\":{\"line\":35,\"column\":40},\"end\":{\"line\":35,\"column\":41}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"update\":{\"range\":[1306,1315],\"loc\":{\"start\":{\"line\":35,\"column\":43},\"end\":{\"line\":35,\"column\":52}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[1306,1307],\"loc\":{\"start\":{\"line\":35,\"column\":43},\"end\":{\"line\":35,\"column\":44}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[1311,1315],\"loc\":{\"start\":{\"line\":35,\"column\":48},\"end\":{\"line\":35,\"column\":52}},\"type\":\"Identifier\",\"name\":\"step\"}},\"body\":{\"range\":[1317,1336],\"loc\":{\"start\":{\"line\":35,\"column\":54},\"end\":{\"line\":35,\"column\":73}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1317,1335],\"loc\":{\"start\":{\"line\":35,\"column\":54},\"end\":{\"line\":35,\"column\":72}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1317,1327],\"loc\":{\"start\":{\"line\":35,\"column\":54},\"end\":{\"line\":35,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1317,1320],\"loc\":{\"start\":{\"line\":35,\"column\":54},\"end\":{\"line\":35,\"column\":57}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[1321,1327],\"loc\":{\"start\":{\"line\":35,\"column\":58},\"end\":{\"line\":35,\"column\":64}},\"type\":\"Identifier\",\"name\":\"append\"}},\"arguments\":[{\"range\":[1328,1334],\"loc\":{\"start\":{\"line\":35,\"column\":65},\"end\":{\"line\":35,\"column\":71}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1328,1331],\"loc\":{\"start\":{\"line\":35,\"column\":65},\"end\":{\"line\":35,\"column\":68}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"property\":{\"range\":[1332,1333],\"loc\":{\"start\":{\"line\":35,\"column\":69},\"end\":{\"line\":35,\"column\":70}},\"type\":\"Identifier\",\"name\":\"i\"}}]}}}]},\"alternate\":{\"range\":[1352,1568],\"loc\":{\"start\":{\"line\":36,\"column\":15},\"end\":{\"line\":40,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[1364,1388],\"loc\":{\"start\":{\"line\":37,\"column\":10},\"end\":{\"line\":37,\"column\":34}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1364,1387],\"loc\":{\"start\":{\"line\":37,\"column\":10},\"end\":{\"line\":37,\"column\":33}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1364,1367],\"loc\":{\"start\":{\"line\":37,\"column\":10},\"end\":{\"line\":37,\"column\":13}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"right\":{\"range\":[1370,1387],\"loc\":{\"start\":{\"line\":37,\"column\":16},\"end\":{\"line\":37,\"column\":33}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1370,1375],\"loc\":{\"start\":{\"line\":37,\"column\":16},\"end\":{\"line\":37,\"column\":21}},\"type\":\"Identifier\",\"name\":\"slice\"},\"arguments\":[{\"range\":[1376,1381],\"loc\":{\"start\":{\"line\":37,\"column\":22},\"end\":{\"line\":37,\"column\":27}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[1383,1386],\"loc\":{\"start\":{\"line\":37,\"column\":29},\"end\":{\"line\":37,\"column\":32}},\"type\":\"Identifier\",\"name\":\"end\"}]}}},{\"range\":[1399,1558],\"loc\":{\"start\":{\"line\":38,\"column\":10},\"end\":{\"line\":39,\"column\":73}},\"type\":\"IfStatement\",\"test\":{\"range\":[1403,1440],\"loc\":{\"start\":{\"line\":38,\"column\":14},\"end\":{\"line\":38,\"column\":51}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[1403,1413],\"loc\":{\"start\":{\"line\":38,\"column\":14},\"end\":{\"line\":38,\"column\":24}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[1403,1407],\"loc\":{\"start\":{\"line\":38,\"column\":14},\"end\":{\"line\":38,\"column\":18}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[1412,1413],\"loc\":{\"start\":{\"line\":38,\"column\":23},\"end\":{\"line\":38,\"column\":24}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}},\"right\":{\"range\":[1417,1440],\"loc\":{\"start\":{\"line\":38,\"column\":28},\"end\":{\"line\":38,\"column\":51}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[1417,1427],\"loc\":{\"start\":{\"line\":38,\"column\":28},\"end\":{\"line\":38,\"column\":38}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[1424,1427],\"loc\":{\"start\":{\"line\":38,\"column\":35},\"end\":{\"line\":38,\"column\":38}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"prefix\":true},\"right\":{\"range\":[1432,1440],\"loc\":{\"start\":{\"line\":38,\"column\":43},\"end\":{\"line\":38,\"column\":51}},\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"'string'\"}}},\"consequent\":{\"range\":[1442,1484],\"loc\":{\"start\":{\"line\":38,\"column\":53},\"end\":{\"line\":38,\"column\":95}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1442,1483],\"loc\":{\"start\":{\"line\":38,\"column\":53},\"end\":{\"line\":38,\"column\":94}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1442,1445],\"loc\":{\"start\":{\"line\":38,\"column\":53},\"end\":{\"line\":38,\"column\":56}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[1448,1483],\"loc\":{\"start\":{\"line\":38,\"column\":59},\"end\":{\"line\":38,\"column\":94}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1448,1478],\"loc\":{\"start\":{\"line\":38,\"column\":59},\"end\":{\"line\":38,\"column\":89}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1448,1467],\"loc\":{\"start\":{\"line\":38,\"column\":59},\"end\":{\"line\":38,\"column\":78}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1448,1461],\"loc\":{\"start\":{\"line\":38,\"column\":59},\"end\":{\"line\":38,\"column\":72}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[1462,1467],\"loc\":{\"start\":{\"line\":38,\"column\":73},\"end\":{\"line\":38,\"column\":78}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[1468,1478],\"loc\":{\"start\":{\"line\":38,\"column\":79},\"end\":{\"line\":38,\"column\":89}},\"type\":\"Identifier\",\"name\":\"createList\"}},\"arguments\":[{\"range\":[1479,1482],\"loc\":{\"start\":{\"line\":38,\"column\":90},\"end\":{\"line\":38,\"column\":93}},\"type\":\"Identifier\",\"name\":\"tmp\"}]}}},\"alternate\":{\"range\":[1500,1558],\"loc\":{\"start\":{\"line\":39,\"column\":15},\"end\":{\"line\":39,\"column\":73}},\"type\":\"ForStatement\",\"init\":{\"range\":[1505,1510],\"loc\":{\"start\":{\"line\":39,\"column\":20},\"end\":{\"line\":39,\"column\":25}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1505,1506],\"loc\":{\"start\":{\"line\":39,\"column\":20},\"end\":{\"line\":39,\"column\":21}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[1509,1510],\"loc\":{\"start\":{\"line\":39,\"column\":24},\"end\":{\"line\":39,\"column\":25}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"test\":{\"range\":[1512,1526],\"loc\":{\"start\":{\"line\":39,\"column\":27},\"end\":{\"line\":39,\"column\":41}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[1512,1513],\"loc\":{\"start\":{\"line\":39,\"column\":27},\"end\":{\"line\":39,\"column\":28}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[1516,1526],\"loc\":{\"start\":{\"line\":39,\"column\":31},\"end\":{\"line\":39,\"column\":41}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1516,1519],\"loc\":{\"start\":{\"line\":39,\"column\":31},\"end\":{\"line\":39,\"column\":34}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"property\":{\"range\":[1520,1526],\"loc\":{\"start\":{\"line\":39,\"column\":35},\"end\":{\"line\":39,\"column\":41}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[1528,1537],\"loc\":{\"start\":{\"line\":39,\"column\":43},\"end\":{\"line\":39,\"column\":52}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[1528,1529],\"loc\":{\"start\":{\"line\":39,\"column\":43},\"end\":{\"line\":39,\"column\":44}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[1533,1537],\"loc\":{\"start\":{\"line\":39,\"column\":48},\"end\":{\"line\":39,\"column\":52}},\"type\":\"Identifier\",\"name\":\"step\"}},\"body\":{\"range\":[1539,1558],\"loc\":{\"start\":{\"line\":39,\"column\":54},\"end\":{\"line\":39,\"column\":73}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1539,1557],\"loc\":{\"start\":{\"line\":39,\"column\":54},\"end\":{\"line\":39,\"column\":72}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1539,1549],\"loc\":{\"start\":{\"line\":39,\"column\":54},\"end\":{\"line\":39,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1539,1542],\"loc\":{\"start\":{\"line\":39,\"column\":54},\"end\":{\"line\":39,\"column\":57}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[1543,1549],\"loc\":{\"start\":{\"line\":39,\"column\":58},\"end\":{\"line\":39,\"column\":64}},\"type\":\"Identifier\",\"name\":\"append\"}},\"arguments\":[{\"range\":[1550,1556],\"loc\":{\"start\":{\"line\":39,\"column\":65},\"end\":{\"line\":39,\"column\":71}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1550,1553],\"loc\":{\"start\":{\"line\":39,\"column\":65},\"end\":{\"line\":39,\"column\":68}},\"type\":\"Identifier\",\"name\":\"tmp\"},\"property\":{\"range\":[1554,1555],\"loc\":{\"start\":{\"line\":39,\"column\":69},\"end\":{\"line\":39,\"column\":70}},\"type\":\"Identifier\",\"name\":\"i\"}}]}}}}]}},{\"range\":[1577,1628],\"loc\":{\"start\":{\"line\":41,\"column\":8},\"end\":{\"line\":41,\"column\":59}},\"type\":\"IfStatement\",\"test\":{\"range\":[1582,1605],\"loc\":{\"start\":{\"line\":41,\"column\":13},\"end\":{\"line\":41,\"column\":36}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[1582,1592],\"loc\":{\"start\":{\"line\":41,\"column\":13},\"end\":{\"line\":41,\"column\":23}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[1589,1592],\"loc\":{\"start\":{\"line\":41,\"column\":20},\"end\":{\"line\":41,\"column\":23}},\"type\":\"Identifier\",\"name\":\"obj\"},\"prefix\":true},\"right\":{\"range\":[1597,1605],\"loc\":{\"start\":{\"line\":41,\"column\":28},\"end\":{\"line\":41,\"column\":36}},\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"'string'\"}},\"consequent\":{\"range\":[1608,1628],\"loc\":{\"start\":{\"line\":41,\"column\":39},\"end\":{\"line\":41,\"column\":59}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[1615,1627],\"loc\":{\"start\":{\"line\":41,\"column\":46},\"end\":{\"line\":41,\"column\":58}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1615,1623],\"loc\":{\"start\":{\"line\":41,\"column\":46},\"end\":{\"line\":41,\"column\":54}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1615,1618],\"loc\":{\"start\":{\"line\":41,\"column\":46},\"end\":{\"line\":41,\"column\":49}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[1619,1623],\"loc\":{\"start\":{\"line\":41,\"column\":50},\"end\":{\"line\":41,\"column\":54}},\"type\":\"Identifier\",\"name\":\"join\"}},\"arguments\":[{\"range\":[1624,1626],\"loc\":{\"start\":{\"line\":41,\"column\":55},\"end\":{\"line\":41,\"column\":57}},\"type\":\"Literal\",\"value\":\"\",\"raw\":\"''\"}]}},\"alternate\":null},{\"range\":[1637,1648],\"loc\":{\"start\":{\"line\":42,\"column\":8},\"end\":{\"line\":42,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[1644,1647],\"loc\":{\"start\":{\"line\":42,\"column\":15},\"end\":{\"line\":42,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[1664,1771],\"loc\":{\"start\":{\"line\":44,\"column\":6},\"end\":{\"line\":46,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[1664,1673],\"loc\":{\"start\":{\"line\":44,\"column\":6},\"end\":{\"line\":44,\"column\":15}},\"type\":\"Identifier\",\"name\":\"isJSArray\"},\"computed\":false,\"value\":{\"range\":[1675,1771],\"loc\":{\"start\":{\"line\":44,\"column\":17},\"end\":{\"line\":46,\"column\":7}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[1675,1688],\"loc\":{\"start\":{\"line\":44,\"column\":17},\"end\":{\"line\":44,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1675,1680],\"loc\":{\"start\":{\"line\":44,\"column\":17},\"end\":{\"line\":44,\"column\":22}},\"type\":\"Identifier\",\"name\":\"Array\"},\"property\":{\"range\":[1681,1688],\"loc\":{\"start\":{\"line\":44,\"column\":23},\"end\":{\"line\":44,\"column\":30}},\"type\":\"Identifier\",\"name\":\"isArray\"}},\"right\":{\"range\":[1692,1771],\"loc\":{\"start\":{\"line\":44,\"column\":34},\"end\":{\"line\":46,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[1701,1704],\"loc\":{\"start\":{\"line\":44,\"column\":43},\"end\":{\"line\":44,\"column\":46}},\"type\":\"Identifier\",\"name\":\"obj\"}],\"defaults\":[],\"body\":{\"range\":[1706,1771],\"loc\":{\"start\":{\"line\":44,\"column\":48},\"end\":{\"line\":46,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[1716,1763],\"loc\":{\"start\":{\"line\":45,\"column\":8},\"end\":{\"line\":45,\"column\":55}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[1723,1762],\"loc\":{\"start\":{\"line\":45,\"column\":15},\"end\":{\"line\":45,\"column\":54}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[1723,1741],\"loc\":{\"start\":{\"line\":45,\"column\":15},\"end\":{\"line\":45,\"column\":33}},\"type\":\"CallExpression\",\"callee\":{\"range\":[1723,1736],\"loc\":{\"start\":{\"line\":45,\"column\":15},\"end\":{\"line\":45,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1723,1731],\"loc\":{\"start\":{\"line\":45,\"column\":15},\"end\":{\"line\":45,\"column\":23}},\"type\":\"Identifier\",\"name\":\"toString\"},\"property\":{\"range\":[1732,1736],\"loc\":{\"start\":{\"line\":45,\"column\":24},\"end\":{\"line\":45,\"column\":28}},\"type\":\"Identifier\",\"name\":\"call\"}},\"arguments\":[{\"range\":[1737,1740],\"loc\":{\"start\":{\"line\":45,\"column\":29},\"end\":{\"line\":45,\"column\":32}},\"type\":\"Identifier\",\"name\":\"obj\"}]},\"right\":{\"range\":[1746,1762],\"loc\":{\"start\":{\"line\":45,\"column\":38},\"end\":{\"line\":45,\"column\":54}},\"type\":\"Literal\",\"value\":\"[object Array]\",\"raw\":\"'[object Array]'\"}}}]},\"generator\":false,\"expression\":false}},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[1784,9897],\"loc\":{\"start\":{\"line\":49,\"column\":4},\"end\":{\"line\":303,\"column\":5}},\"type\":\"Property\",\"key\":{\"range\":[1784,1789],\"loc\":{\"start\":{\"line\":49,\"column\":4},\"end\":{\"line\":49,\"column\":9}},\"type\":\"Identifier\",\"name\":\"utils\"},\"computed\":false,\"value\":{\"range\":[1791,9897],\"loc\":{\"start\":{\"line\":49,\"column\":11},\"end\":{\"line\":303,\"column\":5}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[1799,2127],\"loc\":{\"start\":{\"line\":50,\"column\":6},\"end\":{\"line\":57,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[1799,1809],\"loc\":{\"start\":{\"line\":50,\"column\":6},\"end\":{\"line\":50,\"column\":16}},\"type\":\"Identifier\",\"name\":\"createDict\"},\"computed\":false,\"value\":{\"range\":[1811,2127],\"loc\":{\"start\":{\"line\":50,\"column\":18},\"end\":{\"line\":57,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[1823,2127],\"loc\":{\"start\":{\"line\":50,\"column\":30},\"end\":{\"line\":57,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[1833,1876],\"loc\":{\"start\":{\"line\":51,\"column\":8},\"end\":{\"line\":51,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[1837,1875],\"loc\":{\"start\":{\"line\":51,\"column\":12},\"end\":{\"line\":51,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[1837,1840],\"loc\":{\"start\":{\"line\":51,\"column\":12},\"end\":{\"line\":51,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[1843,1875],\"loc\":{\"start\":{\"line\":51,\"column\":18},\"end\":{\"line\":51,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[1847,1873],\"loc\":{\"start\":{\"line\":51,\"column\":22},\"end\":{\"line\":51,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1847,1868],\"loc\":{\"start\":{\"line\":51,\"column\":22},\"end\":{\"line\":51,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1847,1860],\"loc\":{\"start\":{\"line\":51,\"column\":22},\"end\":{\"line\":51,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[1861,1868],\"loc\":{\"start\":{\"line\":51,\"column\":36},\"end\":{\"line\":51,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[1869,1873],\"loc\":{\"start\":{\"line\":51,\"column\":44},\"end\":{\"line\":51,\"column\":48}},\"type\":\"Identifier\",\"name\":\"dict\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[1885,2099],\"loc\":{\"start\":{\"line\":52,\"column\":8},\"end\":{\"line\":55,\"column\":75}},\"type\":\"IfStatement\",\"test\":{\"range\":[1889,1945],\"loc\":{\"start\":{\"line\":52,\"column\":12},\"end\":{\"line\":52,\"column\":68}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[1889,1911],\"loc\":{\"start\":{\"line\":52,\"column\":12},\"end\":{\"line\":52,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[1889,1905],\"loc\":{\"start\":{\"line\":52,\"column\":12},\"end\":{\"line\":52,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[1889,1898],\"loc\":{\"start\":{\"line\":52,\"column\":12},\"end\":{\"line\":52,\"column\":21}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[1899,1905],\"loc\":{\"start\":{\"line\":52,\"column\":22},\"end\":{\"line\":52,\"column\":28}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[1910,1911],\"loc\":{\"start\":{\"line\":52,\"column\":33},\"end\":{\"line\":52,\"column\":34}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}},\"right\":{\"range\":[1915,1945],\"loc\":{\"start\":{\"line\":52,\"column\":38},\"end\":{\"line\":52,\"column\":68}},\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"range\":[1915,1927],\"loc\":{\"start\":{\"line\":52,\"column\":38},\"end\":{\"line\":52,\"column\":50}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1915,1924],\"loc\":{\"start\":{\"line\":52,\"column\":38},\"end\":{\"line\":52,\"column\":47}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[1925,1926],\"loc\":{\"start\":{\"line\":52,\"column\":48},\"end\":{\"line\":52,\"column\":49}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"right\":{\"range\":[1939,1945],\"loc\":{\"start\":{\"line\":52,\"column\":62},\"end\":{\"line\":52,\"column\":68}},\"type\":\"Identifier\",\"name\":\"Object\"}}},\"consequent\":{\"range\":[1957,2010],\"loc\":{\"start\":{\"line\":53,\"column\":10},\"end\":{\"line\":53,\"column\":63}},\"type\":\"ForInStatement\",\"left\":{\"range\":[1962,1967],\"loc\":{\"start\":{\"line\":53,\"column\":15},\"end\":{\"line\":53,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[1966,1967],\"loc\":{\"start\":{\"line\":53,\"column\":19},\"end\":{\"line\":53,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[1966,1967],\"loc\":{\"start\":{\"line\":53,\"column\":19},\"end\":{\"line\":53,\"column\":20}},\"type\":\"Identifier\",\"name\":\"k\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[1971,1983],\"loc\":{\"start\":{\"line\":53,\"column\":24},\"end\":{\"line\":53,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1971,1980],\"loc\":{\"start\":{\"line\":53,\"column\":24},\"end\":{\"line\":53,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[1981,1982],\"loc\":{\"start\":{\"line\":53,\"column\":34},\"end\":{\"line\":53,\"column\":35}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"body\":{\"range\":[1985,2010],\"loc\":{\"start\":{\"line\":53,\"column\":38},\"end\":{\"line\":53,\"column\":63}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[1985,2009],\"loc\":{\"start\":{\"line\":53,\"column\":38},\"end\":{\"line\":53,\"column\":62}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[1985,1991],\"loc\":{\"start\":{\"line\":53,\"column\":38},\"end\":{\"line\":53,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1985,1988],\"loc\":{\"start\":{\"line\":53,\"column\":38},\"end\":{\"line\":53,\"column\":41}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[1989,1990],\"loc\":{\"start\":{\"line\":53,\"column\":42},\"end\":{\"line\":53,\"column\":43}},\"type\":\"Identifier\",\"name\":\"k\"}},\"right\":{\"range\":[1994,2009],\"loc\":{\"start\":{\"line\":53,\"column\":47},\"end\":{\"line\":53,\"column\":62}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1994,2006],\"loc\":{\"start\":{\"line\":53,\"column\":47},\"end\":{\"line\":53,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[1994,2003],\"loc\":{\"start\":{\"line\":53,\"column\":47},\"end\":{\"line\":53,\"column\":56}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2004,2005],\"loc\":{\"start\":{\"line\":53,\"column\":57},\"end\":{\"line\":53,\"column\":58}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"property\":{\"range\":[2007,2008],\"loc\":{\"start\":{\"line\":53,\"column\":60},\"end\":{\"line\":53,\"column\":61}},\"type\":\"Identifier\",\"name\":\"k\"}}}},\"each\":false},\"alternate\":{\"range\":[2034,2099],\"loc\":{\"start\":{\"line\":55,\"column\":10},\"end\":{\"line\":55,\"column\":75}},\"type\":\"ThrowStatement\",\"argument\":{\"range\":[2040,2098],\"loc\":{\"start\":{\"line\":55,\"column\":16},\"end\":{\"line\":55,\"column\":74}},\"type\":\"CallExpression\",\"callee\":{\"range\":[2040,2049],\"loc\":{\"start\":{\"line\":55,\"column\":16},\"end\":{\"line\":55,\"column\":25}},\"type\":\"Identifier\",\"name\":\"TypeError\"},\"arguments\":[{\"range\":[2050,2097],\"loc\":{\"start\":{\"line\":55,\"column\":26},\"end\":{\"line\":55,\"column\":73}},\"type\":\"Literal\",\"value\":\"createDict expects a single JavaScript object\",\"raw\":\"\\\"createDict expects a single JavaScript object\\\"\"}]}}},{\"range\":[2108,2119],\"loc\":{\"start\":{\"line\":56,\"column\":8},\"end\":{\"line\":56,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[2115,2118],\"loc\":{\"start\":{\"line\":56,\"column\":15},\"end\":{\"line\":56,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[2135,2749],\"loc\":{\"start\":{\"line\":58,\"column\":6},\"end\":{\"line\":70,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[2135,2150],\"loc\":{\"start\":{\"line\":58,\"column\":6},\"end\":{\"line\":58,\"column\":21}},\"type\":\"Identifier\",\"name\":\"createParamsObj\"},\"computed\":false,\"value\":{\"range\":[2152,2749],\"loc\":{\"start\":{\"line\":58,\"column\":23},\"end\":{\"line\":70,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[2164,2749],\"loc\":{\"start\":{\"line\":58,\"column\":35},\"end\":{\"line\":70,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[2334,2421],\"loc\":{\"start\":{\"line\":61,\"column\":8},\"end\":{\"line\":61,\"column\":95}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[2338,2420],\"loc\":{\"start\":{\"line\":61,\"column\":12},\"end\":{\"line\":61,\"column\":94}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[2338,2344],\"loc\":{\"start\":{\"line\":61,\"column\":12},\"end\":{\"line\":61,\"column\":18}},\"type\":\"Identifier\",\"name\":\"params\"},\"init\":{\"range\":[2347,2420],\"loc\":{\"start\":{\"line\":61,\"column\":21},\"end\":{\"line\":61,\"column\":94}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[2349,2390],\"loc\":{\"start\":{\"line\":61,\"column\":23},\"end\":{\"line\":61,\"column\":64}},\"type\":\"Property\",\"key\":{\"range\":[2349,2356],\"loc\":{\"start\":{\"line\":61,\"column\":23},\"end\":{\"line\":61,\"column\":30}},\"type\":\"Identifier\",\"name\":\"formals\"},\"computed\":false,\"value\":{\"range\":[2358,2390],\"loc\":{\"start\":{\"line\":61,\"column\":32},\"end\":{\"line\":61,\"column\":64}},\"type\":\"NewExpression\",\"callee\":{\"range\":[2362,2388],\"loc\":{\"start\":{\"line\":61,\"column\":36},\"end\":{\"line\":61,\"column\":62}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2362,2383],\"loc\":{\"start\":{\"line\":61,\"column\":36},\"end\":{\"line\":61,\"column\":57}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2362,2375],\"loc\":{\"start\":{\"line\":61,\"column\":36},\"end\":{\"line\":61,\"column\":49}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[2376,2383],\"loc\":{\"start\":{\"line\":61,\"column\":50},\"end\":{\"line\":61,\"column\":57}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[2384,2388],\"loc\":{\"start\":{\"line\":61,\"column\":58},\"end\":{\"line\":61,\"column\":62}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[2392,2418],\"loc\":{\"start\":{\"line\":61,\"column\":66},\"end\":{\"line\":61,\"column\":92}},\"type\":\"Property\",\"key\":{\"range\":[2392,2400],\"loc\":{\"start\":{\"line\":61,\"column\":66},\"end\":{\"line\":61,\"column\":74}},\"type\":\"Identifier\",\"name\":\"keywords\"},\"computed\":false,\"value\":{\"range\":[2402,2418],\"loc\":{\"start\":{\"line\":61,\"column\":76},\"end\":{\"line\":61,\"column\":92}},\"type\":\"NewExpression\",\"callee\":{\"range\":[2406,2416],\"loc\":{\"start\":{\"line\":61,\"column\":80},\"end\":{\"line\":61,\"column\":90}},\"type\":\"Identifier\",\"name\":\"PythonDict\"},\"arguments\":[]},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}}],\"kind\":\"var\"},{\"range\":[2430,2718],\"loc\":{\"start\":{\"line\":62,\"column\":8},\"end\":{\"line\":68,\"column\":9}},\"type\":\"ForStatement\",\"init\":{\"range\":[2435,2444],\"loc\":{\"start\":{\"line\":62,\"column\":13},\"end\":{\"line\":62,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[2439,2444],\"loc\":{\"start\":{\"line\":62,\"column\":17},\"end\":{\"line\":62,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[2439,2440],\"loc\":{\"start\":{\"line\":62,\"column\":17},\"end\":{\"line\":62,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[2443,2444],\"loc\":{\"start\":{\"line\":62,\"column\":21},\"end\":{\"line\":62,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[2446,2466],\"loc\":{\"start\":{\"line\":62,\"column\":24},\"end\":{\"line\":62,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[2446,2447],\"loc\":{\"start\":{\"line\":62,\"column\":24},\"end\":{\"line\":62,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[2450,2466],\"loc\":{\"start\":{\"line\":62,\"column\":28},\"end\":{\"line\":62,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2450,2459],\"loc\":{\"start\":{\"line\":62,\"column\":28},\"end\":{\"line\":62,\"column\":37}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2460,2466],\"loc\":{\"start\":{\"line\":62,\"column\":38},\"end\":{\"line\":62,\"column\":44}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[2468,2471],\"loc\":{\"start\":{\"line\":62,\"column\":46},\"end\":{\"line\":62,\"column\":49}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[2468,2469],\"loc\":{\"start\":{\"line\":62,\"column\":46},\"end\":{\"line\":62,\"column\":47}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[2473,2718],\"loc\":{\"start\":{\"line\":62,\"column\":51},\"end\":{\"line\":68,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[2485,2708],\"loc\":{\"start\":{\"line\":63,\"column\":10},\"end\":{\"line\":67,\"column\":49}},\"type\":\"IfStatement\",\"test\":{\"range\":[2489,2532],\"loc\":{\"start\":{\"line\":63,\"column\":14},\"end\":{\"line\":63,\"column\":57}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[2489,2501],\"loc\":{\"start\":{\"line\":63,\"column\":14},\"end\":{\"line\":63,\"column\":26}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2489,2498],\"loc\":{\"start\":{\"line\":63,\"column\":14},\"end\":{\"line\":63,\"column\":23}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2499,2500],\"loc\":{\"start\":{\"line\":63,\"column\":24},\"end\":{\"line\":63,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[2505,2532],\"loc\":{\"start\":{\"line\":63,\"column\":30},\"end\":{\"line\":63,\"column\":57}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[2505,2523],\"loc\":{\"start\":{\"line\":63,\"column\":30},\"end\":{\"line\":63,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2505,2517],\"loc\":{\"start\":{\"line\":63,\"column\":30},\"end\":{\"line\":63,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2505,2514],\"loc\":{\"start\":{\"line\":63,\"column\":30},\"end\":{\"line\":63,\"column\":39}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2515,2516],\"loc\":{\"start\":{\"line\":63,\"column\":40},\"end\":{\"line\":63,\"column\":41}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[2518,2523],\"loc\":{\"start\":{\"line\":63,\"column\":43},\"end\":{\"line\":63,\"column\":48}},\"type\":\"Identifier\",\"name\":\"__kwp\"}},\"right\":{\"range\":[2528,2532],\"loc\":{\"start\":{\"line\":63,\"column\":53},\"end\":{\"line\":63,\"column\":57}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}},\"consequent\":{\"range\":[2534,2658],\"loc\":{\"start\":{\"line\":63,\"column\":59},\"end\":{\"line\":66,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[2548,2646],\"loc\":{\"start\":{\"line\":64,\"column\":12},\"end\":{\"line\":65,\"column\":70}},\"type\":\"ForInStatement\",\"left\":{\"range\":[2553,2558],\"loc\":{\"start\":{\"line\":64,\"column\":17},\"end\":{\"line\":64,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[2557,2558],\"loc\":{\"start\":{\"line\":64,\"column\":21},\"end\":{\"line\":64,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[2557,2558],\"loc\":{\"start\":{\"line\":64,\"column\":21},\"end\":{\"line\":64,\"column\":22}},\"type\":\"Identifier\",\"name\":\"k\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[2562,2574],\"loc\":{\"start\":{\"line\":64,\"column\":26},\"end\":{\"line\":64,\"column\":38}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2562,2571],\"loc\":{\"start\":{\"line\":64,\"column\":26},\"end\":{\"line\":64,\"column\":35}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2572,2573],\"loc\":{\"start\":{\"line\":64,\"column\":36},\"end\":{\"line\":64,\"column\":37}},\"type\":\"Identifier\",\"name\":\"i\"}},\"body\":{\"range\":[2590,2646],\"loc\":{\"start\":{\"line\":65,\"column\":14},\"end\":{\"line\":65,\"column\":70}},\"type\":\"IfStatement\",\"test\":{\"range\":[2594,2607],\"loc\":{\"start\":{\"line\":65,\"column\":18},\"end\":{\"line\":65,\"column\":31}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[2594,2595],\"loc\":{\"start\":{\"line\":65,\"column\":18},\"end\":{\"line\":65,\"column\":19}},\"type\":\"Identifier\",\"name\":\"k\"},\"right\":{\"range\":[2600,2607],\"loc\":{\"start\":{\"line\":65,\"column\":24},\"end\":{\"line\":65,\"column\":31}},\"type\":\"Literal\",\"value\":\"__kwp\",\"raw\":\"'__kwp'\"}},\"consequent\":{\"range\":[2609,2646],\"loc\":{\"start\":{\"line\":65,\"column\":33},\"end\":{\"line\":65,\"column\":70}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[2609,2645],\"loc\":{\"start\":{\"line\":65,\"column\":33},\"end\":{\"line\":65,\"column\":69}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[2609,2627],\"loc\":{\"start\":{\"line\":65,\"column\":33},\"end\":{\"line\":65,\"column\":51}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2609,2624],\"loc\":{\"start\":{\"line\":65,\"column\":33},\"end\":{\"line\":65,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2609,2615],\"loc\":{\"start\":{\"line\":65,\"column\":33},\"end\":{\"line\":65,\"column\":39}},\"type\":\"Identifier\",\"name\":\"params\"},\"property\":{\"range\":[2616,2624],\"loc\":{\"start\":{\"line\":65,\"column\":40},\"end\":{\"line\":65,\"column\":48}},\"type\":\"Identifier\",\"name\":\"keywords\"}},\"property\":{\"range\":[2625,2626],\"loc\":{\"start\":{\"line\":65,\"column\":49},\"end\":{\"line\":65,\"column\":50}},\"type\":\"Identifier\",\"name\":\"k\"}},\"right\":{\"range\":[2630,2645],\"loc\":{\"start\":{\"line\":65,\"column\":54},\"end\":{\"line\":65,\"column\":69}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2630,2642],\"loc\":{\"start\":{\"line\":65,\"column\":54},\"end\":{\"line\":65,\"column\":66}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2630,2639],\"loc\":{\"start\":{\"line\":65,\"column\":54},\"end\":{\"line\":65,\"column\":63}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2640,2641],\"loc\":{\"start\":{\"line\":65,\"column\":64},\"end\":{\"line\":65,\"column\":65}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[2643,2644],\"loc\":{\"start\":{\"line\":65,\"column\":67},\"end\":{\"line\":65,\"column\":68}},\"type\":\"Identifier\",\"name\":\"k\"}}}},\"alternate\":null},\"each\":false}]},\"alternate\":{\"range\":[2674,2708],\"loc\":{\"start\":{\"line\":67,\"column\":15},\"end\":{\"line\":67,\"column\":49}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[2674,2707],\"loc\":{\"start\":{\"line\":67,\"column\":15},\"end\":{\"line\":67,\"column\":48}},\"type\":\"CallExpression\",\"callee\":{\"range\":[2674,2693],\"loc\":{\"start\":{\"line\":67,\"column\":15},\"end\":{\"line\":67,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2674,2688],\"loc\":{\"start\":{\"line\":67,\"column\":15},\"end\":{\"line\":67,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2674,2680],\"loc\":{\"start\":{\"line\":67,\"column\":15},\"end\":{\"line\":67,\"column\":21}},\"type\":\"Identifier\",\"name\":\"params\"},\"property\":{\"range\":[2681,2688],\"loc\":{\"start\":{\"line\":67,\"column\":22},\"end\":{\"line\":67,\"column\":29}},\"type\":\"Identifier\",\"name\":\"formals\"}},\"property\":{\"range\":[2689,2693],\"loc\":{\"start\":{\"line\":67,\"column\":30},\"end\":{\"line\":67,\"column\":34}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[2694,2706],\"loc\":{\"start\":{\"line\":67,\"column\":35},\"end\":{\"line\":67,\"column\":47}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[2694,2703],\"loc\":{\"start\":{\"line\":67,\"column\":35},\"end\":{\"line\":67,\"column\":44}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[2704,2705],\"loc\":{\"start\":{\"line\":67,\"column\":45},\"end\":{\"line\":67,\"column\":46}},\"type\":\"Identifier\",\"name\":\"i\"}}]}}}]}},{\"range\":[2727,2741],\"loc\":{\"start\":{\"line\":69,\"column\":8},\"end\":{\"line\":69,\"column\":22}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[2734,2740],\"loc\":{\"start\":{\"line\":69,\"column\":15},\"end\":{\"line\":69,\"column\":21}},\"type\":\"Identifier\",\"name\":\"params\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[2757,2901],\"loc\":{\"start\":{\"line\":71,\"column\":6},\"end\":{\"line\":74,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[2757,2770],\"loc\":{\"start\":{\"line\":71,\"column\":6},\"end\":{\"line\":71,\"column\":19}},\"type\":\"Identifier\",\"name\":\"convertToList\"},\"computed\":false,\"value\":{\"range\":[2772,2901],\"loc\":{\"start\":{\"line\":71,\"column\":21},\"end\":{\"line\":74,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[2782,2786],\"loc\":{\"start\":{\"line\":71,\"column\":31},\"end\":{\"line\":71,\"column\":35}},\"type\":\"Identifier\",\"name\":\"list\"}],\"defaults\":[],\"body\":{\"range\":[2788,2901],\"loc\":{\"start\":{\"line\":71,\"column\":37},\"end\":{\"line\":74,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[2798,2872],\"loc\":{\"start\":{\"line\":72,\"column\":8},\"end\":{\"line\":72,\"column\":82}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[2798,2871],\"loc\":{\"start\":{\"line\":72,\"column\":8},\"end\":{\"line\":72,\"column\":81}},\"type\":\"CallExpression\",\"callee\":{\"range\":[2798,2821],\"loc\":{\"start\":{\"line\":72,\"column\":8},\"end\":{\"line\":72,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2798,2804],\"loc\":{\"start\":{\"line\":72,\"column\":8},\"end\":{\"line\":72,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[2805,2821],\"loc\":{\"start\":{\"line\":72,\"column\":15},\"end\":{\"line\":72,\"column\":31}},\"type\":\"Identifier\",\"name\":\"defineProperties\"}},\"arguments\":[{\"range\":[2822,2826],\"loc\":{\"start\":{\"line\":72,\"column\":32},\"end\":{\"line\":72,\"column\":36}},\"type\":\"Identifier\",\"name\":\"list\"},{\"range\":[2828,2870],\"loc\":{\"start\":{\"line\":72,\"column\":38},\"end\":{\"line\":72,\"column\":80}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2828,2847],\"loc\":{\"start\":{\"line\":72,\"column\":38},\"end\":{\"line\":72,\"column\":57}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2828,2841],\"loc\":{\"start\":{\"line\":72,\"column\":38},\"end\":{\"line\":72,\"column\":51}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[2842,2847],\"loc\":{\"start\":{\"line\":72,\"column\":52},\"end\":{\"line\":72,\"column\":57}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[2848,2870],\"loc\":{\"start\":{\"line\":72,\"column\":58},\"end\":{\"line\":72,\"column\":80}},\"type\":\"Identifier\",\"name\":\"listPropertyDescriptor\"}}]}},{\"range\":[2881,2893],\"loc\":{\"start\":{\"line\":73,\"column\":8},\"end\":{\"line\":73,\"column\":20}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[2888,2892],\"loc\":{\"start\":{\"line\":73,\"column\":15},\"end\":{\"line\":73,\"column\":19}},\"type\":\"Identifier\",\"name\":\"list\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[2909,3053],\"loc\":{\"start\":{\"line\":75,\"column\":6},\"end\":{\"line\":78,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[2909,2922],\"loc\":{\"start\":{\"line\":75,\"column\":6},\"end\":{\"line\":75,\"column\":19}},\"type\":\"Identifier\",\"name\":\"convertToDict\"},\"computed\":false,\"value\":{\"range\":[2924,3053],\"loc\":{\"start\":{\"line\":75,\"column\":21},\"end\":{\"line\":78,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[2934,2938],\"loc\":{\"start\":{\"line\":75,\"column\":31},\"end\":{\"line\":75,\"column\":35}},\"type\":\"Identifier\",\"name\":\"dict\"}],\"defaults\":[],\"body\":{\"range\":[2940,3053],\"loc\":{\"start\":{\"line\":75,\"column\":37},\"end\":{\"line\":78,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[2950,3024],\"loc\":{\"start\":{\"line\":76,\"column\":8},\"end\":{\"line\":76,\"column\":82}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[2950,3023],\"loc\":{\"start\":{\"line\":76,\"column\":8},\"end\":{\"line\":76,\"column\":81}},\"type\":\"CallExpression\",\"callee\":{\"range\":[2950,2973],\"loc\":{\"start\":{\"line\":76,\"column\":8},\"end\":{\"line\":76,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2950,2956],\"loc\":{\"start\":{\"line\":76,\"column\":8},\"end\":{\"line\":76,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[2957,2973],\"loc\":{\"start\":{\"line\":76,\"column\":15},\"end\":{\"line\":76,\"column\":31}},\"type\":\"Identifier\",\"name\":\"defineProperties\"}},\"arguments\":[{\"range\":[2974,2978],\"loc\":{\"start\":{\"line\":76,\"column\":32},\"end\":{\"line\":76,\"column\":36}},\"type\":\"Identifier\",\"name\":\"dict\"},{\"range\":[2980,3022],\"loc\":{\"start\":{\"line\":76,\"column\":38},\"end\":{\"line\":76,\"column\":80}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2980,2999],\"loc\":{\"start\":{\"line\":76,\"column\":38},\"end\":{\"line\":76,\"column\":57}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[2980,2993],\"loc\":{\"start\":{\"line\":76,\"column\":38},\"end\":{\"line\":76,\"column\":51}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[2994,2999],\"loc\":{\"start\":{\"line\":76,\"column\":52},\"end\":{\"line\":76,\"column\":57}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[3000,3022],\"loc\":{\"start\":{\"line\":76,\"column\":58},\"end\":{\"line\":76,\"column\":80}},\"type\":\"Identifier\",\"name\":\"dictPropertyDescriptor\"}}]}},{\"range\":[3033,3045],\"loc\":{\"start\":{\"line\":77,\"column\":8},\"end\":{\"line\":77,\"column\":20}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[3040,3044],\"loc\":{\"start\":{\"line\":77,\"column\":15},\"end\":{\"line\":77,\"column\":19}},\"type\":\"Identifier\",\"name\":\"dict\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3062,7781],\"loc\":{\"start\":{\"line\":79,\"column\":6},\"end\":{\"line\":231,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[3062,3084],\"loc\":{\"start\":{\"line\":79,\"column\":6},\"end\":{\"line\":79,\"column\":28}},\"type\":\"Identifier\",\"name\":\"listPropertyDescriptor\"},\"computed\":false,\"value\":{\"range\":[3086,7781],\"loc\":{\"start\":{\"line\":79,\"column\":30},\"end\":{\"line\":231,\"column\":7}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3098,3199],\"loc\":{\"start\":{\"line\":80,\"column\":10},\"end\":{\"line\":83,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[3098,3105],\"loc\":{\"start\":{\"line\":80,\"column\":10},\"end\":{\"line\":80,\"column\":17}},\"type\":\"Literal\",\"value\":\"_type\",\"raw\":\"\\\"_type\\\"\"},\"computed\":false,\"value\":{\"range\":[3107,3199],\"loc\":{\"start\":{\"line\":80,\"column\":19},\"end\":{\"line\":83,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3121,3156],\"loc\":{\"start\":{\"line\":81,\"column\":12},\"end\":{\"line\":81,\"column\":47}},\"type\":\"Property\",\"key\":{\"range\":[3121,3124],\"loc\":{\"start\":{\"line\":81,\"column\":12},\"end\":{\"line\":81,\"column\":15}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[3126,3156],\"loc\":{\"start\":{\"line\":81,\"column\":17},\"end\":{\"line\":81,\"column\":47}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[3138,3156],\"loc\":{\"start\":{\"line\":81,\"column\":29},\"end\":{\"line\":81,\"column\":47}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[3140,3154],\"loc\":{\"start\":{\"line\":81,\"column\":31},\"end\":{\"line\":81,\"column\":45}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[3147,3153],\"loc\":{\"start\":{\"line\":81,\"column\":38},\"end\":{\"line\":81,\"column\":44}},\"type\":\"Literal\",\"value\":\"list\",\"raw\":\"'list'\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3170,3187],\"loc\":{\"start\":{\"line\":82,\"column\":12},\"end\":{\"line\":82,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[3170,3180],\"loc\":{\"start\":{\"line\":82,\"column\":12},\"end\":{\"line\":82,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[3182,3187],\"loc\":{\"start\":{\"line\":82,\"column\":24},\"end\":{\"line\":82,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3211,3314],\"loc\":{\"start\":{\"line\":84,\"column\":10},\"end\":{\"line\":87,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[3211,3222],\"loc\":{\"start\":{\"line\":84,\"column\":10},\"end\":{\"line\":84,\"column\":21}},\"type\":\"Literal\",\"value\":\"_isPython\",\"raw\":\"\\\"_isPython\\\"\"},\"computed\":false,\"value\":{\"range\":[3224,3314],\"loc\":{\"start\":{\"line\":84,\"column\":23},\"end\":{\"line\":87,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3238,3271],\"loc\":{\"start\":{\"line\":85,\"column\":12},\"end\":{\"line\":85,\"column\":45}},\"type\":\"Property\",\"key\":{\"range\":[3238,3241],\"loc\":{\"start\":{\"line\":85,\"column\":12},\"end\":{\"line\":85,\"column\":15}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[3243,3271],\"loc\":{\"start\":{\"line\":85,\"column\":17},\"end\":{\"line\":85,\"column\":45}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[3255,3271],\"loc\":{\"start\":{\"line\":85,\"column\":29},\"end\":{\"line\":85,\"column\":45}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[3257,3269],\"loc\":{\"start\":{\"line\":85,\"column\":31},\"end\":{\"line\":85,\"column\":43}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[3264,3268],\"loc\":{\"start\":{\"line\":85,\"column\":38},\"end\":{\"line\":85,\"column\":42}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3285,3302],\"loc\":{\"start\":{\"line\":86,\"column\":12},\"end\":{\"line\":86,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[3285,3295],\"loc\":{\"start\":{\"line\":86,\"column\":12},\"end\":{\"line\":86,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[3297,3302],\"loc\":{\"start\":{\"line\":86,\"column\":24},\"end\":{\"line\":86,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3326,3456],\"loc\":{\"start\":{\"line\":88,\"column\":10},\"end\":{\"line\":93,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[3326,3334],\"loc\":{\"start\":{\"line\":88,\"column\":10},\"end\":{\"line\":88,\"column\":18}},\"type\":\"Literal\",\"value\":\"append\",\"raw\":\"\\\"append\\\"\"},\"computed\":false,\"value\":{\"range\":[3336,3456],\"loc\":{\"start\":{\"line\":88,\"column\":20},\"end\":{\"line\":93,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3350,3413],\"loc\":{\"start\":{\"line\":89,\"column\":12},\"end\":{\"line\":91,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[3350,3355],\"loc\":{\"start\":{\"line\":89,\"column\":12},\"end\":{\"line\":89,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[3357,3413],\"loc\":{\"start\":{\"line\":89,\"column\":19},\"end\":{\"line\":91,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[3367,3368],\"loc\":{\"start\":{\"line\":89,\"column\":29},\"end\":{\"line\":89,\"column\":30}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[3370,3413],\"loc\":{\"start\":{\"line\":89,\"column\":32},\"end\":{\"line\":91,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[3386,3399],\"loc\":{\"start\":{\"line\":90,\"column\":14},\"end\":{\"line\":90,\"column\":27}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[3386,3398],\"loc\":{\"start\":{\"line\":90,\"column\":14},\"end\":{\"line\":90,\"column\":26}},\"type\":\"CallExpression\",\"callee\":{\"range\":[3386,3395],\"loc\":{\"start\":{\"line\":90,\"column\":14},\"end\":{\"line\":90,\"column\":23}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[3386,3390],\"loc\":{\"start\":{\"line\":90,\"column\":14},\"end\":{\"line\":90,\"column\":18}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[3391,3395],\"loc\":{\"start\":{\"line\":90,\"column\":19},\"end\":{\"line\":90,\"column\":23}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[3396,3397],\"loc\":{\"start\":{\"line\":90,\"column\":24},\"end\":{\"line\":90,\"column\":25}},\"type\":\"Identifier\",\"name\":\"x\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3427,3444],\"loc\":{\"start\":{\"line\":92,\"column\":12},\"end\":{\"line\":92,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[3427,3437],\"loc\":{\"start\":{\"line\":92,\"column\":12},\"end\":{\"line\":92,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[3439,3444],\"loc\":{\"start\":{\"line\":92,\"column\":24},\"end\":{\"line\":92,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3468,3611],\"loc\":{\"start\":{\"line\":94,\"column\":10},\"end\":{\"line\":99,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[3468,3475],\"loc\":{\"start\":{\"line\":94,\"column\":10},\"end\":{\"line\":94,\"column\":17}},\"type\":\"Literal\",\"value\":\"clear\",\"raw\":\"\\\"clear\\\"\"},\"computed\":false,\"value\":{\"range\":[3477,3611],\"loc\":{\"start\":{\"line\":94,\"column\":19},\"end\":{\"line\":99,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3491,3568],\"loc\":{\"start\":{\"line\":95,\"column\":12},\"end\":{\"line\":97,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[3491,3496],\"loc\":{\"start\":{\"line\":95,\"column\":12},\"end\":{\"line\":95,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[3498,3568],\"loc\":{\"start\":{\"line\":95,\"column\":19},\"end\":{\"line\":97,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[3510,3568],\"loc\":{\"start\":{\"line\":95,\"column\":31},\"end\":{\"line\":97,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[3526,3554],\"loc\":{\"start\":{\"line\":96,\"column\":14},\"end\":{\"line\":96,\"column\":42}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[3526,3553],\"loc\":{\"start\":{\"line\":96,\"column\":14},\"end\":{\"line\":96,\"column\":41}},\"type\":\"CallExpression\",\"callee\":{\"range\":[3526,3537],\"loc\":{\"start\":{\"line\":96,\"column\":14},\"end\":{\"line\":96,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[3526,3530],\"loc\":{\"start\":{\"line\":96,\"column\":14},\"end\":{\"line\":96,\"column\":18}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[3531,3537],\"loc\":{\"start\":{\"line\":96,\"column\":19},\"end\":{\"line\":96,\"column\":25}},\"type\":\"Identifier\",\"name\":\"splice\"}},\"arguments\":[{\"range\":[3538,3539],\"loc\":{\"start\":{\"line\":96,\"column\":26},\"end\":{\"line\":96,\"column\":27}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"},{\"range\":[3541,3552],\"loc\":{\"start\":{\"line\":96,\"column\":29},\"end\":{\"line\":96,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[3541,3545],\"loc\":{\"start\":{\"line\":96,\"column\":29},\"end\":{\"line\":96,\"column\":33}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[3546,3552],\"loc\":{\"start\":{\"line\":96,\"column\":34},\"end\":{\"line\":96,\"column\":40}},\"type\":\"Identifier\",\"name\":\"length\"}}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3582,3599],\"loc\":{\"start\":{\"line\":98,\"column\":12},\"end\":{\"line\":98,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[3582,3592],\"loc\":{\"start\":{\"line\":98,\"column\":12},\"end\":{\"line\":98,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[3594,3599],\"loc\":{\"start\":{\"line\":98,\"column\":24},\"end\":{\"line\":98,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3623,3758],\"loc\":{\"start\":{\"line\":100,\"column\":10},\"end\":{\"line\":105,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[3623,3629],\"loc\":{\"start\":{\"line\":100,\"column\":10},\"end\":{\"line\":100,\"column\":16}},\"type\":\"Literal\",\"value\":\"copy\",\"raw\":\"\\\"copy\\\"\"},\"computed\":false,\"value\":{\"range\":[3631,3758],\"loc\":{\"start\":{\"line\":100,\"column\":18},\"end\":{\"line\":105,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3645,3715],\"loc\":{\"start\":{\"line\":101,\"column\":12},\"end\":{\"line\":103,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[3645,3650],\"loc\":{\"start\":{\"line\":101,\"column\":12},\"end\":{\"line\":101,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[3652,3715],\"loc\":{\"start\":{\"line\":101,\"column\":19},\"end\":{\"line\":103,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[3664,3715],\"loc\":{\"start\":{\"line\":101,\"column\":31},\"end\":{\"line\":103,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[3680,3701],\"loc\":{\"start\":{\"line\":102,\"column\":14},\"end\":{\"line\":102,\"column\":35}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[3687,3700],\"loc\":{\"start\":{\"line\":102,\"column\":21},\"end\":{\"line\":102,\"column\":34}},\"type\":\"CallExpression\",\"callee\":{\"range\":[3687,3697],\"loc\":{\"start\":{\"line\":102,\"column\":21},\"end\":{\"line\":102,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[3687,3691],\"loc\":{\"start\":{\"line\":102,\"column\":21},\"end\":{\"line\":102,\"column\":25}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[3692,3697],\"loc\":{\"start\":{\"line\":102,\"column\":26},\"end\":{\"line\":102,\"column\":31}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[3698,3699],\"loc\":{\"start\":{\"line\":102,\"column\":32},\"end\":{\"line\":102,\"column\":33}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3729,3746],\"loc\":{\"start\":{\"line\":104,\"column\":12},\"end\":{\"line\":104,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[3729,3739],\"loc\":{\"start\":{\"line\":104,\"column\":12},\"end\":{\"line\":104,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[3741,3746],\"loc\":{\"start\":{\"line\":104,\"column\":24},\"end\":{\"line\":104,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3770,4012],\"loc\":{\"start\":{\"line\":106,\"column\":10},\"end\":{\"line\":114,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[3770,3777],\"loc\":{\"start\":{\"line\":106,\"column\":10},\"end\":{\"line\":106,\"column\":17}},\"type\":\"Literal\",\"value\":\"count\",\"raw\":\"\\\"count\\\"\"},\"computed\":false,\"value\":{\"range\":[3779,4012],\"loc\":{\"start\":{\"line\":106,\"column\":19},\"end\":{\"line\":114,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[3793,3969],\"loc\":{\"start\":{\"line\":107,\"column\":12},\"end\":{\"line\":112,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[3793,3798],\"loc\":{\"start\":{\"line\":107,\"column\":12},\"end\":{\"line\":107,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[3800,3969],\"loc\":{\"start\":{\"line\":107,\"column\":19},\"end\":{\"line\":112,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[3810,3811],\"loc\":{\"start\":{\"line\":107,\"column\":29},\"end\":{\"line\":107,\"column\":30}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[3813,3969],\"loc\":{\"start\":{\"line\":107,\"column\":32},\"end\":{\"line\":112,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[3829,3839],\"loc\":{\"start\":{\"line\":108,\"column\":14},\"end\":{\"line\":108,\"column\":24}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[3833,3838],\"loc\":{\"start\":{\"line\":108,\"column\":18},\"end\":{\"line\":108,\"column\":23}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[3833,3834],\"loc\":{\"start\":{\"line\":108,\"column\":18},\"end\":{\"line\":108,\"column\":19}},\"type\":\"Identifier\",\"name\":\"c\"},\"init\":{\"range\":[3837,3838],\"loc\":{\"start\":{\"line\":108,\"column\":22},\"end\":{\"line\":108,\"column\":23}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},{\"range\":[3854,3931],\"loc\":{\"start\":{\"line\":109,\"column\":14},\"end\":{\"line\":110,\"column\":39}},\"type\":\"ForStatement\",\"init\":{\"range\":[3859,3868],\"loc\":{\"start\":{\"line\":109,\"column\":19},\"end\":{\"line\":109,\"column\":28}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[3863,3868],\"loc\":{\"start\":{\"line\":109,\"column\":23},\"end\":{\"line\":109,\"column\":28}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[3863,3864],\"loc\":{\"start\":{\"line\":109,\"column\":23},\"end\":{\"line\":109,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[3867,3868],\"loc\":{\"start\":{\"line\":109,\"column\":27},\"end\":{\"line\":109,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[3870,3885],\"loc\":{\"start\":{\"line\":109,\"column\":30},\"end\":{\"line\":109,\"column\":45}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[3870,3871],\"loc\":{\"start\":{\"line\":109,\"column\":30},\"end\":{\"line\":109,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[3874,3885],\"loc\":{\"start\":{\"line\":109,\"column\":34},\"end\":{\"line\":109,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[3874,3878],\"loc\":{\"start\":{\"line\":109,\"column\":34},\"end\":{\"line\":109,\"column\":38}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[3879,3885],\"loc\":{\"start\":{\"line\":109,\"column\":39},\"end\":{\"line\":109,\"column\":45}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[3887,3890],\"loc\":{\"start\":{\"line\":109,\"column\":47},\"end\":{\"line\":109,\"column\":50}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[3887,3888],\"loc\":{\"start\":{\"line\":109,\"column\":47},\"end\":{\"line\":109,\"column\":48}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[3908,3931],\"loc\":{\"start\":{\"line\":110,\"column\":16},\"end\":{\"line\":110,\"column\":39}},\"type\":\"IfStatement\",\"test\":{\"range\":[3912,3925],\"loc\":{\"start\":{\"line\":110,\"column\":20},\"end\":{\"line\":110,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[3912,3919],\"loc\":{\"start\":{\"line\":110,\"column\":20},\"end\":{\"line\":110,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[3912,3916],\"loc\":{\"start\":{\"line\":110,\"column\":20},\"end\":{\"line\":110,\"column\":24}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[3917,3918],\"loc\":{\"start\":{\"line\":110,\"column\":25},\"end\":{\"line\":110,\"column\":26}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[3924,3925],\"loc\":{\"start\":{\"line\":110,\"column\":32},\"end\":{\"line\":110,\"column\":33}},\"type\":\"Identifier\",\"name\":\"x\"}},\"consequent\":{\"range\":[3927,3931],\"loc\":{\"start\":{\"line\":110,\"column\":35},\"end\":{\"line\":110,\"column\":39}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[3927,3930],\"loc\":{\"start\":{\"line\":110,\"column\":35},\"end\":{\"line\":110,\"column\":38}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[3927,3928],\"loc\":{\"start\":{\"line\":110,\"column\":35},\"end\":{\"line\":110,\"column\":36}},\"type\":\"Identifier\",\"name\":\"c\"},\"prefix\":false}},\"alternate\":null}},{\"range\":[3946,3955],\"loc\":{\"start\":{\"line\":111,\"column\":14},\"end\":{\"line\":111,\"column\":23}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[3953,3954],\"loc\":{\"start\":{\"line\":111,\"column\":21},\"end\":{\"line\":111,\"column\":22}},\"type\":\"Identifier\",\"name\":\"c\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[3983,4000],\"loc\":{\"start\":{\"line\":113,\"column\":12},\"end\":{\"line\":113,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[3983,3993],\"loc\":{\"start\":{\"line\":113,\"column\":12},\"end\":{\"line\":113,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[3995,4000],\"loc\":{\"start\":{\"line\":113,\"column\":24},\"end\":{\"line\":113,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4024,4561],\"loc\":{\"start\":{\"line\":115,\"column\":10},\"end\":{\"line\":130,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[4024,4032],\"loc\":{\"start\":{\"line\":115,\"column\":10},\"end\":{\"line\":115,\"column\":18}},\"type\":\"Literal\",\"value\":\"equals\",\"raw\":\"\\\"equals\\\"\"},\"computed\":false,\"value\":{\"range\":[4034,4561],\"loc\":{\"start\":{\"line\":115,\"column\":20},\"end\":{\"line\":130,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[4048,4518],\"loc\":{\"start\":{\"line\":116,\"column\":12},\"end\":{\"line\":128,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[4048,4053],\"loc\":{\"start\":{\"line\":116,\"column\":12},\"end\":{\"line\":116,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[4055,4518],\"loc\":{\"start\":{\"line\":116,\"column\":19},\"end\":{\"line\":128,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[4065,4066],\"loc\":{\"start\":{\"line\":116,\"column\":29},\"end\":{\"line\":116,\"column\":30}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[4068,4518],\"loc\":{\"start\":{\"line\":116,\"column\":32},\"end\":{\"line\":128,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4084,4476],\"loc\":{\"start\":{\"line\":117,\"column\":14},\"end\":{\"line\":126,\"column\":27}},\"type\":\"TryStatement\",\"block\":{\"range\":[4088,4448],\"loc\":{\"start\":{\"line\":117,\"column\":18},\"end\":{\"line\":125,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4106,4149],\"loc\":{\"start\":{\"line\":118,\"column\":16},\"end\":{\"line\":118,\"column\":59}},\"type\":\"IfStatement\",\"test\":{\"range\":[4110,4134],\"loc\":{\"start\":{\"line\":118,\"column\":20},\"end\":{\"line\":118,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[4110,4121],\"loc\":{\"start\":{\"line\":118,\"column\":20},\"end\":{\"line\":118,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4110,4114],\"loc\":{\"start\":{\"line\":118,\"column\":20},\"end\":{\"line\":118,\"column\":24}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4115,4121],\"loc\":{\"start\":{\"line\":118,\"column\":25},\"end\":{\"line\":118,\"column\":31}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[4126,4134],\"loc\":{\"start\":{\"line\":118,\"column\":36},\"end\":{\"line\":118,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4126,4127],\"loc\":{\"start\":{\"line\":118,\"column\":36},\"end\":{\"line\":118,\"column\":37}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[4128,4134],\"loc\":{\"start\":{\"line\":118,\"column\":38},\"end\":{\"line\":118,\"column\":44}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"consequent\":{\"range\":[4136,4149],\"loc\":{\"start\":{\"line\":118,\"column\":46},\"end\":{\"line\":118,\"column\":59}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[4143,4148],\"loc\":{\"start\":{\"line\":118,\"column\":53},\"end\":{\"line\":118,\"column\":58}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null},{\"range\":[4166,4403],\"loc\":{\"start\":{\"line\":119,\"column\":16},\"end\":{\"line\":123,\"column\":17}},\"type\":\"ForStatement\",\"init\":{\"range\":[4171,4180],\"loc\":{\"start\":{\"line\":119,\"column\":21},\"end\":{\"line\":119,\"column\":30}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[4175,4180],\"loc\":{\"start\":{\"line\":119,\"column\":25},\"end\":{\"line\":119,\"column\":30}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[4175,4176],\"loc\":{\"start\":{\"line\":119,\"column\":25},\"end\":{\"line\":119,\"column\":26}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[4179,4180],\"loc\":{\"start\":{\"line\":119,\"column\":29},\"end\":{\"line\":119,\"column\":30}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[4182,4197],\"loc\":{\"start\":{\"line\":119,\"column\":32},\"end\":{\"line\":119,\"column\":47}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[4182,4183],\"loc\":{\"start\":{\"line\":119,\"column\":32},\"end\":{\"line\":119,\"column\":33}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[4186,4197],\"loc\":{\"start\":{\"line\":119,\"column\":36},\"end\":{\"line\":119,\"column\":47}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4186,4190],\"loc\":{\"start\":{\"line\":119,\"column\":36},\"end\":{\"line\":119,\"column\":40}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4191,4197],\"loc\":{\"start\":{\"line\":119,\"column\":41},\"end\":{\"line\":119,\"column\":47}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[4199,4202],\"loc\":{\"start\":{\"line\":119,\"column\":49},\"end\":{\"line\":119,\"column\":52}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[4199,4200],\"loc\":{\"start\":{\"line\":119,\"column\":49},\"end\":{\"line\":119,\"column\":50}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[4204,4403],\"loc\":{\"start\":{\"line\":119,\"column\":54},\"end\":{\"line\":123,\"column\":17}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4224,4385],\"loc\":{\"start\":{\"line\":120,\"column\":18},\"end\":{\"line\":122,\"column\":60}},\"type\":\"IfStatement\",\"test\":{\"range\":[4228,4260],\"loc\":{\"start\":{\"line\":120,\"column\":22},\"end\":{\"line\":120,\"column\":54}},\"type\":\"CallExpression\",\"callee\":{\"range\":[4228,4250],\"loc\":{\"start\":{\"line\":120,\"column\":22},\"end\":{\"line\":120,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4228,4235],\"loc\":{\"start\":{\"line\":120,\"column\":22},\"end\":{\"line\":120,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[4228,4232],\"loc\":{\"start\":{\"line\":120,\"column\":22},\"end\":{\"line\":120,\"column\":26}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4233,4234],\"loc\":{\"start\":{\"line\":120,\"column\":27},\"end\":{\"line\":120,\"column\":28}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[4236,4250],\"loc\":{\"start\":{\"line\":120,\"column\":30},\"end\":{\"line\":120,\"column\":44}},\"type\":\"Identifier\",\"name\":\"hasOwnProperty\"}},\"arguments\":[{\"range\":[4251,4259],\"loc\":{\"start\":{\"line\":120,\"column\":45},\"end\":{\"line\":120,\"column\":53}},\"type\":\"Literal\",\"value\":\"equals\",\"raw\":\"\\\"equals\\\"\"}]},\"consequent\":{\"range\":[4262,4344],\"loc\":{\"start\":{\"line\":120,\"column\":56},\"end\":{\"line\":122,\"column\":19}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4284,4324],\"loc\":{\"start\":{\"line\":121,\"column\":20},\"end\":{\"line\":121,\"column\":60}},\"type\":\"IfStatement\",\"test\":{\"range\":[4288,4309],\"loc\":{\"start\":{\"line\":121,\"column\":24},\"end\":{\"line\":121,\"column\":45}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[4289,4309],\"loc\":{\"start\":{\"line\":121,\"column\":25},\"end\":{\"line\":121,\"column\":45}},\"type\":\"CallExpression\",\"callee\":{\"range\":[4289,4303],\"loc\":{\"start\":{\"line\":121,\"column\":25},\"end\":{\"line\":121,\"column\":39}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4289,4296],\"loc\":{\"start\":{\"line\":121,\"column\":25},\"end\":{\"line\":121,\"column\":32}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[4289,4293],\"loc\":{\"start\":{\"line\":121,\"column\":25},\"end\":{\"line\":121,\"column\":29}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4294,4295],\"loc\":{\"start\":{\"line\":121,\"column\":30},\"end\":{\"line\":121,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[4297,4303],\"loc\":{\"start\":{\"line\":121,\"column\":33},\"end\":{\"line\":121,\"column\":39}},\"type\":\"Identifier\",\"name\":\"equals\"}},\"arguments\":[{\"range\":[4304,4308],\"loc\":{\"start\":{\"line\":121,\"column\":40},\"end\":{\"line\":121,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[4304,4305],\"loc\":{\"start\":{\"line\":121,\"column\":40},\"end\":{\"line\":121,\"column\":41}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[4306,4307],\"loc\":{\"start\":{\"line\":121,\"column\":42},\"end\":{\"line\":121,\"column\":43}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"prefix\":true},\"consequent\":{\"range\":[4311,4324],\"loc\":{\"start\":{\"line\":121,\"column\":47},\"end\":{\"line\":121,\"column\":60}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[4318,4323],\"loc\":{\"start\":{\"line\":121,\"column\":54},\"end\":{\"line\":121,\"column\":59}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null}]},\"alternate\":{\"range\":[4350,4385],\"loc\":{\"start\":{\"line\":122,\"column\":25},\"end\":{\"line\":122,\"column\":60}},\"type\":\"IfStatement\",\"test\":{\"range\":[4354,4370],\"loc\":{\"start\":{\"line\":122,\"column\":29},\"end\":{\"line\":122,\"column\":45}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[4354,4361],\"loc\":{\"start\":{\"line\":122,\"column\":29},\"end\":{\"line\":122,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[4354,4358],\"loc\":{\"start\":{\"line\":122,\"column\":29},\"end\":{\"line\":122,\"column\":33}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4359,4360],\"loc\":{\"start\":{\"line\":122,\"column\":34},\"end\":{\"line\":122,\"column\":35}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[4366,4370],\"loc\":{\"start\":{\"line\":122,\"column\":41},\"end\":{\"line\":122,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[4366,4367],\"loc\":{\"start\":{\"line\":122,\"column\":41},\"end\":{\"line\":122,\"column\":42}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[4368,4369],\"loc\":{\"start\":{\"line\":122,\"column\":43},\"end\":{\"line\":122,\"column\":44}},\"type\":\"Identifier\",\"name\":\"i\"}}},\"consequent\":{\"range\":[4372,4385],\"loc\":{\"start\":{\"line\":122,\"column\":47},\"end\":{\"line\":122,\"column\":60}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[4379,4384],\"loc\":{\"start\":{\"line\":122,\"column\":54},\"end\":{\"line\":122,\"column\":59}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null}}]}},{\"range\":[4420,4432],\"loc\":{\"start\":{\"line\":124,\"column\":16},\"end\":{\"line\":124,\"column\":28}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[4427,4431],\"loc\":{\"start\":{\"line\":124,\"column\":23},\"end\":{\"line\":124,\"column\":27}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"guardedHandlers\":[],\"handlers\":[{\"range\":[4463,4476],\"loc\":{\"start\":{\"line\":126,\"column\":14},\"end\":{\"line\":126,\"column\":27}},\"type\":\"CatchClause\",\"param\":{\"range\":[4470,4471],\"loc\":{\"start\":{\"line\":126,\"column\":21},\"end\":{\"line\":126,\"column\":22}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[4473,4476],\"loc\":{\"start\":{\"line\":126,\"column\":24},\"end\":{\"line\":126,\"column\":27}},\"type\":\"BlockStatement\",\"body\":[]}}],\"handler\":{\"range\":[4463,4476],\"loc\":{\"start\":{\"line\":126,\"column\":14},\"end\":{\"line\":126,\"column\":27}},\"type\":\"CatchClause\",\"param\":{\"range\":[4470,4471],\"loc\":{\"start\":{\"line\":126,\"column\":21},\"end\":{\"line\":126,\"column\":22}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[4473,4476],\"loc\":{\"start\":{\"line\":126,\"column\":24},\"end\":{\"line\":126,\"column\":27}},\"type\":\"BlockStatement\",\"body\":[]}},\"finalizer\":null},{\"range\":[4491,4504],\"loc\":{\"start\":{\"line\":127,\"column\":14},\"end\":{\"line\":127,\"column\":27}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[4498,4503],\"loc\":{\"start\":{\"line\":127,\"column\":21},\"end\":{\"line\":127,\"column\":26}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4532,4549],\"loc\":{\"start\":{\"line\":129,\"column\":12},\"end\":{\"line\":129,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[4532,4542],\"loc\":{\"start\":{\"line\":129,\"column\":12},\"end\":{\"line\":129,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[4544,4549],\"loc\":{\"start\":{\"line\":129,\"column\":24},\"end\":{\"line\":129,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4573,4741],\"loc\":{\"start\":{\"line\":131,\"column\":10},\"end\":{\"line\":136,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[4573,4581],\"loc\":{\"start\":{\"line\":131,\"column\":10},\"end\":{\"line\":131,\"column\":18}},\"type\":\"Literal\",\"value\":\"extend\",\"raw\":\"\\\"extend\\\"\"},\"computed\":false,\"value\":{\"range\":[4583,4741],\"loc\":{\"start\":{\"line\":131,\"column\":20},\"end\":{\"line\":136,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[4597,4698],\"loc\":{\"start\":{\"line\":132,\"column\":12},\"end\":{\"line\":134,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[4597,4602],\"loc\":{\"start\":{\"line\":132,\"column\":12},\"end\":{\"line\":132,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[4604,4698],\"loc\":{\"start\":{\"line\":132,\"column\":19},\"end\":{\"line\":134,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[4614,4615],\"loc\":{\"start\":{\"line\":132,\"column\":29},\"end\":{\"line\":132,\"column\":30}},\"type\":\"Identifier\",\"name\":\"L\"}],\"defaults\":[],\"body\":{\"range\":[4617,4698],\"loc\":{\"start\":{\"line\":132,\"column\":32},\"end\":{\"line\":134,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4633,4684],\"loc\":{\"start\":{\"line\":133,\"column\":14},\"end\":{\"line\":133,\"column\":65}},\"type\":\"ForStatement\",\"init\":{\"range\":[4638,4647],\"loc\":{\"start\":{\"line\":133,\"column\":19},\"end\":{\"line\":133,\"column\":28}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[4642,4647],\"loc\":{\"start\":{\"line\":133,\"column\":23},\"end\":{\"line\":133,\"column\":28}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[4642,4643],\"loc\":{\"start\":{\"line\":133,\"column\":23},\"end\":{\"line\":133,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[4646,4647],\"loc\":{\"start\":{\"line\":133,\"column\":27},\"end\":{\"line\":133,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[4649,4661],\"loc\":{\"start\":{\"line\":133,\"column\":30},\"end\":{\"line\":133,\"column\":42}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[4649,4650],\"loc\":{\"start\":{\"line\":133,\"column\":30},\"end\":{\"line\":133,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[4653,4661],\"loc\":{\"start\":{\"line\":133,\"column\":34},\"end\":{\"line\":133,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4653,4654],\"loc\":{\"start\":{\"line\":133,\"column\":34},\"end\":{\"line\":133,\"column\":35}},\"type\":\"Identifier\",\"name\":\"L\"},\"property\":{\"range\":[4655,4661],\"loc\":{\"start\":{\"line\":133,\"column\":36},\"end\":{\"line\":133,\"column\":42}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[4663,4666],\"loc\":{\"start\":{\"line\":133,\"column\":44},\"end\":{\"line\":133,\"column\":47}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[4663,4664],\"loc\":{\"start\":{\"line\":133,\"column\":44},\"end\":{\"line\":133,\"column\":45}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[4668,4684],\"loc\":{\"start\":{\"line\":133,\"column\":49},\"end\":{\"line\":133,\"column\":65}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[4668,4683],\"loc\":{\"start\":{\"line\":133,\"column\":49},\"end\":{\"line\":133,\"column\":64}},\"type\":\"CallExpression\",\"callee\":{\"range\":[4668,4677],\"loc\":{\"start\":{\"line\":133,\"column\":49},\"end\":{\"line\":133,\"column\":58}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4668,4672],\"loc\":{\"start\":{\"line\":133,\"column\":49},\"end\":{\"line\":133,\"column\":53}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4673,4677],\"loc\":{\"start\":{\"line\":133,\"column\":54},\"end\":{\"line\":133,\"column\":58}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[4678,4682],\"loc\":{\"start\":{\"line\":133,\"column\":59},\"end\":{\"line\":133,\"column\":63}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[4678,4679],\"loc\":{\"start\":{\"line\":133,\"column\":59},\"end\":{\"line\":133,\"column\":60}},\"type\":\"Identifier\",\"name\":\"L\"},\"property\":{\"range\":[4680,4681],\"loc\":{\"start\":{\"line\":133,\"column\":61},\"end\":{\"line\":133,\"column\":62}},\"type\":\"Identifier\",\"name\":\"i\"}}]}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4712,4729],\"loc\":{\"start\":{\"line\":135,\"column\":12},\"end\":{\"line\":135,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[4712,4722],\"loc\":{\"start\":{\"line\":135,\"column\":12},\"end\":{\"line\":135,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[4724,4729],\"loc\":{\"start\":{\"line\":135,\"column\":24},\"end\":{\"line\":135,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4753,4892],\"loc\":{\"start\":{\"line\":137,\"column\":10},\"end\":{\"line\":142,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[4753,4760],\"loc\":{\"start\":{\"line\":137,\"column\":10},\"end\":{\"line\":137,\"column\":17}},\"type\":\"Literal\",\"value\":\"index\",\"raw\":\"\\\"index\\\"\"},\"computed\":false,\"value\":{\"range\":[4762,4892],\"loc\":{\"start\":{\"line\":137,\"column\":19},\"end\":{\"line\":142,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[4776,4849],\"loc\":{\"start\":{\"line\":138,\"column\":12},\"end\":{\"line\":140,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[4776,4781],\"loc\":{\"start\":{\"line\":138,\"column\":12},\"end\":{\"line\":138,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[4783,4849],\"loc\":{\"start\":{\"line\":138,\"column\":19},\"end\":{\"line\":140,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[4793,4794],\"loc\":{\"start\":{\"line\":138,\"column\":29},\"end\":{\"line\":138,\"column\":30}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[4796,4849],\"loc\":{\"start\":{\"line\":138,\"column\":32},\"end\":{\"line\":140,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4812,4835],\"loc\":{\"start\":{\"line\":139,\"column\":14},\"end\":{\"line\":139,\"column\":37}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[4819,4834],\"loc\":{\"start\":{\"line\":139,\"column\":21},\"end\":{\"line\":139,\"column\":36}},\"type\":\"CallExpression\",\"callee\":{\"range\":[4819,4831],\"loc\":{\"start\":{\"line\":139,\"column\":21},\"end\":{\"line\":139,\"column\":33}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[4819,4823],\"loc\":{\"start\":{\"line\":139,\"column\":21},\"end\":{\"line\":139,\"column\":25}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[4824,4831],\"loc\":{\"start\":{\"line\":139,\"column\":26},\"end\":{\"line\":139,\"column\":33}},\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"range\":[4832,4833],\"loc\":{\"start\":{\"line\":139,\"column\":34},\"end\":{\"line\":139,\"column\":35}},\"type\":\"Identifier\",\"name\":\"x\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4863,4880],\"loc\":{\"start\":{\"line\":141,\"column\":12},\"end\":{\"line\":141,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[4863,4873],\"loc\":{\"start\":{\"line\":141,\"column\":12},\"end\":{\"line\":141,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[4875,4880],\"loc\":{\"start\":{\"line\":141,\"column\":24},\"end\":{\"line\":141,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[4904,5370],\"loc\":{\"start\":{\"line\":143,\"column\":10},\"end\":{\"line\":156,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[4904,4913],\"loc\":{\"start\":{\"line\":143,\"column\":10},\"end\":{\"line\":143,\"column\":19}},\"type\":\"Literal\",\"value\":\"indexOf\",\"raw\":\"\\\"indexOf\\\"\"},\"computed\":false,\"value\":{\"range\":[4915,5370],\"loc\":{\"start\":{\"line\":143,\"column\":21},\"end\":{\"line\":156,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[4929,5327],\"loc\":{\"start\":{\"line\":144,\"column\":12},\"end\":{\"line\":154,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[4929,4934],\"loc\":{\"start\":{\"line\":144,\"column\":12},\"end\":{\"line\":144,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[4936,5327],\"loc\":{\"start\":{\"line\":144,\"column\":19},\"end\":{\"line\":154,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[4946,4947],\"loc\":{\"start\":{\"line\":144,\"column\":29},\"end\":{\"line\":144,\"column\":30}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[4949,4958],\"loc\":{\"start\":{\"line\":144,\"column\":32},\"end\":{\"line\":144,\"column\":41}},\"type\":\"Identifier\",\"name\":\"fromIndex\"}],\"defaults\":[],\"body\":{\"range\":[4960,5327],\"loc\":{\"start\":{\"line\":144,\"column\":43},\"end\":{\"line\":154,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4976,5288],\"loc\":{\"start\":{\"line\":145,\"column\":14},\"end\":{\"line\":152,\"column\":27}},\"type\":\"TryStatement\",\"block\":{\"range\":[4980,5260],\"loc\":{\"start\":{\"line\":145,\"column\":18},\"end\":{\"line\":151,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[4998,5244],\"loc\":{\"start\":{\"line\":146,\"column\":16},\"end\":{\"line\":150,\"column\":17}},\"type\":\"ForStatement\",\"init\":{\"range\":[5003,5036],\"loc\":{\"start\":{\"line\":146,\"column\":21},\"end\":{\"line\":146,\"column\":54}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[5007,5036],\"loc\":{\"start\":{\"line\":146,\"column\":25},\"end\":{\"line\":146,\"column\":54}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[5007,5008],\"loc\":{\"start\":{\"line\":146,\"column\":25},\"end\":{\"line\":146,\"column\":26}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[5011,5036],\"loc\":{\"start\":{\"line\":146,\"column\":29},\"end\":{\"line\":146,\"column\":54}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[5011,5020],\"loc\":{\"start\":{\"line\":146,\"column\":29},\"end\":{\"line\":146,\"column\":38}},\"type\":\"Identifier\",\"name\":\"fromIndex\"},\"consequent\":{\"range\":[5023,5032],\"loc\":{\"start\":{\"line\":146,\"column\":41},\"end\":{\"line\":146,\"column\":50}},\"type\":\"Identifier\",\"name\":\"fromIndex\"},\"alternate\":{\"range\":[5035,5036],\"loc\":{\"start\":{\"line\":146,\"column\":53},\"end\":{\"line\":146,\"column\":54}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}],\"kind\":\"var\"},\"test\":{\"range\":[5038,5053],\"loc\":{\"start\":{\"line\":146,\"column\":56},\"end\":{\"line\":146,\"column\":71}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[5038,5039],\"loc\":{\"start\":{\"line\":146,\"column\":56},\"end\":{\"line\":146,\"column\":57}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[5042,5053],\"loc\":{\"start\":{\"line\":146,\"column\":60},\"end\":{\"line\":146,\"column\":71}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5042,5046],\"loc\":{\"start\":{\"line\":146,\"column\":60},\"end\":{\"line\":146,\"column\":64}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5047,5053],\"loc\":{\"start\":{\"line\":146,\"column\":65},\"end\":{\"line\":146,\"column\":71}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[5055,5058],\"loc\":{\"start\":{\"line\":146,\"column\":73},\"end\":{\"line\":146,\"column\":76}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[5055,5056],\"loc\":{\"start\":{\"line\":146,\"column\":73},\"end\":{\"line\":146,\"column\":74}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[5060,5244],\"loc\":{\"start\":{\"line\":146,\"column\":78},\"end\":{\"line\":150,\"column\":17}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[5080,5226],\"loc\":{\"start\":{\"line\":147,\"column\":18},\"end\":{\"line\":149,\"column\":53}},\"type\":\"IfStatement\",\"test\":{\"range\":[5084,5116],\"loc\":{\"start\":{\"line\":147,\"column\":22},\"end\":{\"line\":147,\"column\":54}},\"type\":\"CallExpression\",\"callee\":{\"range\":[5084,5106],\"loc\":{\"start\":{\"line\":147,\"column\":22},\"end\":{\"line\":147,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5084,5091],\"loc\":{\"start\":{\"line\":147,\"column\":22},\"end\":{\"line\":147,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[5084,5088],\"loc\":{\"start\":{\"line\":147,\"column\":22},\"end\":{\"line\":147,\"column\":26}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5089,5090],\"loc\":{\"start\":{\"line\":147,\"column\":27},\"end\":{\"line\":147,\"column\":28}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[5092,5106],\"loc\":{\"start\":{\"line\":147,\"column\":30},\"end\":{\"line\":147,\"column\":44}},\"type\":\"Identifier\",\"name\":\"hasOwnProperty\"}},\"arguments\":[{\"range\":[5107,5115],\"loc\":{\"start\":{\"line\":147,\"column\":45},\"end\":{\"line\":147,\"column\":53}},\"type\":\"Literal\",\"value\":\"equals\",\"raw\":\"\\\"equals\\\"\"}]},\"consequent\":{\"range\":[5118,5192],\"loc\":{\"start\":{\"line\":147,\"column\":56},\"end\":{\"line\":149,\"column\":19}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[5140,5172],\"loc\":{\"start\":{\"line\":148,\"column\":20},\"end\":{\"line\":148,\"column\":52}},\"type\":\"IfStatement\",\"test\":{\"range\":[5144,5161],\"loc\":{\"start\":{\"line\":148,\"column\":24},\"end\":{\"line\":148,\"column\":41}},\"type\":\"CallExpression\",\"callee\":{\"range\":[5144,5158],\"loc\":{\"start\":{\"line\":148,\"column\":24},\"end\":{\"line\":148,\"column\":38}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5144,5151],\"loc\":{\"start\":{\"line\":148,\"column\":24},\"end\":{\"line\":148,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[5144,5148],\"loc\":{\"start\":{\"line\":148,\"column\":24},\"end\":{\"line\":148,\"column\":28}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5149,5150],\"loc\":{\"start\":{\"line\":148,\"column\":29},\"end\":{\"line\":148,\"column\":30}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[5152,5158],\"loc\":{\"start\":{\"line\":148,\"column\":32},\"end\":{\"line\":148,\"column\":38}},\"type\":\"Identifier\",\"name\":\"equals\"}},\"arguments\":[{\"range\":[5159,5160],\"loc\":{\"start\":{\"line\":148,\"column\":39},\"end\":{\"line\":148,\"column\":40}},\"type\":\"Identifier\",\"name\":\"x\"}]},\"consequent\":{\"range\":[5163,5172],\"loc\":{\"start\":{\"line\":148,\"column\":43},\"end\":{\"line\":148,\"column\":52}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[5170,5171],\"loc\":{\"start\":{\"line\":148,\"column\":50},\"end\":{\"line\":148,\"column\":51}},\"type\":\"Identifier\",\"name\":\"i\"}},\"alternate\":null}]},\"alternate\":{\"range\":[5198,5226],\"loc\":{\"start\":{\"line\":149,\"column\":25},\"end\":{\"line\":149,\"column\":53}},\"type\":\"IfStatement\",\"test\":{\"range\":[5202,5215],\"loc\":{\"start\":{\"line\":149,\"column\":29},\"end\":{\"line\":149,\"column\":42}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[5202,5209],\"loc\":{\"start\":{\"line\":149,\"column\":29},\"end\":{\"line\":149,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[5202,5206],\"loc\":{\"start\":{\"line\":149,\"column\":29},\"end\":{\"line\":149,\"column\":33}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5207,5208],\"loc\":{\"start\":{\"line\":149,\"column\":34},\"end\":{\"line\":149,\"column\":35}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[5214,5215],\"loc\":{\"start\":{\"line\":149,\"column\":41},\"end\":{\"line\":149,\"column\":42}},\"type\":\"Identifier\",\"name\":\"x\"}},\"consequent\":{\"range\":[5217,5226],\"loc\":{\"start\":{\"line\":149,\"column\":44},\"end\":{\"line\":149,\"column\":53}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[5224,5225],\"loc\":{\"start\":{\"line\":149,\"column\":51},\"end\":{\"line\":149,\"column\":52}},\"type\":\"Identifier\",\"name\":\"i\"}},\"alternate\":null}}]}}]},\"guardedHandlers\":[],\"handlers\":[{\"range\":[5275,5288],\"loc\":{\"start\":{\"line\":152,\"column\":14},\"end\":{\"line\":152,\"column\":27}},\"type\":\"CatchClause\",\"param\":{\"range\":[5282,5283],\"loc\":{\"start\":{\"line\":152,\"column\":21},\"end\":{\"line\":152,\"column\":22}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[5285,5288],\"loc\":{\"start\":{\"line\":152,\"column\":24},\"end\":{\"line\":152,\"column\":27}},\"type\":\"BlockStatement\",\"body\":[]}}],\"handler\":{\"range\":[5275,5288],\"loc\":{\"start\":{\"line\":152,\"column\":14},\"end\":{\"line\":152,\"column\":27}},\"type\":\"CatchClause\",\"param\":{\"range\":[5282,5283],\"loc\":{\"start\":{\"line\":152,\"column\":21},\"end\":{\"line\":152,\"column\":22}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[5285,5288],\"loc\":{\"start\":{\"line\":152,\"column\":24},\"end\":{\"line\":152,\"column\":27}},\"type\":\"BlockStatement\",\"body\":[]}},\"finalizer\":null},{\"range\":[5303,5313],\"loc\":{\"start\":{\"line\":153,\"column\":14},\"end\":{\"line\":153,\"column\":24}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[5310,5312],\"loc\":{\"start\":{\"line\":153,\"column\":21},\"end\":{\"line\":153,\"column\":23}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[5311,5312],\"loc\":{\"start\":{\"line\":153,\"column\":22},\"end\":{\"line\":153,\"column\":23}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"},\"prefix\":true}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5341,5358],\"loc\":{\"start\":{\"line\":155,\"column\":12},\"end\":{\"line\":155,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[5341,5351],\"loc\":{\"start\":{\"line\":155,\"column\":12},\"end\":{\"line\":155,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[5353,5358],\"loc\":{\"start\":{\"line\":155,\"column\":24},\"end\":{\"line\":155,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5382,5523],\"loc\":{\"start\":{\"line\":157,\"column\":10},\"end\":{\"line\":162,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[5382,5390],\"loc\":{\"start\":{\"line\":157,\"column\":10},\"end\":{\"line\":157,\"column\":18}},\"type\":\"Literal\",\"value\":\"insert\",\"raw\":\"\\\"insert\\\"\"},\"computed\":false,\"value\":{\"range\":[5392,5523],\"loc\":{\"start\":{\"line\":157,\"column\":20},\"end\":{\"line\":162,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[5406,5480],\"loc\":{\"start\":{\"line\":158,\"column\":12},\"end\":{\"line\":160,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[5406,5411],\"loc\":{\"start\":{\"line\":158,\"column\":12},\"end\":{\"line\":158,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[5413,5480],\"loc\":{\"start\":{\"line\":158,\"column\":19},\"end\":{\"line\":160,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[5423,5424],\"loc\":{\"start\":{\"line\":158,\"column\":29},\"end\":{\"line\":158,\"column\":30}},\"type\":\"Identifier\",\"name\":\"i\"},{\"range\":[5426,5427],\"loc\":{\"start\":{\"line\":158,\"column\":32},\"end\":{\"line\":158,\"column\":33}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[5429,5480],\"loc\":{\"start\":{\"line\":158,\"column\":35},\"end\":{\"line\":160,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[5445,5466],\"loc\":{\"start\":{\"line\":159,\"column\":14},\"end\":{\"line\":159,\"column\":35}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[5445,5465],\"loc\":{\"start\":{\"line\":159,\"column\":14},\"end\":{\"line\":159,\"column\":34}},\"type\":\"CallExpression\",\"callee\":{\"range\":[5445,5456],\"loc\":{\"start\":{\"line\":159,\"column\":14},\"end\":{\"line\":159,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5445,5449],\"loc\":{\"start\":{\"line\":159,\"column\":14},\"end\":{\"line\":159,\"column\":18}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5450,5456],\"loc\":{\"start\":{\"line\":159,\"column\":19},\"end\":{\"line\":159,\"column\":25}},\"type\":\"Identifier\",\"name\":\"splice\"}},\"arguments\":[{\"range\":[5457,5458],\"loc\":{\"start\":{\"line\":159,\"column\":26},\"end\":{\"line\":159,\"column\":27}},\"type\":\"Identifier\",\"name\":\"i\"},{\"range\":[5460,5461],\"loc\":{\"start\":{\"line\":159,\"column\":29},\"end\":{\"line\":159,\"column\":30}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"},{\"range\":[5463,5464],\"loc\":{\"start\":{\"line\":159,\"column\":32},\"end\":{\"line\":159,\"column\":33}},\"type\":\"Identifier\",\"name\":\"x\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5494,5511],\"loc\":{\"start\":{\"line\":161,\"column\":12},\"end\":{\"line\":161,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[5494,5504],\"loc\":{\"start\":{\"line\":161,\"column\":12},\"end\":{\"line\":161,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[5506,5511],\"loc\":{\"start\":{\"line\":161,\"column\":24},\"end\":{\"line\":161,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5535,5787],\"loc\":{\"start\":{\"line\":163,\"column\":10},\"end\":{\"line\":172,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[5535,5540],\"loc\":{\"start\":{\"line\":163,\"column\":10},\"end\":{\"line\":163,\"column\":15}},\"type\":\"Literal\",\"value\":\"pop\",\"raw\":\"\\\"pop\\\"\"},\"computed\":false,\"value\":{\"range\":[5542,5787],\"loc\":{\"start\":{\"line\":163,\"column\":17},\"end\":{\"line\":172,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[5556,5744],\"loc\":{\"start\":{\"line\":164,\"column\":12},\"end\":{\"line\":170,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[5556,5561],\"loc\":{\"start\":{\"line\":164,\"column\":12},\"end\":{\"line\":164,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[5563,5744],\"loc\":{\"start\":{\"line\":164,\"column\":19},\"end\":{\"line\":170,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[5573,5574],\"loc\":{\"start\":{\"line\":164,\"column\":29},\"end\":{\"line\":164,\"column\":30}},\"type\":\"Identifier\",\"name\":\"i\"}],\"defaults\":[],\"body\":{\"range\":[5576,5744],\"loc\":{\"start\":{\"line\":164,\"column\":32},\"end\":{\"line\":170,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[5592,5636],\"loc\":{\"start\":{\"line\":165,\"column\":14},\"end\":{\"line\":166,\"column\":36}},\"type\":\"IfStatement\",\"test\":{\"range\":[5596,5598],\"loc\":{\"start\":{\"line\":165,\"column\":18},\"end\":{\"line\":165,\"column\":20}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[5597,5598],\"loc\":{\"start\":{\"line\":165,\"column\":19},\"end\":{\"line\":165,\"column\":20}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":true},\"consequent\":{\"range\":[5616,5636],\"loc\":{\"start\":{\"line\":166,\"column\":16},\"end\":{\"line\":166,\"column\":36}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[5616,5635],\"loc\":{\"start\":{\"line\":166,\"column\":16},\"end\":{\"line\":166,\"column\":35}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[5616,5617],\"loc\":{\"start\":{\"line\":166,\"column\":16},\"end\":{\"line\":166,\"column\":17}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[5620,5635],\"loc\":{\"start\":{\"line\":166,\"column\":20},\"end\":{\"line\":166,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[5620,5631],\"loc\":{\"start\":{\"line\":166,\"column\":20},\"end\":{\"line\":166,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5620,5624],\"loc\":{\"start\":{\"line\":166,\"column\":20},\"end\":{\"line\":166,\"column\":24}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5625,5631],\"loc\":{\"start\":{\"line\":166,\"column\":25},\"end\":{\"line\":166,\"column\":31}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[5634,5635],\"loc\":{\"start\":{\"line\":166,\"column\":34},\"end\":{\"line\":166,\"column\":35}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}}},\"alternate\":null},{\"range\":[5651,5670],\"loc\":{\"start\":{\"line\":167,\"column\":14},\"end\":{\"line\":167,\"column\":33}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[5655,5669],\"loc\":{\"start\":{\"line\":167,\"column\":18},\"end\":{\"line\":167,\"column\":32}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[5655,5659],\"loc\":{\"start\":{\"line\":167,\"column\":18},\"end\":{\"line\":167,\"column\":22}},\"type\":\"Identifier\",\"name\":\"item\"},\"init\":{\"range\":[5662,5669],\"loc\":{\"start\":{\"line\":167,\"column\":25},\"end\":{\"line\":167,\"column\":32}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[5662,5666],\"loc\":{\"start\":{\"line\":167,\"column\":25},\"end\":{\"line\":167,\"column\":29}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5667,5668],\"loc\":{\"start\":{\"line\":167,\"column\":30},\"end\":{\"line\":167,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"}}}],\"kind\":\"var\"},{\"range\":[5685,5703],\"loc\":{\"start\":{\"line\":168,\"column\":14},\"end\":{\"line\":168,\"column\":32}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[5685,5702],\"loc\":{\"start\":{\"line\":168,\"column\":14},\"end\":{\"line\":168,\"column\":31}},\"type\":\"CallExpression\",\"callee\":{\"range\":[5685,5696],\"loc\":{\"start\":{\"line\":168,\"column\":14},\"end\":{\"line\":168,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5685,5689],\"loc\":{\"start\":{\"line\":168,\"column\":14},\"end\":{\"line\":168,\"column\":18}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[5690,5696],\"loc\":{\"start\":{\"line\":168,\"column\":19},\"end\":{\"line\":168,\"column\":25}},\"type\":\"Identifier\",\"name\":\"splice\"}},\"arguments\":[{\"range\":[5697,5698],\"loc\":{\"start\":{\"line\":168,\"column\":26},\"end\":{\"line\":168,\"column\":27}},\"type\":\"Identifier\",\"name\":\"i\"},{\"range\":[5700,5701],\"loc\":{\"start\":{\"line\":168,\"column\":29},\"end\":{\"line\":168,\"column\":30}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}]}},{\"range\":[5718,5730],\"loc\":{\"start\":{\"line\":169,\"column\":14},\"end\":{\"line\":169,\"column\":26}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[5725,5729],\"loc\":{\"start\":{\"line\":169,\"column\":21},\"end\":{\"line\":169,\"column\":25}},\"type\":\"Identifier\",\"name\":\"item\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5758,5775],\"loc\":{\"start\":{\"line\":171,\"column\":12},\"end\":{\"line\":171,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[5758,5768],\"loc\":{\"start\":{\"line\":171,\"column\":12},\"end\":{\"line\":171,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[5770,5775],\"loc\":{\"start\":{\"line\":171,\"column\":24},\"end\":{\"line\":171,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5799,5993],\"loc\":{\"start\":{\"line\":173,\"column\":10},\"end\":{\"line\":178,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[5799,5809],\"loc\":{\"start\":{\"line\":173,\"column\":10},\"end\":{\"line\":173,\"column\":20}},\"type\":\"Literal\",\"value\":\"_pySlice\",\"raw\":\"\\\"_pySlice\\\"\"},\"computed\":false,\"value\":{\"range\":[5811,5993],\"loc\":{\"start\":{\"line\":173,\"column\":22},\"end\":{\"line\":178,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[5825,5950],\"loc\":{\"start\":{\"line\":174,\"column\":12},\"end\":{\"line\":176,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[5825,5830],\"loc\":{\"start\":{\"line\":174,\"column\":12},\"end\":{\"line\":174,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[5832,5950],\"loc\":{\"start\":{\"line\":174,\"column\":19},\"end\":{\"line\":176,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[5842,5847],\"loc\":{\"start\":{\"line\":174,\"column\":29},\"end\":{\"line\":174,\"column\":34}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[5849,5852],\"loc\":{\"start\":{\"line\":174,\"column\":36},\"end\":{\"line\":174,\"column\":39}},\"type\":\"Identifier\",\"name\":\"end\"},{\"range\":[5854,5858],\"loc\":{\"start\":{\"line\":174,\"column\":41},\"end\":{\"line\":174,\"column\":45}},\"type\":\"Identifier\",\"name\":\"step\"}],\"defaults\":[],\"body\":{\"range\":[5860,5950],\"loc\":{\"start\":{\"line\":174,\"column\":47},\"end\":{\"line\":176,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[5876,5936],\"loc\":{\"start\":{\"line\":175,\"column\":14},\"end\":{\"line\":175,\"column\":74}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[5883,5935],\"loc\":{\"start\":{\"line\":175,\"column\":21},\"end\":{\"line\":175,\"column\":73}},\"type\":\"CallExpression\",\"callee\":{\"range\":[5883,5911],\"loc\":{\"start\":{\"line\":175,\"column\":21},\"end\":{\"line\":175,\"column\":49}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5883,5905],\"loc\":{\"start\":{\"line\":175,\"column\":21},\"end\":{\"line\":175,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[5883,5896],\"loc\":{\"start\":{\"line\":175,\"column\":21},\"end\":{\"line\":175,\"column\":34}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[5897,5905],\"loc\":{\"start\":{\"line\":175,\"column\":35},\"end\":{\"line\":175,\"column\":43}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[5906,5911],\"loc\":{\"start\":{\"line\":175,\"column\":44},\"end\":{\"line\":175,\"column\":49}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[5912,5916],\"loc\":{\"start\":{\"line\":175,\"column\":50},\"end\":{\"line\":175,\"column\":54}},\"type\":\"ThisExpression\"},{\"range\":[5918,5923],\"loc\":{\"start\":{\"line\":175,\"column\":56},\"end\":{\"line\":175,\"column\":61}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[5925,5928],\"loc\":{\"start\":{\"line\":175,\"column\":63},\"end\":{\"line\":175,\"column\":66}},\"type\":\"Identifier\",\"name\":\"end\"},{\"range\":[5930,5934],\"loc\":{\"start\":{\"line\":175,\"column\":68},\"end\":{\"line\":175,\"column\":72}},\"type\":\"Identifier\",\"name\":\"step\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[5964,5981],\"loc\":{\"start\":{\"line\":177,\"column\":12},\"end\":{\"line\":177,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[5964,5974],\"loc\":{\"start\":{\"line\":177,\"column\":12},\"end\":{\"line\":177,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[5976,5981],\"loc\":{\"start\":{\"line\":177,\"column\":24},\"end\":{\"line\":177,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[6005,6154],\"loc\":{\"start\":{\"line\":179,\"column\":10},\"end\":{\"line\":184,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[6005,6013],\"loc\":{\"start\":{\"line\":179,\"column\":10},\"end\":{\"line\":179,\"column\":18}},\"type\":\"Literal\",\"value\":\"remove\",\"raw\":\"\\\"remove\\\"\"},\"computed\":false,\"value\":{\"range\":[6015,6154],\"loc\":{\"start\":{\"line\":179,\"column\":20},\"end\":{\"line\":184,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[6029,6111],\"loc\":{\"start\":{\"line\":180,\"column\":12},\"end\":{\"line\":182,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[6029,6034],\"loc\":{\"start\":{\"line\":180,\"column\":12},\"end\":{\"line\":180,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[6036,6111],\"loc\":{\"start\":{\"line\":180,\"column\":19},\"end\":{\"line\":182,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[6046,6047],\"loc\":{\"start\":{\"line\":180,\"column\":29},\"end\":{\"line\":180,\"column\":30}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[6049,6111],\"loc\":{\"start\":{\"line\":180,\"column\":32},\"end\":{\"line\":182,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6065,6097],\"loc\":{\"start\":{\"line\":181,\"column\":14},\"end\":{\"line\":181,\"column\":46}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[6065,6096],\"loc\":{\"start\":{\"line\":181,\"column\":14},\"end\":{\"line\":181,\"column\":45}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6065,6076],\"loc\":{\"start\":{\"line\":181,\"column\":14},\"end\":{\"line\":181,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[6065,6069],\"loc\":{\"start\":{\"line\":181,\"column\":14},\"end\":{\"line\":181,\"column\":18}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[6070,6076],\"loc\":{\"start\":{\"line\":181,\"column\":19},\"end\":{\"line\":181,\"column\":25}},\"type\":\"Identifier\",\"name\":\"splice\"}},\"arguments\":[{\"range\":[6077,6092],\"loc\":{\"start\":{\"line\":181,\"column\":26},\"end\":{\"line\":181,\"column\":41}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6077,6089],\"loc\":{\"start\":{\"line\":181,\"column\":26},\"end\":{\"line\":181,\"column\":38}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[6077,6081],\"loc\":{\"start\":{\"line\":181,\"column\":26},\"end\":{\"line\":181,\"column\":30}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[6082,6089],\"loc\":{\"start\":{\"line\":181,\"column\":31},\"end\":{\"line\":181,\"column\":38}},\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"range\":[6090,6091],\"loc\":{\"start\":{\"line\":181,\"column\":39},\"end\":{\"line\":181,\"column\":40}},\"type\":\"Identifier\",\"name\":\"x\"}]},{\"range\":[6094,6095],\"loc\":{\"start\":{\"line\":181,\"column\":43},\"end\":{\"line\":181,\"column\":44}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[6125,6142],\"loc\":{\"start\":{\"line\":183,\"column\":12},\"end\":{\"line\":183,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[6125,6135],\"loc\":{\"start\":{\"line\":183,\"column\":12},\"end\":{\"line\":183,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[6137,6142],\"loc\":{\"start\":{\"line\":183,\"column\":24},\"end\":{\"line\":183,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[6166,7608],\"loc\":{\"start\":{\"line\":185,\"column\":10},\"end\":{\"line\":224,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[6166,6172],\"loc\":{\"start\":{\"line\":185,\"column\":10},\"end\":{\"line\":185,\"column\":16}},\"type\":\"Literal\",\"value\":\"sort\",\"raw\":\"\\\"sort\\\"\"},\"computed\":false,\"value\":{\"range\":[6174,7608],\"loc\":{\"start\":{\"line\":185,\"column\":18},\"end\":{\"line\":224,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[6188,7565],\"loc\":{\"start\":{\"line\":186,\"column\":12},\"end\":{\"line\":222,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[6188,6193],\"loc\":{\"start\":{\"line\":186,\"column\":12},\"end\":{\"line\":186,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[6195,7565],\"loc\":{\"start\":{\"line\":186,\"column\":19},\"end\":{\"line\":222,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[6204,6205],\"loc\":{\"start\":{\"line\":186,\"column\":28},\"end\":{\"line\":186,\"column\":29}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[6207,6214],\"loc\":{\"start\":{\"line\":186,\"column\":31},\"end\":{\"line\":186,\"column\":38}},\"type\":\"Identifier\",\"name\":\"reverse\"}],\"defaults\":[],\"body\":{\"range\":[6216,7565],\"loc\":{\"start\":{\"line\":186,\"column\":40},\"end\":{\"line\":222,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6232,6258],\"loc\":{\"start\":{\"line\":187,\"column\":14},\"end\":{\"line\":187,\"column\":40}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6236,6257],\"loc\":{\"start\":{\"line\":187,\"column\":18},\"end\":{\"line\":187,\"column\":39}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6236,6241],\"loc\":{\"start\":{\"line\":187,\"column\":18},\"end\":{\"line\":187,\"column\":23}},\"type\":\"Identifier\",\"name\":\"list2\"},\"init\":{\"range\":[6244,6257],\"loc\":{\"start\":{\"line\":187,\"column\":26},\"end\":{\"line\":187,\"column\":39}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6244,6254],\"loc\":{\"start\":{\"line\":187,\"column\":26},\"end\":{\"line\":187,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[6244,6248],\"loc\":{\"start\":{\"line\":187,\"column\":26},\"end\":{\"line\":187,\"column\":30}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[6249,6254],\"loc\":{\"start\":{\"line\":187,\"column\":31},\"end\":{\"line\":187,\"column\":36}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[6255,6256],\"loc\":{\"start\":{\"line\":187,\"column\":37},\"end\":{\"line\":187,\"column\":38}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}]}}],\"kind\":\"var\"},{\"range\":[6273,6756],\"loc\":{\"start\":{\"line\":188,\"column\":14},\"end\":{\"line\":198,\"column\":15}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6277,6756],\"loc\":{\"start\":{\"line\":188,\"column\":18},\"end\":{\"line\":198,\"column\":15}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6277,6286],\"loc\":{\"start\":{\"line\":188,\"column\":18},\"end\":{\"line\":188,\"column\":27}},\"type\":\"Identifier\",\"name\":\"apply_key\"},\"init\":{\"range\":[6289,6756],\"loc\":{\"start\":{\"line\":188,\"column\":30},\"end\":{\"line\":198,\"column\":15}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[6298,6299],\"loc\":{\"start\":{\"line\":188,\"column\":39},\"end\":{\"line\":188,\"column\":40}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[6301,6310],\"loc\":{\"start\":{\"line\":188,\"column\":42},\"end\":{\"line\":188,\"column\":51}},\"type\":\"Identifier\",\"name\":\"numerical\"}],\"defaults\":[],\"body\":{\"range\":[6312,6756],\"loc\":{\"start\":{\"line\":188,\"column\":53},\"end\":{\"line\":198,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6330,6355],\"loc\":{\"start\":{\"line\":189,\"column\":16},\"end\":{\"line\":189,\"column\":41}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6334,6354],\"loc\":{\"start\":{\"line\":189,\"column\":20},\"end\":{\"line\":189,\"column\":40}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6334,6339],\"loc\":{\"start\":{\"line\":189,\"column\":20},\"end\":{\"line\":189,\"column\":25}},\"type\":\"Identifier\",\"name\":\"list3\"},\"init\":{\"range\":[6342,6354],\"loc\":{\"start\":{\"line\":189,\"column\":28},\"end\":{\"line\":189,\"column\":40}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6342,6351],\"loc\":{\"start\":{\"line\":189,\"column\":28},\"end\":{\"line\":189,\"column\":37}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[6342,6347],\"loc\":{\"start\":{\"line\":189,\"column\":28},\"end\":{\"line\":189,\"column\":33}},\"type\":\"Identifier\",\"name\":\"list2\"},\"property\":{\"range\":[6348,6351],\"loc\":{\"start\":{\"line\":189,\"column\":34},\"end\":{\"line\":189,\"column\":37}},\"type\":\"Identifier\",\"name\":\"map\"}},\"arguments\":[{\"range\":[6352,6353],\"loc\":{\"start\":{\"line\":189,\"column\":38},\"end\":{\"line\":189,\"column\":39}},\"type\":\"Identifier\",\"name\":\"x\"}]}}],\"kind\":\"var\"},{\"range\":[6454,6470],\"loc\":{\"start\":{\"line\":191,\"column\":16},\"end\":{\"line\":191,\"column\":32}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6458,6470],\"loc\":{\"start\":{\"line\":191,\"column\":20},\"end\":{\"line\":191,\"column\":32}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6458,6465],\"loc\":{\"start\":{\"line\":191,\"column\":20},\"end\":{\"line\":191,\"column\":27}},\"type\":\"Identifier\",\"name\":\"mapping\"},\"init\":{\"range\":[6468,6470],\"loc\":{\"start\":{\"line\":191,\"column\":30},\"end\":{\"line\":191,\"column\":32}},\"type\":\"ObjectExpression\",\"properties\":[]}}],\"kind\":\"var\"},{\"range\":[6487,6536],\"loc\":{\"start\":{\"line\":192,\"column\":16},\"end\":{\"line\":192,\"column\":65}},\"type\":\"ForInStatement\",\"left\":{\"range\":[6491,6496],\"loc\":{\"start\":{\"line\":192,\"column\":20},\"end\":{\"line\":192,\"column\":25}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6495,6496],\"loc\":{\"start\":{\"line\":192,\"column\":24},\"end\":{\"line\":192,\"column\":25}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6495,6496],\"loc\":{\"start\":{\"line\":192,\"column\":24},\"end\":{\"line\":192,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[6500,6505],\"loc\":{\"start\":{\"line\":192,\"column\":29},\"end\":{\"line\":192,\"column\":34}},\"type\":\"Identifier\",\"name\":\"list3\"},\"body\":{\"range\":[6507,6536],\"loc\":{\"start\":{\"line\":192,\"column\":36},\"end\":{\"line\":192,\"column\":65}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[6507,6535],\"loc\":{\"start\":{\"line\":192,\"column\":36},\"end\":{\"line\":192,\"column\":64}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[6507,6524],\"loc\":{\"start\":{\"line\":192,\"column\":36},\"end\":{\"line\":192,\"column\":53}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6507,6514],\"loc\":{\"start\":{\"line\":192,\"column\":36},\"end\":{\"line\":192,\"column\":43}},\"type\":\"Identifier\",\"name\":\"mapping\"},\"property\":{\"range\":[6515,6523],\"loc\":{\"start\":{\"line\":192,\"column\":44},\"end\":{\"line\":192,\"column\":52}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6515,6520],\"loc\":{\"start\":{\"line\":192,\"column\":44},\"end\":{\"line\":192,\"column\":49}},\"type\":\"Identifier\",\"name\":\"list3\"},\"property\":{\"range\":[6521,6522],\"loc\":{\"start\":{\"line\":192,\"column\":50},\"end\":{\"line\":192,\"column\":51}},\"type\":\"Identifier\",\"name\":\"i\"}}},\"right\":{\"range\":[6527,6535],\"loc\":{\"start\":{\"line\":192,\"column\":56},\"end\":{\"line\":192,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6527,6532],\"loc\":{\"start\":{\"line\":192,\"column\":56},\"end\":{\"line\":192,\"column\":61}},\"type\":\"Identifier\",\"name\":\"list2\"},\"property\":{\"range\":[6533,6534],\"loc\":{\"start\":{\"line\":192,\"column\":62},\"end\":{\"line\":192,\"column\":63}},\"type\":\"Identifier\",\"name\":\"i\"}}}},\"each\":false},{\"range\":[6553,6682],\"loc\":{\"start\":{\"line\":193,\"column\":16},\"end\":{\"line\":196,\"column\":30}},\"type\":\"IfStatement\",\"test\":{\"range\":[6556,6565],\"loc\":{\"start\":{\"line\":193,\"column\":19},\"end\":{\"line\":193,\"column\":28}},\"type\":\"Identifier\",\"name\":\"numerical\"},\"consequent\":{\"range\":[6585,6630],\"loc\":{\"start\":{\"line\":194,\"column\":18},\"end\":{\"line\":194,\"column\":63}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[6585,6629],\"loc\":{\"start\":{\"line\":194,\"column\":18},\"end\":{\"line\":194,\"column\":62}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6585,6595],\"loc\":{\"start\":{\"line\":194,\"column\":18},\"end\":{\"line\":194,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[6585,6590],\"loc\":{\"start\":{\"line\":194,\"column\":18},\"end\":{\"line\":194,\"column\":23}},\"type\":\"Identifier\",\"name\":\"list3\"},\"property\":{\"range\":[6591,6595],\"loc\":{\"start\":{\"line\":194,\"column\":24},\"end\":{\"line\":194,\"column\":28}},\"type\":\"Identifier\",\"name\":\"sort\"}},\"arguments\":[{\"range\":[6596,6628],\"loc\":{\"start\":{\"line\":194,\"column\":29},\"end\":{\"line\":194,\"column\":61}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[6605,6606],\"loc\":{\"start\":{\"line\":194,\"column\":38},\"end\":{\"line\":194,\"column\":39}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[6608,6609],\"loc\":{\"start\":{\"line\":194,\"column\":41},\"end\":{\"line\":194,\"column\":42}},\"type\":\"Identifier\",\"name\":\"b\"}],\"defaults\":[],\"body\":{\"range\":[6611,6628],\"loc\":{\"start\":{\"line\":194,\"column\":44},\"end\":{\"line\":194,\"column\":61}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6613,6626],\"loc\":{\"start\":{\"line\":194,\"column\":46},\"end\":{\"line\":194,\"column\":59}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[6620,6625],\"loc\":{\"start\":{\"line\":194,\"column\":53},\"end\":{\"line\":194,\"column\":58}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[6620,6621],\"loc\":{\"start\":{\"line\":194,\"column\":53},\"end\":{\"line\":194,\"column\":54}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[6624,6625],\"loc\":{\"start\":{\"line\":194,\"column\":57},\"end\":{\"line\":194,\"column\":58}},\"type\":\"Identifier\",\"name\":\"b\"}}}]},\"generator\":false,\"expression\":false}]}},\"alternate\":{\"range\":[6670,6682],\"loc\":{\"start\":{\"line\":196,\"column\":18},\"end\":{\"line\":196,\"column\":30}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[6670,6682],\"loc\":{\"start\":{\"line\":196,\"column\":18},\"end\":{\"line\":196,\"column\":30}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6670,6680],\"loc\":{\"start\":{\"line\":196,\"column\":18},\"end\":{\"line\":196,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[6670,6675],\"loc\":{\"start\":{\"line\":196,\"column\":18},\"end\":{\"line\":196,\"column\":23}},\"type\":\"Identifier\",\"name\":\"list3\"},\"property\":{\"range\":[6676,6680],\"loc\":{\"start\":{\"line\":196,\"column\":24},\"end\":{\"line\":196,\"column\":28}},\"type\":\"Identifier\",\"name\":\"sort\"}},\"arguments\":[]}}},{\"range\":[6699,6740],\"loc\":{\"start\":{\"line\":197,\"column\":16},\"end\":{\"line\":197,\"column\":57}},\"type\":\"ForInStatement\",\"left\":{\"range\":[6703,6708],\"loc\":{\"start\":{\"line\":197,\"column\":20},\"end\":{\"line\":197,\"column\":25}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6707,6708],\"loc\":{\"start\":{\"line\":197,\"column\":24},\"end\":{\"line\":197,\"column\":25}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6707,6708],\"loc\":{\"start\":{\"line\":197,\"column\":24},\"end\":{\"line\":197,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[6712,6713],\"loc\":{\"start\":{\"line\":197,\"column\":29},\"end\":{\"line\":197,\"column\":30}},\"type\":\"Identifier\",\"name\":\"a\"},\"body\":{\"range\":[6715,6740],\"loc\":{\"start\":{\"line\":197,\"column\":32},\"end\":{\"line\":197,\"column\":57}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[6715,6739],\"loc\":{\"start\":{\"line\":197,\"column\":32},\"end\":{\"line\":197,\"column\":56}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[6715,6719],\"loc\":{\"start\":{\"line\":197,\"column\":32},\"end\":{\"line\":197,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6715,6716],\"loc\":{\"start\":{\"line\":197,\"column\":32},\"end\":{\"line\":197,\"column\":33}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[6717,6718],\"loc\":{\"start\":{\"line\":197,\"column\":34},\"end\":{\"line\":197,\"column\":35}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[6722,6739],\"loc\":{\"start\":{\"line\":197,\"column\":39},\"end\":{\"line\":197,\"column\":56}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6722,6729],\"loc\":{\"start\":{\"line\":197,\"column\":39},\"end\":{\"line\":197,\"column\":46}},\"type\":\"Identifier\",\"name\":\"mapping\"},\"property\":{\"range\":[6730,6738],\"loc\":{\"start\":{\"line\":197,\"column\":47},\"end\":{\"line\":197,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6730,6735],\"loc\":{\"start\":{\"line\":197,\"column\":47},\"end\":{\"line\":197,\"column\":52}},\"type\":\"Identifier\",\"name\":\"list3\"},\"property\":{\"range\":[6736,6737],\"loc\":{\"start\":{\"line\":197,\"column\":53},\"end\":{\"line\":197,\"column\":54}},\"type\":\"Identifier\",\"name\":\"i\"}}}}},\"each\":false}]},\"generator\":false,\"expression\":false}}],\"kind\":\"var\"},{\"range\":[6771,7240],\"loc\":{\"start\":{\"line\":199,\"column\":14},\"end\":{\"line\":212,\"column\":15}},\"type\":\"ForInStatement\",\"left\":{\"range\":[6775,6780],\"loc\":{\"start\":{\"line\":199,\"column\":18},\"end\":{\"line\":199,\"column\":23}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[6779,6780],\"loc\":{\"start\":{\"line\":199,\"column\":22},\"end\":{\"line\":199,\"column\":23}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[6779,6780],\"loc\":{\"start\":{\"line\":199,\"column\":22},\"end\":{\"line\":199,\"column\":23}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[6784,6788],\"loc\":{\"start\":{\"line\":199,\"column\":27},\"end\":{\"line\":199,\"column\":31}},\"type\":\"ThisExpression\"},\"body\":{\"range\":[6790,7240],\"loc\":{\"start\":{\"line\":199,\"column\":33},\"end\":{\"line\":212,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6808,7224],\"loc\":{\"start\":{\"line\":200,\"column\":16},\"end\":{\"line\":211,\"column\":17}},\"type\":\"IfStatement\",\"test\":{\"range\":[6811,6860],\"loc\":{\"start\":{\"line\":200,\"column\":19},\"end\":{\"line\":200,\"column\":68}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[6811,6838],\"loc\":{\"start\":{\"line\":200,\"column\":19},\"end\":{\"line\":200,\"column\":46}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[6811,6825],\"loc\":{\"start\":{\"line\":200,\"column\":19},\"end\":{\"line\":200,\"column\":33}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[6818,6825],\"loc\":{\"start\":{\"line\":200,\"column\":26},\"end\":{\"line\":200,\"column\":33}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6818,6822],\"loc\":{\"start\":{\"line\":200,\"column\":26},\"end\":{\"line\":200,\"column\":30}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[6823,6824],\"loc\":{\"start\":{\"line\":200,\"column\":31},\"end\":{\"line\":200,\"column\":32}},\"type\":\"Identifier\",\"name\":\"i\"}},\"prefix\":true},\"right\":{\"range\":[6830,6838],\"loc\":{\"start\":{\"line\":200,\"column\":38},\"end\":{\"line\":200,\"column\":46}},\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"'number'\"}},\"right\":{\"range\":[6842,6860],\"loc\":{\"start\":{\"line\":200,\"column\":50},\"end\":{\"line\":200,\"column\":68}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[6843,6860],\"loc\":{\"start\":{\"line\":200,\"column\":51},\"end\":{\"line\":200,\"column\":68}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6843,6851],\"loc\":{\"start\":{\"line\":200,\"column\":51},\"end\":{\"line\":200,\"column\":59}},\"type\":\"Identifier\",\"name\":\"isFinite\"},\"arguments\":[{\"range\":[6852,6859],\"loc\":{\"start\":{\"line\":200,\"column\":60},\"end\":{\"line\":200,\"column\":67}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[6852,6856],\"loc\":{\"start\":{\"line\":200,\"column\":60},\"end\":{\"line\":200,\"column\":64}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[6857,6858],\"loc\":{\"start\":{\"line\":200,\"column\":65},\"end\":{\"line\":200,\"column\":66}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"prefix\":true}},\"consequent\":{\"range\":[6862,7224],\"loc\":{\"start\":{\"line\":200,\"column\":70},\"end\":{\"line\":211,\"column\":17}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6882,7114],\"loc\":{\"start\":{\"line\":201,\"column\":18},\"end\":{\"line\":207,\"column\":19}},\"type\":\"IfStatement\",\"test\":{\"range\":[6885,6908],\"loc\":{\"start\":{\"line\":201,\"column\":21},\"end\":{\"line\":201,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"!=\",\"left\":{\"range\":[6885,6893],\"loc\":{\"start\":{\"line\":201,\"column\":21},\"end\":{\"line\":201,\"column\":29}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[6892,6893],\"loc\":{\"start\":{\"line\":201,\"column\":28},\"end\":{\"line\":201,\"column\":29}},\"type\":\"Identifier\",\"name\":\"x\"},\"prefix\":true},\"right\":{\"range\":[6897,6908],\"loc\":{\"start\":{\"line\":201,\"column\":33},\"end\":{\"line\":201,\"column\":44}},\"type\":\"Literal\",\"value\":\"undefined\",\"raw\":\"'undefined'\"}},\"consequent\":{\"range\":[6910,6975],\"loc\":{\"start\":{\"line\":201,\"column\":46},\"end\":{\"line\":203,\"column\":19}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[6932,6955],\"loc\":{\"start\":{\"line\":202,\"column\":20},\"end\":{\"line\":202,\"column\":43}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[6932,6954],\"loc\":{\"start\":{\"line\":202,\"column\":20},\"end\":{\"line\":202,\"column\":42}},\"type\":\"CallExpression\",\"callee\":{\"range\":[6932,6941],\"loc\":{\"start\":{\"line\":202,\"column\":20},\"end\":{\"line\":202,\"column\":29}},\"type\":\"Identifier\",\"name\":\"apply_key\"},\"arguments\":[{\"range\":[6942,6946],\"loc\":{\"start\":{\"line\":202,\"column\":30},\"end\":{\"line\":202,\"column\":34}},\"type\":\"ThisExpression\"},{\"range\":[6948,6953],\"loc\":{\"start\":{\"line\":202,\"column\":36},\"end\":{\"line\":202,\"column\":41}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}]}}]},\"alternate\":{\"range\":[6999,7114],\"loc\":{\"start\":{\"line\":204,\"column\":23},\"end\":{\"line\":207,\"column\":19}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[7021,7034],\"loc\":{\"start\":{\"line\":205,\"column\":20},\"end\":{\"line\":205,\"column\":33}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7021,7033],\"loc\":{\"start\":{\"line\":205,\"column\":20},\"end\":{\"line\":205,\"column\":32}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7021,7031],\"loc\":{\"start\":{\"line\":205,\"column\":20},\"end\":{\"line\":205,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7021,7026],\"loc\":{\"start\":{\"line\":205,\"column\":20},\"end\":{\"line\":205,\"column\":25}},\"type\":\"Identifier\",\"name\":\"list2\"},\"property\":{\"range\":[7027,7031],\"loc\":{\"start\":{\"line\":205,\"column\":26},\"end\":{\"line\":205,\"column\":30}},\"type\":\"Identifier\",\"name\":\"sort\"}},\"arguments\":[]}},{\"range\":[7055,7094],\"loc\":{\"start\":{\"line\":206,\"column\":20},\"end\":{\"line\":206,\"column\":59}},\"type\":\"ForInStatement\",\"left\":{\"range\":[7060,7065],\"loc\":{\"start\":{\"line\":206,\"column\":25},\"end\":{\"line\":206,\"column\":30}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[7064,7065],\"loc\":{\"start\":{\"line\":206,\"column\":29},\"end\":{\"line\":206,\"column\":30}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[7064,7065],\"loc\":{\"start\":{\"line\":206,\"column\":29},\"end\":{\"line\":206,\"column\":30}},\"type\":\"Identifier\",\"name\":\"j\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[7069,7073],\"loc\":{\"start\":{\"line\":206,\"column\":34},\"end\":{\"line\":206,\"column\":38}},\"type\":\"ThisExpression\"},\"body\":{\"range\":[7075,7094],\"loc\":{\"start\":{\"line\":206,\"column\":40},\"end\":{\"line\":206,\"column\":59}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7075,7093],\"loc\":{\"start\":{\"line\":206,\"column\":40},\"end\":{\"line\":206,\"column\":58}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[7075,7082],\"loc\":{\"start\":{\"line\":206,\"column\":40},\"end\":{\"line\":206,\"column\":47}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7075,7079],\"loc\":{\"start\":{\"line\":206,\"column\":40},\"end\":{\"line\":206,\"column\":44}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[7080,7081],\"loc\":{\"start\":{\"line\":206,\"column\":45},\"end\":{\"line\":206,\"column\":46}},\"type\":\"Identifier\",\"name\":\"j\"}},\"right\":{\"range\":[7085,7093],\"loc\":{\"start\":{\"line\":206,\"column\":50},\"end\":{\"line\":206,\"column\":58}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7085,7090],\"loc\":{\"start\":{\"line\":206,\"column\":50},\"end\":{\"line\":206,\"column\":55}},\"type\":\"Identifier\",\"name\":\"list2\"},\"property\":{\"range\":[7091,7092],\"loc\":{\"start\":{\"line\":206,\"column\":56},\"end\":{\"line\":206,\"column\":57}},\"type\":\"Identifier\",\"name\":\"j\"}}}},\"each\":false}]}},{\"range\":[7133,7180],\"loc\":{\"start\":{\"line\":208,\"column\":18},\"end\":{\"line\":209,\"column\":35}},\"type\":\"IfStatement\",\"test\":{\"range\":[7136,7143],\"loc\":{\"start\":{\"line\":208,\"column\":21},\"end\":{\"line\":208,\"column\":28}},\"type\":\"Identifier\",\"name\":\"reverse\"},\"consequent\":{\"range\":[7165,7180],\"loc\":{\"start\":{\"line\":209,\"column\":20},\"end\":{\"line\":209,\"column\":35}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7165,7179],\"loc\":{\"start\":{\"line\":209,\"column\":20},\"end\":{\"line\":209,\"column\":34}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7165,7177],\"loc\":{\"start\":{\"line\":209,\"column\":20},\"end\":{\"line\":209,\"column\":32}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7165,7169],\"loc\":{\"start\":{\"line\":209,\"column\":20},\"end\":{\"line\":209,\"column\":24}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[7170,7177],\"loc\":{\"start\":{\"line\":209,\"column\":25},\"end\":{\"line\":209,\"column\":32}},\"type\":\"Identifier\",\"name\":\"reverse\"}},\"arguments\":[]}},\"alternate\":null},{\"range\":[7199,7206],\"loc\":{\"start\":{\"line\":210,\"column\":18},\"end\":{\"line\":210,\"column\":25}},\"type\":\"ReturnStatement\",\"argument\":null}]},\"alternate\":null}]},\"each\":false},{\"range\":[7255,7493],\"loc\":{\"start\":{\"line\":213,\"column\":14},\"end\":{\"line\":219,\"column\":15}},\"type\":\"IfStatement\",\"test\":{\"range\":[7258,7281],\"loc\":{\"start\":{\"line\":213,\"column\":17},\"end\":{\"line\":213,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"!=\",\"left\":{\"range\":[7258,7266],\"loc\":{\"start\":{\"line\":213,\"column\":17},\"end\":{\"line\":213,\"column\":25}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[7265,7266],\"loc\":{\"start\":{\"line\":213,\"column\":24},\"end\":{\"line\":213,\"column\":25}},\"type\":\"Identifier\",\"name\":\"x\"},\"prefix\":true},\"right\":{\"range\":[7270,7281],\"loc\":{\"start\":{\"line\":213,\"column\":29},\"end\":{\"line\":213,\"column\":40}},\"type\":\"Literal\",\"value\":\"undefined\",\"raw\":\"'undefined'\"}},\"consequent\":{\"range\":[7283,7339],\"loc\":{\"start\":{\"line\":213,\"column\":42},\"end\":{\"line\":215,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[7301,7323],\"loc\":{\"start\":{\"line\":214,\"column\":16},\"end\":{\"line\":214,\"column\":38}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7301,7322],\"loc\":{\"start\":{\"line\":214,\"column\":16},\"end\":{\"line\":214,\"column\":37}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7301,7310],\"loc\":{\"start\":{\"line\":214,\"column\":16},\"end\":{\"line\":214,\"column\":25}},\"type\":\"Identifier\",\"name\":\"apply_key\"},\"arguments\":[{\"range\":[7311,7315],\"loc\":{\"start\":{\"line\":214,\"column\":26},\"end\":{\"line\":214,\"column\":30}},\"type\":\"ThisExpression\"},{\"range\":[7317,7321],\"loc\":{\"start\":{\"line\":214,\"column\":32},\"end\":{\"line\":214,\"column\":36}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}]}}]},\"alternate\":{\"range\":[7359,7493],\"loc\":{\"start\":{\"line\":216,\"column\":19},\"end\":{\"line\":219,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[7377,7422],\"loc\":{\"start\":{\"line\":217,\"column\":16},\"end\":{\"line\":217,\"column\":61}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7377,7421],\"loc\":{\"start\":{\"line\":217,\"column\":16},\"end\":{\"line\":217,\"column\":60}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7377,7387],\"loc\":{\"start\":{\"line\":217,\"column\":16},\"end\":{\"line\":217,\"column\":26}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7377,7382],\"loc\":{\"start\":{\"line\":217,\"column\":16},\"end\":{\"line\":217,\"column\":21}},\"type\":\"Identifier\",\"name\":\"list2\"},\"property\":{\"range\":[7383,7387],\"loc\":{\"start\":{\"line\":217,\"column\":22},\"end\":{\"line\":217,\"column\":26}},\"type\":\"Identifier\",\"name\":\"sort\"}},\"arguments\":[{\"range\":[7388,7420],\"loc\":{\"start\":{\"line\":217,\"column\":27},\"end\":{\"line\":217,\"column\":59}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[7397,7398],\"loc\":{\"start\":{\"line\":217,\"column\":36},\"end\":{\"line\":217,\"column\":37}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[7400,7401],\"loc\":{\"start\":{\"line\":217,\"column\":39},\"end\":{\"line\":217,\"column\":40}},\"type\":\"Identifier\",\"name\":\"b\"}],\"defaults\":[],\"body\":{\"range\":[7403,7420],\"loc\":{\"start\":{\"line\":217,\"column\":42},\"end\":{\"line\":217,\"column\":59}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[7405,7418],\"loc\":{\"start\":{\"line\":217,\"column\":44},\"end\":{\"line\":217,\"column\":57}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[7412,7417],\"loc\":{\"start\":{\"line\":217,\"column\":51},\"end\":{\"line\":217,\"column\":56}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[7412,7413],\"loc\":{\"start\":{\"line\":217,\"column\":51},\"end\":{\"line\":217,\"column\":52}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[7416,7417],\"loc\":{\"start\":{\"line\":217,\"column\":55},\"end\":{\"line\":217,\"column\":56}},\"type\":\"Identifier\",\"name\":\"b\"}}}]},\"generator\":false,\"expression\":false}]}},{\"range\":[7439,7477],\"loc\":{\"start\":{\"line\":218,\"column\":16},\"end\":{\"line\":218,\"column\":54}},\"type\":\"ForInStatement\",\"left\":{\"range\":[7443,7448],\"loc\":{\"start\":{\"line\":218,\"column\":20},\"end\":{\"line\":218,\"column\":25}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[7447,7448],\"loc\":{\"start\":{\"line\":218,\"column\":24},\"end\":{\"line\":218,\"column\":25}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[7447,7448],\"loc\":{\"start\":{\"line\":218,\"column\":24},\"end\":{\"line\":218,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[7452,7456],\"loc\":{\"start\":{\"line\":218,\"column\":29},\"end\":{\"line\":218,\"column\":33}},\"type\":\"ThisExpression\"},\"body\":{\"range\":[7458,7477],\"loc\":{\"start\":{\"line\":218,\"column\":35},\"end\":{\"line\":218,\"column\":54}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7458,7476],\"loc\":{\"start\":{\"line\":218,\"column\":35},\"end\":{\"line\":218,\"column\":53}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[7458,7465],\"loc\":{\"start\":{\"line\":218,\"column\":35},\"end\":{\"line\":218,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7458,7462],\"loc\":{\"start\":{\"line\":218,\"column\":35},\"end\":{\"line\":218,\"column\":39}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[7463,7464],\"loc\":{\"start\":{\"line\":218,\"column\":40},\"end\":{\"line\":218,\"column\":41}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[7468,7476],\"loc\":{\"start\":{\"line\":218,\"column\":45},\"end\":{\"line\":218,\"column\":53}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7468,7473],\"loc\":{\"start\":{\"line\":218,\"column\":45},\"end\":{\"line\":218,\"column\":50}},\"type\":\"Identifier\",\"name\":\"list2\"},\"property\":{\"range\":[7474,7475],\"loc\":{\"start\":{\"line\":218,\"column\":51},\"end\":{\"line\":218,\"column\":52}},\"type\":\"Identifier\",\"name\":\"i\"}}}},\"each\":false}]}},{\"range\":[7508,7551],\"loc\":{\"start\":{\"line\":220,\"column\":14},\"end\":{\"line\":221,\"column\":31}},\"type\":\"IfStatement\",\"test\":{\"range\":[7511,7518],\"loc\":{\"start\":{\"line\":220,\"column\":17},\"end\":{\"line\":220,\"column\":24}},\"type\":\"Identifier\",\"name\":\"reverse\"},\"consequent\":{\"range\":[7536,7551],\"loc\":{\"start\":{\"line\":221,\"column\":16},\"end\":{\"line\":221,\"column\":31}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7536,7550],\"loc\":{\"start\":{\"line\":221,\"column\":16},\"end\":{\"line\":221,\"column\":30}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7536,7548],\"loc\":{\"start\":{\"line\":221,\"column\":16},\"end\":{\"line\":221,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7536,7540],\"loc\":{\"start\":{\"line\":221,\"column\":16},\"end\":{\"line\":221,\"column\":20}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[7541,7548],\"loc\":{\"start\":{\"line\":221,\"column\":21},\"end\":{\"line\":221,\"column\":28}},\"type\":\"Identifier\",\"name\":\"reverse\"}},\"arguments\":[]}},\"alternate\":null}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[7579,7596],\"loc\":{\"start\":{\"line\":223,\"column\":12},\"end\":{\"line\":223,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[7579,7589],\"loc\":{\"start\":{\"line\":223,\"column\":12},\"end\":{\"line\":223,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[7591,7596],\"loc\":{\"start\":{\"line\":223,\"column\":24},\"end\":{\"line\":223,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[7620,7773],\"loc\":{\"start\":{\"line\":225,\"column\":10},\"end\":{\"line\":230,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[7620,7630],\"loc\":{\"start\":{\"line\":225,\"column\":10},\"end\":{\"line\":225,\"column\":20}},\"type\":\"Literal\",\"value\":\"toString\",\"raw\":\"\\\"toString\\\"\"},\"computed\":false,\"value\":{\"range\":[7632,7773],\"loc\":{\"start\":{\"line\":225,\"column\":22},\"end\":{\"line\":230,\"column\":11}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[7646,7730],\"loc\":{\"start\":{\"line\":226,\"column\":12},\"end\":{\"line\":228,\"column\":13}},\"type\":\"Property\",\"key\":{\"range\":[7646,7651],\"loc\":{\"start\":{\"line\":226,\"column\":12},\"end\":{\"line\":226,\"column\":17}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[7653,7730],\"loc\":{\"start\":{\"line\":226,\"column\":19},\"end\":{\"line\":228,\"column\":13}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[7665,7730],\"loc\":{\"start\":{\"line\":226,\"column\":31},\"end\":{\"line\":228,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[7681,7716],\"loc\":{\"start\":{\"line\":227,\"column\":14},\"end\":{\"line\":227,\"column\":49}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[7688,7715],\"loc\":{\"start\":{\"line\":227,\"column\":21},\"end\":{\"line\":227,\"column\":48}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[7688,7709],\"loc\":{\"start\":{\"line\":227,\"column\":21},\"end\":{\"line\":227,\"column\":42}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[7688,7691],\"loc\":{\"start\":{\"line\":227,\"column\":21},\"end\":{\"line\":227,\"column\":24}},\"type\":\"Literal\",\"value\":\"[\",\"raw\":\"'['\"},\"right\":{\"range\":[7694,7709],\"loc\":{\"start\":{\"line\":227,\"column\":27},\"end\":{\"line\":227,\"column\":42}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7694,7703],\"loc\":{\"start\":{\"line\":227,\"column\":27},\"end\":{\"line\":227,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7694,7698],\"loc\":{\"start\":{\"line\":227,\"column\":27},\"end\":{\"line\":227,\"column\":31}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[7699,7703],\"loc\":{\"start\":{\"line\":227,\"column\":32},\"end\":{\"line\":227,\"column\":36}},\"type\":\"Identifier\",\"name\":\"join\"}},\"arguments\":[{\"range\":[7704,7708],\"loc\":{\"start\":{\"line\":227,\"column\":37},\"end\":{\"line\":227,\"column\":41}},\"type\":\"Literal\",\"value\":\", \",\"raw\":\"', '\"}]}},\"right\":{\"range\":[7712,7715],\"loc\":{\"start\":{\"line\":227,\"column\":45},\"end\":{\"line\":227,\"column\":48}},\"type\":\"Literal\",\"value\":\"]\",\"raw\":\"']'\"}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[7744,7761],\"loc\":{\"start\":{\"line\":229,\"column\":12},\"end\":{\"line\":229,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[7744,7754],\"loc\":{\"start\":{\"line\":229,\"column\":12},\"end\":{\"line\":229,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[7756,7761],\"loc\":{\"start\":{\"line\":229,\"column\":24},\"end\":{\"line\":229,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[7789,8100],\"loc\":{\"start\":{\"line\":232,\"column\":6},\"end\":{\"line\":239,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[7789,7799],\"loc\":{\"start\":{\"line\":232,\"column\":6},\"end\":{\"line\":232,\"column\":16}},\"type\":\"Identifier\",\"name\":\"createList\"},\"computed\":false,\"value\":{\"range\":[7801,8100],\"loc\":{\"start\":{\"line\":232,\"column\":18},\"end\":{\"line\":239,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[7813,8100],\"loc\":{\"start\":{\"line\":232,\"column\":30},\"end\":{\"line\":239,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[7823,7866],\"loc\":{\"start\":{\"line\":233,\"column\":8},\"end\":{\"line\":233,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[7827,7865],\"loc\":{\"start\":{\"line\":233,\"column\":12},\"end\":{\"line\":233,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[7827,7830],\"loc\":{\"start\":{\"line\":233,\"column\":12},\"end\":{\"line\":233,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[7833,7865],\"loc\":{\"start\":{\"line\":233,\"column\":18},\"end\":{\"line\":233,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[7837,7863],\"loc\":{\"start\":{\"line\":233,\"column\":22},\"end\":{\"line\":233,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7837,7858],\"loc\":{\"start\":{\"line\":233,\"column\":22},\"end\":{\"line\":233,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7837,7850],\"loc\":{\"start\":{\"line\":233,\"column\":22},\"end\":{\"line\":233,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[7851,7858],\"loc\":{\"start\":{\"line\":233,\"column\":36},\"end\":{\"line\":233,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[7859,7863],\"loc\":{\"start\":{\"line\":233,\"column\":44},\"end\":{\"line\":233,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[7875,8072],\"loc\":{\"start\":{\"line\":234,\"column\":8},\"end\":{\"line\":237,\"column\":58}},\"type\":\"IfStatement\",\"test\":{\"range\":[7879,7934],\"loc\":{\"start\":{\"line\":234,\"column\":12},\"end\":{\"line\":234,\"column\":67}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[7879,7901],\"loc\":{\"start\":{\"line\":234,\"column\":12},\"end\":{\"line\":234,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[7879,7895],\"loc\":{\"start\":{\"line\":234,\"column\":12},\"end\":{\"line\":234,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7879,7888],\"loc\":{\"start\":{\"line\":234,\"column\":12},\"end\":{\"line\":234,\"column\":21}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[7889,7895],\"loc\":{\"start\":{\"line\":234,\"column\":22},\"end\":{\"line\":234,\"column\":28}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[7900,7901],\"loc\":{\"start\":{\"line\":234,\"column\":33},\"end\":{\"line\":234,\"column\":34}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}},\"right\":{\"range\":[7905,7934],\"loc\":{\"start\":{\"line\":234,\"column\":38},\"end\":{\"line\":234,\"column\":67}},\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"range\":[7905,7917],\"loc\":{\"start\":{\"line\":234,\"column\":38},\"end\":{\"line\":234,\"column\":50}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7905,7914],\"loc\":{\"start\":{\"line\":234,\"column\":38},\"end\":{\"line\":234,\"column\":47}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[7915,7916],\"loc\":{\"start\":{\"line\":234,\"column\":48},\"end\":{\"line\":234,\"column\":49}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"right\":{\"range\":[7929,7934],\"loc\":{\"start\":{\"line\":234,\"column\":62},\"end\":{\"line\":234,\"column\":67}},\"type\":\"Identifier\",\"name\":\"Array\"}}},\"consequent\":{\"range\":[7946,8000],\"loc\":{\"start\":{\"line\":235,\"column\":10},\"end\":{\"line\":235,\"column\":64}},\"type\":\"ForInStatement\",\"left\":{\"range\":[7951,7956],\"loc\":{\"start\":{\"line\":235,\"column\":15},\"end\":{\"line\":235,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[7955,7956],\"loc\":{\"start\":{\"line\":235,\"column\":19},\"end\":{\"line\":235,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[7955,7956],\"loc\":{\"start\":{\"line\":235,\"column\":19},\"end\":{\"line\":235,\"column\":20}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[7960,7972],\"loc\":{\"start\":{\"line\":235,\"column\":24},\"end\":{\"line\":235,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7960,7969],\"loc\":{\"start\":{\"line\":235,\"column\":24},\"end\":{\"line\":235,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[7970,7971],\"loc\":{\"start\":{\"line\":235,\"column\":34},\"end\":{\"line\":235,\"column\":35}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"body\":{\"range\":[7974,8000],\"loc\":{\"start\":{\"line\":235,\"column\":38},\"end\":{\"line\":235,\"column\":64}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[7974,7999],\"loc\":{\"start\":{\"line\":235,\"column\":38},\"end\":{\"line\":235,\"column\":63}},\"type\":\"CallExpression\",\"callee\":{\"range\":[7974,7982],\"loc\":{\"start\":{\"line\":235,\"column\":38},\"end\":{\"line\":235,\"column\":46}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[7974,7977],\"loc\":{\"start\":{\"line\":235,\"column\":38},\"end\":{\"line\":235,\"column\":41}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[7978,7982],\"loc\":{\"start\":{\"line\":235,\"column\":42},\"end\":{\"line\":235,\"column\":46}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[7983,7998],\"loc\":{\"start\":{\"line\":235,\"column\":47},\"end\":{\"line\":235,\"column\":62}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7983,7995],\"loc\":{\"start\":{\"line\":235,\"column\":47},\"end\":{\"line\":235,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[7983,7992],\"loc\":{\"start\":{\"line\":235,\"column\":47},\"end\":{\"line\":235,\"column\":56}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[7993,7994],\"loc\":{\"start\":{\"line\":235,\"column\":57},\"end\":{\"line\":235,\"column\":58}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"property\":{\"range\":[7996,7997],\"loc\":{\"start\":{\"line\":235,\"column\":60},\"end\":{\"line\":235,\"column\":61}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"each\":false},\"alternate\":{\"range\":[8024,8072],\"loc\":{\"start\":{\"line\":237,\"column\":10},\"end\":{\"line\":237,\"column\":58}},\"type\":\"ForInStatement\",\"left\":{\"range\":[8029,8034],\"loc\":{\"start\":{\"line\":237,\"column\":15},\"end\":{\"line\":237,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[8033,8034],\"loc\":{\"start\":{\"line\":237,\"column\":19},\"end\":{\"line\":237,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[8033,8034],\"loc\":{\"start\":{\"line\":237,\"column\":19},\"end\":{\"line\":237,\"column\":20}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[8038,8047],\"loc\":{\"start\":{\"line\":237,\"column\":24},\"end\":{\"line\":237,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"body\":{\"range\":[8049,8072],\"loc\":{\"start\":{\"line\":237,\"column\":35},\"end\":{\"line\":237,\"column\":58}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[8049,8071],\"loc\":{\"start\":{\"line\":237,\"column\":35},\"end\":{\"line\":237,\"column\":57}},\"type\":\"CallExpression\",\"callee\":{\"range\":[8049,8057],\"loc\":{\"start\":{\"line\":237,\"column\":35},\"end\":{\"line\":237,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8049,8052],\"loc\":{\"start\":{\"line\":237,\"column\":35},\"end\":{\"line\":237,\"column\":38}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[8053,8057],\"loc\":{\"start\":{\"line\":237,\"column\":39},\"end\":{\"line\":237,\"column\":43}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[8058,8070],\"loc\":{\"start\":{\"line\":237,\"column\":44},\"end\":{\"line\":237,\"column\":56}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[8058,8067],\"loc\":{\"start\":{\"line\":237,\"column\":44},\"end\":{\"line\":237,\"column\":53}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[8068,8069],\"loc\":{\"start\":{\"line\":237,\"column\":54},\"end\":{\"line\":237,\"column\":55}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"each\":false}},{\"range\":[8081,8092],\"loc\":{\"start\":{\"line\":238,\"column\":8},\"end\":{\"line\":238,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[8088,8091],\"loc\":{\"start\":{\"line\":238,\"column\":15},\"end\":{\"line\":238,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8108,9891],\"loc\":{\"start\":{\"line\":240,\"column\":6},\"end\":{\"line\":302,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[8108,8130],\"loc\":{\"start\":{\"line\":240,\"column\":6},\"end\":{\"line\":240,\"column\":28}},\"type\":\"Identifier\",\"name\":\"dictPropertyDescriptor\"},\"computed\":false,\"value\":{\"range\":[8132,9891],\"loc\":{\"start\":{\"line\":240,\"column\":30},\"end\":{\"line\":302,\"column\":7}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8142,8236],\"loc\":{\"start\":{\"line\":241,\"column\":8},\"end\":{\"line\":244,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[8142,8149],\"loc\":{\"start\":{\"line\":241,\"column\":8},\"end\":{\"line\":241,\"column\":15}},\"type\":\"Literal\",\"value\":\"_type\",\"raw\":\"\\\"_type\\\"\"},\"computed\":false,\"value\":{\"range\":[8151,8236],\"loc\":{\"start\":{\"line\":241,\"column\":17},\"end\":{\"line\":244,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8163,8197],\"loc\":{\"start\":{\"line\":242,\"column\":10},\"end\":{\"line\":242,\"column\":44}},\"type\":\"Property\",\"key\":{\"range\":[8163,8166],\"loc\":{\"start\":{\"line\":242,\"column\":10},\"end\":{\"line\":242,\"column\":13}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[8168,8197],\"loc\":{\"start\":{\"line\":242,\"column\":15},\"end\":{\"line\":242,\"column\":44}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[8180,8197],\"loc\":{\"start\":{\"line\":242,\"column\":27},\"end\":{\"line\":242,\"column\":44}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[8182,8196],\"loc\":{\"start\":{\"line\":242,\"column\":29},\"end\":{\"line\":242,\"column\":43}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[8189,8195],\"loc\":{\"start\":{\"line\":242,\"column\":36},\"end\":{\"line\":242,\"column\":42}},\"type\":\"Literal\",\"value\":\"dict\",\"raw\":\"'dict'\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8209,8226],\"loc\":{\"start\":{\"line\":243,\"column\":10},\"end\":{\"line\":243,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[8209,8219],\"loc\":{\"start\":{\"line\":243,\"column\":10},\"end\":{\"line\":243,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[8221,8226],\"loc\":{\"start\":{\"line\":243,\"column\":22},\"end\":{\"line\":243,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8246,8343],\"loc\":{\"start\":{\"line\":245,\"column\":8},\"end\":{\"line\":248,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[8246,8257],\"loc\":{\"start\":{\"line\":245,\"column\":8},\"end\":{\"line\":245,\"column\":19}},\"type\":\"Literal\",\"value\":\"_isPython\",\"raw\":\"\\\"_isPython\\\"\"},\"computed\":false,\"value\":{\"range\":[8259,8343],\"loc\":{\"start\":{\"line\":245,\"column\":21},\"end\":{\"line\":248,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8271,8304],\"loc\":{\"start\":{\"line\":246,\"column\":10},\"end\":{\"line\":246,\"column\":43}},\"type\":\"Property\",\"key\":{\"range\":[8271,8274],\"loc\":{\"start\":{\"line\":246,\"column\":10},\"end\":{\"line\":246,\"column\":13}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[8276,8304],\"loc\":{\"start\":{\"line\":246,\"column\":15},\"end\":{\"line\":246,\"column\":43}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[8288,8304],\"loc\":{\"start\":{\"line\":246,\"column\":27},\"end\":{\"line\":246,\"column\":43}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[8290,8302],\"loc\":{\"start\":{\"line\":246,\"column\":29},\"end\":{\"line\":246,\"column\":41}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[8297,8301],\"loc\":{\"start\":{\"line\":246,\"column\":36},\"end\":{\"line\":246,\"column\":40}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8316,8333],\"loc\":{\"start\":{\"line\":247,\"column\":10},\"end\":{\"line\":247,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[8316,8326],\"loc\":{\"start\":{\"line\":247,\"column\":10},\"end\":{\"line\":247,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[8328,8333],\"loc\":{\"start\":{\"line\":247,\"column\":22},\"end\":{\"line\":247,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8353,8620],\"loc\":{\"start\":{\"line\":249,\"column\":8},\"end\":{\"line\":256,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[8353,8360],\"loc\":{\"start\":{\"line\":249,\"column\":8},\"end\":{\"line\":249,\"column\":15}},\"type\":\"Literal\",\"value\":\"items\",\"raw\":\"\\\"items\\\"\"},\"computed\":false,\"value\":{\"range\":[8362,8620],\"loc\":{\"start\":{\"line\":249,\"column\":17},\"end\":{\"line\":256,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8374,8581],\"loc\":{\"start\":{\"line\":250,\"column\":10},\"end\":{\"line\":254,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[8374,8379],\"loc\":{\"start\":{\"line\":250,\"column\":10},\"end\":{\"line\":250,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[8381,8581],\"loc\":{\"start\":{\"line\":250,\"column\":17},\"end\":{\"line\":254,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[8393,8581],\"loc\":{\"start\":{\"line\":250,\"column\":29},\"end\":{\"line\":254,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[8407,8452],\"loc\":{\"start\":{\"line\":251,\"column\":12},\"end\":{\"line\":251,\"column\":57}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[8411,8451],\"loc\":{\"start\":{\"line\":251,\"column\":16},\"end\":{\"line\":251,\"column\":56}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[8411,8416],\"loc\":{\"start\":{\"line\":251,\"column\":16},\"end\":{\"line\":251,\"column\":21}},\"type\":\"Identifier\",\"name\":\"items\"},\"init\":{\"range\":[8419,8451],\"loc\":{\"start\":{\"line\":251,\"column\":24},\"end\":{\"line\":251,\"column\":56}},\"type\":\"NewExpression\",\"callee\":{\"range\":[8423,8449],\"loc\":{\"start\":{\"line\":251,\"column\":28},\"end\":{\"line\":251,\"column\":54}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8423,8444],\"loc\":{\"start\":{\"line\":251,\"column\":28},\"end\":{\"line\":251,\"column\":49}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8423,8436],\"loc\":{\"start\":{\"line\":251,\"column\":28},\"end\":{\"line\":251,\"column\":41}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[8437,8444],\"loc\":{\"start\":{\"line\":251,\"column\":42},\"end\":{\"line\":251,\"column\":49}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[8445,8449],\"loc\":{\"start\":{\"line\":251,\"column\":50},\"end\":{\"line\":251,\"column\":54}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[8465,8543],\"loc\":{\"start\":{\"line\":252,\"column\":12},\"end\":{\"line\":252,\"column\":90}},\"type\":\"ForInStatement\",\"left\":{\"range\":[8470,8475],\"loc\":{\"start\":{\"line\":252,\"column\":17},\"end\":{\"line\":252,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[8474,8475],\"loc\":{\"start\":{\"line\":252,\"column\":21},\"end\":{\"line\":252,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[8474,8475],\"loc\":{\"start\":{\"line\":252,\"column\":21},\"end\":{\"line\":252,\"column\":22}},\"type\":\"Identifier\",\"name\":\"k\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[8479,8483],\"loc\":{\"start\":{\"line\":252,\"column\":26},\"end\":{\"line\":252,\"column\":30}},\"type\":\"ThisExpression\"},\"body\":{\"range\":[8485,8543],\"loc\":{\"start\":{\"line\":252,\"column\":32},\"end\":{\"line\":252,\"column\":90}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[8485,8542],\"loc\":{\"start\":{\"line\":252,\"column\":32},\"end\":{\"line\":252,\"column\":89}},\"type\":\"CallExpression\",\"callee\":{\"range\":[8485,8497],\"loc\":{\"start\":{\"line\":252,\"column\":32},\"end\":{\"line\":252,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8485,8490],\"loc\":{\"start\":{\"line\":252,\"column\":32},\"end\":{\"line\":252,\"column\":37}},\"type\":\"Identifier\",\"name\":\"items\"},\"property\":{\"range\":[8491,8497],\"loc\":{\"start\":{\"line\":252,\"column\":38},\"end\":{\"line\":252,\"column\":44}},\"type\":\"Identifier\",\"name\":\"append\"}},\"arguments\":[{\"range\":[8498,8541],\"loc\":{\"start\":{\"line\":252,\"column\":45},\"end\":{\"line\":252,\"column\":88}},\"type\":\"NewExpression\",\"callee\":{\"range\":[8502,8529],\"loc\":{\"start\":{\"line\":252,\"column\":49},\"end\":{\"line\":252,\"column\":76}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8502,8523],\"loc\":{\"start\":{\"line\":252,\"column\":49},\"end\":{\"line\":252,\"column\":70}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8502,8515],\"loc\":{\"start\":{\"line\":252,\"column\":49},\"end\":{\"line\":252,\"column\":62}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[8516,8523],\"loc\":{\"start\":{\"line\":252,\"column\":63},\"end\":{\"line\":252,\"column\":70}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[8524,8529],\"loc\":{\"start\":{\"line\":252,\"column\":71},\"end\":{\"line\":252,\"column\":76}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[{\"range\":[8530,8531],\"loc\":{\"start\":{\"line\":252,\"column\":77},\"end\":{\"line\":252,\"column\":78}},\"type\":\"Identifier\",\"name\":\"k\"},{\"range\":[8533,8540],\"loc\":{\"start\":{\"line\":252,\"column\":80},\"end\":{\"line\":252,\"column\":87}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[8533,8537],\"loc\":{\"start\":{\"line\":252,\"column\":80},\"end\":{\"line\":252,\"column\":84}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[8538,8539],\"loc\":{\"start\":{\"line\":252,\"column\":85},\"end\":{\"line\":252,\"column\":86}},\"type\":\"Identifier\",\"name\":\"k\"}}]}]}},\"each\":false},{\"range\":[8556,8569],\"loc\":{\"start\":{\"line\":253,\"column\":12},\"end\":{\"line\":253,\"column\":25}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[8563,8568],\"loc\":{\"start\":{\"line\":253,\"column\":19},\"end\":{\"line\":253,\"column\":24}},\"type\":\"Identifier\",\"name\":\"items\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8593,8610],\"loc\":{\"start\":{\"line\":255,\"column\":10},\"end\":{\"line\":255,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[8593,8603],\"loc\":{\"start\":{\"line\":255,\"column\":10},\"end\":{\"line\":255,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[8605,8610],\"loc\":{\"start\":{\"line\":255,\"column\":22},\"end\":{\"line\":255,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8630,8766],\"loc\":{\"start\":{\"line\":257,\"column\":8},\"end\":{\"line\":262,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[8630,8638],\"loc\":{\"start\":{\"line\":257,\"column\":8},\"end\":{\"line\":257,\"column\":16}},\"type\":\"Literal\",\"value\":\"length\",\"raw\":\"\\\"length\\\"\"},\"computed\":false,\"value\":{\"range\":[8640,8766],\"loc\":{\"start\":{\"line\":257,\"column\":18},\"end\":{\"line\":262,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8652,8727],\"loc\":{\"start\":{\"line\":258,\"column\":10},\"end\":{\"line\":260,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[8652,8655],\"loc\":{\"start\":{\"line\":258,\"column\":10},\"end\":{\"line\":258,\"column\":13}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[8657,8727],\"loc\":{\"start\":{\"line\":258,\"column\":15},\"end\":{\"line\":260,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[8669,8727],\"loc\":{\"start\":{\"line\":258,\"column\":27},\"end\":{\"line\":260,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[8683,8715],\"loc\":{\"start\":{\"line\":259,\"column\":12},\"end\":{\"line\":259,\"column\":44}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[8690,8714],\"loc\":{\"start\":{\"line\":259,\"column\":19},\"end\":{\"line\":259,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8690,8707],\"loc\":{\"start\":{\"line\":259,\"column\":19},\"end\":{\"line\":259,\"column\":36}},\"type\":\"CallExpression\",\"callee\":{\"range\":[8690,8701],\"loc\":{\"start\":{\"line\":259,\"column\":19},\"end\":{\"line\":259,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[8690,8696],\"loc\":{\"start\":{\"line\":259,\"column\":19},\"end\":{\"line\":259,\"column\":25}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[8697,8701],\"loc\":{\"start\":{\"line\":259,\"column\":26},\"end\":{\"line\":259,\"column\":30}},\"type\":\"Identifier\",\"name\":\"keys\"}},\"arguments\":[{\"range\":[8702,8706],\"loc\":{\"start\":{\"line\":259,\"column\":31},\"end\":{\"line\":259,\"column\":35}},\"type\":\"ThisExpression\"}]},\"property\":{\"range\":[8708,8714],\"loc\":{\"start\":{\"line\":259,\"column\":37},\"end\":{\"line\":259,\"column\":43}},\"type\":\"Identifier\",\"name\":\"length\"}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8739,8756],\"loc\":{\"start\":{\"line\":261,\"column\":10},\"end\":{\"line\":261,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[8739,8749],\"loc\":{\"start\":{\"line\":261,\"column\":10},\"end\":{\"line\":261,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[8751,8756],\"loc\":{\"start\":{\"line\":261,\"column\":22},\"end\":{\"line\":261,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8776,8916],\"loc\":{\"start\":{\"line\":263,\"column\":8},\"end\":{\"line\":268,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[8776,8783],\"loc\":{\"start\":{\"line\":263,\"column\":8},\"end\":{\"line\":263,\"column\":15}},\"type\":\"Literal\",\"value\":\"clear\",\"raw\":\"\\\"clear\\\"\"},\"computed\":false,\"value\":{\"range\":[8785,8916],\"loc\":{\"start\":{\"line\":263,\"column\":17},\"end\":{\"line\":268,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8797,8877],\"loc\":{\"start\":{\"line\":264,\"column\":10},\"end\":{\"line\":266,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[8797,8802],\"loc\":{\"start\":{\"line\":264,\"column\":10},\"end\":{\"line\":264,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[8804,8877],\"loc\":{\"start\":{\"line\":264,\"column\":17},\"end\":{\"line\":266,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[8816,8877],\"loc\":{\"start\":{\"line\":264,\"column\":29},\"end\":{\"line\":266,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[8830,8865],\"loc\":{\"start\":{\"line\":265,\"column\":12},\"end\":{\"line\":265,\"column\":47}},\"type\":\"ForInStatement\",\"left\":{\"range\":[8835,8840],\"loc\":{\"start\":{\"line\":265,\"column\":17},\"end\":{\"line\":265,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[8839,8840],\"loc\":{\"start\":{\"line\":265,\"column\":21},\"end\":{\"line\":265,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[8839,8840],\"loc\":{\"start\":{\"line\":265,\"column\":21},\"end\":{\"line\":265,\"column\":22}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[8844,8848],\"loc\":{\"start\":{\"line\":265,\"column\":26},\"end\":{\"line\":265,\"column\":30}},\"type\":\"ThisExpression\"},\"body\":{\"range\":[8850,8865],\"loc\":{\"start\":{\"line\":265,\"column\":32},\"end\":{\"line\":265,\"column\":47}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[8850,8864],\"loc\":{\"start\":{\"line\":265,\"column\":32},\"end\":{\"line\":265,\"column\":46}},\"type\":\"UnaryExpression\",\"operator\":\"delete\",\"argument\":{\"range\":[8857,8864],\"loc\":{\"start\":{\"line\":265,\"column\":39},\"end\":{\"line\":265,\"column\":46}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[8857,8861],\"loc\":{\"start\":{\"line\":265,\"column\":39},\"end\":{\"line\":265,\"column\":43}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[8862,8863],\"loc\":{\"start\":{\"line\":265,\"column\":44},\"end\":{\"line\":265,\"column\":45}},\"type\":\"Identifier\",\"name\":\"i\"}},\"prefix\":true}},\"each\":false}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8889,8906],\"loc\":{\"start\":{\"line\":267,\"column\":10},\"end\":{\"line\":267,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[8889,8899],\"loc\":{\"start\":{\"line\":267,\"column\":10},\"end\":{\"line\":267,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[8901,8906],\"loc\":{\"start\":{\"line\":267,\"column\":22},\"end\":{\"line\":267,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[8926,9148],\"loc\":{\"start\":{\"line\":269,\"column\":8},\"end\":{\"line\":276,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[8926,8931],\"loc\":{\"start\":{\"line\":269,\"column\":8},\"end\":{\"line\":269,\"column\":13}},\"type\":\"Literal\",\"value\":\"get\",\"raw\":\"\\\"get\\\"\"},\"computed\":false,\"value\":{\"range\":[8933,9148],\"loc\":{\"start\":{\"line\":269,\"column\":15},\"end\":{\"line\":276,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[8945,9109],\"loc\":{\"start\":{\"line\":270,\"column\":10},\"end\":{\"line\":274,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[8945,8950],\"loc\":{\"start\":{\"line\":270,\"column\":10},\"end\":{\"line\":270,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[8952,9109],\"loc\":{\"start\":{\"line\":270,\"column\":17},\"end\":{\"line\":274,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[8962,8965],\"loc\":{\"start\":{\"line\":270,\"column\":27},\"end\":{\"line\":270,\"column\":30}},\"type\":\"Identifier\",\"name\":\"key\"},{\"range\":[8967,8970],\"loc\":{\"start\":{\"line\":270,\"column\":32},\"end\":{\"line\":270,\"column\":35}},\"type\":\"Identifier\",\"name\":\"def\"}],\"defaults\":[],\"body\":{\"range\":[8972,9109],\"loc\":{\"start\":{\"line\":270,\"column\":37},\"end\":{\"line\":274,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[8986,9072],\"loc\":{\"start\":{\"line\":271,\"column\":12},\"end\":{\"line\":272,\"column\":51}},\"type\":\"IfStatement\",\"test\":{\"range\":[8990,9001],\"loc\":{\"start\":{\"line\":271,\"column\":16},\"end\":{\"line\":271,\"column\":27}},\"type\":\"BinaryExpression\",\"operator\":\"in\",\"left\":{\"range\":[8990,8993],\"loc\":{\"start\":{\"line\":271,\"column\":16},\"end\":{\"line\":271,\"column\":19}},\"type\":\"Identifier\",\"name\":\"key\"},\"right\":{\"range\":[8997,9001],\"loc\":{\"start\":{\"line\":271,\"column\":23},\"end\":{\"line\":271,\"column\":27}},\"type\":\"ThisExpression\"}},\"consequent\":{\"range\":[9003,9020],\"loc\":{\"start\":{\"line\":271,\"column\":29},\"end\":{\"line\":271,\"column\":46}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9010,9019],\"loc\":{\"start\":{\"line\":271,\"column\":36},\"end\":{\"line\":271,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[9010,9014],\"loc\":{\"start\":{\"line\":271,\"column\":36},\"end\":{\"line\":271,\"column\":40}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[9015,9018],\"loc\":{\"start\":{\"line\":271,\"column\":41},\"end\":{\"line\":271,\"column\":44}},\"type\":\"Identifier\",\"name\":\"key\"}}},\"alternate\":{\"range\":[9038,9072],\"loc\":{\"start\":{\"line\":272,\"column\":17},\"end\":{\"line\":272,\"column\":51}},\"type\":\"IfStatement\",\"test\":{\"range\":[9042,9059],\"loc\":{\"start\":{\"line\":272,\"column\":21},\"end\":{\"line\":272,\"column\":38}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[9042,9045],\"loc\":{\"start\":{\"line\":272,\"column\":21},\"end\":{\"line\":272,\"column\":24}},\"type\":\"Identifier\",\"name\":\"def\"},\"right\":{\"range\":[9050,9059],\"loc\":{\"start\":{\"line\":272,\"column\":29},\"end\":{\"line\":272,\"column\":38}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[9061,9072],\"loc\":{\"start\":{\"line\":272,\"column\":40},\"end\":{\"line\":272,\"column\":51}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9068,9071],\"loc\":{\"start\":{\"line\":272,\"column\":47},\"end\":{\"line\":272,\"column\":50}},\"type\":\"Identifier\",\"name\":\"def\"}},\"alternate\":null}},{\"range\":[9085,9097],\"loc\":{\"start\":{\"line\":273,\"column\":12},\"end\":{\"line\":273,\"column\":24}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9092,9096],\"loc\":{\"start\":{\"line\":273,\"column\":19},\"end\":{\"line\":273,\"column\":23}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9121,9138],\"loc\":{\"start\":{\"line\":275,\"column\":10},\"end\":{\"line\":275,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[9121,9131],\"loc\":{\"start\":{\"line\":275,\"column\":10},\"end\":{\"line\":275,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[9133,9138],\"loc\":{\"start\":{\"line\":275,\"column\":22},\"end\":{\"line\":275,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9158,9287],\"loc\":{\"start\":{\"line\":277,\"column\":8},\"end\":{\"line\":282,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[9158,9164],\"loc\":{\"start\":{\"line\":277,\"column\":8},\"end\":{\"line\":277,\"column\":14}},\"type\":\"Literal\",\"value\":\"keys\",\"raw\":\"\\\"keys\\\"\"},\"computed\":false,\"value\":{\"range\":[9166,9287],\"loc\":{\"start\":{\"line\":277,\"column\":16},\"end\":{\"line\":282,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[9178,9248],\"loc\":{\"start\":{\"line\":278,\"column\":10},\"end\":{\"line\":280,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[9178,9183],\"loc\":{\"start\":{\"line\":278,\"column\":10},\"end\":{\"line\":278,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[9185,9248],\"loc\":{\"start\":{\"line\":278,\"column\":17},\"end\":{\"line\":280,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[9197,9248],\"loc\":{\"start\":{\"line\":278,\"column\":29},\"end\":{\"line\":280,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[9211,9236],\"loc\":{\"start\":{\"line\":279,\"column\":12},\"end\":{\"line\":279,\"column\":37}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9218,9235],\"loc\":{\"start\":{\"line\":279,\"column\":19},\"end\":{\"line\":279,\"column\":36}},\"type\":\"CallExpression\",\"callee\":{\"range\":[9218,9229],\"loc\":{\"start\":{\"line\":279,\"column\":19},\"end\":{\"line\":279,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[9218,9224],\"loc\":{\"start\":{\"line\":279,\"column\":19},\"end\":{\"line\":279,\"column\":25}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[9225,9229],\"loc\":{\"start\":{\"line\":279,\"column\":26},\"end\":{\"line\":279,\"column\":30}},\"type\":\"Identifier\",\"name\":\"keys\"}},\"arguments\":[{\"range\":[9230,9234],\"loc\":{\"start\":{\"line\":279,\"column\":31},\"end\":{\"line\":279,\"column\":35}},\"type\":\"ThisExpression\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9260,9277],\"loc\":{\"start\":{\"line\":281,\"column\":10},\"end\":{\"line\":281,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[9260,9270],\"loc\":{\"start\":{\"line\":281,\"column\":10},\"end\":{\"line\":281,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[9272,9277],\"loc\":{\"start\":{\"line\":281,\"column\":22},\"end\":{\"line\":281,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9297,9642],\"loc\":{\"start\":{\"line\":283,\"column\":8},\"end\":{\"line\":294,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[9297,9302],\"loc\":{\"start\":{\"line\":283,\"column\":8},\"end\":{\"line\":283,\"column\":13}},\"type\":\"Literal\",\"value\":\"pop\",\"raw\":\"\\\"pop\\\"\"},\"computed\":false,\"value\":{\"range\":[9304,9642],\"loc\":{\"start\":{\"line\":283,\"column\":15},\"end\":{\"line\":294,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[9316,9603],\"loc\":{\"start\":{\"line\":284,\"column\":10},\"end\":{\"line\":292,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[9316,9321],\"loc\":{\"start\":{\"line\":284,\"column\":10},\"end\":{\"line\":284,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[9323,9603],\"loc\":{\"start\":{\"line\":284,\"column\":17},\"end\":{\"line\":292,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[9333,9336],\"loc\":{\"start\":{\"line\":284,\"column\":27},\"end\":{\"line\":284,\"column\":30}},\"type\":\"Identifier\",\"name\":\"key\"},{\"range\":[9338,9341],\"loc\":{\"start\":{\"line\":284,\"column\":32},\"end\":{\"line\":284,\"column\":35}},\"type\":\"Identifier\",\"name\":\"def\"}],\"defaults\":[],\"body\":{\"range\":[9343,9603],\"loc\":{\"start\":{\"line\":284,\"column\":37},\"end\":{\"line\":292,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[9357,9367],\"loc\":{\"start\":{\"line\":285,\"column\":12},\"end\":{\"line\":285,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[9361,9366],\"loc\":{\"start\":{\"line\":285,\"column\":16},\"end\":{\"line\":285,\"column\":21}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[9361,9366],\"loc\":{\"start\":{\"line\":285,\"column\":16},\"end\":{\"line\":285,\"column\":21}},\"type\":\"Identifier\",\"name\":\"value\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[9380,9565],\"loc\":{\"start\":{\"line\":286,\"column\":12},\"end\":{\"line\":290,\"column\":46}},\"type\":\"IfStatement\",\"test\":{\"range\":[9384,9395],\"loc\":{\"start\":{\"line\":286,\"column\":16},\"end\":{\"line\":286,\"column\":27}},\"type\":\"BinaryExpression\",\"operator\":\"in\",\"left\":{\"range\":[9384,9387],\"loc\":{\"start\":{\"line\":286,\"column\":16},\"end\":{\"line\":286,\"column\":19}},\"type\":\"Identifier\",\"name\":\"key\"},\"right\":{\"range\":[9391,9395],\"loc\":{\"start\":{\"line\":286,\"column\":23},\"end\":{\"line\":286,\"column\":27}},\"type\":\"ThisExpression\"}},\"consequent\":{\"range\":[9397,9477],\"loc\":{\"start\":{\"line\":286,\"column\":29},\"end\":{\"line\":289,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[9413,9431],\"loc\":{\"start\":{\"line\":287,\"column\":14},\"end\":{\"line\":287,\"column\":32}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[9413,9430],\"loc\":{\"start\":{\"line\":287,\"column\":14},\"end\":{\"line\":287,\"column\":31}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[9413,9418],\"loc\":{\"start\":{\"line\":287,\"column\":14},\"end\":{\"line\":287,\"column\":19}},\"type\":\"Identifier\",\"name\":\"value\"},\"right\":{\"range\":[9421,9430],\"loc\":{\"start\":{\"line\":287,\"column\":22},\"end\":{\"line\":287,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[9421,9425],\"loc\":{\"start\":{\"line\":287,\"column\":22},\"end\":{\"line\":287,\"column\":26}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[9426,9429],\"loc\":{\"start\":{\"line\":287,\"column\":27},\"end\":{\"line\":287,\"column\":30}},\"type\":\"Identifier\",\"name\":\"key\"}}}},{\"range\":[9446,9463],\"loc\":{\"start\":{\"line\":288,\"column\":14},\"end\":{\"line\":288,\"column\":31}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[9446,9462],\"loc\":{\"start\":{\"line\":288,\"column\":14},\"end\":{\"line\":288,\"column\":30}},\"type\":\"UnaryExpression\",\"operator\":\"delete\",\"argument\":{\"range\":[9453,9462],\"loc\":{\"start\":{\"line\":288,\"column\":21},\"end\":{\"line\":288,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[9453,9457],\"loc\":{\"start\":{\"line\":288,\"column\":21},\"end\":{\"line\":288,\"column\":25}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[9458,9461],\"loc\":{\"start\":{\"line\":288,\"column\":26},\"end\":{\"line\":288,\"column\":29}},\"type\":\"Identifier\",\"name\":\"key\"}},\"prefix\":true}}]},\"alternate\":{\"range\":[9483,9565],\"loc\":{\"start\":{\"line\":289,\"column\":19},\"end\":{\"line\":290,\"column\":46}},\"type\":\"IfStatement\",\"test\":{\"range\":[9487,9504],\"loc\":{\"start\":{\"line\":289,\"column\":23},\"end\":{\"line\":289,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[9487,9490],\"loc\":{\"start\":{\"line\":289,\"column\":23},\"end\":{\"line\":289,\"column\":26}},\"type\":\"Identifier\",\"name\":\"def\"},\"right\":{\"range\":[9495,9504],\"loc\":{\"start\":{\"line\":289,\"column\":31},\"end\":{\"line\":289,\"column\":40}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[9506,9518],\"loc\":{\"start\":{\"line\":289,\"column\":42},\"end\":{\"line\":289,\"column\":54}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[9506,9517],\"loc\":{\"start\":{\"line\":289,\"column\":42},\"end\":{\"line\":289,\"column\":53}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[9506,9511],\"loc\":{\"start\":{\"line\":289,\"column\":42},\"end\":{\"line\":289,\"column\":47}},\"type\":\"Identifier\",\"name\":\"value\"},\"right\":{\"range\":[9514,9517],\"loc\":{\"start\":{\"line\":289,\"column\":50},\"end\":{\"line\":289,\"column\":53}},\"type\":\"Identifier\",\"name\":\"def\"}}},\"alternate\":{\"range\":[9536,9565],\"loc\":{\"start\":{\"line\":290,\"column\":17},\"end\":{\"line\":290,\"column\":46}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9543,9564],\"loc\":{\"start\":{\"line\":290,\"column\":24},\"end\":{\"line\":290,\"column\":45}},\"type\":\"NewExpression\",\"callee\":{\"range\":[9547,9552],\"loc\":{\"start\":{\"line\":290,\"column\":28},\"end\":{\"line\":290,\"column\":33}},\"type\":\"Identifier\",\"name\":\"Error\"},\"arguments\":[{\"range\":[9553,9563],\"loc\":{\"start\":{\"line\":290,\"column\":34},\"end\":{\"line\":290,\"column\":44}},\"type\":\"Literal\",\"value\":\"KeyError\",\"raw\":\"\\\"KeyError\\\"\"}]}}}},{\"range\":[9578,9591],\"loc\":{\"start\":{\"line\":291,\"column\":12},\"end\":{\"line\":291,\"column\":25}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9585,9590],\"loc\":{\"start\":{\"line\":291,\"column\":19},\"end\":{\"line\":291,\"column\":24}},\"type\":\"Identifier\",\"name\":\"value\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9615,9632],\"loc\":{\"start\":{\"line\":293,\"column\":10},\"end\":{\"line\":293,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[9615,9625],\"loc\":{\"start\":{\"line\":293,\"column\":10},\"end\":{\"line\":293,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[9627,9632],\"loc\":{\"start\":{\"line\":293,\"column\":22},\"end\":{\"line\":293,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9644,9883],\"loc\":{\"start\":{\"line\":294,\"column\":11},\"end\":{\"line\":301,\"column\":9}},\"type\":\"Property\",\"key\":{\"range\":[9644,9652],\"loc\":{\"start\":{\"line\":294,\"column\":11},\"end\":{\"line\":294,\"column\":19}},\"type\":\"Literal\",\"value\":\"values\",\"raw\":\"\\\"values\\\"\"},\"computed\":false,\"value\":{\"range\":[9654,9883],\"loc\":{\"start\":{\"line\":294,\"column\":21},\"end\":{\"line\":301,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[9666,9844],\"loc\":{\"start\":{\"line\":295,\"column\":10},\"end\":{\"line\":299,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[9666,9671],\"loc\":{\"start\":{\"line\":295,\"column\":10},\"end\":{\"line\":295,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[9673,9844],\"loc\":{\"start\":{\"line\":295,\"column\":17},\"end\":{\"line\":299,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[9685,9844],\"loc\":{\"start\":{\"line\":295,\"column\":29},\"end\":{\"line\":299,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[9699,9745],\"loc\":{\"start\":{\"line\":296,\"column\":12},\"end\":{\"line\":296,\"column\":58}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[9703,9744],\"loc\":{\"start\":{\"line\":296,\"column\":16},\"end\":{\"line\":296,\"column\":57}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[9703,9709],\"loc\":{\"start\":{\"line\":296,\"column\":16},\"end\":{\"line\":296,\"column\":22}},\"type\":\"Identifier\",\"name\":\"values\"},\"init\":{\"range\":[9712,9744],\"loc\":{\"start\":{\"line\":296,\"column\":25},\"end\":{\"line\":296,\"column\":57}},\"type\":\"NewExpression\",\"callee\":{\"range\":[9716,9742],\"loc\":{\"start\":{\"line\":296,\"column\":29},\"end\":{\"line\":296,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[9716,9737],\"loc\":{\"start\":{\"line\":296,\"column\":29},\"end\":{\"line\":296,\"column\":50}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[9716,9729],\"loc\":{\"start\":{\"line\":296,\"column\":29},\"end\":{\"line\":296,\"column\":42}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[9730,9737],\"loc\":{\"start\":{\"line\":296,\"column\":43},\"end\":{\"line\":296,\"column\":50}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[9738,9742],\"loc\":{\"start\":{\"line\":296,\"column\":51},\"end\":{\"line\":296,\"column\":55}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[9758,9805],\"loc\":{\"start\":{\"line\":297,\"column\":12},\"end\":{\"line\":297,\"column\":59}},\"type\":\"ForInStatement\",\"left\":{\"range\":[9763,9770],\"loc\":{\"start\":{\"line\":297,\"column\":17},\"end\":{\"line\":297,\"column\":24}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[9767,9770],\"loc\":{\"start\":{\"line\":297,\"column\":21},\"end\":{\"line\":297,\"column\":24}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[9767,9770],\"loc\":{\"start\":{\"line\":297,\"column\":21},\"end\":{\"line\":297,\"column\":24}},\"type\":\"Identifier\",\"name\":\"key\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[9774,9778],\"loc\":{\"start\":{\"line\":297,\"column\":28},\"end\":{\"line\":297,\"column\":32}},\"type\":\"ThisExpression\"},\"body\":{\"range\":[9780,9805],\"loc\":{\"start\":{\"line\":297,\"column\":34},\"end\":{\"line\":297,\"column\":59}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[9780,9804],\"loc\":{\"start\":{\"line\":297,\"column\":34},\"end\":{\"line\":297,\"column\":58}},\"type\":\"CallExpression\",\"callee\":{\"range\":[9780,9793],\"loc\":{\"start\":{\"line\":297,\"column\":34},\"end\":{\"line\":297,\"column\":47}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[9780,9786],\"loc\":{\"start\":{\"line\":297,\"column\":34},\"end\":{\"line\":297,\"column\":40}},\"type\":\"Identifier\",\"name\":\"values\"},\"property\":{\"range\":[9787,9793],\"loc\":{\"start\":{\"line\":297,\"column\":41},\"end\":{\"line\":297,\"column\":47}},\"type\":\"Identifier\",\"name\":\"append\"}},\"arguments\":[{\"range\":[9794,9803],\"loc\":{\"start\":{\"line\":297,\"column\":48},\"end\":{\"line\":297,\"column\":57}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[9794,9798],\"loc\":{\"start\":{\"line\":297,\"column\":48},\"end\":{\"line\":297,\"column\":52}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[9799,9802],\"loc\":{\"start\":{\"line\":297,\"column\":53},\"end\":{\"line\":297,\"column\":56}},\"type\":\"Identifier\",\"name\":\"key\"}}]}},\"each\":false},{\"range\":[9818,9832],\"loc\":{\"start\":{\"line\":298,\"column\":12},\"end\":{\"line\":298,\"column\":26}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[9825,9831],\"loc\":{\"start\":{\"line\":298,\"column\":19},\"end\":{\"line\":298,\"column\":25}},\"type\":\"Identifier\",\"name\":\"values\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9856,9873],\"loc\":{\"start\":{\"line\":300,\"column\":10},\"end\":{\"line\":300,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[9856,9866],\"loc\":{\"start\":{\"line\":300,\"column\":10},\"end\":{\"line\":300,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[9868,9873],\"loc\":{\"start\":{\"line\":300,\"column\":22},\"end\":{\"line\":300,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[9903,12066],\"loc\":{\"start\":{\"line\":304,\"column\":4},\"end\":{\"line\":356,\"column\":5}},\"type\":\"Property\",\"key\":{\"range\":[9903,9906],\"loc\":{\"start\":{\"line\":304,\"column\":4},\"end\":{\"line\":304,\"column\":7}},\"type\":\"Identifier\",\"name\":\"ops\"},\"computed\":false,\"value\":{\"range\":[9908,12066],\"loc\":{\"start\":{\"line\":304,\"column\":9},\"end\":{\"line\":356,\"column\":5}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[9916,10584],\"loc\":{\"start\":{\"line\":305,\"column\":6},\"end\":{\"line\":319,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[9916,9919],\"loc\":{\"start\":{\"line\":305,\"column\":6},\"end\":{\"line\":305,\"column\":9}},\"type\":\"Identifier\",\"name\":\"add\"},\"computed\":false,\"value\":{\"range\":[9921,10584],\"loc\":{\"start\":{\"line\":305,\"column\":11},\"end\":{\"line\":319,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[9931,9932],\"loc\":{\"start\":{\"line\":305,\"column\":21},\"end\":{\"line\":305,\"column\":22}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[9934,9935],\"loc\":{\"start\":{\"line\":305,\"column\":24},\"end\":{\"line\":305,\"column\":25}},\"type\":\"Identifier\",\"name\":\"b\"}],\"defaults\":[],\"body\":{\"range\":[9937,10584],\"loc\":{\"start\":{\"line\":305,\"column\":27},\"end\":{\"line\":319,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[9947,10554],\"loc\":{\"start\":{\"line\":306,\"column\":8},\"end\":{\"line\":317,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[9951,10042],\"loc\":{\"start\":{\"line\":306,\"column\":12},\"end\":{\"line\":306,\"column\":103}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[9951,10007],\"loc\":{\"start\":{\"line\":306,\"column\":12},\"end\":{\"line\":306,\"column\":68}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[9951,9972],\"loc\":{\"start\":{\"line\":306,\"column\":12},\"end\":{\"line\":306,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[9951,9959],\"loc\":{\"start\":{\"line\":306,\"column\":12},\"end\":{\"line\":306,\"column\":20}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[9958,9959],\"loc\":{\"start\":{\"line\":306,\"column\":19},\"end\":{\"line\":306,\"column\":20}},\"type\":\"Identifier\",\"name\":\"a\"},\"prefix\":true},\"right\":{\"range\":[9964,9972],\"loc\":{\"start\":{\"line\":306,\"column\":25},\"end\":{\"line\":306,\"column\":33}},\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"'object'\"}},\"right\":{\"range\":[9976,10007],\"loc\":{\"start\":{\"line\":306,\"column\":37},\"end\":{\"line\":306,\"column\":68}},\"type\":\"CallExpression\",\"callee\":{\"range\":[9976,10004],\"loc\":{\"start\":{\"line\":306,\"column\":37},\"end\":{\"line\":306,\"column\":65}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[9976,9998],\"loc\":{\"start\":{\"line\":306,\"column\":37},\"end\":{\"line\":306,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[9976,9989],\"loc\":{\"start\":{\"line\":306,\"column\":37},\"end\":{\"line\":306,\"column\":50}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[9990,9998],\"loc\":{\"start\":{\"line\":306,\"column\":51},\"end\":{\"line\":306,\"column\":59}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[9999,10004],\"loc\":{\"start\":{\"line\":306,\"column\":60},\"end\":{\"line\":306,\"column\":65}},\"type\":\"Identifier\",\"name\":\"isSeq\"}},\"arguments\":[{\"range\":[10005,10006],\"loc\":{\"start\":{\"line\":306,\"column\":66},\"end\":{\"line\":306,\"column\":67}},\"type\":\"Identifier\",\"name\":\"a\"}]}},\"right\":{\"range\":[10011,10042],\"loc\":{\"start\":{\"line\":306,\"column\":72},\"end\":{\"line\":306,\"column\":103}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10011,10039],\"loc\":{\"start\":{\"line\":306,\"column\":72},\"end\":{\"line\":306,\"column\":100}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10011,10033],\"loc\":{\"start\":{\"line\":306,\"column\":72},\"end\":{\"line\":306,\"column\":94}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10011,10024],\"loc\":{\"start\":{\"line\":306,\"column\":72},\"end\":{\"line\":306,\"column\":85}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[10025,10033],\"loc\":{\"start\":{\"line\":306,\"column\":86},\"end\":{\"line\":306,\"column\":94}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[10034,10039],\"loc\":{\"start\":{\"line\":306,\"column\":95},\"end\":{\"line\":306,\"column\":100}},\"type\":\"Identifier\",\"name\":\"isSeq\"}},\"arguments\":[{\"range\":[10040,10041],\"loc\":{\"start\":{\"line\":306,\"column\":101},\"end\":{\"line\":306,\"column\":102}},\"type\":\"Identifier\",\"name\":\"b\"}]}},\"consequent\":{\"range\":[10044,10554],\"loc\":{\"start\":{\"line\":306,\"column\":105},\"end\":{\"line\":317,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[10056,10187],\"loc\":{\"start\":{\"line\":307,\"column\":10},\"end\":{\"line\":308,\"column\":106}},\"type\":\"IfStatement\",\"test\":{\"range\":[10060,10079],\"loc\":{\"start\":{\"line\":307,\"column\":14},\"end\":{\"line\":307,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[10060,10067],\"loc\":{\"start\":{\"line\":307,\"column\":14},\"end\":{\"line\":307,\"column\":21}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10060,10061],\"loc\":{\"start\":{\"line\":307,\"column\":14},\"end\":{\"line\":307,\"column\":15}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10062,10067],\"loc\":{\"start\":{\"line\":307,\"column\":16},\"end\":{\"line\":307,\"column\":21}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[10072,10079],\"loc\":{\"start\":{\"line\":307,\"column\":26},\"end\":{\"line\":307,\"column\":33}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10072,10073],\"loc\":{\"start\":{\"line\":307,\"column\":26},\"end\":{\"line\":307,\"column\":27}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[10074,10079],\"loc\":{\"start\":{\"line\":307,\"column\":28},\"end\":{\"line\":307,\"column\":33}},\"type\":\"Identifier\",\"name\":\"_type\"}}},\"consequent\":{\"range\":[10093,10187],\"loc\":{\"start\":{\"line\":308,\"column\":12},\"end\":{\"line\":308,\"column\":106}},\"type\":\"ThrowStatement\",\"argument\":{\"range\":[10099,10186],\"loc\":{\"start\":{\"line\":308,\"column\":18},\"end\":{\"line\":308,\"column\":105}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10099,10108],\"loc\":{\"start\":{\"line\":308,\"column\":18},\"end\":{\"line\":308,\"column\":27}},\"type\":\"Identifier\",\"name\":\"TypeError\"},\"arguments\":[{\"range\":[10109,10185],\"loc\":{\"start\":{\"line\":308,\"column\":28},\"end\":{\"line\":308,\"column\":104}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[10109,10175],\"loc\":{\"start\":{\"line\":308,\"column\":28},\"end\":{\"line\":308,\"column\":94}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[10109,10164],\"loc\":{\"start\":{\"line\":308,\"column\":28},\"end\":{\"line\":308,\"column\":83}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[10109,10154],\"loc\":{\"start\":{\"line\":308,\"column\":28},\"end\":{\"line\":308,\"column\":73}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[10109,10142],\"loc\":{\"start\":{\"line\":308,\"column\":28},\"end\":{\"line\":308,\"column\":61}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[10109,10132],\"loc\":{\"start\":{\"line\":308,\"column\":28},\"end\":{\"line\":308,\"column\":51}},\"type\":\"Literal\",\"value\":\"can only concatenate \",\"raw\":\"\\\"can only concatenate \\\"\"},\"right\":{\"range\":[10135,10142],\"loc\":{\"start\":{\"line\":308,\"column\":54},\"end\":{\"line\":308,\"column\":61}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10135,10136],\"loc\":{\"start\":{\"line\":308,\"column\":54},\"end\":{\"line\":308,\"column\":55}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10137,10142],\"loc\":{\"start\":{\"line\":308,\"column\":56},\"end\":{\"line\":308,\"column\":61}},\"type\":\"Identifier\",\"name\":\"_type\"}}},\"right\":{\"range\":[10145,10154],\"loc\":{\"start\":{\"line\":308,\"column\":64},\"end\":{\"line\":308,\"column\":73}},\"type\":\"Literal\",\"value\":\" (not '\",\"raw\":\"\\\" (not '\\\"\"}},\"right\":{\"range\":[10157,10164],\"loc\":{\"start\":{\"line\":308,\"column\":76},\"end\":{\"line\":308,\"column\":83}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10157,10158],\"loc\":{\"start\":{\"line\":308,\"column\":76},\"end\":{\"line\":308,\"column\":77}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[10159,10164],\"loc\":{\"start\":{\"line\":308,\"column\":78},\"end\":{\"line\":308,\"column\":83}},\"type\":\"Identifier\",\"name\":\"_type\"}}},\"right\":{\"range\":[10167,10175],\"loc\":{\"start\":{\"line\":308,\"column\":86},\"end\":{\"line\":308,\"column\":94}},\"type\":\"Literal\",\"value\":\"') to \",\"raw\":\"\\\"') to \\\"\"}},\"right\":{\"range\":[10178,10185],\"loc\":{\"start\":{\"line\":308,\"column\":97},\"end\":{\"line\":308,\"column\":104}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10178,10179],\"loc\":{\"start\":{\"line\":308,\"column\":97},\"end\":{\"line\":308,\"column\":98}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10180,10185],\"loc\":{\"start\":{\"line\":308,\"column\":99},\"end\":{\"line\":308,\"column\":104}},\"type\":\"Identifier\",\"name\":\"_type\"}}}]}},\"alternate\":null},{\"range\":[10198,10206],\"loc\":{\"start\":{\"line\":309,\"column\":10},\"end\":{\"line\":309,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[10202,10205],\"loc\":{\"start\":{\"line\":309,\"column\":14},\"end\":{\"line\":309,\"column\":17}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[10202,10205],\"loc\":{\"start\":{\"line\":309,\"column\":14},\"end\":{\"line\":309,\"column\":17}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[10217,10361],\"loc\":{\"start\":{\"line\":310,\"column\":10},\"end\":{\"line\":311,\"column\":80}},\"type\":\"IfStatement\",\"test\":{\"range\":[10221,10239],\"loc\":{\"start\":{\"line\":310,\"column\":14},\"end\":{\"line\":310,\"column\":32}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[10221,10228],\"loc\":{\"start\":{\"line\":310,\"column\":14},\"end\":{\"line\":310,\"column\":21}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10221,10222],\"loc\":{\"start\":{\"line\":310,\"column\":14},\"end\":{\"line\":310,\"column\":15}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10223,10228],\"loc\":{\"start\":{\"line\":310,\"column\":16},\"end\":{\"line\":310,\"column\":21}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[10233,10239],\"loc\":{\"start\":{\"line\":310,\"column\":26},\"end\":{\"line\":310,\"column\":32}},\"type\":\"Literal\",\"value\":\"list\",\"raw\":\"'list'\"}},\"consequent\":{\"range\":[10241,10280],\"loc\":{\"start\":{\"line\":310,\"column\":34},\"end\":{\"line\":310,\"column\":73}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[10241,10279],\"loc\":{\"start\":{\"line\":310,\"column\":34},\"end\":{\"line\":310,\"column\":72}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[10241,10244],\"loc\":{\"start\":{\"line\":310,\"column\":34},\"end\":{\"line\":310,\"column\":37}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[10247,10279],\"loc\":{\"start\":{\"line\":310,\"column\":40},\"end\":{\"line\":310,\"column\":72}},\"type\":\"NewExpression\",\"callee\":{\"range\":[10251,10277],\"loc\":{\"start\":{\"line\":310,\"column\":44},\"end\":{\"line\":310,\"column\":70}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10251,10272],\"loc\":{\"start\":{\"line\":310,\"column\":44},\"end\":{\"line\":310,\"column\":65}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10251,10264],\"loc\":{\"start\":{\"line\":310,\"column\":44},\"end\":{\"line\":310,\"column\":57}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[10265,10272],\"loc\":{\"start\":{\"line\":310,\"column\":58},\"end\":{\"line\":310,\"column\":65}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[10273,10277],\"loc\":{\"start\":{\"line\":310,\"column\":66},\"end\":{\"line\":310,\"column\":70}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}},\"alternate\":{\"range\":[10296,10361],\"loc\":{\"start\":{\"line\":311,\"column\":15},\"end\":{\"line\":311,\"column\":80}},\"type\":\"IfStatement\",\"test\":{\"range\":[10300,10319],\"loc\":{\"start\":{\"line\":311,\"column\":19},\"end\":{\"line\":311,\"column\":38}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[10300,10307],\"loc\":{\"start\":{\"line\":311,\"column\":19},\"end\":{\"line\":311,\"column\":26}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10300,10301],\"loc\":{\"start\":{\"line\":311,\"column\":19},\"end\":{\"line\":311,\"column\":20}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10302,10307],\"loc\":{\"start\":{\"line\":311,\"column\":21},\"end\":{\"line\":311,\"column\":26}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[10312,10319],\"loc\":{\"start\":{\"line\":311,\"column\":31},\"end\":{\"line\":311,\"column\":38}},\"type\":\"Literal\",\"value\":\"tuple\",\"raw\":\"'tuple'\"}},\"consequent\":{\"range\":[10321,10361],\"loc\":{\"start\":{\"line\":311,\"column\":40},\"end\":{\"line\":311,\"column\":80}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[10321,10360],\"loc\":{\"start\":{\"line\":311,\"column\":40},\"end\":{\"line\":311,\"column\":79}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[10321,10324],\"loc\":{\"start\":{\"line\":311,\"column\":40},\"end\":{\"line\":311,\"column\":43}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[10327,10360],\"loc\":{\"start\":{\"line\":311,\"column\":46},\"end\":{\"line\":311,\"column\":79}},\"type\":\"NewExpression\",\"callee\":{\"range\":[10331,10358],\"loc\":{\"start\":{\"line\":311,\"column\":50},\"end\":{\"line\":311,\"column\":77}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10331,10352],\"loc\":{\"start\":{\"line\":311,\"column\":50},\"end\":{\"line\":311,\"column\":71}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10331,10344],\"loc\":{\"start\":{\"line\":311,\"column\":50},\"end\":{\"line\":311,\"column\":63}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[10345,10352],\"loc\":{\"start\":{\"line\":311,\"column\":64},\"end\":{\"line\":311,\"column\":71}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[10353,10358],\"loc\":{\"start\":{\"line\":311,\"column\":72},\"end\":{\"line\":311,\"column\":77}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[]}}},\"alternate\":null}},{\"range\":[10372,10544],\"loc\":{\"start\":{\"line\":312,\"column\":10},\"end\":{\"line\":316,\"column\":11}},\"type\":\"IfStatement\",\"test\":{\"range\":[10376,10379],\"loc\":{\"start\":{\"line\":312,\"column\":14},\"end\":{\"line\":312,\"column\":17}},\"type\":\"Identifier\",\"name\":\"ret\"},\"consequent\":{\"range\":[10381,10544],\"loc\":{\"start\":{\"line\":312,\"column\":19},\"end\":{\"line\":316,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[10395,10445],\"loc\":{\"start\":{\"line\":313,\"column\":12},\"end\":{\"line\":313,\"column\":62}},\"type\":\"ForStatement\",\"init\":{\"range\":[10400,10409],\"loc\":{\"start\":{\"line\":313,\"column\":17},\"end\":{\"line\":313,\"column\":26}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[10404,10409],\"loc\":{\"start\":{\"line\":313,\"column\":21},\"end\":{\"line\":313,\"column\":26}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[10404,10405],\"loc\":{\"start\":{\"line\":313,\"column\":21},\"end\":{\"line\":313,\"column\":22}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[10408,10409],\"loc\":{\"start\":{\"line\":313,\"column\":25},\"end\":{\"line\":313,\"column\":26}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[10411,10423],\"loc\":{\"start\":{\"line\":313,\"column\":28},\"end\":{\"line\":313,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[10411,10412],\"loc\":{\"start\":{\"line\":313,\"column\":28},\"end\":{\"line\":313,\"column\":29}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[10415,10423],\"loc\":{\"start\":{\"line\":313,\"column\":32},\"end\":{\"line\":313,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10415,10416],\"loc\":{\"start\":{\"line\":313,\"column\":32},\"end\":{\"line\":313,\"column\":33}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10417,10423],\"loc\":{\"start\":{\"line\":313,\"column\":34},\"end\":{\"line\":313,\"column\":40}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[10425,10428],\"loc\":{\"start\":{\"line\":313,\"column\":42},\"end\":{\"line\":313,\"column\":45}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[10425,10426],\"loc\":{\"start\":{\"line\":313,\"column\":42},\"end\":{\"line\":313,\"column\":43}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[10430,10445],\"loc\":{\"start\":{\"line\":313,\"column\":47},\"end\":{\"line\":313,\"column\":62}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[10430,10444],\"loc\":{\"start\":{\"line\":313,\"column\":47},\"end\":{\"line\":313,\"column\":61}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10430,10438],\"loc\":{\"start\":{\"line\":313,\"column\":47},\"end\":{\"line\":313,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10430,10433],\"loc\":{\"start\":{\"line\":313,\"column\":47},\"end\":{\"line\":313,\"column\":50}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[10434,10438],\"loc\":{\"start\":{\"line\":313,\"column\":51},\"end\":{\"line\":313,\"column\":55}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[10439,10443],\"loc\":{\"start\":{\"line\":313,\"column\":56},\"end\":{\"line\":313,\"column\":60}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[10439,10440],\"loc\":{\"start\":{\"line\":313,\"column\":56},\"end\":{\"line\":313,\"column\":57}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10441,10442],\"loc\":{\"start\":{\"line\":313,\"column\":58},\"end\":{\"line\":313,\"column\":59}},\"type\":\"Identifier\",\"name\":\"i\"}}]}}},{\"range\":[10458,10508],\"loc\":{\"start\":{\"line\":314,\"column\":12},\"end\":{\"line\":314,\"column\":62}},\"type\":\"ForStatement\",\"init\":{\"range\":[10463,10472],\"loc\":{\"start\":{\"line\":314,\"column\":17},\"end\":{\"line\":314,\"column\":26}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[10467,10472],\"loc\":{\"start\":{\"line\":314,\"column\":21},\"end\":{\"line\":314,\"column\":26}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[10467,10468],\"loc\":{\"start\":{\"line\":314,\"column\":21},\"end\":{\"line\":314,\"column\":22}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[10471,10472],\"loc\":{\"start\":{\"line\":314,\"column\":25},\"end\":{\"line\":314,\"column\":26}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[10474,10486],\"loc\":{\"start\":{\"line\":314,\"column\":28},\"end\":{\"line\":314,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[10474,10475],\"loc\":{\"start\":{\"line\":314,\"column\":28},\"end\":{\"line\":314,\"column\":29}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[10478,10486],\"loc\":{\"start\":{\"line\":314,\"column\":32},\"end\":{\"line\":314,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10478,10479],\"loc\":{\"start\":{\"line\":314,\"column\":32},\"end\":{\"line\":314,\"column\":33}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[10480,10486],\"loc\":{\"start\":{\"line\":314,\"column\":34},\"end\":{\"line\":314,\"column\":40}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[10488,10491],\"loc\":{\"start\":{\"line\":314,\"column\":42},\"end\":{\"line\":314,\"column\":45}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[10488,10489],\"loc\":{\"start\":{\"line\":314,\"column\":42},\"end\":{\"line\":314,\"column\":43}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[10493,10508],\"loc\":{\"start\":{\"line\":314,\"column\":47},\"end\":{\"line\":314,\"column\":62}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[10493,10507],\"loc\":{\"start\":{\"line\":314,\"column\":47},\"end\":{\"line\":314,\"column\":61}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10493,10501],\"loc\":{\"start\":{\"line\":314,\"column\":47},\"end\":{\"line\":314,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10493,10496],\"loc\":{\"start\":{\"line\":314,\"column\":47},\"end\":{\"line\":314,\"column\":50}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[10497,10501],\"loc\":{\"start\":{\"line\":314,\"column\":51},\"end\":{\"line\":314,\"column\":55}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[10502,10506],\"loc\":{\"start\":{\"line\":314,\"column\":56},\"end\":{\"line\":314,\"column\":60}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[10502,10503],\"loc\":{\"start\":{\"line\":314,\"column\":56},\"end\":{\"line\":314,\"column\":57}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[10504,10505],\"loc\":{\"start\":{\"line\":314,\"column\":58},\"end\":{\"line\":314,\"column\":59}},\"type\":\"Identifier\",\"name\":\"i\"}}]}}},{\"range\":[10521,10532],\"loc\":{\"start\":{\"line\":315,\"column\":12},\"end\":{\"line\":315,\"column\":23}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[10528,10531],\"loc\":{\"start\":{\"line\":315,\"column\":19},\"end\":{\"line\":315,\"column\":22}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"alternate\":null}]},\"alternate\":null},{\"range\":[10563,10576],\"loc\":{\"start\":{\"line\":318,\"column\":8},\"end\":{\"line\":318,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[10570,10575],\"loc\":{\"start\":{\"line\":318,\"column\":15},\"end\":{\"line\":318,\"column\":20}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[10570,10571],\"loc\":{\"start\":{\"line\":318,\"column\":15},\"end\":{\"line\":318,\"column\":16}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[10574,10575],\"loc\":{\"start\":{\"line\":318,\"column\":19},\"end\":{\"line\":318,\"column\":20}},\"type\":\"Identifier\",\"name\":\"b\"}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[10592,10725],\"loc\":{\"start\":{\"line\":320,\"column\":6},\"end\":{\"line\":323,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[10592,10594],\"loc\":{\"start\":{\"line\":320,\"column\":6},\"end\":{\"line\":320,\"column\":8}},\"type\":\"Identifier\",\"name\":\"in\"},\"computed\":false,\"value\":{\"range\":[10596,10725],\"loc\":{\"start\":{\"line\":320,\"column\":10},\"end\":{\"line\":323,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[10606,10607],\"loc\":{\"start\":{\"line\":320,\"column\":20},\"end\":{\"line\":320,\"column\":21}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[10609,10610],\"loc\":{\"start\":{\"line\":320,\"column\":23},\"end\":{\"line\":320,\"column\":24}},\"type\":\"Identifier\",\"name\":\"b\"},{\"range\":[10612,10613],\"loc\":{\"start\":{\"line\":320,\"column\":26},\"end\":{\"line\":320,\"column\":27}},\"type\":\"Identifier\",\"name\":\"n\"}],\"defaults\":[],\"body\":{\"range\":[10615,10725],\"loc\":{\"start\":{\"line\":320,\"column\":29},\"end\":{\"line\":323,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[10625,10690],\"loc\":{\"start\":{\"line\":321,\"column\":8},\"end\":{\"line\":321,\"column\":73}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[10629,10689],\"loc\":{\"start\":{\"line\":321,\"column\":12},\"end\":{\"line\":321,\"column\":72}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[10629,10630],\"loc\":{\"start\":{\"line\":321,\"column\":12},\"end\":{\"line\":321,\"column\":13}},\"type\":\"Identifier\",\"name\":\"r\"},\"init\":{\"range\":[10633,10689],\"loc\":{\"start\":{\"line\":321,\"column\":16},\"end\":{\"line\":321,\"column\":72}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[10633,10660],\"loc\":{\"start\":{\"line\":321,\"column\":16},\"end\":{\"line\":321,\"column\":43}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10633,10649],\"loc\":{\"start\":{\"line\":321,\"column\":16},\"end\":{\"line\":321,\"column\":32}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10633,10634],\"loc\":{\"start\":{\"line\":321,\"column\":16},\"end\":{\"line\":321,\"column\":17}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[10635,10649],\"loc\":{\"start\":{\"line\":321,\"column\":18},\"end\":{\"line\":321,\"column\":32}},\"type\":\"Identifier\",\"name\":\"hasOwnProperty\"}},\"arguments\":[{\"range\":[10650,10659],\"loc\":{\"start\":{\"line\":321,\"column\":33},\"end\":{\"line\":321,\"column\":42}},\"type\":\"Literal\",\"value\":\"indexOf\",\"raw\":\"'indexOf'\"}]},\"consequent\":{\"range\":[10663,10680],\"loc\":{\"start\":{\"line\":321,\"column\":46},\"end\":{\"line\":321,\"column\":63}},\"type\":\"BinaryExpression\",\"operator\":\">=\",\"left\":{\"range\":[10663,10675],\"loc\":{\"start\":{\"line\":321,\"column\":46},\"end\":{\"line\":321,\"column\":58}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10663,10672],\"loc\":{\"start\":{\"line\":321,\"column\":46},\"end\":{\"line\":321,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10663,10664],\"loc\":{\"start\":{\"line\":321,\"column\":46},\"end\":{\"line\":321,\"column\":47}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[10665,10672],\"loc\":{\"start\":{\"line\":321,\"column\":48},\"end\":{\"line\":321,\"column\":55}},\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"range\":[10673,10674],\"loc\":{\"start\":{\"line\":321,\"column\":56},\"end\":{\"line\":321,\"column\":57}},\"type\":\"Identifier\",\"name\":\"a\"}]},\"right\":{\"range\":[10679,10680],\"loc\":{\"start\":{\"line\":321,\"column\":62},\"end\":{\"line\":321,\"column\":63}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"alternate\":{\"range\":[10683,10689],\"loc\":{\"start\":{\"line\":321,\"column\":66},\"end\":{\"line\":321,\"column\":72}},\"type\":\"BinaryExpression\",\"operator\":\"in\",\"left\":{\"range\":[10683,10684],\"loc\":{\"start\":{\"line\":321,\"column\":66},\"end\":{\"line\":321,\"column\":67}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[10688,10689],\"loc\":{\"start\":{\"line\":321,\"column\":71},\"end\":{\"line\":321,\"column\":72}},\"type\":\"Identifier\",\"name\":\"b\"}}}}],\"kind\":\"var\"},{\"range\":[10699,10717],\"loc\":{\"start\":{\"line\":322,\"column\":8},\"end\":{\"line\":322,\"column\":26}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[10706,10716],\"loc\":{\"start\":{\"line\":322,\"column\":15},\"end\":{\"line\":322,\"column\":25}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[10706,10707],\"loc\":{\"start\":{\"line\":322,\"column\":15},\"end\":{\"line\":322,\"column\":16}},\"type\":\"Identifier\",\"name\":\"n\"},\"consequent\":{\"range\":[10710,10712],\"loc\":{\"start\":{\"line\":322,\"column\":19},\"end\":{\"line\":322,\"column\":21}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[10711,10712],\"loc\":{\"start\":{\"line\":322,\"column\":20},\"end\":{\"line\":322,\"column\":21}},\"type\":\"Identifier\",\"name\":\"r\"},\"prefix\":true},\"alternate\":{\"range\":[10715,10716],\"loc\":{\"start\":{\"line\":322,\"column\":24},\"end\":{\"line\":322,\"column\":25}},\"type\":\"Identifier\",\"name\":\"r\"}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[10733,11763],\"loc\":{\"start\":{\"line\":324,\"column\":6},\"end\":{\"line\":348,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[10733,10741],\"loc\":{\"start\":{\"line\":324,\"column\":6},\"end\":{\"line\":324,\"column\":14}},\"type\":\"Identifier\",\"name\":\"multiply\"},\"computed\":false,\"value\":{\"range\":[10743,11763],\"loc\":{\"start\":{\"line\":324,\"column\":16},\"end\":{\"line\":348,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[10753,10754],\"loc\":{\"start\":{\"line\":324,\"column\":26},\"end\":{\"line\":324,\"column\":27}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[10756,10757],\"loc\":{\"start\":{\"line\":324,\"column\":29},\"end\":{\"line\":324,\"column\":30}},\"type\":\"Identifier\",\"name\":\"b\"}],\"defaults\":[],\"body\":{\"range\":[10759,11763],\"loc\":{\"start\":{\"line\":324,\"column\":32},\"end\":{\"line\":348,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[10826,11733],\"loc\":{\"start\":{\"line\":326,\"column\":8},\"end\":{\"line\":346,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[10831,10852],\"loc\":{\"start\":{\"line\":326,\"column\":13},\"end\":{\"line\":326,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[10831,10839],\"loc\":{\"start\":{\"line\":326,\"column\":13},\"end\":{\"line\":326,\"column\":21}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[10838,10839],\"loc\":{\"start\":{\"line\":326,\"column\":20},\"end\":{\"line\":326,\"column\":21}},\"type\":\"Identifier\",\"name\":\"a\"},\"prefix\":true},\"right\":{\"range\":[10844,10852],\"loc\":{\"start\":{\"line\":326,\"column\":26},\"end\":{\"line\":326,\"column\":34}},\"type\":\"Literal\",\"value\":\"object\",\"raw\":\"'object'\"}},\"consequent\":{\"range\":[10855,11733],\"loc\":{\"start\":{\"line\":326,\"column\":37},\"end\":{\"line\":346,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[10867,11723],\"loc\":{\"start\":{\"line\":327,\"column\":10},\"end\":{\"line\":345,\"column\":11}},\"type\":\"IfStatement\",\"test\":{\"range\":[10871,10925],\"loc\":{\"start\":{\"line\":327,\"column\":14},\"end\":{\"line\":327,\"column\":68}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[10871,10902],\"loc\":{\"start\":{\"line\":327,\"column\":14},\"end\":{\"line\":327,\"column\":45}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10871,10899],\"loc\":{\"start\":{\"line\":327,\"column\":14},\"end\":{\"line\":327,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10871,10893],\"loc\":{\"start\":{\"line\":327,\"column\":14},\"end\":{\"line\":327,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10871,10884],\"loc\":{\"start\":{\"line\":327,\"column\":14},\"end\":{\"line\":327,\"column\":27}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[10885,10893],\"loc\":{\"start\":{\"line\":327,\"column\":28},\"end\":{\"line\":327,\"column\":36}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[10894,10899],\"loc\":{\"start\":{\"line\":327,\"column\":37},\"end\":{\"line\":327,\"column\":42}},\"type\":\"Identifier\",\"name\":\"isSeq\"}},\"arguments\":[{\"range\":[10900,10901],\"loc\":{\"start\":{\"line\":327,\"column\":43},\"end\":{\"line\":327,\"column\":44}},\"type\":\"Identifier\",\"name\":\"a\"}]},\"right\":{\"range\":[10906,10925],\"loc\":{\"start\":{\"line\":327,\"column\":49},\"end\":{\"line\":327,\"column\":68}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[10907,10925],\"loc\":{\"start\":{\"line\":327,\"column\":50},\"end\":{\"line\":327,\"column\":68}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10907,10912],\"loc\":{\"start\":{\"line\":327,\"column\":50},\"end\":{\"line\":327,\"column\":55}},\"type\":\"Identifier\",\"name\":\"isNaN\"},\"arguments\":[{\"range\":[10913,10924],\"loc\":{\"start\":{\"line\":327,\"column\":56},\"end\":{\"line\":327,\"column\":67}},\"type\":\"CallExpression\",\"callee\":{\"range\":[10913,10921],\"loc\":{\"start\":{\"line\":327,\"column\":56},\"end\":{\"line\":327,\"column\":64}},\"type\":\"Identifier\",\"name\":\"parseInt\"},\"arguments\":[{\"range\":[10922,10923],\"loc\":{\"start\":{\"line\":327,\"column\":65},\"end\":{\"line\":327,\"column\":66}},\"type\":\"Identifier\",\"name\":\"b\"}]}]},\"prefix\":true}},\"consequent\":{\"range\":[10927,11292],\"loc\":{\"start\":{\"line\":327,\"column\":70},\"end\":{\"line\":336,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[10941,10949],\"loc\":{\"start\":{\"line\":328,\"column\":12},\"end\":{\"line\":328,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[10945,10948],\"loc\":{\"start\":{\"line\":328,\"column\":16},\"end\":{\"line\":328,\"column\":19}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[10945,10948],\"loc\":{\"start\":{\"line\":328,\"column\":16},\"end\":{\"line\":328,\"column\":19}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[10962,11108],\"loc\":{\"start\":{\"line\":329,\"column\":12},\"end\":{\"line\":330,\"column\":82}},\"type\":\"IfStatement\",\"test\":{\"range\":[10966,10984],\"loc\":{\"start\":{\"line\":329,\"column\":16},\"end\":{\"line\":329,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[10966,10973],\"loc\":{\"start\":{\"line\":329,\"column\":16},\"end\":{\"line\":329,\"column\":23}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10966,10967],\"loc\":{\"start\":{\"line\":329,\"column\":16},\"end\":{\"line\":329,\"column\":17}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[10968,10973],\"loc\":{\"start\":{\"line\":329,\"column\":18},\"end\":{\"line\":329,\"column\":23}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[10978,10984],\"loc\":{\"start\":{\"line\":329,\"column\":28},\"end\":{\"line\":329,\"column\":34}},\"type\":\"Literal\",\"value\":\"list\",\"raw\":\"'list'\"}},\"consequent\":{\"range\":[10986,11025],\"loc\":{\"start\":{\"line\":329,\"column\":36},\"end\":{\"line\":329,\"column\":75}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[10986,11024],\"loc\":{\"start\":{\"line\":329,\"column\":36},\"end\":{\"line\":329,\"column\":74}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[10986,10989],\"loc\":{\"start\":{\"line\":329,\"column\":36},\"end\":{\"line\":329,\"column\":39}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[10992,11024],\"loc\":{\"start\":{\"line\":329,\"column\":42},\"end\":{\"line\":329,\"column\":74}},\"type\":\"NewExpression\",\"callee\":{\"range\":[10996,11022],\"loc\":{\"start\":{\"line\":329,\"column\":46},\"end\":{\"line\":329,\"column\":72}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10996,11017],\"loc\":{\"start\":{\"line\":329,\"column\":46},\"end\":{\"line\":329,\"column\":67}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[10996,11009],\"loc\":{\"start\":{\"line\":329,\"column\":46},\"end\":{\"line\":329,\"column\":59}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11010,11017],\"loc\":{\"start\":{\"line\":329,\"column\":60},\"end\":{\"line\":329,\"column\":67}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[11018,11022],\"loc\":{\"start\":{\"line\":329,\"column\":68},\"end\":{\"line\":329,\"column\":72}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}},\"alternate\":{\"range\":[11043,11108],\"loc\":{\"start\":{\"line\":330,\"column\":17},\"end\":{\"line\":330,\"column\":82}},\"type\":\"IfStatement\",\"test\":{\"range\":[11047,11066],\"loc\":{\"start\":{\"line\":330,\"column\":21},\"end\":{\"line\":330,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[11047,11054],\"loc\":{\"start\":{\"line\":330,\"column\":21},\"end\":{\"line\":330,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11047,11048],\"loc\":{\"start\":{\"line\":330,\"column\":21},\"end\":{\"line\":330,\"column\":22}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[11049,11054],\"loc\":{\"start\":{\"line\":330,\"column\":23},\"end\":{\"line\":330,\"column\":28}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[11059,11066],\"loc\":{\"start\":{\"line\":330,\"column\":33},\"end\":{\"line\":330,\"column\":40}},\"type\":\"Literal\",\"value\":\"tuple\",\"raw\":\"'tuple'\"}},\"consequent\":{\"range\":[11068,11108],\"loc\":{\"start\":{\"line\":330,\"column\":42},\"end\":{\"line\":330,\"column\":82}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[11068,11107],\"loc\":{\"start\":{\"line\":330,\"column\":42},\"end\":{\"line\":330,\"column\":81}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[11068,11071],\"loc\":{\"start\":{\"line\":330,\"column\":42},\"end\":{\"line\":330,\"column\":45}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[11074,11107],\"loc\":{\"start\":{\"line\":330,\"column\":48},\"end\":{\"line\":330,\"column\":81}},\"type\":\"NewExpression\",\"callee\":{\"range\":[11078,11105],\"loc\":{\"start\":{\"line\":330,\"column\":52},\"end\":{\"line\":330,\"column\":79}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11078,11099],\"loc\":{\"start\":{\"line\":330,\"column\":52},\"end\":{\"line\":330,\"column\":73}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11078,11091],\"loc\":{\"start\":{\"line\":330,\"column\":52},\"end\":{\"line\":330,\"column\":65}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11092,11099],\"loc\":{\"start\":{\"line\":330,\"column\":66},\"end\":{\"line\":330,\"column\":73}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[11100,11105],\"loc\":{\"start\":{\"line\":330,\"column\":74},\"end\":{\"line\":330,\"column\":79}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[]}}},\"alternate\":null}},{\"range\":[11121,11280],\"loc\":{\"start\":{\"line\":331,\"column\":12},\"end\":{\"line\":335,\"column\":13}},\"type\":\"IfStatement\",\"test\":{\"range\":[11125,11128],\"loc\":{\"start\":{\"line\":331,\"column\":16},\"end\":{\"line\":331,\"column\":19}},\"type\":\"Identifier\",\"name\":\"ret\"},\"consequent\":{\"range\":[11130,11280],\"loc\":{\"start\":{\"line\":331,\"column\":21},\"end\":{\"line\":335,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[11146,11240],\"loc\":{\"start\":{\"line\":332,\"column\":14},\"end\":{\"line\":333,\"column\":66}},\"type\":\"ForStatement\",\"init\":{\"range\":[11151,11160],\"loc\":{\"start\":{\"line\":332,\"column\":19},\"end\":{\"line\":332,\"column\":28}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[11155,11160],\"loc\":{\"start\":{\"line\":332,\"column\":23},\"end\":{\"line\":332,\"column\":28}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[11155,11156],\"loc\":{\"start\":{\"line\":332,\"column\":23},\"end\":{\"line\":332,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[11159,11160],\"loc\":{\"start\":{\"line\":332,\"column\":27},\"end\":{\"line\":332,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[11162,11167],\"loc\":{\"start\":{\"line\":332,\"column\":30},\"end\":{\"line\":332,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[11162,11163],\"loc\":{\"start\":{\"line\":332,\"column\":30},\"end\":{\"line\":332,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[11166,11167],\"loc\":{\"start\":{\"line\":332,\"column\":34},\"end\":{\"line\":332,\"column\":35}},\"type\":\"Identifier\",\"name\":\"b\"}},\"update\":{\"range\":[11169,11172],\"loc\":{\"start\":{\"line\":332,\"column\":37},\"end\":{\"line\":332,\"column\":40}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[11169,11170],\"loc\":{\"start\":{\"line\":332,\"column\":37},\"end\":{\"line\":332,\"column\":38}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[11190,11240],\"loc\":{\"start\":{\"line\":333,\"column\":16},\"end\":{\"line\":333,\"column\":66}},\"type\":\"ForStatement\",\"init\":{\"range\":[11195,11204],\"loc\":{\"start\":{\"line\":333,\"column\":21},\"end\":{\"line\":333,\"column\":30}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[11199,11204],\"loc\":{\"start\":{\"line\":333,\"column\":25},\"end\":{\"line\":333,\"column\":30}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[11199,11200],\"loc\":{\"start\":{\"line\":333,\"column\":25},\"end\":{\"line\":333,\"column\":26}},\"type\":\"Identifier\",\"name\":\"j\"},\"init\":{\"range\":[11203,11204],\"loc\":{\"start\":{\"line\":333,\"column\":29},\"end\":{\"line\":333,\"column\":30}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[11206,11218],\"loc\":{\"start\":{\"line\":333,\"column\":32},\"end\":{\"line\":333,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[11206,11207],\"loc\":{\"start\":{\"line\":333,\"column\":32},\"end\":{\"line\":333,\"column\":33}},\"type\":\"Identifier\",\"name\":\"j\"},\"right\":{\"range\":[11210,11218],\"loc\":{\"start\":{\"line\":333,\"column\":36},\"end\":{\"line\":333,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11210,11211],\"loc\":{\"start\":{\"line\":333,\"column\":36},\"end\":{\"line\":333,\"column\":37}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[11212,11218],\"loc\":{\"start\":{\"line\":333,\"column\":38},\"end\":{\"line\":333,\"column\":44}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[11220,11223],\"loc\":{\"start\":{\"line\":333,\"column\":46},\"end\":{\"line\":333,\"column\":49}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[11220,11221],\"loc\":{\"start\":{\"line\":333,\"column\":46},\"end\":{\"line\":333,\"column\":47}},\"type\":\"Identifier\",\"name\":\"j\"},\"prefix\":false},\"body\":{\"range\":[11225,11240],\"loc\":{\"start\":{\"line\":333,\"column\":51},\"end\":{\"line\":333,\"column\":66}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[11225,11239],\"loc\":{\"start\":{\"line\":333,\"column\":51},\"end\":{\"line\":333,\"column\":65}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11225,11233],\"loc\":{\"start\":{\"line\":333,\"column\":51},\"end\":{\"line\":333,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11225,11228],\"loc\":{\"start\":{\"line\":333,\"column\":51},\"end\":{\"line\":333,\"column\":54}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[11229,11233],\"loc\":{\"start\":{\"line\":333,\"column\":55},\"end\":{\"line\":333,\"column\":59}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[11234,11238],\"loc\":{\"start\":{\"line\":333,\"column\":60},\"end\":{\"line\":333,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[11234,11235],\"loc\":{\"start\":{\"line\":333,\"column\":60},\"end\":{\"line\":333,\"column\":61}},\"type\":\"Identifier\",\"name\":\"a\"},\"property\":{\"range\":[11236,11237],\"loc\":{\"start\":{\"line\":333,\"column\":62},\"end\":{\"line\":333,\"column\":63}},\"type\":\"Identifier\",\"name\":\"j\"}}]}}}},{\"range\":[11255,11266],\"loc\":{\"start\":{\"line\":334,\"column\":14},\"end\":{\"line\":334,\"column\":25}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[11262,11265],\"loc\":{\"start\":{\"line\":334,\"column\":21},\"end\":{\"line\":334,\"column\":24}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"alternate\":null}]},\"alternate\":{\"range\":[11298,11723],\"loc\":{\"start\":{\"line\":336,\"column\":17},\"end\":{\"line\":345,\"column\":11}},\"type\":\"IfStatement\",\"test\":{\"range\":[11302,11356],\"loc\":{\"start\":{\"line\":336,\"column\":21},\"end\":{\"line\":336,\"column\":75}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[11302,11333],\"loc\":{\"start\":{\"line\":336,\"column\":21},\"end\":{\"line\":336,\"column\":52}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11302,11330],\"loc\":{\"start\":{\"line\":336,\"column\":21},\"end\":{\"line\":336,\"column\":49}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11302,11324],\"loc\":{\"start\":{\"line\":336,\"column\":21},\"end\":{\"line\":336,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11302,11315],\"loc\":{\"start\":{\"line\":336,\"column\":21},\"end\":{\"line\":336,\"column\":34}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11316,11324],\"loc\":{\"start\":{\"line\":336,\"column\":35},\"end\":{\"line\":336,\"column\":43}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[11325,11330],\"loc\":{\"start\":{\"line\":336,\"column\":44},\"end\":{\"line\":336,\"column\":49}},\"type\":\"Identifier\",\"name\":\"isSeq\"}},\"arguments\":[{\"range\":[11331,11332],\"loc\":{\"start\":{\"line\":336,\"column\":50},\"end\":{\"line\":336,\"column\":51}},\"type\":\"Identifier\",\"name\":\"b\"}]},\"right\":{\"range\":[11337,11356],\"loc\":{\"start\":{\"line\":336,\"column\":56},\"end\":{\"line\":336,\"column\":75}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[11338,11356],\"loc\":{\"start\":{\"line\":336,\"column\":57},\"end\":{\"line\":336,\"column\":75}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11338,11343],\"loc\":{\"start\":{\"line\":336,\"column\":57},\"end\":{\"line\":336,\"column\":62}},\"type\":\"Identifier\",\"name\":\"isNaN\"},\"arguments\":[{\"range\":[11344,11355],\"loc\":{\"start\":{\"line\":336,\"column\":63},\"end\":{\"line\":336,\"column\":74}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11344,11352],\"loc\":{\"start\":{\"line\":336,\"column\":63},\"end\":{\"line\":336,\"column\":71}},\"type\":\"Identifier\",\"name\":\"parseInt\"},\"arguments\":[{\"range\":[11353,11354],\"loc\":{\"start\":{\"line\":336,\"column\":72},\"end\":{\"line\":336,\"column\":73}},\"type\":\"Identifier\",\"name\":\"a\"}]}]},\"prefix\":true}},\"consequent\":{\"range\":[11358,11723],\"loc\":{\"start\":{\"line\":336,\"column\":77},\"end\":{\"line\":345,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[11372,11380],\"loc\":{\"start\":{\"line\":337,\"column\":12},\"end\":{\"line\":337,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[11376,11379],\"loc\":{\"start\":{\"line\":337,\"column\":16},\"end\":{\"line\":337,\"column\":19}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[11376,11379],\"loc\":{\"start\":{\"line\":337,\"column\":16},\"end\":{\"line\":337,\"column\":19}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[11393,11539],\"loc\":{\"start\":{\"line\":338,\"column\":12},\"end\":{\"line\":339,\"column\":82}},\"type\":\"IfStatement\",\"test\":{\"range\":[11397,11415],\"loc\":{\"start\":{\"line\":338,\"column\":16},\"end\":{\"line\":338,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[11397,11404],\"loc\":{\"start\":{\"line\":338,\"column\":16},\"end\":{\"line\":338,\"column\":23}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11397,11398],\"loc\":{\"start\":{\"line\":338,\"column\":16},\"end\":{\"line\":338,\"column\":17}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[11399,11404],\"loc\":{\"start\":{\"line\":338,\"column\":18},\"end\":{\"line\":338,\"column\":23}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[11409,11415],\"loc\":{\"start\":{\"line\":338,\"column\":28},\"end\":{\"line\":338,\"column\":34}},\"type\":\"Literal\",\"value\":\"list\",\"raw\":\"'list'\"}},\"consequent\":{\"range\":[11417,11456],\"loc\":{\"start\":{\"line\":338,\"column\":36},\"end\":{\"line\":338,\"column\":75}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[11417,11455],\"loc\":{\"start\":{\"line\":338,\"column\":36},\"end\":{\"line\":338,\"column\":74}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[11417,11420],\"loc\":{\"start\":{\"line\":338,\"column\":36},\"end\":{\"line\":338,\"column\":39}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[11423,11455],\"loc\":{\"start\":{\"line\":338,\"column\":42},\"end\":{\"line\":338,\"column\":74}},\"type\":\"NewExpression\",\"callee\":{\"range\":[11427,11453],\"loc\":{\"start\":{\"line\":338,\"column\":46},\"end\":{\"line\":338,\"column\":72}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11427,11448],\"loc\":{\"start\":{\"line\":338,\"column\":46},\"end\":{\"line\":338,\"column\":67}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11427,11440],\"loc\":{\"start\":{\"line\":338,\"column\":46},\"end\":{\"line\":338,\"column\":59}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11441,11448],\"loc\":{\"start\":{\"line\":338,\"column\":60},\"end\":{\"line\":338,\"column\":67}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[11449,11453],\"loc\":{\"start\":{\"line\":338,\"column\":68},\"end\":{\"line\":338,\"column\":72}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}},\"alternate\":{\"range\":[11474,11539],\"loc\":{\"start\":{\"line\":339,\"column\":17},\"end\":{\"line\":339,\"column\":82}},\"type\":\"IfStatement\",\"test\":{\"range\":[11478,11497],\"loc\":{\"start\":{\"line\":339,\"column\":21},\"end\":{\"line\":339,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[11478,11485],\"loc\":{\"start\":{\"line\":339,\"column\":21},\"end\":{\"line\":339,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11478,11479],\"loc\":{\"start\":{\"line\":339,\"column\":21},\"end\":{\"line\":339,\"column\":22}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[11480,11485],\"loc\":{\"start\":{\"line\":339,\"column\":23},\"end\":{\"line\":339,\"column\":28}},\"type\":\"Identifier\",\"name\":\"_type\"}},\"right\":{\"range\":[11490,11497],\"loc\":{\"start\":{\"line\":339,\"column\":33},\"end\":{\"line\":339,\"column\":40}},\"type\":\"Literal\",\"value\":\"tuple\",\"raw\":\"'tuple'\"}},\"consequent\":{\"range\":[11499,11539],\"loc\":{\"start\":{\"line\":339,\"column\":42},\"end\":{\"line\":339,\"column\":82}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[11499,11538],\"loc\":{\"start\":{\"line\":339,\"column\":42},\"end\":{\"line\":339,\"column\":81}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[11499,11502],\"loc\":{\"start\":{\"line\":339,\"column\":42},\"end\":{\"line\":339,\"column\":45}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[11505,11538],\"loc\":{\"start\":{\"line\":339,\"column\":48},\"end\":{\"line\":339,\"column\":81}},\"type\":\"NewExpression\",\"callee\":{\"range\":[11509,11536],\"loc\":{\"start\":{\"line\":339,\"column\":52},\"end\":{\"line\":339,\"column\":79}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11509,11530],\"loc\":{\"start\":{\"line\":339,\"column\":52},\"end\":{\"line\":339,\"column\":73}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11509,11522],\"loc\":{\"start\":{\"line\":339,\"column\":52},\"end\":{\"line\":339,\"column\":65}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11523,11530],\"loc\":{\"start\":{\"line\":339,\"column\":66},\"end\":{\"line\":339,\"column\":73}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[11531,11536],\"loc\":{\"start\":{\"line\":339,\"column\":74},\"end\":{\"line\":339,\"column\":79}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[]}}},\"alternate\":null}},{\"range\":[11552,11711],\"loc\":{\"start\":{\"line\":340,\"column\":12},\"end\":{\"line\":344,\"column\":13}},\"type\":\"IfStatement\",\"test\":{\"range\":[11556,11559],\"loc\":{\"start\":{\"line\":340,\"column\":16},\"end\":{\"line\":340,\"column\":19}},\"type\":\"Identifier\",\"name\":\"ret\"},\"consequent\":{\"range\":[11561,11711],\"loc\":{\"start\":{\"line\":340,\"column\":21},\"end\":{\"line\":344,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[11577,11671],\"loc\":{\"start\":{\"line\":341,\"column\":14},\"end\":{\"line\":342,\"column\":66}},\"type\":\"ForStatement\",\"init\":{\"range\":[11582,11591],\"loc\":{\"start\":{\"line\":341,\"column\":19},\"end\":{\"line\":341,\"column\":28}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[11586,11591],\"loc\":{\"start\":{\"line\":341,\"column\":23},\"end\":{\"line\":341,\"column\":28}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[11586,11587],\"loc\":{\"start\":{\"line\":341,\"column\":23},\"end\":{\"line\":341,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[11590,11591],\"loc\":{\"start\":{\"line\":341,\"column\":27},\"end\":{\"line\":341,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[11593,11598],\"loc\":{\"start\":{\"line\":341,\"column\":30},\"end\":{\"line\":341,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[11593,11594],\"loc\":{\"start\":{\"line\":341,\"column\":30},\"end\":{\"line\":341,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[11597,11598],\"loc\":{\"start\":{\"line\":341,\"column\":34},\"end\":{\"line\":341,\"column\":35}},\"type\":\"Identifier\",\"name\":\"a\"}},\"update\":{\"range\":[11600,11603],\"loc\":{\"start\":{\"line\":341,\"column\":37},\"end\":{\"line\":341,\"column\":40}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[11600,11601],\"loc\":{\"start\":{\"line\":341,\"column\":37},\"end\":{\"line\":341,\"column\":38}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[11621,11671],\"loc\":{\"start\":{\"line\":342,\"column\":16},\"end\":{\"line\":342,\"column\":66}},\"type\":\"ForStatement\",\"init\":{\"range\":[11626,11635],\"loc\":{\"start\":{\"line\":342,\"column\":21},\"end\":{\"line\":342,\"column\":30}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[11630,11635],\"loc\":{\"start\":{\"line\":342,\"column\":25},\"end\":{\"line\":342,\"column\":30}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[11630,11631],\"loc\":{\"start\":{\"line\":342,\"column\":25},\"end\":{\"line\":342,\"column\":26}},\"type\":\"Identifier\",\"name\":\"j\"},\"init\":{\"range\":[11634,11635],\"loc\":{\"start\":{\"line\":342,\"column\":29},\"end\":{\"line\":342,\"column\":30}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[11637,11649],\"loc\":{\"start\":{\"line\":342,\"column\":32},\"end\":{\"line\":342,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[11637,11638],\"loc\":{\"start\":{\"line\":342,\"column\":32},\"end\":{\"line\":342,\"column\":33}},\"type\":\"Identifier\",\"name\":\"j\"},\"right\":{\"range\":[11641,11649],\"loc\":{\"start\":{\"line\":342,\"column\":36},\"end\":{\"line\":342,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11641,11642],\"loc\":{\"start\":{\"line\":342,\"column\":36},\"end\":{\"line\":342,\"column\":37}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[11643,11649],\"loc\":{\"start\":{\"line\":342,\"column\":38},\"end\":{\"line\":342,\"column\":44}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[11651,11654],\"loc\":{\"start\":{\"line\":342,\"column\":46},\"end\":{\"line\":342,\"column\":49}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[11651,11652],\"loc\":{\"start\":{\"line\":342,\"column\":46},\"end\":{\"line\":342,\"column\":47}},\"type\":\"Identifier\",\"name\":\"j\"},\"prefix\":false},\"body\":{\"range\":[11656,11671],\"loc\":{\"start\":{\"line\":342,\"column\":51},\"end\":{\"line\":342,\"column\":66}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[11656,11670],\"loc\":{\"start\":{\"line\":342,\"column\":51},\"end\":{\"line\":342,\"column\":65}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11656,11664],\"loc\":{\"start\":{\"line\":342,\"column\":51},\"end\":{\"line\":342,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11656,11659],\"loc\":{\"start\":{\"line\":342,\"column\":51},\"end\":{\"line\":342,\"column\":54}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[11660,11664],\"loc\":{\"start\":{\"line\":342,\"column\":55},\"end\":{\"line\":342,\"column\":59}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[11665,11669],\"loc\":{\"start\":{\"line\":342,\"column\":60},\"end\":{\"line\":342,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[11665,11666],\"loc\":{\"start\":{\"line\":342,\"column\":60},\"end\":{\"line\":342,\"column\":61}},\"type\":\"Identifier\",\"name\":\"b\"},\"property\":{\"range\":[11667,11668],\"loc\":{\"start\":{\"line\":342,\"column\":62},\"end\":{\"line\":342,\"column\":63}},\"type\":\"Identifier\",\"name\":\"j\"}}]}}}},{\"range\":[11686,11697],\"loc\":{\"start\":{\"line\":343,\"column\":14},\"end\":{\"line\":343,\"column\":25}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[11693,11696],\"loc\":{\"start\":{\"line\":343,\"column\":21},\"end\":{\"line\":343,\"column\":24}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"alternate\":null}]},\"alternate\":null}}]},\"alternate\":null},{\"range\":[11742,11755],\"loc\":{\"start\":{\"line\":347,\"column\":8},\"end\":{\"line\":347,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[11749,11754],\"loc\":{\"start\":{\"line\":347,\"column\":15},\"end\":{\"line\":347,\"column\":20}},\"type\":\"BinaryExpression\",\"operator\":\"*\",\"left\":{\"range\":[11749,11750],\"loc\":{\"start\":{\"line\":347,\"column\":15},\"end\":{\"line\":347,\"column\":16}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[11753,11754],\"loc\":{\"start\":{\"line\":347,\"column\":19},\"end\":{\"line\":347,\"column\":20}},\"type\":\"Identifier\",\"name\":\"b\"}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[11771,12060],\"loc\":{\"start\":{\"line\":349,\"column\":6},\"end\":{\"line\":355,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[11771,11785],\"loc\":{\"start\":{\"line\":349,\"column\":6},\"end\":{\"line\":349,\"column\":20}},\"type\":\"Identifier\",\"name\":\"subscriptIndex\"},\"computed\":false,\"value\":{\"range\":[11787,12060],\"loc\":{\"start\":{\"line\":349,\"column\":22},\"end\":{\"line\":355,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[11797,11798],\"loc\":{\"start\":{\"line\":349,\"column\":32},\"end\":{\"line\":349,\"column\":33}},\"type\":\"Identifier\",\"name\":\"o\"},{\"range\":[11800,11801],\"loc\":{\"start\":{\"line\":349,\"column\":35},\"end\":{\"line\":349,\"column\":36}},\"type\":\"Identifier\",\"name\":\"i\"}],\"defaults\":[],\"body\":{\"range\":[11803,12060],\"loc\":{\"start\":{\"line\":349,\"column\":38},\"end\":{\"line\":355,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[11813,11836],\"loc\":{\"start\":{\"line\":350,\"column\":8},\"end\":{\"line\":350,\"column\":31}},\"type\":\"IfStatement\",\"test\":{\"range\":[11818,11824],\"loc\":{\"start\":{\"line\":350,\"column\":13},\"end\":{\"line\":350,\"column\":19}},\"type\":\"BinaryExpression\",\"operator\":\">=\",\"left\":{\"range\":[11818,11819],\"loc\":{\"start\":{\"line\":350,\"column\":13},\"end\":{\"line\":350,\"column\":14}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[11823,11824],\"loc\":{\"start\":{\"line\":350,\"column\":18},\"end\":{\"line\":350,\"column\":19}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[11827,11836],\"loc\":{\"start\":{\"line\":350,\"column\":22},\"end\":{\"line\":350,\"column\":31}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[11834,11835],\"loc\":{\"start\":{\"line\":350,\"column\":29},\"end\":{\"line\":350,\"column\":30}},\"type\":\"Identifier\",\"name\":\"i\"}},\"alternate\":null},{\"range\":[11845,11904],\"loc\":{\"start\":{\"line\":351,\"column\":8},\"end\":{\"line\":351,\"column\":67}},\"type\":\"IfStatement\",\"test\":{\"range\":[11850,11881],\"loc\":{\"start\":{\"line\":351,\"column\":13},\"end\":{\"line\":351,\"column\":44}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11850,11878],\"loc\":{\"start\":{\"line\":351,\"column\":13},\"end\":{\"line\":351,\"column\":41}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11850,11872],\"loc\":{\"start\":{\"line\":351,\"column\":13},\"end\":{\"line\":351,\"column\":35}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11850,11863],\"loc\":{\"start\":{\"line\":351,\"column\":13},\"end\":{\"line\":351,\"column\":26}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11864,11872],\"loc\":{\"start\":{\"line\":351,\"column\":27},\"end\":{\"line\":351,\"column\":35}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[11873,11878],\"loc\":{\"start\":{\"line\":351,\"column\":36},\"end\":{\"line\":351,\"column\":41}},\"type\":\"Identifier\",\"name\":\"isSeq\"}},\"arguments\":[{\"range\":[11879,11880],\"loc\":{\"start\":{\"line\":351,\"column\":42},\"end\":{\"line\":351,\"column\":43}},\"type\":\"Identifier\",\"name\":\"o\"}]},\"consequent\":{\"range\":[11884,11904],\"loc\":{\"start\":{\"line\":351,\"column\":47},\"end\":{\"line\":351,\"column\":67}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[11891,11903],\"loc\":{\"start\":{\"line\":351,\"column\":54},\"end\":{\"line\":351,\"column\":66}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[11891,11899],\"loc\":{\"start\":{\"line\":351,\"column\":54},\"end\":{\"line\":351,\"column\":62}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11891,11892],\"loc\":{\"start\":{\"line\":351,\"column\":54},\"end\":{\"line\":351,\"column\":55}},\"type\":\"Identifier\",\"name\":\"o\"},\"property\":{\"range\":[11893,11899],\"loc\":{\"start\":{\"line\":351,\"column\":56},\"end\":{\"line\":351,\"column\":62}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[11902,11903],\"loc\":{\"start\":{\"line\":351,\"column\":65},\"end\":{\"line\":351,\"column\":66}},\"type\":\"Identifier\",\"name\":\"i\"}}},\"alternate\":null},{\"range\":[11913,11976],\"loc\":{\"start\":{\"line\":352,\"column\":8},\"end\":{\"line\":352,\"column\":71}},\"type\":\"IfStatement\",\"test\":{\"range\":[11918,11953],\"loc\":{\"start\":{\"line\":352,\"column\":13},\"end\":{\"line\":352,\"column\":48}},\"type\":\"CallExpression\",\"callee\":{\"range\":[11918,11950],\"loc\":{\"start\":{\"line\":352,\"column\":13},\"end\":{\"line\":352,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11918,11940],\"loc\":{\"start\":{\"line\":352,\"column\":13},\"end\":{\"line\":352,\"column\":35}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11918,11931],\"loc\":{\"start\":{\"line\":352,\"column\":13},\"end\":{\"line\":352,\"column\":26}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[11932,11940],\"loc\":{\"start\":{\"line\":352,\"column\":27},\"end\":{\"line\":352,\"column\":35}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[11941,11950],\"loc\":{\"start\":{\"line\":352,\"column\":36},\"end\":{\"line\":352,\"column\":45}},\"type\":\"Identifier\",\"name\":\"isJSArray\"}},\"arguments\":[{\"range\":[11951,11952],\"loc\":{\"start\":{\"line\":352,\"column\":46},\"end\":{\"line\":352,\"column\":47}},\"type\":\"Identifier\",\"name\":\"o\"}]},\"consequent\":{\"range\":[11956,11976],\"loc\":{\"start\":{\"line\":352,\"column\":51},\"end\":{\"line\":352,\"column\":71}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[11963,11975],\"loc\":{\"start\":{\"line\":352,\"column\":58},\"end\":{\"line\":352,\"column\":70}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[11963,11971],\"loc\":{\"start\":{\"line\":352,\"column\":58},\"end\":{\"line\":352,\"column\":66}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[11963,11964],\"loc\":{\"start\":{\"line\":352,\"column\":58},\"end\":{\"line\":352,\"column\":59}},\"type\":\"Identifier\",\"name\":\"o\"},\"property\":{\"range\":[11965,11971],\"loc\":{\"start\":{\"line\":352,\"column\":60},\"end\":{\"line\":352,\"column\":66}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[11974,11975],\"loc\":{\"start\":{\"line\":352,\"column\":69},\"end\":{\"line\":352,\"column\":70}},\"type\":\"Identifier\",\"name\":\"i\"}}},\"alternate\":null},{\"range\":[11985,12034],\"loc\":{\"start\":{\"line\":353,\"column\":8},\"end\":{\"line\":353,\"column\":57}},\"type\":\"IfStatement\",\"test\":{\"range\":[11990,12011],\"loc\":{\"start\":{\"line\":353,\"column\":13},\"end\":{\"line\":353,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[11990,11998],\"loc\":{\"start\":{\"line\":353,\"column\":13},\"end\":{\"line\":353,\"column\":21}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[11997,11998],\"loc\":{\"start\":{\"line\":353,\"column\":20},\"end\":{\"line\":353,\"column\":21}},\"type\":\"Identifier\",\"name\":\"o\"},\"prefix\":true},\"right\":{\"range\":[12003,12011],\"loc\":{\"start\":{\"line\":353,\"column\":26},\"end\":{\"line\":353,\"column\":34}},\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"\\\"string\\\"\"}},\"consequent\":{\"range\":[12014,12034],\"loc\":{\"start\":{\"line\":353,\"column\":37},\"end\":{\"line\":353,\"column\":57}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[12021,12033],\"loc\":{\"start\":{\"line\":353,\"column\":44},\"end\":{\"line\":353,\"column\":56}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[12021,12029],\"loc\":{\"start\":{\"line\":353,\"column\":44},\"end\":{\"line\":353,\"column\":52}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12021,12022],\"loc\":{\"start\":{\"line\":353,\"column\":44},\"end\":{\"line\":353,\"column\":45}},\"type\":\"Identifier\",\"name\":\"o\"},\"property\":{\"range\":[12023,12029],\"loc\":{\"start\":{\"line\":353,\"column\":46},\"end\":{\"line\":353,\"column\":52}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[12032,12033],\"loc\":{\"start\":{\"line\":353,\"column\":55},\"end\":{\"line\":353,\"column\":56}},\"type\":\"Identifier\",\"name\":\"i\"}}},\"alternate\":null},{\"range\":[12043,12052],\"loc\":{\"start\":{\"line\":354,\"column\":8},\"end\":{\"line\":354,\"column\":17}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[12050,12051],\"loc\":{\"start\":{\"line\":354,\"column\":15},\"end\":{\"line\":354,\"column\":16}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[12073,14831],\"loc\":{\"start\":{\"line\":358,\"column\":4},\"end\":{\"line\":451,\"column\":5}},\"type\":\"Property\",\"key\":{\"range\":[12073,12080],\"loc\":{\"start\":{\"line\":358,\"column\":4},\"end\":{\"line\":358,\"column\":11}},\"type\":\"Identifier\",\"name\":\"objects\"},\"computed\":false,\"value\":{\"range\":[12082,14831],\"loc\":{\"start\":{\"line\":358,\"column\":13},\"end\":{\"line\":451,\"column\":5}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[12090,12265],\"loc\":{\"start\":{\"line\":359,\"column\":6},\"end\":{\"line\":363,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[12090,12094],\"loc\":{\"start\":{\"line\":359,\"column\":6},\"end\":{\"line\":359,\"column\":10}},\"type\":\"Identifier\",\"name\":\"dict\"},\"computed\":false,\"value\":{\"range\":[12096,12265],\"loc\":{\"start\":{\"line\":359,\"column\":12},\"end\":{\"line\":363,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[12108,12265],\"loc\":{\"start\":{\"line\":359,\"column\":24},\"end\":{\"line\":363,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[12118,12145],\"loc\":{\"start\":{\"line\":360,\"column\":8},\"end\":{\"line\":360,\"column\":35}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[12122,12144],\"loc\":{\"start\":{\"line\":360,\"column\":12},\"end\":{\"line\":360,\"column\":34}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[12122,12125],\"loc\":{\"start\":{\"line\":360,\"column\":12},\"end\":{\"line\":360,\"column\":15}},\"type\":\"Identifier\",\"name\":\"obj\"},\"init\":{\"range\":[12128,12144],\"loc\":{\"start\":{\"line\":360,\"column\":18},\"end\":{\"line\":360,\"column\":34}},\"type\":\"NewExpression\",\"callee\":{\"range\":[12132,12142],\"loc\":{\"start\":{\"line\":360,\"column\":22},\"end\":{\"line\":360,\"column\":32}},\"type\":\"Identifier\",\"name\":\"PythonDict\"},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[12154,12237],\"loc\":{\"start\":{\"line\":361,\"column\":8},\"end\":{\"line\":361,\"column\":91}},\"type\":\"ForStatement\",\"init\":{\"range\":[12159,12168],\"loc\":{\"start\":{\"line\":361,\"column\":13},\"end\":{\"line\":361,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[12163,12168],\"loc\":{\"start\":{\"line\":361,\"column\":17},\"end\":{\"line\":361,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[12163,12164],\"loc\":{\"start\":{\"line\":361,\"column\":17},\"end\":{\"line\":361,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[12167,12168],\"loc\":{\"start\":{\"line\":361,\"column\":21},\"end\":{\"line\":361,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[12170,12190],\"loc\":{\"start\":{\"line\":361,\"column\":24},\"end\":{\"line\":361,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[12170,12171],\"loc\":{\"start\":{\"line\":361,\"column\":24},\"end\":{\"line\":361,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[12174,12190],\"loc\":{\"start\":{\"line\":361,\"column\":28},\"end\":{\"line\":361,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12174,12183],\"loc\":{\"start\":{\"line\":361,\"column\":28},\"end\":{\"line\":361,\"column\":37}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[12184,12190],\"loc\":{\"start\":{\"line\":361,\"column\":38},\"end\":{\"line\":361,\"column\":44}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[12192,12195],\"loc\":{\"start\":{\"line\":361,\"column\":46},\"end\":{\"line\":361,\"column\":49}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[12194,12195],\"loc\":{\"start\":{\"line\":361,\"column\":48},\"end\":{\"line\":361,\"column\":49}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":true},\"body\":{\"range\":[12198,12237],\"loc\":{\"start\":{\"line\":361,\"column\":52},\"end\":{\"line\":361,\"column\":91}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12198,12236],\"loc\":{\"start\":{\"line\":361,\"column\":52},\"end\":{\"line\":361,\"column\":90}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[12198,12218],\"loc\":{\"start\":{\"line\":361,\"column\":52},\"end\":{\"line\":361,\"column\":72}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[12198,12201],\"loc\":{\"start\":{\"line\":361,\"column\":52},\"end\":{\"line\":361,\"column\":55}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[12202,12217],\"loc\":{\"start\":{\"line\":361,\"column\":56},\"end\":{\"line\":361,\"column\":71}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[12202,12214],\"loc\":{\"start\":{\"line\":361,\"column\":56},\"end\":{\"line\":361,\"column\":68}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[12202,12211],\"loc\":{\"start\":{\"line\":361,\"column\":56},\"end\":{\"line\":361,\"column\":65}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[12212,12213],\"loc\":{\"start\":{\"line\":361,\"column\":66},\"end\":{\"line\":361,\"column\":67}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[12215,12216],\"loc\":{\"start\":{\"line\":361,\"column\":69},\"end\":{\"line\":361,\"column\":70}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}},\"right\":{\"range\":[12221,12236],\"loc\":{\"start\":{\"line\":361,\"column\":75},\"end\":{\"line\":361,\"column\":90}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[12221,12233],\"loc\":{\"start\":{\"line\":361,\"column\":75},\"end\":{\"line\":361,\"column\":87}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[12221,12230],\"loc\":{\"start\":{\"line\":361,\"column\":75},\"end\":{\"line\":361,\"column\":84}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[12231,12232],\"loc\":{\"start\":{\"line\":361,\"column\":85},\"end\":{\"line\":361,\"column\":86}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[12234,12235],\"loc\":{\"start\":{\"line\":361,\"column\":88},\"end\":{\"line\":361,\"column\":89}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}}}},{\"range\":[12246,12257],\"loc\":{\"start\":{\"line\":362,\"column\":8},\"end\":{\"line\":362,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[12253,12256],\"loc\":{\"start\":{\"line\":362,\"column\":15},\"end\":{\"line\":362,\"column\":18}},\"type\":\"Identifier\",\"name\":\"obj\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[12273,12430],\"loc\":{\"start\":{\"line\":364,\"column\":6},\"end\":{\"line\":369,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[12273,12277],\"loc\":{\"start\":{\"line\":364,\"column\":6},\"end\":{\"line\":364,\"column\":10}},\"type\":\"Identifier\",\"name\":\"list\"},\"computed\":false,\"value\":{\"range\":[12279,12430],\"loc\":{\"start\":{\"line\":364,\"column\":12},\"end\":{\"line\":369,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[12291,12430],\"loc\":{\"start\":{\"line\":364,\"column\":24},\"end\":{\"line\":369,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[12301,12314],\"loc\":{\"start\":{\"line\":365,\"column\":8},\"end\":{\"line\":365,\"column\":21}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[12305,12313],\"loc\":{\"start\":{\"line\":365,\"column\":12},\"end\":{\"line\":365,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[12305,12308],\"loc\":{\"start\":{\"line\":365,\"column\":12},\"end\":{\"line\":365,\"column\":15}},\"type\":\"Identifier\",\"name\":\"arr\"},\"init\":{\"range\":[12311,12313],\"loc\":{\"start\":{\"line\":365,\"column\":18},\"end\":{\"line\":365,\"column\":20}},\"type\":\"ArrayExpression\",\"elements\":[]}}],\"kind\":\"var\"},{\"range\":[12323,12354],\"loc\":{\"start\":{\"line\":366,\"column\":8},\"end\":{\"line\":366,\"column\":39}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12323,12353],\"loc\":{\"start\":{\"line\":366,\"column\":8},\"end\":{\"line\":366,\"column\":38}},\"type\":\"CallExpression\",\"callee\":{\"range\":[12323,12337],\"loc\":{\"start\":{\"line\":366,\"column\":8},\"end\":{\"line\":366,\"column\":22}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12323,12331],\"loc\":{\"start\":{\"line\":366,\"column\":8},\"end\":{\"line\":366,\"column\":16}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12323,12326],\"loc\":{\"start\":{\"line\":366,\"column\":8},\"end\":{\"line\":366,\"column\":11}},\"type\":\"Identifier\",\"name\":\"arr\"},\"property\":{\"range\":[12327,12331],\"loc\":{\"start\":{\"line\":366,\"column\":12},\"end\":{\"line\":366,\"column\":16}},\"type\":\"Identifier\",\"name\":\"push\"}},\"property\":{\"range\":[12332,12337],\"loc\":{\"start\":{\"line\":366,\"column\":17},\"end\":{\"line\":366,\"column\":22}},\"type\":\"Identifier\",\"name\":\"apply\"}},\"arguments\":[{\"range\":[12338,12341],\"loc\":{\"start\":{\"line\":366,\"column\":23},\"end\":{\"line\":366,\"column\":26}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[12343,12352],\"loc\":{\"start\":{\"line\":366,\"column\":28},\"end\":{\"line\":366,\"column\":37}},\"type\":\"Identifier\",\"name\":\"arguments\"}]}},{\"range\":[12363,12402],\"loc\":{\"start\":{\"line\":367,\"column\":8},\"end\":{\"line\":367,\"column\":47}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12363,12401],\"loc\":{\"start\":{\"line\":367,\"column\":8},\"end\":{\"line\":367,\"column\":46}},\"type\":\"CallExpression\",\"callee\":{\"range\":[12363,12396],\"loc\":{\"start\":{\"line\":367,\"column\":8},\"end\":{\"line\":367,\"column\":41}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12363,12382],\"loc\":{\"start\":{\"line\":367,\"column\":8},\"end\":{\"line\":367,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12363,12376],\"loc\":{\"start\":{\"line\":367,\"column\":8},\"end\":{\"line\":367,\"column\":21}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[12377,12382],\"loc\":{\"start\":{\"line\":367,\"column\":22},\"end\":{\"line\":367,\"column\":27}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[12383,12396],\"loc\":{\"start\":{\"line\":367,\"column\":28},\"end\":{\"line\":367,\"column\":41}},\"type\":\"Identifier\",\"name\":\"convertToList\"}},\"arguments\":[{\"range\":[12397,12400],\"loc\":{\"start\":{\"line\":367,\"column\":42},\"end\":{\"line\":367,\"column\":45}},\"type\":\"Identifier\",\"name\":\"arr\"}]}},{\"range\":[12411,12422],\"loc\":{\"start\":{\"line\":368,\"column\":8},\"end\":{\"line\":368,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[12418,12421],\"loc\":{\"start\":{\"line\":368,\"column\":15},\"end\":{\"line\":368,\"column\":18}},\"type\":\"Identifier\",\"name\":\"arr\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[12438,14825],\"loc\":{\"start\":{\"line\":370,\"column\":6},\"end\":{\"line\":450,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[12438,12443],\"loc\":{\"start\":{\"line\":370,\"column\":6},\"end\":{\"line\":370,\"column\":11}},\"type\":\"Identifier\",\"name\":\"tuple\"},\"computed\":false,\"value\":{\"range\":[12445,14825],\"loc\":{\"start\":{\"line\":370,\"column\":13},\"end\":{\"line\":450,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[12457,14825],\"loc\":{\"start\":{\"line\":370,\"column\":25},\"end\":{\"line\":450,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[12467,12480],\"loc\":{\"start\":{\"line\":371,\"column\":8},\"end\":{\"line\":371,\"column\":21}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[12471,12479],\"loc\":{\"start\":{\"line\":371,\"column\":12},\"end\":{\"line\":371,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[12471,12474],\"loc\":{\"start\":{\"line\":371,\"column\":12},\"end\":{\"line\":371,\"column\":15}},\"type\":\"Identifier\",\"name\":\"arr\"},\"init\":{\"range\":[12477,12479],\"loc\":{\"start\":{\"line\":371,\"column\":18},\"end\":{\"line\":371,\"column\":20}},\"type\":\"ArrayExpression\",\"elements\":[]}}],\"kind\":\"var\"},{\"range\":[12489,12520],\"loc\":{\"start\":{\"line\":372,\"column\":8},\"end\":{\"line\":372,\"column\":39}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12489,12519],\"loc\":{\"start\":{\"line\":372,\"column\":8},\"end\":{\"line\":372,\"column\":38}},\"type\":\"CallExpression\",\"callee\":{\"range\":[12489,12503],\"loc\":{\"start\":{\"line\":372,\"column\":8},\"end\":{\"line\":372,\"column\":22}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12489,12497],\"loc\":{\"start\":{\"line\":372,\"column\":8},\"end\":{\"line\":372,\"column\":16}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12489,12492],\"loc\":{\"start\":{\"line\":372,\"column\":8},\"end\":{\"line\":372,\"column\":11}},\"type\":\"Identifier\",\"name\":\"arr\"},\"property\":{\"range\":[12493,12497],\"loc\":{\"start\":{\"line\":372,\"column\":12},\"end\":{\"line\":372,\"column\":16}},\"type\":\"Identifier\",\"name\":\"push\"}},\"property\":{\"range\":[12498,12503],\"loc\":{\"start\":{\"line\":372,\"column\":17},\"end\":{\"line\":372,\"column\":22}},\"type\":\"Identifier\",\"name\":\"apply\"}},\"arguments\":[{\"range\":[12504,12507],\"loc\":{\"start\":{\"line\":372,\"column\":23},\"end\":{\"line\":372,\"column\":26}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[12509,12518],\"loc\":{\"start\":{\"line\":372,\"column\":28},\"end\":{\"line\":372,\"column\":37}},\"type\":\"Identifier\",\"name\":\"arguments\"}]}},{\"range\":[12529,12662],\"loc\":{\"start\":{\"line\":373,\"column\":8},\"end\":{\"line\":377,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12529,12661],\"loc\":{\"start\":{\"line\":373,\"column\":8},\"end\":{\"line\":377,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[12529,12550],\"loc\":{\"start\":{\"line\":373,\"column\":8},\"end\":{\"line\":373,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12529,12535],\"loc\":{\"start\":{\"line\":373,\"column\":8},\"end\":{\"line\":373,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[12536,12550],\"loc\":{\"start\":{\"line\":373,\"column\":15},\"end\":{\"line\":373,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[12551,12554],\"loc\":{\"start\":{\"line\":373,\"column\":30},\"end\":{\"line\":373,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[12556,12563],\"loc\":{\"start\":{\"line\":373,\"column\":35},\"end\":{\"line\":373,\"column\":42}},\"type\":\"Literal\",\"value\":\"_type\",\"raw\":\"\\\"_type\\\"\"},{\"range\":[12573,12660],\"loc\":{\"start\":{\"line\":374,\"column\":8},\"end\":{\"line\":377,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[12585,12621],\"loc\":{\"start\":{\"line\":375,\"column\":10},\"end\":{\"line\":375,\"column\":46}},\"type\":\"Property\",\"key\":{\"range\":[12585,12588],\"loc\":{\"start\":{\"line\":375,\"column\":10},\"end\":{\"line\":375,\"column\":13}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[12590,12621],\"loc\":{\"start\":{\"line\":375,\"column\":15},\"end\":{\"line\":375,\"column\":46}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[12602,12621],\"loc\":{\"start\":{\"line\":375,\"column\":27},\"end\":{\"line\":375,\"column\":46}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[12604,12619],\"loc\":{\"start\":{\"line\":375,\"column\":29},\"end\":{\"line\":375,\"column\":44}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[12611,12618],\"loc\":{\"start\":{\"line\":375,\"column\":36},\"end\":{\"line\":375,\"column\":43}},\"type\":\"Literal\",\"value\":\"tuple\",\"raw\":\"'tuple'\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[12633,12650],\"loc\":{\"start\":{\"line\":376,\"column\":10},\"end\":{\"line\":376,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[12633,12643],\"loc\":{\"start\":{\"line\":376,\"column\":10},\"end\":{\"line\":376,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[12645,12650],\"loc\":{\"start\":{\"line\":376,\"column\":22},\"end\":{\"line\":376,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[12671,12805],\"loc\":{\"start\":{\"line\":378,\"column\":8},\"end\":{\"line\":382,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12671,12804],\"loc\":{\"start\":{\"line\":378,\"column\":8},\"end\":{\"line\":382,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[12671,12692],\"loc\":{\"start\":{\"line\":378,\"column\":8},\"end\":{\"line\":378,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12671,12677],\"loc\":{\"start\":{\"line\":378,\"column\":8},\"end\":{\"line\":378,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[12678,12692],\"loc\":{\"start\":{\"line\":378,\"column\":15},\"end\":{\"line\":378,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[12693,12696],\"loc\":{\"start\":{\"line\":378,\"column\":30},\"end\":{\"line\":378,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[12698,12709],\"loc\":{\"start\":{\"line\":378,\"column\":35},\"end\":{\"line\":378,\"column\":46}},\"type\":\"Literal\",\"value\":\"_isPython\",\"raw\":\"\\\"_isPython\\\"\"},{\"range\":[12719,12803],\"loc\":{\"start\":{\"line\":379,\"column\":8},\"end\":{\"line\":382,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[12731,12764],\"loc\":{\"start\":{\"line\":380,\"column\":10},\"end\":{\"line\":380,\"column\":43}},\"type\":\"Property\",\"key\":{\"range\":[12731,12734],\"loc\":{\"start\":{\"line\":380,\"column\":10},\"end\":{\"line\":380,\"column\":13}},\"type\":\"Identifier\",\"name\":\"get\"},\"computed\":false,\"value\":{\"range\":[12736,12764],\"loc\":{\"start\":{\"line\":380,\"column\":15},\"end\":{\"line\":380,\"column\":43}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[12748,12764],\"loc\":{\"start\":{\"line\":380,\"column\":27},\"end\":{\"line\":380,\"column\":43}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[12750,12762],\"loc\":{\"start\":{\"line\":380,\"column\":29},\"end\":{\"line\":380,\"column\":41}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[12757,12761],\"loc\":{\"start\":{\"line\":380,\"column\":36},\"end\":{\"line\":380,\"column\":40}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[12776,12793],\"loc\":{\"start\":{\"line\":381,\"column\":10},\"end\":{\"line\":381,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[12776,12786],\"loc\":{\"start\":{\"line\":381,\"column\":10},\"end\":{\"line\":381,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[12788,12793],\"loc\":{\"start\":{\"line\":381,\"column\":22},\"end\":{\"line\":381,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[12814,13077],\"loc\":{\"start\":{\"line\":383,\"column\":8},\"end\":{\"line\":392,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12814,13076],\"loc\":{\"start\":{\"line\":383,\"column\":8},\"end\":{\"line\":392,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[12814,12835],\"loc\":{\"start\":{\"line\":383,\"column\":8},\"end\":{\"line\":383,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12814,12820],\"loc\":{\"start\":{\"line\":383,\"column\":8},\"end\":{\"line\":383,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[12821,12835],\"loc\":{\"start\":{\"line\":383,\"column\":15},\"end\":{\"line\":383,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[12836,12839],\"loc\":{\"start\":{\"line\":383,\"column\":30},\"end\":{\"line\":383,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[12841,12848],\"loc\":{\"start\":{\"line\":383,\"column\":35},\"end\":{\"line\":383,\"column\":42}},\"type\":\"Literal\",\"value\":\"count\",\"raw\":\"\\\"count\\\"\"},{\"range\":[12858,13075],\"loc\":{\"start\":{\"line\":384,\"column\":8},\"end\":{\"line\":392,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[12870,13036],\"loc\":{\"start\":{\"line\":385,\"column\":10},\"end\":{\"line\":390,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[12870,12875],\"loc\":{\"start\":{\"line\":385,\"column\":10},\"end\":{\"line\":385,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[12877,13036],\"loc\":{\"start\":{\"line\":385,\"column\":17},\"end\":{\"line\":390,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[12887,12888],\"loc\":{\"start\":{\"line\":385,\"column\":27},\"end\":{\"line\":385,\"column\":28}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[12890,13036],\"loc\":{\"start\":{\"line\":385,\"column\":30},\"end\":{\"line\":390,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[12904,12914],\"loc\":{\"start\":{\"line\":386,\"column\":12},\"end\":{\"line\":386,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[12908,12913],\"loc\":{\"start\":{\"line\":386,\"column\":16},\"end\":{\"line\":386,\"column\":21}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[12908,12909],\"loc\":{\"start\":{\"line\":386,\"column\":16},\"end\":{\"line\":386,\"column\":17}},\"type\":\"Identifier\",\"name\":\"c\"},\"init\":{\"range\":[12912,12913],\"loc\":{\"start\":{\"line\":386,\"column\":20},\"end\":{\"line\":386,\"column\":21}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},{\"range\":[12927,13002],\"loc\":{\"start\":{\"line\":387,\"column\":12},\"end\":{\"line\":388,\"column\":37}},\"type\":\"ForStatement\",\"init\":{\"range\":[12932,12941],\"loc\":{\"start\":{\"line\":387,\"column\":17},\"end\":{\"line\":387,\"column\":26}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[12936,12941],\"loc\":{\"start\":{\"line\":387,\"column\":21},\"end\":{\"line\":387,\"column\":26}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[12936,12937],\"loc\":{\"start\":{\"line\":387,\"column\":21},\"end\":{\"line\":387,\"column\":22}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[12940,12941],\"loc\":{\"start\":{\"line\":387,\"column\":25},\"end\":{\"line\":387,\"column\":26}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[12943,12958],\"loc\":{\"start\":{\"line\":387,\"column\":28},\"end\":{\"line\":387,\"column\":43}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[12943,12944],\"loc\":{\"start\":{\"line\":387,\"column\":28},\"end\":{\"line\":387,\"column\":29}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[12947,12958],\"loc\":{\"start\":{\"line\":387,\"column\":32},\"end\":{\"line\":387,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[12947,12951],\"loc\":{\"start\":{\"line\":387,\"column\":32},\"end\":{\"line\":387,\"column\":36}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[12952,12958],\"loc\":{\"start\":{\"line\":387,\"column\":37},\"end\":{\"line\":387,\"column\":43}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[12960,12963],\"loc\":{\"start\":{\"line\":387,\"column\":45},\"end\":{\"line\":387,\"column\":48}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[12960,12961],\"loc\":{\"start\":{\"line\":387,\"column\":45},\"end\":{\"line\":387,\"column\":46}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[12979,13002],\"loc\":{\"start\":{\"line\":388,\"column\":14},\"end\":{\"line\":388,\"column\":37}},\"type\":\"IfStatement\",\"test\":{\"range\":[12983,12996],\"loc\":{\"start\":{\"line\":388,\"column\":18},\"end\":{\"line\":388,\"column\":31}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[12983,12990],\"loc\":{\"start\":{\"line\":388,\"column\":18},\"end\":{\"line\":388,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[12983,12987],\"loc\":{\"start\":{\"line\":388,\"column\":18},\"end\":{\"line\":388,\"column\":22}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[12988,12989],\"loc\":{\"start\":{\"line\":388,\"column\":23},\"end\":{\"line\":388,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[12995,12996],\"loc\":{\"start\":{\"line\":388,\"column\":30},\"end\":{\"line\":388,\"column\":31}},\"type\":\"Identifier\",\"name\":\"x\"}},\"consequent\":{\"range\":[12998,13002],\"loc\":{\"start\":{\"line\":388,\"column\":33},\"end\":{\"line\":388,\"column\":37}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[12998,13001],\"loc\":{\"start\":{\"line\":388,\"column\":33},\"end\":{\"line\":388,\"column\":36}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[12998,12999],\"loc\":{\"start\":{\"line\":388,\"column\":33},\"end\":{\"line\":388,\"column\":34}},\"type\":\"Identifier\",\"name\":\"c\"},\"prefix\":false}},\"alternate\":null}},{\"range\":[13015,13024],\"loc\":{\"start\":{\"line\":389,\"column\":12},\"end\":{\"line\":389,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13022,13023],\"loc\":{\"start\":{\"line\":389,\"column\":19},\"end\":{\"line\":389,\"column\":20}},\"type\":\"Identifier\",\"name\":\"c\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[13048,13065],\"loc\":{\"start\":{\"line\":391,\"column\":10},\"end\":{\"line\":391,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[13048,13058],\"loc\":{\"start\":{\"line\":391,\"column\":10},\"end\":{\"line\":391,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[13060,13065],\"loc\":{\"start\":{\"line\":391,\"column\":22},\"end\":{\"line\":391,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[13086,13630],\"loc\":{\"start\":{\"line\":393,\"column\":8},\"end\":{\"line\":409,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[13086,13629],\"loc\":{\"start\":{\"line\":393,\"column\":8},\"end\":{\"line\":409,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[13086,13107],\"loc\":{\"start\":{\"line\":393,\"column\":8},\"end\":{\"line\":393,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13086,13092],\"loc\":{\"start\":{\"line\":393,\"column\":8},\"end\":{\"line\":393,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[13093,13107],\"loc\":{\"start\":{\"line\":393,\"column\":15},\"end\":{\"line\":393,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[13108,13111],\"loc\":{\"start\":{\"line\":393,\"column\":30},\"end\":{\"line\":393,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[13113,13121],\"loc\":{\"start\":{\"line\":393,\"column\":35},\"end\":{\"line\":393,\"column\":43}},\"type\":\"Literal\",\"value\":\"equals\",\"raw\":\"\\\"equals\\\"\"},{\"range\":[13131,13628],\"loc\":{\"start\":{\"line\":394,\"column\":8},\"end\":{\"line\":409,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[13143,13589],\"loc\":{\"start\":{\"line\":395,\"column\":10},\"end\":{\"line\":407,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[13143,13148],\"loc\":{\"start\":{\"line\":395,\"column\":10},\"end\":{\"line\":395,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[13150,13589],\"loc\":{\"start\":{\"line\":395,\"column\":17},\"end\":{\"line\":407,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[13160,13161],\"loc\":{\"start\":{\"line\":395,\"column\":27},\"end\":{\"line\":395,\"column\":28}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[13163,13589],\"loc\":{\"start\":{\"line\":395,\"column\":30},\"end\":{\"line\":407,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13177,13551],\"loc\":{\"start\":{\"line\":396,\"column\":12},\"end\":{\"line\":405,\"column\":25}},\"type\":\"TryStatement\",\"block\":{\"range\":[13181,13525],\"loc\":{\"start\":{\"line\":396,\"column\":16},\"end\":{\"line\":404,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13197,13240],\"loc\":{\"start\":{\"line\":397,\"column\":14},\"end\":{\"line\":397,\"column\":57}},\"type\":\"IfStatement\",\"test\":{\"range\":[13201,13225],\"loc\":{\"start\":{\"line\":397,\"column\":18},\"end\":{\"line\":397,\"column\":42}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[13201,13212],\"loc\":{\"start\":{\"line\":397,\"column\":18},\"end\":{\"line\":397,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13201,13205],\"loc\":{\"start\":{\"line\":397,\"column\":18},\"end\":{\"line\":397,\"column\":22}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13206,13212],\"loc\":{\"start\":{\"line\":397,\"column\":23},\"end\":{\"line\":397,\"column\":29}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[13217,13225],\"loc\":{\"start\":{\"line\":397,\"column\":34},\"end\":{\"line\":397,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13217,13218],\"loc\":{\"start\":{\"line\":397,\"column\":34},\"end\":{\"line\":397,\"column\":35}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[13219,13225],\"loc\":{\"start\":{\"line\":397,\"column\":36},\"end\":{\"line\":397,\"column\":42}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"consequent\":{\"range\":[13227,13240],\"loc\":{\"start\":{\"line\":397,\"column\":44},\"end\":{\"line\":397,\"column\":57}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13234,13239],\"loc\":{\"start\":{\"line\":397,\"column\":51},\"end\":{\"line\":397,\"column\":56}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null},{\"range\":[13255,13484],\"loc\":{\"start\":{\"line\":398,\"column\":14},\"end\":{\"line\":402,\"column\":15}},\"type\":\"ForStatement\",\"init\":{\"range\":[13260,13269],\"loc\":{\"start\":{\"line\":398,\"column\":19},\"end\":{\"line\":398,\"column\":28}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[13264,13269],\"loc\":{\"start\":{\"line\":398,\"column\":23},\"end\":{\"line\":398,\"column\":28}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[13264,13265],\"loc\":{\"start\":{\"line\":398,\"column\":23},\"end\":{\"line\":398,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[13268,13269],\"loc\":{\"start\":{\"line\":398,\"column\":27},\"end\":{\"line\":398,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[13271,13286],\"loc\":{\"start\":{\"line\":398,\"column\":30},\"end\":{\"line\":398,\"column\":45}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[13271,13272],\"loc\":{\"start\":{\"line\":398,\"column\":30},\"end\":{\"line\":398,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[13275,13286],\"loc\":{\"start\":{\"line\":398,\"column\":34},\"end\":{\"line\":398,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13275,13279],\"loc\":{\"start\":{\"line\":398,\"column\":34},\"end\":{\"line\":398,\"column\":38}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13280,13286],\"loc\":{\"start\":{\"line\":398,\"column\":39},\"end\":{\"line\":398,\"column\":45}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[13288,13291],\"loc\":{\"start\":{\"line\":398,\"column\":47},\"end\":{\"line\":398,\"column\":50}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[13288,13289],\"loc\":{\"start\":{\"line\":398,\"column\":47},\"end\":{\"line\":398,\"column\":48}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[13293,13484],\"loc\":{\"start\":{\"line\":398,\"column\":52},\"end\":{\"line\":402,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13311,13468],\"loc\":{\"start\":{\"line\":399,\"column\":16},\"end\":{\"line\":401,\"column\":58}},\"type\":\"IfStatement\",\"test\":{\"range\":[13315,13347],\"loc\":{\"start\":{\"line\":399,\"column\":20},\"end\":{\"line\":399,\"column\":52}},\"type\":\"CallExpression\",\"callee\":{\"range\":[13315,13337],\"loc\":{\"start\":{\"line\":399,\"column\":20},\"end\":{\"line\":399,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13315,13322],\"loc\":{\"start\":{\"line\":399,\"column\":20},\"end\":{\"line\":399,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[13315,13319],\"loc\":{\"start\":{\"line\":399,\"column\":20},\"end\":{\"line\":399,\"column\":24}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13320,13321],\"loc\":{\"start\":{\"line\":399,\"column\":25},\"end\":{\"line\":399,\"column\":26}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[13323,13337],\"loc\":{\"start\":{\"line\":399,\"column\":28},\"end\":{\"line\":399,\"column\":42}},\"type\":\"Identifier\",\"name\":\"hasOwnProperty\"}},\"arguments\":[{\"range\":[13338,13346],\"loc\":{\"start\":{\"line\":399,\"column\":43},\"end\":{\"line\":399,\"column\":51}},\"type\":\"Literal\",\"value\":\"equals\",\"raw\":\"\\\"equals\\\"\"}]},\"consequent\":{\"range\":[13349,13427],\"loc\":{\"start\":{\"line\":399,\"column\":54},\"end\":{\"line\":401,\"column\":17}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13369,13409],\"loc\":{\"start\":{\"line\":400,\"column\":18},\"end\":{\"line\":400,\"column\":58}},\"type\":\"IfStatement\",\"test\":{\"range\":[13373,13394],\"loc\":{\"start\":{\"line\":400,\"column\":22},\"end\":{\"line\":400,\"column\":43}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[13374,13394],\"loc\":{\"start\":{\"line\":400,\"column\":23},\"end\":{\"line\":400,\"column\":43}},\"type\":\"CallExpression\",\"callee\":{\"range\":[13374,13388],\"loc\":{\"start\":{\"line\":400,\"column\":23},\"end\":{\"line\":400,\"column\":37}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13374,13381],\"loc\":{\"start\":{\"line\":400,\"column\":23},\"end\":{\"line\":400,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[13374,13378],\"loc\":{\"start\":{\"line\":400,\"column\":23},\"end\":{\"line\":400,\"column\":27}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13379,13380],\"loc\":{\"start\":{\"line\":400,\"column\":28},\"end\":{\"line\":400,\"column\":29}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[13382,13388],\"loc\":{\"start\":{\"line\":400,\"column\":31},\"end\":{\"line\":400,\"column\":37}},\"type\":\"Identifier\",\"name\":\"equals\"}},\"arguments\":[{\"range\":[13389,13393],\"loc\":{\"start\":{\"line\":400,\"column\":38},\"end\":{\"line\":400,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[13389,13390],\"loc\":{\"start\":{\"line\":400,\"column\":38},\"end\":{\"line\":400,\"column\":39}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[13391,13392],\"loc\":{\"start\":{\"line\":400,\"column\":40},\"end\":{\"line\":400,\"column\":41}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"prefix\":true},\"consequent\":{\"range\":[13396,13409],\"loc\":{\"start\":{\"line\":400,\"column\":45},\"end\":{\"line\":400,\"column\":58}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13403,13408],\"loc\":{\"start\":{\"line\":400,\"column\":52},\"end\":{\"line\":400,\"column\":57}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null}]},\"alternate\":{\"range\":[13433,13468],\"loc\":{\"start\":{\"line\":401,\"column\":23},\"end\":{\"line\":401,\"column\":58}},\"type\":\"IfStatement\",\"test\":{\"range\":[13437,13453],\"loc\":{\"start\":{\"line\":401,\"column\":27},\"end\":{\"line\":401,\"column\":43}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[13437,13444],\"loc\":{\"start\":{\"line\":401,\"column\":27},\"end\":{\"line\":401,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[13437,13441],\"loc\":{\"start\":{\"line\":401,\"column\":27},\"end\":{\"line\":401,\"column\":31}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13442,13443],\"loc\":{\"start\":{\"line\":401,\"column\":32},\"end\":{\"line\":401,\"column\":33}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[13449,13453],\"loc\":{\"start\":{\"line\":401,\"column\":39},\"end\":{\"line\":401,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[13449,13450],\"loc\":{\"start\":{\"line\":401,\"column\":39},\"end\":{\"line\":401,\"column\":40}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[13451,13452],\"loc\":{\"start\":{\"line\":401,\"column\":41},\"end\":{\"line\":401,\"column\":42}},\"type\":\"Identifier\",\"name\":\"i\"}}},\"consequent\":{\"range\":[13455,13468],\"loc\":{\"start\":{\"line\":401,\"column\":45},\"end\":{\"line\":401,\"column\":58}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13462,13467],\"loc\":{\"start\":{\"line\":401,\"column\":52},\"end\":{\"line\":401,\"column\":57}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null}}]}},{\"range\":[13499,13511],\"loc\":{\"start\":{\"line\":403,\"column\":14},\"end\":{\"line\":403,\"column\":26}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13506,13510],\"loc\":{\"start\":{\"line\":403,\"column\":21},\"end\":{\"line\":403,\"column\":25}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"guardedHandlers\":[],\"handlers\":[{\"range\":[13538,13551],\"loc\":{\"start\":{\"line\":405,\"column\":12},\"end\":{\"line\":405,\"column\":25}},\"type\":\"CatchClause\",\"param\":{\"range\":[13545,13546],\"loc\":{\"start\":{\"line\":405,\"column\":19},\"end\":{\"line\":405,\"column\":20}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[13548,13551],\"loc\":{\"start\":{\"line\":405,\"column\":22},\"end\":{\"line\":405,\"column\":25}},\"type\":\"BlockStatement\",\"body\":[]}}],\"handler\":{\"range\":[13538,13551],\"loc\":{\"start\":{\"line\":405,\"column\":12},\"end\":{\"line\":405,\"column\":25}},\"type\":\"CatchClause\",\"param\":{\"range\":[13545,13546],\"loc\":{\"start\":{\"line\":405,\"column\":19},\"end\":{\"line\":405,\"column\":20}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[13548,13551],\"loc\":{\"start\":{\"line\":405,\"column\":22},\"end\":{\"line\":405,\"column\":25}},\"type\":\"BlockStatement\",\"body\":[]}},\"finalizer\":null},{\"range\":[13564,13577],\"loc\":{\"start\":{\"line\":406,\"column\":12},\"end\":{\"line\":406,\"column\":25}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13571,13576],\"loc\":{\"start\":{\"line\":406,\"column\":19},\"end\":{\"line\":406,\"column\":24}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[13601,13618],\"loc\":{\"start\":{\"line\":408,\"column\":10},\"end\":{\"line\":408,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[13601,13611],\"loc\":{\"start\":{\"line\":408,\"column\":10},\"end\":{\"line\":408,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[13613,13618],\"loc\":{\"start\":{\"line\":408,\"column\":22},\"end\":{\"line\":408,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[13639,13805],\"loc\":{\"start\":{\"line\":410,\"column\":8},\"end\":{\"line\":416,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[13639,13804],\"loc\":{\"start\":{\"line\":410,\"column\":8},\"end\":{\"line\":416,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[13639,13660],\"loc\":{\"start\":{\"line\":410,\"column\":8},\"end\":{\"line\":410,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13639,13645],\"loc\":{\"start\":{\"line\":410,\"column\":8},\"end\":{\"line\":410,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[13646,13660],\"loc\":{\"start\":{\"line\":410,\"column\":15},\"end\":{\"line\":410,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[13661,13664],\"loc\":{\"start\":{\"line\":410,\"column\":30},\"end\":{\"line\":410,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[13666,13673],\"loc\":{\"start\":{\"line\":410,\"column\":35},\"end\":{\"line\":410,\"column\":42}},\"type\":\"Literal\",\"value\":\"index\",\"raw\":\"\\\"index\\\"\"},{\"range\":[13683,13803],\"loc\":{\"start\":{\"line\":411,\"column\":8},\"end\":{\"line\":416,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[13695,13764],\"loc\":{\"start\":{\"line\":412,\"column\":10},\"end\":{\"line\":414,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[13695,13700],\"loc\":{\"start\":{\"line\":412,\"column\":10},\"end\":{\"line\":412,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[13702,13764],\"loc\":{\"start\":{\"line\":412,\"column\":17},\"end\":{\"line\":414,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[13712,13713],\"loc\":{\"start\":{\"line\":412,\"column\":27},\"end\":{\"line\":412,\"column\":28}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[13715,13764],\"loc\":{\"start\":{\"line\":412,\"column\":30},\"end\":{\"line\":414,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13729,13752],\"loc\":{\"start\":{\"line\":413,\"column\":12},\"end\":{\"line\":413,\"column\":35}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[13736,13751],\"loc\":{\"start\":{\"line\":413,\"column\":19},\"end\":{\"line\":413,\"column\":34}},\"type\":\"CallExpression\",\"callee\":{\"range\":[13736,13748],\"loc\":{\"start\":{\"line\":413,\"column\":19},\"end\":{\"line\":413,\"column\":31}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13736,13740],\"loc\":{\"start\":{\"line\":413,\"column\":19},\"end\":{\"line\":413,\"column\":23}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13741,13748],\"loc\":{\"start\":{\"line\":413,\"column\":24},\"end\":{\"line\":413,\"column\":31}},\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"range\":[13749,13750],\"loc\":{\"start\":{\"line\":413,\"column\":32},\"end\":{\"line\":413,\"column\":33}},\"type\":\"Identifier\",\"name\":\"x\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[13776,13793],\"loc\":{\"start\":{\"line\":415,\"column\":10},\"end\":{\"line\":415,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[13776,13786],\"loc\":{\"start\":{\"line\":415,\"column\":10},\"end\":{\"line\":415,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[13788,13793],\"loc\":{\"start\":{\"line\":415,\"column\":22},\"end\":{\"line\":415,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[13814,14291],\"loc\":{\"start\":{\"line\":417,\"column\":8},\"end\":{\"line\":431,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[13814,14290],\"loc\":{\"start\":{\"line\":417,\"column\":8},\"end\":{\"line\":431,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[13814,13835],\"loc\":{\"start\":{\"line\":417,\"column\":8},\"end\":{\"line\":417,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13814,13820],\"loc\":{\"start\":{\"line\":417,\"column\":8},\"end\":{\"line\":417,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[13821,13835],\"loc\":{\"start\":{\"line\":417,\"column\":15},\"end\":{\"line\":417,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[13836,13839],\"loc\":{\"start\":{\"line\":417,\"column\":30},\"end\":{\"line\":417,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[13841,13850],\"loc\":{\"start\":{\"line\":417,\"column\":35},\"end\":{\"line\":417,\"column\":44}},\"type\":\"Literal\",\"value\":\"indexOf\",\"raw\":\"\\\"indexOf\\\"\"},{\"range\":[13860,14289],\"loc\":{\"start\":{\"line\":418,\"column\":8},\"end\":{\"line\":431,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[13872,14250],\"loc\":{\"start\":{\"line\":419,\"column\":10},\"end\":{\"line\":429,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[13872,13877],\"loc\":{\"start\":{\"line\":419,\"column\":10},\"end\":{\"line\":419,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[13879,14250],\"loc\":{\"start\":{\"line\":419,\"column\":17},\"end\":{\"line\":429,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[13889,13890],\"loc\":{\"start\":{\"line\":419,\"column\":27},\"end\":{\"line\":419,\"column\":28}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[13892,13901],\"loc\":{\"start\":{\"line\":419,\"column\":30},\"end\":{\"line\":419,\"column\":39}},\"type\":\"Identifier\",\"name\":\"fromIndex\"}],\"defaults\":[],\"body\":{\"range\":[13903,14250],\"loc\":{\"start\":{\"line\":419,\"column\":41},\"end\":{\"line\":429,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13917,14215],\"loc\":{\"start\":{\"line\":420,\"column\":12},\"end\":{\"line\":427,\"column\":25}},\"type\":\"TryStatement\",\"block\":{\"range\":[13921,14189],\"loc\":{\"start\":{\"line\":420,\"column\":16},\"end\":{\"line\":426,\"column\":13}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[13937,14175],\"loc\":{\"start\":{\"line\":421,\"column\":14},\"end\":{\"line\":425,\"column\":15}},\"type\":\"ForStatement\",\"init\":{\"range\":[13942,13975],\"loc\":{\"start\":{\"line\":421,\"column\":19},\"end\":{\"line\":421,\"column\":52}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[13946,13975],\"loc\":{\"start\":{\"line\":421,\"column\":23},\"end\":{\"line\":421,\"column\":52}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[13946,13947],\"loc\":{\"start\":{\"line\":421,\"column\":23},\"end\":{\"line\":421,\"column\":24}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[13950,13975],\"loc\":{\"start\":{\"line\":421,\"column\":27},\"end\":{\"line\":421,\"column\":52}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[13950,13959],\"loc\":{\"start\":{\"line\":421,\"column\":27},\"end\":{\"line\":421,\"column\":36}},\"type\":\"Identifier\",\"name\":\"fromIndex\"},\"consequent\":{\"range\":[13962,13971],\"loc\":{\"start\":{\"line\":421,\"column\":39},\"end\":{\"line\":421,\"column\":48}},\"type\":\"Identifier\",\"name\":\"fromIndex\"},\"alternate\":{\"range\":[13974,13975],\"loc\":{\"start\":{\"line\":421,\"column\":51},\"end\":{\"line\":421,\"column\":52}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}],\"kind\":\"var\"},\"test\":{\"range\":[13977,13992],\"loc\":{\"start\":{\"line\":421,\"column\":54},\"end\":{\"line\":421,\"column\":69}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[13977,13978],\"loc\":{\"start\":{\"line\":421,\"column\":54},\"end\":{\"line\":421,\"column\":55}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[13981,13992],\"loc\":{\"start\":{\"line\":421,\"column\":58},\"end\":{\"line\":421,\"column\":69}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[13981,13985],\"loc\":{\"start\":{\"line\":421,\"column\":58},\"end\":{\"line\":421,\"column\":62}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[13986,13992],\"loc\":{\"start\":{\"line\":421,\"column\":63},\"end\":{\"line\":421,\"column\":69}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[13994,13997],\"loc\":{\"start\":{\"line\":421,\"column\":71},\"end\":{\"line\":421,\"column\":74}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[13994,13995],\"loc\":{\"start\":{\"line\":421,\"column\":71},\"end\":{\"line\":421,\"column\":72}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[13999,14175],\"loc\":{\"start\":{\"line\":421,\"column\":76},\"end\":{\"line\":425,\"column\":15}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[14017,14159],\"loc\":{\"start\":{\"line\":422,\"column\":16},\"end\":{\"line\":424,\"column\":51}},\"type\":\"IfStatement\",\"test\":{\"range\":[14021,14053],\"loc\":{\"start\":{\"line\":422,\"column\":20},\"end\":{\"line\":422,\"column\":52}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14021,14043],\"loc\":{\"start\":{\"line\":422,\"column\":20},\"end\":{\"line\":422,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14021,14028],\"loc\":{\"start\":{\"line\":422,\"column\":20},\"end\":{\"line\":422,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[14021,14025],\"loc\":{\"start\":{\"line\":422,\"column\":20},\"end\":{\"line\":422,\"column\":24}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[14026,14027],\"loc\":{\"start\":{\"line\":422,\"column\":25},\"end\":{\"line\":422,\"column\":26}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[14029,14043],\"loc\":{\"start\":{\"line\":422,\"column\":28},\"end\":{\"line\":422,\"column\":42}},\"type\":\"Identifier\",\"name\":\"hasOwnProperty\"}},\"arguments\":[{\"range\":[14044,14052],\"loc\":{\"start\":{\"line\":422,\"column\":43},\"end\":{\"line\":422,\"column\":51}},\"type\":\"Literal\",\"value\":\"equals\",\"raw\":\"\\\"equals\\\"\"}]},\"consequent\":{\"range\":[14055,14125],\"loc\":{\"start\":{\"line\":422,\"column\":54},\"end\":{\"line\":424,\"column\":17}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[14075,14107],\"loc\":{\"start\":{\"line\":423,\"column\":18},\"end\":{\"line\":423,\"column\":50}},\"type\":\"IfStatement\",\"test\":{\"range\":[14079,14096],\"loc\":{\"start\":{\"line\":423,\"column\":22},\"end\":{\"line\":423,\"column\":39}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14079,14093],\"loc\":{\"start\":{\"line\":423,\"column\":22},\"end\":{\"line\":423,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14079,14086],\"loc\":{\"start\":{\"line\":423,\"column\":22},\"end\":{\"line\":423,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[14079,14083],\"loc\":{\"start\":{\"line\":423,\"column\":22},\"end\":{\"line\":423,\"column\":26}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[14084,14085],\"loc\":{\"start\":{\"line\":423,\"column\":27},\"end\":{\"line\":423,\"column\":28}},\"type\":\"Identifier\",\"name\":\"i\"}},\"property\":{\"range\":[14087,14093],\"loc\":{\"start\":{\"line\":423,\"column\":30},\"end\":{\"line\":423,\"column\":36}},\"type\":\"Identifier\",\"name\":\"equals\"}},\"arguments\":[{\"range\":[14094,14095],\"loc\":{\"start\":{\"line\":423,\"column\":37},\"end\":{\"line\":423,\"column\":38}},\"type\":\"Identifier\",\"name\":\"x\"}]},\"consequent\":{\"range\":[14098,14107],\"loc\":{\"start\":{\"line\":423,\"column\":41},\"end\":{\"line\":423,\"column\":50}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14105,14106],\"loc\":{\"start\":{\"line\":423,\"column\":48},\"end\":{\"line\":423,\"column\":49}},\"type\":\"Identifier\",\"name\":\"i\"}},\"alternate\":null}]},\"alternate\":{\"range\":[14131,14159],\"loc\":{\"start\":{\"line\":424,\"column\":23},\"end\":{\"line\":424,\"column\":51}},\"type\":\"IfStatement\",\"test\":{\"range\":[14135,14148],\"loc\":{\"start\":{\"line\":424,\"column\":27},\"end\":{\"line\":424,\"column\":40}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[14135,14142],\"loc\":{\"start\":{\"line\":424,\"column\":27},\"end\":{\"line\":424,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[14135,14139],\"loc\":{\"start\":{\"line\":424,\"column\":27},\"end\":{\"line\":424,\"column\":31}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[14140,14141],\"loc\":{\"start\":{\"line\":424,\"column\":32},\"end\":{\"line\":424,\"column\":33}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[14147,14148],\"loc\":{\"start\":{\"line\":424,\"column\":39},\"end\":{\"line\":424,\"column\":40}},\"type\":\"Identifier\",\"name\":\"x\"}},\"consequent\":{\"range\":[14150,14159],\"loc\":{\"start\":{\"line\":424,\"column\":42},\"end\":{\"line\":424,\"column\":51}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14157,14158],\"loc\":{\"start\":{\"line\":424,\"column\":49},\"end\":{\"line\":424,\"column\":50}},\"type\":\"Identifier\",\"name\":\"i\"}},\"alternate\":null}}]}}]},\"guardedHandlers\":[],\"handlers\":[{\"range\":[14202,14215],\"loc\":{\"start\":{\"line\":427,\"column\":12},\"end\":{\"line\":427,\"column\":25}},\"type\":\"CatchClause\",\"param\":{\"range\":[14209,14210],\"loc\":{\"start\":{\"line\":427,\"column\":19},\"end\":{\"line\":427,\"column\":20}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[14212,14215],\"loc\":{\"start\":{\"line\":427,\"column\":22},\"end\":{\"line\":427,\"column\":25}},\"type\":\"BlockStatement\",\"body\":[]}}],\"handler\":{\"range\":[14202,14215],\"loc\":{\"start\":{\"line\":427,\"column\":12},\"end\":{\"line\":427,\"column\":25}},\"type\":\"CatchClause\",\"param\":{\"range\":[14209,14210],\"loc\":{\"start\":{\"line\":427,\"column\":19},\"end\":{\"line\":427,\"column\":20}},\"type\":\"Identifier\",\"name\":\"e\"},\"body\":{\"range\":[14212,14215],\"loc\":{\"start\":{\"line\":427,\"column\":22},\"end\":{\"line\":427,\"column\":25}},\"type\":\"BlockStatement\",\"body\":[]}},\"finalizer\":null},{\"range\":[14228,14238],\"loc\":{\"start\":{\"line\":428,\"column\":12},\"end\":{\"line\":428,\"column\":22}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14235,14237],\"loc\":{\"start\":{\"line\":428,\"column\":19},\"end\":{\"line\":428,\"column\":21}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[14236,14237],\"loc\":{\"start\":{\"line\":428,\"column\":20},\"end\":{\"line\":428,\"column\":21}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"},\"prefix\":true}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[14262,14279],\"loc\":{\"start\":{\"line\":430,\"column\":10},\"end\":{\"line\":430,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[14262,14272],\"loc\":{\"start\":{\"line\":430,\"column\":10},\"end\":{\"line\":430,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[14274,14279],\"loc\":{\"start\":{\"line\":430,\"column\":22},\"end\":{\"line\":430,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[14300,14524],\"loc\":{\"start\":{\"line\":432,\"column\":8},\"end\":{\"line\":438,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[14300,14523],\"loc\":{\"start\":{\"line\":432,\"column\":8},\"end\":{\"line\":438,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14300,14321],\"loc\":{\"start\":{\"line\":432,\"column\":8},\"end\":{\"line\":432,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14300,14306],\"loc\":{\"start\":{\"line\":432,\"column\":8},\"end\":{\"line\":432,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[14307,14321],\"loc\":{\"start\":{\"line\":432,\"column\":15},\"end\":{\"line\":432,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[14322,14325],\"loc\":{\"start\":{\"line\":432,\"column\":30},\"end\":{\"line\":432,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[14327,14337],\"loc\":{\"start\":{\"line\":432,\"column\":35},\"end\":{\"line\":432,\"column\":45}},\"type\":\"Literal\",\"value\":\"_pySlice\",\"raw\":\"\\\"_pySlice\\\"\"},{\"range\":[14347,14522],\"loc\":{\"start\":{\"line\":433,\"column\":8},\"end\":{\"line\":438,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[14359,14481],\"loc\":{\"start\":{\"line\":434,\"column\":10},\"end\":{\"line\":436,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[14359,14364],\"loc\":{\"start\":{\"line\":434,\"column\":10},\"end\":{\"line\":434,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[14366,14481],\"loc\":{\"start\":{\"line\":434,\"column\":17},\"end\":{\"line\":436,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[14376,14381],\"loc\":{\"start\":{\"line\":434,\"column\":27},\"end\":{\"line\":434,\"column\":32}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[14383,14386],\"loc\":{\"start\":{\"line\":434,\"column\":34},\"end\":{\"line\":434,\"column\":37}},\"type\":\"Identifier\",\"name\":\"end\"},{\"range\":[14388,14392],\"loc\":{\"start\":{\"line\":434,\"column\":39},\"end\":{\"line\":434,\"column\":43}},\"type\":\"Identifier\",\"name\":\"step\"}],\"defaults\":[],\"body\":{\"range\":[14394,14481],\"loc\":{\"start\":{\"line\":434,\"column\":45},\"end\":{\"line\":436,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[14409,14469],\"loc\":{\"start\":{\"line\":435,\"column\":12},\"end\":{\"line\":435,\"column\":72}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14416,14468],\"loc\":{\"start\":{\"line\":435,\"column\":19},\"end\":{\"line\":435,\"column\":71}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14416,14444],\"loc\":{\"start\":{\"line\":435,\"column\":19},\"end\":{\"line\":435,\"column\":47}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14416,14438],\"loc\":{\"start\":{\"line\":435,\"column\":19},\"end\":{\"line\":435,\"column\":41}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14416,14429],\"loc\":{\"start\":{\"line\":435,\"column\":19},\"end\":{\"line\":435,\"column\":32}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[14430,14438],\"loc\":{\"start\":{\"line\":435,\"column\":33},\"end\":{\"line\":435,\"column\":41}},\"type\":\"Identifier\",\"name\":\"internal\"}},\"property\":{\"range\":[14439,14444],\"loc\":{\"start\":{\"line\":435,\"column\":42},\"end\":{\"line\":435,\"column\":47}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[14445,14449],\"loc\":{\"start\":{\"line\":435,\"column\":48},\"end\":{\"line\":435,\"column\":52}},\"type\":\"ThisExpression\"},{\"range\":[14451,14456],\"loc\":{\"start\":{\"line\":435,\"column\":54},\"end\":{\"line\":435,\"column\":59}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[14458,14461],\"loc\":{\"start\":{\"line\":435,\"column\":61},\"end\":{\"line\":435,\"column\":64}},\"type\":\"Identifier\",\"name\":\"end\"},{\"range\":[14463,14467],\"loc\":{\"start\":{\"line\":435,\"column\":66},\"end\":{\"line\":435,\"column\":70}},\"type\":\"Identifier\",\"name\":\"step\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[14495,14512],\"loc\":{\"start\":{\"line\":437,\"column\":12},\"end\":{\"line\":437,\"column\":29}},\"type\":\"Property\",\"key\":{\"range\":[14495,14505],\"loc\":{\"start\":{\"line\":437,\"column\":12},\"end\":{\"line\":437,\"column\":22}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[14507,14512],\"loc\":{\"start\":{\"line\":437,\"column\":24},\"end\":{\"line\":437,\"column\":29}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[14533,14797],\"loc\":{\"start\":{\"line\":439,\"column\":8},\"end\":{\"line\":448,\"column\":11}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[14533,14796],\"loc\":{\"start\":{\"line\":439,\"column\":8},\"end\":{\"line\":448,\"column\":10}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14533,14554],\"loc\":{\"start\":{\"line\":439,\"column\":8},\"end\":{\"line\":439,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14533,14539],\"loc\":{\"start\":{\"line\":439,\"column\":8},\"end\":{\"line\":439,\"column\":14}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[14540,14554],\"loc\":{\"start\":{\"line\":439,\"column\":15},\"end\":{\"line\":439,\"column\":29}},\"type\":\"Identifier\",\"name\":\"defineProperty\"}},\"arguments\":[{\"range\":[14555,14558],\"loc\":{\"start\":{\"line\":439,\"column\":30},\"end\":{\"line\":439,\"column\":33}},\"type\":\"Identifier\",\"name\":\"arr\"},{\"range\":[14560,14570],\"loc\":{\"start\":{\"line\":439,\"column\":35},\"end\":{\"line\":439,\"column\":45}},\"type\":\"Literal\",\"value\":\"toString\",\"raw\":\"\\\"toString\\\"\"},{\"range\":[14580,14795],\"loc\":{\"start\":{\"line\":440,\"column\":8},\"end\":{\"line\":448,\"column\":9}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[14592,14756],\"loc\":{\"start\":{\"line\":441,\"column\":10},\"end\":{\"line\":446,\"column\":11}},\"type\":\"Property\",\"key\":{\"range\":[14592,14597],\"loc\":{\"start\":{\"line\":441,\"column\":10},\"end\":{\"line\":441,\"column\":15}},\"type\":\"Identifier\",\"name\":\"value\"},\"computed\":false,\"value\":{\"range\":[14599,14756],\"loc\":{\"start\":{\"line\":441,\"column\":17},\"end\":{\"line\":446,\"column\":11}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[14611,14756],\"loc\":{\"start\":{\"line\":441,\"column\":29},\"end\":{\"line\":446,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[14625,14655],\"loc\":{\"start\":{\"line\":442,\"column\":12},\"end\":{\"line\":442,\"column\":42}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[14629,14654],\"loc\":{\"start\":{\"line\":442,\"column\":16},\"end\":{\"line\":442,\"column\":41}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[14629,14630],\"loc\":{\"start\":{\"line\":442,\"column\":16},\"end\":{\"line\":442,\"column\":17}},\"type\":\"Identifier\",\"name\":\"s\"},\"init\":{\"range\":[14633,14654],\"loc\":{\"start\":{\"line\":442,\"column\":20},\"end\":{\"line\":442,\"column\":41}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[14633,14636],\"loc\":{\"start\":{\"line\":442,\"column\":20},\"end\":{\"line\":442,\"column\":23}},\"type\":\"Literal\",\"value\":\"(\",\"raw\":\"'('\"},\"right\":{\"range\":[14639,14654],\"loc\":{\"start\":{\"line\":442,\"column\":26},\"end\":{\"line\":442,\"column\":41}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14639,14648],\"loc\":{\"start\":{\"line\":442,\"column\":26},\"end\":{\"line\":442,\"column\":35}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14639,14643],\"loc\":{\"start\":{\"line\":442,\"column\":26},\"end\":{\"line\":442,\"column\":30}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[14644,14648],\"loc\":{\"start\":{\"line\":442,\"column\":31},\"end\":{\"line\":442,\"column\":35}},\"type\":\"Identifier\",\"name\":\"join\"}},\"arguments\":[{\"range\":[14649,14653],\"loc\":{\"start\":{\"line\":442,\"column\":36},\"end\":{\"line\":442,\"column\":40}},\"type\":\"Literal\",\"value\":\", \",\"raw\":\"', '\"}]}}}],\"kind\":\"var\"},{\"range\":[14668,14700],\"loc\":{\"start\":{\"line\":443,\"column\":12},\"end\":{\"line\":443,\"column\":44}},\"type\":\"IfStatement\",\"test\":{\"range\":[14672,14689],\"loc\":{\"start\":{\"line\":443,\"column\":16},\"end\":{\"line\":443,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[14672,14683],\"loc\":{\"start\":{\"line\":443,\"column\":16},\"end\":{\"line\":443,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14672,14676],\"loc\":{\"start\":{\"line\":443,\"column\":16},\"end\":{\"line\":443,\"column\":20}},\"type\":\"ThisExpression\"},\"property\":{\"range\":[14677,14683],\"loc\":{\"start\":{\"line\":443,\"column\":21},\"end\":{\"line\":443,\"column\":27}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[14688,14689],\"loc\":{\"start\":{\"line\":443,\"column\":32},\"end\":{\"line\":443,\"column\":33}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}},\"consequent\":{\"range\":[14691,14700],\"loc\":{\"start\":{\"line\":443,\"column\":35},\"end\":{\"line\":443,\"column\":44}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[14691,14699],\"loc\":{\"start\":{\"line\":443,\"column\":35},\"end\":{\"line\":443,\"column\":43}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[14691,14692],\"loc\":{\"start\":{\"line\":443,\"column\":35},\"end\":{\"line\":443,\"column\":36}},\"type\":\"Identifier\",\"name\":\"s\"},\"right\":{\"range\":[14696,14699],\"loc\":{\"start\":{\"line\":443,\"column\":40},\"end\":{\"line\":443,\"column\":43}},\"type\":\"Literal\",\"value\":\",\",\"raw\":\"','\"}}},\"alternate\":null},{\"range\":[14713,14722],\"loc\":{\"start\":{\"line\":444,\"column\":12},\"end\":{\"line\":444,\"column\":21}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[14713,14721],\"loc\":{\"start\":{\"line\":444,\"column\":12},\"end\":{\"line\":444,\"column\":20}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[14713,14714],\"loc\":{\"start\":{\"line\":444,\"column\":12},\"end\":{\"line\":444,\"column\":13}},\"type\":\"Identifier\",\"name\":\"s\"},\"right\":{\"range\":[14718,14721],\"loc\":{\"start\":{\"line\":444,\"column\":17},\"end\":{\"line\":444,\"column\":20}},\"type\":\"Literal\",\"value\":\")\",\"raw\":\"')'\"}}},{\"range\":[14735,14744],\"loc\":{\"start\":{\"line\":445,\"column\":12},\"end\":{\"line\":445,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14742,14743],\"loc\":{\"start\":{\"line\":445,\"column\":19},\"end\":{\"line\":445,\"column\":20}},\"type\":\"Identifier\",\"name\":\"s\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[14768,14785],\"loc\":{\"start\":{\"line\":447,\"column\":10},\"end\":{\"line\":447,\"column\":27}},\"type\":\"Property\",\"key\":{\"range\":[14768,14778],\"loc\":{\"start\":{\"line\":447,\"column\":10},\"end\":{\"line\":447,\"column\":20}},\"type\":\"Identifier\",\"name\":\"enumerable\"},\"computed\":false,\"value\":{\"range\":[14780,14785],\"loc\":{\"start\":{\"line\":447,\"column\":22},\"end\":{\"line\":447,\"column\":27}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}]}},{\"range\":[14806,14817],\"loc\":{\"start\":{\"line\":449,\"column\":8},\"end\":{\"line\":449,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14813,14816],\"loc\":{\"start\":{\"line\":449,\"column\":15},\"end\":{\"line\":449,\"column\":18}},\"type\":\"Identifier\",\"name\":\"arr\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[14872,22533],\"loc\":{\"start\":{\"line\":455,\"column\":4},\"end\":{\"line\":644,\"column\":5}},\"type\":\"Property\",\"key\":{\"range\":[14872,14881],\"loc\":{\"start\":{\"line\":455,\"column\":4},\"end\":{\"line\":455,\"column\":13}},\"type\":\"Identifier\",\"name\":\"functions\"},\"computed\":false,\"value\":{\"range\":[14883,22533],\"loc\":{\"start\":{\"line\":455,\"column\":15},\"end\":{\"line\":644,\"column\":5}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[14891,14945],\"loc\":{\"start\":{\"line\":456,\"column\":6},\"end\":{\"line\":458,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[14891,14894],\"loc\":{\"start\":{\"line\":456,\"column\":6},\"end\":{\"line\":456,\"column\":9}},\"type\":\"Identifier\",\"name\":\"abs\"},\"computed\":false,\"value\":{\"range\":[14896,14945],\"loc\":{\"start\":{\"line\":456,\"column\":11},\"end\":{\"line\":458,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[14905,14906],\"loc\":{\"start\":{\"line\":456,\"column\":20},\"end\":{\"line\":456,\"column\":21}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[14908,14945],\"loc\":{\"start\":{\"line\":456,\"column\":23},\"end\":{\"line\":458,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[14918,14937],\"loc\":{\"start\":{\"line\":457,\"column\":8},\"end\":{\"line\":457,\"column\":27}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[14925,14936],\"loc\":{\"start\":{\"line\":457,\"column\":15},\"end\":{\"line\":457,\"column\":26}},\"type\":\"CallExpression\",\"callee\":{\"range\":[14925,14933],\"loc\":{\"start\":{\"line\":457,\"column\":15},\"end\":{\"line\":457,\"column\":23}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[14925,14929],\"loc\":{\"start\":{\"line\":457,\"column\":15},\"end\":{\"line\":457,\"column\":19}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[14930,14933],\"loc\":{\"start\":{\"line\":457,\"column\":20},\"end\":{\"line\":457,\"column\":23}},\"type\":\"Identifier\",\"name\":\"abs\"}},\"arguments\":[{\"range\":[14934,14935],\"loc\":{\"start\":{\"line\":457,\"column\":24},\"end\":{\"line\":457,\"column\":25}},\"type\":\"Identifier\",\"name\":\"x\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[14953,15109],\"loc\":{\"start\":{\"line\":459,\"column\":6},\"end\":{\"line\":462,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[14953,14956],\"loc\":{\"start\":{\"line\":459,\"column\":6},\"end\":{\"line\":459,\"column\":9}},\"type\":\"Identifier\",\"name\":\"all\"},\"computed\":false,\"value\":{\"range\":[14958,15109],\"loc\":{\"start\":{\"line\":459,\"column\":11},\"end\":{\"line\":462,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[14967,14975],\"loc\":{\"start\":{\"line\":459,\"column\":20},\"end\":{\"line\":459,\"column\":28}},\"type\":\"Identifier\",\"name\":\"iterable\"}],\"defaults\":[],\"body\":{\"range\":[14977,15109],\"loc\":{\"start\":{\"line\":459,\"column\":30},\"end\":{\"line\":462,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[14987,15080],\"loc\":{\"start\":{\"line\":460,\"column\":8},\"end\":{\"line\":460,\"column\":101}},\"type\":\"ForInStatement\",\"left\":{\"range\":[14992,14997],\"loc\":{\"start\":{\"line\":460,\"column\":13},\"end\":{\"line\":460,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[14996,14997],\"loc\":{\"start\":{\"line\":460,\"column\":17},\"end\":{\"line\":460,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[14996,14997],\"loc\":{\"start\":{\"line\":460,\"column\":17},\"end\":{\"line\":460,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[15001,15009],\"loc\":{\"start\":{\"line\":460,\"column\":22},\"end\":{\"line\":460,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[15011,15080],\"loc\":{\"start\":{\"line\":460,\"column\":32},\"end\":{\"line\":460,\"column\":101}},\"type\":\"IfStatement\",\"test\":{\"range\":[15015,15065],\"loc\":{\"start\":{\"line\":460,\"column\":36},\"end\":{\"line\":460,\"column\":86}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[15015,15056],\"loc\":{\"start\":{\"line\":460,\"column\":36},\"end\":{\"line\":460,\"column\":77}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15015,15043],\"loc\":{\"start\":{\"line\":460,\"column\":36},\"end\":{\"line\":460,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15015,15038],\"loc\":{\"start\":{\"line\":460,\"column\":36},\"end\":{\"line\":460,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15015,15028],\"loc\":{\"start\":{\"line\":460,\"column\":36},\"end\":{\"line\":460,\"column\":49}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[15029,15038],\"loc\":{\"start\":{\"line\":460,\"column\":50},\"end\":{\"line\":460,\"column\":59}},\"type\":\"Identifier\",\"name\":\"functions\"}},\"property\":{\"range\":[15039,15043],\"loc\":{\"start\":{\"line\":460,\"column\":60},\"end\":{\"line\":460,\"column\":64}},\"type\":\"Identifier\",\"name\":\"bool\"}},\"arguments\":[{\"range\":[15044,15055],\"loc\":{\"start\":{\"line\":460,\"column\":65},\"end\":{\"line\":460,\"column\":76}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[15044,15052],\"loc\":{\"start\":{\"line\":460,\"column\":65},\"end\":{\"line\":460,\"column\":73}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[15053,15054],\"loc\":{\"start\":{\"line\":460,\"column\":74},\"end\":{\"line\":460,\"column\":75}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"right\":{\"range\":[15061,15065],\"loc\":{\"start\":{\"line\":460,\"column\":82},\"end\":{\"line\":460,\"column\":86}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}},\"consequent\":{\"range\":[15067,15080],\"loc\":{\"start\":{\"line\":460,\"column\":88},\"end\":{\"line\":460,\"column\":101}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[15074,15079],\"loc\":{\"start\":{\"line\":460,\"column\":95},\"end\":{\"line\":460,\"column\":100}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"alternate\":null},\"each\":false},{\"range\":[15089,15101],\"loc\":{\"start\":{\"line\":461,\"column\":8},\"end\":{\"line\":461,\"column\":20}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[15096,15100],\"loc\":{\"start\":{\"line\":461,\"column\":15},\"end\":{\"line\":461,\"column\":19}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[15117,15273],\"loc\":{\"start\":{\"line\":463,\"column\":6},\"end\":{\"line\":466,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[15117,15120],\"loc\":{\"start\":{\"line\":463,\"column\":6},\"end\":{\"line\":463,\"column\":9}},\"type\":\"Identifier\",\"name\":\"any\"},\"computed\":false,\"value\":{\"range\":[15122,15273],\"loc\":{\"start\":{\"line\":463,\"column\":11},\"end\":{\"line\":466,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[15131,15139],\"loc\":{\"start\":{\"line\":463,\"column\":20},\"end\":{\"line\":463,\"column\":28}},\"type\":\"Identifier\",\"name\":\"iterable\"}],\"defaults\":[],\"body\":{\"range\":[15141,15273],\"loc\":{\"start\":{\"line\":463,\"column\":30},\"end\":{\"line\":466,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[15151,15243],\"loc\":{\"start\":{\"line\":464,\"column\":8},\"end\":{\"line\":464,\"column\":100}},\"type\":\"ForInStatement\",\"left\":{\"range\":[15156,15161],\"loc\":{\"start\":{\"line\":464,\"column\":13},\"end\":{\"line\":464,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[15160,15161],\"loc\":{\"start\":{\"line\":464,\"column\":17},\"end\":{\"line\":464,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[15160,15161],\"loc\":{\"start\":{\"line\":464,\"column\":17},\"end\":{\"line\":464,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[15165,15173],\"loc\":{\"start\":{\"line\":464,\"column\":22},\"end\":{\"line\":464,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[15175,15243],\"loc\":{\"start\":{\"line\":464,\"column\":32},\"end\":{\"line\":464,\"column\":100}},\"type\":\"IfStatement\",\"test\":{\"range\":[15179,15229],\"loc\":{\"start\":{\"line\":464,\"column\":36},\"end\":{\"line\":464,\"column\":86}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[15179,15220],\"loc\":{\"start\":{\"line\":464,\"column\":36},\"end\":{\"line\":464,\"column\":77}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15179,15207],\"loc\":{\"start\":{\"line\":464,\"column\":36},\"end\":{\"line\":464,\"column\":64}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15179,15202],\"loc\":{\"start\":{\"line\":464,\"column\":36},\"end\":{\"line\":464,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15179,15192],\"loc\":{\"start\":{\"line\":464,\"column\":36},\"end\":{\"line\":464,\"column\":49}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[15193,15202],\"loc\":{\"start\":{\"line\":464,\"column\":50},\"end\":{\"line\":464,\"column\":59}},\"type\":\"Identifier\",\"name\":\"functions\"}},\"property\":{\"range\":[15203,15207],\"loc\":{\"start\":{\"line\":464,\"column\":60},\"end\":{\"line\":464,\"column\":64}},\"type\":\"Identifier\",\"name\":\"bool\"}},\"arguments\":[{\"range\":[15208,15219],\"loc\":{\"start\":{\"line\":464,\"column\":65},\"end\":{\"line\":464,\"column\":76}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[15208,15216],\"loc\":{\"start\":{\"line\":464,\"column\":65},\"end\":{\"line\":464,\"column\":73}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[15217,15218],\"loc\":{\"start\":{\"line\":464,\"column\":74},\"end\":{\"line\":464,\"column\":75}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"right\":{\"range\":[15225,15229],\"loc\":{\"start\":{\"line\":464,\"column\":82},\"end\":{\"line\":464,\"column\":86}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}},\"consequent\":{\"range\":[15231,15243],\"loc\":{\"start\":{\"line\":464,\"column\":88},\"end\":{\"line\":464,\"column\":100}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[15238,15242],\"loc\":{\"start\":{\"line\":464,\"column\":95},\"end\":{\"line\":464,\"column\":99}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}},\"alternate\":null},\"each\":false},{\"range\":[15252,15265],\"loc\":{\"start\":{\"line\":465,\"column\":8},\"end\":{\"line\":465,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[15259,15264],\"loc\":{\"start\":{\"line\":465,\"column\":15},\"end\":{\"line\":465,\"column\":20}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[15281,16281],\"loc\":{\"start\":{\"line\":467,\"column\":6},\"end\":{\"line\":484,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[15281,15286],\"loc\":{\"start\":{\"line\":467,\"column\":6},\"end\":{\"line\":467,\"column\":11}},\"type\":\"Identifier\",\"name\":\"ascii\"},\"computed\":false,\"value\":{\"range\":[15288,16281],\"loc\":{\"start\":{\"line\":467,\"column\":13},\"end\":{\"line\":484,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[15297,15300],\"loc\":{\"start\":{\"line\":467,\"column\":22},\"end\":{\"line\":467,\"column\":25}},\"type\":\"Identifier\",\"name\":\"obj\"}],\"defaults\":[],\"body\":{\"range\":[15302,16281],\"loc\":{\"start\":{\"line\":467,\"column\":27},\"end\":{\"line\":484,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[15312,15394],\"loc\":{\"start\":{\"line\":468,\"column\":8},\"end\":{\"line\":470,\"column\":17}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[15316,15353],\"loc\":{\"start\":{\"line\":468,\"column\":12},\"end\":{\"line\":468,\"column\":49}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[15316,15317],\"loc\":{\"start\":{\"line\":468,\"column\":12},\"end\":{\"line\":468,\"column\":13}},\"type\":\"Identifier\",\"name\":\"s\"},\"init\":{\"range\":[15320,15353],\"loc\":{\"start\":{\"line\":468,\"column\":16},\"end\":{\"line\":468,\"column\":49}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15320,15348],\"loc\":{\"start\":{\"line\":468,\"column\":16},\"end\":{\"line\":468,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15320,15343],\"loc\":{\"start\":{\"line\":468,\"column\":16},\"end\":{\"line\":468,\"column\":39}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15320,15333],\"loc\":{\"start\":{\"line\":468,\"column\":16},\"end\":{\"line\":468,\"column\":29}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[15334,15343],\"loc\":{\"start\":{\"line\":468,\"column\":30},\"end\":{\"line\":468,\"column\":39}},\"type\":\"Identifier\",\"name\":\"functions\"}},\"property\":{\"range\":[15344,15348],\"loc\":{\"start\":{\"line\":468,\"column\":40},\"end\":{\"line\":468,\"column\":44}},\"type\":\"Identifier\",\"name\":\"repr\"}},\"arguments\":[{\"range\":[15349,15352],\"loc\":{\"start\":{\"line\":468,\"column\":45},\"end\":{\"line\":468,\"column\":48}},\"type\":\"Identifier\",\"name\":\"obj\"}]}},{\"range\":[15367,15375],\"loc\":{\"start\":{\"line\":469,\"column\":12},\"end\":{\"line\":469,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[15367,15370],\"loc\":{\"start\":{\"line\":469,\"column\":12},\"end\":{\"line\":469,\"column\":15}},\"type\":\"Identifier\",\"name\":\"asc\"},\"init\":{\"range\":[15373,15375],\"loc\":{\"start\":{\"line\":469,\"column\":18},\"end\":{\"line\":469,\"column\":20}},\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\"}},{\"range\":[15389,15393],\"loc\":{\"start\":{\"line\":470,\"column\":12},\"end\":{\"line\":470,\"column\":16}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[15389,15393],\"loc\":{\"start\":{\"line\":470,\"column\":12},\"end\":{\"line\":470,\"column\":16}},\"type\":\"Identifier\",\"name\":\"code\"},\"init\":null}],\"kind\":\"var\"},{\"range\":[15403,16253],\"loc\":{\"start\":{\"line\":471,\"column\":8},\"end\":{\"line\":482,\"column\":9}},\"type\":\"ForStatement\",\"init\":{\"range\":[15408,15417],\"loc\":{\"start\":{\"line\":471,\"column\":13},\"end\":{\"line\":471,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[15412,15417],\"loc\":{\"start\":{\"line\":471,\"column\":17},\"end\":{\"line\":471,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[15412,15413],\"loc\":{\"start\":{\"line\":471,\"column\":17},\"end\":{\"line\":471,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[15416,15417],\"loc\":{\"start\":{\"line\":471,\"column\":21},\"end\":{\"line\":471,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[15419,15431],\"loc\":{\"start\":{\"line\":471,\"column\":24},\"end\":{\"line\":471,\"column\":36}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[15419,15420],\"loc\":{\"start\":{\"line\":471,\"column\":24},\"end\":{\"line\":471,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[15423,15431],\"loc\":{\"start\":{\"line\":471,\"column\":28},\"end\":{\"line\":471,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15423,15424],\"loc\":{\"start\":{\"line\":471,\"column\":28},\"end\":{\"line\":471,\"column\":29}},\"type\":\"Identifier\",\"name\":\"s\"},\"property\":{\"range\":[15425,15431],\"loc\":{\"start\":{\"line\":471,\"column\":30},\"end\":{\"line\":471,\"column\":36}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[15433,15436],\"loc\":{\"start\":{\"line\":471,\"column\":38},\"end\":{\"line\":471,\"column\":41}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[15433,15434],\"loc\":{\"start\":{\"line\":471,\"column\":38},\"end\":{\"line\":471,\"column\":39}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[15438,16253],\"loc\":{\"start\":{\"line\":471,\"column\":43},\"end\":{\"line\":482,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[15450,15473],\"loc\":{\"start\":{\"line\":472,\"column\":10},\"end\":{\"line\":472,\"column\":33}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[15450,15472],\"loc\":{\"start\":{\"line\":472,\"column\":10},\"end\":{\"line\":472,\"column\":32}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[15450,15454],\"loc\":{\"start\":{\"line\":472,\"column\":10},\"end\":{\"line\":472,\"column\":14}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15457,15472],\"loc\":{\"start\":{\"line\":472,\"column\":17},\"end\":{\"line\":472,\"column\":32}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15457,15469],\"loc\":{\"start\":{\"line\":472,\"column\":17},\"end\":{\"line\":472,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15457,15458],\"loc\":{\"start\":{\"line\":472,\"column\":17},\"end\":{\"line\":472,\"column\":18}},\"type\":\"Identifier\",\"name\":\"s\"},\"property\":{\"range\":[15459,15469],\"loc\":{\"start\":{\"line\":472,\"column\":19},\"end\":{\"line\":472,\"column\":29}},\"type\":\"Identifier\",\"name\":\"charCodeAt\"}},\"arguments\":[{\"range\":[15470,15471],\"loc\":{\"start\":{\"line\":472,\"column\":30},\"end\":{\"line\":472,\"column\":31}},\"type\":\"Identifier\",\"name\":\"i\"}]}}},{\"range\":[15484,16107],\"loc\":{\"start\":{\"line\":473,\"column\":10},\"end\":{\"line\":481,\"column\":15}},\"type\":\"IfStatement\",\"test\":{\"range\":[15488,15499],\"loc\":{\"start\":{\"line\":473,\"column\":14},\"end\":{\"line\":473,\"column\":25}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[15488,15492],\"loc\":{\"start\":{\"line\":473,\"column\":14},\"end\":{\"line\":473,\"column\":18}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15496,15499],\"loc\":{\"start\":{\"line\":473,\"column\":22},\"end\":{\"line\":473,\"column\":25}},\"type\":\"Literal\",\"value\":127,\"raw\":\"127\"}},\"consequent\":{\"range\":[15501,15513],\"loc\":{\"start\":{\"line\":473,\"column\":27},\"end\":{\"line\":473,\"column\":39}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[15501,15512],\"loc\":{\"start\":{\"line\":473,\"column\":27},\"end\":{\"line\":473,\"column\":38}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[15501,15504],\"loc\":{\"start\":{\"line\":473,\"column\":27},\"end\":{\"line\":473,\"column\":30}},\"type\":\"Identifier\",\"name\":\"asc\"},\"right\":{\"range\":[15508,15512],\"loc\":{\"start\":{\"line\":473,\"column\":34},\"end\":{\"line\":473,\"column\":38}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[15508,15509],\"loc\":{\"start\":{\"line\":473,\"column\":34},\"end\":{\"line\":473,\"column\":35}},\"type\":\"Identifier\",\"name\":\"s\"},\"property\":{\"range\":[15510,15511],\"loc\":{\"start\":{\"line\":473,\"column\":36},\"end\":{\"line\":473,\"column\":37}},\"type\":\"Identifier\",\"name\":\"i\"}}}},\"alternate\":{\"range\":[15529,16107],\"loc\":{\"start\":{\"line\":474,\"column\":15},\"end\":{\"line\":481,\"column\":15}},\"type\":\"IfStatement\",\"test\":{\"range\":[15533,15545],\"loc\":{\"start\":{\"line\":474,\"column\":19},\"end\":{\"line\":474,\"column\":31}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[15533,15537],\"loc\":{\"start\":{\"line\":474,\"column\":19},\"end\":{\"line\":474,\"column\":23}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15541,15545],\"loc\":{\"start\":{\"line\":474,\"column\":27},\"end\":{\"line\":474,\"column\":31}},\"type\":\"Literal\",\"value\":255,\"raw\":\"0xFF\"}},\"consequent\":{\"range\":[15547,15580],\"loc\":{\"start\":{\"line\":474,\"column\":33},\"end\":{\"line\":474,\"column\":66}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[15547,15579],\"loc\":{\"start\":{\"line\":474,\"column\":33},\"end\":{\"line\":474,\"column\":65}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[15547,15550],\"loc\":{\"start\":{\"line\":474,\"column\":33},\"end\":{\"line\":474,\"column\":36}},\"type\":\"Identifier\",\"name\":\"asc\"},\"right\":{\"range\":[15554,15579],\"loc\":{\"start\":{\"line\":474,\"column\":40},\"end\":{\"line\":474,\"column\":65}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15554,15559],\"loc\":{\"start\":{\"line\":474,\"column\":40},\"end\":{\"line\":474,\"column\":45}},\"type\":\"Literal\",\"value\":\"\\\\x\",\"raw\":\"\\\"\\\\\\\\x\\\"\"},\"right\":{\"range\":[15562,15579],\"loc\":{\"start\":{\"line\":474,\"column\":48},\"end\":{\"line\":474,\"column\":65}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15562,15575],\"loc\":{\"start\":{\"line\":474,\"column\":48},\"end\":{\"line\":474,\"column\":61}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15562,15566],\"loc\":{\"start\":{\"line\":474,\"column\":48},\"end\":{\"line\":474,\"column\":52}},\"type\":\"Identifier\",\"name\":\"code\"},\"property\":{\"range\":[15567,15575],\"loc\":{\"start\":{\"line\":474,\"column\":53},\"end\":{\"line\":474,\"column\":61}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[{\"range\":[15576,15578],\"loc\":{\"start\":{\"line\":474,\"column\":62},\"end\":{\"line\":474,\"column\":64}},\"type\":\"Literal\",\"value\":16,\"raw\":\"16\"}]}}}},\"alternate\":{\"range\":[15596,16107],\"loc\":{\"start\":{\"line\":475,\"column\":15},\"end\":{\"line\":481,\"column\":15}},\"type\":\"IfStatement\",\"test\":{\"range\":[15600,15632],\"loc\":{\"start\":{\"line\":475,\"column\":19},\"end\":{\"line\":475,\"column\":51}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[15600,15614],\"loc\":{\"start\":{\"line\":475,\"column\":19},\"end\":{\"line\":475,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[15600,15606],\"loc\":{\"start\":{\"line\":475,\"column\":19},\"end\":{\"line\":475,\"column\":25}},\"type\":\"Literal\",\"value\":55296,\"raw\":\"0xD800\"},\"right\":{\"range\":[15610,15614],\"loc\":{\"start\":{\"line\":475,\"column\":29},\"end\":{\"line\":475,\"column\":33}},\"type\":\"Identifier\",\"name\":\"code\"}},\"right\":{\"range\":[15618,15632],\"loc\":{\"start\":{\"line\":475,\"column\":37},\"end\":{\"line\":475,\"column\":51}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[15618,15622],\"loc\":{\"start\":{\"line\":475,\"column\":37},\"end\":{\"line\":475,\"column\":41}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15626,15632],\"loc\":{\"start\":{\"line\":475,\"column\":45},\"end\":{\"line\":475,\"column\":51}},\"type\":\"Literal\",\"value\":56319,\"raw\":\"0xDBFF\"}}},\"consequent\":{\"range\":[15634,15927],\"loc\":{\"start\":{\"line\":475,\"column\":53},\"end\":{\"line\":479,\"column\":11}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[15787,15851],\"loc\":{\"start\":{\"line\":477,\"column\":12},\"end\":{\"line\":477,\"column\":76}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[15787,15850],\"loc\":{\"start\":{\"line\":477,\"column\":12},\"end\":{\"line\":477,\"column\":75}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[15787,15791],\"loc\":{\"start\":{\"line\":477,\"column\":12},\"end\":{\"line\":477,\"column\":16}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15794,15850],\"loc\":{\"start\":{\"line\":477,\"column\":19},\"end\":{\"line\":477,\"column\":75}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15794,15842],\"loc\":{\"start\":{\"line\":477,\"column\":19},\"end\":{\"line\":477,\"column\":67}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15795,15814],\"loc\":{\"start\":{\"line\":477,\"column\":20},\"end\":{\"line\":477,\"column\":39}},\"type\":\"BinaryExpression\",\"operator\":\"*\",\"left\":{\"range\":[15796,15807],\"loc\":{\"start\":{\"line\":477,\"column\":21},\"end\":{\"line\":477,\"column\":32}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[15796,15800],\"loc\":{\"start\":{\"line\":477,\"column\":21},\"end\":{\"line\":477,\"column\":25}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15801,15807],\"loc\":{\"start\":{\"line\":477,\"column\":26},\"end\":{\"line\":477,\"column\":32}},\"type\":\"Literal\",\"value\":55296,\"raw\":\"0xD800\"}},\"right\":{\"range\":[15809,15814],\"loc\":{\"start\":{\"line\":477,\"column\":34},\"end\":{\"line\":477,\"column\":39}},\"type\":\"Literal\",\"value\":1024,\"raw\":\"0x400\"}},\"right\":{\"range\":[15817,15841],\"loc\":{\"start\":{\"line\":477,\"column\":42},\"end\":{\"line\":477,\"column\":66}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[15817,15834],\"loc\":{\"start\":{\"line\":477,\"column\":42},\"end\":{\"line\":477,\"column\":59}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15817,15829],\"loc\":{\"start\":{\"line\":477,\"column\":42},\"end\":{\"line\":477,\"column\":54}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15817,15818],\"loc\":{\"start\":{\"line\":477,\"column\":42},\"end\":{\"line\":477,\"column\":43}},\"type\":\"Identifier\",\"name\":\"s\"},\"property\":{\"range\":[15819,15829],\"loc\":{\"start\":{\"line\":477,\"column\":44},\"end\":{\"line\":477,\"column\":54}},\"type\":\"Identifier\",\"name\":\"charCodeAt\"}},\"arguments\":[{\"range\":[15830,15833],\"loc\":{\"start\":{\"line\":477,\"column\":55},\"end\":{\"line\":477,\"column\":58}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[15832,15833],\"loc\":{\"start\":{\"line\":477,\"column\":57},\"end\":{\"line\":477,\"column\":58}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":true}]},\"right\":{\"range\":[15835,15841],\"loc\":{\"start\":{\"line\":477,\"column\":60},\"end\":{\"line\":477,\"column\":66}},\"type\":\"Literal\",\"value\":56320,\"raw\":\"0xDC00\"}}},\"right\":{\"range\":[15843,15850],\"loc\":{\"start\":{\"line\":477,\"column\":68},\"end\":{\"line\":477,\"column\":75}},\"type\":\"Literal\",\"value\":65536,\"raw\":\"0x10000\"}}}},{\"range\":[15864,15915],\"loc\":{\"start\":{\"line\":478,\"column\":12},\"end\":{\"line\":478,\"column\":63}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[15864,15914],\"loc\":{\"start\":{\"line\":478,\"column\":12},\"end\":{\"line\":478,\"column\":62}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[15864,15867],\"loc\":{\"start\":{\"line\":478,\"column\":12},\"end\":{\"line\":478,\"column\":15}},\"type\":\"Identifier\",\"name\":\"asc\"},\"right\":{\"range\":[15871,15914],\"loc\":{\"start\":{\"line\":478,\"column\":19},\"end\":{\"line\":478,\"column\":62}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15871,15876],\"loc\":{\"start\":{\"line\":478,\"column\":19},\"end\":{\"line\":478,\"column\":24}},\"type\":\"Literal\",\"value\":\"\\\\U\",\"raw\":\"\\\"\\\\\\\\U\\\"\"},\"right\":{\"range\":[15879,15914],\"loc\":{\"start\":{\"line\":478,\"column\":27},\"end\":{\"line\":478,\"column\":62}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15879,15910],\"loc\":{\"start\":{\"line\":478,\"column\":27},\"end\":{\"line\":478,\"column\":58}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15880,15903],\"loc\":{\"start\":{\"line\":478,\"column\":28},\"end\":{\"line\":478,\"column\":51}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15880,15885],\"loc\":{\"start\":{\"line\":478,\"column\":28},\"end\":{\"line\":478,\"column\":33}},\"type\":\"Literal\",\"value\":\"000\",\"raw\":\"\\\"000\\\"\"},\"right\":{\"range\":[15886,15903],\"loc\":{\"start\":{\"line\":478,\"column\":34},\"end\":{\"line\":478,\"column\":51}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15886,15899],\"loc\":{\"start\":{\"line\":478,\"column\":34},\"end\":{\"line\":478,\"column\":47}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15886,15890],\"loc\":{\"start\":{\"line\":478,\"column\":34},\"end\":{\"line\":478,\"column\":38}},\"type\":\"Identifier\",\"name\":\"code\"},\"property\":{\"range\":[15891,15899],\"loc\":{\"start\":{\"line\":478,\"column\":39},\"end\":{\"line\":478,\"column\":47}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[{\"range\":[15900,15902],\"loc\":{\"start\":{\"line\":478,\"column\":48},\"end\":{\"line\":478,\"column\":50}},\"type\":\"Literal\",\"value\":16,\"raw\":\"16\"}]}},\"property\":{\"range\":[15905,15910],\"loc\":{\"start\":{\"line\":478,\"column\":53},\"end\":{\"line\":478,\"column\":58}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[15911,15913],\"loc\":{\"start\":{\"line\":478,\"column\":59},\"end\":{\"line\":478,\"column\":61}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[15912,15913],\"loc\":{\"start\":{\"line\":478,\"column\":60},\"end\":{\"line\":478,\"column\":61}},\"type\":\"Literal\",\"value\":8,\"raw\":\"8\"},\"prefix\":true}]}}}}]},\"alternate\":{\"range\":[15933,16107],\"loc\":{\"start\":{\"line\":479,\"column\":17},\"end\":{\"line\":481,\"column\":15}},\"type\":\"IfStatement\",\"test\":{\"range\":[15937,15951],\"loc\":{\"start\":{\"line\":479,\"column\":21},\"end\":{\"line\":479,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[15937,15941],\"loc\":{\"start\":{\"line\":479,\"column\":21},\"end\":{\"line\":479,\"column\":25}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[15945,15951],\"loc\":{\"start\":{\"line\":479,\"column\":29},\"end\":{\"line\":479,\"column\":35}},\"type\":\"Literal\",\"value\":65535,\"raw\":\"0xFFFF\"}},\"consequent\":{\"range\":[15953,16002],\"loc\":{\"start\":{\"line\":479,\"column\":37},\"end\":{\"line\":479,\"column\":86}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[15953,16001],\"loc\":{\"start\":{\"line\":479,\"column\":37},\"end\":{\"line\":479,\"column\":85}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[15953,15956],\"loc\":{\"start\":{\"line\":479,\"column\":37},\"end\":{\"line\":479,\"column\":40}},\"type\":\"Identifier\",\"name\":\"asc\"},\"right\":{\"range\":[15960,16001],\"loc\":{\"start\":{\"line\":479,\"column\":44},\"end\":{\"line\":479,\"column\":85}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15960,15965],\"loc\":{\"start\":{\"line\":479,\"column\":44},\"end\":{\"line\":479,\"column\":49}},\"type\":\"Literal\",\"value\":\"\\\\u\",\"raw\":\"\\\"\\\\\\\\u\\\"\"},\"right\":{\"range\":[15968,16001],\"loc\":{\"start\":{\"line\":479,\"column\":52},\"end\":{\"line\":479,\"column\":85}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15968,15997],\"loc\":{\"start\":{\"line\":479,\"column\":52},\"end\":{\"line\":479,\"column\":81}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15969,15990],\"loc\":{\"start\":{\"line\":479,\"column\":53},\"end\":{\"line\":479,\"column\":74}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[15969,15972],\"loc\":{\"start\":{\"line\":479,\"column\":53},\"end\":{\"line\":479,\"column\":56}},\"type\":\"Literal\",\"value\":\"0\",\"raw\":\"\\\"0\\\"\"},\"right\":{\"range\":[15973,15990],\"loc\":{\"start\":{\"line\":479,\"column\":57},\"end\":{\"line\":479,\"column\":74}},\"type\":\"CallExpression\",\"callee\":{\"range\":[15973,15986],\"loc\":{\"start\":{\"line\":479,\"column\":57},\"end\":{\"line\":479,\"column\":70}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[15973,15977],\"loc\":{\"start\":{\"line\":479,\"column\":57},\"end\":{\"line\":479,\"column\":61}},\"type\":\"Identifier\",\"name\":\"code\"},\"property\":{\"range\":[15978,15986],\"loc\":{\"start\":{\"line\":479,\"column\":62},\"end\":{\"line\":479,\"column\":70}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[{\"range\":[15987,15989],\"loc\":{\"start\":{\"line\":479,\"column\":71},\"end\":{\"line\":479,\"column\":73}},\"type\":\"Literal\",\"value\":16,\"raw\":\"16\"}]}},\"property\":{\"range\":[15992,15997],\"loc\":{\"start\":{\"line\":479,\"column\":76},\"end\":{\"line\":479,\"column\":81}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[15998,16000],\"loc\":{\"start\":{\"line\":479,\"column\":82},\"end\":{\"line\":479,\"column\":84}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[15999,16000],\"loc\":{\"start\":{\"line\":479,\"column\":83},\"end\":{\"line\":479,\"column\":84}},\"type\":\"Literal\",\"value\":4,\"raw\":\"4\"},\"prefix\":true}]}}}},\"alternate\":{\"range\":[16018,16107],\"loc\":{\"start\":{\"line\":480,\"column\":15},\"end\":{\"line\":481,\"column\":15}},\"type\":\"IfStatement\",\"test\":{\"range\":[16022,16038],\"loc\":{\"start\":{\"line\":480,\"column\":19},\"end\":{\"line\":480,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[16022,16026],\"loc\":{\"start\":{\"line\":480,\"column\":19},\"end\":{\"line\":480,\"column\":23}},\"type\":\"Identifier\",\"name\":\"code\"},\"right\":{\"range\":[16030,16038],\"loc\":{\"start\":{\"line\":480,\"column\":27},\"end\":{\"line\":480,\"column\":35}},\"type\":\"Literal\",\"value\":1114111,\"raw\":\"0x10FFFF\"}},\"consequent\":{\"range\":[16040,16091],\"loc\":{\"start\":{\"line\":480,\"column\":37},\"end\":{\"line\":480,\"column\":88}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[16040,16090],\"loc\":{\"start\":{\"line\":480,\"column\":37},\"end\":{\"line\":480,\"column\":87}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[16040,16043],\"loc\":{\"start\":{\"line\":480,\"column\":37},\"end\":{\"line\":480,\"column\":40}},\"type\":\"Identifier\",\"name\":\"asc\"},\"right\":{\"range\":[16047,16090],\"loc\":{\"start\":{\"line\":480,\"column\":44},\"end\":{\"line\":480,\"column\":87}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[16047,16052],\"loc\":{\"start\":{\"line\":480,\"column\":44},\"end\":{\"line\":480,\"column\":49}},\"type\":\"Literal\",\"value\":\"\\\\U\",\"raw\":\"\\\"\\\\\\\\U\\\"\"},\"right\":{\"range\":[16055,16090],\"loc\":{\"start\":{\"line\":480,\"column\":52},\"end\":{\"line\":480,\"column\":87}},\"type\":\"CallExpression\",\"callee\":{\"range\":[16055,16086],\"loc\":{\"start\":{\"line\":480,\"column\":52},\"end\":{\"line\":480,\"column\":83}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16056,16079],\"loc\":{\"start\":{\"line\":480,\"column\":53},\"end\":{\"line\":480,\"column\":76}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[16056,16061],\"loc\":{\"start\":{\"line\":480,\"column\":53},\"end\":{\"line\":480,\"column\":58}},\"type\":\"Literal\",\"value\":\"000\",\"raw\":\"\\\"000\\\"\"},\"right\":{\"range\":[16062,16079],\"loc\":{\"start\":{\"line\":480,\"column\":59},\"end\":{\"line\":480,\"column\":76}},\"type\":\"CallExpression\",\"callee\":{\"range\":[16062,16075],\"loc\":{\"start\":{\"line\":480,\"column\":59},\"end\":{\"line\":480,\"column\":72}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16062,16066],\"loc\":{\"start\":{\"line\":480,\"column\":59},\"end\":{\"line\":480,\"column\":63}},\"type\":\"Identifier\",\"name\":\"code\"},\"property\":{\"range\":[16067,16075],\"loc\":{\"start\":{\"line\":480,\"column\":64},\"end\":{\"line\":480,\"column\":72}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[{\"range\":[16076,16078],\"loc\":{\"start\":{\"line\":480,\"column\":73},\"end\":{\"line\":480,\"column\":75}},\"type\":\"Literal\",\"value\":16,\"raw\":\"16\"}]}},\"property\":{\"range\":[16081,16086],\"loc\":{\"start\":{\"line\":480,\"column\":78},\"end\":{\"line\":480,\"column\":83}},\"type\":\"Identifier\",\"name\":\"slice\"}},\"arguments\":[{\"range\":[16087,16089],\"loc\":{\"start\":{\"line\":480,\"column\":84},\"end\":{\"line\":480,\"column\":86}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[16088,16089],\"loc\":{\"start\":{\"line\":480,\"column\":85},\"end\":{\"line\":480,\"column\":86}},\"type\":\"Literal\",\"value\":8,\"raw\":\"8\"},\"prefix\":true}]}}}},\"alternate\":{\"range\":[16106,16107],\"loc\":{\"start\":{\"line\":481,\"column\":14},\"end\":{\"line\":481,\"column\":15}},\"type\":\"EmptyStatement\"}}}}}}]}},{\"range\":[16262,16273],\"loc\":{\"start\":{\"line\":483,\"column\":8},\"end\":{\"line\":483,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[16269,16272],\"loc\":{\"start\":{\"line\":483,\"column\":15},\"end\":{\"line\":483,\"column\":18}},\"type\":\"Identifier\",\"name\":\"asc\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[16289,16864],\"loc\":{\"start\":{\"line\":485,\"column\":6},\"end\":{\"line\":494,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[16289,16293],\"loc\":{\"start\":{\"line\":485,\"column\":6},\"end\":{\"line\":485,\"column\":10}},\"type\":\"Identifier\",\"name\":\"bool\"},\"computed\":false,\"value\":{\"range\":[16295,16864],\"loc\":{\"start\":{\"line\":485,\"column\":12},\"end\":{\"line\":494,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[16304,16305],\"loc\":{\"start\":{\"line\":485,\"column\":21},\"end\":{\"line\":485,\"column\":22}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[16307,16864],\"loc\":{\"start\":{\"line\":485,\"column\":24},\"end\":{\"line\":494,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[16317,16817],\"loc\":{\"start\":{\"line\":486,\"column\":8},\"end\":{\"line\":493,\"column\":92}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[16324,16816],\"loc\":{\"start\":{\"line\":486,\"column\":15},\"end\":{\"line\":493,\"column\":91}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[16326,16815],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":493,\"column\":90}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16326,16684],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":492,\"column\":69}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16326,16507],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":490,\"column\":31}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16326,16464],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":489,\"column\":24}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16326,16427],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":488,\"column\":28}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16326,16387],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":487,\"column\":27}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16326,16341],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":486,\"column\":32}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16326,16327],\"loc\":{\"start\":{\"line\":486,\"column\":17},\"end\":{\"line\":486,\"column\":18}},\"type\":\"Identifier\",\"name\":\"x\"},\"right\":{\"range\":[16332,16341],\"loc\":{\"start\":{\"line\":486,\"column\":23},\"end\":{\"line\":486,\"column\":32}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"right\":{\"range\":[16377,16387],\"loc\":{\"start\":{\"line\":487,\"column\":17},\"end\":{\"line\":487,\"column\":27}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16377,16378],\"loc\":{\"start\":{\"line\":487,\"column\":17},\"end\":{\"line\":487,\"column\":18}},\"type\":\"Identifier\",\"name\":\"x\"},\"right\":{\"range\":[16383,16387],\"loc\":{\"start\":{\"line\":487,\"column\":23},\"end\":{\"line\":487,\"column\":27}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}}},\"right\":{\"range\":[16416,16427],\"loc\":{\"start\":{\"line\":488,\"column\":17},\"end\":{\"line\":488,\"column\":28}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16416,16417],\"loc\":{\"start\":{\"line\":488,\"column\":17},\"end\":{\"line\":488,\"column\":18}},\"type\":\"Identifier\",\"name\":\"x\"},\"right\":{\"range\":[16422,16427],\"loc\":{\"start\":{\"line\":488,\"column\":23},\"end\":{\"line\":488,\"column\":28}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}}},\"right\":{\"range\":[16457,16464],\"loc\":{\"start\":{\"line\":489,\"column\":17},\"end\":{\"line\":489,\"column\":24}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16457,16458],\"loc\":{\"start\":{\"line\":489,\"column\":17},\"end\":{\"line\":489,\"column\":18}},\"type\":\"Identifier\",\"name\":\"x\"},\"right\":{\"range\":[16463,16464],\"loc\":{\"start\":{\"line\":489,\"column\":23},\"end\":{\"line\":489,\"column\":24}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}},\"right\":{\"range\":[16493,16507],\"loc\":{\"start\":{\"line\":490,\"column\":17},\"end\":{\"line\":490,\"column\":31}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16493,16501],\"loc\":{\"start\":{\"line\":490,\"column\":17},\"end\":{\"line\":490,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16493,16494],\"loc\":{\"start\":{\"line\":490,\"column\":17},\"end\":{\"line\":490,\"column\":18}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[16495,16501],\"loc\":{\"start\":{\"line\":490,\"column\":19},\"end\":{\"line\":490,\"column\":25}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[16506,16507],\"loc\":{\"start\":{\"line\":490,\"column\":30},\"end\":{\"line\":490,\"column\":31}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}},\"right\":{\"range\":[16633,16683],\"loc\":{\"start\":{\"line\":492,\"column\":18},\"end\":{\"line\":492,\"column\":68}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[16633,16657],\"loc\":{\"start\":{\"line\":492,\"column\":18},\"end\":{\"line\":492,\"column\":42}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[16633,16643],\"loc\":{\"start\":{\"line\":492,\"column\":18},\"end\":{\"line\":492,\"column\":28}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16633,16634],\"loc\":{\"start\":{\"line\":492,\"column\":18},\"end\":{\"line\":492,\"column\":19}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[16635,16643],\"loc\":{\"start\":{\"line\":492,\"column\":20},\"end\":{\"line\":492,\"column\":28}},\"type\":\"Identifier\",\"name\":\"__bool__\"}},\"right\":{\"range\":[16648,16657],\"loc\":{\"start\":{\"line\":492,\"column\":33},\"end\":{\"line\":492,\"column\":42}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"right\":{\"range\":[16661,16683],\"loc\":{\"start\":{\"line\":492,\"column\":46},\"end\":{\"line\":492,\"column\":68}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16661,16673],\"loc\":{\"start\":{\"line\":492,\"column\":46},\"end\":{\"line\":492,\"column\":58}},\"type\":\"CallExpression\",\"callee\":{\"range\":[16661,16671],\"loc\":{\"start\":{\"line\":492,\"column\":46},\"end\":{\"line\":492,\"column\":56}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16661,16662],\"loc\":{\"start\":{\"line\":492,\"column\":46},\"end\":{\"line\":492,\"column\":47}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[16663,16671],\"loc\":{\"start\":{\"line\":492,\"column\":48},\"end\":{\"line\":492,\"column\":56}},\"type\":\"Identifier\",\"name\":\"__bool__\"}},\"arguments\":[]},\"right\":{\"range\":[16678,16683],\"loc\":{\"start\":{\"line\":492,\"column\":63},\"end\":{\"line\":492,\"column\":68}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}}}},\"right\":{\"range\":[16743,16814],\"loc\":{\"start\":{\"line\":493,\"column\":18},\"end\":{\"line\":493,\"column\":89}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[16743,16766],\"loc\":{\"start\":{\"line\":493,\"column\":18},\"end\":{\"line\":493,\"column\":41}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[16743,16752],\"loc\":{\"start\":{\"line\":493,\"column\":18},\"end\":{\"line\":493,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16743,16744],\"loc\":{\"start\":{\"line\":493,\"column\":18},\"end\":{\"line\":493,\"column\":19}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[16745,16752],\"loc\":{\"start\":{\"line\":493,\"column\":20},\"end\":{\"line\":493,\"column\":27}},\"type\":\"Identifier\",\"name\":\"__len__\"}},\"right\":{\"range\":[16757,16766],\"loc\":{\"start\":{\"line\":493,\"column\":32},\"end\":{\"line\":493,\"column\":41}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"right\":{\"range\":[16771,16813],\"loc\":{\"start\":{\"line\":493,\"column\":46},\"end\":{\"line\":493,\"column\":88}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[16771,16792],\"loc\":{\"start\":{\"line\":493,\"column\":46},\"end\":{\"line\":493,\"column\":67}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16771,16782],\"loc\":{\"start\":{\"line\":493,\"column\":46},\"end\":{\"line\":493,\"column\":57}},\"type\":\"CallExpression\",\"callee\":{\"range\":[16771,16780],\"loc\":{\"start\":{\"line\":493,\"column\":46},\"end\":{\"line\":493,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16771,16772],\"loc\":{\"start\":{\"line\":493,\"column\":46},\"end\":{\"line\":493,\"column\":47}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[16773,16780],\"loc\":{\"start\":{\"line\":493,\"column\":48},\"end\":{\"line\":493,\"column\":55}},\"type\":\"Identifier\",\"name\":\"__len__\"}},\"arguments\":[]},\"right\":{\"range\":[16787,16792],\"loc\":{\"start\":{\"line\":493,\"column\":62},\"end\":{\"line\":493,\"column\":67}},\"type\":\"Literal\",\"value\":false,\"raw\":\"false\"}},\"right\":{\"range\":[16796,16813],\"loc\":{\"start\":{\"line\":493,\"column\":71},\"end\":{\"line\":493,\"column\":88}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[16796,16807],\"loc\":{\"start\":{\"line\":493,\"column\":71},\"end\":{\"line\":493,\"column\":82}},\"type\":\"CallExpression\",\"callee\":{\"range\":[16796,16805],\"loc\":{\"start\":{\"line\":493,\"column\":71},\"end\":{\"line\":493,\"column\":80}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16796,16797],\"loc\":{\"start\":{\"line\":493,\"column\":71},\"end\":{\"line\":493,\"column\":72}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[16798,16805],\"loc\":{\"start\":{\"line\":493,\"column\":73},\"end\":{\"line\":493,\"column\":80}},\"type\":\"Identifier\",\"name\":\"__len__\"}},\"arguments\":[]},\"right\":{\"range\":[16812,16813],\"loc\":{\"start\":{\"line\":493,\"column\":87},\"end\":{\"line\":493,\"column\":88}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}}},\"prefix\":true}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[16872,16983],\"loc\":{\"start\":{\"line\":495,\"column\":6},\"end\":{\"line\":497,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[16872,16875],\"loc\":{\"start\":{\"line\":495,\"column\":6},\"end\":{\"line\":495,\"column\":9}},\"type\":\"Identifier\",\"name\":\"chr\"},\"computed\":false,\"value\":{\"range\":[16877,16983],\"loc\":{\"start\":{\"line\":495,\"column\":11},\"end\":{\"line\":497,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[16886,16887],\"loc\":{\"start\":{\"line\":495,\"column\":20},\"end\":{\"line\":495,\"column\":21}},\"type\":\"Identifier\",\"name\":\"i\"}],\"defaults\":[],\"body\":{\"range\":[16889,16983],\"loc\":{\"start\":{\"line\":495,\"column\":23},\"end\":{\"line\":497,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[16899,16929],\"loc\":{\"start\":{\"line\":496,\"column\":8},\"end\":{\"line\":496,\"column\":38}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[16906,16928],\"loc\":{\"start\":{\"line\":496,\"column\":15},\"end\":{\"line\":496,\"column\":37}},\"type\":\"CallExpression\",\"callee\":{\"range\":[16906,16925],\"loc\":{\"start\":{\"line\":496,\"column\":15},\"end\":{\"line\":496,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[16906,16912],\"loc\":{\"start\":{\"line\":496,\"column\":15},\"end\":{\"line\":496,\"column\":21}},\"type\":\"Identifier\",\"name\":\"String\"},\"property\":{\"range\":[16913,16925],\"loc\":{\"start\":{\"line\":496,\"column\":22},\"end\":{\"line\":496,\"column\":34}},\"type\":\"Identifier\",\"name\":\"fromCharCode\"}},\"arguments\":[{\"range\":[16926,16927],\"loc\":{\"start\":{\"line\":496,\"column\":35},\"end\":{\"line\":496,\"column\":36}},\"type\":\"Identifier\",\"name\":\"i\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[16991,17089],\"loc\":{\"start\":{\"line\":498,\"column\":6},\"end\":{\"line\":500,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[16991,16997],\"loc\":{\"start\":{\"line\":498,\"column\":6},\"end\":{\"line\":498,\"column\":12}},\"type\":\"Identifier\",\"name\":\"divmod\"},\"computed\":false,\"value\":{\"range\":[16999,17089],\"loc\":{\"start\":{\"line\":498,\"column\":14},\"end\":{\"line\":500,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[17008,17009],\"loc\":{\"start\":{\"line\":498,\"column\":23},\"end\":{\"line\":498,\"column\":24}},\"type\":\"Identifier\",\"name\":\"a\"},{\"range\":[17011,17012],\"loc\":{\"start\":{\"line\":498,\"column\":26},\"end\":{\"line\":498,\"column\":27}},\"type\":\"Identifier\",\"name\":\"b\"}],\"defaults\":[],\"body\":{\"range\":[17014,17089],\"loc\":{\"start\":{\"line\":498,\"column\":29},\"end\":{\"line\":500,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[17024,17081],\"loc\":{\"start\":{\"line\":499,\"column\":8},\"end\":{\"line\":499,\"column\":65}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17031,17080],\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":64}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17031,17058],\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17031,17052],\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":36}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17031,17044],\"loc\":{\"start\":{\"line\":499,\"column\":15},\"end\":{\"line\":499,\"column\":28}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[17045,17052],\"loc\":{\"start\":{\"line\":499,\"column\":29},\"end\":{\"line\":499,\"column\":36}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[17053,17058],\"loc\":{\"start\":{\"line\":499,\"column\":37},\"end\":{\"line\":499,\"column\":42}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[{\"range\":[17059,17074],\"loc\":{\"start\":{\"line\":499,\"column\":43},\"end\":{\"line\":499,\"column\":58}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17059,17069],\"loc\":{\"start\":{\"line\":499,\"column\":43},\"end\":{\"line\":499,\"column\":53}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17059,17063],\"loc\":{\"start\":{\"line\":499,\"column\":43},\"end\":{\"line\":499,\"column\":47}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[17064,17069],\"loc\":{\"start\":{\"line\":499,\"column\":48},\"end\":{\"line\":499,\"column\":53}},\"type\":\"Identifier\",\"name\":\"floor\"}},\"arguments\":[{\"range\":[17070,17073],\"loc\":{\"start\":{\"line\":499,\"column\":54},\"end\":{\"line\":499,\"column\":57}},\"type\":\"BinaryExpression\",\"operator\":\"/\",\"left\":{\"range\":[17070,17071],\"loc\":{\"start\":{\"line\":499,\"column\":54},\"end\":{\"line\":499,\"column\":55}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[17072,17073],\"loc\":{\"start\":{\"line\":499,\"column\":56},\"end\":{\"line\":499,\"column\":57}},\"type\":\"Identifier\",\"name\":\"b\"}}]},{\"range\":[17076,17079],\"loc\":{\"start\":{\"line\":499,\"column\":60},\"end\":{\"line\":499,\"column\":63}},\"type\":\"BinaryExpression\",\"operator\":\"%\",\"left\":{\"range\":[17076,17077],\"loc\":{\"start\":{\"line\":499,\"column\":60},\"end\":{\"line\":499,\"column\":61}},\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"range\":[17078,17079],\"loc\":{\"start\":{\"line\":499,\"column\":62},\"end\":{\"line\":499,\"column\":63}},\"type\":\"Identifier\",\"name\":\"b\"}}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[17097,17340],\"loc\":{\"start\":{\"line\":501,\"column\":6},\"end\":{\"line\":506,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[17097,17106],\"loc\":{\"start\":{\"line\":501,\"column\":6},\"end\":{\"line\":501,\"column\":15}},\"type\":\"Identifier\",\"name\":\"enumerate\"},\"computed\":false,\"value\":{\"range\":[17108,17340],\"loc\":{\"start\":{\"line\":501,\"column\":17},\"end\":{\"line\":506,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[17117,17125],\"loc\":{\"start\":{\"line\":501,\"column\":26},\"end\":{\"line\":501,\"column\":34}},\"type\":\"Identifier\",\"name\":\"iterable\"},{\"range\":[17127,17132],\"loc\":{\"start\":{\"line\":501,\"column\":36},\"end\":{\"line\":501,\"column\":41}},\"type\":\"Identifier\",\"name\":\"start\"}],\"defaults\":[],\"body\":{\"range\":[17134,17340],\"loc\":{\"start\":{\"line\":501,\"column\":43},\"end\":{\"line\":506,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[17144,17163],\"loc\":{\"start\":{\"line\":502,\"column\":8},\"end\":{\"line\":502,\"column\":27}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[17144,17162],\"loc\":{\"start\":{\"line\":502,\"column\":8},\"end\":{\"line\":502,\"column\":26}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[17144,17149],\"loc\":{\"start\":{\"line\":502,\"column\":8},\"end\":{\"line\":502,\"column\":13}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[17152,17162],\"loc\":{\"start\":{\"line\":502,\"column\":16},\"end\":{\"line\":502,\"column\":26}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[17152,17157],\"loc\":{\"start\":{\"line\":502,\"column\":16},\"end\":{\"line\":502,\"column\":21}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[17161,17162],\"loc\":{\"start\":{\"line\":502,\"column\":25},\"end\":{\"line\":502,\"column\":26}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}},{\"range\":[17172,17215],\"loc\":{\"start\":{\"line\":503,\"column\":8},\"end\":{\"line\":503,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[17176,17214],\"loc\":{\"start\":{\"line\":503,\"column\":12},\"end\":{\"line\":503,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[17176,17179],\"loc\":{\"start\":{\"line\":503,\"column\":12},\"end\":{\"line\":503,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[17182,17214],\"loc\":{\"start\":{\"line\":503,\"column\":18},\"end\":{\"line\":503,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[17186,17212],\"loc\":{\"start\":{\"line\":503,\"column\":22},\"end\":{\"line\":503,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17186,17207],\"loc\":{\"start\":{\"line\":503,\"column\":22},\"end\":{\"line\":503,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17186,17199],\"loc\":{\"start\":{\"line\":503,\"column\":22},\"end\":{\"line\":503,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[17200,17207],\"loc\":{\"start\":{\"line\":503,\"column\":36},\"end\":{\"line\":503,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[17208,17212],\"loc\":{\"start\":{\"line\":503,\"column\":44},\"end\":{\"line\":503,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[17224,17312],\"loc\":{\"start\":{\"line\":504,\"column\":8},\"end\":{\"line\":504,\"column\":96}},\"type\":\"ForInStatement\",\"left\":{\"range\":[17229,17234],\"loc\":{\"start\":{\"line\":504,\"column\":13},\"end\":{\"line\":504,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[17233,17234],\"loc\":{\"start\":{\"line\":504,\"column\":17},\"end\":{\"line\":504,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[17233,17234],\"loc\":{\"start\":{\"line\":504,\"column\":17},\"end\":{\"line\":504,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[17238,17246],\"loc\":{\"start\":{\"line\":504,\"column\":22},\"end\":{\"line\":504,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[17248,17312],\"loc\":{\"start\":{\"line\":504,\"column\":32},\"end\":{\"line\":504,\"column\":96}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[17248,17311],\"loc\":{\"start\":{\"line\":504,\"column\":32},\"end\":{\"line\":504,\"column\":95}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17248,17256],\"loc\":{\"start\":{\"line\":504,\"column\":32},\"end\":{\"line\":504,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17248,17251],\"loc\":{\"start\":{\"line\":504,\"column\":32},\"end\":{\"line\":504,\"column\":35}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[17252,17256],\"loc\":{\"start\":{\"line\":504,\"column\":36},\"end\":{\"line\":504,\"column\":40}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[17257,17310],\"loc\":{\"start\":{\"line\":504,\"column\":41},\"end\":{\"line\":504,\"column\":94}},\"type\":\"NewExpression\",\"callee\":{\"range\":[17261,17288],\"loc\":{\"start\":{\"line\":504,\"column\":45},\"end\":{\"line\":504,\"column\":72}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17261,17282],\"loc\":{\"start\":{\"line\":504,\"column\":45},\"end\":{\"line\":504,\"column\":66}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17261,17274],\"loc\":{\"start\":{\"line\":504,\"column\":45},\"end\":{\"line\":504,\"column\":58}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[17275,17282],\"loc\":{\"start\":{\"line\":504,\"column\":59},\"end\":{\"line\":504,\"column\":66}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[17283,17288],\"loc\":{\"start\":{\"line\":504,\"column\":67},\"end\":{\"line\":504,\"column\":72}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[{\"range\":[17289,17296],\"loc\":{\"start\":{\"line\":504,\"column\":73},\"end\":{\"line\":504,\"column\":80}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[17289,17294],\"loc\":{\"start\":{\"line\":504,\"column\":73},\"end\":{\"line\":504,\"column\":78}},\"type\":\"Identifier\",\"name\":\"start\"},\"prefix\":false},{\"range\":[17298,17309],\"loc\":{\"start\":{\"line\":504,\"column\":82},\"end\":{\"line\":504,\"column\":93}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[17298,17306],\"loc\":{\"start\":{\"line\":504,\"column\":82},\"end\":{\"line\":504,\"column\":90}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[17307,17308],\"loc\":{\"start\":{\"line\":504,\"column\":91},\"end\":{\"line\":504,\"column\":92}},\"type\":\"Identifier\",\"name\":\"i\"}}]}]}},\"each\":false},{\"range\":[17321,17332],\"loc\":{\"start\":{\"line\":505,\"column\":8},\"end\":{\"line\":505,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17328,17331],\"loc\":{\"start\":{\"line\":505,\"column\":15},\"end\":{\"line\":505,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[17348,17585],\"loc\":{\"start\":{\"line\":507,\"column\":6},\"end\":{\"line\":512,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[17348,17354],\"loc\":{\"start\":{\"line\":507,\"column\":6},\"end\":{\"line\":507,\"column\":12}},\"type\":\"Identifier\",\"name\":\"filter\"},\"computed\":false,\"value\":{\"range\":[17356,17585],\"loc\":{\"start\":{\"line\":507,\"column\":14},\"end\":{\"line\":512,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[17365,17367],\"loc\":{\"start\":{\"line\":507,\"column\":23},\"end\":{\"line\":507,\"column\":25}},\"type\":\"Identifier\",\"name\":\"fn\"},{\"range\":[17369,17377],\"loc\":{\"start\":{\"line\":507,\"column\":27},\"end\":{\"line\":507,\"column\":35}},\"type\":\"Identifier\",\"name\":\"iterable\"}],\"defaults\":[],\"body\":{\"range\":[17379,17585],\"loc\":{\"start\":{\"line\":507,\"column\":37},\"end\":{\"line\":512,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[17389,17429],\"loc\":{\"start\":{\"line\":508,\"column\":8},\"end\":{\"line\":508,\"column\":48}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[17389,17428],\"loc\":{\"start\":{\"line\":508,\"column\":8},\"end\":{\"line\":508,\"column\":47}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[17389,17391],\"loc\":{\"start\":{\"line\":508,\"column\":8},\"end\":{\"line\":508,\"column\":10}},\"type\":\"Identifier\",\"name\":\"fn\"},\"right\":{\"range\":[17394,17428],\"loc\":{\"start\":{\"line\":508,\"column\":13},\"end\":{\"line\":508,\"column\":47}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[17394,17396],\"loc\":{\"start\":{\"line\":508,\"column\":13},\"end\":{\"line\":508,\"column\":15}},\"type\":\"Identifier\",\"name\":\"fn\"},\"right\":{\"range\":[17400,17428],\"loc\":{\"start\":{\"line\":508,\"column\":19},\"end\":{\"line\":508,\"column\":47}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[17412,17428],\"loc\":{\"start\":{\"line\":508,\"column\":31},\"end\":{\"line\":508,\"column\":47}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[17414,17426],\"loc\":{\"start\":{\"line\":508,\"column\":33},\"end\":{\"line\":508,\"column\":45}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17421,17425],\"loc\":{\"start\":{\"line\":508,\"column\":40},\"end\":{\"line\":508,\"column\":44}},\"type\":\"Literal\",\"value\":true,\"raw\":\"true\"}}]},\"generator\":false,\"expression\":false}}}},{\"range\":[17438,17481],\"loc\":{\"start\":{\"line\":509,\"column\":8},\"end\":{\"line\":509,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[17442,17480],\"loc\":{\"start\":{\"line\":509,\"column\":12},\"end\":{\"line\":509,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[17442,17445],\"loc\":{\"start\":{\"line\":509,\"column\":12},\"end\":{\"line\":509,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[17448,17480],\"loc\":{\"start\":{\"line\":509,\"column\":18},\"end\":{\"line\":509,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[17452,17478],\"loc\":{\"start\":{\"line\":509,\"column\":22},\"end\":{\"line\":509,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17452,17473],\"loc\":{\"start\":{\"line\":509,\"column\":22},\"end\":{\"line\":509,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17452,17465],\"loc\":{\"start\":{\"line\":509,\"column\":22},\"end\":{\"line\":509,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[17466,17473],\"loc\":{\"start\":{\"line\":509,\"column\":36},\"end\":{\"line\":509,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[17474,17478],\"loc\":{\"start\":{\"line\":509,\"column\":44},\"end\":{\"line\":509,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[17490,17557],\"loc\":{\"start\":{\"line\":510,\"column\":8},\"end\":{\"line\":510,\"column\":75}},\"type\":\"ForInStatement\",\"left\":{\"range\":[17495,17500],\"loc\":{\"start\":{\"line\":510,\"column\":13},\"end\":{\"line\":510,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[17499,17500],\"loc\":{\"start\":{\"line\":510,\"column\":17},\"end\":{\"line\":510,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[17499,17500],\"loc\":{\"start\":{\"line\":510,\"column\":17},\"end\":{\"line\":510,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[17504,17512],\"loc\":{\"start\":{\"line\":510,\"column\":22},\"end\":{\"line\":510,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[17514,17557],\"loc\":{\"start\":{\"line\":510,\"column\":32},\"end\":{\"line\":510,\"column\":75}},\"type\":\"IfStatement\",\"test\":{\"range\":[17518,17533],\"loc\":{\"start\":{\"line\":510,\"column\":36},\"end\":{\"line\":510,\"column\":51}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17518,17520],\"loc\":{\"start\":{\"line\":510,\"column\":36},\"end\":{\"line\":510,\"column\":38}},\"type\":\"Identifier\",\"name\":\"fn\"},\"arguments\":[{\"range\":[17521,17532],\"loc\":{\"start\":{\"line\":510,\"column\":39},\"end\":{\"line\":510,\"column\":50}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[17521,17529],\"loc\":{\"start\":{\"line\":510,\"column\":39},\"end\":{\"line\":510,\"column\":47}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[17530,17531],\"loc\":{\"start\":{\"line\":510,\"column\":48},\"end\":{\"line\":510,\"column\":49}},\"type\":\"Identifier\",\"name\":\"i\"}}]},\"consequent\":{\"range\":[17535,17557],\"loc\":{\"start\":{\"line\":510,\"column\":53},\"end\":{\"line\":510,\"column\":75}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[17535,17556],\"loc\":{\"start\":{\"line\":510,\"column\":53},\"end\":{\"line\":510,\"column\":74}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17535,17543],\"loc\":{\"start\":{\"line\":510,\"column\":53},\"end\":{\"line\":510,\"column\":61}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17535,17538],\"loc\":{\"start\":{\"line\":510,\"column\":53},\"end\":{\"line\":510,\"column\":56}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[17539,17543],\"loc\":{\"start\":{\"line\":510,\"column\":57},\"end\":{\"line\":510,\"column\":61}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[17544,17555],\"loc\":{\"start\":{\"line\":510,\"column\":62},\"end\":{\"line\":510,\"column\":73}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[17544,17552],\"loc\":{\"start\":{\"line\":510,\"column\":62},\"end\":{\"line\":510,\"column\":70}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[17553,17554],\"loc\":{\"start\":{\"line\":510,\"column\":71},\"end\":{\"line\":510,\"column\":72}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"alternate\":null},\"each\":false},{\"range\":[17566,17577],\"loc\":{\"start\":{\"line\":511,\"column\":8},\"end\":{\"line\":511,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17573,17576],\"loc\":{\"start\":{\"line\":511,\"column\":15},\"end\":{\"line\":511,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[17593,18322],\"loc\":{\"start\":{\"line\":513,\"column\":6},\"end\":{\"line\":526,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[17593,17598],\"loc\":{\"start\":{\"line\":513,\"column\":6},\"end\":{\"line\":513,\"column\":11}},\"type\":\"Identifier\",\"name\":\"float\"},\"computed\":false,\"value\":{\"range\":[17600,18322],\"loc\":{\"start\":{\"line\":513,\"column\":13},\"end\":{\"line\":526,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[17609,17610],\"loc\":{\"start\":{\"line\":513,\"column\":22},\"end\":{\"line\":513,\"column\":23}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[17612,18322],\"loc\":{\"start\":{\"line\":513,\"column\":25},\"end\":{\"line\":526,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[17622,18314],\"loc\":{\"start\":{\"line\":514,\"column\":8},\"end\":{\"line\":525,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[17626,17641],\"loc\":{\"start\":{\"line\":514,\"column\":12},\"end\":{\"line\":514,\"column\":27}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[17626,17627],\"loc\":{\"start\":{\"line\":514,\"column\":12},\"end\":{\"line\":514,\"column\":13}},\"type\":\"Identifier\",\"name\":\"x\"},\"right\":{\"range\":[17632,17641],\"loc\":{\"start\":{\"line\":514,\"column\":18},\"end\":{\"line\":514,\"column\":27}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[17643,17654],\"loc\":{\"start\":{\"line\":514,\"column\":29},\"end\":{\"line\":514,\"column\":40}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17650,17653],\"loc\":{\"start\":{\"line\":514,\"column\":36},\"end\":{\"line\":514,\"column\":39}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0.0\"}},\"alternate\":{\"range\":[17668,18314],\"loc\":{\"start\":{\"line\":515,\"column\":13},\"end\":{\"line\":525,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[17672,17692],\"loc\":{\"start\":{\"line\":515,\"column\":17},\"end\":{\"line\":515,\"column\":37}},\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"range\":[17672,17680],\"loc\":{\"start\":{\"line\":515,\"column\":17},\"end\":{\"line\":515,\"column\":25}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[17679,17680],\"loc\":{\"start\":{\"line\":515,\"column\":24},\"end\":{\"line\":515,\"column\":25}},\"type\":\"Identifier\",\"name\":\"x\"},\"prefix\":true},\"right\":{\"range\":[17684,17692],\"loc\":{\"start\":{\"line\":515,\"column\":29},\"end\":{\"line\":515,\"column\":37}},\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"\\\"string\\\"\"}},\"consequent\":{\"range\":[17694,17955],\"loc\":{\"start\":{\"line\":515,\"column\":39},\"end\":{\"line\":520,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[17730,17757],\"loc\":{\"start\":{\"line\":516,\"column\":10},\"end\":{\"line\":516,\"column\":37}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[17730,17756],\"loc\":{\"start\":{\"line\":516,\"column\":10},\"end\":{\"line\":516,\"column\":36}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[17730,17731],\"loc\":{\"start\":{\"line\":516,\"column\":10},\"end\":{\"line\":516,\"column\":11}},\"type\":\"Identifier\",\"name\":\"x\"},\"right\":{\"range\":[17734,17756],\"loc\":{\"start\":{\"line\":516,\"column\":14},\"end\":{\"line\":516,\"column\":36}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17734,17754],\"loc\":{\"start\":{\"line\":516,\"column\":14},\"end\":{\"line\":516,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17734,17742],\"loc\":{\"start\":{\"line\":516,\"column\":14},\"end\":{\"line\":516,\"column\":22}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17734,17740],\"loc\":{\"start\":{\"line\":516,\"column\":14},\"end\":{\"line\":516,\"column\":20}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17734,17735],\"loc\":{\"start\":{\"line\":516,\"column\":14},\"end\":{\"line\":516,\"column\":15}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[17736,17740],\"loc\":{\"start\":{\"line\":516,\"column\":16},\"end\":{\"line\":516,\"column\":20}},\"type\":\"Identifier\",\"name\":\"trim\"}},\"arguments\":[]},\"property\":{\"range\":[17743,17754],\"loc\":{\"start\":{\"line\":516,\"column\":23},\"end\":{\"line\":516,\"column\":34}},\"type\":\"Identifier\",\"name\":\"toLowerCase\"}},\"arguments\":[]}}},{\"range\":[17768,17945],\"loc\":{\"start\":{\"line\":517,\"column\":10},\"end\":{\"line\":519,\"column\":36}},\"type\":\"IfStatement\",\"test\":{\"range\":[17772,17812],\"loc\":{\"start\":{\"line\":517,\"column\":14},\"end\":{\"line\":517,\"column\":54}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[17772,17803],\"loc\":{\"start\":{\"line\":517,\"column\":14},\"end\":{\"line\":517,\"column\":45}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17772,17800],\"loc\":{\"start\":{\"line\":517,\"column\":14},\"end\":{\"line\":517,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17773,17794],\"loc\":{\"start\":{\"line\":517,\"column\":15},\"end\":{\"line\":517,\"column\":36}},\"type\":\"Literal\",\"value\":\"/^[+-]?inf(inity)?$/i\",\"raw\":\"/^[+-]?inf(inity)?$/i\",\"regex\":{\"pattern\":\"^[+-]?inf(inity)?$\",\"flags\":\"i\"}},\"property\":{\"range\":[17796,17800],\"loc\":{\"start\":{\"line\":517,\"column\":38},\"end\":{\"line\":517,\"column\":42}},\"type\":\"Identifier\",\"name\":\"exec\"}},\"arguments\":[{\"range\":[17801,17802],\"loc\":{\"start\":{\"line\":517,\"column\":43},\"end\":{\"line\":517,\"column\":44}},\"type\":\"Identifier\",\"name\":\"x\"}]},\"right\":{\"range\":[17808,17812],\"loc\":{\"start\":{\"line\":517,\"column\":50},\"end\":{\"line\":517,\"column\":54}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"consequent\":{\"range\":[17814,17848],\"loc\":{\"start\":{\"line\":517,\"column\":56},\"end\":{\"line\":517,\"column\":90}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17821,17847],\"loc\":{\"start\":{\"line\":517,\"column\":63},\"end\":{\"line\":517,\"column\":89}},\"type\":\"BinaryExpression\",\"operator\":\"*\",\"left\":{\"range\":[17821,17829],\"loc\":{\"start\":{\"line\":517,\"column\":63},\"end\":{\"line\":517,\"column\":71}},\"type\":\"Identifier\",\"name\":\"Infinity\"},\"right\":{\"range\":[17831,17846],\"loc\":{\"start\":{\"line\":517,\"column\":73},\"end\":{\"line\":517,\"column\":88}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[17831,17841],\"loc\":{\"start\":{\"line\":517,\"column\":73},\"end\":{\"line\":517,\"column\":83}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[17831,17835],\"loc\":{\"start\":{\"line\":517,\"column\":73},\"end\":{\"line\":517,\"column\":77}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[17831,17832],\"loc\":{\"start\":{\"line\":517,\"column\":73},\"end\":{\"line\":517,\"column\":74}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[17833,17834],\"loc\":{\"start\":{\"line\":517,\"column\":75},\"end\":{\"line\":517,\"column\":76}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"right\":{\"range\":[17838,17841],\"loc\":{\"start\":{\"line\":517,\"column\":80},\"end\":{\"line\":517,\"column\":83}},\"type\":\"Literal\",\"value\":\"-\",\"raw\":\"\\\"-\\\"\"}},\"consequent\":{\"range\":[17842,17844],\"loc\":{\"start\":{\"line\":517,\"column\":84},\"end\":{\"line\":517,\"column\":86}},\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"range\":[17843,17844],\"loc\":{\"start\":{\"line\":517,\"column\":85},\"end\":{\"line\":517,\"column\":86}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"},\"prefix\":true},\"alternate\":{\"range\":[17845,17846],\"loc\":{\"start\":{\"line\":517,\"column\":87},\"end\":{\"line\":517,\"column\":88}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}}},\"alternate\":{\"range\":[17864,17945],\"loc\":{\"start\":{\"line\":518,\"column\":15},\"end\":{\"line\":519,\"column\":36}},\"type\":\"IfStatement\",\"test\":{\"range\":[17868,17895],\"loc\":{\"start\":{\"line\":518,\"column\":19},\"end\":{\"line\":518,\"column\":46}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[17868,17886],\"loc\":{\"start\":{\"line\":518,\"column\":19},\"end\":{\"line\":518,\"column\":37}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17868,17883],\"loc\":{\"start\":{\"line\":518,\"column\":19},\"end\":{\"line\":518,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[17869,17877],\"loc\":{\"start\":{\"line\":518,\"column\":20},\"end\":{\"line\":518,\"column\":28}},\"type\":\"Literal\",\"value\":\"/^nan$/i\",\"raw\":\"/^nan$/i\",\"regex\":{\"pattern\":\"^nan$\",\"flags\":\"i\"}},\"property\":{\"range\":[17879,17883],\"loc\":{\"start\":{\"line\":518,\"column\":30},\"end\":{\"line\":518,\"column\":34}},\"type\":\"Identifier\",\"name\":\"exec\"}},\"arguments\":[{\"range\":[17884,17885],\"loc\":{\"start\":{\"line\":518,\"column\":35},\"end\":{\"line\":518,\"column\":36}},\"type\":\"Identifier\",\"name\":\"x\"}]},\"right\":{\"range\":[17891,17895],\"loc\":{\"start\":{\"line\":518,\"column\":42},\"end\":{\"line\":518,\"column\":46}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"consequent\":{\"range\":[17897,17908],\"loc\":{\"start\":{\"line\":518,\"column\":48},\"end\":{\"line\":518,\"column\":59}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17904,17907],\"loc\":{\"start\":{\"line\":518,\"column\":55},\"end\":{\"line\":518,\"column\":58}},\"type\":\"Identifier\",\"name\":\"NaN\"}},\"alternate\":{\"range\":[17924,17945],\"loc\":{\"start\":{\"line\":519,\"column\":15},\"end\":{\"line\":519,\"column\":36}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[17931,17944],\"loc\":{\"start\":{\"line\":519,\"column\":22},\"end\":{\"line\":519,\"column\":35}},\"type\":\"CallExpression\",\"callee\":{\"range\":[17931,17941],\"loc\":{\"start\":{\"line\":519,\"column\":22},\"end\":{\"line\":519,\"column\":32}},\"type\":\"Identifier\",\"name\":\"parseFloat\"},\"arguments\":[{\"range\":[17942,17943],\"loc\":{\"start\":{\"line\":519,\"column\":33},\"end\":{\"line\":519,\"column\":34}},\"type\":\"Identifier\",\"name\":\"x\"}]}}}}]},\"alternate\":{\"range\":[17961,18314],\"loc\":{\"start\":{\"line\":520,\"column\":15},\"end\":{\"line\":525,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[17965,17985],\"loc\":{\"start\":{\"line\":520,\"column\":19},\"end\":{\"line\":520,\"column\":39}},\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"range\":[17965,17973],\"loc\":{\"start\":{\"line\":520,\"column\":19},\"end\":{\"line\":520,\"column\":27}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[17972,17973],\"loc\":{\"start\":{\"line\":520,\"column\":26},\"end\":{\"line\":520,\"column\":27}},\"type\":\"Identifier\",\"name\":\"x\"},\"prefix\":true},\"right\":{\"range\":[17977,17985],\"loc\":{\"start\":{\"line\":520,\"column\":31},\"end\":{\"line\":520,\"column\":39}},\"type\":\"Literal\",\"value\":\"number\",\"raw\":\"\\\"number\\\"\"}},\"consequent\":{\"range\":[17987,18115],\"loc\":{\"start\":{\"line\":520,\"column\":41},\"end\":{\"line\":522,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[18023,18032],\"loc\":{\"start\":{\"line\":521,\"column\":10},\"end\":{\"line\":521,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18030,18031],\"loc\":{\"start\":{\"line\":521,\"column\":17},\"end\":{\"line\":521,\"column\":18}},\"type\":\"Identifier\",\"name\":\"x\"}}]},\"alternate\":{\"range\":[18121,18314],\"loc\":{\"start\":{\"line\":522,\"column\":15},\"end\":{\"line\":525,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[18133,18213],\"loc\":{\"start\":{\"line\":523,\"column\":10},\"end\":{\"line\":524,\"column\":27}},\"type\":\"IfStatement\",\"test\":{\"range\":[18137,18162],\"loc\":{\"start\":{\"line\":523,\"column\":14},\"end\":{\"line\":523,\"column\":39}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[18137,18148],\"loc\":{\"start\":{\"line\":523,\"column\":14},\"end\":{\"line\":523,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18137,18138],\"loc\":{\"start\":{\"line\":523,\"column\":14},\"end\":{\"line\":523,\"column\":15}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[18139,18148],\"loc\":{\"start\":{\"line\":523,\"column\":16},\"end\":{\"line\":523,\"column\":25}},\"type\":\"Identifier\",\"name\":\"__float__\"}},\"right\":{\"range\":[18153,18162],\"loc\":{\"start\":{\"line\":523,\"column\":30},\"end\":{\"line\":523,\"column\":39}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[18164,18185],\"loc\":{\"start\":{\"line\":523,\"column\":41},\"end\":{\"line\":523,\"column\":62}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18171,18184],\"loc\":{\"start\":{\"line\":523,\"column\":48},\"end\":{\"line\":523,\"column\":61}},\"type\":\"CallExpression\",\"callee\":{\"range\":[18171,18182],\"loc\":{\"start\":{\"line\":523,\"column\":48},\"end\":{\"line\":523,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18171,18172],\"loc\":{\"start\":{\"line\":523,\"column\":48},\"end\":{\"line\":523,\"column\":49}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[18173,18182],\"loc\":{\"start\":{\"line\":523,\"column\":50},\"end\":{\"line\":523,\"column\":59}},\"type\":\"Identifier\",\"name\":\"__float__\"}},\"arguments\":[]}},\"alternate\":{\"range\":[18201,18213],\"loc\":{\"start\":{\"line\":524,\"column\":15},\"end\":{\"line\":524,\"column\":27}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18208,18212],\"loc\":{\"start\":{\"line\":524,\"column\":22},\"end\":{\"line\":524,\"column\":26}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}}}]}}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[18330,18387],\"loc\":{\"start\":{\"line\":527,\"column\":6},\"end\":{\"line\":529,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[18330,18333],\"loc\":{\"start\":{\"line\":527,\"column\":6},\"end\":{\"line\":527,\"column\":9}},\"type\":\"Identifier\",\"name\":\"hex\"},\"computed\":false,\"value\":{\"range\":[18335,18387],\"loc\":{\"start\":{\"line\":527,\"column\":11},\"end\":{\"line\":529,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[18344,18345],\"loc\":{\"start\":{\"line\":527,\"column\":20},\"end\":{\"line\":527,\"column\":21}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[18347,18387],\"loc\":{\"start\":{\"line\":527,\"column\":23},\"end\":{\"line\":529,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[18357,18379],\"loc\":{\"start\":{\"line\":528,\"column\":8},\"end\":{\"line\":528,\"column\":30}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18364,18378],\"loc\":{\"start\":{\"line\":528,\"column\":15},\"end\":{\"line\":528,\"column\":29}},\"type\":\"CallExpression\",\"callee\":{\"range\":[18364,18374],\"loc\":{\"start\":{\"line\":528,\"column\":15},\"end\":{\"line\":528,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18364,18365],\"loc\":{\"start\":{\"line\":528,\"column\":15},\"end\":{\"line\":528,\"column\":16}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[18366,18374],\"loc\":{\"start\":{\"line\":528,\"column\":17},\"end\":{\"line\":528,\"column\":25}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[{\"range\":[18375,18377],\"loc\":{\"start\":{\"line\":528,\"column\":26},\"end\":{\"line\":528,\"column\":28}},\"type\":\"Literal\",\"value\":16,\"raw\":\"16\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[18395,18450],\"loc\":{\"start\":{\"line\":530,\"column\":6},\"end\":{\"line\":532,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[18395,18398],\"loc\":{\"start\":{\"line\":530,\"column\":6},\"end\":{\"line\":530,\"column\":9}},\"type\":\"Identifier\",\"name\":\"int\"},\"computed\":false,\"value\":{\"range\":[18400,18450],\"loc\":{\"start\":{\"line\":530,\"column\":11},\"end\":{\"line\":532,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[18410,18411],\"loc\":{\"start\":{\"line\":530,\"column\":21},\"end\":{\"line\":530,\"column\":22}},\"type\":\"Identifier\",\"name\":\"s\"}],\"defaults\":[],\"body\":{\"range\":[18413,18450],\"loc\":{\"start\":{\"line\":530,\"column\":24},\"end\":{\"line\":532,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[18423,18442],\"loc\":{\"start\":{\"line\":531,\"column\":8},\"end\":{\"line\":531,\"column\":27}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18430,18441],\"loc\":{\"start\":{\"line\":531,\"column\":15},\"end\":{\"line\":531,\"column\":26}},\"type\":\"CallExpression\",\"callee\":{\"range\":[18430,18438],\"loc\":{\"start\":{\"line\":531,\"column\":15},\"end\":{\"line\":531,\"column\":23}},\"type\":\"Identifier\",\"name\":\"parseInt\"},\"arguments\":[{\"range\":[18439,18440],\"loc\":{\"start\":{\"line\":531,\"column\":24},\"end\":{\"line\":531,\"column\":25}},\"type\":\"Identifier\",\"name\":\"s\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[18458,18510],\"loc\":{\"start\":{\"line\":533,\"column\":6},\"end\":{\"line\":535,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[18458,18461],\"loc\":{\"start\":{\"line\":533,\"column\":6},\"end\":{\"line\":533,\"column\":9}},\"type\":\"Identifier\",\"name\":\"len\"},\"computed\":false,\"value\":{\"range\":[18463,18510],\"loc\":{\"start\":{\"line\":533,\"column\":11},\"end\":{\"line\":535,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[18473,18474],\"loc\":{\"start\":{\"line\":533,\"column\":21},\"end\":{\"line\":533,\"column\":22}},\"type\":\"Identifier\",\"name\":\"o\"}],\"defaults\":[],\"body\":{\"range\":[18476,18510],\"loc\":{\"start\":{\"line\":533,\"column\":24},\"end\":{\"line\":535,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[18486,18502],\"loc\":{\"start\":{\"line\":534,\"column\":8},\"end\":{\"line\":534,\"column\":24}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18493,18501],\"loc\":{\"start\":{\"line\":534,\"column\":15},\"end\":{\"line\":534,\"column\":23}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18493,18494],\"loc\":{\"start\":{\"line\":534,\"column\":15},\"end\":{\"line\":534,\"column\":16}},\"type\":\"Identifier\",\"name\":\"o\"},\"property\":{\"range\":[18495,18501],\"loc\":{\"start\":{\"line\":534,\"column\":17},\"end\":{\"line\":534,\"column\":23}},\"type\":\"Identifier\",\"name\":\"length\"}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[18518,18935],\"loc\":{\"start\":{\"line\":536,\"column\":6},\"end\":{\"line\":543,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[18518,18522],\"loc\":{\"start\":{\"line\":536,\"column\":6},\"end\":{\"line\":536,\"column\":10}},\"type\":\"Identifier\",\"name\":\"list\"},\"computed\":false,\"value\":{\"range\":[18524,18935],\"loc\":{\"start\":{\"line\":536,\"column\":12},\"end\":{\"line\":543,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[18534,18542],\"loc\":{\"start\":{\"line\":536,\"column\":22},\"end\":{\"line\":536,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"}],\"defaults\":[],\"body\":{\"range\":[18544,18935],\"loc\":{\"start\":{\"line\":536,\"column\":32},\"end\":{\"line\":543,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[18554,18597],\"loc\":{\"start\":{\"line\":537,\"column\":8},\"end\":{\"line\":537,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[18558,18596],\"loc\":{\"start\":{\"line\":537,\"column\":12},\"end\":{\"line\":537,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[18558,18561],\"loc\":{\"start\":{\"line\":537,\"column\":12},\"end\":{\"line\":537,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[18564,18596],\"loc\":{\"start\":{\"line\":537,\"column\":18},\"end\":{\"line\":537,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[18568,18594],\"loc\":{\"start\":{\"line\":537,\"column\":22},\"end\":{\"line\":537,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18568,18589],\"loc\":{\"start\":{\"line\":537,\"column\":22},\"end\":{\"line\":537,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18568,18581],\"loc\":{\"start\":{\"line\":537,\"column\":22},\"end\":{\"line\":537,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[18582,18589],\"loc\":{\"start\":{\"line\":537,\"column\":36},\"end\":{\"line\":537,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[18590,18594],\"loc\":{\"start\":{\"line\":537,\"column\":44},\"end\":{\"line\":537,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[18606,18646],\"loc\":{\"start\":{\"line\":538,\"column\":8},\"end\":{\"line\":538,\"column\":48}},\"type\":\"IfStatement\",\"test\":{\"range\":[18611,18632],\"loc\":{\"start\":{\"line\":538,\"column\":13},\"end\":{\"line\":538,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"==\",\"left\":{\"range\":[18611,18627],\"loc\":{\"start\":{\"line\":538,\"column\":13},\"end\":{\"line\":538,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18611,18620],\"loc\":{\"start\":{\"line\":538,\"column\":13},\"end\":{\"line\":538,\"column\":22}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[18621,18627],\"loc\":{\"start\":{\"line\":538,\"column\":23},\"end\":{\"line\":538,\"column\":29}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[18631,18632],\"loc\":{\"start\":{\"line\":538,\"column\":33},\"end\":{\"line\":538,\"column\":34}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[18635,18646],\"loc\":{\"start\":{\"line\":538,\"column\":37},\"end\":{\"line\":538,\"column\":48}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18642,18645],\"loc\":{\"start\":{\"line\":538,\"column\":44},\"end\":{\"line\":538,\"column\":47}},\"type\":\"Identifier\",\"name\":\"ret\"}},\"alternate\":null},{\"range\":[18655,18771],\"loc\":{\"start\":{\"line\":539,\"column\":8},\"end\":{\"line\":539,\"column\":124}},\"type\":\"IfStatement\",\"test\":{\"range\":[18660,18680],\"loc\":{\"start\":{\"line\":539,\"column\":13},\"end\":{\"line\":539,\"column\":33}},\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"range\":[18660,18676],\"loc\":{\"start\":{\"line\":539,\"column\":13},\"end\":{\"line\":539,\"column\":29}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18660,18669],\"loc\":{\"start\":{\"line\":539,\"column\":13},\"end\":{\"line\":539,\"column\":22}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[18670,18676],\"loc\":{\"start\":{\"line\":539,\"column\":23},\"end\":{\"line\":539,\"column\":29}},\"type\":\"Identifier\",\"name\":\"length\"}},\"right\":{\"range\":[18679,18680],\"loc\":{\"start\":{\"line\":539,\"column\":32},\"end\":{\"line\":539,\"column\":33}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}},\"consequent\":{\"range\":[18683,18771],\"loc\":{\"start\":{\"line\":539,\"column\":36},\"end\":{\"line\":539,\"column\":124}},\"type\":\"ThrowStatement\",\"argument\":{\"range\":[18689,18770],\"loc\":{\"start\":{\"line\":539,\"column\":42},\"end\":{\"line\":539,\"column\":123}},\"type\":\"NewExpression\",\"callee\":{\"range\":[18693,18702],\"loc\":{\"start\":{\"line\":539,\"column\":46},\"end\":{\"line\":539,\"column\":55}},\"type\":\"Identifier\",\"name\":\"TypeError\"},\"arguments\":[{\"range\":[18703,18769],\"loc\":{\"start\":{\"line\":539,\"column\":56},\"end\":{\"line\":539,\"column\":122}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[18703,18757],\"loc\":{\"start\":{\"line\":539,\"column\":56},\"end\":{\"line\":539,\"column\":110}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[18703,18738],\"loc\":{\"start\":{\"line\":539,\"column\":56},\"end\":{\"line\":539,\"column\":91}},\"type\":\"Literal\",\"value\":\"list() takes at most 1 argument (\",\"raw\":\"'list() takes at most 1 argument ('\"},\"right\":{\"range\":[18741,18757],\"loc\":{\"start\":{\"line\":539,\"column\":94},\"end\":{\"line\":539,\"column\":110}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18741,18750],\"loc\":{\"start\":{\"line\":539,\"column\":94},\"end\":{\"line\":539,\"column\":103}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[18751,18757],\"loc\":{\"start\":{\"line\":539,\"column\":104},\"end\":{\"line\":539,\"column\":110}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"right\":{\"range\":[18760,18769],\"loc\":{\"start\":{\"line\":539,\"column\":113},\"end\":{\"line\":539,\"column\":122}},\"type\":\"Literal\",\"value\":\" given)\",\"raw\":\"' given)'\"}}]}},\"alternate\":null},{\"range\":[18780,18907],\"loc\":{\"start\":{\"line\":540,\"column\":8},\"end\":{\"line\":541,\"column\":49}},\"type\":\"IfStatement\",\"test\":{\"range\":[18784,18809],\"loc\":{\"start\":{\"line\":540,\"column\":12},\"end\":{\"line\":540,\"column\":37}},\"type\":\"BinaryExpression\",\"operator\":\"instanceof\",\"left\":{\"range\":[18784,18792],\"loc\":{\"start\":{\"line\":540,\"column\":12},\"end\":{\"line\":540,\"column\":20}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"right\":{\"range\":[18804,18809],\"loc\":{\"start\":{\"line\":540,\"column\":32},\"end\":{\"line\":540,\"column\":37}},\"type\":\"Identifier\",\"name\":\"Array\"}},\"consequent\":{\"range\":[18811,18857],\"loc\":{\"start\":{\"line\":540,\"column\":39},\"end\":{\"line\":540,\"column\":85}},\"type\":\"ForInStatement\",\"left\":{\"range\":[18816,18821],\"loc\":{\"start\":{\"line\":540,\"column\":44},\"end\":{\"line\":540,\"column\":49}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[18820,18821],\"loc\":{\"start\":{\"line\":540,\"column\":48},\"end\":{\"line\":540,\"column\":49}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[18820,18821],\"loc\":{\"start\":{\"line\":540,\"column\":48},\"end\":{\"line\":540,\"column\":49}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[18825,18833],\"loc\":{\"start\":{\"line\":540,\"column\":53},\"end\":{\"line\":540,\"column\":61}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[18835,18857],\"loc\":{\"start\":{\"line\":540,\"column\":63},\"end\":{\"line\":540,\"column\":85}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[18835,18856],\"loc\":{\"start\":{\"line\":540,\"column\":63},\"end\":{\"line\":540,\"column\":84}},\"type\":\"CallExpression\",\"callee\":{\"range\":[18835,18843],\"loc\":{\"start\":{\"line\":540,\"column\":63},\"end\":{\"line\":540,\"column\":71}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18835,18838],\"loc\":{\"start\":{\"line\":540,\"column\":63},\"end\":{\"line\":540,\"column\":66}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[18839,18843],\"loc\":{\"start\":{\"line\":540,\"column\":67},\"end\":{\"line\":540,\"column\":71}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[18844,18855],\"loc\":{\"start\":{\"line\":540,\"column\":72},\"end\":{\"line\":540,\"column\":83}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[18844,18852],\"loc\":{\"start\":{\"line\":540,\"column\":72},\"end\":{\"line\":540,\"column\":80}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[18853,18854],\"loc\":{\"start\":{\"line\":540,\"column\":81},\"end\":{\"line\":540,\"column\":82}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"each\":false},\"alternate\":{\"range\":[18871,18907],\"loc\":{\"start\":{\"line\":541,\"column\":13},\"end\":{\"line\":541,\"column\":49}},\"type\":\"ForInStatement\",\"left\":{\"range\":[18876,18881],\"loc\":{\"start\":{\"line\":541,\"column\":18},\"end\":{\"line\":541,\"column\":23}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[18880,18881],\"loc\":{\"start\":{\"line\":541,\"column\":22},\"end\":{\"line\":541,\"column\":23}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[18880,18881],\"loc\":{\"start\":{\"line\":541,\"column\":22},\"end\":{\"line\":541,\"column\":23}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[18885,18893],\"loc\":{\"start\":{\"line\":541,\"column\":27},\"end\":{\"line\":541,\"column\":35}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[18895,18907],\"loc\":{\"start\":{\"line\":541,\"column\":37},\"end\":{\"line\":541,\"column\":49}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[18895,18906],\"loc\":{\"start\":{\"line\":541,\"column\":37},\"end\":{\"line\":541,\"column\":48}},\"type\":\"CallExpression\",\"callee\":{\"range\":[18895,18903],\"loc\":{\"start\":{\"line\":541,\"column\":37},\"end\":{\"line\":541,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[18895,18898],\"loc\":{\"start\":{\"line\":541,\"column\":37},\"end\":{\"line\":541,\"column\":40}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[18899,18903],\"loc\":{\"start\":{\"line\":541,\"column\":41},\"end\":{\"line\":541,\"column\":45}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[18904,18905],\"loc\":{\"start\":{\"line\":541,\"column\":46},\"end\":{\"line\":541,\"column\":47}},\"type\":\"Identifier\",\"name\":\"i\"}]}},\"each\":false}},{\"range\":[18916,18927],\"loc\":{\"start\":{\"line\":542,\"column\":8},\"end\":{\"line\":542,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[18923,18926],\"loc\":{\"start\":{\"line\":542,\"column\":15},\"end\":{\"line\":542,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[18943,19164],\"loc\":{\"start\":{\"line\":544,\"column\":6},\"end\":{\"line\":549,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[18943,18946],\"loc\":{\"start\":{\"line\":544,\"column\":6},\"end\":{\"line\":544,\"column\":9}},\"type\":\"Identifier\",\"name\":\"map\"},\"computed\":false,\"value\":{\"range\":[18948,19164],\"loc\":{\"start\":{\"line\":544,\"column\":11},\"end\":{\"line\":549,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[18957,18959],\"loc\":{\"start\":{\"line\":544,\"column\":20},\"end\":{\"line\":544,\"column\":22}},\"type\":\"Identifier\",\"name\":\"fn\"},{\"range\":[18961,18969],\"loc\":{\"start\":{\"line\":544,\"column\":24},\"end\":{\"line\":544,\"column\":32}},\"type\":\"Identifier\",\"name\":\"iterable\"}],\"defaults\":[],\"body\":{\"range\":[18971,19164],\"loc\":{\"start\":{\"line\":544,\"column\":34},\"end\":{\"line\":549,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19034,19077],\"loc\":{\"start\":{\"line\":546,\"column\":8},\"end\":{\"line\":546,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[19038,19076],\"loc\":{\"start\":{\"line\":546,\"column\":12},\"end\":{\"line\":546,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[19038,19041],\"loc\":{\"start\":{\"line\":546,\"column\":12},\"end\":{\"line\":546,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[19044,19076],\"loc\":{\"start\":{\"line\":546,\"column\":18},\"end\":{\"line\":546,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[19048,19074],\"loc\":{\"start\":{\"line\":546,\"column\":22},\"end\":{\"line\":546,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[19048,19069],\"loc\":{\"start\":{\"line\":546,\"column\":22},\"end\":{\"line\":546,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[19048,19061],\"loc\":{\"start\":{\"line\":546,\"column\":22},\"end\":{\"line\":546,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[19062,19069],\"loc\":{\"start\":{\"line\":546,\"column\":36},\"end\":{\"line\":546,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[19070,19074],\"loc\":{\"start\":{\"line\":546,\"column\":44},\"end\":{\"line\":546,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[19086,19136],\"loc\":{\"start\":{\"line\":547,\"column\":8},\"end\":{\"line\":547,\"column\":58}},\"type\":\"ForInStatement\",\"left\":{\"range\":[19091,19096],\"loc\":{\"start\":{\"line\":547,\"column\":13},\"end\":{\"line\":547,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[19095,19096],\"loc\":{\"start\":{\"line\":547,\"column\":17},\"end\":{\"line\":547,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[19095,19096],\"loc\":{\"start\":{\"line\":547,\"column\":17},\"end\":{\"line\":547,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[19100,19108],\"loc\":{\"start\":{\"line\":547,\"column\":22},\"end\":{\"line\":547,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[19110,19136],\"loc\":{\"start\":{\"line\":547,\"column\":32},\"end\":{\"line\":547,\"column\":58}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[19110,19135],\"loc\":{\"start\":{\"line\":547,\"column\":32},\"end\":{\"line\":547,\"column\":57}},\"type\":\"CallExpression\",\"callee\":{\"range\":[19110,19118],\"loc\":{\"start\":{\"line\":547,\"column\":32},\"end\":{\"line\":547,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[19110,19113],\"loc\":{\"start\":{\"line\":547,\"column\":32},\"end\":{\"line\":547,\"column\":35}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[19114,19118],\"loc\":{\"start\":{\"line\":547,\"column\":36},\"end\":{\"line\":547,\"column\":40}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[19119,19134],\"loc\":{\"start\":{\"line\":547,\"column\":41},\"end\":{\"line\":547,\"column\":56}},\"type\":\"CallExpression\",\"callee\":{\"range\":[19119,19121],\"loc\":{\"start\":{\"line\":547,\"column\":41},\"end\":{\"line\":547,\"column\":43}},\"type\":\"Identifier\",\"name\":\"fn\"},\"arguments\":[{\"range\":[19122,19133],\"loc\":{\"start\":{\"line\":547,\"column\":44},\"end\":{\"line\":547,\"column\":55}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[19122,19130],\"loc\":{\"start\":{\"line\":547,\"column\":44},\"end\":{\"line\":547,\"column\":52}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[19131,19132],\"loc\":{\"start\":{\"line\":547,\"column\":53},\"end\":{\"line\":547,\"column\":54}},\"type\":\"Identifier\",\"name\":\"i\"}}]}]}},\"each\":false},{\"range\":[19145,19156],\"loc\":{\"start\":{\"line\":548,\"column\":8},\"end\":{\"line\":548,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[19152,19155],\"loc\":{\"start\":{\"line\":548,\"column\":15},\"end\":{\"line\":548,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[19172,19532],\"loc\":{\"start\":{\"line\":550,\"column\":6},\"end\":{\"line\":558,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[19172,19175],\"loc\":{\"start\":{\"line\":550,\"column\":6},\"end\":{\"line\":550,\"column\":9}},\"type\":\"Identifier\",\"name\":\"max\"},\"computed\":false,\"value\":{\"range\":[19177,19532],\"loc\":{\"start\":{\"line\":550,\"column\":11},\"end\":{\"line\":558,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[19186,19190],\"loc\":{\"start\":{\"line\":550,\"column\":20},\"end\":{\"line\":550,\"column\":24}},\"type\":\"Identifier\",\"name\":\"arg1\"},{\"range\":[19192,19196],\"loc\":{\"start\":{\"line\":550,\"column\":26},\"end\":{\"line\":550,\"column\":30}},\"type\":\"Identifier\",\"name\":\"arg2\"}],\"defaults\":[],\"body\":{\"range\":[19198,19532],\"loc\":{\"start\":{\"line\":550,\"column\":32},\"end\":{\"line\":558,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19322,19524],\"loc\":{\"start\":{\"line\":553,\"column\":8},\"end\":{\"line\":557,\"column\":49}},\"type\":\"IfStatement\",\"test\":{\"range\":[19326,19331],\"loc\":{\"start\":{\"line\":553,\"column\":12},\"end\":{\"line\":553,\"column\":17}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[19327,19331],\"loc\":{\"start\":{\"line\":553,\"column\":13},\"end\":{\"line\":553,\"column\":17}},\"type\":\"Identifier\",\"name\":\"arg2\"},\"prefix\":true},\"consequent\":{\"range\":[19333,19484],\"loc\":{\"start\":{\"line\":553,\"column\":19},\"end\":{\"line\":557,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19357,19372],\"loc\":{\"start\":{\"line\":554,\"column\":10},\"end\":{\"line\":554,\"column\":25}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[19361,19371],\"loc\":{\"start\":{\"line\":554,\"column\":14},\"end\":{\"line\":554,\"column\":24}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[19361,19364],\"loc\":{\"start\":{\"line\":554,\"column\":14},\"end\":{\"line\":554,\"column\":17}},\"type\":\"Identifier\",\"name\":\"max\"},\"init\":{\"range\":[19367,19371],\"loc\":{\"start\":{\"line\":554,\"column\":20},\"end\":{\"line\":554,\"column\":24}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}}],\"kind\":\"var\"},{\"range\":[19383,19452],\"loc\":{\"start\":{\"line\":555,\"column\":10},\"end\":{\"line\":555,\"column\":79}},\"type\":\"ForInStatement\",\"left\":{\"range\":[19388,19393],\"loc\":{\"start\":{\"line\":555,\"column\":15},\"end\":{\"line\":555,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[19392,19393],\"loc\":{\"start\":{\"line\":555,\"column\":19},\"end\":{\"line\":555,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[19392,19393],\"loc\":{\"start\":{\"line\":555,\"column\":19},\"end\":{\"line\":555,\"column\":20}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[19397,19401],\"loc\":{\"start\":{\"line\":555,\"column\":24},\"end\":{\"line\":555,\"column\":28}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"body\":{\"range\":[19403,19452],\"loc\":{\"start\":{\"line\":555,\"column\":30},\"end\":{\"line\":555,\"column\":79}},\"type\":\"IfStatement\",\"test\":{\"range\":[19407,19436],\"loc\":{\"start\":{\"line\":555,\"column\":34},\"end\":{\"line\":555,\"column\":63}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[19407,19419],\"loc\":{\"start\":{\"line\":555,\"column\":34},\"end\":{\"line\":555,\"column\":46}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[19407,19410],\"loc\":{\"start\":{\"line\":555,\"column\":34},\"end\":{\"line\":555,\"column\":37}},\"type\":\"Identifier\",\"name\":\"max\"},\"right\":{\"range\":[19415,19419],\"loc\":{\"start\":{\"line\":555,\"column\":42},\"end\":{\"line\":555,\"column\":46}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"right\":{\"range\":[19423,19436],\"loc\":{\"start\":{\"line\":555,\"column\":50},\"end\":{\"line\":555,\"column\":63}},\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"range\":[19423,19430],\"loc\":{\"start\":{\"line\":555,\"column\":50},\"end\":{\"line\":555,\"column\":57}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[19423,19427],\"loc\":{\"start\":{\"line\":555,\"column\":50},\"end\":{\"line\":555,\"column\":54}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"property\":{\"range\":[19428,19429],\"loc\":{\"start\":{\"line\":555,\"column\":55},\"end\":{\"line\":555,\"column\":56}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[19433,19436],\"loc\":{\"start\":{\"line\":555,\"column\":60},\"end\":{\"line\":555,\"column\":63}},\"type\":\"Identifier\",\"name\":\"max\"}}},\"consequent\":{\"range\":[19438,19452],\"loc\":{\"start\":{\"line\":555,\"column\":65},\"end\":{\"line\":555,\"column\":79}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[19438,19451],\"loc\":{\"start\":{\"line\":555,\"column\":65},\"end\":{\"line\":555,\"column\":78}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[19438,19441],\"loc\":{\"start\":{\"line\":555,\"column\":65},\"end\":{\"line\":555,\"column\":68}},\"type\":\"Identifier\",\"name\":\"max\"},\"right\":{\"range\":[19444,19451],\"loc\":{\"start\":{\"line\":555,\"column\":71},\"end\":{\"line\":555,\"column\":78}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[19444,19448],\"loc\":{\"start\":{\"line\":555,\"column\":71},\"end\":{\"line\":555,\"column\":75}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"property\":{\"range\":[19449,19450],\"loc\":{\"start\":{\"line\":555,\"column\":76},\"end\":{\"line\":555,\"column\":77}},\"type\":\"Identifier\",\"name\":\"i\"}}}},\"alternate\":null},\"each\":false},{\"range\":[19463,19474],\"loc\":{\"start\":{\"line\":556,\"column\":10},\"end\":{\"line\":556,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[19470,19473],\"loc\":{\"start\":{\"line\":556,\"column\":17},\"end\":{\"line\":556,\"column\":20}},\"type\":\"Identifier\",\"name\":\"max\"}}]},\"alternate\":{\"range\":[19490,19524],\"loc\":{\"start\":{\"line\":557,\"column\":15},\"end\":{\"line\":557,\"column\":49}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[19497,19523],\"loc\":{\"start\":{\"line\":557,\"column\":22},\"end\":{\"line\":557,\"column\":48}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[19497,19509],\"loc\":{\"start\":{\"line\":557,\"column\":22},\"end\":{\"line\":557,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\">=\",\"left\":{\"range\":[19497,19501],\"loc\":{\"start\":{\"line\":557,\"column\":22},\"end\":{\"line\":557,\"column\":26}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"right\":{\"range\":[19505,19509],\"loc\":{\"start\":{\"line\":557,\"column\":30},\"end\":{\"line\":557,\"column\":34}},\"type\":\"Identifier\",\"name\":\"arg2\"}},\"consequent\":{\"range\":[19512,19516],\"loc\":{\"start\":{\"line\":557,\"column\":37},\"end\":{\"line\":557,\"column\":41}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"alternate\":{\"range\":[19519,19523],\"loc\":{\"start\":{\"line\":557,\"column\":44},\"end\":{\"line\":557,\"column\":48}},\"type\":\"Identifier\",\"name\":\"arg2\"}}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[19540,19900],\"loc\":{\"start\":{\"line\":559,\"column\":6},\"end\":{\"line\":567,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[19540,19543],\"loc\":{\"start\":{\"line\":559,\"column\":6},\"end\":{\"line\":559,\"column\":9}},\"type\":\"Identifier\",\"name\":\"min\"},\"computed\":false,\"value\":{\"range\":[19545,19900],\"loc\":{\"start\":{\"line\":559,\"column\":11},\"end\":{\"line\":567,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[19554,19558],\"loc\":{\"start\":{\"line\":559,\"column\":20},\"end\":{\"line\":559,\"column\":24}},\"type\":\"Identifier\",\"name\":\"arg1\"},{\"range\":[19560,19564],\"loc\":{\"start\":{\"line\":559,\"column\":26},\"end\":{\"line\":559,\"column\":30}},\"type\":\"Identifier\",\"name\":\"arg2\"}],\"defaults\":[],\"body\":{\"range\":[19566,19900],\"loc\":{\"start\":{\"line\":559,\"column\":32},\"end\":{\"line\":567,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19690,19892],\"loc\":{\"start\":{\"line\":562,\"column\":8},\"end\":{\"line\":566,\"column\":49}},\"type\":\"IfStatement\",\"test\":{\"range\":[19694,19699],\"loc\":{\"start\":{\"line\":562,\"column\":12},\"end\":{\"line\":562,\"column\":17}},\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"range\":[19695,19699],\"loc\":{\"start\":{\"line\":562,\"column\":13},\"end\":{\"line\":562,\"column\":17}},\"type\":\"Identifier\",\"name\":\"arg2\"},\"prefix\":true},\"consequent\":{\"range\":[19701,19852],\"loc\":{\"start\":{\"line\":562,\"column\":19},\"end\":{\"line\":566,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19725,19740],\"loc\":{\"start\":{\"line\":563,\"column\":10},\"end\":{\"line\":563,\"column\":25}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[19729,19739],\"loc\":{\"start\":{\"line\":563,\"column\":14},\"end\":{\"line\":563,\"column\":24}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[19729,19732],\"loc\":{\"start\":{\"line\":563,\"column\":14},\"end\":{\"line\":563,\"column\":17}},\"type\":\"Identifier\",\"name\":\"max\"},\"init\":{\"range\":[19735,19739],\"loc\":{\"start\":{\"line\":563,\"column\":20},\"end\":{\"line\":563,\"column\":24}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}}],\"kind\":\"var\"},{\"range\":[19751,19820],\"loc\":{\"start\":{\"line\":564,\"column\":10},\"end\":{\"line\":564,\"column\":79}},\"type\":\"ForInStatement\",\"left\":{\"range\":[19756,19761],\"loc\":{\"start\":{\"line\":564,\"column\":15},\"end\":{\"line\":564,\"column\":20}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[19760,19761],\"loc\":{\"start\":{\"line\":564,\"column\":19},\"end\":{\"line\":564,\"column\":20}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[19760,19761],\"loc\":{\"start\":{\"line\":564,\"column\":19},\"end\":{\"line\":564,\"column\":20}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[19765,19769],\"loc\":{\"start\":{\"line\":564,\"column\":24},\"end\":{\"line\":564,\"column\":28}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"body\":{\"range\":[19771,19820],\"loc\":{\"start\":{\"line\":564,\"column\":30},\"end\":{\"line\":564,\"column\":79}},\"type\":\"IfStatement\",\"test\":{\"range\":[19775,19804],\"loc\":{\"start\":{\"line\":564,\"column\":34},\"end\":{\"line\":564,\"column\":63}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[19775,19787],\"loc\":{\"start\":{\"line\":564,\"column\":34},\"end\":{\"line\":564,\"column\":46}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[19775,19778],\"loc\":{\"start\":{\"line\":564,\"column\":34},\"end\":{\"line\":564,\"column\":37}},\"type\":\"Identifier\",\"name\":\"max\"},\"right\":{\"range\":[19783,19787],\"loc\":{\"start\":{\"line\":564,\"column\":42},\"end\":{\"line\":564,\"column\":46}},\"type\":\"Literal\",\"value\":null,\"raw\":\"null\"}},\"right\":{\"range\":[19791,19804],\"loc\":{\"start\":{\"line\":564,\"column\":50},\"end\":{\"line\":564,\"column\":63}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[19791,19798],\"loc\":{\"start\":{\"line\":564,\"column\":50},\"end\":{\"line\":564,\"column\":57}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[19791,19795],\"loc\":{\"start\":{\"line\":564,\"column\":50},\"end\":{\"line\":564,\"column\":54}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"property\":{\"range\":[19796,19797],\"loc\":{\"start\":{\"line\":564,\"column\":55},\"end\":{\"line\":564,\"column\":56}},\"type\":\"Identifier\",\"name\":\"i\"}},\"right\":{\"range\":[19801,19804],\"loc\":{\"start\":{\"line\":564,\"column\":60},\"end\":{\"line\":564,\"column\":63}},\"type\":\"Identifier\",\"name\":\"max\"}}},\"consequent\":{\"range\":[19806,19820],\"loc\":{\"start\":{\"line\":564,\"column\":65},\"end\":{\"line\":564,\"column\":79}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[19806,19819],\"loc\":{\"start\":{\"line\":564,\"column\":65},\"end\":{\"line\":564,\"column\":78}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[19806,19809],\"loc\":{\"start\":{\"line\":564,\"column\":65},\"end\":{\"line\":564,\"column\":68}},\"type\":\"Identifier\",\"name\":\"max\"},\"right\":{\"range\":[19812,19819],\"loc\":{\"start\":{\"line\":564,\"column\":71},\"end\":{\"line\":564,\"column\":78}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[19812,19816],\"loc\":{\"start\":{\"line\":564,\"column\":71},\"end\":{\"line\":564,\"column\":75}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"property\":{\"range\":[19817,19818],\"loc\":{\"start\":{\"line\":564,\"column\":76},\"end\":{\"line\":564,\"column\":77}},\"type\":\"Identifier\",\"name\":\"i\"}}}},\"alternate\":null},\"each\":false},{\"range\":[19831,19842],\"loc\":{\"start\":{\"line\":565,\"column\":10},\"end\":{\"line\":565,\"column\":21}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[19838,19841],\"loc\":{\"start\":{\"line\":565,\"column\":17},\"end\":{\"line\":565,\"column\":20}},\"type\":\"Identifier\",\"name\":\"max\"}}]},\"alternate\":{\"range\":[19858,19892],\"loc\":{\"start\":{\"line\":566,\"column\":15},\"end\":{\"line\":566,\"column\":49}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[19865,19891],\"loc\":{\"start\":{\"line\":566,\"column\":22},\"end\":{\"line\":566,\"column\":48}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[19865,19877],\"loc\":{\"start\":{\"line\":566,\"column\":22},\"end\":{\"line\":566,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"<=\",\"left\":{\"range\":[19865,19869],\"loc\":{\"start\":{\"line\":566,\"column\":22},\"end\":{\"line\":566,\"column\":26}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"right\":{\"range\":[19873,19877],\"loc\":{\"start\":{\"line\":566,\"column\":30},\"end\":{\"line\":566,\"column\":34}},\"type\":\"Identifier\",\"name\":\"arg2\"}},\"consequent\":{\"range\":[19880,19884],\"loc\":{\"start\":{\"line\":566,\"column\":37},\"end\":{\"line\":566,\"column\":41}},\"type\":\"Identifier\",\"name\":\"arg1\"},\"alternate\":{\"range\":[19887,19891],\"loc\":{\"start\":{\"line\":566,\"column\":44},\"end\":{\"line\":566,\"column\":48}},\"type\":\"Identifier\",\"name\":\"arg2\"}}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[19908,19964],\"loc\":{\"start\":{\"line\":568,\"column\":6},\"end\":{\"line\":570,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[19908,19911],\"loc\":{\"start\":{\"line\":568,\"column\":6},\"end\":{\"line\":568,\"column\":9}},\"type\":\"Identifier\",\"name\":\"oct\"},\"computed\":false,\"value\":{\"range\":[19913,19964],\"loc\":{\"start\":{\"line\":568,\"column\":11},\"end\":{\"line\":570,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[19922,19923],\"loc\":{\"start\":{\"line\":568,\"column\":20},\"end\":{\"line\":568,\"column\":21}},\"type\":\"Identifier\",\"name\":\"x\"}],\"defaults\":[],\"body\":{\"range\":[19925,19964],\"loc\":{\"start\":{\"line\":568,\"column\":23},\"end\":{\"line\":570,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19935,19956],\"loc\":{\"start\":{\"line\":569,\"column\":8},\"end\":{\"line\":569,\"column\":29}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[19942,19955],\"loc\":{\"start\":{\"line\":569,\"column\":15},\"end\":{\"line\":569,\"column\":28}},\"type\":\"CallExpression\",\"callee\":{\"range\":[19942,19952],\"loc\":{\"start\":{\"line\":569,\"column\":15},\"end\":{\"line\":569,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[19942,19943],\"loc\":{\"start\":{\"line\":569,\"column\":15},\"end\":{\"line\":569,\"column\":16}},\"type\":\"Identifier\",\"name\":\"x\"},\"property\":{\"range\":[19944,19952],\"loc\":{\"start\":{\"line\":569,\"column\":17},\"end\":{\"line\":569,\"column\":25}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[{\"range\":[19953,19954],\"loc\":{\"start\":{\"line\":569,\"column\":26},\"end\":{\"line\":569,\"column\":27}},\"type\":\"Literal\",\"value\":8,\"raw\":\"8\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[19972,20030],\"loc\":{\"start\":{\"line\":571,\"column\":6},\"end\":{\"line\":573,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[19972,19975],\"loc\":{\"start\":{\"line\":571,\"column\":6},\"end\":{\"line\":571,\"column\":9}},\"type\":\"Identifier\",\"name\":\"ord\"},\"computed\":false,\"value\":{\"range\":[19977,20030],\"loc\":{\"start\":{\"line\":571,\"column\":11},\"end\":{\"line\":573,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[19986,19987],\"loc\":{\"start\":{\"line\":571,\"column\":20},\"end\":{\"line\":571,\"column\":21}},\"type\":\"Identifier\",\"name\":\"c\"}],\"defaults\":[],\"body\":{\"range\":[19989,20030],\"loc\":{\"start\":{\"line\":571,\"column\":23},\"end\":{\"line\":573,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[19999,20022],\"loc\":{\"start\":{\"line\":572,\"column\":8},\"end\":{\"line\":572,\"column\":31}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[20006,20021],\"loc\":{\"start\":{\"line\":572,\"column\":15},\"end\":{\"line\":572,\"column\":30}},\"type\":\"CallExpression\",\"callee\":{\"range\":[20006,20018],\"loc\":{\"start\":{\"line\":572,\"column\":15},\"end\":{\"line\":572,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20006,20007],\"loc\":{\"start\":{\"line\":572,\"column\":15},\"end\":{\"line\":572,\"column\":16}},\"type\":\"Identifier\",\"name\":\"c\"},\"property\":{\"range\":[20008,20018],\"loc\":{\"start\":{\"line\":572,\"column\":17},\"end\":{\"line\":572,\"column\":27}},\"type\":\"Identifier\",\"name\":\"charCodeAt\"}},\"arguments\":[{\"range\":[20019,20020],\"loc\":{\"start\":{\"line\":572,\"column\":28},\"end\":{\"line\":572,\"column\":29}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[20038,20126],\"loc\":{\"start\":{\"line\":574,\"column\":6},\"end\":{\"line\":576,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[20038,20041],\"loc\":{\"start\":{\"line\":574,\"column\":6},\"end\":{\"line\":574,\"column\":9}},\"type\":\"Identifier\",\"name\":\"pow\"},\"computed\":false,\"value\":{\"range\":[20043,20126],\"loc\":{\"start\":{\"line\":574,\"column\":11},\"end\":{\"line\":576,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[20052,20053],\"loc\":{\"start\":{\"line\":574,\"column\":20},\"end\":{\"line\":574,\"column\":21}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[20055,20056],\"loc\":{\"start\":{\"line\":574,\"column\":23},\"end\":{\"line\":574,\"column\":24}},\"type\":\"Identifier\",\"name\":\"y\"},{\"range\":[20058,20059],\"loc\":{\"start\":{\"line\":574,\"column\":26},\"end\":{\"line\":574,\"column\":27}},\"type\":\"Identifier\",\"name\":\"z\"}],\"defaults\":[],\"body\":{\"range\":[20061,20126],\"loc\":{\"start\":{\"line\":574,\"column\":29},\"end\":{\"line\":576,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[20071,20118],\"loc\":{\"start\":{\"line\":575,\"column\":8},\"end\":{\"line\":575,\"column\":55}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[20078,20117],\"loc\":{\"start\":{\"line\":575,\"column\":15},\"end\":{\"line\":575,\"column\":54}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[20078,20079],\"loc\":{\"start\":{\"line\":575,\"column\":15},\"end\":{\"line\":575,\"column\":16}},\"type\":\"Identifier\",\"name\":\"z\"},\"consequent\":{\"range\":[20082,20100],\"loc\":{\"start\":{\"line\":575,\"column\":19},\"end\":{\"line\":575,\"column\":37}},\"type\":\"BinaryExpression\",\"operator\":\"%\",\"left\":{\"range\":[20082,20096],\"loc\":{\"start\":{\"line\":575,\"column\":19},\"end\":{\"line\":575,\"column\":33}},\"type\":\"CallExpression\",\"callee\":{\"range\":[20082,20090],\"loc\":{\"start\":{\"line\":575,\"column\":19},\"end\":{\"line\":575,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20082,20086],\"loc\":{\"start\":{\"line\":575,\"column\":19},\"end\":{\"line\":575,\"column\":23}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[20087,20090],\"loc\":{\"start\":{\"line\":575,\"column\":24},\"end\":{\"line\":575,\"column\":27}},\"type\":\"Identifier\",\"name\":\"pow\"}},\"arguments\":[{\"range\":[20091,20092],\"loc\":{\"start\":{\"line\":575,\"column\":28},\"end\":{\"line\":575,\"column\":29}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[20094,20095],\"loc\":{\"start\":{\"line\":575,\"column\":31},\"end\":{\"line\":575,\"column\":32}},\"type\":\"Identifier\",\"name\":\"y\"}]},\"right\":{\"range\":[20099,20100],\"loc\":{\"start\":{\"line\":575,\"column\":36},\"end\":{\"line\":575,\"column\":37}},\"type\":\"Identifier\",\"name\":\"z\"}},\"alternate\":{\"range\":[20103,20117],\"loc\":{\"start\":{\"line\":575,\"column\":40},\"end\":{\"line\":575,\"column\":54}},\"type\":\"CallExpression\",\"callee\":{\"range\":[20103,20111],\"loc\":{\"start\":{\"line\":575,\"column\":40},\"end\":{\"line\":575,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20103,20107],\"loc\":{\"start\":{\"line\":575,\"column\":40},\"end\":{\"line\":575,\"column\":44}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[20108,20111],\"loc\":{\"start\":{\"line\":575,\"column\":45},\"end\":{\"line\":575,\"column\":48}},\"type\":\"Identifier\",\"name\":\"pow\"}},\"arguments\":[{\"range\":[20112,20113],\"loc\":{\"start\":{\"line\":575,\"column\":49},\"end\":{\"line\":575,\"column\":50}},\"type\":\"Identifier\",\"name\":\"x\"},{\"range\":[20115,20116],\"loc\":{\"start\":{\"line\":575,\"column\":52},\"end\":{\"line\":575,\"column\":53}},\"type\":\"Identifier\",\"name\":\"y\"}]}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[20134,20317],\"loc\":{\"start\":{\"line\":577,\"column\":6},\"end\":{\"line\":582,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[20134,20139],\"loc\":{\"start\":{\"line\":577,\"column\":6},\"end\":{\"line\":577,\"column\":11}},\"type\":\"Identifier\",\"name\":\"print\"},\"computed\":false,\"value\":{\"range\":[20141,20317],\"loc\":{\"start\":{\"line\":577,\"column\":13},\"end\":{\"line\":582,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[20153,20317],\"loc\":{\"start\":{\"line\":577,\"column\":25},\"end\":{\"line\":582,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[20163,20174],\"loc\":{\"start\":{\"line\":578,\"column\":8},\"end\":{\"line\":578,\"column\":19}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[20167,20173],\"loc\":{\"start\":{\"line\":578,\"column\":12},\"end\":{\"line\":578,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[20167,20168],\"loc\":{\"start\":{\"line\":578,\"column\":12},\"end\":{\"line\":578,\"column\":13}},\"type\":\"Identifier\",\"name\":\"s\"},\"init\":{\"range\":[20171,20173],\"loc\":{\"start\":{\"line\":578,\"column\":16},\"end\":{\"line\":578,\"column\":18}},\"type\":\"Literal\",\"value\":\"\",\"raw\":\"\\\"\\\"\"}}],\"kind\":\"var\"},{\"range\":[20183,20285],\"loc\":{\"start\":{\"line\":579,\"column\":8},\"end\":{\"line\":580,\"column\":59}},\"type\":\"ForStatement\",\"init\":{\"range\":[20188,20197],\"loc\":{\"start\":{\"line\":579,\"column\":13},\"end\":{\"line\":579,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[20192,20197],\"loc\":{\"start\":{\"line\":579,\"column\":17},\"end\":{\"line\":579,\"column\":22}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[20192,20193],\"loc\":{\"start\":{\"line\":579,\"column\":17},\"end\":{\"line\":579,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[20196,20197],\"loc\":{\"start\":{\"line\":579,\"column\":21},\"end\":{\"line\":579,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},\"test\":{\"range\":[20199,20219],\"loc\":{\"start\":{\"line\":579,\"column\":24},\"end\":{\"line\":579,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[20199,20200],\"loc\":{\"start\":{\"line\":579,\"column\":24},\"end\":{\"line\":579,\"column\":25}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[20203,20219],\"loc\":{\"start\":{\"line\":579,\"column\":28},\"end\":{\"line\":579,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20203,20212],\"loc\":{\"start\":{\"line\":579,\"column\":28},\"end\":{\"line\":579,\"column\":37}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[20213,20219],\"loc\":{\"start\":{\"line\":579,\"column\":38},\"end\":{\"line\":579,\"column\":44}},\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"range\":[20221,20224],\"loc\":{\"start\":{\"line\":579,\"column\":46},\"end\":{\"line\":579,\"column\":49}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[20221,20222],\"loc\":{\"start\":{\"line\":579,\"column\":46},\"end\":{\"line\":579,\"column\":47}},\"type\":\"Identifier\",\"name\":\"i\"},\"prefix\":false},\"body\":{\"range\":[20236,20285],\"loc\":{\"start\":{\"line\":580,\"column\":10},\"end\":{\"line\":580,\"column\":59}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20236,20284],\"loc\":{\"start\":{\"line\":580,\"column\":10},\"end\":{\"line\":580,\"column\":58}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[20236,20237],\"loc\":{\"start\":{\"line\":580,\"column\":10},\"end\":{\"line\":580,\"column\":11}},\"type\":\"Identifier\",\"name\":\"s\"},\"right\":{\"range\":[20241,20284],\"loc\":{\"start\":{\"line\":580,\"column\":15},\"end\":{\"line\":580,\"column\":58}},\"type\":\"ConditionalExpression\",\"test\":{\"range\":[20241,20248],\"loc\":{\"start\":{\"line\":580,\"column\":15},\"end\":{\"line\":580,\"column\":22}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[20241,20242],\"loc\":{\"start\":{\"line\":580,\"column\":15},\"end\":{\"line\":580,\"column\":16}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[20247,20248],\"loc\":{\"start\":{\"line\":580,\"column\":21},\"end\":{\"line\":580,\"column\":22}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[20251,20263],\"loc\":{\"start\":{\"line\":580,\"column\":25},\"end\":{\"line\":580,\"column\":37}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[20251,20260],\"loc\":{\"start\":{\"line\":580,\"column\":25},\"end\":{\"line\":580,\"column\":34}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[20261,20262],\"loc\":{\"start\":{\"line\":580,\"column\":35},\"end\":{\"line\":580,\"column\":36}},\"type\":\"Identifier\",\"name\":\"i\"}},\"alternate\":{\"range\":[20266,20284],\"loc\":{\"start\":{\"line\":580,\"column\":40},\"end\":{\"line\":580,\"column\":58}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[20266,20269],\"loc\":{\"start\":{\"line\":580,\"column\":40},\"end\":{\"line\":580,\"column\":43}},\"type\":\"Literal\",\"value\":\" \",\"raw\":\"\\\" \\\"\"},\"right\":{\"range\":[20272,20284],\"loc\":{\"start\":{\"line\":580,\"column\":46},\"end\":{\"line\":580,\"column\":58}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[20272,20281],\"loc\":{\"start\":{\"line\":580,\"column\":46},\"end\":{\"line\":580,\"column\":55}},\"type\":\"Identifier\",\"name\":\"arguments\"},\"property\":{\"range\":[20282,20283],\"loc\":{\"start\":{\"line\":580,\"column\":56},\"end\":{\"line\":580,\"column\":57}},\"type\":\"Identifier\",\"name\":\"i\"}}}}}}},{\"range\":[20294,20309],\"loc\":{\"start\":{\"line\":581,\"column\":8},\"end\":{\"line\":581,\"column\":23}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20294,20308],\"loc\":{\"start\":{\"line\":581,\"column\":8},\"end\":{\"line\":581,\"column\":22}},\"type\":\"CallExpression\",\"callee\":{\"range\":[20294,20305],\"loc\":{\"start\":{\"line\":581,\"column\":8},\"end\":{\"line\":581,\"column\":19}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20294,20301],\"loc\":{\"start\":{\"line\":581,\"column\":8},\"end\":{\"line\":581,\"column\":15}},\"type\":\"Identifier\",\"name\":\"console\"},\"property\":{\"range\":[20302,20305],\"loc\":{\"start\":{\"line\":581,\"column\":16},\"end\":{\"line\":581,\"column\":19}},\"type\":\"Identifier\",\"name\":\"log\"}},\"arguments\":[{\"range\":[20306,20307],\"loc\":{\"start\":{\"line\":581,\"column\":20},\"end\":{\"line\":581,\"column\":21}},\"type\":\"Identifier\",\"name\":\"s\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[20325,20929],\"loc\":{\"start\":{\"line\":583,\"column\":6},\"end\":{\"line\":603,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[20325,20330],\"loc\":{\"start\":{\"line\":583,\"column\":6},\"end\":{\"line\":583,\"column\":11}},\"type\":\"Identifier\",\"name\":\"range\"},\"computed\":false,\"value\":{\"range\":[20332,20929],\"loc\":{\"start\":{\"line\":583,\"column\":13},\"end\":{\"line\":603,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[20342,20347],\"loc\":{\"start\":{\"line\":583,\"column\":23},\"end\":{\"line\":583,\"column\":28}},\"type\":\"Identifier\",\"name\":\"start\"},{\"range\":[20349,20353],\"loc\":{\"start\":{\"line\":583,\"column\":30},\"end\":{\"line\":583,\"column\":34}},\"type\":\"Identifier\",\"name\":\"stop\"},{\"range\":[20355,20359],\"loc\":{\"start\":{\"line\":583,\"column\":36},\"end\":{\"line\":583,\"column\":40}},\"type\":\"Identifier\",\"name\":\"step\"}],\"defaults\":[],\"body\":{\"range\":[20361,20929],\"loc\":{\"start\":{\"line\":583,\"column\":42},\"end\":{\"line\":603,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[20371,20518],\"loc\":{\"start\":{\"line\":584,\"column\":8},\"end\":{\"line\":589,\"column\":46}},\"type\":\"IfStatement\",\"test\":{\"range\":[20375,20393],\"loc\":{\"start\":{\"line\":584,\"column\":12},\"end\":{\"line\":584,\"column\":30}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[20375,20379],\"loc\":{\"start\":{\"line\":584,\"column\":12},\"end\":{\"line\":584,\"column\":16}},\"type\":\"Identifier\",\"name\":\"stop\"},\"right\":{\"range\":[20384,20393],\"loc\":{\"start\":{\"line\":584,\"column\":21},\"end\":{\"line\":584,\"column\":30}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[20395,20471],\"loc\":{\"start\":{\"line\":584,\"column\":32},\"end\":{\"line\":588,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[20407,20420],\"loc\":{\"start\":{\"line\":585,\"column\":10},\"end\":{\"line\":585,\"column\":23}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20407,20419],\"loc\":{\"start\":{\"line\":585,\"column\":10},\"end\":{\"line\":585,\"column\":22}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[20407,20411],\"loc\":{\"start\":{\"line\":585,\"column\":10},\"end\":{\"line\":585,\"column\":14}},\"type\":\"Identifier\",\"name\":\"stop\"},\"right\":{\"range\":[20414,20419],\"loc\":{\"start\":{\"line\":585,\"column\":17},\"end\":{\"line\":585,\"column\":22}},\"type\":\"Identifier\",\"name\":\"start\"}}},{\"range\":[20431,20441],\"loc\":{\"start\":{\"line\":586,\"column\":10},\"end\":{\"line\":586,\"column\":20}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20431,20440],\"loc\":{\"start\":{\"line\":586,\"column\":10},\"end\":{\"line\":586,\"column\":19}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[20431,20436],\"loc\":{\"start\":{\"line\":586,\"column\":10},\"end\":{\"line\":586,\"column\":15}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[20439,20440],\"loc\":{\"start\":{\"line\":586,\"column\":18},\"end\":{\"line\":586,\"column\":19}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}},{\"range\":[20452,20461],\"loc\":{\"start\":{\"line\":587,\"column\":10},\"end\":{\"line\":587,\"column\":19}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20452,20460],\"loc\":{\"start\":{\"line\":587,\"column\":10},\"end\":{\"line\":587,\"column\":18}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[20452,20456],\"loc\":{\"start\":{\"line\":587,\"column\":10},\"end\":{\"line\":587,\"column\":14}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[20459,20460],\"loc\":{\"start\":{\"line\":587,\"column\":17},\"end\":{\"line\":587,\"column\":18}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}}]},\"alternate\":{\"range\":[20485,20518],\"loc\":{\"start\":{\"line\":589,\"column\":13},\"end\":{\"line\":589,\"column\":46}},\"type\":\"IfStatement\",\"test\":{\"range\":[20489,20507],\"loc\":{\"start\":{\"line\":589,\"column\":17},\"end\":{\"line\":589,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[20489,20493],\"loc\":{\"start\":{\"line\":589,\"column\":17},\"end\":{\"line\":589,\"column\":21}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[20498,20507],\"loc\":{\"start\":{\"line\":589,\"column\":26},\"end\":{\"line\":589,\"column\":35}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[20509,20518],\"loc\":{\"start\":{\"line\":589,\"column\":37},\"end\":{\"line\":589,\"column\":46}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20509,20517],\"loc\":{\"start\":{\"line\":589,\"column\":37},\"end\":{\"line\":589,\"column\":45}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[20509,20513],\"loc\":{\"start\":{\"line\":589,\"column\":37},\"end\":{\"line\":589,\"column\":41}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[20516,20517],\"loc\":{\"start\":{\"line\":589,\"column\":44},\"end\":{\"line\":589,\"column\":45}},\"type\":\"Literal\",\"value\":1,\"raw\":\"1\"}}},\"alternate\":null}},{\"range\":[20527,20563],\"loc\":{\"start\":{\"line\":590,\"column\":8},\"end\":{\"line\":590,\"column\":44}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[20531,20562],\"loc\":{\"start\":{\"line\":590,\"column\":12},\"end\":{\"line\":590,\"column\":43}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[20531,20534],\"loc\":{\"start\":{\"line\":590,\"column\":12},\"end\":{\"line\":590,\"column\":15}},\"type\":\"Identifier\",\"name\":\"len\"},\"init\":{\"range\":[20537,20562],\"loc\":{\"start\":{\"line\":590,\"column\":18},\"end\":{\"line\":590,\"column\":43}},\"type\":\"UnaryExpression\",\"operator\":\"~\",\"argument\":{\"range\":[20538,20562],\"loc\":{\"start\":{\"line\":590,\"column\":19},\"end\":{\"line\":590,\"column\":43}},\"type\":\"UnaryExpression\",\"operator\":\"~\",\"argument\":{\"range\":[20540,20561],\"loc\":{\"start\":{\"line\":590,\"column\":21},\"end\":{\"line\":590,\"column\":42}},\"type\":\"BinaryExpression\",\"operator\":\"/\",\"left\":{\"range\":[20541,20553],\"loc\":{\"start\":{\"line\":590,\"column\":22},\"end\":{\"line\":590,\"column\":34}},\"type\":\"BinaryExpression\",\"operator\":\"-\",\"left\":{\"range\":[20541,20545],\"loc\":{\"start\":{\"line\":590,\"column\":22},\"end\":{\"line\":590,\"column\":26}},\"type\":\"Identifier\",\"name\":\"stop\"},\"right\":{\"range\":[20548,20553],\"loc\":{\"start\":{\"line\":590,\"column\":29},\"end\":{\"line\":590,\"column\":34}},\"type\":\"Identifier\",\"name\":\"start\"}},\"right\":{\"range\":[20557,20561],\"loc\":{\"start\":{\"line\":590,\"column\":38},\"end\":{\"line\":590,\"column\":42}},\"type\":\"Identifier\",\"name\":\"step\"}},\"prefix\":true},\"prefix\":true}}],\"kind\":\"var\"},{\"range\":[20593,20653],\"loc\":{\"start\":{\"line\":591,\"column\":8},\"end\":{\"line\":591,\"column\":68}},\"type\":\"IfStatement\",\"test\":{\"range\":[20598,20605],\"loc\":{\"start\":{\"line\":591,\"column\":13},\"end\":{\"line\":591,\"column\":20}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[20598,20601],\"loc\":{\"start\":{\"line\":591,\"column\":13},\"end\":{\"line\":591,\"column\":16}},\"type\":\"Identifier\",\"name\":\"len\"},\"right\":{\"range\":[20604,20605],\"loc\":{\"start\":{\"line\":591,\"column\":19},\"end\":{\"line\":591,\"column\":20}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}},\"consequent\":{\"range\":[20608,20653],\"loc\":{\"start\":{\"line\":591,\"column\":23},\"end\":{\"line\":591,\"column\":68}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[20615,20652],\"loc\":{\"start\":{\"line\":591,\"column\":30},\"end\":{\"line\":591,\"column\":67}},\"type\":\"CallExpression\",\"callee\":{\"range\":[20615,20648],\"loc\":{\"start\":{\"line\":591,\"column\":30},\"end\":{\"line\":591,\"column\":63}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20615,20634],\"loc\":{\"start\":{\"line\":591,\"column\":30},\"end\":{\"line\":591,\"column\":49}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20615,20628],\"loc\":{\"start\":{\"line\":591,\"column\":30},\"end\":{\"line\":591,\"column\":43}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[20629,20634],\"loc\":{\"start\":{\"line\":591,\"column\":44},\"end\":{\"line\":591,\"column\":49}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[20635,20648],\"loc\":{\"start\":{\"line\":591,\"column\":50},\"end\":{\"line\":591,\"column\":63}},\"type\":\"Identifier\",\"name\":\"convertToList\"}},\"arguments\":[{\"range\":[20649,20651],\"loc\":{\"start\":{\"line\":591,\"column\":64},\"end\":{\"line\":591,\"column\":66}},\"type\":\"ArrayExpression\",\"elements\":[]}]}},\"alternate\":null},{\"range\":[20662,20685],\"loc\":{\"start\":{\"line\":592,\"column\":8},\"end\":{\"line\":592,\"column\":31}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[20666,20684],\"loc\":{\"start\":{\"line\":592,\"column\":12},\"end\":{\"line\":592,\"column\":30}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[20666,20667],\"loc\":{\"start\":{\"line\":592,\"column\":12},\"end\":{\"line\":592,\"column\":13}},\"type\":\"Identifier\",\"name\":\"r\"},\"init\":{\"range\":[20670,20684],\"loc\":{\"start\":{\"line\":592,\"column\":16},\"end\":{\"line\":592,\"column\":30}},\"type\":\"NewExpression\",\"callee\":{\"range\":[20674,20679],\"loc\":{\"start\":{\"line\":592,\"column\":20},\"end\":{\"line\":592,\"column\":25}},\"type\":\"Identifier\",\"name\":\"Array\"},\"arguments\":[{\"range\":[20680,20683],\"loc\":{\"start\":{\"line\":592,\"column\":26},\"end\":{\"line\":592,\"column\":29}},\"type\":\"Identifier\",\"name\":\"len\"}]}}],\"kind\":\"var\"},{\"range\":[20694,20710],\"loc\":{\"start\":{\"line\":593,\"column\":8},\"end\":{\"line\":593,\"column\":24}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[20698,20709],\"loc\":{\"start\":{\"line\":593,\"column\":12},\"end\":{\"line\":593,\"column\":23}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[20698,20705],\"loc\":{\"start\":{\"line\":593,\"column\":12},\"end\":{\"line\":593,\"column\":19}},\"type\":\"Identifier\",\"name\":\"element\"},\"init\":{\"range\":[20708,20709],\"loc\":{\"start\":{\"line\":593,\"column\":22},\"end\":{\"line\":593,\"column\":23}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}],\"kind\":\"var\"},{\"range\":[20720,20734],\"loc\":{\"start\":{\"line\":595,\"column\":8},\"end\":{\"line\":595,\"column\":22}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[20724,20733],\"loc\":{\"start\":{\"line\":595,\"column\":12},\"end\":{\"line\":595,\"column\":21}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[20724,20725],\"loc\":{\"start\":{\"line\":595,\"column\":12},\"end\":{\"line\":595,\"column\":13}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"range\":[20728,20733],\"loc\":{\"start\":{\"line\":595,\"column\":16},\"end\":{\"line\":595,\"column\":21}},\"type\":\"Identifier\",\"name\":\"start\"}}],\"kind\":\"var\"},{\"range\":[20743,20856],\"loc\":{\"start\":{\"line\":596,\"column\":8},\"end\":{\"line\":599,\"column\":9}},\"type\":\"WhileStatement\",\"test\":{\"range\":[20750,20794],\"loc\":{\"start\":{\"line\":596,\"column\":15},\"end\":{\"line\":596,\"column\":59}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[20750,20770],\"loc\":{\"start\":{\"line\":596,\"column\":15},\"end\":{\"line\":596,\"column\":35}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[20750,20758],\"loc\":{\"start\":{\"line\":596,\"column\":15},\"end\":{\"line\":596,\"column\":23}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[20750,20751],\"loc\":{\"start\":{\"line\":596,\"column\":15},\"end\":{\"line\":596,\"column\":16}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[20754,20758],\"loc\":{\"start\":{\"line\":596,\"column\":19},\"end\":{\"line\":596,\"column\":23}},\"type\":\"Identifier\",\"name\":\"stop\"}},\"right\":{\"range\":[20762,20770],\"loc\":{\"start\":{\"line\":596,\"column\":27},\"end\":{\"line\":596,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"range\":[20762,20766],\"loc\":{\"start\":{\"line\":596,\"column\":27},\"end\":{\"line\":596,\"column\":31}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[20769,20770],\"loc\":{\"start\":{\"line\":596,\"column\":34},\"end\":{\"line\":596,\"column\":35}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}},\"right\":{\"range\":[20774,20794],\"loc\":{\"start\":{\"line\":596,\"column\":39},\"end\":{\"line\":596,\"column\":59}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[20774,20782],\"loc\":{\"start\":{\"line\":596,\"column\":39},\"end\":{\"line\":596,\"column\":47}},\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"range\":[20774,20775],\"loc\":{\"start\":{\"line\":596,\"column\":39},\"end\":{\"line\":596,\"column\":40}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[20778,20782],\"loc\":{\"start\":{\"line\":596,\"column\":43},\"end\":{\"line\":596,\"column\":47}},\"type\":\"Identifier\",\"name\":\"stop\"}},\"right\":{\"range\":[20786,20794],\"loc\":{\"start\":{\"line\":596,\"column\":51},\"end\":{\"line\":596,\"column\":59}},\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"range\":[20786,20790],\"loc\":{\"start\":{\"line\":596,\"column\":51},\"end\":{\"line\":596,\"column\":55}},\"type\":\"Identifier\",\"name\":\"step\"},\"right\":{\"range\":[20793,20794],\"loc\":{\"start\":{\"line\":596,\"column\":58},\"end\":{\"line\":596,\"column\":59}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}},\"body\":{\"range\":[20796,20856],\"loc\":{\"start\":{\"line\":596,\"column\":61},\"end\":{\"line\":599,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[20808,20825],\"loc\":{\"start\":{\"line\":597,\"column\":10},\"end\":{\"line\":597,\"column\":27}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20808,20824],\"loc\":{\"start\":{\"line\":597,\"column\":10},\"end\":{\"line\":597,\"column\":26}},\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"range\":[20808,20820],\"loc\":{\"start\":{\"line\":597,\"column\":10},\"end\":{\"line\":597,\"column\":22}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[20808,20809],\"loc\":{\"start\":{\"line\":597,\"column\":10},\"end\":{\"line\":597,\"column\":11}},\"type\":\"Identifier\",\"name\":\"r\"},\"property\":{\"range\":[20810,20819],\"loc\":{\"start\":{\"line\":597,\"column\":12},\"end\":{\"line\":597,\"column\":21}},\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"range\":[20810,20817],\"loc\":{\"start\":{\"line\":597,\"column\":12},\"end\":{\"line\":597,\"column\":19}},\"type\":\"Identifier\",\"name\":\"element\"},\"prefix\":false}},\"right\":{\"range\":[20823,20824],\"loc\":{\"start\":{\"line\":597,\"column\":25},\"end\":{\"line\":597,\"column\":26}},\"type\":\"Identifier\",\"name\":\"i\"}}},{\"range\":[20836,20846],\"loc\":{\"start\":{\"line\":598,\"column\":10},\"end\":{\"line\":598,\"column\":20}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20836,20845],\"loc\":{\"start\":{\"line\":598,\"column\":10},\"end\":{\"line\":598,\"column\":19}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[20836,20837],\"loc\":{\"start\":{\"line\":598,\"column\":10},\"end\":{\"line\":598,\"column\":11}},\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"range\":[20841,20845],\"loc\":{\"start\":{\"line\":598,\"column\":15},\"end\":{\"line\":598,\"column\":19}},\"type\":\"Identifier\",\"name\":\"step\"}}}]}},{\"range\":[20866,20903],\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":45}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[20866,20902],\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":44}},\"type\":\"CallExpression\",\"callee\":{\"range\":[20866,20899],\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":41}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20866,20885],\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[20866,20879],\"loc\":{\"start\":{\"line\":601,\"column\":8},\"end\":{\"line\":601,\"column\":21}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[20880,20885],\"loc\":{\"start\":{\"line\":601,\"column\":22},\"end\":{\"line\":601,\"column\":27}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[20886,20899],\"loc\":{\"start\":{\"line\":601,\"column\":28},\"end\":{\"line\":601,\"column\":41}},\"type\":\"Identifier\",\"name\":\"convertToList\"}},\"arguments\":[{\"range\":[20900,20901],\"loc\":{\"start\":{\"line\":601,\"column\":42},\"end\":{\"line\":601,\"column\":43}},\"type\":\"Identifier\",\"name\":\"r\"}]}},{\"range\":[20912,20921],\"loc\":{\"start\":{\"line\":602,\"column\":8},\"end\":{\"line\":602,\"column\":17}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[20919,20920],\"loc\":{\"start\":{\"line\":602,\"column\":15},\"end\":{\"line\":602,\"column\":16}},\"type\":\"Identifier\",\"name\":\"r\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[20937,21448],\"loc\":{\"start\":{\"line\":604,\"column\":6},\"end\":{\"line\":610,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[20937,20941],\"loc\":{\"start\":{\"line\":604,\"column\":6},\"end\":{\"line\":604,\"column\":10}},\"type\":\"Identifier\",\"name\":\"repr\"},\"computed\":false,\"value\":{\"range\":[20943,21448],\"loc\":{\"start\":{\"line\":604,\"column\":12},\"end\":{\"line\":610,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[20953,20956],\"loc\":{\"start\":{\"line\":604,\"column\":22},\"end\":{\"line\":604,\"column\":25}},\"type\":\"Identifier\",\"name\":\"obj\"}],\"defaults\":[],\"body\":{\"range\":[20958,21448],\"loc\":{\"start\":{\"line\":604,\"column\":27},\"end\":{\"line\":610,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[20968,21020],\"loc\":{\"start\":{\"line\":605,\"column\":8},\"end\":{\"line\":605,\"column\":60}},\"type\":\"IfStatement\",\"test\":{\"range\":[20972,20995],\"loc\":{\"start\":{\"line\":605,\"column\":12},\"end\":{\"line\":605,\"column\":35}},\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"range\":[20972,20982],\"loc\":{\"start\":{\"line\":605,\"column\":12},\"end\":{\"line\":605,\"column\":22}},\"type\":\"UnaryExpression\",\"operator\":\"typeof\",\"argument\":{\"range\":[20979,20982],\"loc\":{\"start\":{\"line\":605,\"column\":19},\"end\":{\"line\":605,\"column\":22}},\"type\":\"Identifier\",\"name\":\"obj\"},\"prefix\":true},\"right\":{\"range\":[20987,20995],\"loc\":{\"start\":{\"line\":605,\"column\":27},\"end\":{\"line\":605,\"column\":35}},\"type\":\"Literal\",\"value\":\"string\",\"raw\":\"'string'\"}},\"consequent\":{\"range\":[20997,21020],\"loc\":{\"start\":{\"line\":605,\"column\":37},\"end\":{\"line\":605,\"column\":60}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21004,21019],\"loc\":{\"start\":{\"line\":605,\"column\":44},\"end\":{\"line\":605,\"column\":59}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[21004,21013],\"loc\":{\"start\":{\"line\":605,\"column\":44},\"end\":{\"line\":605,\"column\":53}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[21004,21007],\"loc\":{\"start\":{\"line\":605,\"column\":44},\"end\":{\"line\":605,\"column\":47}},\"type\":\"Literal\",\"value\":\"'\",\"raw\":\"\\\"'\\\"\"},\"right\":{\"range\":[21010,21013],\"loc\":{\"start\":{\"line\":605,\"column\":50},\"end\":{\"line\":605,\"column\":53}},\"type\":\"Identifier\",\"name\":\"obj\"}},\"right\":{\"range\":[21016,21019],\"loc\":{\"start\":{\"line\":605,\"column\":56},\"end\":{\"line\":605,\"column\":59}},\"type\":\"Literal\",\"value\":\"'\",\"raw\":\"\\\"'\\\"\"}}},\"alternate\":null},{\"range\":[21071,21360],\"loc\":{\"start\":{\"line\":606,\"column\":8},\"end\":{\"line\":609,\"column\":37}},\"type\":\"IfStatement\",\"test\":{\"range\":[21075,21101],\"loc\":{\"start\":{\"line\":606,\"column\":12},\"end\":{\"line\":606,\"column\":38}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[21075,21087],\"loc\":{\"start\":{\"line\":606,\"column\":12},\"end\":{\"line\":606,\"column\":24}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21075,21078],\"loc\":{\"start\":{\"line\":606,\"column\":12},\"end\":{\"line\":606,\"column\":15}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21079,21087],\"loc\":{\"start\":{\"line\":606,\"column\":16},\"end\":{\"line\":606,\"column\":24}},\"type\":\"Identifier\",\"name\":\"__repr__\"}},\"right\":{\"range\":[21092,21101],\"loc\":{\"start\":{\"line\":606,\"column\":29},\"end\":{\"line\":606,\"column\":38}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"consequent\":{\"range\":[21103,21125],\"loc\":{\"start\":{\"line\":606,\"column\":40},\"end\":{\"line\":606,\"column\":62}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21110,21124],\"loc\":{\"start\":{\"line\":606,\"column\":47},\"end\":{\"line\":606,\"column\":61}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21110,21122],\"loc\":{\"start\":{\"line\":606,\"column\":47},\"end\":{\"line\":606,\"column\":59}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21110,21113],\"loc\":{\"start\":{\"line\":606,\"column\":47},\"end\":{\"line\":606,\"column\":50}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21114,21122],\"loc\":{\"start\":{\"line\":606,\"column\":51},\"end\":{\"line\":606,\"column\":59}},\"type\":\"Identifier\",\"name\":\"__repr__\"}},\"arguments\":[]}},\"alternate\":{\"range\":[21139,21360],\"loc\":{\"start\":{\"line\":607,\"column\":13},\"end\":{\"line\":609,\"column\":37}},\"type\":\"IfStatement\",\"test\":{\"range\":[21143,21234],\"loc\":{\"start\":{\"line\":607,\"column\":17},\"end\":{\"line\":607,\"column\":108}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[21143,21208],\"loc\":{\"start\":{\"line\":607,\"column\":17},\"end\":{\"line\":607,\"column\":82}},\"type\":\"LogicalExpression\",\"operator\":\"&&\",\"left\":{\"range\":[21143,21170],\"loc\":{\"start\":{\"line\":607,\"column\":17},\"end\":{\"line\":607,\"column\":44}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[21143,21156],\"loc\":{\"start\":{\"line\":607,\"column\":17},\"end\":{\"line\":607,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21143,21146],\"loc\":{\"start\":{\"line\":607,\"column\":17},\"end\":{\"line\":607,\"column\":20}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21147,21156],\"loc\":{\"start\":{\"line\":607,\"column\":21},\"end\":{\"line\":607,\"column\":30}},\"type\":\"Identifier\",\"name\":\"__class__\"}},\"right\":{\"range\":[21161,21170],\"loc\":{\"start\":{\"line\":607,\"column\":35},\"end\":{\"line\":607,\"column\":44}},\"type\":\"Identifier\",\"name\":\"undefined\"}},\"right\":{\"range\":[21174,21208],\"loc\":{\"start\":{\"line\":607,\"column\":48},\"end\":{\"line\":607,\"column\":82}},\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"range\":[21174,21194],\"loc\":{\"start\":{\"line\":607,\"column\":48},\"end\":{\"line\":607,\"column\":68}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21174,21187],\"loc\":{\"start\":{\"line\":607,\"column\":48},\"end\":{\"line\":607,\"column\":61}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21174,21177],\"loc\":{\"start\":{\"line\":607,\"column\":48},\"end\":{\"line\":607,\"column\":51}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21178,21187],\"loc\":{\"start\":{\"line\":607,\"column\":52},\"end\":{\"line\":607,\"column\":61}},\"type\":\"Identifier\",\"name\":\"__class__\"}},\"property\":{\"range\":[21188,21194],\"loc\":{\"start\":{\"line\":607,\"column\":62},\"end\":{\"line\":607,\"column\":68}},\"type\":\"Identifier\",\"name\":\"module\"}},\"right\":{\"range\":[21199,21208],\"loc\":{\"start\":{\"line\":607,\"column\":73},\"end\":{\"line\":607,\"column\":82}},\"type\":\"Identifier\",\"name\":\"undefined\"}}},\"right\":{\"range\":[21212,21234],\"loc\":{\"start\":{\"line\":607,\"column\":86},\"end\":{\"line\":607,\"column\":108}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21212,21225],\"loc\":{\"start\":{\"line\":607,\"column\":86},\"end\":{\"line\":607,\"column\":99}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21212,21215],\"loc\":{\"start\":{\"line\":607,\"column\":86},\"end\":{\"line\":607,\"column\":89}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21216,21225],\"loc\":{\"start\":{\"line\":607,\"column\":90},\"end\":{\"line\":607,\"column\":99}},\"type\":\"Identifier\",\"name\":\"__class__\"}},\"property\":{\"range\":[21226,21234],\"loc\":{\"start\":{\"line\":607,\"column\":100},\"end\":{\"line\":607,\"column\":108}},\"type\":\"Identifier\",\"name\":\"__name__\"}}},\"consequent\":{\"range\":[21236,21332],\"loc\":{\"start\":{\"line\":607,\"column\":110},\"end\":{\"line\":609,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[21248,21322],\"loc\":{\"start\":{\"line\":608,\"column\":10},\"end\":{\"line\":608,\"column\":84}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21255,21321],\"loc\":{\"start\":{\"line\":608,\"column\":17},\"end\":{\"line\":608,\"column\":83}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[21255,21310],\"loc\":{\"start\":{\"line\":608,\"column\":17},\"end\":{\"line\":608,\"column\":72}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[21255,21287],\"loc\":{\"start\":{\"line\":608,\"column\":17},\"end\":{\"line\":608,\"column\":49}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[21255,21283],\"loc\":{\"start\":{\"line\":608,\"column\":17},\"end\":{\"line\":608,\"column\":45}},\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"range\":[21255,21258],\"loc\":{\"start\":{\"line\":608,\"column\":17},\"end\":{\"line\":608,\"column\":20}},\"type\":\"Literal\",\"value\":\"<\",\"raw\":\"'<'\"},\"right\":{\"range\":[21259,21283],\"loc\":{\"start\":{\"line\":608,\"column\":21},\"end\":{\"line\":608,\"column\":45}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21259,21272],\"loc\":{\"start\":{\"line\":608,\"column\":21},\"end\":{\"line\":608,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21259,21262],\"loc\":{\"start\":{\"line\":608,\"column\":21},\"end\":{\"line\":608,\"column\":24}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21263,21272],\"loc\":{\"start\":{\"line\":608,\"column\":25},\"end\":{\"line\":608,\"column\":34}},\"type\":\"Identifier\",\"name\":\"__class__\"}},\"property\":{\"range\":[21273,21283],\"loc\":{\"start\":{\"line\":608,\"column\":35},\"end\":{\"line\":608,\"column\":45}},\"type\":\"Identifier\",\"name\":\"__module__\"}}},\"right\":{\"range\":[21284,21287],\"loc\":{\"start\":{\"line\":608,\"column\":46},\"end\":{\"line\":608,\"column\":49}},\"type\":\"Literal\",\"value\":\".\",\"raw\":\"'.'\"}},\"right\":{\"range\":[21288,21310],\"loc\":{\"start\":{\"line\":608,\"column\":50},\"end\":{\"line\":608,\"column\":72}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21288,21301],\"loc\":{\"start\":{\"line\":608,\"column\":50},\"end\":{\"line\":608,\"column\":63}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21288,21291],\"loc\":{\"start\":{\"line\":608,\"column\":50},\"end\":{\"line\":608,\"column\":53}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21292,21301],\"loc\":{\"start\":{\"line\":608,\"column\":54},\"end\":{\"line\":608,\"column\":63}},\"type\":\"Identifier\",\"name\":\"__class__\"}},\"property\":{\"range\":[21302,21310],\"loc\":{\"start\":{\"line\":608,\"column\":64},\"end\":{\"line\":608,\"column\":72}},\"type\":\"Identifier\",\"name\":\"__name__\"}}},\"right\":{\"range\":[21311,21321],\"loc\":{\"start\":{\"line\":608,\"column\":73},\"end\":{\"line\":608,\"column\":83}},\"type\":\"Literal\",\"value\":\" object>\",\"raw\":\"' object>'\"}}}]},\"alternate\":{\"range\":[21338,21360],\"loc\":{\"start\":{\"line\":609,\"column\":15},\"end\":{\"line\":609,\"column\":37}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21345,21359],\"loc\":{\"start\":{\"line\":609,\"column\":22},\"end\":{\"line\":609,\"column\":36}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21345,21357],\"loc\":{\"start\":{\"line\":609,\"column\":22},\"end\":{\"line\":609,\"column\":34}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21345,21348],\"loc\":{\"start\":{\"line\":609,\"column\":22},\"end\":{\"line\":609,\"column\":25}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[21349,21357],\"loc\":{\"start\":{\"line\":609,\"column\":26},\"end\":{\"line\":609,\"column\":34}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[]}}}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[21456,21617],\"loc\":{\"start\":{\"line\":611,\"column\":6},\"end\":{\"line\":615,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[21456,21464],\"loc\":{\"start\":{\"line\":611,\"column\":6},\"end\":{\"line\":611,\"column\":14}},\"type\":\"Identifier\",\"name\":\"reversed\"},\"computed\":false,\"value\":{\"range\":[21466,21617],\"loc\":{\"start\":{\"line\":611,\"column\":16},\"end\":{\"line\":615,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[21476,21479],\"loc\":{\"start\":{\"line\":611,\"column\":26},\"end\":{\"line\":611,\"column\":29}},\"type\":\"Identifier\",\"name\":\"seq\"}],\"defaults\":[],\"body\":{\"range\":[21481,21617],\"loc\":{\"start\":{\"line\":611,\"column\":31},\"end\":{\"line\":615,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[21491,21534],\"loc\":{\"start\":{\"line\":612,\"column\":8},\"end\":{\"line\":612,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[21495,21533],\"loc\":{\"start\":{\"line\":612,\"column\":12},\"end\":{\"line\":612,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[21495,21498],\"loc\":{\"start\":{\"line\":612,\"column\":12},\"end\":{\"line\":612,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[21501,21533],\"loc\":{\"start\":{\"line\":612,\"column\":18},\"end\":{\"line\":612,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[21505,21531],\"loc\":{\"start\":{\"line\":612,\"column\":22},\"end\":{\"line\":612,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21505,21526],\"loc\":{\"start\":{\"line\":612,\"column\":22},\"end\":{\"line\":612,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21505,21518],\"loc\":{\"start\":{\"line\":612,\"column\":22},\"end\":{\"line\":612,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[21519,21526],\"loc\":{\"start\":{\"line\":612,\"column\":36},\"end\":{\"line\":612,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[21527,21531],\"loc\":{\"start\":{\"line\":612,\"column\":44},\"end\":{\"line\":612,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[21543,21579],\"loc\":{\"start\":{\"line\":613,\"column\":8},\"end\":{\"line\":613,\"column\":44}},\"type\":\"ForInStatement\",\"left\":{\"range\":[21548,21553],\"loc\":{\"start\":{\"line\":613,\"column\":13},\"end\":{\"line\":613,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[21552,21553],\"loc\":{\"start\":{\"line\":613,\"column\":17},\"end\":{\"line\":613,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[21552,21553],\"loc\":{\"start\":{\"line\":613,\"column\":17},\"end\":{\"line\":613,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[21557,21560],\"loc\":{\"start\":{\"line\":613,\"column\":22},\"end\":{\"line\":613,\"column\":25}},\"type\":\"Identifier\",\"name\":\"seq\"},\"body\":{\"range\":[21562,21579],\"loc\":{\"start\":{\"line\":613,\"column\":27},\"end\":{\"line\":613,\"column\":44}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[21562,21578],\"loc\":{\"start\":{\"line\":613,\"column\":27},\"end\":{\"line\":613,\"column\":43}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21562,21570],\"loc\":{\"start\":{\"line\":613,\"column\":27},\"end\":{\"line\":613,\"column\":35}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21562,21565],\"loc\":{\"start\":{\"line\":613,\"column\":27},\"end\":{\"line\":613,\"column\":30}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[21566,21570],\"loc\":{\"start\":{\"line\":613,\"column\":31},\"end\":{\"line\":613,\"column\":35}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[21571,21577],\"loc\":{\"start\":{\"line\":613,\"column\":36},\"end\":{\"line\":613,\"column\":42}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[21571,21574],\"loc\":{\"start\":{\"line\":613,\"column\":36},\"end\":{\"line\":613,\"column\":39}},\"type\":\"Identifier\",\"name\":\"seq\"},\"property\":{\"range\":[21575,21576],\"loc\":{\"start\":{\"line\":613,\"column\":40},\"end\":{\"line\":613,\"column\":41}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"each\":false},{\"range\":[21588,21609],\"loc\":{\"start\":{\"line\":614,\"column\":8},\"end\":{\"line\":614,\"column\":29}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21595,21608],\"loc\":{\"start\":{\"line\":614,\"column\":15},\"end\":{\"line\":614,\"column\":28}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21595,21606],\"loc\":{\"start\":{\"line\":614,\"column\":15},\"end\":{\"line\":614,\"column\":26}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21595,21598],\"loc\":{\"start\":{\"line\":614,\"column\":15},\"end\":{\"line\":614,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[21599,21606],\"loc\":{\"start\":{\"line\":614,\"column\":19},\"end\":{\"line\":614,\"column\":26}},\"type\":\"Identifier\",\"name\":\"reverse\"}},\"arguments\":[]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[21625,21825],\"loc\":{\"start\":{\"line\":616,\"column\":6},\"end\":{\"line\":622,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[21625,21630],\"loc\":{\"start\":{\"line\":616,\"column\":6},\"end\":{\"line\":616,\"column\":11}},\"type\":\"Identifier\",\"name\":\"round\"},\"computed\":false,\"value\":{\"range\":[21632,21825],\"loc\":{\"start\":{\"line\":616,\"column\":13},\"end\":{\"line\":622,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[21642,21645],\"loc\":{\"start\":{\"line\":616,\"column\":23},\"end\":{\"line\":616,\"column\":26}},\"type\":\"Identifier\",\"name\":\"num\"},{\"range\":[21647,21654],\"loc\":{\"start\":{\"line\":616,\"column\":28},\"end\":{\"line\":616,\"column\":35}},\"type\":\"Identifier\",\"name\":\"ndigits\"}],\"defaults\":[],\"body\":{\"range\":[21656,21825],\"loc\":{\"start\":{\"line\":616,\"column\":37},\"end\":{\"line\":622,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[21666,21785],\"loc\":{\"start\":{\"line\":617,\"column\":8},\"end\":{\"line\":620,\"column\":9}},\"type\":\"IfStatement\",\"test\":{\"range\":[21670,21677],\"loc\":{\"start\":{\"line\":617,\"column\":12},\"end\":{\"line\":617,\"column\":19}},\"type\":\"Identifier\",\"name\":\"ndigits\"},\"consequent\":{\"range\":[21679,21785],\"loc\":{\"start\":{\"line\":617,\"column\":21},\"end\":{\"line\":620,\"column\":9}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[21691,21725],\"loc\":{\"start\":{\"line\":618,\"column\":10},\"end\":{\"line\":618,\"column\":44}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[21695,21724],\"loc\":{\"start\":{\"line\":618,\"column\":14},\"end\":{\"line\":618,\"column\":43}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[21695,21700],\"loc\":{\"start\":{\"line\":618,\"column\":14},\"end\":{\"line\":618,\"column\":19}},\"type\":\"Identifier\",\"name\":\"scale\"},\"init\":{\"range\":[21703,21724],\"loc\":{\"start\":{\"line\":618,\"column\":22},\"end\":{\"line\":618,\"column\":43}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21703,21711],\"loc\":{\"start\":{\"line\":618,\"column\":22},\"end\":{\"line\":618,\"column\":30}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21703,21707],\"loc\":{\"start\":{\"line\":618,\"column\":22},\"end\":{\"line\":618,\"column\":26}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[21708,21711],\"loc\":{\"start\":{\"line\":618,\"column\":27},\"end\":{\"line\":618,\"column\":30}},\"type\":\"Identifier\",\"name\":\"pow\"}},\"arguments\":[{\"range\":[21712,21714],\"loc\":{\"start\":{\"line\":618,\"column\":31},\"end\":{\"line\":618,\"column\":33}},\"type\":\"Literal\",\"value\":10,\"raw\":\"10\"},{\"range\":[21716,21723],\"loc\":{\"start\":{\"line\":618,\"column\":35},\"end\":{\"line\":618,\"column\":42}},\"type\":\"Identifier\",\"name\":\"ndigits\"}]}}],\"kind\":\"var\"},{\"range\":[21736,21775],\"loc\":{\"start\":{\"line\":619,\"column\":10},\"end\":{\"line\":619,\"column\":49}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21743,21774],\"loc\":{\"start\":{\"line\":619,\"column\":17},\"end\":{\"line\":619,\"column\":48}},\"type\":\"BinaryExpression\",\"operator\":\"/\",\"left\":{\"range\":[21743,21766],\"loc\":{\"start\":{\"line\":619,\"column\":17},\"end\":{\"line\":619,\"column\":40}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21743,21753],\"loc\":{\"start\":{\"line\":619,\"column\":17},\"end\":{\"line\":619,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21743,21747],\"loc\":{\"start\":{\"line\":619,\"column\":17},\"end\":{\"line\":619,\"column\":21}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[21748,21753],\"loc\":{\"start\":{\"line\":619,\"column\":22},\"end\":{\"line\":619,\"column\":27}},\"type\":\"Identifier\",\"name\":\"round\"}},\"arguments\":[{\"range\":[21754,21765],\"loc\":{\"start\":{\"line\":619,\"column\":28},\"end\":{\"line\":619,\"column\":39}},\"type\":\"BinaryExpression\",\"operator\":\"*\",\"left\":{\"range\":[21754,21757],\"loc\":{\"start\":{\"line\":619,\"column\":28},\"end\":{\"line\":619,\"column\":31}},\"type\":\"Identifier\",\"name\":\"num\"},\"right\":{\"range\":[21760,21765],\"loc\":{\"start\":{\"line\":619,\"column\":34},\"end\":{\"line\":619,\"column\":39}},\"type\":\"Identifier\",\"name\":\"scale\"}}]},\"right\":{\"range\":[21769,21774],\"loc\":{\"start\":{\"line\":619,\"column\":43},\"end\":{\"line\":619,\"column\":48}},\"type\":\"Identifier\",\"name\":\"scale\"}}}]},\"alternate\":null},{\"range\":[21794,21817],\"loc\":{\"start\":{\"line\":621,\"column\":8},\"end\":{\"line\":621,\"column\":31}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[21801,21816],\"loc\":{\"start\":{\"line\":621,\"column\":15},\"end\":{\"line\":621,\"column\":30}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21801,21811],\"loc\":{\"start\":{\"line\":621,\"column\":15},\"end\":{\"line\":621,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21801,21805],\"loc\":{\"start\":{\"line\":621,\"column\":15},\"end\":{\"line\":621,\"column\":19}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[21806,21811],\"loc\":{\"start\":{\"line\":621,\"column\":20},\"end\":{\"line\":621,\"column\":25}},\"type\":\"Identifier\",\"name\":\"round\"}},\"arguments\":[{\"range\":[21812,21815],\"loc\":{\"start\":{\"line\":621,\"column\":26},\"end\":{\"line\":621,\"column\":29}},\"type\":\"Identifier\",\"name\":\"num\"}]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[21833,22095],\"loc\":{\"start\":{\"line\":623,\"column\":6},\"end\":{\"line\":629,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[21833,21839],\"loc\":{\"start\":{\"line\":623,\"column\":6},\"end\":{\"line\":623,\"column\":12}},\"type\":\"Identifier\",\"name\":\"sorted\"},\"computed\":false,\"value\":{\"range\":[21841,22095],\"loc\":{\"start\":{\"line\":623,\"column\":14},\"end\":{\"line\":629,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[21851,21859],\"loc\":{\"start\":{\"line\":623,\"column\":24},\"end\":{\"line\":623,\"column\":32}},\"type\":\"Identifier\",\"name\":\"iterable\"},{\"range\":[21861,21864],\"loc\":{\"start\":{\"line\":623,\"column\":34},\"end\":{\"line\":623,\"column\":37}},\"type\":\"Identifier\",\"name\":\"key\"},{\"range\":[21866,21873],\"loc\":{\"start\":{\"line\":623,\"column\":39},\"end\":{\"line\":623,\"column\":46}},\"type\":\"Identifier\",\"name\":\"reverse\"}],\"defaults\":[],\"body\":{\"range\":[21875,22095],\"loc\":{\"start\":{\"line\":623,\"column\":48},\"end\":{\"line\":629,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[21885,21928],\"loc\":{\"start\":{\"line\":624,\"column\":8},\"end\":{\"line\":624,\"column\":51}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[21889,21927],\"loc\":{\"start\":{\"line\":624,\"column\":12},\"end\":{\"line\":624,\"column\":50}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[21889,21892],\"loc\":{\"start\":{\"line\":624,\"column\":12},\"end\":{\"line\":624,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[21895,21927],\"loc\":{\"start\":{\"line\":624,\"column\":18},\"end\":{\"line\":624,\"column\":50}},\"type\":\"NewExpression\",\"callee\":{\"range\":[21899,21925],\"loc\":{\"start\":{\"line\":624,\"column\":22},\"end\":{\"line\":624,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21899,21920],\"loc\":{\"start\":{\"line\":624,\"column\":22},\"end\":{\"line\":624,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21899,21912],\"loc\":{\"start\":{\"line\":624,\"column\":22},\"end\":{\"line\":624,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[21913,21920],\"loc\":{\"start\":{\"line\":624,\"column\":36},\"end\":{\"line\":624,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[21921,21925],\"loc\":{\"start\":{\"line\":624,\"column\":44},\"end\":{\"line\":624,\"column\":48}},\"type\":\"Identifier\",\"name\":\"list\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[21937,21983],\"loc\":{\"start\":{\"line\":625,\"column\":8},\"end\":{\"line\":625,\"column\":54}},\"type\":\"ForInStatement\",\"left\":{\"range\":[21942,21947],\"loc\":{\"start\":{\"line\":625,\"column\":13},\"end\":{\"line\":625,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[21946,21947],\"loc\":{\"start\":{\"line\":625,\"column\":17},\"end\":{\"line\":625,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[21946,21947],\"loc\":{\"start\":{\"line\":625,\"column\":17},\"end\":{\"line\":625,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[21951,21959],\"loc\":{\"start\":{\"line\":625,\"column\":22},\"end\":{\"line\":625,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[21961,21983],\"loc\":{\"start\":{\"line\":625,\"column\":32},\"end\":{\"line\":625,\"column\":54}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[21961,21982],\"loc\":{\"start\":{\"line\":625,\"column\":32},\"end\":{\"line\":625,\"column\":53}},\"type\":\"CallExpression\",\"callee\":{\"range\":[21961,21969],\"loc\":{\"start\":{\"line\":625,\"column\":32},\"end\":{\"line\":625,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[21961,21964],\"loc\":{\"start\":{\"line\":625,\"column\":32},\"end\":{\"line\":625,\"column\":35}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[21965,21969],\"loc\":{\"start\":{\"line\":625,\"column\":36},\"end\":{\"line\":625,\"column\":40}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[21970,21981],\"loc\":{\"start\":{\"line\":625,\"column\":41},\"end\":{\"line\":625,\"column\":52}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[21970,21978],\"loc\":{\"start\":{\"line\":625,\"column\":41},\"end\":{\"line\":625,\"column\":49}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[21979,21980],\"loc\":{\"start\":{\"line\":625,\"column\":50},\"end\":{\"line\":625,\"column\":51}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"each\":false},{\"range\":[21992,22031],\"loc\":{\"start\":{\"line\":626,\"column\":8},\"end\":{\"line\":626,\"column\":47}},\"type\":\"IfStatement\",\"test\":{\"range\":[21995,21998],\"loc\":{\"start\":{\"line\":626,\"column\":11},\"end\":{\"line\":626,\"column\":14}},\"type\":\"Identifier\",\"name\":\"key\"},\"consequent\":{\"range\":[22000,22014],\"loc\":{\"start\":{\"line\":626,\"column\":16},\"end\":{\"line\":626,\"column\":30}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[22000,22013],\"loc\":{\"start\":{\"line\":626,\"column\":16},\"end\":{\"line\":626,\"column\":29}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22000,22008],\"loc\":{\"start\":{\"line\":626,\"column\":16},\"end\":{\"line\":626,\"column\":24}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22000,22003],\"loc\":{\"start\":{\"line\":626,\"column\":16},\"end\":{\"line\":626,\"column\":19}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[22004,22008],\"loc\":{\"start\":{\"line\":626,\"column\":20},\"end\":{\"line\":626,\"column\":24}},\"type\":\"Identifier\",\"name\":\"sort\"}},\"arguments\":[{\"range\":[22009,22012],\"loc\":{\"start\":{\"line\":626,\"column\":25},\"end\":{\"line\":626,\"column\":28}},\"type\":\"Identifier\",\"name\":\"key\"}]}},\"alternate\":{\"range\":[22020,22031],\"loc\":{\"start\":{\"line\":626,\"column\":36},\"end\":{\"line\":626,\"column\":47}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[22020,22030],\"loc\":{\"start\":{\"line\":626,\"column\":36},\"end\":{\"line\":626,\"column\":46}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22020,22028],\"loc\":{\"start\":{\"line\":626,\"column\":36},\"end\":{\"line\":626,\"column\":44}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22020,22023],\"loc\":{\"start\":{\"line\":626,\"column\":36},\"end\":{\"line\":626,\"column\":39}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[22024,22028],\"loc\":{\"start\":{\"line\":626,\"column\":40},\"end\":{\"line\":626,\"column\":44}},\"type\":\"Identifier\",\"name\":\"sort\"}},\"arguments\":[]}}},{\"range\":[22040,22067],\"loc\":{\"start\":{\"line\":627,\"column\":8},\"end\":{\"line\":627,\"column\":35}},\"type\":\"IfStatement\",\"test\":{\"range\":[22044,22051],\"loc\":{\"start\":{\"line\":627,\"column\":12},\"end\":{\"line\":627,\"column\":19}},\"type\":\"Identifier\",\"name\":\"reverse\"},\"consequent\":{\"range\":[22053,22067],\"loc\":{\"start\":{\"line\":627,\"column\":21},\"end\":{\"line\":627,\"column\":35}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[22053,22066],\"loc\":{\"start\":{\"line\":627,\"column\":21},\"end\":{\"line\":627,\"column\":34}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22053,22064],\"loc\":{\"start\":{\"line\":627,\"column\":21},\"end\":{\"line\":627,\"column\":32}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22053,22056],\"loc\":{\"start\":{\"line\":627,\"column\":21},\"end\":{\"line\":627,\"column\":24}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[22057,22064],\"loc\":{\"start\":{\"line\":627,\"column\":25},\"end\":{\"line\":627,\"column\":32}},\"type\":\"Identifier\",\"name\":\"reverse\"}},\"arguments\":[]}},\"alternate\":null},{\"range\":[22076,22087],\"loc\":{\"start\":{\"line\":628,\"column\":8},\"end\":{\"line\":628,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[22083,22086],\"loc\":{\"start\":{\"line\":628,\"column\":15},\"end\":{\"line\":628,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[22103,22163],\"loc\":{\"start\":{\"line\":630,\"column\":6},\"end\":{\"line\":632,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[22103,22106],\"loc\":{\"start\":{\"line\":630,\"column\":6},\"end\":{\"line\":630,\"column\":9}},\"type\":\"Identifier\",\"name\":\"str\"},\"computed\":false,\"value\":{\"range\":[22108,22163],\"loc\":{\"start\":{\"line\":630,\"column\":11},\"end\":{\"line\":632,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[22118,22121],\"loc\":{\"start\":{\"line\":630,\"column\":21},\"end\":{\"line\":630,\"column\":24}},\"type\":\"Identifier\",\"name\":\"obj\"}],\"defaults\":[],\"body\":{\"range\":[22123,22163],\"loc\":{\"start\":{\"line\":630,\"column\":26},\"end\":{\"line\":632,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[22133,22155],\"loc\":{\"start\":{\"line\":631,\"column\":8},\"end\":{\"line\":631,\"column\":30}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[22140,22154],\"loc\":{\"start\":{\"line\":631,\"column\":15},\"end\":{\"line\":631,\"column\":29}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22140,22152],\"loc\":{\"start\":{\"line\":631,\"column\":15},\"end\":{\"line\":631,\"column\":27}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22140,22143],\"loc\":{\"start\":{\"line\":631,\"column\":15},\"end\":{\"line\":631,\"column\":18}},\"type\":\"Identifier\",\"name\":\"obj\"},\"property\":{\"range\":[22144,22152],\"loc\":{\"start\":{\"line\":631,\"column\":19},\"end\":{\"line\":631,\"column\":27}},\"type\":\"Identifier\",\"name\":\"toString\"}},\"arguments\":[]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[22171,22355],\"loc\":{\"start\":{\"line\":633,\"column\":6},\"end\":{\"line\":638,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[22171,22174],\"loc\":{\"start\":{\"line\":633,\"column\":6},\"end\":{\"line\":633,\"column\":9}},\"type\":\"Identifier\",\"name\":\"sum\"},\"computed\":false,\"value\":{\"range\":[22176,22355],\"loc\":{\"start\":{\"line\":633,\"column\":11},\"end\":{\"line\":638,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[22186,22194],\"loc\":{\"start\":{\"line\":633,\"column\":21},\"end\":{\"line\":633,\"column\":29}},\"type\":\"Identifier\",\"name\":\"iterable\"},{\"range\":[22196,22201],\"loc\":{\"start\":{\"line\":633,\"column\":31},\"end\":{\"line\":633,\"column\":36}},\"type\":\"Identifier\",\"name\":\"start\"}],\"defaults\":[],\"body\":{\"range\":[22203,22355],\"loc\":{\"start\":{\"line\":633,\"column\":38},\"end\":{\"line\":638,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[22254,22275],\"loc\":{\"start\":{\"line\":635,\"column\":8},\"end\":{\"line\":635,\"column\":29}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[22258,22274],\"loc\":{\"start\":{\"line\":635,\"column\":12},\"end\":{\"line\":635,\"column\":28}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[22258,22261],\"loc\":{\"start\":{\"line\":635,\"column\":12},\"end\":{\"line\":635,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[22264,22274],\"loc\":{\"start\":{\"line\":635,\"column\":18},\"end\":{\"line\":635,\"column\":28}},\"type\":\"LogicalExpression\",\"operator\":\"||\",\"left\":{\"range\":[22264,22269],\"loc\":{\"start\":{\"line\":635,\"column\":18},\"end\":{\"line\":635,\"column\":23}},\"type\":\"Identifier\",\"name\":\"start\"},\"right\":{\"range\":[22273,22274],\"loc\":{\"start\":{\"line\":635,\"column\":27},\"end\":{\"line\":635,\"column\":28}},\"type\":\"Literal\",\"value\":0,\"raw\":\"0\"}}}],\"kind\":\"var\"},{\"range\":[22284,22327],\"loc\":{\"start\":{\"line\":636,\"column\":8},\"end\":{\"line\":636,\"column\":51}},\"type\":\"ForInStatement\",\"left\":{\"range\":[22289,22294],\"loc\":{\"start\":{\"line\":636,\"column\":13},\"end\":{\"line\":636,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[22293,22294],\"loc\":{\"start\":{\"line\":636,\"column\":17},\"end\":{\"line\":636,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[22293,22294],\"loc\":{\"start\":{\"line\":636,\"column\":17},\"end\":{\"line\":636,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[22298,22306],\"loc\":{\"start\":{\"line\":636,\"column\":22},\"end\":{\"line\":636,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[22308,22327],\"loc\":{\"start\":{\"line\":636,\"column\":32},\"end\":{\"line\":636,\"column\":51}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[22308,22326],\"loc\":{\"start\":{\"line\":636,\"column\":32},\"end\":{\"line\":636,\"column\":50}},\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"range\":[22308,22311],\"loc\":{\"start\":{\"line\":636,\"column\":32},\"end\":{\"line\":636,\"column\":35}},\"type\":\"Identifier\",\"name\":\"ret\"},\"right\":{\"range\":[22315,22326],\"loc\":{\"start\":{\"line\":636,\"column\":39},\"end\":{\"line\":636,\"column\":50}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[22315,22323],\"loc\":{\"start\":{\"line\":636,\"column\":39},\"end\":{\"line\":636,\"column\":47}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[22324,22325],\"loc\":{\"start\":{\"line\":636,\"column\":48},\"end\":{\"line\":636,\"column\":49}},\"type\":\"Identifier\",\"name\":\"i\"}}}},\"each\":false},{\"range\":[22336,22347],\"loc\":{\"start\":{\"line\":637,\"column\":8},\"end\":{\"line\":637,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[22343,22346],\"loc\":{\"start\":{\"line\":637,\"column\":15},\"end\":{\"line\":637,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[22363,22527],\"loc\":{\"start\":{\"line\":639,\"column\":6},\"end\":{\"line\":643,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[22363,22368],\"loc\":{\"start\":{\"line\":639,\"column\":6},\"end\":{\"line\":639,\"column\":11}},\"type\":\"Identifier\",\"name\":\"tuple\"},\"computed\":false,\"value\":{\"range\":[22370,22527],\"loc\":{\"start\":{\"line\":639,\"column\":13},\"end\":{\"line\":643,\"column\":7}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[{\"range\":[22380,22388],\"loc\":{\"start\":{\"line\":639,\"column\":23},\"end\":{\"line\":639,\"column\":31}},\"type\":\"Identifier\",\"name\":\"iterable\"}],\"defaults\":[],\"body\":{\"range\":[22390,22527],\"loc\":{\"start\":{\"line\":639,\"column\":33},\"end\":{\"line\":643,\"column\":7}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[22400,22444],\"loc\":{\"start\":{\"line\":640,\"column\":8},\"end\":{\"line\":640,\"column\":52}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[22404,22443],\"loc\":{\"start\":{\"line\":640,\"column\":12},\"end\":{\"line\":640,\"column\":51}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[22404,22407],\"loc\":{\"start\":{\"line\":640,\"column\":12},\"end\":{\"line\":640,\"column\":15}},\"type\":\"Identifier\",\"name\":\"ret\"},\"init\":{\"range\":[22410,22443],\"loc\":{\"start\":{\"line\":640,\"column\":18},\"end\":{\"line\":640,\"column\":51}},\"type\":\"NewExpression\",\"callee\":{\"range\":[22414,22441],\"loc\":{\"start\":{\"line\":640,\"column\":22},\"end\":{\"line\":640,\"column\":49}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22414,22435],\"loc\":{\"start\":{\"line\":640,\"column\":22},\"end\":{\"line\":640,\"column\":43}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22414,22427],\"loc\":{\"start\":{\"line\":640,\"column\":22},\"end\":{\"line\":640,\"column\":35}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[22428,22435],\"loc\":{\"start\":{\"line\":640,\"column\":36},\"end\":{\"line\":640,\"column\":43}},\"type\":\"Identifier\",\"name\":\"objects\"}},\"property\":{\"range\":[22436,22441],\"loc\":{\"start\":{\"line\":640,\"column\":44},\"end\":{\"line\":640,\"column\":49}},\"type\":\"Identifier\",\"name\":\"tuple\"}},\"arguments\":[]}}],\"kind\":\"var\"},{\"range\":[22453,22499],\"loc\":{\"start\":{\"line\":641,\"column\":8},\"end\":{\"line\":641,\"column\":54}},\"type\":\"ForInStatement\",\"left\":{\"range\":[22458,22463],\"loc\":{\"start\":{\"line\":641,\"column\":13},\"end\":{\"line\":641,\"column\":18}},\"type\":\"VariableDeclaration\",\"declarations\":[{\"range\":[22462,22463],\"loc\":{\"start\":{\"line\":641,\"column\":17},\"end\":{\"line\":641,\"column\":18}},\"type\":\"VariableDeclarator\",\"id\":{\"range\":[22462,22463],\"loc\":{\"start\":{\"line\":641,\"column\":17},\"end\":{\"line\":641,\"column\":18}},\"type\":\"Identifier\",\"name\":\"i\"},\"init\":null}],\"kind\":\"var\"},\"right\":{\"range\":[22467,22475],\"loc\":{\"start\":{\"line\":641,\"column\":22},\"end\":{\"line\":641,\"column\":30}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"body\":{\"range\":[22477,22499],\"loc\":{\"start\":{\"line\":641,\"column\":32},\"end\":{\"line\":641,\"column\":54}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[22477,22498],\"loc\":{\"start\":{\"line\":641,\"column\":32},\"end\":{\"line\":641,\"column\":53}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22477,22485],\"loc\":{\"start\":{\"line\":641,\"column\":32},\"end\":{\"line\":641,\"column\":40}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22477,22480],\"loc\":{\"start\":{\"line\":641,\"column\":32},\"end\":{\"line\":641,\"column\":35}},\"type\":\"Identifier\",\"name\":\"ret\"},\"property\":{\"range\":[22481,22485],\"loc\":{\"start\":{\"line\":641,\"column\":36},\"end\":{\"line\":641,\"column\":40}},\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"range\":[22486,22497],\"loc\":{\"start\":{\"line\":641,\"column\":41},\"end\":{\"line\":641,\"column\":52}},\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"range\":[22486,22494],\"loc\":{\"start\":{\"line\":641,\"column\":41},\"end\":{\"line\":641,\"column\":49}},\"type\":\"Identifier\",\"name\":\"iterable\"},\"property\":{\"range\":[22495,22496],\"loc\":{\"start\":{\"line\":641,\"column\":50},\"end\":{\"line\":641,\"column\":51}},\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"each\":false},{\"range\":[22508,22519],\"loc\":{\"start\":{\"line\":642,\"column\":8},\"end\":{\"line\":642,\"column\":19}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[22515,22518],\"loc\":{\"start\":{\"line\":642,\"column\":15},\"end\":{\"line\":642,\"column\":18}},\"type\":\"Identifier\",\"name\":\"ret\"}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false},{\"range\":[22595,22689],\"loc\":{\"start\":{\"line\":649,\"column\":4},\"end\":{\"line\":653,\"column\":5}},\"type\":\"Property\",\"key\":{\"range\":[22595,22602],\"loc\":{\"start\":{\"line\":649,\"column\":4},\"end\":{\"line\":649,\"column\":11}},\"type\":\"Identifier\",\"name\":\"imports\"},\"computed\":false,\"value\":{\"range\":[22604,22689],\"loc\":{\"start\":{\"line\":649,\"column\":13},\"end\":{\"line\":653,\"column\":5}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[22612,22683],\"loc\":{\"start\":{\"line\":650,\"column\":6},\"end\":{\"line\":652,\"column\":7}},\"type\":\"Property\",\"key\":{\"range\":[22612,22618],\"loc\":{\"start\":{\"line\":650,\"column\":6},\"end\":{\"line\":650,\"column\":12}},\"type\":\"Identifier\",\"name\":\"random\"},\"computed\":false,\"value\":{\"range\":[22620,22683],\"loc\":{\"start\":{\"line\":650,\"column\":14},\"end\":{\"line\":652,\"column\":7}},\"type\":\"ObjectExpression\",\"properties\":[{\"range\":[22630,22675],\"loc\":{\"start\":{\"line\":651,\"column\":8},\"end\":{\"line\":651,\"column\":53}},\"type\":\"Property\",\"key\":{\"range\":[22630,22636],\"loc\":{\"start\":{\"line\":651,\"column\":8},\"end\":{\"line\":651,\"column\":14}},\"type\":\"Identifier\",\"name\":\"random\"},\"computed\":false,\"value\":{\"range\":[22638,22675],\"loc\":{\"start\":{\"line\":651,\"column\":16},\"end\":{\"line\":651,\"column\":53}},\"type\":\"FunctionExpression\",\"id\":null,\"params\":[],\"defaults\":[],\"body\":{\"range\":[22650,22675],\"loc\":{\"start\":{\"line\":651,\"column\":28},\"end\":{\"line\":651,\"column\":53}},\"type\":\"BlockStatement\",\"body\":[{\"range\":[22652,22673],\"loc\":{\"start\":{\"line\":651,\"column\":30},\"end\":{\"line\":651,\"column\":51}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[22659,22672],\"loc\":{\"start\":{\"line\":651,\"column\":37},\"end\":{\"line\":651,\"column\":50}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22659,22670],\"loc\":{\"start\":{\"line\":651,\"column\":37},\"end\":{\"line\":651,\"column\":48}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22659,22663],\"loc\":{\"start\":{\"line\":651,\"column\":37},\"end\":{\"line\":651,\"column\":41}},\"type\":\"Identifier\",\"name\":\"Math\"},\"property\":{\"range\":[22664,22670],\"loc\":{\"start\":{\"line\":651,\"column\":42},\"end\":{\"line\":651,\"column\":48}},\"type\":\"Identifier\",\"name\":\"random\"}},\"arguments\":[]}}]},\"generator\":false,\"expression\":false},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]},\"kind\":\"init\",\"method\":false,\"shorthand\":false}]}}],\"kind\":\"var\"},{\"range\":[22698,22726],\"loc\":{\"start\":{\"line\":656,\"column\":2},\"end\":{\"line\":658,\"column\":3}},\"type\":\"FunctionDeclaration\",\"id\":{\"range\":[22707,22717],\"loc\":{\"start\":{\"line\":656,\"column\":11},\"end\":{\"line\":656,\"column\":21}},\"type\":\"Identifier\",\"name\":\"PythonDict\"},\"params\":[],\"defaults\":[],\"body\":{\"range\":[22720,22726],\"loc\":{\"start\":{\"line\":656,\"column\":24},\"end\":{\"line\":658,\"column\":3}},\"type\":\"BlockStatement\",\"body\":[]},\"generator\":false,\"expression\":false},{\"range\":[22730,22820],\"loc\":{\"start\":{\"line\":660,\"column\":2},\"end\":{\"line\":660,\"column\":92}},\"type\":\"ExpressionStatement\",\"expression\":{\"range\":[22730,22819],\"loc\":{\"start\":{\"line\":660,\"column\":2},\"end\":{\"line\":660,\"column\":91}},\"type\":\"CallExpression\",\"callee\":{\"range\":[22730,22753],\"loc\":{\"start\":{\"line\":660,\"column\":2},\"end\":{\"line\":660,\"column\":25}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22730,22736],\"loc\":{\"start\":{\"line\":660,\"column\":2},\"end\":{\"line\":660,\"column\":8}},\"type\":\"Identifier\",\"name\":\"Object\"},\"property\":{\"range\":[22737,22753],\"loc\":{\"start\":{\"line\":660,\"column\":9},\"end\":{\"line\":660,\"column\":25}},\"type\":\"Identifier\",\"name\":\"defineProperties\"}},\"arguments\":[{\"range\":[22754,22774],\"loc\":{\"start\":{\"line\":660,\"column\":26},\"end\":{\"line\":660,\"column\":46}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22754,22764],\"loc\":{\"start\":{\"line\":660,\"column\":26},\"end\":{\"line\":660,\"column\":36}},\"type\":\"Identifier\",\"name\":\"PythonDict\"},\"property\":{\"range\":[22765,22774],\"loc\":{\"start\":{\"line\":660,\"column\":37},\"end\":{\"line\":660,\"column\":46}},\"type\":\"Identifier\",\"name\":\"prototype\"}},{\"range\":[22776,22818],\"loc\":{\"start\":{\"line\":660,\"column\":48},\"end\":{\"line\":660,\"column\":90}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22776,22795],\"loc\":{\"start\":{\"line\":660,\"column\":48},\"end\":{\"line\":660,\"column\":67}},\"type\":\"MemberExpression\",\"computed\":false,\"object\":{\"range\":[22776,22789],\"loc\":{\"start\":{\"line\":660,\"column\":48},\"end\":{\"line\":660,\"column\":61}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"},\"property\":{\"range\":[22790,22795],\"loc\":{\"start\":{\"line\":660,\"column\":62},\"end\":{\"line\":660,\"column\":67}},\"type\":\"Identifier\",\"name\":\"utils\"}},\"property\":{\"range\":[22796,22818],\"loc\":{\"start\":{\"line\":660,\"column\":68},\"end\":{\"line\":660,\"column\":90}},\"type\":\"Identifier\",\"name\":\"dictPropertyDescriptor\"}}]}},{\"range\":[22823,22844],\"loc\":{\"start\":{\"line\":661,\"column\":2},\"end\":{\"line\":661,\"column\":23}},\"type\":\"ReturnStatement\",\"argument\":{\"range\":[22830,22843],\"loc\":{\"start\":{\"line\":661,\"column\":9},\"end\":{\"line\":661,\"column\":22}},\"type\":\"Identifier\",\"name\":\"pythonRuntime\"}}]},\"generator\":false,\"expression\":false}]}}],\"sourceType\":\"script\"}\r\n\r\n},{}],23:[function(require,module,exports){\r\n(function (global){\r\n/*\r\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\r\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\r\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\r\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\r\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\r\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\r\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\r\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\r\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n/*global exports:true, generateStatement:true, generateExpression:true, require:true, global:true*/\r\n(function () {\r\n    'use strict';\r\n\r\n    var Syntax,\r\n        Precedence,\r\n        BinaryPrecedence,\r\n        SourceNode,\r\n        estraverse,\r\n        esutils,\r\n        isArray,\r\n        base,\r\n        indent,\r\n        json,\r\n        renumber,\r\n        hexadecimal,\r\n        quotes,\r\n        escapeless,\r\n        newline,\r\n        space,\r\n        parentheses,\r\n        semicolons,\r\n        safeConcatenation,\r\n        directive,\r\n        extra,\r\n        parse,\r\n        sourceMap,\r\n        FORMAT_MINIFY,\r\n        FORMAT_DEFAULTS;\r\n\r\n    estraverse = require('estraverse');\r\n    esutils = require('esutils');\r\n\r\n    Syntax = {\r\n        AssignmentExpression: 'AssignmentExpression',\r\n        ArrayExpression: 'ArrayExpression',\r\n        ArrayPattern: 'ArrayPattern',\r\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n        BlockStatement: 'BlockStatement',\r\n        BinaryExpression: 'BinaryExpression',\r\n        BreakStatement: 'BreakStatement',\r\n        CallExpression: 'CallExpression',\r\n        CatchClause: 'CatchClause',\r\n        ComprehensionBlock: 'ComprehensionBlock',\r\n        ComprehensionExpression: 'ComprehensionExpression',\r\n        ConditionalExpression: 'ConditionalExpression',\r\n        ContinueStatement: 'ContinueStatement',\r\n        DirectiveStatement: 'DirectiveStatement',\r\n        DoWhileStatement: 'DoWhileStatement',\r\n        DebuggerStatement: 'DebuggerStatement',\r\n        EmptyStatement: 'EmptyStatement',\r\n        ExportDeclaration: 'ExportDeclaration',\r\n        ExpressionStatement: 'ExpressionStatement',\r\n        ForStatement: 'ForStatement',\r\n        ForInStatement: 'ForInStatement',\r\n        ForOfStatement: 'ForOfStatement',\r\n        FunctionDeclaration: 'FunctionDeclaration',\r\n        FunctionExpression: 'FunctionExpression',\r\n        GeneratorExpression: 'GeneratorExpression',\r\n        Identifier: 'Identifier',\r\n        IfStatement: 'IfStatement',\r\n        ImportDeclaration: 'ImportDeclaration',\r\n        Literal: 'Literal',\r\n        LabeledStatement: 'LabeledStatement',\r\n        LogicalExpression: 'LogicalExpression',\r\n        MemberExpression: 'MemberExpression',\r\n        NewExpression: 'NewExpression',\r\n        ObjectExpression: 'ObjectExpression',\r\n        ObjectPattern: 'ObjectPattern',\r\n        Program: 'Program',\r\n        Property: 'Property',\r\n        ReturnStatement: 'ReturnStatement',\r\n        SequenceExpression: 'SequenceExpression',\r\n        SwitchStatement: 'SwitchStatement',\r\n        SwitchCase: 'SwitchCase',\r\n        ThisExpression: 'ThisExpression',\r\n        ThrowStatement: 'ThrowStatement',\r\n        TryStatement: 'TryStatement',\r\n        UnaryExpression: 'UnaryExpression',\r\n        UpdateExpression: 'UpdateExpression',\r\n        VariableDeclaration: 'VariableDeclaration',\r\n        VariableDeclarator: 'VariableDeclarator',\r\n        WhileStatement: 'WhileStatement',\r\n        WithStatement: 'WithStatement',\r\n        YieldExpression: 'YieldExpression'\r\n    };\r\n\r\n    Precedence = {\r\n        Sequence: 0,\r\n        Yield: 1,\r\n        Assignment: 1,\r\n        Conditional: 2,\r\n        ArrowFunction: 2,\r\n        LogicalOR: 3,\r\n        LogicalAND: 4,\r\n        BitwiseOR: 5,\r\n        BitwiseXOR: 6,\r\n        BitwiseAND: 7,\r\n        Equality: 8,\r\n        Relational: 9,\r\n        BitwiseSHIFT: 10,\r\n        Additive: 11,\r\n        Multiplicative: 12,\r\n        Unary: 13,\r\n        Postfix: 14,\r\n        Call: 15,\r\n        New: 16,\r\n        Member: 17,\r\n        Primary: 18\r\n    };\r\n\r\n    BinaryPrecedence = {\r\n        '||': Precedence.LogicalOR,\r\n        '&&': Precedence.LogicalAND,\r\n        '|': Precedence.BitwiseOR,\r\n        '^': Precedence.BitwiseXOR,\r\n        '&': Precedence.BitwiseAND,\r\n        '==': Precedence.Equality,\r\n        '!=': Precedence.Equality,\r\n        '===': Precedence.Equality,\r\n        '!==': Precedence.Equality,\r\n        'is': Precedence.Equality,\r\n        'isnt': Precedence.Equality,\r\n        '<': Precedence.Relational,\r\n        '>': Precedence.Relational,\r\n        '<=': Precedence.Relational,\r\n        '>=': Precedence.Relational,\r\n        'in': Precedence.Relational,\r\n        'instanceof': Precedence.Relational,\r\n        '<<': Precedence.BitwiseSHIFT,\r\n        '>>': Precedence.BitwiseSHIFT,\r\n        '>>>': Precedence.BitwiseSHIFT,\r\n        '+': Precedence.Additive,\r\n        '-': Precedence.Additive,\r\n        '*': Precedence.Multiplicative,\r\n        '%': Precedence.Multiplicative,\r\n        '/': Precedence.Multiplicative\r\n    };\r\n\r\n    function getDefaultOptions() {\r\n        // default options\r\n        return {\r\n            indent: null,\r\n            base: null,\r\n            parse: null,\r\n            comment: false,\r\n            format: {\r\n                indent: {\r\n                    style: '    ',\r\n                    base: 0,\r\n                    adjustMultilineComment: false\r\n                },\r\n                newline: '\\n',\r\n                space: ' ',\r\n                json: false,\r\n                renumber: false,\r\n                hexadecimal: false,\r\n                quotes: 'single',\r\n                escapeless: false,\r\n                compact: false,\r\n                parentheses: true,\r\n                semicolons: true,\r\n                safeConcatenation: false\r\n            },\r\n            moz: {\r\n                comprehensionExpressionStartsWithAssignment: false,\r\n                starlessGenerator: false,\r\n                parenthesizedComprehensionBlock: false\r\n            },\r\n            sourceMap: null,\r\n            sourceMapRoot: null,\r\n            sourceMapWithCode: false,\r\n            directive: false,\r\n            raw: true,\r\n            verbatim: null\r\n        };\r\n    }\r\n\r\n    function stringRepeat(str, num) {\r\n        var result = '';\r\n\r\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\r\n            if (num & 1) {\r\n                result += str;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isArray = Array.isArray;\r\n    if (!isArray) {\r\n        isArray = function isArray(array) {\r\n            return Object.prototype.toString.call(array) === '[object Array]';\r\n        };\r\n    }\r\n\r\n    function hasLineTerminator(str) {\r\n        return (/[\\r\\n]/g).test(str);\r\n    }\r\n\r\n    function endsWithLineTerminator(str) {\r\n        var len = str.length;\r\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\r\n    }\r\n\r\n    function updateDeeply(target, override) {\r\n        var key, val;\r\n\r\n        function isHashObject(target) {\r\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\r\n        }\r\n\r\n        for (key in override) {\r\n            if (override.hasOwnProperty(key)) {\r\n                val = override[key];\r\n                if (isHashObject(val)) {\r\n                    if (isHashObject(target[key])) {\r\n                        updateDeeply(target[key], val);\r\n                    } else {\r\n                        target[key] = updateDeeply({}, val);\r\n                    }\r\n                } else {\r\n                    target[key] = val;\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function generateNumber(value) {\r\n        var result, point, temp, exponent, pos;\r\n\r\n        if (value !== value) {\r\n            throw new Error('Numeric literal whose value is NaN');\r\n        }\r\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\r\n            throw new Error('Numeric literal whose value is negative');\r\n        }\r\n\r\n        if (value === 1 / 0) {\r\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\r\n        }\r\n\r\n        result = '' + value;\r\n        if (!renumber || result.length < 3) {\r\n            return result;\r\n        }\r\n\r\n        point = result.indexOf('.');\r\n        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {\r\n            point = 0;\r\n            result = result.slice(1);\r\n        }\r\n        temp = result;\r\n        result = result.replace('e+', 'e');\r\n        exponent = 0;\r\n        if ((pos = temp.indexOf('e')) > 0) {\r\n            exponent = +temp.slice(pos + 1);\r\n            temp = temp.slice(0, pos);\r\n        }\r\n        if (point >= 0) {\r\n            exponent -= temp.length - point - 1;\r\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\r\n        }\r\n        pos = 0;\r\n        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {\r\n            --pos;\r\n        }\r\n        if (pos !== 0) {\r\n            exponent -= pos;\r\n            temp = temp.slice(0, pos);\r\n        }\r\n        if (exponent !== 0) {\r\n            temp += 'e' + exponent;\r\n        }\r\n        if ((temp.length < result.length ||\r\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\r\n                +temp === value) {\r\n            result = temp;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Generate valid RegExp expression.\r\n    // This function is based on https://github.com/Constellation/iv Engine\r\n\r\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\r\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\r\n        if ((ch & ~1) === 0x2028) {\r\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\r\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\r\n        }\r\n        return String.fromCharCode(ch);\r\n    }\r\n\r\n    function generateRegExp(reg) {\r\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\r\n\r\n        result = reg.toString();\r\n\r\n        if (reg.source) {\r\n            // extract flag from toString result\r\n            match = result.match(/\\/([^/]*)$/);\r\n            if (!match) {\r\n                return result;\r\n            }\r\n\r\n            flags = match[1];\r\n            result = '';\r\n\r\n            characterInBrack = false;\r\n            previousIsBackslash = false;\r\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\r\n                ch = reg.source.charCodeAt(i);\r\n\r\n                if (!previousIsBackslash) {\r\n                    if (characterInBrack) {\r\n                        if (ch === 93) {  // ]\r\n                            characterInBrack = false;\r\n                        }\r\n                    } else {\r\n                        if (ch === 47) {  // /\r\n                            result += '\\\\';\r\n                        } else if (ch === 91) {  // [\r\n                            characterInBrack = true;\r\n                        }\r\n                    }\r\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\r\n                    previousIsBackslash = ch === 92;  // \\\r\n                } else {\r\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\r\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\r\n                    // prevent like /\\\\[/]/\r\n                    previousIsBackslash = false;\r\n                }\r\n            }\r\n\r\n            return '/' + result + '/' + flags;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function escapeAllowedCharacter(code, next) {\r\n        var hex, result = '\\\\';\r\n\r\n        switch (code) {\r\n        case 0x08  /* \\b */:\r\n            result += 'b';\r\n            break;\r\n        case 0x0C  /* \\f */:\r\n            result += 'f';\r\n            break;\r\n        case 0x09  /* \\t */:\r\n            result += 't';\r\n            break;\r\n        default:\r\n            hex = code.toString(16).toUpperCase();\r\n            if (json || code > 0xFF) {\r\n                result += 'u' + '0000'.slice(hex.length) + hex;\r\n            } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\r\n                result += '0';\r\n            } else if (code === 0x000B  /* \\v */) { // '\\v'\r\n                result += 'x0B';\r\n            } else {\r\n                result += 'x' + '00'.slice(hex.length) + hex;\r\n            }\r\n            break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function escapeDisallowedCharacter(code) {\r\n        var result = '\\\\';\r\n        switch (code) {\r\n        case 0x5C  /* \\ */:\r\n            result += '\\\\';\r\n            break;\r\n        case 0x0A  /* \\n */:\r\n            result += 'n';\r\n            break;\r\n        case 0x0D  /* \\r */:\r\n            result += 'r';\r\n            break;\r\n        case 0x2028:\r\n            result += 'u2028';\r\n            break;\r\n        case 0x2029:\r\n            result += 'u2029';\r\n            break;\r\n        default:\r\n            throw new Error('Incorrectly classified character');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function escapeDirective(str) {\r\n        var i, iz, code, quote;\r\n\r\n        quote = quotes === 'double' ? '\"' : '\\'';\r\n        for (i = 0, iz = str.length; i < iz; ++i) {\r\n            code = str.charCodeAt(i);\r\n            if (code === 0x27  /* ' */) {\r\n                quote = '\"';\r\n                break;\r\n            } else if (code === 0x22  /* \" */) {\r\n                quote = '\\'';\r\n                break;\r\n            } else if (code === 0x5C  /* \\ */) {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return quote + str + quote;\r\n    }\r\n\r\n    function escapeString(str) {\r\n        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\r\n\r\n        for (i = 0, len = str.length; i < len; ++i) {\r\n            code = str.charCodeAt(i);\r\n            if (code === 0x27  /* ' */) {\r\n                ++singleQuotes;\r\n            } else if (code === 0x22  /* \" */) {\r\n                ++doubleQuotes;\r\n            } else if (code === 0x2F  /* / */ && json) {\r\n                result += '\\\\';\r\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \\ */) {\r\n                result += escapeDisallowedCharacter(code);\r\n                continue;\r\n            } else if ((json && code < 0x20  /* SP */) || !(json || escapeless || (code >= 0x20  /* SP */ && code <= 0x7E  /* ~ */))) {\r\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\r\n                continue;\r\n            }\r\n            result += String.fromCharCode(code);\r\n        }\r\n\r\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\r\n        quote = single ? '\\'' : '\"';\r\n\r\n        if (!(single ? singleQuotes : doubleQuotes)) {\r\n            return quote + result + quote;\r\n        }\r\n\r\n        str = result;\r\n        result = quote;\r\n\r\n        for (i = 0, len = str.length; i < len; ++i) {\r\n            code = str.charCodeAt(i);\r\n            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* \" */ && !single)) {\r\n                result += '\\\\';\r\n            }\r\n            result += String.fromCharCode(code);\r\n        }\r\n\r\n        return result + quote;\r\n    }\r\n\r\n    /**\r\n     * flatten an array to a string, where the array can contain\r\n     * either strings or nested arrays\r\n     */\r\n    function flattenToString(arr) {\r\n        var i, iz, elem, result = '';\r\n        for (i = 0, iz = arr.length; i < iz; ++i) {\r\n            elem = arr[i];\r\n            result += isArray(elem) ? flattenToString(elem) : elem;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * convert generated to a SourceNode when source maps are enabled.\r\n     */\r\n    function toSourceNodeWhenNeeded(generated, node) {\r\n        if (!sourceMap) {\r\n            // with no source maps, generated is either an\r\n            // array or a string.  if an array, flatten it.\r\n            // if a string, just return it\r\n            if (isArray(generated)) {\r\n                return flattenToString(generated);\r\n            } else {\r\n                return generated;\r\n            }\r\n        }\r\n        if (node == null) {\r\n            if (generated instanceof SourceNode) {\r\n                return generated;\r\n            } else {\r\n                node = {};\r\n            }\r\n        }\r\n        if (node.loc == null) {\r\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\r\n        }\r\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\r\n    }\r\n\r\n    function noEmptySpace() {\r\n        return (space) ? space : ' ';\r\n    }\r\n\r\n    function join(left, right) {\r\n        var leftSource = toSourceNodeWhenNeeded(left).toString(),\r\n            rightSource = toSourceNodeWhenNeeded(right).toString(),\r\n            leftCharCode = leftSource.charCodeAt(leftSource.length - 1),\r\n            rightCharCode = rightSource.charCodeAt(0);\r\n\r\n        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||\r\n        esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode) ||\r\n        leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`\r\n            return [left, noEmptySpace(), right];\r\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||\r\n                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\r\n            return [left, right];\r\n        }\r\n        return [left, space, right];\r\n    }\r\n\r\n    function addIndent(stmt) {\r\n        return [base, stmt];\r\n    }\r\n\r\n    function withIndent(fn) {\r\n        var previousBase, result;\r\n        previousBase = base;\r\n        base += indent;\r\n        result = fn.call(this, base);\r\n        base = previousBase;\r\n        return result;\r\n    }\r\n\r\n    function calculateSpaces(str) {\r\n        var i;\r\n        for (i = str.length - 1; i >= 0; --i) {\r\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\r\n                break;\r\n            }\r\n        }\r\n        return (str.length - 1) - i;\r\n    }\r\n\r\n    function adjustMultilineComment(value, specialBase) {\r\n        var array, i, len, line, j, spaces, previousBase, sn;\r\n\r\n        array = value.split(/\\r\\n|[\\r\\n]/);\r\n        spaces = Number.MAX_VALUE;\r\n\r\n        // first line doesn't have indentation\r\n        for (i = 1, len = array.length; i < len; ++i) {\r\n            line = array[i];\r\n            j = 0;\r\n            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {\r\n                ++j;\r\n            }\r\n            if (spaces > j) {\r\n                spaces = j;\r\n            }\r\n        }\r\n\r\n        if (typeof specialBase !== 'undefined') {\r\n            // pattern like\r\n            // {\r\n            //   var t = 20;  /*\r\n            //                 * this is comment\r\n            //                 */\r\n            // }\r\n            previousBase = base;\r\n            if (array[1][spaces] === '*') {\r\n                specialBase += ' ';\r\n            }\r\n            base = specialBase;\r\n        } else {\r\n            if (spaces & 1) {\r\n                // /*\r\n                //  *\r\n                //  */\r\n                // If spaces are odd number, above pattern is considered.\r\n                // We waste 1 space.\r\n                --spaces;\r\n            }\r\n            previousBase = base;\r\n        }\r\n\r\n        for (i = 1, len = array.length; i < len; ++i) {\r\n            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\r\n            array[i] = sourceMap ? sn.join('') : sn;\r\n        }\r\n\r\n        base = previousBase;\r\n\r\n        return array.join('\\n');\r\n    }\r\n\r\n    function generateComment(comment, specialBase) {\r\n        if (comment.type === 'Line') {\r\n            if (endsWithLineTerminator(comment.value)) {\r\n                return '//' + comment.value;\r\n            } else {\r\n                // Always use LineTerminator\r\n                return '//' + comment.value + '\\n';\r\n            }\r\n        }\r\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\r\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\r\n        }\r\n        return '/*' + comment.value + '*/';\r\n    }\r\n\r\n    function addComments(stmt, result) {\r\n        var i, len, comment, save, tailingToStatement, specialBase, fragment;\r\n\r\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\r\n            save = result;\r\n\r\n            comment = stmt.leadingComments[0];\r\n            result = [];\r\n            if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\r\n                result.push('\\n');\r\n            }\r\n            result.push(generateComment(comment));\r\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                result.push('\\n');\r\n            }\r\n\r\n            for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {\r\n                comment = stmt.leadingComments[i];\r\n                fragment = [generateComment(comment)];\r\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\r\n                    fragment.push('\\n');\r\n                }\r\n                result.push(addIndent(fragment));\r\n            }\r\n\r\n            result.push(addIndent(save));\r\n        }\r\n\r\n        if (stmt.trailingComments) {\r\n            tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\r\n            specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));\r\n            for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {\r\n                comment = stmt.trailingComments[i];\r\n                if (tailingToStatement) {\r\n                    // We assume target like following script\r\n                    //\r\n                    // var t = 20;  /**\r\n                    //               * This is comment of t\r\n                    //               */\r\n                    if (i === 0) {\r\n                        // first case\r\n                        result = [result, indent];\r\n                    } else {\r\n                        result = [result, specialBase];\r\n                    }\r\n                    result.push(generateComment(comment, specialBase));\r\n                } else {\r\n                    result = [result, addIndent(generateComment(comment))];\r\n                }\r\n                if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                    result = [result, '\\n'];\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function parenthesize(text, current, should) {\r\n        if (current < should) {\r\n            return ['(', text, ')'];\r\n        }\r\n        return text;\r\n    }\r\n\r\n    function maybeBlock(stmt, semicolonOptional, functionBody) {\r\n        var result, noLeadingComment;\r\n\r\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\r\n\r\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\r\n            return [space, generateStatement(stmt, { functionBody: functionBody })];\r\n        }\r\n\r\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\r\n            return ';';\r\n        }\r\n\r\n        withIndent(function () {\r\n            result = [newline, addIndent(generateStatement(stmt, { semicolonOptional: semicolonOptional, functionBody: functionBody }))];\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    function maybeBlockSuffix(stmt, result) {\r\n        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\r\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\r\n            return [result, space];\r\n        }\r\n        if (ends) {\r\n            return [result, base];\r\n        }\r\n        return [result, newline, base];\r\n    }\r\n\r\n    function generateVerbatimString(string) {\r\n        var i, iz, result;\r\n        result = string.split(/\\r\\n|\\n/);\r\n        for (i = 1, iz = result.length; i < iz; i++) {\r\n            result[i] = newline + base + result[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function generateVerbatim(expr, option) {\r\n        var verbatim, result, prec;\r\n        verbatim = expr[extra.verbatim];\r\n\r\n        if (typeof verbatim === 'string') {\r\n            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, option.precedence);\r\n        } else {\r\n            // verbatim is object\r\n            result = generateVerbatimString(verbatim.content);\r\n            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;\r\n            result = parenthesize(result, prec, option.precedence);\r\n        }\r\n\r\n        return toSourceNodeWhenNeeded(result, expr);\r\n    }\r\n\r\n    function generateIdentifier(node) {\r\n        return toSourceNodeWhenNeeded(node.name, node);\r\n    }\r\n\r\n    function generatePattern(node, options) {\r\n        var result;\r\n\r\n        if (node.type === Syntax.Identifier) {\r\n            result = generateIdentifier(node);\r\n        } else {\r\n            result = generateExpression(node, {\r\n                precedence: options.precedence,\r\n                allowIn: options.allowIn,\r\n                allowCall: true\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function generateFunctionBody(node) {\r\n        var result, i, len, expr, arrow;\r\n\r\n        arrow = node.type === Syntax.ArrowFunctionExpression;\r\n\r\n        if (arrow && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\r\n            // arg => { } case\r\n            result = [generateIdentifier(node.params[0])];\r\n        } else {\r\n            result = ['('];\r\n            for (i = 0, len = node.params.length; i < len; ++i) {\r\n                result.push(generatePattern(node.params[i], {\r\n                    precedence: Precedence.Assignment,\r\n                    allowIn: true\r\n                }));\r\n                if (i + 1 < len) {\r\n                    result.push(',' + space);\r\n                }\r\n            }\r\n            result.push(')');\r\n        }\r\n\r\n        if (arrow) {\r\n            result.push(space);\r\n            result.push('=>');\r\n        }\r\n\r\n        if (node.expression) {\r\n            result.push(space);\r\n            expr = generateExpression(node.body, {\r\n                precedence: Precedence.Assignment,\r\n                allowIn: true,\r\n                allowCall: true\r\n            });\r\n            if (expr.toString().charAt(0) === '{') {\r\n                expr = ['(', expr, ')'];\r\n            }\r\n            result.push(expr);\r\n        } else {\r\n            result.push(maybeBlock(node.body, false, true));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function generateIterationForStatement(operator, stmt, semicolonIsNotNeeded) {\r\n        var result = ['for' + space + '('];\r\n        withIndent(function () {\r\n            if (stmt.left.type === Syntax.VariableDeclaration) {\r\n                withIndent(function () {\r\n                    result.push(stmt.left.kind + noEmptySpace());\r\n                    result.push(generateStatement(stmt.left.declarations[0], {\r\n                        allowIn: false\r\n                    }));\r\n                });\r\n            } else {\r\n                result.push(generateExpression(stmt.left, {\r\n                    precedence: Precedence.Call,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                }));\r\n            }\r\n\r\n            result = join(result, operator);\r\n            result = [join(\r\n                result,\r\n                generateExpression(stmt.right, {\r\n                    precedence: Precedence.Sequence,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                })\r\n            ), ')'];\r\n        });\r\n        result.push(maybeBlock(stmt.body, semicolonIsNotNeeded));\r\n        return result;\r\n    }\r\n\r\n    function generateLiteral(expr) {\r\n        var raw;\r\n        if (expr.hasOwnProperty('raw') && parse && extra.raw) {\r\n            try {\r\n                raw = parse(expr.raw).body[0].expression;\r\n                if (raw.type === Syntax.Literal) {\r\n                    if (raw.value === expr.value) {\r\n                        return expr.raw;\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                // not use raw property\r\n            }\r\n        }\r\n\r\n        if (expr.value === null) {\r\n            return 'null';\r\n        }\r\n\r\n        if (typeof expr.value === 'string') {\r\n            return escapeString(expr.value);\r\n        }\r\n\r\n        if (typeof expr.value === 'number') {\r\n            return generateNumber(expr.value);\r\n        }\r\n\r\n        if (typeof expr.value === 'boolean') {\r\n            return expr.value ? 'true' : 'false';\r\n        }\r\n\r\n        return generateRegExp(expr.value);\r\n    }\r\n\r\n    function generateExpression(expr, option) {\r\n        var result,\r\n            precedence,\r\n            type,\r\n            currentPrecedence,\r\n            i,\r\n            len,\r\n            fragment,\r\n            multiline,\r\n            leftCharCode,\r\n            leftSource,\r\n            rightCharCode,\r\n            allowIn,\r\n            allowCall,\r\n            allowUnparenthesizedNew,\r\n            property,\r\n            isGenerator;\r\n\r\n        precedence = option.precedence;\r\n        allowIn = option.allowIn;\r\n        allowCall = option.allowCall;\r\n        type = expr.type || option.type;\r\n\r\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\r\n            return generateVerbatim(expr, option);\r\n        }\r\n\r\n        switch (type) {\r\n        case Syntax.SequenceExpression:\r\n            result = [];\r\n            allowIn |= (Precedence.Sequence < precedence);\r\n            for (i = 0, len = expr.expressions.length; i < len; ++i) {\r\n                result.push(generateExpression(expr.expressions[i], {\r\n                    precedence: Precedence.Assignment,\r\n                    allowIn: allowIn,\r\n                    allowCall: true\r\n                }));\r\n                if (i + 1 < len) {\r\n                    result.push(',' + space);\r\n                }\r\n            }\r\n            result = parenthesize(result, Precedence.Sequence, precedence);\r\n            break;\r\n\r\n        case Syntax.AssignmentExpression:\r\n            allowIn |= (Precedence.Assignment < precedence);\r\n            result = parenthesize(\r\n                [\r\n                    generateExpression(expr.left, {\r\n                        precedence: Precedence.Call,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    }),\r\n                    space + expr.operator + space,\r\n                    generateExpression(expr.right, {\r\n                        precedence: Precedence.Assignment,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    })\r\n                ],\r\n                Precedence.Assignment,\r\n                precedence\r\n            );\r\n            break;\r\n\r\n        case Syntax.ArrowFunctionExpression:\r\n            allowIn |= (Precedence.ArrowFunction < precedence);\r\n            result = parenthesize(generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\r\n            break;\r\n\r\n        case Syntax.ConditionalExpression:\r\n            allowIn |= (Precedence.Conditional < precedence);\r\n            result = parenthesize(\r\n                [\r\n                    generateExpression(expr.test, {\r\n                        precedence: Precedence.LogicalOR,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    }),\r\n                    space + '?' + space,\r\n                    generateExpression(expr.consequent, {\r\n                        precedence: Precedence.Assignment,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    }),\r\n                    space + ':' + space,\r\n                    generateExpression(expr.alternate, {\r\n                        precedence: Precedence.Assignment,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    })\r\n                ],\r\n                Precedence.Conditional,\r\n                precedence\r\n            );\r\n            break;\r\n\r\n        case Syntax.LogicalExpression:\r\n        case Syntax.BinaryExpression:\r\n            currentPrecedence = BinaryPrecedence[expr.operator];\r\n\r\n            allowIn |= (currentPrecedence < precedence);\r\n\r\n            fragment = generateExpression(expr.left, {\r\n                precedence: currentPrecedence,\r\n                allowIn: allowIn,\r\n                allowCall: true\r\n            });\r\n\r\n            leftSource = fragment.toString();\r\n\r\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPart(expr.operator.charCodeAt(0))) {\r\n                result = [fragment, noEmptySpace(), expr.operator];\r\n            } else {\r\n                result = join(fragment, expr.operator);\r\n            }\r\n\r\n            fragment = generateExpression(expr.right, {\r\n                precedence: currentPrecedence + 1,\r\n                allowIn: allowIn,\r\n                allowCall: true\r\n            });\r\n\r\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\r\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\r\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\r\n                result.push(noEmptySpace());\r\n                result.push(fragment);\r\n            } else {\r\n                result = join(result, fragment);\r\n            }\r\n\r\n            if (expr.operator === 'in' && !allowIn) {\r\n                result = ['(', result, ')'];\r\n            } else {\r\n                result = parenthesize(result, currentPrecedence, precedence);\r\n            }\r\n\r\n            break;\r\n\r\n        case Syntax.CallExpression:\r\n            result = [generateExpression(expr.callee, {\r\n                precedence: Precedence.Call,\r\n                allowIn: true,\r\n                allowCall: true,\r\n                allowUnparenthesizedNew: false\r\n            })];\r\n\r\n            result.push('(');\r\n            for (i = 0, len = expr['arguments'].length; i < len; ++i) {\r\n                result.push(generateExpression(expr['arguments'][i], {\r\n                    precedence: Precedence.Assignment,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                }));\r\n                if (i + 1 < len) {\r\n                    result.push(',' + space);\r\n                }\r\n            }\r\n            result.push(')');\r\n\r\n            if (!allowCall) {\r\n                result = ['(', result, ')'];\r\n            } else {\r\n                result = parenthesize(result, Precedence.Call, precedence);\r\n            }\r\n            break;\r\n\r\n        case Syntax.NewExpression:\r\n            len = expr['arguments'].length;\r\n            allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;\r\n\r\n            result = join(\r\n                'new',\r\n                generateExpression(expr.callee, {\r\n                    precedence: Precedence.New,\r\n                    allowIn: true,\r\n                    allowCall: false,\r\n                    allowUnparenthesizedNew: allowUnparenthesizedNew && !parentheses && len === 0\r\n                })\r\n            );\r\n\r\n            if (!allowUnparenthesizedNew || parentheses || len > 0) {\r\n                result.push('(');\r\n                for (i = 0; i < len; ++i) {\r\n                    result.push(generateExpression(expr['arguments'][i], {\r\n                        precedence: Precedence.Assignment,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }));\r\n                    if (i + 1 < len) {\r\n                        result.push(',' + space);\r\n                    }\r\n                }\r\n                result.push(')');\r\n            }\r\n\r\n            result = parenthesize(result, Precedence.New, precedence);\r\n            break;\r\n\r\n        case Syntax.MemberExpression:\r\n            result = [generateExpression(expr.object, {\r\n                precedence: Precedence.Call,\r\n                allowIn: true,\r\n                allowCall: allowCall,\r\n                allowUnparenthesizedNew: false\r\n            })];\r\n\r\n            if (expr.computed) {\r\n                result.push('[');\r\n                result.push(generateExpression(expr.property, {\r\n                    precedence: Precedence.Sequence,\r\n                    allowIn: true,\r\n                    allowCall: allowCall\r\n                }));\r\n                result.push(']');\r\n            } else {\r\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\r\n                    fragment = toSourceNodeWhenNeeded(result).toString();\r\n                    // When the following conditions are all true,\r\n                    //   1. No floating point\r\n                    //   2. Don't have exponents\r\n                    //   3. The last character is a decimal digit\r\n                    //   4. Not hexadecimal OR octal number literal\r\n                    // we should add a floating point.\r\n                    if (\r\n                            fragment.indexOf('.') < 0 &&\r\n                            !/[eExX]/.test(fragment) &&\r\n                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\r\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\r\n                            ) {\r\n                        result.push('.');\r\n                    }\r\n                }\r\n                result.push('.');\r\n                result.push(generateIdentifier(expr.property));\r\n            }\r\n\r\n            result = parenthesize(result, Precedence.Member, precedence);\r\n            break;\r\n\r\n        case Syntax.UnaryExpression:\r\n            fragment = generateExpression(expr.argument, {\r\n                precedence: Precedence.Unary,\r\n                allowIn: true,\r\n                allowCall: true\r\n            });\r\n\r\n            if (space === '') {\r\n                result = join(expr.operator, fragment);\r\n            } else {\r\n                result = [expr.operator];\r\n                if (expr.operator.length > 2) {\r\n                    // delete, void, typeof\r\n                    // get `typeof []`, not `typeof[]`\r\n                    result = join(result, fragment);\r\n                } else {\r\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\r\n                    // like, `!cond`\r\n                    leftSource = toSourceNodeWhenNeeded(result).toString();\r\n                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\r\n                    rightCharCode = fragment.toString().charCodeAt(0);\r\n\r\n                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||\r\n                            (esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode))) {\r\n                        result.push(noEmptySpace());\r\n                        result.push(fragment);\r\n                    } else {\r\n                        result.push(fragment);\r\n                    }\r\n                }\r\n            }\r\n            result = parenthesize(result, Precedence.Unary, precedence);\r\n            break;\r\n\r\n        case Syntax.YieldExpression:\r\n            if (expr.delegate) {\r\n                result = 'yield*';\r\n            } else {\r\n                result = 'yield';\r\n            }\r\n            if (expr.argument) {\r\n                result = join(\r\n                    result,\r\n                    generateExpression(expr.argument, {\r\n                        precedence: Precedence.Yield,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    })\r\n                );\r\n            }\r\n            result = parenthesize(result, Precedence.Yield, precedence);\r\n            break;\r\n\r\n        case Syntax.UpdateExpression:\r\n            if (expr.prefix) {\r\n                result = parenthesize(\r\n                    [\r\n                        expr.operator,\r\n                        generateExpression(expr.argument, {\r\n                            precedence: Precedence.Unary,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        })\r\n                    ],\r\n                    Precedence.Unary,\r\n                    precedence\r\n                );\r\n            } else {\r\n                result = parenthesize(\r\n                    [\r\n                        generateExpression(expr.argument, {\r\n                            precedence: Precedence.Postfix,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        }),\r\n                        expr.operator\r\n                    ],\r\n                    Precedence.Postfix,\r\n                    precedence\r\n                );\r\n            }\r\n            break;\r\n\r\n        case Syntax.FunctionExpression:\r\n            isGenerator = expr.generator && !extra.moz.starlessGenerator;\r\n            result = isGenerator ? 'function*' : 'function';\r\n\r\n            if (expr.id) {\r\n                result = [result, (isGenerator) ? space : noEmptySpace(),\r\n                          generateIdentifier(expr.id),\r\n                          generateFunctionBody(expr)];\r\n            } else {\r\n                result = [result + space, generateFunctionBody(expr)];\r\n            }\r\n\r\n            break;\r\n\r\n        case Syntax.ArrayPattern:\r\n        case Syntax.ArrayExpression:\r\n            if (!expr.elements.length) {\r\n                result = '[]';\r\n                break;\r\n            }\r\n            multiline = expr.elements.length > 1;\r\n            result = ['[', multiline ? newline : ''];\r\n            withIndent(function (indent) {\r\n                for (i = 0, len = expr.elements.length; i < len; ++i) {\r\n                    if (!expr.elements[i]) {\r\n                        if (multiline) {\r\n                            result.push(indent);\r\n                        }\r\n                        if (i + 1 === len) {\r\n                            result.push(',');\r\n                        }\r\n                    } else {\r\n                        result.push(multiline ? indent : '');\r\n                        result.push(generateExpression(expr.elements[i], {\r\n                            precedence: Precedence.Assignment,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        }));\r\n                    }\r\n                    if (i + 1 < len) {\r\n                        result.push(',' + (multiline ? newline : space));\r\n                    }\r\n                }\r\n            });\r\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                result.push(newline);\r\n            }\r\n            result.push(multiline ? base : '');\r\n            result.push(']');\r\n            break;\r\n\r\n        case Syntax.Property:\r\n            if (expr.kind === 'get' || expr.kind === 'set') {\r\n                result = [\r\n                    expr.kind, noEmptySpace(),\r\n                    generateExpression(expr.key, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }),\r\n                    generateFunctionBody(expr.value)\r\n                ];\r\n            } else {\r\n                if (expr.shorthand) {\r\n                    result = generateExpression(expr.key, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    });\r\n                } else if (expr.method) {\r\n                    result = [];\r\n                    if (expr.value.generator) {\r\n                        result.push('*');\r\n                    }\r\n                    result.push(generateExpression(expr.key, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }));\r\n                    result.push(generateFunctionBody(expr.value));\r\n                } else {\r\n                    result = [\r\n                        generateExpression(expr.key, {\r\n                            precedence: Precedence.Sequence,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        }),\r\n                        ':' + space,\r\n                        generateExpression(expr.value, {\r\n                            precedence: Precedence.Assignment,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        })\r\n                    ];\r\n                }\r\n            }\r\n            break;\r\n\r\n        case Syntax.ObjectExpression:\r\n            if (!expr.properties.length) {\r\n                result = '{}';\r\n                break;\r\n            }\r\n            multiline = expr.properties.length > 1;\r\n\r\n            withIndent(function () {\r\n                fragment = generateExpression(expr.properties[0], {\r\n                    precedence: Precedence.Sequence,\r\n                    allowIn: true,\r\n                    allowCall: true,\r\n                    type: Syntax.Property\r\n                });\r\n            });\r\n\r\n            if (!multiline) {\r\n                // issues 4\r\n                // Do not transform from\r\n                //   dejavu.Class.declare({\r\n                //       method2: function () {}\r\n                //   });\r\n                // to\r\n                //   dejavu.Class.declare({method2: function () {\r\n                //       }});\r\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\r\n                    result = [ '{', space, fragment, space, '}' ];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            withIndent(function (indent) {\r\n                result = [ '{', newline, indent, fragment ];\r\n\r\n                if (multiline) {\r\n                    result.push(',' + newline);\r\n                    for (i = 1, len = expr.properties.length; i < len; ++i) {\r\n                        result.push(indent);\r\n                        result.push(generateExpression(expr.properties[i], {\r\n                            precedence: Precedence.Sequence,\r\n                            allowIn: true,\r\n                            allowCall: true,\r\n                            type: Syntax.Property\r\n                        }));\r\n                        if (i + 1 < len) {\r\n                            result.push(',' + newline);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                result.push(newline);\r\n            }\r\n            result.push(base);\r\n            result.push('}');\r\n            break;\r\n\r\n        case Syntax.ObjectPattern:\r\n            if (!expr.properties.length) {\r\n                result = '{}';\r\n                break;\r\n            }\r\n\r\n            multiline = false;\r\n            if (expr.properties.length === 1) {\r\n                property = expr.properties[0];\r\n                if (property.value.type !== Syntax.Identifier) {\r\n                    multiline = true;\r\n                }\r\n            } else {\r\n                for (i = 0, len = expr.properties.length; i < len; ++i) {\r\n                    property = expr.properties[i];\r\n                    if (!property.shorthand) {\r\n                        multiline = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            result = ['{', multiline ? newline : '' ];\r\n\r\n            withIndent(function (indent) {\r\n                for (i = 0, len = expr.properties.length; i < len; ++i) {\r\n                    result.push(multiline ? indent : '');\r\n                    result.push(generateExpression(expr.properties[i], {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }));\r\n                    if (i + 1 < len) {\r\n                        result.push(',' + (multiline ? newline : space));\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                result.push(newline);\r\n            }\r\n            result.push(multiline ? base : '');\r\n            result.push('}');\r\n            break;\r\n\r\n        case Syntax.ThisExpression:\r\n            result = 'this';\r\n            break;\r\n\r\n        case Syntax.Identifier:\r\n            result = generateIdentifier(expr);\r\n            break;\r\n\r\n        case Syntax.Literal:\r\n            result = generateLiteral(expr);\r\n            break;\r\n\r\n        case Syntax.GeneratorExpression:\r\n        case Syntax.ComprehensionExpression:\r\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\r\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\r\n            result = (type === Syntax.GeneratorExpression) ? ['('] : ['['];\r\n\r\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\r\n                fragment = generateExpression(expr.body, {\r\n                    precedence: Precedence.Assignment,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                });\r\n\r\n                result.push(fragment);\r\n            }\r\n\r\n            if (expr.blocks) {\r\n                withIndent(function () {\r\n                    for (i = 0, len = expr.blocks.length; i < len; ++i) {\r\n                        fragment = generateExpression(expr.blocks[i], {\r\n                            precedence: Precedence.Sequence,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        });\r\n\r\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\r\n                            result = join(result, fragment);\r\n                        } else {\r\n                            result.push(fragment);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (expr.filter) {\r\n                result = join(result, 'if' + space);\r\n                fragment = generateExpression(expr.filter, {\r\n                    precedence: Precedence.Sequence,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                });\r\n                if (extra.moz.parenthesizedComprehensionBlock) {\r\n                    result = join(result, [ '(', fragment, ')' ]);\r\n                } else {\r\n                    result = join(result, fragment);\r\n                }\r\n            }\r\n\r\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\r\n                fragment = generateExpression(expr.body, {\r\n                    precedence: Precedence.Assignment,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                });\r\n\r\n                result = join(result, fragment);\r\n            }\r\n\r\n            result.push((type === Syntax.GeneratorExpression) ? ')' : ']');\r\n            break;\r\n\r\n        case Syntax.ComprehensionBlock:\r\n            if (expr.left.type === Syntax.VariableDeclaration) {\r\n                fragment = [\r\n                    expr.left.kind, noEmptySpace(),\r\n                    generateStatement(expr.left.declarations[0], {\r\n                        allowIn: false\r\n                    })\r\n                ];\r\n            } else {\r\n                fragment = generateExpression(expr.left, {\r\n                    precedence: Precedence.Call,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                });\r\n            }\r\n\r\n            fragment = join(fragment, expr.of ? 'of' : 'in');\r\n            fragment = join(fragment, generateExpression(expr.right, {\r\n                precedence: Precedence.Sequence,\r\n                allowIn: true,\r\n                allowCall: true\r\n            }));\r\n\r\n            if (extra.moz.parenthesizedComprehensionBlock) {\r\n                result = [ 'for' + space + '(', fragment, ')' ];\r\n            } else {\r\n                result = join('for' + space, fragment);\r\n            }\r\n            break;\r\n\r\n        default:\r\n            throw new Error('Unknown expression type: ' + expr.type);\r\n        }\r\n\r\n        if (extra.comment) {\r\n            result = addComments(expr,result);\r\n        }\r\n        return toSourceNodeWhenNeeded(result, expr);\r\n    }\r\n\r\n    function generateStatement(stmt, option) {\r\n        var i,\r\n            len,\r\n            result,\r\n            node,\r\n            specifier,\r\n            allowIn,\r\n            functionBody,\r\n            directiveContext,\r\n            fragment,\r\n            semicolon,\r\n            isGenerator;\r\n\r\n        allowIn = true;\r\n        semicolon = ';';\r\n        functionBody = false;\r\n        directiveContext = false;\r\n        if (option) {\r\n            allowIn = option.allowIn === undefined || option.allowIn;\r\n            if (!semicolons && option.semicolonOptional === true) {\r\n                semicolon = '';\r\n            }\r\n            functionBody = option.functionBody;\r\n            directiveContext = option.directiveContext;\r\n        }\r\n\r\n        switch (stmt.type) {\r\n        case Syntax.BlockStatement:\r\n            result = ['{', newline];\r\n\r\n            withIndent(function () {\r\n                for (i = 0, len = stmt.body.length; i < len; ++i) {\r\n                    fragment = addIndent(generateStatement(stmt.body[i], {\r\n                        semicolonOptional: i === len - 1,\r\n                        directiveContext: functionBody\r\n                    }));\r\n                    result.push(fragment);\r\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\r\n                        result.push(newline);\r\n                    }\r\n                }\r\n            });\r\n\r\n            result.push(addIndent('}'));\r\n            break;\r\n\r\n        case Syntax.BreakStatement:\r\n            if (stmt.label) {\r\n                result = 'break ' + stmt.label.name + semicolon;\r\n            } else {\r\n                result = 'break' + semicolon;\r\n            }\r\n            break;\r\n\r\n        case Syntax.ContinueStatement:\r\n            if (stmt.label) {\r\n                result = 'continue ' + stmt.label.name + semicolon;\r\n            } else {\r\n                result = 'continue' + semicolon;\r\n            }\r\n            break;\r\n\r\n        case Syntax.DirectiveStatement:\r\n            if (extra.raw && stmt.raw) {\r\n                result = stmt.raw + semicolon;\r\n            } else {\r\n                result = escapeDirective(stmt.directive) + semicolon;\r\n            }\r\n            break;\r\n\r\n        case Syntax.DoWhileStatement:\r\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\r\n            result = join('do', maybeBlock(stmt.body));\r\n            result = maybeBlockSuffix(stmt.body, result);\r\n            result = join(result, [\r\n                'while' + space + '(',\r\n                generateExpression(stmt.test, {\r\n                    precedence: Precedence.Sequence,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                }),\r\n                ')' + semicolon\r\n            ]);\r\n            break;\r\n\r\n        case Syntax.CatchClause:\r\n            withIndent(function () {\r\n                var guard;\r\n\r\n                result = [\r\n                    'catch' + space + '(',\r\n                    generateExpression(stmt.param, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }),\r\n                    ')'\r\n                ];\r\n\r\n                if (stmt.guard) {\r\n                    guard = generateExpression(stmt.guard, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    });\r\n\r\n                    result.splice(2, 0, ' if ', guard);\r\n                }\r\n            });\r\n            result.push(maybeBlock(stmt.body));\r\n            break;\r\n\r\n        case Syntax.DebuggerStatement:\r\n            result = 'debugger' + semicolon;\r\n            break;\r\n\r\n        case Syntax.EmptyStatement:\r\n            result = ';';\r\n            break;\r\n\r\n        case Syntax.ExportDeclaration:\r\n            result = 'export ';\r\n            if (stmt.declaration) {\r\n                // FunctionDeclaration or VariableDeclaration\r\n                result = [result, generateStatement(stmt.declaration, { semicolonOptional: semicolon === '' })];\r\n                break;\r\n            }\r\n            break;\r\n\r\n        case Syntax.ExpressionStatement:\r\n            result = [generateExpression(stmt.expression, {\r\n                precedence: Precedence.Sequence,\r\n                allowIn: true,\r\n                allowCall: true\r\n            })];\r\n            // 12.4 '{', 'function' is not allowed in this position.\r\n            // wrap expression with parentheses\r\n            fragment = toSourceNodeWhenNeeded(result).toString();\r\n            if (fragment.charAt(0) === '{' ||  // ObjectExpression\r\n                    (fragment.slice(0, 8) === 'function' && '* ('.indexOf(fragment.charAt(8)) >= 0) ||  // function or generator\r\n                    (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\r\n                result = ['(', result, ')' + semicolon];\r\n            } else {\r\n                result.push(semicolon);\r\n            }\r\n            break;\r\n\r\n        case Syntax.ImportDeclaration:\r\n            // ES6: 15.2.1 valid import declarations:\r\n            //     - import ImportClause FromClause ;\r\n            //     - import ModuleSpecifier ;\r\n            // If no ImportClause is present,\r\n            // this should be `import ModuleSpecifier` so skip `from`\r\n            //\r\n            // ModuleSpecifier is StringLiteral.\r\n            if (stmt.specifiers.length === 0) {\r\n                // import ModuleSpecifier ;\r\n                result = [\r\n                    'import',\r\n                    space,\r\n                    generateLiteral(stmt.source)\r\n                ];\r\n            } else {\r\n                // import ImportClause FromClause ;\r\n                if (stmt.kind === 'default') {\r\n                    // import ... from \"...\";\r\n                    result = [\r\n                        'import',\r\n                        noEmptySpace(),\r\n                        stmt.specifiers[0].id.name,\r\n                        noEmptySpace()\r\n                    ];\r\n                } else {\r\n                    // stmt.kind === 'named'\r\n                    result = [\r\n                        'import',\r\n                        space,\r\n                        '{',\r\n                    ];\r\n\r\n                    if (stmt.specifiers.length === 1) {\r\n                        // import { ... } from \"...\";\r\n                        specifier = stmt.specifiers[0];\r\n                        result.push(space + specifier.id.name);\r\n                        if (specifier.name) {\r\n                            result.push(noEmptySpace() + 'as' + noEmptySpace() + specifier.name.name);\r\n                        }\r\n                        result.push(space + '}' + space);\r\n                    } else {\r\n                        // import {\r\n                        //    ...,\r\n                        //    ...,\r\n                        // } from \"...\";\r\n                        withIndent(function (indent) {\r\n                            var i, iz;\r\n                            result.push(newline);\r\n                            for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {\r\n                                specifier = stmt.specifiers[i];\r\n                                result.push(indent + specifier.id.name);\r\n                                if (specifier.name) {\r\n                                    result.push(noEmptySpace() + 'as' + noEmptySpace() + specifier.name.name);\r\n                                }\r\n\r\n                                if (i + 1 < iz) {\r\n                                    result.push(',' + newline);\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                            result.push(newline);\r\n                        }\r\n                        result.push(base + '}' + space);\r\n                    }\r\n                }\r\n\r\n                result.push('from' + space);\r\n                result.push(generateLiteral(stmt.source));\r\n            }\r\n            result.push(semicolon);\r\n            break;\r\n\r\n        case Syntax.VariableDeclarator:\r\n            if (stmt.init) {\r\n                result = [\r\n                    generateExpression(stmt.id, {\r\n                        precedence: Precedence.Assignment,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    }),\r\n                    space,\r\n                    '=',\r\n                    space,\r\n                    generateExpression(stmt.init, {\r\n                        precedence: Precedence.Assignment,\r\n                        allowIn: allowIn,\r\n                        allowCall: true\r\n                    })\r\n                ];\r\n            } else {\r\n                result = generatePattern(stmt.id, {\r\n                    precedence: Precedence.Assignment,\r\n                    allowIn: allowIn\r\n                });\r\n            }\r\n            break;\r\n\r\n        case Syntax.VariableDeclaration:\r\n            result = [stmt.kind];\r\n            // special path for\r\n            // var x = function () {\r\n            // };\r\n            if (stmt.declarations.length === 1 && stmt.declarations[0].init &&\r\n                    stmt.declarations[0].init.type === Syntax.FunctionExpression) {\r\n                result.push(noEmptySpace());\r\n                result.push(generateStatement(stmt.declarations[0], {\r\n                    allowIn: allowIn\r\n                }));\r\n            } else {\r\n                // VariableDeclarator is typed as Statement,\r\n                // but joined with comma (not LineTerminator).\r\n                // So if comment is attached to target node, we should specialize.\r\n                withIndent(function () {\r\n                    node = stmt.declarations[0];\r\n                    if (extra.comment && node.leadingComments) {\r\n                        result.push('\\n');\r\n                        result.push(addIndent(generateStatement(node, {\r\n                            allowIn: allowIn\r\n                        })));\r\n                    } else {\r\n                        result.push(noEmptySpace());\r\n                        result.push(generateStatement(node, {\r\n                            allowIn: allowIn\r\n                        }));\r\n                    }\r\n\r\n                    for (i = 1, len = stmt.declarations.length; i < len; ++i) {\r\n                        node = stmt.declarations[i];\r\n                        if (extra.comment && node.leadingComments) {\r\n                            result.push(',' + newline);\r\n                            result.push(addIndent(generateStatement(node, {\r\n                                allowIn: allowIn\r\n                            })));\r\n                        } else {\r\n                            result.push(',' + space);\r\n                            result.push(generateStatement(node, {\r\n                                allowIn: allowIn\r\n                            }));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            result.push(semicolon);\r\n            break;\r\n\r\n        case Syntax.ThrowStatement:\r\n            result = [join(\r\n                'throw',\r\n                generateExpression(stmt.argument, {\r\n                    precedence: Precedence.Sequence,\r\n                    allowIn: true,\r\n                    allowCall: true\r\n                })\r\n            ), semicolon];\r\n            break;\r\n\r\n        case Syntax.TryStatement:\r\n            result = ['try', maybeBlock(stmt.block)];\r\n            result = maybeBlockSuffix(stmt.block, result);\r\n\r\n            if (stmt.handlers) {\r\n                // old interface\r\n                for (i = 0, len = stmt.handlers.length; i < len; ++i) {\r\n                    result = join(result, generateStatement(stmt.handlers[i]));\r\n                    if (stmt.finalizer || i + 1 !== len) {\r\n                        result = maybeBlockSuffix(stmt.handlers[i].body, result);\r\n                    }\r\n                }\r\n            } else {\r\n                stmt.guardedHandlers = stmt.guardedHandlers || [];\r\n\r\n                for (i = 0, len = stmt.guardedHandlers.length; i < len; ++i) {\r\n                    result = join(result, generateStatement(stmt.guardedHandlers[i]));\r\n                    if (stmt.finalizer || i + 1 !== len) {\r\n                        result = maybeBlockSuffix(stmt.guardedHandlers[i].body, result);\r\n                    }\r\n                }\r\n\r\n                // new interface\r\n                if (stmt.handler) {\r\n                    if (isArray(stmt.handler)) {\r\n                        for (i = 0, len = stmt.handler.length; i < len; ++i) {\r\n                            result = join(result, generateStatement(stmt.handler[i]));\r\n                            if (stmt.finalizer || i + 1 !== len) {\r\n                                result = maybeBlockSuffix(stmt.handler[i].body, result);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        result = join(result, generateStatement(stmt.handler));\r\n                        if (stmt.finalizer) {\r\n                            result = maybeBlockSuffix(stmt.handler.body, result);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (stmt.finalizer) {\r\n                result = join(result, ['finally', maybeBlock(stmt.finalizer)]);\r\n            }\r\n            break;\r\n\r\n        case Syntax.SwitchStatement:\r\n            withIndent(function () {\r\n                result = [\r\n                    'switch' + space + '(',\r\n                    generateExpression(stmt.discriminant, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }),\r\n                    ')' + space + '{' + newline\r\n                ];\r\n            });\r\n            if (stmt.cases) {\r\n                for (i = 0, len = stmt.cases.length; i < len; ++i) {\r\n                    fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional: i === len - 1}));\r\n                    result.push(fragment);\r\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\r\n                        result.push(newline);\r\n                    }\r\n                }\r\n            }\r\n            result.push(addIndent('}'));\r\n            break;\r\n\r\n        case Syntax.SwitchCase:\r\n            withIndent(function () {\r\n                if (stmt.test) {\r\n                    result = [\r\n                        join('case', generateExpression(stmt.test, {\r\n                            precedence: Precedence.Sequence,\r\n                            allowIn: true,\r\n                            allowCall: true\r\n                        })),\r\n                        ':'\r\n                    ];\r\n                } else {\r\n                    result = ['default:'];\r\n                }\r\n\r\n                i = 0;\r\n                len = stmt.consequent.length;\r\n                if (len && stmt.consequent[0].type === Syntax.BlockStatement) {\r\n                    fragment = maybeBlock(stmt.consequent[0]);\r\n                    result.push(fragment);\r\n                    i = 1;\r\n                }\r\n\r\n                if (i !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\r\n                    result.push(newline);\r\n                }\r\n\r\n                for (; i < len; ++i) {\r\n                    fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional: i === len - 1 && semicolon === ''}));\r\n                    result.push(fragment);\r\n                    if (i + 1 !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\r\n                        result.push(newline);\r\n                    }\r\n                }\r\n            });\r\n            break;\r\n\r\n        case Syntax.IfStatement:\r\n            withIndent(function () {\r\n                result = [\r\n                    'if' + space + '(',\r\n                    generateExpression(stmt.test, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }),\r\n                    ')'\r\n                ];\r\n            });\r\n            if (stmt.alternate) {\r\n                result.push(maybeBlock(stmt.consequent));\r\n                result = maybeBlockSuffix(stmt.consequent, result);\r\n                if (stmt.alternate.type === Syntax.IfStatement) {\r\n                    result = join(result, ['else ', generateStatement(stmt.alternate, {semicolonOptional: semicolon === ''})]);\r\n                } else {\r\n                    result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));\r\n                }\r\n            } else {\r\n                result.push(maybeBlock(stmt.consequent, semicolon === ''));\r\n            }\r\n            break;\r\n\r\n        case Syntax.ForStatement:\r\n            withIndent(function () {\r\n                result = ['for' + space + '('];\r\n                if (stmt.init) {\r\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\r\n                        result.push(generateStatement(stmt.init, {allowIn: false}));\r\n                    } else {\r\n                        result.push(generateExpression(stmt.init, {\r\n                            precedence: Precedence.Sequence,\r\n                            allowIn: false,\r\n                            allowCall: true\r\n                        }));\r\n                        result.push(';');\r\n                    }\r\n                } else {\r\n                    result.push(';');\r\n                }\r\n\r\n                if (stmt.test) {\r\n                    result.push(space);\r\n                    result.push(generateExpression(stmt.test, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }));\r\n                    result.push(';');\r\n                } else {\r\n                    result.push(';');\r\n                }\r\n\r\n                if (stmt.update) {\r\n                    result.push(space);\r\n                    result.push(generateExpression(stmt.update, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }));\r\n                    result.push(')');\r\n                } else {\r\n                    result.push(')');\r\n                }\r\n            });\r\n\r\n            result.push(maybeBlock(stmt.body, semicolon === ''));\r\n            break;\r\n\r\n        case Syntax.ForInStatement:\r\n            result = generateIterationForStatement('in', stmt, semicolon === '');\r\n            break;\r\n\r\n        case Syntax.ForOfStatement:\r\n            result = generateIterationForStatement('of', stmt, semicolon === '');\r\n            break;\r\n\r\n        case Syntax.LabeledStatement:\r\n            result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];\r\n            break;\r\n\r\n        case Syntax.Program:\r\n            len = stmt.body.length;\r\n            result = [safeConcatenation && len > 0 ? '\\n' : ''];\r\n            for (i = 0; i < len; ++i) {\r\n                fragment = addIndent(\r\n                    generateStatement(stmt.body[i], {\r\n                        semicolonOptional: !safeConcatenation && i === len - 1,\r\n                        directiveContext: true\r\n                    })\r\n                );\r\n                result.push(fragment);\r\n                if (i + 1 < len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\r\n                    result.push(newline);\r\n                }\r\n            }\r\n            break;\r\n\r\n        case Syntax.FunctionDeclaration:\r\n            isGenerator = stmt.generator && !extra.moz.starlessGenerator;\r\n            result = [\r\n                (isGenerator ? 'function*' : 'function'),\r\n                (isGenerator ? space : noEmptySpace()),\r\n                generateIdentifier(stmt.id),\r\n                generateFunctionBody(stmt)\r\n            ];\r\n            break;\r\n\r\n        case Syntax.ReturnStatement:\r\n            if (stmt.argument) {\r\n                result = [join(\r\n                    'return',\r\n                    generateExpression(stmt.argument, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    })\r\n                ), semicolon];\r\n            } else {\r\n                result = ['return' + semicolon];\r\n            }\r\n            break;\r\n\r\n        case Syntax.WhileStatement:\r\n            withIndent(function () {\r\n                result = [\r\n                    'while' + space + '(',\r\n                    generateExpression(stmt.test, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }),\r\n                    ')'\r\n                ];\r\n            });\r\n            result.push(maybeBlock(stmt.body, semicolon === ''));\r\n            break;\r\n\r\n        case Syntax.WithStatement:\r\n            withIndent(function () {\r\n                result = [\r\n                    'with' + space + '(',\r\n                    generateExpression(stmt.object, {\r\n                        precedence: Precedence.Sequence,\r\n                        allowIn: true,\r\n                        allowCall: true\r\n                    }),\r\n                    ')'\r\n                ];\r\n            });\r\n            result.push(maybeBlock(stmt.body, semicolon === ''));\r\n            break;\r\n\r\n        default:\r\n            throw new Error('Unknown statement type: ' + stmt.type);\r\n        }\r\n\r\n        // Attach comments\r\n\r\n        if (extra.comment) {\r\n            result = addComments(stmt, result);\r\n        }\r\n\r\n        fragment = toSourceNodeWhenNeeded(result).toString();\r\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\r\n            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, '') : fragment.replace(/\\s+$/, '');\r\n        }\r\n\r\n        return toSourceNodeWhenNeeded(result, stmt);\r\n    }\r\n\r\n    function generate(node, options) {\r\n        var defaultOptions = getDefaultOptions(), result, pair;\r\n\r\n        if (options != null) {\r\n            // Obsolete options\r\n            //\r\n            //   `options.indent`\r\n            //   `options.base`\r\n            //\r\n            // Instead of them, we can use `option.format.indent`.\r\n            if (typeof options.indent === 'string') {\r\n                defaultOptions.format.indent.style = options.indent;\r\n            }\r\n            if (typeof options.base === 'number') {\r\n                defaultOptions.format.indent.base = options.base;\r\n            }\r\n            options = updateDeeply(defaultOptions, options);\r\n            indent = options.format.indent.style;\r\n            if (typeof options.base === 'string') {\r\n                base = options.base;\r\n            } else {\r\n                base = stringRepeat(indent, options.format.indent.base);\r\n            }\r\n        } else {\r\n            options = defaultOptions;\r\n            indent = options.format.indent.style;\r\n            base = stringRepeat(indent, options.format.indent.base);\r\n        }\r\n        json = options.format.json;\r\n        renumber = options.format.renumber;\r\n        hexadecimal = json ? false : options.format.hexadecimal;\r\n        quotes = json ? 'double' : options.format.quotes;\r\n        escapeless = options.format.escapeless;\r\n        newline = options.format.newline;\r\n        space = options.format.space;\r\n        if (options.format.compact) {\r\n            newline = space = indent = base = '';\r\n        }\r\n        parentheses = options.format.parentheses;\r\n        semicolons = options.format.semicolons;\r\n        safeConcatenation = options.format.safeConcatenation;\r\n        directive = options.directive;\r\n        parse = json ? null : options.parse;\r\n        sourceMap = options.sourceMap;\r\n        extra = options;\r\n\r\n        if (sourceMap) {\r\n            if (!exports.browser) {\r\n                // We assume environment is node.js\r\n                // And prevent from including source-map by browserify\r\n                SourceNode = require('source-map').SourceNode;\r\n            } else {\r\n                SourceNode = global.sourceMap.SourceNode;\r\n            }\r\n        }\r\n\r\n        switch (node.type) {\r\n        case Syntax.BlockStatement:\r\n        case Syntax.BreakStatement:\r\n        case Syntax.CatchClause:\r\n        case Syntax.ContinueStatement:\r\n        case Syntax.DirectiveStatement:\r\n        case Syntax.DoWhileStatement:\r\n        case Syntax.DebuggerStatement:\r\n        case Syntax.EmptyStatement:\r\n        case Syntax.ExpressionStatement:\r\n        case Syntax.ForStatement:\r\n        case Syntax.ForInStatement:\r\n        case Syntax.ForOfStatement:\r\n        case Syntax.FunctionDeclaration:\r\n        case Syntax.IfStatement:\r\n        case Syntax.LabeledStatement:\r\n        case Syntax.Program:\r\n        case Syntax.ReturnStatement:\r\n        case Syntax.SwitchStatement:\r\n        case Syntax.SwitchCase:\r\n        case Syntax.ThrowStatement:\r\n        case Syntax.TryStatement:\r\n        case Syntax.VariableDeclaration:\r\n        case Syntax.VariableDeclarator:\r\n        case Syntax.WhileStatement:\r\n        case Syntax.WithStatement:\r\n            result = generateStatement(node);\r\n            break;\r\n\r\n        case Syntax.AssignmentExpression:\r\n        case Syntax.ArrayExpression:\r\n        case Syntax.ArrayPattern:\r\n        case Syntax.BinaryExpression:\r\n        case Syntax.CallExpression:\r\n        case Syntax.ConditionalExpression:\r\n        case Syntax.FunctionExpression:\r\n        case Syntax.Identifier:\r\n        case Syntax.Literal:\r\n        case Syntax.LogicalExpression:\r\n        case Syntax.MemberExpression:\r\n        case Syntax.NewExpression:\r\n        case Syntax.ObjectExpression:\r\n        case Syntax.ObjectPattern:\r\n        case Syntax.Property:\r\n        case Syntax.SequenceExpression:\r\n        case Syntax.ThisExpression:\r\n        case Syntax.UnaryExpression:\r\n        case Syntax.UpdateExpression:\r\n        case Syntax.YieldExpression:\r\n\r\n            result = generateExpression(node, {\r\n                precedence: Precedence.Sequence,\r\n                allowIn: true,\r\n                allowCall: true\r\n            });\r\n            break;\r\n\r\n        default:\r\n            throw new Error('Unknown node type: ' + node.type);\r\n        }\r\n\r\n        if (!sourceMap) {\r\n            pair = {code: result.toString(), map: null};\r\n            return options.sourceMapWithCode ? pair : pair.code;\r\n        }\r\n\r\n\r\n        pair = result.toStringWithSourceMap({\r\n            file: options.file,\r\n            sourceRoot: options.sourceMapRoot\r\n        });\r\n\r\n        if (options.sourceContent) {\r\n            pair.map.setSourceContent(options.sourceMap,\r\n                                      options.sourceContent);\r\n        }\r\n\r\n        if (options.sourceMapWithCode) {\r\n            return pair;\r\n        }\r\n\r\n        return pair.map.toString();\r\n    }\r\n\r\n    FORMAT_MINIFY = {\r\n        indent: {\r\n            style: '',\r\n            base: 0\r\n        },\r\n        renumber: true,\r\n        hexadecimal: true,\r\n        quotes: 'auto',\r\n        escapeless: true,\r\n        compact: true,\r\n        parentheses: false,\r\n        semicolons: false\r\n    };\r\n\r\n    FORMAT_DEFAULTS = getDefaultOptions().format;\r\n\r\n    exports.version = require('./package.json').version;\r\n    exports.generate = generate;\r\n    exports.attachComments = estraverse.attachComments;\r\n    exports.Precedence = updateDeeply({}, Precedence);\r\n    exports.browser = false;\r\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\r\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\r\n}());\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"./package.json\":38,\"estraverse\":40,\"esutils\":26,\"source-map\":27}],24:[function(require,module,exports){\r\n/*\r\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var Regex;\r\n\r\n    // See also tools/generate-unicode-regex.py.\r\n    Regex = {\r\n        NonAsciiIdentifierStart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),\r\n        NonAsciiIdentifierPart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]')\r\n    };\r\n\r\n    function isDecimalDigit(ch) {\r\n        return (ch >= 48 && ch <= 57);   // 0..9\r\n    }\r\n\r\n    function isHexDigit(ch) {\r\n        return isDecimalDigit(ch) || (97 <= ch && ch <= 102) || (65 <= ch && ch <= 70);\r\n    }\r\n\r\n    function isOctalDigit(ch) {\r\n        return (ch >= 48 && ch <= 55);   // 0..7\r\n    }\r\n\r\n    // 7.2 White Space\r\n\r\n    function isWhiteSpace(ch) {\r\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\r\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\r\n    }\r\n\r\n    // 7.3 Line Terminators\r\n\r\n    function isLineTerminator(ch) {\r\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\r\n    }\r\n\r\n    // 7.6 Identifier Names and Identifiers\r\n\r\n    function isIdentifierStart(ch) {\r\n        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\r\n            (ch >= 65 && ch <= 90) ||         // A..Z\r\n            (ch >= 97 && ch <= 122) ||        // a..z\r\n            (ch === 92) ||                    // \\ (backslash)\r\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));\r\n    }\r\n\r\n    function isIdentifierPart(ch) {\r\n        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\r\n            (ch >= 65 && ch <= 90) ||         // A..Z\r\n            (ch >= 97 && ch <= 122) ||        // a..z\r\n            (ch >= 48 && ch <= 57) ||         // 0..9\r\n            (ch === 92) ||                    // \\ (backslash)\r\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\r\n    }\r\n\r\n    module.exports = {\r\n        isDecimalDigit: isDecimalDigit,\r\n        isHexDigit: isHexDigit,\r\n        isOctalDigit: isOctalDigit,\r\n        isWhiteSpace: isWhiteSpace,\r\n        isLineTerminator: isLineTerminator,\r\n        isIdentifierStart: isIdentifierStart,\r\n        isIdentifierPart: isIdentifierPart\r\n    };\r\n}());\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n},{}],25:[function(require,module,exports){\r\n/*\r\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var code = require('./code');\r\n\r\n    function isStrictModeReservedWordES6(id) {\r\n        switch (id) {\r\n        case 'implements':\r\n        case 'interface':\r\n        case 'package':\r\n        case 'private':\r\n        case 'protected':\r\n        case 'public':\r\n        case 'static':\r\n        case 'let':\r\n            return true;\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isKeywordES5(id, strict) {\r\n        // yield should not be treated as keyword under non-strict mode.\r\n        if (!strict && id === 'yield') {\r\n            return false;\r\n        }\r\n        return isKeywordES6(id, strict);\r\n    }\r\n\r\n    function isKeywordES6(id, strict) {\r\n        if (strict && isStrictModeReservedWordES6(id)) {\r\n            return true;\r\n        }\r\n\r\n        switch (id.length) {\r\n        case 2:\r\n            return (id === 'if') || (id === 'in') || (id === 'do');\r\n        case 3:\r\n            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\r\n        case 4:\r\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\r\n                (id === 'void') || (id === 'with') || (id === 'enum');\r\n        case 5:\r\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\r\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\r\n                (id === 'class') || (id === 'super');\r\n        case 6:\r\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\r\n                (id === 'switch') || (id === 'export') || (id === 'import');\r\n        case 7:\r\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\r\n        case 8:\r\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\r\n        case 10:\r\n            return (id === 'instanceof');\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isRestrictedWord(id) {\r\n        return id === 'eval' || id === 'arguments';\r\n    }\r\n\r\n    function isIdentifierName(id) {\r\n        var i, iz, ch;\r\n\r\n        if (id.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        ch = id.charCodeAt(0);\r\n        if (!code.isIdentifierStart(ch) || ch === 92) {  // \\ (backslash)\r\n            return false;\r\n        }\r\n\r\n        for (i = 1, iz = id.length; i < iz; ++i) {\r\n            ch = id.charCodeAt(i);\r\n            if (!code.isIdentifierPart(ch) || ch === 92) {  // \\ (backslash)\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    module.exports = {\r\n        isKeywordES5: isKeywordES5,\r\n        isKeywordES6: isKeywordES6,\r\n        isRestrictedWord: isRestrictedWord,\r\n        isIdentifierName: isIdentifierName\r\n    };\r\n}());\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n},{\"./code\":24}],26:[function(require,module,exports){\r\n/*\r\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    exports.code = require('./code');\r\n    exports.keyword = require('./keyword');\r\n}());\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n},{\"./code\":24,\"./keyword\":25}],27:[function(require,module,exports){\r\n/*\r\n * Copyright 2009-2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE.txt or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nexports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;\r\nexports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;\r\nexports.SourceNode = require('./source-map/source-node').SourceNode;\r\n\r\n},{\"./source-map/source-map-consumer\":33,\"./source-map/source-map-generator\":34,\"./source-map/source-node\":35}],28:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var util = require('./util');\r\n\r\n  /**\r\n   * A data structure which is a combination of an array and a set. Adding a new\r\n   * member is O(1), testing for membership is O(1), and finding the index of an\r\n   * element is O(1). Removing elements from the set is not supported. Only\r\n   * strings are supported for membership.\r\n   */\r\n  function ArraySet() {\r\n    this._array = [];\r\n    this._set = {};\r\n  }\r\n\r\n  /**\r\n   * Static method for creating ArraySet instances from an existing array.\r\n   */\r\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\r\n    var set = new ArraySet();\r\n    for (var i = 0, len = aArray.length; i < len; i++) {\r\n      set.add(aArray[i], aAllowDuplicates);\r\n    }\r\n    return set;\r\n  };\r\n\r\n  /**\r\n   * Add the given string to this set.\r\n   *\r\n   * @param String aStr\r\n   */\r\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\r\n    var isDuplicate = this.has(aStr);\r\n    var idx = this._array.length;\r\n    if (!isDuplicate || aAllowDuplicates) {\r\n      this._array.push(aStr);\r\n    }\r\n    if (!isDuplicate) {\r\n      this._set[util.toSetString(aStr)] = idx;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Is the given string a member of this set?\r\n   *\r\n   * @param String aStr\r\n   */\r\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\r\n    return Object.prototype.hasOwnProperty.call(this._set,\r\n                                                util.toSetString(aStr));\r\n  };\r\n\r\n  /**\r\n   * What is the index of the given string in the array?\r\n   *\r\n   * @param String aStr\r\n   */\r\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\r\n    if (this.has(aStr)) {\r\n      return this._set[util.toSetString(aStr)];\r\n    }\r\n    throw new Error('\"' + aStr + '\" is not in the set.');\r\n  };\r\n\r\n  /**\r\n   * What is the element at the given index?\r\n   *\r\n   * @param Number aIdx\r\n   */\r\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\r\n    if (aIdx >= 0 && aIdx < this._array.length) {\r\n      return this._array[aIdx];\r\n    }\r\n    throw new Error('No element indexed by ' + aIdx);\r\n  };\r\n\r\n  /**\r\n   * Returns the array representation of this set (which has the proper indices\r\n   * indicated by indexOf). Note that this is a copy of the internal array used\r\n   * for storing the members so that no one can mess with internal state.\r\n   */\r\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\r\n    return this._array.slice();\r\n  };\r\n\r\n  exports.ArraySet = ArraySet;\r\n\r\n});\r\n\r\n},{\"./util\":36,\"amdefine\":37}],29:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n *\r\n * Based on the Base 64 VLQ implementation in Closure Compiler:\r\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\r\n *\r\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above\r\n *    copyright notice, this list of conditions and the following\r\n *    disclaimer in the documentation and/or other materials provided\r\n *    with the distribution.\r\n *  * Neither the name of Google Inc. nor the names of its\r\n *    contributors may be used to endorse or promote products derived\r\n *    from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var base64 = require('./base64');\r\n\r\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\r\n  // length quantities we use in the source map spec, the first bit is the sign,\r\n  // the next four bits are the actual value, and the 6th bit is the\r\n  // continuation bit. The continuation bit tells us whether there are more\r\n  // digits in this value following this digit.\r\n  //\r\n  //   Continuation\r\n  //   |    Sign\r\n  //   |    |\r\n  //   V    V\r\n  //   101011\r\n\r\n  var VLQ_BASE_SHIFT = 5;\r\n\r\n  // binary: 100000\r\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\r\n\r\n  // binary: 011111\r\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\r\n\r\n  // binary: 100000\r\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\r\n\r\n  /**\r\n   * Converts from a two-complement value to a value where the sign bit is\r\n   * placed in the least significant bit.  For example, as decimals:\r\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\r\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\r\n   */\r\n  function toVLQSigned(aValue) {\r\n    return aValue < 0\r\n      ? ((-aValue) << 1) + 1\r\n      : (aValue << 1) + 0;\r\n  }\r\n\r\n  /**\r\n   * Converts to a two-complement value from a value where the sign bit is\r\n   * placed in the least significant bit.  For example, as decimals:\r\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\r\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\r\n   */\r\n  function fromVLQSigned(aValue) {\r\n    var isNegative = (aValue & 1) === 1;\r\n    var shifted = aValue >> 1;\r\n    return isNegative\r\n      ? -shifted\r\n      : shifted;\r\n  }\r\n\r\n  /**\r\n   * Returns the base 64 VLQ encoded value.\r\n   */\r\n  exports.encode = function base64VLQ_encode(aValue) {\r\n    var encoded = \"\";\r\n    var digit;\r\n\r\n    var vlq = toVLQSigned(aValue);\r\n\r\n    do {\r\n      digit = vlq & VLQ_BASE_MASK;\r\n      vlq >>>= VLQ_BASE_SHIFT;\r\n      if (vlq > 0) {\r\n        // There are still more digits in this value, so we must make sure the\r\n        // continuation bit is marked.\r\n        digit |= VLQ_CONTINUATION_BIT;\r\n      }\r\n      encoded += base64.encode(digit);\r\n    } while (vlq > 0);\r\n\r\n    return encoded;\r\n  };\r\n\r\n  /**\r\n   * Decodes the next base 64 VLQ value from the given string and returns the\r\n   * value and the rest of the string via the out parameter.\r\n   */\r\n  exports.decode = function base64VLQ_decode(aStr, aOutParam) {\r\n    var i = 0;\r\n    var strLen = aStr.length;\r\n    var result = 0;\r\n    var shift = 0;\r\n    var continuation, digit;\r\n\r\n    do {\r\n      if (i >= strLen) {\r\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\r\n      }\r\n      digit = base64.decode(aStr.charAt(i++));\r\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\r\n      digit &= VLQ_BASE_MASK;\r\n      result = result + (digit << shift);\r\n      shift += VLQ_BASE_SHIFT;\r\n    } while (continuation);\r\n\r\n    aOutParam.value = fromVLQSigned(result);\r\n    aOutParam.rest = aStr.slice(i);\r\n  };\r\n\r\n});\r\n\r\n},{\"./base64\":30,\"amdefine\":37}],30:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var charToIntMap = {};\r\n  var intToCharMap = {};\r\n\r\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n    .split('')\r\n    .forEach(function (ch, index) {\r\n      charToIntMap[ch] = index;\r\n      intToCharMap[index] = ch;\r\n    });\r\n\r\n  /**\r\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\r\n   */\r\n  exports.encode = function base64_encode(aNumber) {\r\n    if (aNumber in intToCharMap) {\r\n      return intToCharMap[aNumber];\r\n    }\r\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\r\n  };\r\n\r\n  /**\r\n   * Decode a single base 64 digit to an integer.\r\n   */\r\n  exports.decode = function base64_decode(aChar) {\r\n    if (aChar in charToIntMap) {\r\n      return charToIntMap[aChar];\r\n    }\r\n    throw new TypeError(\"Not a valid base 64 digit: \" + aChar);\r\n  };\r\n\r\n});\r\n\r\n},{\"amdefine\":37}],31:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  /**\r\n   * Recursive implementation of binary search.\r\n   *\r\n   * @param aLow Indices here and lower do not contain the needle.\r\n   * @param aHigh Indices here and higher do not contain the needle.\r\n   * @param aNeedle The element being searched for.\r\n   * @param aHaystack The non-empty array being searched.\r\n   * @param aCompare Function which takes two elements and returns -1, 0, or 1.\r\n   */\r\n  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {\r\n    // This function terminates when one of the following is true:\r\n    //\r\n    //   1. We find the exact element we are looking for.\r\n    //\r\n    //   2. We did not find the exact element, but we can return the index of\r\n    //      the next closest element that is less than that element.\r\n    //\r\n    //   3. We did not find the exact element, and there is no next-closest\r\n    //      element which is less than the one we are searching for, so we\r\n    //      return -1.\r\n    var mid = Math.floor((aHigh - aLow) / 2) + aLow;\r\n    var cmp = aCompare(aNeedle, aHaystack[mid], true);\r\n    if (cmp === 0) {\r\n      // Found the element we are looking for.\r\n      return mid;\r\n    }\r\n    else if (cmp > 0) {\r\n      // aHaystack[mid] is greater than our needle.\r\n      if (aHigh - mid > 1) {\r\n        // The element is in the upper half.\r\n        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);\r\n      }\r\n      // We did not find an exact match, return the next closest one\r\n      // (termination case 2).\r\n      return mid;\r\n    }\r\n    else {\r\n      // aHaystack[mid] is less than our needle.\r\n      if (mid - aLow > 1) {\r\n        // The element is in the lower half.\r\n        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);\r\n      }\r\n      // The exact needle element was not found in this haystack. Determine if\r\n      // we are in termination case (2) or (3) and return the appropriate thing.\r\n      return aLow < 0 ? -1 : aLow;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is an implementation of binary search which will always try and return\r\n   * the index of next lowest value checked if there is no exact hit. This is\r\n   * because mappings between original and generated line/col pairs are single\r\n   * points, and there is an implicit region between each of them, so a miss\r\n   * just means that you aren't on the very start of a region.\r\n   *\r\n   * @param aNeedle The element you are looking for.\r\n   * @param aHaystack The array that is being searched.\r\n   * @param aCompare A function which takes the needle and an element in the\r\n   *     array and returns -1, 0, or 1 depending on whether the needle is less\r\n   *     than, equal to, or greater than the element, respectively.\r\n   */\r\n  exports.search = function search(aNeedle, aHaystack, aCompare) {\r\n    if (aHaystack.length === 0) {\r\n      return -1;\r\n    }\r\n    return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)\r\n  };\r\n\r\n});\r\n\r\n},{\"amdefine\":37}],32:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2014 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var util = require('./util');\r\n\r\n  /**\r\n   * Determine whether mappingB is after mappingA with respect to generated\r\n   * position.\r\n   */\r\n  function generatedPositionAfter(mappingA, mappingB) {\r\n    // Optimized for most common case\r\n    var lineA = mappingA.generatedLine;\r\n    var lineB = mappingB.generatedLine;\r\n    var columnA = mappingA.generatedColumn;\r\n    var columnB = mappingB.generatedColumn;\r\n    return lineB > lineA || lineB == lineA && columnB >= columnA ||\r\n           util.compareByGeneratedPositions(mappingA, mappingB) <= 0;\r\n  }\r\n\r\n  /**\r\n   * A data structure to provide a sorted view of accumulated mappings in a\r\n   * performance conscious manner. It trades a neglibable overhead in general\r\n   * case for a large speedup in case of mappings being added in order.\r\n   */\r\n  function MappingList() {\r\n    this._array = [];\r\n    this._sorted = true;\r\n    // Serves as infimum\r\n    this._last = {generatedLine: -1, generatedColumn: 0};\r\n  }\r\n\r\n  /**\r\n   * Iterate through internal items. This method takes the same arguments that\r\n   * `Array.prototype.forEach` takes.\r\n   *\r\n   * NOTE: The order of the mappings is NOT guaranteed.\r\n   */\r\n  MappingList.prototype.unsortedForEach =\r\n    function MappingList_forEach(aCallback, aThisArg) {\r\n      this._array.forEach(aCallback, aThisArg);\r\n    };\r\n\r\n  /**\r\n   * Add the given source mapping.\r\n   *\r\n   * @param Object aMapping\r\n   */\r\n  MappingList.prototype.add = function MappingList_add(aMapping) {\r\n    var mapping;\r\n    if (generatedPositionAfter(this._last, aMapping)) {\r\n      this._last = aMapping;\r\n      this._array.push(aMapping);\r\n    } else {\r\n      this._sorted = false;\r\n      this._array.push(aMapping);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\r\n   * generated position.\r\n   *\r\n   * WARNING: This method returns internal data without copying, for\r\n   * performance. The return value must NOT be mutated, and should be treated as\r\n   * an immutable borrow. If you want to take ownership, you must make your own\r\n   * copy.\r\n   */\r\n  MappingList.prototype.toArray = function MappingList_toArray() {\r\n    if (!this._sorted) {\r\n      this._array.sort(util.compareByGeneratedPositions);\r\n      this._sorted = true;\r\n    }\r\n    return this._array;\r\n  };\r\n\r\n  exports.MappingList = MappingList;\r\n\r\n});\r\n\r\n},{\"./util\":36,\"amdefine\":37}],33:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var util = require('./util');\r\n  var binarySearch = require('./binary-search');\r\n  var ArraySet = require('./array-set').ArraySet;\r\n  var base64VLQ = require('./base64-vlq');\r\n\r\n  /**\r\n   * A SourceMapConsumer instance represents a parsed source map which we can\r\n   * query for information about the original file positions by giving it a file\r\n   * position in the generated source.\r\n   *\r\n   * The only parameter is the raw source map (either as a JSON string, or\r\n   * already parsed to an object). According to the spec, source maps have the\r\n   * following attributes:\r\n   *\r\n   *   - version: Which version of the source map spec this map is following.\r\n   *   - sources: An array of URLs to the original source files.\r\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\r\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n   *   - sourcesContent: Optional. An array of contents of the original source files.\r\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n   *   - file: Optional. The generated file this source map is associated with.\r\n   *\r\n   * Here is an example source map, taken from the source map spec[0]:\r\n   *\r\n   *     {\r\n   *       version : 3,\r\n   *       file: \"out.js\",\r\n   *       sourceRoot : \"\",\r\n   *       sources: [\"foo.js\", \"bar.js\"],\r\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n   *       mappings: \"AA,AB;;ABCDE;\"\r\n   *     }\r\n   *\r\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\r\n   */\r\n  function SourceMapConsumer(aSourceMap) {\r\n    var sourceMap = aSourceMap;\r\n    if (typeof aSourceMap === 'string') {\r\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\r\n    }\r\n\r\n    var version = util.getArg(sourceMap, 'version');\r\n    var sources = util.getArg(sourceMap, 'sources');\r\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\r\n    // requires the array) to play nice here.\r\n    var names = util.getArg(sourceMap, 'names', []);\r\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\r\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\r\n    var mappings = util.getArg(sourceMap, 'mappings');\r\n    var file = util.getArg(sourceMap, 'file', null);\r\n\r\n    // Once again, Sass deviates from the spec and supplies the version as a\r\n    // string rather than a number, so we use loose equality checking here.\r\n    if (version != this._version) {\r\n      throw new Error('Unsupported version: ' + version);\r\n    }\r\n\r\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\r\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\r\n    // See bugzil.la/1090768.\r\n    sources = sources.map(util.normalize);\r\n\r\n    // Pass `true` below to allow duplicate names and sources. While source maps\r\n    // are intended to be compressed and deduplicated, the TypeScript compiler\r\n    // sometimes generates source maps with duplicates in them. See Github issue\r\n    // #72 and bugzil.la/889492.\r\n    this._names = ArraySet.fromArray(names, true);\r\n    this._sources = ArraySet.fromArray(sources, true);\r\n\r\n    this.sourceRoot = sourceRoot;\r\n    this.sourcesContent = sourcesContent;\r\n    this._mappings = mappings;\r\n    this.file = file;\r\n  }\r\n\r\n  /**\r\n   * Create a SourceMapConsumer from a SourceMapGenerator.\r\n   *\r\n   * @param SourceMapGenerator aSourceMap\r\n   *        The source map that will be consumed.\r\n   * @returns SourceMapConsumer\r\n   */\r\n  SourceMapConsumer.fromSourceMap =\r\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\r\n      var smc = Object.create(SourceMapConsumer.prototype);\r\n\r\n      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\r\n      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\r\n      smc.sourceRoot = aSourceMap._sourceRoot;\r\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\r\n                                                              smc.sourceRoot);\r\n      smc.file = aSourceMap._file;\r\n\r\n      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();\r\n      smc.__originalMappings = aSourceMap._mappings.toArray().slice()\r\n        .sort(util.compareByOriginalPositions);\r\n\r\n      return smc;\r\n    };\r\n\r\n  /**\r\n   * The version of the source mapping spec that we are consuming.\r\n   */\r\n  SourceMapConsumer.prototype._version = 3;\r\n\r\n  /**\r\n   * The list of original sources.\r\n   */\r\n  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {\r\n    get: function () {\r\n      return this._sources.toArray().map(function (s) {\r\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\r\n      }, this);\r\n    }\r\n  });\r\n\r\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\r\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\r\n  // are lazily instantiated, accessed via the `_generatedMappings` and\r\n  // `_originalMappings` getters respectively, and we only parse the mappings\r\n  // and create these arrays once queried for a source location. We jump through\r\n  // these hoops because there can be many thousands of mappings, and parsing\r\n  // them is expensive, so we only want to do it if we must.\r\n  //\r\n  // Each object in the arrays is of the form:\r\n  //\r\n  //     {\r\n  //       generatedLine: The line number in the generated code,\r\n  //       generatedColumn: The column number in the generated code,\r\n  //       source: The path to the original source file that generated this\r\n  //               chunk of code,\r\n  //       originalLine: The line number in the original source that\r\n  //                     corresponds to this chunk of generated code,\r\n  //       originalColumn: The column number in the original source that\r\n  //                       corresponds to this chunk of generated code,\r\n  //       name: The name of the original symbol which generated this chunk of\r\n  //             code.\r\n  //     }\r\n  //\r\n  // All properties except for `generatedLine` and `generatedColumn` can be\r\n  // `null`.\r\n  //\r\n  // `_generatedMappings` is ordered by the generated positions.\r\n  //\r\n  // `_originalMappings` is ordered by the original positions.\r\n\r\n  SourceMapConsumer.prototype.__generatedMappings = null;\r\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\r\n    get: function () {\r\n      if (!this.__generatedMappings) {\r\n        this.__generatedMappings = [];\r\n        this.__originalMappings = [];\r\n        this._parseMappings(this._mappings, this.sourceRoot);\r\n      }\r\n\r\n      return this.__generatedMappings;\r\n    }\r\n  });\r\n\r\n  SourceMapConsumer.prototype.__originalMappings = null;\r\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\r\n    get: function () {\r\n      if (!this.__originalMappings) {\r\n        this.__generatedMappings = [];\r\n        this.__originalMappings = [];\r\n        this._parseMappings(this._mappings, this.sourceRoot);\r\n      }\r\n\r\n      return this.__originalMappings;\r\n    }\r\n  });\r\n\r\n  SourceMapConsumer.prototype._nextCharIsMappingSeparator =\r\n    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {\r\n      var c = aStr.charAt(0);\r\n      return c === \";\" || c === \",\";\r\n    };\r\n\r\n  /**\r\n   * Parse the mappings in a string in to a data structure which we can easily\r\n   * query (the ordered arrays in the `this.__generatedMappings` and\r\n   * `this.__originalMappings` properties).\r\n   */\r\n  SourceMapConsumer.prototype._parseMappings =\r\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n      var generatedLine = 1;\r\n      var previousGeneratedColumn = 0;\r\n      var previousOriginalLine = 0;\r\n      var previousOriginalColumn = 0;\r\n      var previousSource = 0;\r\n      var previousName = 0;\r\n      var str = aStr;\r\n      var temp = {};\r\n      var mapping;\r\n\r\n      while (str.length > 0) {\r\n        if (str.charAt(0) === ';') {\r\n          generatedLine++;\r\n          str = str.slice(1);\r\n          previousGeneratedColumn = 0;\r\n        }\r\n        else if (str.charAt(0) === ',') {\r\n          str = str.slice(1);\r\n        }\r\n        else {\r\n          mapping = {};\r\n          mapping.generatedLine = generatedLine;\r\n\r\n          // Generated column.\r\n          base64VLQ.decode(str, temp);\r\n          mapping.generatedColumn = previousGeneratedColumn + temp.value;\r\n          previousGeneratedColumn = mapping.generatedColumn;\r\n          str = temp.rest;\r\n\r\n          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {\r\n            // Original source.\r\n            base64VLQ.decode(str, temp);\r\n            mapping.source = this._sources.at(previousSource + temp.value);\r\n            previousSource += temp.value;\r\n            str = temp.rest;\r\n            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {\r\n              throw new Error('Found a source, but no line and column');\r\n            }\r\n\r\n            // Original line.\r\n            base64VLQ.decode(str, temp);\r\n            mapping.originalLine = previousOriginalLine + temp.value;\r\n            previousOriginalLine = mapping.originalLine;\r\n            // Lines are stored 0-based\r\n            mapping.originalLine += 1;\r\n            str = temp.rest;\r\n            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {\r\n              throw new Error('Found a source and line, but no column');\r\n            }\r\n\r\n            // Original column.\r\n            base64VLQ.decode(str, temp);\r\n            mapping.originalColumn = previousOriginalColumn + temp.value;\r\n            previousOriginalColumn = mapping.originalColumn;\r\n            str = temp.rest;\r\n\r\n            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {\r\n              // Original name.\r\n              base64VLQ.decode(str, temp);\r\n              mapping.name = this._names.at(previousName + temp.value);\r\n              previousName += temp.value;\r\n              str = temp.rest;\r\n            }\r\n          }\r\n\r\n          this.__generatedMappings.push(mapping);\r\n          if (typeof mapping.originalLine === 'number') {\r\n            this.__originalMappings.push(mapping);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.__generatedMappings.sort(util.compareByGeneratedPositions);\r\n      this.__originalMappings.sort(util.compareByOriginalPositions);\r\n    };\r\n\r\n  /**\r\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\r\n   * we are searching for in the given \"haystack\" of mappings.\r\n   */\r\n  SourceMapConsumer.prototype._findMapping =\r\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\r\n                                           aColumnName, aComparator) {\r\n      // To return the position we are searching for, we must first find the\r\n      // mapping for the given position and then return the opposite position it\r\n      // points to. Because the mappings are sorted, we can use binary search to\r\n      // find the best mapping.\r\n\r\n      if (aNeedle[aLineName] <= 0) {\r\n        throw new TypeError('Line must be greater than or equal to 1, got '\r\n                            + aNeedle[aLineName]);\r\n      }\r\n      if (aNeedle[aColumnName] < 0) {\r\n        throw new TypeError('Column must be greater than or equal to 0, got '\r\n                            + aNeedle[aColumnName]);\r\n      }\r\n\r\n      return binarySearch.search(aNeedle, aMappings, aComparator);\r\n    };\r\n\r\n  /**\r\n   * Compute the last column for each generated mapping. The last column is\r\n   * inclusive.\r\n   */\r\n  SourceMapConsumer.prototype.computeColumnSpans =\r\n    function SourceMapConsumer_computeColumnSpans() {\r\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\r\n        var mapping = this._generatedMappings[index];\r\n\r\n        // Mappings do not contain a field for the last generated columnt. We\r\n        // can come up with an optimistic estimate, however, by assuming that\r\n        // mappings are contiguous (i.e. given two consecutive mappings, the\r\n        // first mapping ends where the second one starts).\r\n        if (index + 1 < this._generatedMappings.length) {\r\n          var nextMapping = this._generatedMappings[index + 1];\r\n\r\n          if (mapping.generatedLine === nextMapping.generatedLine) {\r\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // The last mapping for each line spans the entire line.\r\n        mapping.lastGeneratedColumn = Infinity;\r\n      }\r\n    };\r\n\r\n  /**\r\n   * Returns the original source, line, and column information for the generated\r\n   * source's line and column positions provided. The only argument is an object\r\n   * with the following properties:\r\n   *\r\n   *   - line: The line number in the generated source.\r\n   *   - column: The column number in the generated source.\r\n   *\r\n   * and an object is returned with the following properties:\r\n   *\r\n   *   - source: The original source file, or null.\r\n   *   - line: The line number in the original source, or null.\r\n   *   - column: The column number in the original source, or null.\r\n   *   - name: The original identifier, or null.\r\n   */\r\n  SourceMapConsumer.prototype.originalPositionFor =\r\n    function SourceMapConsumer_originalPositionFor(aArgs) {\r\n      var needle = {\r\n        generatedLine: util.getArg(aArgs, 'line'),\r\n        generatedColumn: util.getArg(aArgs, 'column')\r\n      };\r\n\r\n      var index = this._findMapping(needle,\r\n                                    this._generatedMappings,\r\n                                    \"generatedLine\",\r\n                                    \"generatedColumn\",\r\n                                    util.compareByGeneratedPositions);\r\n\r\n      if (index >= 0) {\r\n        var mapping = this._generatedMappings[index];\r\n\r\n        if (mapping.generatedLine === needle.generatedLine) {\r\n          var source = util.getArg(mapping, 'source', null);\r\n          if (source != null && this.sourceRoot != null) {\r\n            source = util.join(this.sourceRoot, source);\r\n          }\r\n          return {\r\n            source: source,\r\n            line: util.getArg(mapping, 'originalLine', null),\r\n            column: util.getArg(mapping, 'originalColumn', null),\r\n            name: util.getArg(mapping, 'name', null)\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        source: null,\r\n        line: null,\r\n        column: null,\r\n        name: null\r\n      };\r\n    };\r\n\r\n  /**\r\n   * Returns the original source content. The only argument is the url of the\r\n   * original source file. Returns null if no original source content is\r\n   * availible.\r\n   */\r\n  SourceMapConsumer.prototype.sourceContentFor =\r\n    function SourceMapConsumer_sourceContentFor(aSource) {\r\n      if (!this.sourcesContent) {\r\n        return null;\r\n      }\r\n\r\n      if (this.sourceRoot != null) {\r\n        aSource = util.relative(this.sourceRoot, aSource);\r\n      }\r\n\r\n      if (this._sources.has(aSource)) {\r\n        return this.sourcesContent[this._sources.indexOf(aSource)];\r\n      }\r\n\r\n      var url;\r\n      if (this.sourceRoot != null\r\n          && (url = util.urlParse(this.sourceRoot))) {\r\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\r\n        // many users. We can help them out when they expect file:// URIs to\r\n        // behave like it would if they were running a local HTTP server. See\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\r\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\r\n        if (url.scheme == \"file\"\r\n            && this._sources.has(fileUriAbsPath)) {\r\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\r\n        }\r\n\r\n        if ((!url.path || url.path == \"/\")\r\n            && this._sources.has(\"/\" + aSource)) {\r\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\r\n        }\r\n      }\r\n\r\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\r\n    };\r\n\r\n  /**\r\n   * Returns the generated line and column information for the original source,\r\n   * line, and column positions provided. The only argument is an object with\r\n   * the following properties:\r\n   *\r\n   *   - source: The filename of the original source.\r\n   *   - line: The line number in the original source.\r\n   *   - column: The column number in the original source.\r\n   *\r\n   * and an object is returned with the following properties:\r\n   *\r\n   *   - line: The line number in the generated source, or null.\r\n   *   - column: The column number in the generated source, or null.\r\n   */\r\n  SourceMapConsumer.prototype.generatedPositionFor =\r\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\r\n      var needle = {\r\n        source: util.getArg(aArgs, 'source'),\r\n        originalLine: util.getArg(aArgs, 'line'),\r\n        originalColumn: util.getArg(aArgs, 'column')\r\n      };\r\n\r\n      if (this.sourceRoot != null) {\r\n        needle.source = util.relative(this.sourceRoot, needle.source);\r\n      }\r\n\r\n      var index = this._findMapping(needle,\r\n                                    this._originalMappings,\r\n                                    \"originalLine\",\r\n                                    \"originalColumn\",\r\n                                    util.compareByOriginalPositions);\r\n\r\n      if (index >= 0) {\r\n        var mapping = this._originalMappings[index];\r\n\r\n        return {\r\n          line: util.getArg(mapping, 'generatedLine', null),\r\n          column: util.getArg(mapping, 'generatedColumn', null),\r\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n        };\r\n      }\r\n\r\n      return {\r\n        line: null,\r\n        column: null,\r\n        lastColumn: null\r\n      };\r\n    };\r\n\r\n  /**\r\n   * Returns all generated line and column information for the original source\r\n   * and line provided. The only argument is an object with the following\r\n   * properties:\r\n   *\r\n   *   - source: The filename of the original source.\r\n   *   - line: The line number in the original source.\r\n   *\r\n   * and an array of objects is returned, each with the following properties:\r\n   *\r\n   *   - line: The line number in the generated source, or null.\r\n   *   - column: The column number in the generated source, or null.\r\n   */\r\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\r\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\r\n      // When there is no exact match, SourceMapConsumer.prototype._findMapping\r\n      // returns the index of the closest mapping less than the needle. By\r\n      // setting needle.originalColumn to Infinity, we thus find the last\r\n      // mapping for the given line, provided such a mapping exists.\r\n      var needle = {\r\n        source: util.getArg(aArgs, 'source'),\r\n        originalLine: util.getArg(aArgs, 'line'),\r\n        originalColumn: Infinity\r\n      };\r\n\r\n      if (this.sourceRoot != null) {\r\n        needle.source = util.relative(this.sourceRoot, needle.source);\r\n      }\r\n\r\n      var mappings = [];\r\n\r\n      var index = this._findMapping(needle,\r\n                                    this._originalMappings,\r\n                                    \"originalLine\",\r\n                                    \"originalColumn\",\r\n                                    util.compareByOriginalPositions);\r\n      if (index >= 0) {\r\n        var mapping = this._originalMappings[index];\r\n\r\n        while (mapping && mapping.originalLine === needle.originalLine) {\r\n          mappings.push({\r\n            line: util.getArg(mapping, 'generatedLine', null),\r\n            column: util.getArg(mapping, 'generatedColumn', null),\r\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n          });\r\n\r\n          mapping = this._originalMappings[--index];\r\n        }\r\n      }\r\n\r\n      return mappings.reverse();\r\n    };\r\n\r\n  SourceMapConsumer.GENERATED_ORDER = 1;\r\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\r\n\r\n  /**\r\n   * Iterate over each mapping between an original source/line/column and a\r\n   * generated line/column in this source map.\r\n   *\r\n   * @param Function aCallback\r\n   *        The function that is called with each mapping.\r\n   * @param Object aContext\r\n   *        Optional. If specified, this object will be the value of `this` every\r\n   *        time that `aCallback` is called.\r\n   * @param aOrder\r\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\r\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\r\n   *        iterate over the mappings sorted by the generated file's line/column\r\n   *        order or the original's source/line/column order, respectively. Defaults to\r\n   *        `SourceMapConsumer.GENERATED_ORDER`.\r\n   */\r\n  SourceMapConsumer.prototype.eachMapping =\r\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\r\n      var context = aContext || null;\r\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\r\n\r\n      var mappings;\r\n      switch (order) {\r\n      case SourceMapConsumer.GENERATED_ORDER:\r\n        mappings = this._generatedMappings;\r\n        break;\r\n      case SourceMapConsumer.ORIGINAL_ORDER:\r\n        mappings = this._originalMappings;\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown order of iteration.\");\r\n      }\r\n\r\n      var sourceRoot = this.sourceRoot;\r\n      mappings.map(function (mapping) {\r\n        var source = mapping.source;\r\n        if (source != null && sourceRoot != null) {\r\n          source = util.join(sourceRoot, source);\r\n        }\r\n        return {\r\n          source: source,\r\n          generatedLine: mapping.generatedLine,\r\n          generatedColumn: mapping.generatedColumn,\r\n          originalLine: mapping.originalLine,\r\n          originalColumn: mapping.originalColumn,\r\n          name: mapping.name\r\n        };\r\n      }).forEach(aCallback, context);\r\n    };\r\n\r\n  exports.SourceMapConsumer = SourceMapConsumer;\r\n\r\n});\r\n\r\n},{\"./array-set\":28,\"./base64-vlq\":29,\"./binary-search\":31,\"./util\":36,\"amdefine\":37}],34:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var base64VLQ = require('./base64-vlq');\r\n  var util = require('./util');\r\n  var ArraySet = require('./array-set').ArraySet;\r\n  var MappingList = require('./mapping-list').MappingList;\r\n\r\n  /**\r\n   * An instance of the SourceMapGenerator represents a source map which is\r\n   * being built incrementally. You may pass an object with the following\r\n   * properties:\r\n   *\r\n   *   - file: The filename of the generated source.\r\n   *   - sourceRoot: A root for all relative URLs in this source map.\r\n   */\r\n  function SourceMapGenerator(aArgs) {\r\n    if (!aArgs) {\r\n      aArgs = {};\r\n    }\r\n    this._file = util.getArg(aArgs, 'file', null);\r\n    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\r\n    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\r\n    this._sources = new ArraySet();\r\n    this._names = new ArraySet();\r\n    this._mappings = new MappingList();\r\n    this._sourcesContents = null;\r\n  }\r\n\r\n  SourceMapGenerator.prototype._version = 3;\r\n\r\n  /**\r\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\r\n   *\r\n   * @param aSourceMapConsumer The SourceMap.\r\n   */\r\n  SourceMapGenerator.fromSourceMap =\r\n    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\r\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\r\n      var generator = new SourceMapGenerator({\r\n        file: aSourceMapConsumer.file,\r\n        sourceRoot: sourceRoot\r\n      });\r\n      aSourceMapConsumer.eachMapping(function (mapping) {\r\n        var newMapping = {\r\n          generated: {\r\n            line: mapping.generatedLine,\r\n            column: mapping.generatedColumn\r\n          }\r\n        };\r\n\r\n        if (mapping.source != null) {\r\n          newMapping.source = mapping.source;\r\n          if (sourceRoot != null) {\r\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\r\n          }\r\n\r\n          newMapping.original = {\r\n            line: mapping.originalLine,\r\n            column: mapping.originalColumn\r\n          };\r\n\r\n          if (mapping.name != null) {\r\n            newMapping.name = mapping.name;\r\n          }\r\n        }\r\n\r\n        generator.addMapping(newMapping);\r\n      });\r\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\r\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\r\n        if (content != null) {\r\n          generator.setSourceContent(sourceFile, content);\r\n        }\r\n      });\r\n      return generator;\r\n    };\r\n\r\n  /**\r\n   * Add a single mapping from original source line and column to the generated\r\n   * source's line and column for this source map being created. The mapping\r\n   * object should have the following properties:\r\n   *\r\n   *   - generated: An object with the generated line and column positions.\r\n   *   - original: An object with the original line and column positions.\r\n   *   - source: The original source file (relative to the sourceRoot).\r\n   *   - name: An optional original token name for this mapping.\r\n   */\r\n  SourceMapGenerator.prototype.addMapping =\r\n    function SourceMapGenerator_addMapping(aArgs) {\r\n      var generated = util.getArg(aArgs, 'generated');\r\n      var original = util.getArg(aArgs, 'original', null);\r\n      var source = util.getArg(aArgs, 'source', null);\r\n      var name = util.getArg(aArgs, 'name', null);\r\n\r\n      if (!this._skipValidation) {\r\n        this._validateMapping(generated, original, source, name);\r\n      }\r\n\r\n      if (source != null && !this._sources.has(source)) {\r\n        this._sources.add(source);\r\n      }\r\n\r\n      if (name != null && !this._names.has(name)) {\r\n        this._names.add(name);\r\n      }\r\n\r\n      this._mappings.add({\r\n        generatedLine: generated.line,\r\n        generatedColumn: generated.column,\r\n        originalLine: original != null && original.line,\r\n        originalColumn: original != null && original.column,\r\n        source: source,\r\n        name: name\r\n      });\r\n    };\r\n\r\n  /**\r\n   * Set the source content for a source file.\r\n   */\r\n  SourceMapGenerator.prototype.setSourceContent =\r\n    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\r\n      var source = aSourceFile;\r\n      if (this._sourceRoot != null) {\r\n        source = util.relative(this._sourceRoot, source);\r\n      }\r\n\r\n      if (aSourceContent != null) {\r\n        // Add the source content to the _sourcesContents map.\r\n        // Create a new _sourcesContents map if the property is null.\r\n        if (!this._sourcesContents) {\r\n          this._sourcesContents = {};\r\n        }\r\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\r\n      } else if (this._sourcesContents) {\r\n        // Remove the source file from the _sourcesContents map.\r\n        // If the _sourcesContents map is empty, set the property to null.\r\n        delete this._sourcesContents[util.toSetString(source)];\r\n        if (Object.keys(this._sourcesContents).length === 0) {\r\n          this._sourcesContents = null;\r\n        }\r\n      }\r\n    };\r\n\r\n  /**\r\n   * Applies the mappings of a sub-source-map for a specific source file to the\r\n   * source map being generated. Each mapping to the supplied source file is\r\n   * rewritten using the supplied source map. Note: The resolution for the\r\n   * resulting mappings is the minimium of this map and the supplied map.\r\n   *\r\n   * @param aSourceMapConsumer The source map to be applied.\r\n   * @param aSourceFile Optional. The filename of the source file.\r\n   *        If omitted, SourceMapConsumer's file property will be used.\r\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\r\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\r\n   *        This parameter is needed when the two source maps aren't in the same\r\n   *        directory, and the source map to be applied contains relative source\r\n   *        paths. If so, those relative source paths need to be rewritten\r\n   *        relative to the SourceMapGenerator.\r\n   */\r\n  SourceMapGenerator.prototype.applySourceMap =\r\n    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\r\n      var sourceFile = aSourceFile;\r\n      // If aSourceFile is omitted, we will use the file property of the SourceMap\r\n      if (aSourceFile == null) {\r\n        if (aSourceMapConsumer.file == null) {\r\n          throw new Error(\r\n            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\r\n            'or the source map\\'s \"file\" property. Both were omitted.'\r\n          );\r\n        }\r\n        sourceFile = aSourceMapConsumer.file;\r\n      }\r\n      var sourceRoot = this._sourceRoot;\r\n      // Make \"sourceFile\" relative if an absolute Url is passed.\r\n      if (sourceRoot != null) {\r\n        sourceFile = util.relative(sourceRoot, sourceFile);\r\n      }\r\n      // Applying the SourceMap can add and remove items from the sources and\r\n      // the names array.\r\n      var newSources = new ArraySet();\r\n      var newNames = new ArraySet();\r\n\r\n      // Find mappings for the \"sourceFile\"\r\n      this._mappings.unsortedForEach(function (mapping) {\r\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\r\n          // Check if it can be mapped by the source map, then update the mapping.\r\n          var original = aSourceMapConsumer.originalPositionFor({\r\n            line: mapping.originalLine,\r\n            column: mapping.originalColumn\r\n          });\r\n          if (original.source != null) {\r\n            // Copy mapping\r\n            mapping.source = original.source;\r\n            if (aSourceMapPath != null) {\r\n              mapping.source = util.join(aSourceMapPath, mapping.source)\r\n            }\r\n            if (sourceRoot != null) {\r\n              mapping.source = util.relative(sourceRoot, mapping.source);\r\n            }\r\n            mapping.originalLine = original.line;\r\n            mapping.originalColumn = original.column;\r\n            if (original.name != null) {\r\n              mapping.name = original.name;\r\n            }\r\n          }\r\n        }\r\n\r\n        var source = mapping.source;\r\n        if (source != null && !newSources.has(source)) {\r\n          newSources.add(source);\r\n        }\r\n\r\n        var name = mapping.name;\r\n        if (name != null && !newNames.has(name)) {\r\n          newNames.add(name);\r\n        }\r\n\r\n      }, this);\r\n      this._sources = newSources;\r\n      this._names = newNames;\r\n\r\n      // Copy sourcesContents of applied map.\r\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\r\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\r\n        if (content != null) {\r\n          if (aSourceMapPath != null) {\r\n            sourceFile = util.join(aSourceMapPath, sourceFile);\r\n          }\r\n          if (sourceRoot != null) {\r\n            sourceFile = util.relative(sourceRoot, sourceFile);\r\n          }\r\n          this.setSourceContent(sourceFile, content);\r\n        }\r\n      }, this);\r\n    };\r\n\r\n  /**\r\n   * A mapping can have one of the three levels of data:\r\n   *\r\n   *   1. Just the generated position.\r\n   *   2. The Generated position, original position, and original source.\r\n   *   3. Generated and original position, original source, as well as a name\r\n   *      token.\r\n   *\r\n   * To maintain consistency, we validate that any new mapping being added falls\r\n   * in to one of these categories.\r\n   */\r\n  SourceMapGenerator.prototype._validateMapping =\r\n    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\r\n                                                aName) {\r\n      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\r\n          && aGenerated.line > 0 && aGenerated.column >= 0\r\n          && !aOriginal && !aSource && !aName) {\r\n        // Case 1.\r\n        return;\r\n      }\r\n      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\r\n               && aOriginal && 'line' in aOriginal && 'column' in aOriginal\r\n               && aGenerated.line > 0 && aGenerated.column >= 0\r\n               && aOriginal.line > 0 && aOriginal.column >= 0\r\n               && aSource) {\r\n        // Cases 2 and 3.\r\n        return;\r\n      }\r\n      else {\r\n        throw new Error('Invalid mapping: ' + JSON.stringify({\r\n          generated: aGenerated,\r\n          source: aSource,\r\n          original: aOriginal,\r\n          name: aName\r\n        }));\r\n      }\r\n    };\r\n\r\n  /**\r\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\r\n   * specified by the source map format.\r\n   */\r\n  SourceMapGenerator.prototype._serializeMappings =\r\n    function SourceMapGenerator_serializeMappings() {\r\n      var previousGeneratedColumn = 0;\r\n      var previousGeneratedLine = 1;\r\n      var previousOriginalColumn = 0;\r\n      var previousOriginalLine = 0;\r\n      var previousName = 0;\r\n      var previousSource = 0;\r\n      var result = '';\r\n      var mapping;\r\n\r\n      var mappings = this._mappings.toArray();\r\n\r\n      for (var i = 0, len = mappings.length; i < len; i++) {\r\n        mapping = mappings[i];\r\n\r\n        if (mapping.generatedLine !== previousGeneratedLine) {\r\n          previousGeneratedColumn = 0;\r\n          while (mapping.generatedLine !== previousGeneratedLine) {\r\n            result += ';';\r\n            previousGeneratedLine++;\r\n          }\r\n        }\r\n        else {\r\n          if (i > 0) {\r\n            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {\r\n              continue;\r\n            }\r\n            result += ',';\r\n          }\r\n        }\r\n\r\n        result += base64VLQ.encode(mapping.generatedColumn\r\n                                   - previousGeneratedColumn);\r\n        previousGeneratedColumn = mapping.generatedColumn;\r\n\r\n        if (mapping.source != null) {\r\n          result += base64VLQ.encode(this._sources.indexOf(mapping.source)\r\n                                     - previousSource);\r\n          previousSource = this._sources.indexOf(mapping.source);\r\n\r\n          // lines are stored 0-based in SourceMap spec version 3\r\n          result += base64VLQ.encode(mapping.originalLine - 1\r\n                                     - previousOriginalLine);\r\n          previousOriginalLine = mapping.originalLine - 1;\r\n\r\n          result += base64VLQ.encode(mapping.originalColumn\r\n                                     - previousOriginalColumn);\r\n          previousOriginalColumn = mapping.originalColumn;\r\n\r\n          if (mapping.name != null) {\r\n            result += base64VLQ.encode(this._names.indexOf(mapping.name)\r\n                                       - previousName);\r\n            previousName = this._names.indexOf(mapping.name);\r\n          }\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n\r\n  SourceMapGenerator.prototype._generateSourcesContent =\r\n    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\r\n      return aSources.map(function (source) {\r\n        if (!this._sourcesContents) {\r\n          return null;\r\n        }\r\n        if (aSourceRoot != null) {\r\n          source = util.relative(aSourceRoot, source);\r\n        }\r\n        var key = util.toSetString(source);\r\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents,\r\n                                                    key)\r\n          ? this._sourcesContents[key]\r\n          : null;\r\n      }, this);\r\n    };\r\n\r\n  /**\r\n   * Externalize the source map.\r\n   */\r\n  SourceMapGenerator.prototype.toJSON =\r\n    function SourceMapGenerator_toJSON() {\r\n      var map = {\r\n        version: this._version,\r\n        sources: this._sources.toArray(),\r\n        names: this._names.toArray(),\r\n        mappings: this._serializeMappings()\r\n      };\r\n      if (this._file != null) {\r\n        map.file = this._file;\r\n      }\r\n      if (this._sourceRoot != null) {\r\n        map.sourceRoot = this._sourceRoot;\r\n      }\r\n      if (this._sourcesContents) {\r\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\r\n      }\r\n\r\n      return map;\r\n    };\r\n\r\n  /**\r\n   * Render the source map being generated to a string.\r\n   */\r\n  SourceMapGenerator.prototype.toString =\r\n    function SourceMapGenerator_toString() {\r\n      return JSON.stringify(this);\r\n    };\r\n\r\n  exports.SourceMapGenerator = SourceMapGenerator;\r\n\r\n});\r\n\r\n},{\"./array-set\":28,\"./base64-vlq\":29,\"./mapping-list\":32,\"./util\":36,\"amdefine\":37}],35:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\r\n  var util = require('./util');\r\n\r\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\r\n  // operating systems these days (capturing the result).\r\n  var REGEX_NEWLINE = /(\\r?\\n)/;\r\n\r\n  // Newline character code for charCodeAt() comparisons\r\n  var NEWLINE_CODE = 10;\r\n\r\n  // Private symbol for identifying `SourceNode`s when multiple versions of\r\n  // the source-map library are loaded. This MUST NOT CHANGE across\r\n  // versions!\r\n  var isSourceNode = \"$$$isSourceNode$$$\";\r\n\r\n  /**\r\n   * SourceNodes provide a way to abstract over interpolating/concatenating\r\n   * snippets of generated JavaScript source code while maintaining the line and\r\n   * column information associated with the original source code.\r\n   *\r\n   * @param aLine The original line number.\r\n   * @param aColumn The original column number.\r\n   * @param aSource The original source's filename.\r\n   * @param aChunks Optional. An array of strings which are snippets of\r\n   *        generated JS, or other SourceNodes.\r\n   * @param aName The original identifier.\r\n   */\r\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\r\n    this.children = [];\r\n    this.sourceContents = {};\r\n    this.line = aLine == null ? null : aLine;\r\n    this.column = aColumn == null ? null : aColumn;\r\n    this.source = aSource == null ? null : aSource;\r\n    this.name = aName == null ? null : aName;\r\n    this[isSourceNode] = true;\r\n    if (aChunks != null) this.add(aChunks);\r\n  }\r\n\r\n  /**\r\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\r\n   *\r\n   * @param aGeneratedCode The generated code\r\n   * @param aSourceMapConsumer The SourceMap for the generated code\r\n   * @param aRelativePath Optional. The path that relative sources in the\r\n   *        SourceMapConsumer should be relative to.\r\n   */\r\n  SourceNode.fromStringWithSourceMap =\r\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\r\n      // The SourceNode we want to fill with the generated code\r\n      // and the SourceMap\r\n      var node = new SourceNode();\r\n\r\n      // All even indices of this array are one line of the generated code,\r\n      // while all odd indices are the newlines between two adjacent lines\r\n      // (since `REGEX_NEWLINE` captures its match).\r\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\r\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\r\n      var shiftNextLine = function() {\r\n        var lineContents = remainingLines.shift();\r\n        // The last line of a file might not have a newline.\r\n        var newLine = remainingLines.shift() || \"\";\r\n        return lineContents + newLine;\r\n      };\r\n\r\n      // We need to remember the position of \"remainingLines\"\r\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\r\n\r\n      // The generate SourceNodes we need a code range.\r\n      // To extract it current and last mapping is used.\r\n      // Here we store the last mapping.\r\n      var lastMapping = null;\r\n\r\n      aSourceMapConsumer.eachMapping(function (mapping) {\r\n        if (lastMapping !== null) {\r\n          // We add the code from \"lastMapping\" to \"mapping\":\r\n          // First check if there is a new line in between.\r\n          if (lastGeneratedLine < mapping.generatedLine) {\r\n            var code = \"\";\r\n            // Associate first line with \"lastMapping\"\r\n            addMappingWithCode(lastMapping, shiftNextLine());\r\n            lastGeneratedLine++;\r\n            lastGeneratedColumn = 0;\r\n            // The remaining code is added without mapping\r\n          } else {\r\n            // There is no new line in between.\r\n            // Associate the code between \"lastGeneratedColumn\" and\r\n            // \"mapping.generatedColumn\" with \"lastMapping\"\r\n            var nextLine = remainingLines[0];\r\n            var code = nextLine.substr(0, mapping.generatedColumn -\r\n                                          lastGeneratedColumn);\r\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\r\n                                                lastGeneratedColumn);\r\n            lastGeneratedColumn = mapping.generatedColumn;\r\n            addMappingWithCode(lastMapping, code);\r\n            // No more remaining code, continue\r\n            lastMapping = mapping;\r\n            return;\r\n          }\r\n        }\r\n        // We add the generated code until the first mapping\r\n        // to the SourceNode without any mapping.\r\n        // Each line is added as separate string.\r\n        while (lastGeneratedLine < mapping.generatedLine) {\r\n          node.add(shiftNextLine());\r\n          lastGeneratedLine++;\r\n        }\r\n        if (lastGeneratedColumn < mapping.generatedColumn) {\r\n          var nextLine = remainingLines[0];\r\n          node.add(nextLine.substr(0, mapping.generatedColumn));\r\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\r\n          lastGeneratedColumn = mapping.generatedColumn;\r\n        }\r\n        lastMapping = mapping;\r\n      }, this);\r\n      // We have processed all mappings.\r\n      if (remainingLines.length > 0) {\r\n        if (lastMapping) {\r\n          // Associate the remaining code in the current line with \"lastMapping\"\r\n          addMappingWithCode(lastMapping, shiftNextLine());\r\n        }\r\n        // and add the remaining lines without any mapping\r\n        node.add(remainingLines.join(\"\"));\r\n      }\r\n\r\n      // Copy sourcesContent into SourceNode\r\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\r\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\r\n        if (content != null) {\r\n          if (aRelativePath != null) {\r\n            sourceFile = util.join(aRelativePath, sourceFile);\r\n          }\r\n          node.setSourceContent(sourceFile, content);\r\n        }\r\n      });\r\n\r\n      return node;\r\n\r\n      function addMappingWithCode(mapping, code) {\r\n        if (mapping === null || mapping.source === undefined) {\r\n          node.add(code);\r\n        } else {\r\n          var source = aRelativePath\r\n            ? util.join(aRelativePath, mapping.source)\r\n            : mapping.source;\r\n          node.add(new SourceNode(mapping.originalLine,\r\n                                  mapping.originalColumn,\r\n                                  source,\r\n                                  code,\r\n                                  mapping.name));\r\n        }\r\n      }\r\n    };\r\n\r\n  /**\r\n   * Add a chunk of generated JS to this source node.\r\n   *\r\n   * @param aChunk A string snippet of generated JS code, another instance of\r\n   *        SourceNode, or an array where each member is one of those things.\r\n   */\r\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\r\n    if (Array.isArray(aChunk)) {\r\n      aChunk.forEach(function (chunk) {\r\n        this.add(chunk);\r\n      }, this);\r\n    }\r\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\r\n      if (aChunk) {\r\n        this.children.push(aChunk);\r\n      }\r\n    }\r\n    else {\r\n      throw new TypeError(\r\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\r\n      );\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Add a chunk of generated JS to the beginning of this source node.\r\n   *\r\n   * @param aChunk A string snippet of generated JS code, another instance of\r\n   *        SourceNode, or an array where each member is one of those things.\r\n   */\r\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\r\n    if (Array.isArray(aChunk)) {\r\n      for (var i = aChunk.length-1; i >= 0; i--) {\r\n        this.prepend(aChunk[i]);\r\n      }\r\n    }\r\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\r\n      this.children.unshift(aChunk);\r\n    }\r\n    else {\r\n      throw new TypeError(\r\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\r\n      );\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Walk over the tree of JS snippets in this node and its children. The\r\n   * walking function is called once for each snippet of JS and is passed that\r\n   * snippet and the its original associated source's line/column location.\r\n   *\r\n   * @param aFn The traversal function.\r\n   */\r\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\r\n    var chunk;\r\n    for (var i = 0, len = this.children.length; i < len; i++) {\r\n      chunk = this.children[i];\r\n      if (chunk[isSourceNode]) {\r\n        chunk.walk(aFn);\r\n      }\r\n      else {\r\n        if (chunk !== '') {\r\n          aFn(chunk, { source: this.source,\r\n                       line: this.line,\r\n                       column: this.column,\r\n                       name: this.name });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\r\n   * each of `this.children`.\r\n   *\r\n   * @param aSep The separator.\r\n   */\r\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\r\n    var newChildren;\r\n    var i;\r\n    var len = this.children.length;\r\n    if (len > 0) {\r\n      newChildren = [];\r\n      for (i = 0; i < len-1; i++) {\r\n        newChildren.push(this.children[i]);\r\n        newChildren.push(aSep);\r\n      }\r\n      newChildren.push(this.children[i]);\r\n      this.children = newChildren;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Call String.prototype.replace on the very right-most source snippet. Useful\r\n   * for trimming whitespace from the end of a source node, etc.\r\n   *\r\n   * @param aPattern The pattern to replace.\r\n   * @param aReplacement The thing to replace the pattern with.\r\n   */\r\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\r\n    var lastChild = this.children[this.children.length - 1];\r\n    if (lastChild[isSourceNode]) {\r\n      lastChild.replaceRight(aPattern, aReplacement);\r\n    }\r\n    else if (typeof lastChild === 'string') {\r\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\r\n    }\r\n    else {\r\n      this.children.push(''.replace(aPattern, aReplacement));\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\r\n   * in the sourcesContent field.\r\n   *\r\n   * @param aSourceFile The filename of the source file\r\n   * @param aSourceContent The content of the source file\r\n   */\r\n  SourceNode.prototype.setSourceContent =\r\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\r\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\r\n    };\r\n\r\n  /**\r\n   * Walk over the tree of SourceNodes. The walking function is called for each\r\n   * source file content and is passed the filename and source content.\r\n   *\r\n   * @param aFn The traversal function.\r\n   */\r\n  SourceNode.prototype.walkSourceContents =\r\n    function SourceNode_walkSourceContents(aFn) {\r\n      for (var i = 0, len = this.children.length; i < len; i++) {\r\n        if (this.children[i][isSourceNode]) {\r\n          this.children[i].walkSourceContents(aFn);\r\n        }\r\n      }\r\n\r\n      var sources = Object.keys(this.sourceContents);\r\n      for (var i = 0, len = sources.length; i < len; i++) {\r\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\r\n      }\r\n    };\r\n\r\n  /**\r\n   * Return the string representation of this source node. Walks over the tree\r\n   * and concatenates all the various snippets together to one string.\r\n   */\r\n  SourceNode.prototype.toString = function SourceNode_toString() {\r\n    var str = \"\";\r\n    this.walk(function (chunk) {\r\n      str += chunk;\r\n    });\r\n    return str;\r\n  };\r\n\r\n  /**\r\n   * Returns the string representation of this source node along with a source\r\n   * map.\r\n   */\r\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\r\n    var generated = {\r\n      code: \"\",\r\n      line: 1,\r\n      column: 0\r\n    };\r\n    var map = new SourceMapGenerator(aArgs);\r\n    var sourceMappingActive = false;\r\n    var lastOriginalSource = null;\r\n    var lastOriginalLine = null;\r\n    var lastOriginalColumn = null;\r\n    var lastOriginalName = null;\r\n    this.walk(function (chunk, original) {\r\n      generated.code += chunk;\r\n      if (original.source !== null\r\n          && original.line !== null\r\n          && original.column !== null) {\r\n        if(lastOriginalSource !== original.source\r\n           || lastOriginalLine !== original.line\r\n           || lastOriginalColumn !== original.column\r\n           || lastOriginalName !== original.name) {\r\n          map.addMapping({\r\n            source: original.source,\r\n            original: {\r\n              line: original.line,\r\n              column: original.column\r\n            },\r\n            generated: {\r\n              line: generated.line,\r\n              column: generated.column\r\n            },\r\n            name: original.name\r\n          });\r\n        }\r\n        lastOriginalSource = original.source;\r\n        lastOriginalLine = original.line;\r\n        lastOriginalColumn = original.column;\r\n        lastOriginalName = original.name;\r\n        sourceMappingActive = true;\r\n      } else if (sourceMappingActive) {\r\n        map.addMapping({\r\n          generated: {\r\n            line: generated.line,\r\n            column: generated.column\r\n          }\r\n        });\r\n        lastOriginalSource = null;\r\n        sourceMappingActive = false;\r\n      }\r\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\r\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\r\n          generated.line++;\r\n          generated.column = 0;\r\n          // Mappings end at eol\r\n          if (idx + 1 === length) {\r\n            lastOriginalSource = null;\r\n            sourceMappingActive = false;\r\n          } else if (sourceMappingActive) {\r\n            map.addMapping({\r\n              source: original.source,\r\n              original: {\r\n                line: original.line,\r\n                column: original.column\r\n              },\r\n              generated: {\r\n                line: generated.line,\r\n                column: generated.column\r\n              },\r\n              name: original.name\r\n            });\r\n          }\r\n        } else {\r\n          generated.column++;\r\n        }\r\n      }\r\n    });\r\n    this.walkSourceContents(function (sourceFile, sourceContent) {\r\n      map.setSourceContent(sourceFile, sourceContent);\r\n    });\r\n\r\n    return { code: generated.code, map: map };\r\n  };\r\n\r\n  exports.SourceNode = SourceNode;\r\n\r\n});\r\n\r\n},{\"./source-map-generator\":34,\"./util\":36,\"amdefine\":37}],36:[function(require,module,exports){\r\n/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\nif (typeof define !== 'function') {\r\n    var define = require('amdefine')(module, require);\r\n}\r\ndefine(function (require, exports, module) {\r\n\r\n  /**\r\n   * This is a helper function for getting values from parameter/options\r\n   * objects.\r\n   *\r\n   * @param args The object we are extracting values from\r\n   * @param name The name of the property we are getting.\r\n   * @param defaultValue An optional value to return if the property is missing\r\n   * from the object. If this is not specified and the property is missing, an\r\n   * error will be thrown.\r\n   */\r\n  function getArg(aArgs, aName, aDefaultValue) {\r\n    if (aName in aArgs) {\r\n      return aArgs[aName];\r\n    } else if (arguments.length === 3) {\r\n      return aDefaultValue;\r\n    } else {\r\n      throw new Error('\"' + aName + '\" is a required argument.');\r\n    }\r\n  }\r\n  exports.getArg = getArg;\r\n\r\n  var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\r\n  var dataUrlRegexp = /^data:.+\\,.+$/;\r\n\r\n  function urlParse(aUrl) {\r\n    var match = aUrl.match(urlRegexp);\r\n    if (!match) {\r\n      return null;\r\n    }\r\n    return {\r\n      scheme: match[1],\r\n      auth: match[2],\r\n      host: match[3],\r\n      port: match[4],\r\n      path: match[5]\r\n    };\r\n  }\r\n  exports.urlParse = urlParse;\r\n\r\n  function urlGenerate(aParsedUrl) {\r\n    var url = '';\r\n    if (aParsedUrl.scheme) {\r\n      url += aParsedUrl.scheme + ':';\r\n    }\r\n    url += '//';\r\n    if (aParsedUrl.auth) {\r\n      url += aParsedUrl.auth + '@';\r\n    }\r\n    if (aParsedUrl.host) {\r\n      url += aParsedUrl.host;\r\n    }\r\n    if (aParsedUrl.port) {\r\n      url += \":\" + aParsedUrl.port\r\n    }\r\n    if (aParsedUrl.path) {\r\n      url += aParsedUrl.path;\r\n    }\r\n    return url;\r\n  }\r\n  exports.urlGenerate = urlGenerate;\r\n\r\n  /**\r\n   * Normalizes a path, or the path portion of a URL:\r\n   *\r\n   * - Replaces consequtive slashes with one slash.\r\n   * - Removes unnecessary '.' parts.\r\n   * - Removes unnecessary '<dir>/..' parts.\r\n   *\r\n   * Based on code in the Node.js 'path' core module.\r\n   *\r\n   * @param aPath The path or url to normalize.\r\n   */\r\n  function normalize(aPath) {\r\n    var path = aPath;\r\n    var url = urlParse(aPath);\r\n    if (url) {\r\n      if (!url.path) {\r\n        return aPath;\r\n      }\r\n      path = url.path;\r\n    }\r\n    var isAbsolute = (path.charAt(0) === '/');\r\n\r\n    var parts = path.split(/\\/+/);\r\n    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\r\n      part = parts[i];\r\n      if (part === '.') {\r\n        parts.splice(i, 1);\r\n      } else if (part === '..') {\r\n        up++;\r\n      } else if (up > 0) {\r\n        if (part === '') {\r\n          // The first part is blank if the path is absolute. Trying to go\r\n          // above the root is a no-op. Therefore we can remove all '..' parts\r\n          // directly after the root.\r\n          parts.splice(i + 1, up);\r\n          up = 0;\r\n        } else {\r\n          parts.splice(i, 2);\r\n          up--;\r\n        }\r\n      }\r\n    }\r\n    path = parts.join('/');\r\n\r\n    if (path === '') {\r\n      path = isAbsolute ? '/' : '.';\r\n    }\r\n\r\n    if (url) {\r\n      url.path = path;\r\n      return urlGenerate(url);\r\n    }\r\n    return path;\r\n  }\r\n  exports.normalize = normalize;\r\n\r\n  /**\r\n   * Joins two paths/URLs.\r\n   *\r\n   * @param aRoot The root path or URL.\r\n   * @param aPath The path or URL to be joined with the root.\r\n   *\r\n   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\r\n   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\r\n   *   first.\r\n   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\r\n   *   is updated with the result and aRoot is returned. Otherwise the result\r\n   *   is returned.\r\n   *   - If aPath is absolute, the result is aPath.\r\n   *   - Otherwise the two paths are joined with a slash.\r\n   * - Joining for example 'http://' and 'www.example.com' is also supported.\r\n   */\r\n  function join(aRoot, aPath) {\r\n    if (aRoot === \"\") {\r\n      aRoot = \".\";\r\n    }\r\n    if (aPath === \"\") {\r\n      aPath = \".\";\r\n    }\r\n    var aPathUrl = urlParse(aPath);\r\n    var aRootUrl = urlParse(aRoot);\r\n    if (aRootUrl) {\r\n      aRoot = aRootUrl.path || '/';\r\n    }\r\n\r\n    // `join(foo, '//www.example.org')`\r\n    if (aPathUrl && !aPathUrl.scheme) {\r\n      if (aRootUrl) {\r\n        aPathUrl.scheme = aRootUrl.scheme;\r\n      }\r\n      return urlGenerate(aPathUrl);\r\n    }\r\n\r\n    if (aPathUrl || aPath.match(dataUrlRegexp)) {\r\n      return aPath;\r\n    }\r\n\r\n    // `join('http://', 'www.example.com')`\r\n    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\r\n      aRootUrl.host = aPath;\r\n      return urlGenerate(aRootUrl);\r\n    }\r\n\r\n    var joined = aPath.charAt(0) === '/'\r\n      ? aPath\r\n      : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\r\n\r\n    if (aRootUrl) {\r\n      aRootUrl.path = joined;\r\n      return urlGenerate(aRootUrl);\r\n    }\r\n    return joined;\r\n  }\r\n  exports.join = join;\r\n\r\n  /**\r\n   * Make a path relative to a URL or another path.\r\n   *\r\n   * @param aRoot The root path or URL.\r\n   * @param aPath The path or URL to be made relative to aRoot.\r\n   */\r\n  function relative(aRoot, aPath) {\r\n    if (aRoot === \"\") {\r\n      aRoot = \".\";\r\n    }\r\n\r\n    aRoot = aRoot.replace(/\\/$/, '');\r\n\r\n    // XXX: It is possible to remove this block, and the tests still pass!\r\n    var url = urlParse(aRoot);\r\n    if (aPath.charAt(0) == \"/\" && url && url.path == \"/\") {\r\n      return aPath.slice(1);\r\n    }\r\n\r\n    return aPath.indexOf(aRoot + '/') === 0\r\n      ? aPath.substr(aRoot.length + 1)\r\n      : aPath;\r\n  }\r\n  exports.relative = relative;\r\n\r\n  /**\r\n   * Because behavior goes wacky when you set `__proto__` on objects, we\r\n   * have to prefix all the strings in our set with an arbitrary character.\r\n   *\r\n   * See https://github.com/mozilla/source-map/pull/31 and\r\n   * https://github.com/mozilla/source-map/issues/30\r\n   *\r\n   * @param String aStr\r\n   */\r\n  function toSetString(aStr) {\r\n    return '$' + aStr;\r\n  }\r\n  exports.toSetString = toSetString;\r\n\r\n  function fromSetString(aStr) {\r\n    return aStr.substr(1);\r\n  }\r\n  exports.fromSetString = fromSetString;\r\n\r\n  function strcmp(aStr1, aStr2) {\r\n    var s1 = aStr1 || \"\";\r\n    var s2 = aStr2 || \"\";\r\n    return (s1 > s2) - (s1 < s2);\r\n  }\r\n\r\n  /**\r\n   * Comparator between two mappings where the original positions are compared.\r\n   *\r\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\r\n   * mappings with the same original source/line/column, but different generated\r\n   * line and column the same. Useful when searching for a mapping with a\r\n   * stubbed out mapping.\r\n   */\r\n  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\r\n    var cmp;\r\n\r\n    cmp = strcmp(mappingA.source, mappingB.source);\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = mappingA.originalLine - mappingB.originalLine;\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\r\n    if (cmp || onlyCompareOriginal) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = strcmp(mappingA.name, mappingB.name);\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = mappingA.generatedLine - mappingB.generatedLine;\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    return mappingA.generatedColumn - mappingB.generatedColumn;\r\n  };\r\n  exports.compareByOriginalPositions = compareByOriginalPositions;\r\n\r\n  /**\r\n   * Comparator between two mappings where the generated positions are\r\n   * compared.\r\n   *\r\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\r\n   * mappings with the same generated line and column, but different\r\n   * source/name/original line and column the same. Useful when searching for a\r\n   * mapping with a stubbed out mapping.\r\n   */\r\n  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {\r\n    var cmp;\r\n\r\n    cmp = mappingA.generatedLine - mappingB.generatedLine;\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\r\n    if (cmp || onlyCompareGenerated) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = strcmp(mappingA.source, mappingB.source);\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = mappingA.originalLine - mappingB.originalLine;\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\r\n    if (cmp) {\r\n      return cmp;\r\n    }\r\n\r\n    return strcmp(mappingA.name, mappingB.name);\r\n  };\r\n  exports.compareByGeneratedPositions = compareByGeneratedPositions;\r\n\r\n});\r\n\r\n},{\"amdefine\":37}],37:[function(require,module,exports){\r\n(function (process,__filename){\r\n/** vim: et:ts=4:sw=4:sts=4\r\n * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/amdefine for details\r\n */\r\n\r\n/*jslint node: true */\r\n/*global module, process */\r\n'use strict';\r\n\r\n/**\r\n * Creates a define for node.\r\n * @param {Object} module the \"module\" object that is defined by Node for the\r\n * current module.\r\n * @param {Function} [requireFn]. Node's require function for the current module.\r\n * It only needs to be passed in Node versions before 0.5, when module.require\r\n * did not exist.\r\n * @returns {Function} a define function that is usable for the current node\r\n * module.\r\n */\r\nfunction amdefine(module, requireFn) {\r\n    'use strict';\r\n    var defineCache = {},\r\n        loaderCache = {},\r\n        alreadyCalled = false,\r\n        path = require('path'),\r\n        makeRequire, stringRequire;\r\n\r\n    /**\r\n     * Trims the . and .. from an array of path segments.\r\n     * It will keep a leading path segment if a .. will become\r\n     * the first path segment, to help with module name lookups,\r\n     * which act like paths, but can be remapped. But the end result,\r\n     * all paths that use this function should look normalized.\r\n     * NOTE: this method MODIFIES the input array.\r\n     * @param {Array} ary the array of path segments.\r\n     */\r\n    function trimDots(ary) {\r\n        var i, part;\r\n        for (i = 0; ary[i]; i+= 1) {\r\n            part = ary[i];\r\n            if (part === '.') {\r\n                ary.splice(i, 1);\r\n                i -= 1;\r\n            } else if (part === '..') {\r\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\r\n                    //End of the line. Keep at least one non-dot\r\n                    //path segment at the front so it can be mapped\r\n                    //correctly to disk. Otherwise, there is likely\r\n                    //no path mapping for a path starting with '..'.\r\n                    //This can still fail, but catches the most reasonable\r\n                    //uses of ..\r\n                    break;\r\n                } else if (i > 0) {\r\n                    ary.splice(i - 1, 2);\r\n                    i -= 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function normalize(name, baseName) {\r\n        var baseParts;\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === '.') {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                baseParts = baseName.split('/');\r\n                baseParts = baseParts.slice(0, baseParts.length - 1);\r\n                baseParts = baseParts.concat(name.split('/'));\r\n                trimDots(baseParts);\r\n                name = baseParts.join('/');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Create the normalize() function passed to a loader plugin's\r\n     * normalize method.\r\n     */\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(id) {\r\n        function load(value) {\r\n            loaderCache[id] = value;\r\n        }\r\n\r\n        load.fromText = function (id, text) {\r\n            //This one is difficult because the text can/probably uses\r\n            //define, and any relative paths and requires should be relative\r\n            //to that id was it would be found on disk. But this would require\r\n            //bootstrapping a module/require fairly deeply from node core.\r\n            //Not sure how best to go about that yet.\r\n            throw new Error('amdefine does not implement load.fromText');\r\n        };\r\n\r\n        return load;\r\n    }\r\n\r\n    makeRequire = function (systemRequire, exports, module, relId) {\r\n        function amdRequire(deps, callback) {\r\n            if (typeof deps === 'string') {\r\n                //Synchronous, single module require('')\r\n                return stringRequire(systemRequire, exports, module, deps, relId);\r\n            } else {\r\n                //Array of dependencies with a callback.\r\n\r\n                //Convert the dependencies to modules.\r\n                deps = deps.map(function (depName) {\r\n                    return stringRequire(systemRequire, exports, module, depName, relId);\r\n                });\r\n\r\n                //Wait for next tick to call back the require call.\r\n                if (callback) {\r\n                    process.nextTick(function () {\r\n                        callback.apply(null, deps);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        amdRequire.toUrl = function (filePath) {\r\n            if (filePath.indexOf('.') === 0) {\r\n                return normalize(filePath, path.dirname(module.filename));\r\n            } else {\r\n                return filePath;\r\n            }\r\n        };\r\n\r\n        return amdRequire;\r\n    };\r\n\r\n    //Favor explicit value, passed in if the module wants to support Node 0.4.\r\n    requireFn = requireFn || function req() {\r\n        return module.require.apply(module, arguments);\r\n    };\r\n\r\n    function runFactory(id, deps, factory) {\r\n        var r, e, m, result;\r\n\r\n        if (id) {\r\n            e = loaderCache[id] = {};\r\n            m = {\r\n                id: id,\r\n                uri: __filename,\r\n                exports: e\r\n            };\r\n            r = makeRequire(requireFn, e, m, id);\r\n        } else {\r\n            //Only support one define call per file\r\n            if (alreadyCalled) {\r\n                throw new Error('amdefine with no module ID cannot be called more than once per file.');\r\n            }\r\n            alreadyCalled = true;\r\n\r\n            //Use the real variables from node\r\n            //Use module.exports for exports, since\r\n            //the exports in here is amdefine exports.\r\n            e = module.exports;\r\n            m = module;\r\n            r = makeRequire(requireFn, e, m, module.id);\r\n        }\r\n\r\n        //If there are dependencies, they are strings, so need\r\n        //to convert them to dependency values.\r\n        if (deps) {\r\n            deps = deps.map(function (depName) {\r\n                return r(depName);\r\n            });\r\n        }\r\n\r\n        //Call the factory with the right dependencies.\r\n        if (typeof factory === 'function') {\r\n            result = factory.apply(m.exports, deps);\r\n        } else {\r\n            result = factory;\r\n        }\r\n\r\n        if (result !== undefined) {\r\n            m.exports = result;\r\n            if (id) {\r\n                loaderCache[id] = m.exports;\r\n            }\r\n        }\r\n    }\r\n\r\n    stringRequire = function (systemRequire, exports, module, id, relId) {\r\n        //Split the ID by a ! so that\r\n        var index = id.indexOf('!'),\r\n            originalId = id,\r\n            prefix, plugin;\r\n\r\n        if (index === -1) {\r\n            id = normalize(id, relId);\r\n\r\n            //Straight module lookup. If it is one of the special dependencies,\r\n            //deal with it, otherwise, delegate to node.\r\n            if (id === 'require') {\r\n                return makeRequire(systemRequire, exports, module, relId);\r\n            } else if (id === 'exports') {\r\n                return exports;\r\n            } else if (id === 'module') {\r\n                return module;\r\n            } else if (loaderCache.hasOwnProperty(id)) {\r\n                return loaderCache[id];\r\n            } else if (defineCache[id]) {\r\n                runFactory.apply(null, defineCache[id]);\r\n                return loaderCache[id];\r\n            } else {\r\n                if(systemRequire) {\r\n                    return systemRequire(originalId);\r\n                } else {\r\n                    throw new Error('No module with ID: ' + id);\r\n                }\r\n            }\r\n        } else {\r\n            //There is a plugin in play.\r\n            prefix = id.substring(0, index);\r\n            id = id.substring(index + 1, id.length);\r\n\r\n            plugin = stringRequire(systemRequire, exports, module, prefix, relId);\r\n\r\n            if (plugin.normalize) {\r\n                id = plugin.normalize(id, makeNormalize(relId));\r\n            } else {\r\n                //Normalize the ID normally.\r\n                id = normalize(id, relId);\r\n            }\r\n\r\n            if (loaderCache[id]) {\r\n                return loaderCache[id];\r\n            } else {\r\n                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});\r\n\r\n                return loaderCache[id];\r\n            }\r\n        }\r\n    };\r\n\r\n    //Create a define function specific to the module asking for amdefine.\r\n    function define(id, deps, factory) {\r\n        if (Array.isArray(id)) {\r\n            factory = deps;\r\n            deps = id;\r\n            id = undefined;\r\n        } else if (typeof id !== 'string') {\r\n            factory = id;\r\n            id = deps = undefined;\r\n        }\r\n\r\n        if (deps && !Array.isArray(deps)) {\r\n            factory = deps;\r\n            deps = undefined;\r\n        }\r\n\r\n        if (!deps) {\r\n            deps = ['require', 'exports', 'module'];\r\n        }\r\n\r\n        //Set up properties for this module. If an ID, then use\r\n        //internal cache. If no ID, then use the external variables\r\n        //for this node module.\r\n        if (id) {\r\n            //Put the module in deep freeze until there is a\r\n            //require call for it.\r\n            defineCache[id] = [id, deps, factory];\r\n        } else {\r\n            runFactory(id, deps, factory);\r\n        }\r\n    }\r\n\r\n    //define.require, which has access to all the values in the\r\n    //cache. Useful for AMD modules that all have IDs in the file,\r\n    //but need to finally export a value to node based on one of those\r\n    //IDs.\r\n    define.require = function (id) {\r\n        if (loaderCache[id]) {\r\n            return loaderCache[id];\r\n        }\r\n\r\n        if (defineCache[id]) {\r\n            runFactory.apply(null, defineCache[id]);\r\n            return loaderCache[id];\r\n        }\r\n    };\r\n\r\n    define.amd = {};\r\n\r\n    return define;\r\n}\r\n\r\nmodule.exports = amdefine;\r\n\r\n}).call(this,require(\"JkpR2F\"),\"/../node_modules/escodegen/node_modules/source-map/node_modules/amdefine/amdefine.js\")\r\n},{\"JkpR2F\":43,\"path\":42}],38:[function(require,module,exports){\r\nmodule.exports={\r\n  \"name\": \"escodegen\",\r\n  \"description\": \"ECMAScript code generator\",\r\n  \"homepage\": \"http://github.com/Constellation/escodegen\",\r\n  \"main\": \"escodegen.js\",\r\n  \"bin\": {\r\n    \"esgenerate\": \"./bin/esgenerate.js\",\r\n    \"escodegen\": \"./bin/escodegen.js\"\r\n  },\r\n  \"version\": \"1.3.3\",\r\n  \"engines\": {\r\n    \"node\": \">=0.10.0\"\r\n  },\r\n  \"maintainers\": [\r\n    {\r\n      \"name\": \"constellation\",\r\n      \"email\": \"utatane.tea@gmail.com\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+ssh://git@github.com/Constellation/escodegen.git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"esutils\": \"~1.0.0\",\r\n    \"estraverse\": \"~1.5.0\",\r\n    \"esprima\": \"~1.1.1\",\r\n    \"source-map\": \"~0.1.33\"\r\n  },\r\n  \"optionalDependencies\": {\r\n    \"source-map\": \"~0.1.33\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"esprima-moz\": \"*\",\r\n    \"semver\": \"*\",\r\n    \"chai\": \"~1.7.2\",\r\n    \"gulp\": \"~3.5.0\",\r\n    \"gulp-mocha\": \"~0.4.1\",\r\n    \"gulp-eslint\": \"~0.1.2\",\r\n    \"jshint-stylish\": \"~0.1.5\",\r\n    \"gulp-jshint\": \"~1.4.0\",\r\n    \"commonjs-everywhere\": \"~0.9.6\",\r\n    \"bluebird\": \"~1.2.0\",\r\n    \"bower-registry-client\": \"~0.2.0\"\r\n  },\r\n  \"licenses\": [\r\n    {\r\n      \"type\": \"BSD\",\r\n      \"url\": \"http://github.com/Constellation/escodegen/raw/master/LICENSE.BSD\"\r\n    }\r\n  ],\r\n  \"scripts\": {\r\n    \"test\": \"gulp travis\",\r\n    \"unit-test\": \"gulp test\",\r\n    \"lint\": \"gulp lint\",\r\n    \"release\": \"node tools/release.js\",\r\n    \"build-min\": \"cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js\",\r\n    \"build\": \"cjsify -a path: tools/entry-point.js > escodegen.browser.js\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/Constellation/escodegen/issues\"\r\n  },\r\n  \"_id\": \"escodegen@1.3.3\",\r\n  \"dist\": {\r\n    \"shasum\": \"f024016f5a88e046fd12005055e939802e6c5f23\",\r\n    \"tarball\": \"http://registry.npmjs.org/escodegen/-/escodegen-1.3.3.tgz\"\r\n  },\r\n  \"_from\": \"escodegen@>=1.3.0 <1.4.0\",\r\n  \"_npmVersion\": \"1.4.3\",\r\n  \"_npmUser\": {\r\n    \"name\": \"constellation\",\r\n    \"email\": \"utatane.tea@gmail.com\"\r\n  },\r\n  \"directories\": {},\r\n  \"_shasum\": \"f024016f5a88e046fd12005055e939802e6c5f23\",\r\n  \"_resolved\": \"https://registry.npmjs.org/escodegen/-/escodegen-1.3.3.tgz\",\r\n  \"readme\": \"ERROR: No README data found!\"\r\n}\r\n\r\n},{}],39:[function(require,module,exports){\r\n/*\r\n  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\r\n    // Rhino, and plain browser loading.\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(['exports'], factory);\r\n    } else if (typeof exports !== 'undefined') {\r\n        factory(exports);\r\n    } else {\r\n        factory((root.esprima = {}));\r\n    }\r\n}(this, function (exports) {\r\n    'use strict';\r\n\r\n    var Token,\r\n        TokenName,\r\n        FnExprTokens,\r\n        Syntax,\r\n        PlaceHolders,\r\n        Messages,\r\n        Regex,\r\n        source,\r\n        strict,\r\n        index,\r\n        lineNumber,\r\n        lineStart,\r\n        hasLineTerminator,\r\n        lastIndex,\r\n        lastLineNumber,\r\n        lastLineStart,\r\n        startIndex,\r\n        startLineNumber,\r\n        startLineStart,\r\n        scanning,\r\n        length,\r\n        lookahead,\r\n        state,\r\n        extra,\r\n        isBindingElement,\r\n        isAssignmentTarget,\r\n        firstCoverInitializedNameError;\r\n\r\n    Token = {\r\n        BooleanLiteral: 1,\r\n        EOF: 2,\r\n        Identifier: 3,\r\n        Keyword: 4,\r\n        NullLiteral: 5,\r\n        NumericLiteral: 6,\r\n        Punctuator: 7,\r\n        StringLiteral: 8,\r\n        RegularExpression: 9,\r\n        Template: 10\r\n    };\r\n\r\n    TokenName = {};\r\n    TokenName[Token.BooleanLiteral] = 'Boolean';\r\n    TokenName[Token.EOF] = '<end>';\r\n    TokenName[Token.Identifier] = 'Identifier';\r\n    TokenName[Token.Keyword] = 'Keyword';\r\n    TokenName[Token.NullLiteral] = 'Null';\r\n    TokenName[Token.NumericLiteral] = 'Numeric';\r\n    TokenName[Token.Punctuator] = 'Punctuator';\r\n    TokenName[Token.StringLiteral] = 'String';\r\n    TokenName[Token.RegularExpression] = 'RegularExpression';\r\n    TokenName[Token.Template] = 'Template';\r\n\r\n    // A function following one of those tokens is an expression.\r\n    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\r\n                    'return', 'case', 'delete', 'throw', 'void',\r\n                    // assignment operators\r\n                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\r\n                    '&=', '|=', '^=', ',',\r\n                    // binary/unary operators\r\n                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\r\n                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\r\n                    '<=', '<', '>', '!=', '!=='];\r\n\r\n    Syntax = {\r\n        AssignmentExpression: 'AssignmentExpression',\r\n        AssignmentPattern: 'AssignmentPattern',\r\n        ArrayExpression: 'ArrayExpression',\r\n        ArrayPattern: 'ArrayPattern',\r\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n        BlockStatement: 'BlockStatement',\r\n        BinaryExpression: 'BinaryExpression',\r\n        BreakStatement: 'BreakStatement',\r\n        CallExpression: 'CallExpression',\r\n        CatchClause: 'CatchClause',\r\n        ClassBody: 'ClassBody',\r\n        ClassDeclaration: 'ClassDeclaration',\r\n        ClassExpression: 'ClassExpression',\r\n        ConditionalExpression: 'ConditionalExpression',\r\n        ContinueStatement: 'ContinueStatement',\r\n        DoWhileStatement: 'DoWhileStatement',\r\n        DebuggerStatement: 'DebuggerStatement',\r\n        EmptyStatement: 'EmptyStatement',\r\n        ExportAllDeclaration: 'ExportAllDeclaration',\r\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\r\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\r\n        ExportSpecifier: 'ExportSpecifier',\r\n        ExpressionStatement: 'ExpressionStatement',\r\n        ForStatement: 'ForStatement',\r\n        ForOfStatement: 'ForOfStatement',\r\n        ForInStatement: 'ForInStatement',\r\n        FunctionDeclaration: 'FunctionDeclaration',\r\n        FunctionExpression: 'FunctionExpression',\r\n        Identifier: 'Identifier',\r\n        IfStatement: 'IfStatement',\r\n        ImportDeclaration: 'ImportDeclaration',\r\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\r\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\r\n        ImportSpecifier: 'ImportSpecifier',\r\n        Literal: 'Literal',\r\n        LabeledStatement: 'LabeledStatement',\r\n        LogicalExpression: 'LogicalExpression',\r\n        MemberExpression: 'MemberExpression',\r\n        MetaProperty: 'MetaProperty',\r\n        MethodDefinition: 'MethodDefinition',\r\n        NewExpression: 'NewExpression',\r\n        ObjectExpression: 'ObjectExpression',\r\n        ObjectPattern: 'ObjectPattern',\r\n        Program: 'Program',\r\n        Property: 'Property',\r\n        RestElement: 'RestElement',\r\n        ReturnStatement: 'ReturnStatement',\r\n        SequenceExpression: 'SequenceExpression',\r\n        SpreadElement: 'SpreadElement',\r\n        Super: 'Super',\r\n        SwitchCase: 'SwitchCase',\r\n        SwitchStatement: 'SwitchStatement',\r\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\r\n        TemplateElement: 'TemplateElement',\r\n        TemplateLiteral: 'TemplateLiteral',\r\n        ThisExpression: 'ThisExpression',\r\n        ThrowStatement: 'ThrowStatement',\r\n        TryStatement: 'TryStatement',\r\n        UnaryExpression: 'UnaryExpression',\r\n        UpdateExpression: 'UpdateExpression',\r\n        VariableDeclaration: 'VariableDeclaration',\r\n        VariableDeclarator: 'VariableDeclarator',\r\n        WhileStatement: 'WhileStatement',\r\n        WithStatement: 'WithStatement',\r\n        YieldExpression: 'YieldExpression'\r\n    };\r\n\r\n    PlaceHolders = {\r\n        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'\r\n    };\r\n\r\n    // Error messages should be identical to V8.\r\n    Messages = {\r\n        UnexpectedToken: 'Unexpected token %0',\r\n        UnexpectedNumber: 'Unexpected number',\r\n        UnexpectedString: 'Unexpected string',\r\n        UnexpectedIdentifier: 'Unexpected identifier',\r\n        UnexpectedReserved: 'Unexpected reserved word',\r\n        UnexpectedTemplate: 'Unexpected quasi %0',\r\n        UnexpectedEOS: 'Unexpected end of input',\r\n        NewlineAfterThrow: 'Illegal newline after throw',\r\n        InvalidRegExp: 'Invalid regular expression',\r\n        UnterminatedRegExp: 'Invalid regular expression: missing /',\r\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\r\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\r\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\r\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\r\n        NoCatchOrFinally: 'Missing catch or finally after try',\r\n        UnknownLabel: 'Undefined label \\'%0\\'',\r\n        Redeclaration: '%0 \\'%1\\' has already been declared',\r\n        IllegalContinue: 'Illegal continue statement',\r\n        IllegalBreak: 'Illegal break statement',\r\n        IllegalReturn: 'Illegal return statement',\r\n        StrictModeWith: 'Strict mode code may not include a with statement',\r\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\r\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\r\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\r\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\r\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\r\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\r\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\r\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\r\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\r\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\r\n        StrictReservedWord: 'Use of future reserved word in strict mode',\r\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\r\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\r\n        DefaultRestParameter: 'Unexpected token =',\r\n        ObjectPatternAsRestParameter: 'Unexpected token {',\r\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\r\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\r\n        DuplicateConstructor: 'A class may only have one constructor',\r\n        StaticPrototype: 'Classes may not have static property named prototype',\r\n        MissingFromClause: 'Unexpected token',\r\n        NoAsAfterImportNamespace: 'Unexpected token',\r\n        InvalidModuleSpecifier: 'Unexpected token',\r\n        IllegalImportDeclaration: 'Unexpected token',\r\n        IllegalExportDeclaration: 'Unexpected token',\r\n        DuplicateBinding: 'Duplicate binding %0'\r\n    };\r\n\r\n    // See also tools/generate-unicode-regex.js.\r\n    Regex = {\r\n        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:\r\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/,\r\n\r\n        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:\r\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDD0-\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF01-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\r\n    };\r\n\r\n    // Ensure the condition is true, otherwise throw an error.\r\n    // This is only to have a better contract semantic, i.e. another safety net\r\n    // to catch a logic error. The condition shall be fulfilled in normal case.\r\n    // Do NOT use this to enforce a certain condition on any user input.\r\n\r\n    function assert(condition, message) {\r\n        /* istanbul ignore if */\r\n        if (!condition) {\r\n            throw new Error('ASSERT: ' + message);\r\n        }\r\n    }\r\n\r\n    function isDecimalDigit(ch) {\r\n        return (ch >= 0x30 && ch <= 0x39);   // 0..9\r\n    }\r\n\r\n    function isHexDigit(ch) {\r\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\r\n    }\r\n\r\n    function isOctalDigit(ch) {\r\n        return '01234567'.indexOf(ch) >= 0;\r\n    }\r\n\r\n    function octalToDecimal(ch) {\r\n        // \\0 is not octal escape sequence\r\n        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);\r\n\r\n        if (index < length && isOctalDigit(source[index])) {\r\n            octal = true;\r\n            code = code * 8 + '01234567'.indexOf(source[index++]);\r\n\r\n            // 3 digits are only allowed when string starts\r\n            // with 0, 1, 2, 3\r\n            if ('0123'.indexOf(ch) >= 0 &&\r\n                    index < length &&\r\n                    isOctalDigit(source[index])) {\r\n                code = code * 8 + '01234567'.indexOf(source[index++]);\r\n            }\r\n        }\r\n\r\n        return {\r\n            code: code,\r\n            octal: octal\r\n        };\r\n    }\r\n\r\n    // ECMA-262 11.2 White Space\r\n\r\n    function isWhiteSpace(ch) {\r\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\r\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\r\n    }\r\n\r\n    // ECMA-262 11.3 Line Terminators\r\n\r\n    function isLineTerminator(ch) {\r\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\r\n    }\r\n\r\n    // ECMA-262 11.6 Identifier Names and Identifiers\r\n\r\n    function fromCodePoint(cp) {\r\n        return (cp < 0x10000) ? String.fromCharCode(cp) :\r\n            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\r\n            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\r\n    }\r\n\r\n    function isIdentifierStart(ch) {\r\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\r\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\r\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\r\n            (ch === 0x5C) ||                      // \\ (backslash)\r\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));\r\n    }\r\n\r\n    function isIdentifierPart(ch) {\r\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\r\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\r\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\r\n            (ch >= 0x30 && ch <= 0x39) ||         // 0..9\r\n            (ch === 0x5C) ||                      // \\ (backslash)\r\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));\r\n    }\r\n\r\n    // ECMA-262 11.6.2.2 Future Reserved Words\r\n\r\n    function isFutureReservedWord(id) {\r\n        switch (id) {\r\n        case 'enum':\r\n        case 'export':\r\n        case 'import':\r\n        case 'super':\r\n            return true;\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isStrictModeReservedWord(id) {\r\n        switch (id) {\r\n        case 'implements':\r\n        case 'interface':\r\n        case 'package':\r\n        case 'private':\r\n        case 'protected':\r\n        case 'public':\r\n        case 'static':\r\n        case 'yield':\r\n        case 'let':\r\n            return true;\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isRestrictedWord(id) {\r\n        return id === 'eval' || id === 'arguments';\r\n    }\r\n\r\n    // ECMA-262 11.6.2.1 Keywords\r\n\r\n    function isKeyword(id) {\r\n        switch (id.length) {\r\n        case 2:\r\n            return (id === 'if') || (id === 'in') || (id === 'do');\r\n        case 3:\r\n            return (id === 'var') || (id === 'for') || (id === 'new') ||\r\n                (id === 'try') || (id === 'let');\r\n        case 4:\r\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\r\n                (id === 'void') || (id === 'with') || (id === 'enum');\r\n        case 5:\r\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\r\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\r\n                (id === 'class') || (id === 'super');\r\n        case 6:\r\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\r\n                (id === 'switch') || (id === 'export') || (id === 'import');\r\n        case 7:\r\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\r\n        case 8:\r\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\r\n        case 10:\r\n            return (id === 'instanceof');\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ECMA-262 11.4 Comments\r\n\r\n    function addComment(type, value, start, end, loc) {\r\n        var comment;\r\n\r\n        assert(typeof start === 'number', 'Comment must have valid position');\r\n\r\n        state.lastCommentStart = start;\r\n\r\n        comment = {\r\n            type: type,\r\n            value: value\r\n        };\r\n        if (extra.range) {\r\n            comment.range = [start, end];\r\n        }\r\n        if (extra.loc) {\r\n            comment.loc = loc;\r\n        }\r\n        extra.comments.push(comment);\r\n        if (extra.attachComment) {\r\n            extra.leadingComments.push(comment);\r\n            extra.trailingComments.push(comment);\r\n        }\r\n        if (extra.tokenize) {\r\n            comment.type = comment.type + 'Comment';\r\n            if (extra.delegate) {\r\n                comment = extra.delegate(comment);\r\n            }\r\n            extra.tokens.push(comment);\r\n        }\r\n    }\r\n\r\n    function skipSingleLineComment(offset) {\r\n        var start, loc, ch, comment;\r\n\r\n        start = index - offset;\r\n        loc = {\r\n            start: {\r\n                line: lineNumber,\r\n                column: index - lineStart - offset\r\n            }\r\n        };\r\n\r\n        while (index < length) {\r\n            ch = source.charCodeAt(index);\r\n            ++index;\r\n            if (isLineTerminator(ch)) {\r\n                hasLineTerminator = true;\r\n                if (extra.comments) {\r\n                    comment = source.slice(start + offset, index - 1);\r\n                    loc.end = {\r\n                        line: lineNumber,\r\n                        column: index - lineStart - 1\r\n                    };\r\n                    addComment('Line', comment, start, index - 1, loc);\r\n                }\r\n                if (ch === 13 && source.charCodeAt(index) === 10) {\r\n                    ++index;\r\n                }\r\n                ++lineNumber;\r\n                lineStart = index;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (extra.comments) {\r\n            comment = source.slice(start + offset, index);\r\n            loc.end = {\r\n                line: lineNumber,\r\n                column: index - lineStart\r\n            };\r\n            addComment('Line', comment, start, index, loc);\r\n        }\r\n    }\r\n\r\n    function skipMultiLineComment() {\r\n        var start, loc, ch, comment;\r\n\r\n        if (extra.comments) {\r\n            start = index - 2;\r\n            loc = {\r\n                start: {\r\n                    line: lineNumber,\r\n                    column: index - lineStart - 2\r\n                }\r\n            };\r\n        }\r\n\r\n        while (index < length) {\r\n            ch = source.charCodeAt(index);\r\n            if (isLineTerminator(ch)) {\r\n                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {\r\n                    ++index;\r\n                }\r\n                hasLineTerminator = true;\r\n                ++lineNumber;\r\n                ++index;\r\n                lineStart = index;\r\n            } else if (ch === 0x2A) {\r\n                // Block comment ends with '*/'.\r\n                if (source.charCodeAt(index + 1) === 0x2F) {\r\n                    ++index;\r\n                    ++index;\r\n                    if (extra.comments) {\r\n                        comment = source.slice(start + 2, index - 2);\r\n                        loc.end = {\r\n                            line: lineNumber,\r\n                            column: index - lineStart\r\n                        };\r\n                        addComment('Block', comment, start, index, loc);\r\n                    }\r\n                    return;\r\n                }\r\n                ++index;\r\n            } else {\r\n                ++index;\r\n            }\r\n        }\r\n\r\n        // Ran off the end of the file - the whole thing is a comment\r\n        if (extra.comments) {\r\n            loc.end = {\r\n                line: lineNumber,\r\n                column: index - lineStart\r\n            };\r\n            comment = source.slice(start + 2, index);\r\n            addComment('Block', comment, start, index, loc);\r\n        }\r\n        tolerateUnexpectedToken();\r\n    }\r\n\r\n    function skipComment() {\r\n        var ch, start;\r\n        hasLineTerminator = false;\r\n\r\n        start = (index === 0);\r\n        while (index < length) {\r\n            ch = source.charCodeAt(index);\r\n\r\n            if (isWhiteSpace(ch)) {\r\n                ++index;\r\n            } else if (isLineTerminator(ch)) {\r\n                hasLineTerminator = true;\r\n                ++index;\r\n                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {\r\n                    ++index;\r\n                }\r\n                ++lineNumber;\r\n                lineStart = index;\r\n                start = true;\r\n            } else if (ch === 0x2F) { // U+002F is '/'\r\n                ch = source.charCodeAt(index + 1);\r\n                if (ch === 0x2F) {\r\n                    ++index;\r\n                    ++index;\r\n                    skipSingleLineComment(2);\r\n                    start = true;\r\n                } else if (ch === 0x2A) {  // U+002A is '*'\r\n                    ++index;\r\n                    ++index;\r\n                    skipMultiLineComment();\r\n                } else {\r\n                    break;\r\n                }\r\n            } else if (start && ch === 0x2D) { // U+002D is '-'\r\n                // U+003E is '>'\r\n                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {\r\n                    // '-->' is a single-line comment\r\n                    index += 3;\r\n                    skipSingleLineComment(3);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else if (ch === 0x3C) { // U+003C is '<'\r\n                if (source.slice(index + 1, index + 4) === '!--') {\r\n                    ++index; // `<`\r\n                    ++index; // `!`\r\n                    ++index; // `-`\r\n                    ++index; // `-`\r\n                    skipSingleLineComment(4);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function scanHexEscape(prefix) {\r\n        var i, len, ch, code = 0;\r\n\r\n        len = (prefix === 'u') ? 4 : 2;\r\n        for (i = 0; i < len; ++i) {\r\n            if (index < length && isHexDigit(source[index])) {\r\n                ch = source[index++];\r\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\r\n            } else {\r\n                return '';\r\n            }\r\n        }\r\n        return String.fromCharCode(code);\r\n    }\r\n\r\n    function scanUnicodeCodePointEscape() {\r\n        var ch, code;\r\n\r\n        ch = source[index];\r\n        code = 0;\r\n\r\n        // At least, one hex digit is required.\r\n        if (ch === '}') {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        while (index < length) {\r\n            ch = source[index++];\r\n            if (!isHexDigit(ch)) {\r\n                break;\r\n            }\r\n            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\r\n        }\r\n\r\n        if (code > 0x10FFFF || ch !== '}') {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        return fromCodePoint(code);\r\n    }\r\n\r\n    function codePointAt(i) {\r\n        var cp, first, second;\r\n\r\n        cp = source.charCodeAt(i);\r\n        if (cp >= 0xD800 && cp <= 0xDBFF) {\r\n            second = source.charCodeAt(i + 1);\r\n            if (second >= 0xDC00 && second <= 0xDFFF) {\r\n                first = cp;\r\n                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n            }\r\n        }\r\n\r\n        return cp;\r\n    }\r\n\r\n    function getComplexIdentifier() {\r\n        var cp, ch, id;\r\n\r\n        cp = codePointAt(index);\r\n        id = fromCodePoint(cp);\r\n        index += id.length;\r\n\r\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n        if (cp === 0x5C) {\r\n            if (source.charCodeAt(index) !== 0x75) {\r\n                throwUnexpectedToken();\r\n            }\r\n            ++index;\r\n            if (source[index] === '{') {\r\n                ++index;\r\n                ch = scanUnicodeCodePointEscape();\r\n            } else {\r\n                ch = scanHexEscape('u');\r\n                cp = ch.charCodeAt(0);\r\n                if (!ch || ch === '\\\\' || !isIdentifierStart(cp)) {\r\n                    throwUnexpectedToken();\r\n                }\r\n            }\r\n            id = ch;\r\n        }\r\n\r\n        while (index < length) {\r\n            cp = codePointAt(index);\r\n            if (!isIdentifierPart(cp)) {\r\n                break;\r\n            }\r\n            ch = fromCodePoint(cp);\r\n            id += ch;\r\n            index += ch.length;\r\n\r\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n            if (cp === 0x5C) {\r\n                id = id.substr(0, id.length - 1);\r\n                if (source.charCodeAt(index) !== 0x75) {\r\n                    throwUnexpectedToken();\r\n                }\r\n                ++index;\r\n                if (source[index] === '{') {\r\n                    ++index;\r\n                    ch = scanUnicodeCodePointEscape();\r\n                } else {\r\n                    ch = scanHexEscape('u');\r\n                    cp = ch.charCodeAt(0);\r\n                    if (!ch || ch === '\\\\' || !isIdentifierPart(cp)) {\r\n                        throwUnexpectedToken();\r\n                    }\r\n                }\r\n                id += ch;\r\n            }\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    function getIdentifier() {\r\n        var start, ch;\r\n\r\n        start = index++;\r\n        while (index < length) {\r\n            ch = source.charCodeAt(index);\r\n            if (ch === 0x5C) {\r\n                // Blackslash (U+005C) marks Unicode escape sequence.\r\n                index = start;\r\n                return getComplexIdentifier();\r\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\r\n                // Need to handle surrogate pairs.\r\n                index = start;\r\n                return getComplexIdentifier();\r\n            }\r\n            if (isIdentifierPart(ch)) {\r\n                ++index;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return source.slice(start, index);\r\n    }\r\n\r\n    function scanIdentifier() {\r\n        var start, id, type;\r\n\r\n        start = index;\r\n\r\n        // Backslash (U+005C) starts an escaped character.\r\n        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();\r\n\r\n        // There is no keyword or literal with only one character.\r\n        // Thus, it must be an identifier.\r\n        if (id.length === 1) {\r\n            type = Token.Identifier;\r\n        } else if (isKeyword(id)) {\r\n            type = Token.Keyword;\r\n        } else if (id === 'null') {\r\n            type = Token.NullLiteral;\r\n        } else if (id === 'true' || id === 'false') {\r\n            type = Token.BooleanLiteral;\r\n        } else {\r\n            type = Token.Identifier;\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            value: id,\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n\r\n    // ECMA-262 11.7 Punctuators\r\n\r\n    function scanPunctuator() {\r\n        var token, str;\r\n\r\n        token = {\r\n            type: Token.Punctuator,\r\n            value: '',\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: index,\r\n            end: index\r\n        };\r\n\r\n        // Check for most common single-character punctuators.\r\n        str = source[index];\r\n        switch (str) {\r\n\r\n        case '(':\r\n            if (extra.tokenize) {\r\n                extra.openParenToken = extra.tokenValues.length;\r\n            }\r\n            ++index;\r\n            break;\r\n\r\n        case '{':\r\n            if (extra.tokenize) {\r\n                extra.openCurlyToken = extra.tokenValues.length;\r\n            }\r\n            state.curlyStack.push('{');\r\n            ++index;\r\n            break;\r\n\r\n        case '.':\r\n            ++index;\r\n            if (source[index] === '.' && source[index + 1] === '.') {\r\n                // Spread operator: ...\r\n                index += 2;\r\n                str = '...';\r\n            }\r\n            break;\r\n\r\n        case '}':\r\n            ++index;\r\n            state.curlyStack.pop();\r\n            break;\r\n        case ')':\r\n        case ';':\r\n        case ',':\r\n        case '[':\r\n        case ']':\r\n        case ':':\r\n        case '?':\r\n        case '~':\r\n            ++index;\r\n            break;\r\n\r\n        default:\r\n            // 4-character punctuator.\r\n            str = source.substr(index, 4);\r\n            if (str === '>>>=') {\r\n                index += 4;\r\n            } else {\r\n\r\n                // 3-character punctuators.\r\n                str = str.substr(0, 3);\r\n                if (str === '===' || str === '!==' || str === '>>>' ||\r\n                    str === '<<=' || str === '>>=') {\r\n                    index += 3;\r\n                } else {\r\n\r\n                    // 2-character punctuators.\r\n                    str = str.substr(0, 2);\r\n                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\r\n                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\r\n                        str === '++' || str === '--' || str === '<<' || str === '>>' ||\r\n                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\r\n                        str === '<=' || str === '>=' || str === '=>') {\r\n                        index += 2;\r\n                    } else {\r\n\r\n                        // 1-character punctuators.\r\n                        str = source[index];\r\n                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\r\n                            ++index;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (index === token.start) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        token.end = index;\r\n        token.value = str;\r\n        return token;\r\n    }\r\n\r\n    // ECMA-262 11.8.3 Numeric Literals\r\n\r\n    function scanHexLiteral(start) {\r\n        var number = '';\r\n\r\n        while (index < length) {\r\n            if (!isHexDigit(source[index])) {\r\n                break;\r\n            }\r\n            number += source[index++];\r\n        }\r\n\r\n        if (number.length === 0) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        if (isIdentifierStart(source.charCodeAt(index))) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseInt('0x' + number, 16),\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    function scanBinaryLiteral(start) {\r\n        var ch, number;\r\n\r\n        number = '';\r\n\r\n        while (index < length) {\r\n            ch = source[index];\r\n            if (ch !== '0' && ch !== '1') {\r\n                break;\r\n            }\r\n            number += source[index++];\r\n        }\r\n\r\n        if (number.length === 0) {\r\n            // only 0b or 0B\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        if (index < length) {\r\n            ch = source.charCodeAt(index);\r\n            /* istanbul ignore else */\r\n            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\r\n                throwUnexpectedToken();\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseInt(number, 2),\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    function scanOctalLiteral(prefix, start) {\r\n        var number, octal;\r\n\r\n        if (isOctalDigit(prefix)) {\r\n            octal = true;\r\n            number = '0' + source[index++];\r\n        } else {\r\n            octal = false;\r\n            ++index;\r\n            number = '';\r\n        }\r\n\r\n        while (index < length) {\r\n            if (!isOctalDigit(source[index])) {\r\n                break;\r\n            }\r\n            number += source[index++];\r\n        }\r\n\r\n        if (!octal && number.length === 0) {\r\n            // only 0o or 0O\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseInt(number, 8),\r\n            octal: octal,\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    function isImplicitOctalLiteral() {\r\n        var i, ch;\r\n\r\n        // Implicit octal, unless there is a non-octal digit.\r\n        // (Annex B.1.1 on Numeric Literals)\r\n        for (i = index + 1; i < length; ++i) {\r\n            ch = source[i];\r\n            if (ch === '8' || ch === '9') {\r\n                return false;\r\n            }\r\n            if (!isOctalDigit(ch)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function scanNumericLiteral() {\r\n        var number, start, ch;\r\n\r\n        ch = source[index];\r\n        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\r\n            'Numeric literal must start with a decimal digit or a decimal point');\r\n\r\n        start = index;\r\n        number = '';\r\n        if (ch !== '.') {\r\n            number = source[index++];\r\n            ch = source[index];\r\n\r\n            // Hex number starts with '0x'.\r\n            // Octal number starts with '0'.\r\n            // Octal number in ES6 starts with '0o'.\r\n            // Binary number in ES6 starts with '0b'.\r\n            if (number === '0') {\r\n                if (ch === 'x' || ch === 'X') {\r\n                    ++index;\r\n                    return scanHexLiteral(start);\r\n                }\r\n                if (ch === 'b' || ch === 'B') {\r\n                    ++index;\r\n                    return scanBinaryLiteral(start);\r\n                }\r\n                if (ch === 'o' || ch === 'O') {\r\n                    return scanOctalLiteral(ch, start);\r\n                }\r\n\r\n                if (isOctalDigit(ch)) {\r\n                    if (isImplicitOctalLiteral()) {\r\n                        return scanOctalLiteral(ch, start);\r\n                    }\r\n                }\r\n            }\r\n\r\n            while (isDecimalDigit(source.charCodeAt(index))) {\r\n                number += source[index++];\r\n            }\r\n            ch = source[index];\r\n        }\r\n\r\n        if (ch === '.') {\r\n            number += source[index++];\r\n            while (isDecimalDigit(source.charCodeAt(index))) {\r\n                number += source[index++];\r\n            }\r\n            ch = source[index];\r\n        }\r\n\r\n        if (ch === 'e' || ch === 'E') {\r\n            number += source[index++];\r\n\r\n            ch = source[index];\r\n            if (ch === '+' || ch === '-') {\r\n                number += source[index++];\r\n            }\r\n            if (isDecimalDigit(source.charCodeAt(index))) {\r\n                while (isDecimalDigit(source.charCodeAt(index))) {\r\n                    number += source[index++];\r\n                }\r\n            } else {\r\n                throwUnexpectedToken();\r\n            }\r\n        }\r\n\r\n        if (isIdentifierStart(source.charCodeAt(index))) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseFloat(number),\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    // ECMA-262 11.8.4 String Literals\r\n\r\n    function scanStringLiteral() {\r\n        var str = '', quote, start, ch, unescaped, octToDec, octal = false;\r\n\r\n        quote = source[index];\r\n        assert((quote === '\\'' || quote === '\"'),\r\n            'String literal must starts with a quote');\r\n\r\n        start = index;\r\n        ++index;\r\n\r\n        while (index < length) {\r\n            ch = source[index++];\r\n\r\n            if (ch === quote) {\r\n                quote = '';\r\n                break;\r\n            } else if (ch === '\\\\') {\r\n                ch = source[index++];\r\n                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\r\n                    switch (ch) {\r\n                    case 'u':\r\n                    case 'x':\r\n                        if (source[index] === '{') {\r\n                            ++index;\r\n                            str += scanUnicodeCodePointEscape();\r\n                        } else {\r\n                            unescaped = scanHexEscape(ch);\r\n                            if (!unescaped) {\r\n                                throw throwUnexpectedToken();\r\n                            }\r\n                            str += unescaped;\r\n                        }\r\n                        break;\r\n                    case 'n':\r\n                        str += '\\n';\r\n                        break;\r\n                    case 'r':\r\n                        str += '\\r';\r\n                        break;\r\n                    case 't':\r\n                        str += '\\t';\r\n                        break;\r\n                    case 'b':\r\n                        str += '\\b';\r\n                        break;\r\n                    case 'f':\r\n                        str += '\\f';\r\n                        break;\r\n                    case 'v':\r\n                        str += '\\x0B';\r\n                        break;\r\n                    case '8':\r\n                    case '9':\r\n                        str += ch;\r\n                        tolerateUnexpectedToken();\r\n                        break;\r\n\r\n                    default:\r\n                        if (isOctalDigit(ch)) {\r\n                            octToDec = octalToDecimal(ch);\r\n\r\n                            octal = octToDec.octal || octal;\r\n                            str += String.fromCharCode(octToDec.code);\r\n                        } else {\r\n                            str += ch;\r\n                        }\r\n                        break;\r\n                    }\r\n                } else {\r\n                    ++lineNumber;\r\n                    if (ch === '\\r' && source[index] === '\\n') {\r\n                        ++index;\r\n                    }\r\n                    lineStart = index;\r\n                }\r\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\r\n                break;\r\n            } else {\r\n                str += ch;\r\n            }\r\n        }\r\n\r\n        if (quote !== '') {\r\n            index = start;\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.StringLiteral,\r\n            value: str,\r\n            octal: octal,\r\n            lineNumber: startLineNumber,\r\n            lineStart: startLineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    // ECMA-262 11.8.6 Template Literal Lexical Components\r\n\r\n    function scanTemplate() {\r\n        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;\r\n\r\n        terminated = false;\r\n        tail = false;\r\n        start = index;\r\n        head = (source[index] === '`');\r\n        rawOffset = 2;\r\n\r\n        ++index;\r\n\r\n        while (index < length) {\r\n            ch = source[index++];\r\n            if (ch === '`') {\r\n                rawOffset = 1;\r\n                tail = true;\r\n                terminated = true;\r\n                break;\r\n            } else if (ch === '$') {\r\n                if (source[index] === '{') {\r\n                    state.curlyStack.push('${');\r\n                    ++index;\r\n                    terminated = true;\r\n                    break;\r\n                }\r\n                cooked += ch;\r\n            } else if (ch === '\\\\') {\r\n                ch = source[index++];\r\n                if (!isLineTerminator(ch.charCodeAt(0))) {\r\n                    switch (ch) {\r\n                    case 'n':\r\n                        cooked += '\\n';\r\n                        break;\r\n                    case 'r':\r\n                        cooked += '\\r';\r\n                        break;\r\n                    case 't':\r\n                        cooked += '\\t';\r\n                        break;\r\n                    case 'u':\r\n                    case 'x':\r\n                        if (source[index] === '{') {\r\n                            ++index;\r\n                            cooked += scanUnicodeCodePointEscape();\r\n                        } else {\r\n                            restore = index;\r\n                            unescaped = scanHexEscape(ch);\r\n                            if (unescaped) {\r\n                                cooked += unescaped;\r\n                            } else {\r\n                                index = restore;\r\n                                cooked += ch;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'b':\r\n                        cooked += '\\b';\r\n                        break;\r\n                    case 'f':\r\n                        cooked += '\\f';\r\n                        break;\r\n                    case 'v':\r\n                        cooked += '\\v';\r\n                        break;\r\n\r\n                    default:\r\n                        if (ch === '0') {\r\n                            if (isDecimalDigit(source.charCodeAt(index))) {\r\n                                // Illegal: \\01 \\02 and so on\r\n                                throwError(Messages.TemplateOctalLiteral);\r\n                            }\r\n                            cooked += '\\0';\r\n                        } else if (isOctalDigit(ch)) {\r\n                            // Illegal: \\1 \\2\r\n                            throwError(Messages.TemplateOctalLiteral);\r\n                        } else {\r\n                            cooked += ch;\r\n                        }\r\n                        break;\r\n                    }\r\n                } else {\r\n                    ++lineNumber;\r\n                    if (ch === '\\r' && source[index] === '\\n') {\r\n                        ++index;\r\n                    }\r\n                    lineStart = index;\r\n                }\r\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\r\n                ++lineNumber;\r\n                if (ch === '\\r' && source[index] === '\\n') {\r\n                    ++index;\r\n                }\r\n                lineStart = index;\r\n                cooked += '\\n';\r\n            } else {\r\n                cooked += ch;\r\n            }\r\n        }\r\n\r\n        if (!terminated) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        if (!head) {\r\n            state.curlyStack.pop();\r\n        }\r\n\r\n        return {\r\n            type: Token.Template,\r\n            value: {\r\n                cooked: cooked,\r\n                raw: source.slice(start + 1, index - rawOffset)\r\n            },\r\n            head: head,\r\n            tail: tail,\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    // ECMA-262 11.8.5 Regular Expression Literals\r\n\r\n    function testRegExp(pattern, flags) {\r\n        // The BMP character to use as a replacement for astral symbols when\r\n        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\r\n        // approximation.\r\n        // Note: replacing with '\\uFFFF' enables false positives in unlikely\r\n        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\r\n        // pattern that would not be detected by this substitution.\r\n        var astralSubstitute = '\\uFFFF',\r\n            tmp = pattern;\r\n\r\n        if (flags.indexOf('u') >= 0) {\r\n            tmp = tmp\r\n                // Replace every Unicode escape sequence with the equivalent\r\n                // BMP character or a constant ASCII code point in the case of\r\n                // astral symbols. (See the above note on `astralSubstitute`\r\n                // for more information.)\r\n                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\r\n                    var codePoint = parseInt($1 || $2, 16);\r\n                    if (codePoint > 0x10FFFF) {\r\n                        throwUnexpectedToken(null, Messages.InvalidRegExp);\r\n                    }\r\n                    if (codePoint <= 0xFFFF) {\r\n                        return String.fromCharCode(codePoint);\r\n                    }\r\n                    return astralSubstitute;\r\n                })\r\n                // Replace each paired surrogate with a single ASCII symbol to\r\n                // avoid throwing on regular expressions that are only valid in\r\n                // combination with the \"u\" flag.\r\n                .replace(\r\n                    /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\r\n                    astralSubstitute\r\n                );\r\n        }\r\n\r\n        // First, detect invalid regular expressions.\r\n        try {\r\n            RegExp(tmp);\r\n        } catch (e) {\r\n            throwUnexpectedToken(null, Messages.InvalidRegExp);\r\n        }\r\n\r\n        // Return a regular expression object for this pattern-flag pair, or\r\n        // `null` in case the current environment doesn't support the flags it\r\n        // uses.\r\n        try {\r\n            return new RegExp(pattern, flags);\r\n        } catch (exception) {\r\n            /* istanbul ignore next */\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function scanRegExpBody() {\r\n        var ch, str, classMarker, terminated, body;\r\n\r\n        ch = source[index];\r\n        assert(ch === '/', 'Regular expression literal must start with a slash');\r\n        str = source[index++];\r\n\r\n        classMarker = false;\r\n        terminated = false;\r\n        while (index < length) {\r\n            ch = source[index++];\r\n            str += ch;\r\n            if (ch === '\\\\') {\r\n                ch = source[index++];\r\n                // ECMA-262 7.8.5\r\n                if (isLineTerminator(ch.charCodeAt(0))) {\r\n                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);\r\n                }\r\n                str += ch;\r\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\r\n                throwUnexpectedToken(null, Messages.UnterminatedRegExp);\r\n            } else if (classMarker) {\r\n                if (ch === ']') {\r\n                    classMarker = false;\r\n                }\r\n            } else {\r\n                if (ch === '/') {\r\n                    terminated = true;\r\n                    break;\r\n                } else if (ch === '[') {\r\n                    classMarker = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!terminated) {\r\n            throwUnexpectedToken(null, Messages.UnterminatedRegExp);\r\n        }\r\n\r\n        // Exclude leading and trailing slash.\r\n        body = str.substr(1, str.length - 2);\r\n        return {\r\n            value: body,\r\n            literal: str\r\n        };\r\n    }\r\n\r\n    function scanRegExpFlags() {\r\n        var ch, str, flags, restore;\r\n\r\n        str = '';\r\n        flags = '';\r\n        while (index < length) {\r\n            ch = source[index];\r\n            if (!isIdentifierPart(ch.charCodeAt(0))) {\r\n                break;\r\n            }\r\n\r\n            ++index;\r\n            if (ch === '\\\\' && index < length) {\r\n                ch = source[index];\r\n                if (ch === 'u') {\r\n                    ++index;\r\n                    restore = index;\r\n                    ch = scanHexEscape('u');\r\n                    if (ch) {\r\n                        flags += ch;\r\n                        for (str += '\\\\u'; restore < index; ++restore) {\r\n                            str += source[restore];\r\n                        }\r\n                    } else {\r\n                        index = restore;\r\n                        flags += 'u';\r\n                        str += '\\\\u';\r\n                    }\r\n                    tolerateUnexpectedToken();\r\n                } else {\r\n                    str += '\\\\';\r\n                    tolerateUnexpectedToken();\r\n                }\r\n            } else {\r\n                flags += ch;\r\n                str += ch;\r\n            }\r\n        }\r\n\r\n        return {\r\n            value: flags,\r\n            literal: str\r\n        };\r\n    }\r\n\r\n    function scanRegExp() {\r\n        var start, body, flags, value;\r\n        scanning = true;\r\n\r\n        lookahead = null;\r\n        skipComment();\r\n        start = index;\r\n\r\n        body = scanRegExpBody();\r\n        flags = scanRegExpFlags();\r\n        value = testRegExp(body.value, flags.value);\r\n        scanning = false;\r\n        if (extra.tokenize) {\r\n            return {\r\n                type: Token.RegularExpression,\r\n                value: value,\r\n                regex: {\r\n                    pattern: body.value,\r\n                    flags: flags.value\r\n                },\r\n                lineNumber: lineNumber,\r\n                lineStart: lineStart,\r\n                start: start,\r\n                end: index\r\n            };\r\n        }\r\n\r\n        return {\r\n            literal: body.literal + flags.literal,\r\n            value: value,\r\n            regex: {\r\n                pattern: body.value,\r\n                flags: flags.value\r\n            },\r\n            start: start,\r\n            end: index\r\n        };\r\n    }\r\n\r\n    function collectRegex() {\r\n        var pos, loc, regex, token;\r\n\r\n        skipComment();\r\n\r\n        pos = index;\r\n        loc = {\r\n            start: {\r\n                line: lineNumber,\r\n                column: index - lineStart\r\n            }\r\n        };\r\n\r\n        regex = scanRegExp();\r\n\r\n        loc.end = {\r\n            line: lineNumber,\r\n            column: index - lineStart\r\n        };\r\n\r\n        /* istanbul ignore next */\r\n        if (!extra.tokenize) {\r\n            // Pop the previous token, which is likely '/' or '/='\r\n            if (extra.tokens.length > 0) {\r\n                token = extra.tokens[extra.tokens.length - 1];\r\n                if (token.range[0] === pos && token.type === 'Punctuator') {\r\n                    if (token.value === '/' || token.value === '/=') {\r\n                        extra.tokens.pop();\r\n                    }\r\n                }\r\n            }\r\n\r\n            extra.tokens.push({\r\n                type: 'RegularExpression',\r\n                value: regex.literal,\r\n                regex: regex.regex,\r\n                range: [pos, index],\r\n                loc: loc\r\n            });\r\n        }\r\n\r\n        return regex;\r\n    }\r\n\r\n    function isIdentifierName(token) {\r\n        return token.type === Token.Identifier ||\r\n            token.type === Token.Keyword ||\r\n            token.type === Token.BooleanLiteral ||\r\n            token.type === Token.NullLiteral;\r\n    }\r\n\r\n    // Using the following algorithm:\r\n    // https://github.com/mozilla/sweet.js/wiki/design\r\n\r\n    function advanceSlash() {\r\n        var regex, previous, check;\r\n\r\n        function testKeyword(value) {\r\n            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');\r\n        }\r\n\r\n        previous = extra.tokenValues[extra.tokenValues.length - 1];\r\n        regex = (previous !== null);\r\n\r\n        switch (previous) {\r\n        case 'this':\r\n        case ']':\r\n            regex = false;\r\n            break;\r\n\r\n        case ')':\r\n            check = extra.tokenValues[extra.openParenToken - 1];\r\n            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');\r\n            break;\r\n\r\n        case '}':\r\n            // Dividing a function by anything makes little sense,\r\n            // but we have to check for that.\r\n            regex = false;\r\n            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {\r\n                // Anonymous function, e.g. function(){} /42\r\n                check = extra.tokenValues[extra.openCurlyToken - 4];\r\n                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;\r\n            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {\r\n                // Named function, e.g. function f(){} /42/\r\n                check = extra.tokenValues[extra.openCurlyToken - 5];\r\n                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;\r\n            }\r\n        }\r\n\r\n        return regex ? collectRegex() : scanPunctuator();\r\n    }\r\n\r\n    function advance() {\r\n        var cp, token;\r\n\r\n        if (index >= length) {\r\n            return {\r\n                type: Token.EOF,\r\n                lineNumber: lineNumber,\r\n                lineStart: lineStart,\r\n                start: index,\r\n                end: index\r\n            };\r\n        }\r\n\r\n        cp = source.charCodeAt(index);\r\n\r\n        if (isIdentifierStart(cp)) {\r\n            token = scanIdentifier();\r\n            if (strict && isStrictModeReservedWord(token.value)) {\r\n                token.type = Token.Keyword;\r\n            }\r\n            return token;\r\n        }\r\n\r\n        // Very common: ( and ) and ;\r\n        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\r\n            return scanPunctuator();\r\n        }\r\n\r\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\r\n        if (cp === 0x27 || cp === 0x22) {\r\n            return scanStringLiteral();\r\n        }\r\n\r\n        // Dot (.) U+002E can also start a floating-point number, hence the need\r\n        // to check the next character.\r\n        if (cp === 0x2E) {\r\n            if (isDecimalDigit(source.charCodeAt(index + 1))) {\r\n                return scanNumericLiteral();\r\n            }\r\n            return scanPunctuator();\r\n        }\r\n\r\n        if (isDecimalDigit(cp)) {\r\n            return scanNumericLiteral();\r\n        }\r\n\r\n        // Slash (/) U+002F can also start a regex.\r\n        if (extra.tokenize && cp === 0x2F) {\r\n            return advanceSlash();\r\n        }\r\n\r\n        // Template literals start with ` (U+0060) for template head\r\n        // or } (U+007D) for template middle or template tail.\r\n        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {\r\n            return scanTemplate();\r\n        }\r\n\r\n        // Possible identifier start in a surrogate pair.\r\n        if (cp >= 0xD800 && cp < 0xDFFF) {\r\n            cp = codePointAt(index);\r\n            if (isIdentifierStart(cp)) {\r\n                return scanIdentifier();\r\n            }\r\n        }\r\n\r\n        return scanPunctuator();\r\n    }\r\n\r\n    function collectToken() {\r\n        var loc, token, value, entry;\r\n\r\n        loc = {\r\n            start: {\r\n                line: lineNumber,\r\n                column: index - lineStart\r\n            }\r\n        };\r\n\r\n        token = advance();\r\n        loc.end = {\r\n            line: lineNumber,\r\n            column: index - lineStart\r\n        };\r\n\r\n        if (token.type !== Token.EOF) {\r\n            value = source.slice(token.start, token.end);\r\n            entry = {\r\n                type: TokenName[token.type],\r\n                value: value,\r\n                range: [token.start, token.end],\r\n                loc: loc\r\n            };\r\n            if (token.regex) {\r\n                entry.regex = {\r\n                    pattern: token.regex.pattern,\r\n                    flags: token.regex.flags\r\n                };\r\n            }\r\n            if (extra.tokenValues) {\r\n                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);\r\n            }\r\n            if (extra.tokenize) {\r\n                if (!extra.range) {\r\n                    delete entry.range;\r\n                }\r\n                if (!extra.loc) {\r\n                    delete entry.loc;\r\n                }\r\n                if (extra.delegate) {\r\n                    entry = extra.delegate(entry);\r\n                }\r\n            }\r\n            extra.tokens.push(entry);\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    function lex() {\r\n        var token;\r\n        scanning = true;\r\n\r\n        lastIndex = index;\r\n        lastLineNumber = lineNumber;\r\n        lastLineStart = lineStart;\r\n\r\n        skipComment();\r\n\r\n        token = lookahead;\r\n\r\n        startIndex = index;\r\n        startLineNumber = lineNumber;\r\n        startLineStart = lineStart;\r\n\r\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\r\n        scanning = false;\r\n        return token;\r\n    }\r\n\r\n    function peek() {\r\n        scanning = true;\r\n\r\n        skipComment();\r\n\r\n        lastIndex = index;\r\n        lastLineNumber = lineNumber;\r\n        lastLineStart = lineStart;\r\n\r\n        startIndex = index;\r\n        startLineNumber = lineNumber;\r\n        startLineStart = lineStart;\r\n\r\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\r\n        scanning = false;\r\n    }\r\n\r\n    function Position() {\r\n        this.line = startLineNumber;\r\n        this.column = startIndex - startLineStart;\r\n    }\r\n\r\n    function SourceLocation() {\r\n        this.start = new Position();\r\n        this.end = null;\r\n    }\r\n\r\n    function WrappingSourceLocation(startToken) {\r\n        this.start = {\r\n            line: startToken.lineNumber,\r\n            column: startToken.start - startToken.lineStart\r\n        };\r\n        this.end = null;\r\n    }\r\n\r\n    function Node() {\r\n        if (extra.range) {\r\n            this.range = [startIndex, 0];\r\n        }\r\n        if (extra.loc) {\r\n            this.loc = new SourceLocation();\r\n        }\r\n    }\r\n\r\n    function WrappingNode(startToken) {\r\n        if (extra.range) {\r\n            this.range = [startToken.start, 0];\r\n        }\r\n        if (extra.loc) {\r\n            this.loc = new WrappingSourceLocation(startToken);\r\n        }\r\n    }\r\n\r\n    WrappingNode.prototype = Node.prototype = {\r\n\r\n        processComment: function () {\r\n            var lastChild,\r\n                innerComments,\r\n                leadingComments,\r\n                trailingComments,\r\n                bottomRight = extra.bottomRightStack,\r\n                i,\r\n                comment,\r\n                last = bottomRight[bottomRight.length - 1];\r\n\r\n            if (this.type === Syntax.Program) {\r\n                if (this.body.length > 0) {\r\n                    return;\r\n                }\r\n            }\r\n            /**\r\n             * patch innnerComments for properties empty block\r\n             * `function a() {/** comments **\\/}`\r\n             */\r\n\r\n            if (this.type === Syntax.BlockStatement && this.body.length === 0) {\r\n                innerComments = [];\r\n                for (i = extra.leadingComments.length - 1; i >= 0; --i) {\r\n                    comment = extra.leadingComments[i];\r\n                    if (this.range[1] >= comment.range[1]) {\r\n                        innerComments.unshift(comment);\r\n                        extra.leadingComments.splice(i, 1);\r\n                        extra.trailingComments.splice(i, 1);\r\n                    }\r\n                }\r\n                if (innerComments.length) {\r\n                    this.innerComments = innerComments;\r\n                    //bottomRight.push(this);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (extra.trailingComments.length > 0) {\r\n                trailingComments = [];\r\n                for (i = extra.trailingComments.length - 1; i >= 0; --i) {\r\n                    comment = extra.trailingComments[i];\r\n                    if (comment.range[0] >= this.range[1]) {\r\n                        trailingComments.unshift(comment);\r\n                        extra.trailingComments.splice(i, 1);\r\n                    }\r\n                }\r\n                extra.trailingComments = [];\r\n            } else {\r\n                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {\r\n                    trailingComments = last.trailingComments;\r\n                    delete last.trailingComments;\r\n                }\r\n            }\r\n\r\n            // Eating the stack.\r\n            while (last && last.range[0] >= this.range[0]) {\r\n                lastChild = bottomRight.pop();\r\n                last = bottomRight[bottomRight.length - 1];\r\n            }\r\n\r\n            if (lastChild) {\r\n                if (lastChild.leadingComments) {\r\n                    leadingComments = [];\r\n                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {\r\n                        comment = lastChild.leadingComments[i];\r\n                        if (comment.range[1] <= this.range[0]) {\r\n                            leadingComments.unshift(comment);\r\n                            lastChild.leadingComments.splice(i, 1);\r\n                        }\r\n                    }\r\n\r\n                    if (!lastChild.leadingComments.length) {\r\n                        lastChild.leadingComments = undefined;\r\n                    }\r\n                }\r\n            } else if (extra.leadingComments.length > 0) {\r\n                leadingComments = [];\r\n                for (i = extra.leadingComments.length - 1; i >= 0; --i) {\r\n                    comment = extra.leadingComments[i];\r\n                    if (comment.range[1] <= this.range[0]) {\r\n                        leadingComments.unshift(comment);\r\n                        extra.leadingComments.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if (leadingComments && leadingComments.length > 0) {\r\n                this.leadingComments = leadingComments;\r\n            }\r\n            if (trailingComments && trailingComments.length > 0) {\r\n                this.trailingComments = trailingComments;\r\n            }\r\n\r\n            bottomRight.push(this);\r\n        },\r\n\r\n        finish: function () {\r\n            if (extra.range) {\r\n                this.range[1] = lastIndex;\r\n            }\r\n            if (extra.loc) {\r\n                this.loc.end = {\r\n                    line: lastLineNumber,\r\n                    column: lastIndex - lastLineStart\r\n                };\r\n                if (extra.source) {\r\n                    this.loc.source = extra.source;\r\n                }\r\n            }\r\n\r\n            if (extra.attachComment) {\r\n                this.processComment();\r\n            }\r\n        },\r\n\r\n        finishArrayExpression: function (elements) {\r\n            this.type = Syntax.ArrayExpression;\r\n            this.elements = elements;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishArrayPattern: function (elements) {\r\n            this.type = Syntax.ArrayPattern;\r\n            this.elements = elements;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishArrowFunctionExpression: function (params, defaults, body, expression) {\r\n            this.type = Syntax.ArrowFunctionExpression;\r\n            this.id = null;\r\n            this.params = params;\r\n            this.defaults = defaults;\r\n            this.body = body;\r\n            this.generator = false;\r\n            this.expression = expression;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishAssignmentExpression: function (operator, left, right) {\r\n            this.type = Syntax.AssignmentExpression;\r\n            this.operator = operator;\r\n            this.left = left;\r\n            this.right = right;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishAssignmentPattern: function (left, right) {\r\n            this.type = Syntax.AssignmentPattern;\r\n            this.left = left;\r\n            this.right = right;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishBinaryExpression: function (operator, left, right) {\r\n            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;\r\n            this.operator = operator;\r\n            this.left = left;\r\n            this.right = right;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishBlockStatement: function (body) {\r\n            this.type = Syntax.BlockStatement;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishBreakStatement: function (label) {\r\n            this.type = Syntax.BreakStatement;\r\n            this.label = label;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishCallExpression: function (callee, args) {\r\n            this.type = Syntax.CallExpression;\r\n            this.callee = callee;\r\n            this.arguments = args;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishCatchClause: function (param, body) {\r\n            this.type = Syntax.CatchClause;\r\n            this.param = param;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishClassBody: function (body) {\r\n            this.type = Syntax.ClassBody;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishClassDeclaration: function (id, superClass, body) {\r\n            this.type = Syntax.ClassDeclaration;\r\n            this.id = id;\r\n            this.superClass = superClass;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishClassExpression: function (id, superClass, body) {\r\n            this.type = Syntax.ClassExpression;\r\n            this.id = id;\r\n            this.superClass = superClass;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishConditionalExpression: function (test, consequent, alternate) {\r\n            this.type = Syntax.ConditionalExpression;\r\n            this.test = test;\r\n            this.consequent = consequent;\r\n            this.alternate = alternate;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishContinueStatement: function (label) {\r\n            this.type = Syntax.ContinueStatement;\r\n            this.label = label;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishDebuggerStatement: function () {\r\n            this.type = Syntax.DebuggerStatement;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishDoWhileStatement: function (body, test) {\r\n            this.type = Syntax.DoWhileStatement;\r\n            this.body = body;\r\n            this.test = test;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishEmptyStatement: function () {\r\n            this.type = Syntax.EmptyStatement;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishExpressionStatement: function (expression) {\r\n            this.type = Syntax.ExpressionStatement;\r\n            this.expression = expression;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishForStatement: function (init, test, update, body) {\r\n            this.type = Syntax.ForStatement;\r\n            this.init = init;\r\n            this.test = test;\r\n            this.update = update;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishForOfStatement: function (left, right, body) {\r\n            this.type = Syntax.ForOfStatement;\r\n            this.left = left;\r\n            this.right = right;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishForInStatement: function (left, right, body) {\r\n            this.type = Syntax.ForInStatement;\r\n            this.left = left;\r\n            this.right = right;\r\n            this.body = body;\r\n            this.each = false;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishFunctionDeclaration: function (id, params, defaults, body, generator) {\r\n            this.type = Syntax.FunctionDeclaration;\r\n            this.id = id;\r\n            this.params = params;\r\n            this.defaults = defaults;\r\n            this.body = body;\r\n            this.generator = generator;\r\n            this.expression = false;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishFunctionExpression: function (id, params, defaults, body, generator) {\r\n            this.type = Syntax.FunctionExpression;\r\n            this.id = id;\r\n            this.params = params;\r\n            this.defaults = defaults;\r\n            this.body = body;\r\n            this.generator = generator;\r\n            this.expression = false;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishIdentifier: function (name) {\r\n            this.type = Syntax.Identifier;\r\n            this.name = name;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishIfStatement: function (test, consequent, alternate) {\r\n            this.type = Syntax.IfStatement;\r\n            this.test = test;\r\n            this.consequent = consequent;\r\n            this.alternate = alternate;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishLabeledStatement: function (label, body) {\r\n            this.type = Syntax.LabeledStatement;\r\n            this.label = label;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishLiteral: function (token) {\r\n            this.type = Syntax.Literal;\r\n            this.value = token.value;\r\n            this.raw = source.slice(token.start, token.end);\r\n            if (token.regex) {\r\n                this.regex = token.regex;\r\n            }\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishMemberExpression: function (accessor, object, property) {\r\n            this.type = Syntax.MemberExpression;\r\n            this.computed = accessor === '[';\r\n            this.object = object;\r\n            this.property = property;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishMetaProperty: function (meta, property) {\r\n            this.type = Syntax.MetaProperty;\r\n            this.meta = meta;\r\n            this.property = property;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishNewExpression: function (callee, args) {\r\n            this.type = Syntax.NewExpression;\r\n            this.callee = callee;\r\n            this.arguments = args;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishObjectExpression: function (properties) {\r\n            this.type = Syntax.ObjectExpression;\r\n            this.properties = properties;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishObjectPattern: function (properties) {\r\n            this.type = Syntax.ObjectPattern;\r\n            this.properties = properties;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishPostfixExpression: function (operator, argument) {\r\n            this.type = Syntax.UpdateExpression;\r\n            this.operator = operator;\r\n            this.argument = argument;\r\n            this.prefix = false;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishProgram: function (body, sourceType) {\r\n            this.type = Syntax.Program;\r\n            this.body = body;\r\n            this.sourceType = sourceType;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishProperty: function (kind, key, computed, value, method, shorthand) {\r\n            this.type = Syntax.Property;\r\n            this.key = key;\r\n            this.computed = computed;\r\n            this.value = value;\r\n            this.kind = kind;\r\n            this.method = method;\r\n            this.shorthand = shorthand;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishRestElement: function (argument) {\r\n            this.type = Syntax.RestElement;\r\n            this.argument = argument;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishReturnStatement: function (argument) {\r\n            this.type = Syntax.ReturnStatement;\r\n            this.argument = argument;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishSequenceExpression: function (expressions) {\r\n            this.type = Syntax.SequenceExpression;\r\n            this.expressions = expressions;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishSpreadElement: function (argument) {\r\n            this.type = Syntax.SpreadElement;\r\n            this.argument = argument;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishSwitchCase: function (test, consequent) {\r\n            this.type = Syntax.SwitchCase;\r\n            this.test = test;\r\n            this.consequent = consequent;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishSuper: function () {\r\n            this.type = Syntax.Super;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishSwitchStatement: function (discriminant, cases) {\r\n            this.type = Syntax.SwitchStatement;\r\n            this.discriminant = discriminant;\r\n            this.cases = cases;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishTaggedTemplateExpression: function (tag, quasi) {\r\n            this.type = Syntax.TaggedTemplateExpression;\r\n            this.tag = tag;\r\n            this.quasi = quasi;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishTemplateElement: function (value, tail) {\r\n            this.type = Syntax.TemplateElement;\r\n            this.value = value;\r\n            this.tail = tail;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishTemplateLiteral: function (quasis, expressions) {\r\n            this.type = Syntax.TemplateLiteral;\r\n            this.quasis = quasis;\r\n            this.expressions = expressions;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishThisExpression: function () {\r\n            this.type = Syntax.ThisExpression;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishThrowStatement: function (argument) {\r\n            this.type = Syntax.ThrowStatement;\r\n            this.argument = argument;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishTryStatement: function (block, handler, finalizer) {\r\n            this.type = Syntax.TryStatement;\r\n            this.block = block;\r\n            this.guardedHandlers = [];\r\n            this.handlers = handler ? [handler] : [];\r\n            this.handler = handler;\r\n            this.finalizer = finalizer;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishUnaryExpression: function (operator, argument) {\r\n            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;\r\n            this.operator = operator;\r\n            this.argument = argument;\r\n            this.prefix = true;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishVariableDeclaration: function (declarations) {\r\n            this.type = Syntax.VariableDeclaration;\r\n            this.declarations = declarations;\r\n            this.kind = 'var';\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishLexicalDeclaration: function (declarations, kind) {\r\n            this.type = Syntax.VariableDeclaration;\r\n            this.declarations = declarations;\r\n            this.kind = kind;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishVariableDeclarator: function (id, init) {\r\n            this.type = Syntax.VariableDeclarator;\r\n            this.id = id;\r\n            this.init = init;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishWhileStatement: function (test, body) {\r\n            this.type = Syntax.WhileStatement;\r\n            this.test = test;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishWithStatement: function (object, body) {\r\n            this.type = Syntax.WithStatement;\r\n            this.object = object;\r\n            this.body = body;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishExportSpecifier: function (local, exported) {\r\n            this.type = Syntax.ExportSpecifier;\r\n            this.exported = exported || local;\r\n            this.local = local;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishImportDefaultSpecifier: function (local) {\r\n            this.type = Syntax.ImportDefaultSpecifier;\r\n            this.local = local;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishImportNamespaceSpecifier: function (local) {\r\n            this.type = Syntax.ImportNamespaceSpecifier;\r\n            this.local = local;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishExportNamedDeclaration: function (declaration, specifiers, src) {\r\n            this.type = Syntax.ExportNamedDeclaration;\r\n            this.declaration = declaration;\r\n            this.specifiers = specifiers;\r\n            this.source = src;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishExportDefaultDeclaration: function (declaration) {\r\n            this.type = Syntax.ExportDefaultDeclaration;\r\n            this.declaration = declaration;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishExportAllDeclaration: function (src) {\r\n            this.type = Syntax.ExportAllDeclaration;\r\n            this.source = src;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishImportSpecifier: function (local, imported) {\r\n            this.type = Syntax.ImportSpecifier;\r\n            this.local = local || imported;\r\n            this.imported = imported;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishImportDeclaration: function (specifiers, src) {\r\n            this.type = Syntax.ImportDeclaration;\r\n            this.specifiers = specifiers;\r\n            this.source = src;\r\n            this.finish();\r\n            return this;\r\n        },\r\n\r\n        finishYieldExpression: function (argument, delegate) {\r\n            this.type = Syntax.YieldExpression;\r\n            this.argument = argument;\r\n            this.delegate = delegate;\r\n            this.finish();\r\n            return this;\r\n        }\r\n    };\r\n\r\n\r\n    function recordError(error) {\r\n        var e, existing;\r\n\r\n        for (e = 0; e < extra.errors.length; e++) {\r\n            existing = extra.errors[e];\r\n            // Prevent duplicated error.\r\n            /* istanbul ignore next */\r\n            if (existing.index === error.index && existing.message === error.message) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        extra.errors.push(error);\r\n    }\r\n\r\n    function constructError(msg, column) {\r\n        var error = new Error(msg);\r\n        try {\r\n            throw error;\r\n        } catch (base) {\r\n            /* istanbul ignore else */\r\n            if (Object.create && Object.defineProperty) {\r\n                error = Object.create(base);\r\n                Object.defineProperty(error, 'column', { value: column });\r\n            }\r\n        } finally {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    function createError(line, pos, description) {\r\n        var msg, column, error;\r\n\r\n        msg = 'Line ' + line + ': ' + description;\r\n        column = pos - (scanning ? lineStart : lastLineStart) + 1;\r\n        error = constructError(msg, column);\r\n        error.lineNumber = line;\r\n        error.description = description;\r\n        error.index = pos;\r\n        return error;\r\n    }\r\n\r\n    // Throw an exception\r\n\r\n    function throwError(messageFormat) {\r\n        var args, msg;\r\n\r\n        args = Array.prototype.slice.call(arguments, 1);\r\n        msg = messageFormat.replace(/%(\\d)/g,\r\n            function (whole, idx) {\r\n                assert(idx < args.length, 'Message reference must be in range');\r\n                return args[idx];\r\n            }\r\n        );\r\n\r\n        throw createError(lastLineNumber, lastIndex, msg);\r\n    }\r\n\r\n    function tolerateError(messageFormat) {\r\n        var args, msg, error;\r\n\r\n        args = Array.prototype.slice.call(arguments, 1);\r\n        /* istanbul ignore next */\r\n        msg = messageFormat.replace(/%(\\d)/g,\r\n            function (whole, idx) {\r\n                assert(idx < args.length, 'Message reference must be in range');\r\n                return args[idx];\r\n            }\r\n        );\r\n\r\n        error = createError(lineNumber, lastIndex, msg);\r\n        if (extra.errors) {\r\n            recordError(error);\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Throw an exception because of the token.\r\n\r\n    function unexpectedTokenError(token, message) {\r\n        var value, msg = message || Messages.UnexpectedToken;\r\n\r\n        if (token) {\r\n            if (!message) {\r\n                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :\r\n                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :\r\n                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :\r\n                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :\r\n                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :\r\n                    Messages.UnexpectedToken;\r\n\r\n                if (token.type === Token.Keyword) {\r\n                    if (isFutureReservedWord(token.value)) {\r\n                        msg = Messages.UnexpectedReserved;\r\n                    } else if (strict && isStrictModeReservedWord(token.value)) {\r\n                        msg = Messages.StrictReservedWord;\r\n                    }\r\n                }\r\n            }\r\n\r\n            value = (token.type === Token.Template) ? token.value.raw : token.value;\r\n        } else {\r\n            value = 'ILLEGAL';\r\n        }\r\n\r\n        msg = msg.replace('%0', value);\r\n\r\n        return (token && typeof token.lineNumber === 'number') ?\r\n            createError(token.lineNumber, token.start, msg) :\r\n            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);\r\n    }\r\n\r\n    function throwUnexpectedToken(token, message) {\r\n        throw unexpectedTokenError(token, message);\r\n    }\r\n\r\n    function tolerateUnexpectedToken(token, message) {\r\n        var error = unexpectedTokenError(token, message);\r\n        if (extra.errors) {\r\n            recordError(error);\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Expect the next token to match the specified punctuator.\r\n    // If not, an exception will be thrown.\r\n\r\n    function expect(value) {\r\n        var token = lex();\r\n        if (token.type !== Token.Punctuator || token.value !== value) {\r\n            throwUnexpectedToken(token);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name expectCommaSeparator\r\n     * @description Quietly expect a comma when in tolerant mode, otherwise delegates\r\n     * to <code>expect(value)</code>\r\n     * @since 2.0\r\n     */\r\n    function expectCommaSeparator() {\r\n        var token;\r\n\r\n        if (extra.errors) {\r\n            token = lookahead;\r\n            if (token.type === Token.Punctuator && token.value === ',') {\r\n                lex();\r\n            } else if (token.type === Token.Punctuator && token.value === ';') {\r\n                lex();\r\n                tolerateUnexpectedToken(token);\r\n            } else {\r\n                tolerateUnexpectedToken(token, Messages.UnexpectedToken);\r\n            }\r\n        } else {\r\n            expect(',');\r\n        }\r\n    }\r\n\r\n    // Expect the next token to match the specified keyword.\r\n    // If not, an exception will be thrown.\r\n\r\n    function expectKeyword(keyword) {\r\n        var token = lex();\r\n        if (token.type !== Token.Keyword || token.value !== keyword) {\r\n            throwUnexpectedToken(token);\r\n        }\r\n    }\r\n\r\n    // Return true if the next token matches the specified punctuator.\r\n\r\n    function match(value) {\r\n        return lookahead.type === Token.Punctuator && lookahead.value === value;\r\n    }\r\n\r\n    // Return true if the next token matches the specified keyword\r\n\r\n    function matchKeyword(keyword) {\r\n        return lookahead.type === Token.Keyword && lookahead.value === keyword;\r\n    }\r\n\r\n    // Return true if the next token matches the specified contextual keyword\r\n    // (where an identifier is sometimes a keyword depending on the context)\r\n\r\n    function matchContextualKeyword(keyword) {\r\n        return lookahead.type === Token.Identifier && lookahead.value === keyword;\r\n    }\r\n\r\n    // Return true if the next token is an assignment operator\r\n\r\n    function matchAssign() {\r\n        var op;\r\n\r\n        if (lookahead.type !== Token.Punctuator) {\r\n            return false;\r\n        }\r\n        op = lookahead.value;\r\n        return op === '=' ||\r\n            op === '*=' ||\r\n            op === '/=' ||\r\n            op === '%=' ||\r\n            op === '+=' ||\r\n            op === '-=' ||\r\n            op === '<<=' ||\r\n            op === '>>=' ||\r\n            op === '>>>=' ||\r\n            op === '&=' ||\r\n            op === '^=' ||\r\n            op === '|=';\r\n    }\r\n\r\n    function consumeSemicolon() {\r\n        // Catch the very common case first: immediately a semicolon (U+003B).\r\n        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {\r\n            lex();\r\n            return;\r\n        }\r\n\r\n        if (hasLineTerminator) {\r\n            return;\r\n        }\r\n\r\n        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.\r\n        lastIndex = startIndex;\r\n        lastLineNumber = startLineNumber;\r\n        lastLineStart = startLineStart;\r\n\r\n        if (lookahead.type !== Token.EOF && !match('}')) {\r\n            throwUnexpectedToken(lookahead);\r\n        }\r\n    }\r\n\r\n    // Cover grammar support.\r\n    //\r\n    // When an assignment expression position starts with an left parenthesis, the determination of the type\r\n    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\r\n    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\r\n    //\r\n    // There are three productions that can be parsed in a parentheses pair that needs to be determined\r\n    // after the outermost pair is closed. They are:\r\n    //\r\n    //   1. AssignmentExpression\r\n    //   2. BindingElements\r\n    //   3. AssignmentTargets\r\n    //\r\n    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\r\n    // binding element or assignment target.\r\n    //\r\n    // The three productions have the relationship:\r\n    //\r\n    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\r\n    //\r\n    // with a single exception that CoverInitializedName when used directly in an Expression, generates\r\n    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\r\n    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\r\n    //\r\n    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\r\n    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\r\n    // the CoverInitializedName check is conducted.\r\n    //\r\n    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\r\n    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\r\n    // pattern. The CoverInitializedName check is deferred.\r\n    function isolateCoverGrammar(parser) {\r\n        var oldIsBindingElement = isBindingElement,\r\n            oldIsAssignmentTarget = isAssignmentTarget,\r\n            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,\r\n            result;\r\n        isBindingElement = true;\r\n        isAssignmentTarget = true;\r\n        firstCoverInitializedNameError = null;\r\n        result = parser();\r\n        if (firstCoverInitializedNameError !== null) {\r\n            throwUnexpectedToken(firstCoverInitializedNameError);\r\n        }\r\n        isBindingElement = oldIsBindingElement;\r\n        isAssignmentTarget = oldIsAssignmentTarget;\r\n        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;\r\n        return result;\r\n    }\r\n\r\n    function inheritCoverGrammar(parser) {\r\n        var oldIsBindingElement = isBindingElement,\r\n            oldIsAssignmentTarget = isAssignmentTarget,\r\n            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,\r\n            result;\r\n        isBindingElement = true;\r\n        isAssignmentTarget = true;\r\n        firstCoverInitializedNameError = null;\r\n        result = parser();\r\n        isBindingElement = isBindingElement && oldIsBindingElement;\r\n        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;\r\n        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;\r\n        return result;\r\n    }\r\n\r\n    // ECMA-262 13.3.3 Destructuring Binding Patterns\r\n\r\n    function parseArrayPattern(params, kind) {\r\n        var node = new Node(), elements = [], rest, restNode;\r\n        expect('[');\r\n\r\n        while (!match(']')) {\r\n            if (match(',')) {\r\n                lex();\r\n                elements.push(null);\r\n            } else {\r\n                if (match('...')) {\r\n                    restNode = new Node();\r\n                    lex();\r\n                    params.push(lookahead);\r\n                    rest = parseVariableIdentifier(kind);\r\n                    elements.push(restNode.finishRestElement(rest));\r\n                    break;\r\n                } else {\r\n                    elements.push(parsePatternWithDefault(params, kind));\r\n                }\r\n                if (!match(']')) {\r\n                    expect(',');\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        expect(']');\r\n\r\n        return node.finishArrayPattern(elements);\r\n    }\r\n\r\n    function parsePropertyPattern(params, kind) {\r\n        var node = new Node(), key, keyToken, computed = match('['), init;\r\n        if (lookahead.type === Token.Identifier) {\r\n            keyToken = lookahead;\r\n            key = parseVariableIdentifier();\r\n            if (match('=')) {\r\n                params.push(keyToken);\r\n                lex();\r\n                init = parseAssignmentExpression();\r\n\r\n                return node.finishProperty(\r\n                    'init', key, false,\r\n                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);\r\n            } else if (!match(':')) {\r\n                params.push(keyToken);\r\n                return node.finishProperty('init', key, false, key, false, true);\r\n            }\r\n        } else {\r\n            key = parseObjectPropertyKey();\r\n        }\r\n        expect(':');\r\n        init = parsePatternWithDefault(params, kind);\r\n        return node.finishProperty('init', key, computed, init, false, false);\r\n    }\r\n\r\n    function parseObjectPattern(params, kind) {\r\n        var node = new Node(), properties = [];\r\n\r\n        expect('{');\r\n\r\n        while (!match('}')) {\r\n            properties.push(parsePropertyPattern(params, kind));\r\n            if (!match('}')) {\r\n                expect(',');\r\n            }\r\n        }\r\n\r\n        lex();\r\n\r\n        return node.finishObjectPattern(properties);\r\n    }\r\n\r\n    function parsePattern(params, kind) {\r\n        if (match('[')) {\r\n            return parseArrayPattern(params, kind);\r\n        } else if (match('{')) {\r\n            return parseObjectPattern(params, kind);\r\n        } else if (matchKeyword('let')) {\r\n            if (kind === 'const' || kind === 'let') {\r\n                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);\r\n            }\r\n        }\r\n\r\n        params.push(lookahead);\r\n        return parseVariableIdentifier(kind);\r\n    }\r\n\r\n    function parsePatternWithDefault(params, kind) {\r\n        var startToken = lookahead, pattern, previousAllowYield, right;\r\n        pattern = parsePattern(params, kind);\r\n        if (match('=')) {\r\n            lex();\r\n            previousAllowYield = state.allowYield;\r\n            state.allowYield = true;\r\n            right = isolateCoverGrammar(parseAssignmentExpression);\r\n            state.allowYield = previousAllowYield;\r\n            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);\r\n        }\r\n        return pattern;\r\n    }\r\n\r\n    // ECMA-262 12.2.5 Array Initializer\r\n\r\n    function parseArrayInitializer() {\r\n        var elements = [], node = new Node(), restSpread;\r\n\r\n        expect('[');\r\n\r\n        while (!match(']')) {\r\n            if (match(',')) {\r\n                lex();\r\n                elements.push(null);\r\n            } else if (match('...')) {\r\n                restSpread = new Node();\r\n                lex();\r\n                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));\r\n\r\n                if (!match(']')) {\r\n                    isAssignmentTarget = isBindingElement = false;\r\n                    expect(',');\r\n                }\r\n                elements.push(restSpread);\r\n            } else {\r\n                elements.push(inheritCoverGrammar(parseAssignmentExpression));\r\n\r\n                if (!match(']')) {\r\n                    expect(',');\r\n                }\r\n            }\r\n        }\r\n\r\n        lex();\r\n\r\n        return node.finishArrayExpression(elements);\r\n    }\r\n\r\n    // ECMA-262 12.2.6 Object Initializer\r\n\r\n    function parsePropertyFunction(node, paramInfo, isGenerator) {\r\n        var previousStrict, body;\r\n\r\n        isAssignmentTarget = isBindingElement = false;\r\n\r\n        previousStrict = strict;\r\n        body = isolateCoverGrammar(parseFunctionSourceElements);\r\n\r\n        if (strict && paramInfo.firstRestricted) {\r\n            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);\r\n        }\r\n        if (strict && paramInfo.stricted) {\r\n            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);\r\n        }\r\n\r\n        strict = previousStrict;\r\n        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);\r\n    }\r\n\r\n    function parsePropertyMethodFunction() {\r\n        var params, method, node = new Node(),\r\n            previousAllowYield = state.allowYield;\r\n\r\n        state.allowYield = false;\r\n        params = parseParams();\r\n        state.allowYield = previousAllowYield;\r\n\r\n        state.allowYield = false;\r\n        method = parsePropertyFunction(node, params, false);\r\n        state.allowYield = previousAllowYield;\r\n\r\n        return method;\r\n    }\r\n\r\n    function parseObjectPropertyKey() {\r\n        var token, node = new Node(), expr;\r\n\r\n        token = lex();\r\n\r\n        // Note: This function is called only from parseObjectProperty(), where\r\n        // EOF and Punctuator tokens are already filtered out.\r\n\r\n        switch (token.type) {\r\n        case Token.StringLiteral:\r\n        case Token.NumericLiteral:\r\n            if (strict && token.octal) {\r\n                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);\r\n            }\r\n            return node.finishLiteral(token);\r\n        case Token.Identifier:\r\n        case Token.BooleanLiteral:\r\n        case Token.NullLiteral:\r\n        case Token.Keyword:\r\n            return node.finishIdentifier(token.value);\r\n        case Token.Punctuator:\r\n            if (token.value === '[') {\r\n                expr = isolateCoverGrammar(parseAssignmentExpression);\r\n                expect(']');\r\n                return expr;\r\n            }\r\n            break;\r\n        }\r\n        throwUnexpectedToken(token);\r\n    }\r\n\r\n    function lookaheadPropertyName() {\r\n        switch (lookahead.type) {\r\n        case Token.Identifier:\r\n        case Token.StringLiteral:\r\n        case Token.BooleanLiteral:\r\n        case Token.NullLiteral:\r\n        case Token.NumericLiteral:\r\n        case Token.Keyword:\r\n            return true;\r\n        case Token.Punctuator:\r\n            return lookahead.value === '[';\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,\r\n    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.\r\n    // This can only be determined after we consumed up to the left parentheses.\r\n    //\r\n    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller\r\n    // is responsible to visit other options.\r\n    function tryParseMethodDefinition(token, key, computed, node) {\r\n        var value, options, methodNode, params,\r\n            previousAllowYield = state.allowYield;\r\n\r\n        if (token.type === Token.Identifier) {\r\n            // check for `get` and `set`;\r\n\r\n            if (token.value === 'get' && lookaheadPropertyName()) {\r\n                computed = match('[');\r\n                key = parseObjectPropertyKey();\r\n                methodNode = new Node();\r\n                expect('(');\r\n                expect(')');\r\n\r\n                state.allowYield = false;\r\n                value = parsePropertyFunction(methodNode, {\r\n                    params: [],\r\n                    defaults: [],\r\n                    stricted: null,\r\n                    firstRestricted: null,\r\n                    message: null\r\n                }, false);\r\n                state.allowYield = previousAllowYield;\r\n\r\n                return node.finishProperty('get', key, computed, value, false, false);\r\n            } else if (token.value === 'set' && lookaheadPropertyName()) {\r\n                computed = match('[');\r\n                key = parseObjectPropertyKey();\r\n                methodNode = new Node();\r\n                expect('(');\r\n\r\n                options = {\r\n                    params: [],\r\n                    defaultCount: 0,\r\n                    defaults: [],\r\n                    firstRestricted: null,\r\n                    paramSet: {}\r\n                };\r\n                if (match(')')) {\r\n                    tolerateUnexpectedToken(lookahead);\r\n                } else {\r\n                    state.allowYield = false;\r\n                    parseParam(options);\r\n                    state.allowYield = previousAllowYield;\r\n                    if (options.defaultCount === 0) {\r\n                        options.defaults = [];\r\n                    }\r\n                }\r\n                expect(')');\r\n\r\n                state.allowYield = false;\r\n                value = parsePropertyFunction(methodNode, options, false);\r\n                state.allowYield = previousAllowYield;\r\n\r\n                return node.finishProperty('set', key, computed, value, false, false);\r\n            }\r\n        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {\r\n            computed = match('[');\r\n            key = parseObjectPropertyKey();\r\n            methodNode = new Node();\r\n\r\n            state.allowYield = true;\r\n            params = parseParams();\r\n            state.allowYield = previousAllowYield;\r\n\r\n            state.allowYield = false;\r\n            value = parsePropertyFunction(methodNode, params, true);\r\n            state.allowYield = previousAllowYield;\r\n\r\n            return node.finishProperty('init', key, computed, value, true, false);\r\n        }\r\n\r\n        if (key && match('(')) {\r\n            value = parsePropertyMethodFunction();\r\n            return node.finishProperty('init', key, computed, value, true, false);\r\n        }\r\n\r\n        // Not a MethodDefinition.\r\n        return null;\r\n    }\r\n\r\n    function parseObjectProperty(hasProto) {\r\n        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;\r\n\r\n        computed = match('[');\r\n        if (match('*')) {\r\n            lex();\r\n        } else {\r\n            key = parseObjectPropertyKey();\r\n        }\r\n        maybeMethod = tryParseMethodDefinition(token, key, computed, node);\r\n        if (maybeMethod) {\r\n            return maybeMethod;\r\n        }\r\n\r\n        if (!key) {\r\n            throwUnexpectedToken(lookahead);\r\n        }\r\n\r\n        // Check for duplicated __proto__\r\n        if (!computed) {\r\n            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||\r\n                (key.type === Syntax.Literal && key.value === '__proto__');\r\n            if (hasProto.value && proto) {\r\n                tolerateError(Messages.DuplicateProtoProperty);\r\n            }\r\n            hasProto.value |= proto;\r\n        }\r\n\r\n        if (match(':')) {\r\n            lex();\r\n            value = inheritCoverGrammar(parseAssignmentExpression);\r\n            return node.finishProperty('init', key, computed, value, false, false);\r\n        }\r\n\r\n        if (token.type === Token.Identifier) {\r\n            if (match('=')) {\r\n                firstCoverInitializedNameError = lookahead;\r\n                lex();\r\n                value = isolateCoverGrammar(parseAssignmentExpression);\r\n                return node.finishProperty('init', key, computed,\r\n                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);\r\n            }\r\n            return node.finishProperty('init', key, computed, key, false, true);\r\n        }\r\n\r\n        throwUnexpectedToken(lookahead);\r\n    }\r\n\r\n    function parseObjectInitializer() {\r\n        var properties = [], hasProto = {value: false}, node = new Node();\r\n\r\n        expect('{');\r\n\r\n        while (!match('}')) {\r\n            properties.push(parseObjectProperty(hasProto));\r\n\r\n            if (!match('}')) {\r\n                expectCommaSeparator();\r\n            }\r\n        }\r\n\r\n        expect('}');\r\n\r\n        return node.finishObjectExpression(properties);\r\n    }\r\n\r\n    function reinterpretExpressionAsPattern(expr) {\r\n        var i;\r\n        switch (expr.type) {\r\n        case Syntax.Identifier:\r\n        case Syntax.MemberExpression:\r\n        case Syntax.RestElement:\r\n        case Syntax.AssignmentPattern:\r\n            break;\r\n        case Syntax.SpreadElement:\r\n            expr.type = Syntax.RestElement;\r\n            reinterpretExpressionAsPattern(expr.argument);\r\n            break;\r\n        case Syntax.ArrayExpression:\r\n            expr.type = Syntax.ArrayPattern;\r\n            for (i = 0; i < expr.elements.length; i++) {\r\n                if (expr.elements[i] !== null) {\r\n                    reinterpretExpressionAsPattern(expr.elements[i]);\r\n                }\r\n            }\r\n            break;\r\n        case Syntax.ObjectExpression:\r\n            expr.type = Syntax.ObjectPattern;\r\n            for (i = 0; i < expr.properties.length; i++) {\r\n                reinterpretExpressionAsPattern(expr.properties[i].value);\r\n            }\r\n            break;\r\n        case Syntax.AssignmentExpression:\r\n            expr.type = Syntax.AssignmentPattern;\r\n            reinterpretExpressionAsPattern(expr.left);\r\n            break;\r\n        default:\r\n            // Allow other node type for tolerant parsing.\r\n            break;\r\n        }\r\n    }\r\n\r\n    // ECMA-262 12.2.9 Template Literals\r\n\r\n    function parseTemplateElement(option) {\r\n        var node, token;\r\n\r\n        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {\r\n            throwUnexpectedToken();\r\n        }\r\n\r\n        node = new Node();\r\n        token = lex();\r\n\r\n        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);\r\n    }\r\n\r\n    function parseTemplateLiteral() {\r\n        var quasi, quasis, expressions, node = new Node();\r\n\r\n        quasi = parseTemplateElement({ head: true });\r\n        quasis = [quasi];\r\n        expressions = [];\r\n\r\n        while (!quasi.tail) {\r\n            expressions.push(parseExpression());\r\n            quasi = parseTemplateElement({ head: false });\r\n            quasis.push(quasi);\r\n        }\r\n\r\n        return node.finishTemplateLiteral(quasis, expressions);\r\n    }\r\n\r\n    // ECMA-262 12.2.10 The Grouping Operator\r\n\r\n    function parseGroupExpression() {\r\n        var expr, expressions, startToken, i, params = [];\r\n\r\n        expect('(');\r\n\r\n        if (match(')')) {\r\n            lex();\r\n            if (!match('=>')) {\r\n                expect('=>');\r\n            }\r\n            return {\r\n                type: PlaceHolders.ArrowParameterPlaceHolder,\r\n                params: [],\r\n                rawParams: []\r\n            };\r\n        }\r\n\r\n        startToken = lookahead;\r\n        if (match('...')) {\r\n            expr = parseRestElement(params);\r\n            expect(')');\r\n            if (!match('=>')) {\r\n                expect('=>');\r\n            }\r\n            return {\r\n                type: PlaceHolders.ArrowParameterPlaceHolder,\r\n                params: [expr]\r\n            };\r\n        }\r\n\r\n        isBindingElement = true;\r\n        expr = inheritCoverGrammar(parseAssignmentExpression);\r\n\r\n        if (match(',')) {\r\n            isAssignmentTarget = false;\r\n            expressions = [expr];\r\n\r\n            while (startIndex < length) {\r\n                if (!match(',')) {\r\n                    break;\r\n                }\r\n                lex();\r\n\r\n                if (match('...')) {\r\n                    if (!isBindingElement) {\r\n                        throwUnexpectedToken(lookahead);\r\n                    }\r\n                    expressions.push(parseRestElement(params));\r\n                    expect(')');\r\n                    if (!match('=>')) {\r\n                        expect('=>');\r\n                    }\r\n                    isBindingElement = false;\r\n                    for (i = 0; i < expressions.length; i++) {\r\n                        reinterpretExpressionAsPattern(expressions[i]);\r\n                    }\r\n                    return {\r\n                        type: PlaceHolders.ArrowParameterPlaceHolder,\r\n                        params: expressions\r\n                    };\r\n                }\r\n\r\n                expressions.push(inheritCoverGrammar(parseAssignmentExpression));\r\n            }\r\n\r\n            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);\r\n        }\r\n\r\n\r\n        expect(')');\r\n\r\n        if (match('=>')) {\r\n            if (expr.type === Syntax.Identifier && expr.name === 'yield') {\r\n                return {\r\n                    type: PlaceHolders.ArrowParameterPlaceHolder,\r\n                    params: [expr]\r\n                };\r\n            }\r\n\r\n            if (!isBindingElement) {\r\n                throwUnexpectedToken(lookahead);\r\n            }\r\n\r\n            if (expr.type === Syntax.SequenceExpression) {\r\n                for (i = 0; i < expr.expressions.length; i++) {\r\n                    reinterpretExpressionAsPattern(expr.expressions[i]);\r\n                }\r\n            } else {\r\n                reinterpretExpressionAsPattern(expr);\r\n            }\r\n\r\n            expr = {\r\n                type: PlaceHolders.ArrowParameterPlaceHolder,\r\n                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]\r\n            };\r\n        }\r\n        isBindingElement = false;\r\n        return expr;\r\n    }\r\n\r\n\r\n    // ECMA-262 12.2 Primary Expressions\r\n\r\n    function parsePrimaryExpression() {\r\n        var type, token, expr, node;\r\n\r\n        if (match('(')) {\r\n            isBindingElement = false;\r\n            return inheritCoverGrammar(parseGroupExpression);\r\n        }\r\n\r\n        if (match('[')) {\r\n            return inheritCoverGrammar(parseArrayInitializer);\r\n        }\r\n\r\n        if (match('{')) {\r\n            return inheritCoverGrammar(parseObjectInitializer);\r\n        }\r\n\r\n        type = lookahead.type;\r\n        node = new Node();\r\n\r\n        if (type === Token.Identifier) {\r\n            if (state.sourceType === 'module' && lookahead.value === 'await') {\r\n                tolerateUnexpectedToken(lookahead);\r\n            }\r\n            expr = node.finishIdentifier(lex().value);\r\n        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {\r\n            isAssignmentTarget = isBindingElement = false;\r\n            if (strict && lookahead.octal) {\r\n                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);\r\n            }\r\n            expr = node.finishLiteral(lex());\r\n        } else if (type === Token.Keyword) {\r\n            if (!strict && state.allowYield && matchKeyword('yield')) {\r\n                return parseNonComputedProperty();\r\n            }\r\n            if (!strict && matchKeyword('let')) {\r\n                return node.finishIdentifier(lex().value);\r\n            }\r\n            isAssignmentTarget = isBindingElement = false;\r\n            if (matchKeyword('function')) {\r\n                return parseFunctionExpression();\r\n            }\r\n            if (matchKeyword('this')) {\r\n                lex();\r\n                return node.finishThisExpression();\r\n            }\r\n            if (matchKeyword('class')) {\r\n                return parseClassExpression();\r\n            }\r\n            throwUnexpectedToken(lex());\r\n        } else if (type === Token.BooleanLiteral) {\r\n            isAssignmentTarget = isBindingElement = false;\r\n            token = lex();\r\n            token.value = (token.value === 'true');\r\n            expr = node.finishLiteral(token);\r\n        } else if (type === Token.NullLiteral) {\r\n            isAssignmentTarget = isBindingElement = false;\r\n            token = lex();\r\n            token.value = null;\r\n            expr = node.finishLiteral(token);\r\n        } else if (match('/') || match('/=')) {\r\n            isAssignmentTarget = isBindingElement = false;\r\n            index = startIndex;\r\n\r\n            if (typeof extra.tokens !== 'undefined') {\r\n                token = collectRegex();\r\n            } else {\r\n                token = scanRegExp();\r\n            }\r\n            lex();\r\n            expr = node.finishLiteral(token);\r\n        } else if (type === Token.Template) {\r\n            expr = parseTemplateLiteral();\r\n        } else {\r\n            throwUnexpectedToken(lex());\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 12.3 Left-Hand-Side Expressions\r\n\r\n    function parseArguments() {\r\n        var args = [], expr;\r\n\r\n        expect('(');\r\n\r\n        if (!match(')')) {\r\n            while (startIndex < length) {\r\n                if (match('...')) {\r\n                    expr = new Node();\r\n                    lex();\r\n                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));\r\n                } else {\r\n                    expr = isolateCoverGrammar(parseAssignmentExpression);\r\n                }\r\n                args.push(expr);\r\n                if (match(')')) {\r\n                    break;\r\n                }\r\n                expectCommaSeparator();\r\n            }\r\n        }\r\n\r\n        expect(')');\r\n\r\n        return args;\r\n    }\r\n\r\n    function parseNonComputedProperty() {\r\n        var token, node = new Node();\r\n\r\n        token = lex();\r\n\r\n        if (!isIdentifierName(token)) {\r\n            throwUnexpectedToken(token);\r\n        }\r\n\r\n        return node.finishIdentifier(token.value);\r\n    }\r\n\r\n    function parseNonComputedMember() {\r\n        expect('.');\r\n\r\n        return parseNonComputedProperty();\r\n    }\r\n\r\n    function parseComputedMember() {\r\n        var expr;\r\n\r\n        expect('[');\r\n\r\n        expr = isolateCoverGrammar(parseExpression);\r\n\r\n        expect(']');\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 12.3.3 The new Operator\r\n\r\n    function parseNewExpression() {\r\n        var callee, args, node = new Node();\r\n\r\n        expectKeyword('new');\r\n\r\n        if (match('.')) {\r\n            lex();\r\n            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {\r\n                if (state.inFunctionBody) {\r\n                    lex();\r\n                    return node.finishMetaProperty('new', 'target');\r\n                }\r\n            }\r\n            throwUnexpectedToken(lookahead);\r\n        }\r\n\r\n        callee = isolateCoverGrammar(parseLeftHandSideExpression);\r\n        args = match('(') ? parseArguments() : [];\r\n\r\n        isAssignmentTarget = isBindingElement = false;\r\n\r\n        return node.finishNewExpression(callee, args);\r\n    }\r\n\r\n    // ECMA-262 12.3.4 Function Calls\r\n\r\n    function parseLeftHandSideExpressionAllowCall() {\r\n        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;\r\n\r\n        startToken = lookahead;\r\n        state.allowIn = true;\r\n\r\n        if (matchKeyword('super') && state.inFunctionBody) {\r\n            expr = new Node();\r\n            lex();\r\n            expr = expr.finishSuper();\r\n            if (!match('(') && !match('.') && !match('[')) {\r\n                throwUnexpectedToken(lookahead);\r\n            }\r\n        } else {\r\n            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);\r\n        }\r\n\r\n        for (;;) {\r\n            if (match('.')) {\r\n                isBindingElement = false;\r\n                isAssignmentTarget = true;\r\n                property = parseNonComputedMember();\r\n                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);\r\n            } else if (match('(')) {\r\n                isBindingElement = false;\r\n                isAssignmentTarget = false;\r\n                args = parseArguments();\r\n                expr = new WrappingNode(startToken).finishCallExpression(expr, args);\r\n            } else if (match('[')) {\r\n                isBindingElement = false;\r\n                isAssignmentTarget = true;\r\n                property = parseComputedMember();\r\n                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);\r\n            } else if (lookahead.type === Token.Template && lookahead.head) {\r\n                quasi = parseTemplateLiteral();\r\n                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        state.allowIn = previousAllowIn;\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 12.3 Left-Hand-Side Expressions\r\n\r\n    function parseLeftHandSideExpression() {\r\n        var quasi, expr, property, startToken;\r\n        assert(state.allowIn, 'callee of new expression always allow in keyword.');\r\n\r\n        startToken = lookahead;\r\n\r\n        if (matchKeyword('super') && state.inFunctionBody) {\r\n            expr = new Node();\r\n            lex();\r\n            expr = expr.finishSuper();\r\n            if (!match('[') && !match('.')) {\r\n                throwUnexpectedToken(lookahead);\r\n            }\r\n        } else {\r\n            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);\r\n        }\r\n\r\n        for (;;) {\r\n            if (match('[')) {\r\n                isBindingElement = false;\r\n                isAssignmentTarget = true;\r\n                property = parseComputedMember();\r\n                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);\r\n            } else if (match('.')) {\r\n                isBindingElement = false;\r\n                isAssignmentTarget = true;\r\n                property = parseNonComputedMember();\r\n                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);\r\n            } else if (lookahead.type === Token.Template && lookahead.head) {\r\n                quasi = parseTemplateLiteral();\r\n                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 12.4 Postfix Expressions\r\n\r\n    function parsePostfixExpression() {\r\n        var expr, token, startToken = lookahead;\r\n\r\n        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);\r\n\r\n        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {\r\n            if (match('++') || match('--')) {\r\n                // ECMA-262 11.3.1, 11.3.2\r\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\r\n                    tolerateError(Messages.StrictLHSPostfix);\r\n                }\r\n\r\n                if (!isAssignmentTarget) {\r\n                    tolerateError(Messages.InvalidLHSInAssignment);\r\n                }\r\n\r\n                isAssignmentTarget = isBindingElement = false;\r\n\r\n                token = lex();\r\n                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 12.5 Unary Operators\r\n\r\n    function parseUnaryExpression() {\r\n        var token, expr, startToken;\r\n\r\n        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\r\n            expr = parsePostfixExpression();\r\n        } else if (match('++') || match('--')) {\r\n            startToken = lookahead;\r\n            token = lex();\r\n            expr = inheritCoverGrammar(parseUnaryExpression);\r\n            // ECMA-262 11.4.4, 11.4.5\r\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\r\n                tolerateError(Messages.StrictLHSPrefix);\r\n            }\r\n\r\n            if (!isAssignmentTarget) {\r\n                tolerateError(Messages.InvalidLHSInAssignment);\r\n            }\r\n            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);\r\n            isAssignmentTarget = isBindingElement = false;\r\n        } else if (match('+') || match('-') || match('~') || match('!')) {\r\n            startToken = lookahead;\r\n            token = lex();\r\n            expr = inheritCoverGrammar(parseUnaryExpression);\r\n            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);\r\n            isAssignmentTarget = isBindingElement = false;\r\n        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\r\n            startToken = lookahead;\r\n            token = lex();\r\n            expr = inheritCoverGrammar(parseUnaryExpression);\r\n            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);\r\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\r\n                tolerateError(Messages.StrictDelete);\r\n            }\r\n            isAssignmentTarget = isBindingElement = false;\r\n        } else {\r\n            expr = parsePostfixExpression();\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    function binaryPrecedence(token, allowIn) {\r\n        var prec = 0;\r\n\r\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\r\n            return 0;\r\n        }\r\n\r\n        switch (token.value) {\r\n        case '||':\r\n            prec = 1;\r\n            break;\r\n\r\n        case '&&':\r\n            prec = 2;\r\n            break;\r\n\r\n        case '|':\r\n            prec = 3;\r\n            break;\r\n\r\n        case '^':\r\n            prec = 4;\r\n            break;\r\n\r\n        case '&':\r\n            prec = 5;\r\n            break;\r\n\r\n        case '==':\r\n        case '!=':\r\n        case '===':\r\n        case '!==':\r\n            prec = 6;\r\n            break;\r\n\r\n        case '<':\r\n        case '>':\r\n        case '<=':\r\n        case '>=':\r\n        case 'instanceof':\r\n            prec = 7;\r\n            break;\r\n\r\n        case 'in':\r\n            prec = allowIn ? 7 : 0;\r\n            break;\r\n\r\n        case '<<':\r\n        case '>>':\r\n        case '>>>':\r\n            prec = 8;\r\n            break;\r\n\r\n        case '+':\r\n        case '-':\r\n            prec = 9;\r\n            break;\r\n\r\n        case '*':\r\n        case '/':\r\n        case '%':\r\n            prec = 11;\r\n            break;\r\n\r\n        default:\r\n            break;\r\n        }\r\n\r\n        return prec;\r\n    }\r\n\r\n    // ECMA-262 12.6 Multiplicative Operators\r\n    // ECMA-262 12.7 Additive Operators\r\n    // ECMA-262 12.8 Bitwise Shift Operators\r\n    // ECMA-262 12.9 Relational Operators\r\n    // ECMA-262 12.10 Equality Operators\r\n    // ECMA-262 12.11 Binary Bitwise Operators\r\n    // ECMA-262 12.12 Binary Logical Operators\r\n\r\n    function parseBinaryExpression() {\r\n        var marker, markers, expr, token, prec, stack, right, operator, left, i;\r\n\r\n        marker = lookahead;\r\n        left = inheritCoverGrammar(parseUnaryExpression);\r\n\r\n        token = lookahead;\r\n        prec = binaryPrecedence(token, state.allowIn);\r\n        if (prec === 0) {\r\n            return left;\r\n        }\r\n        isAssignmentTarget = isBindingElement = false;\r\n        token.prec = prec;\r\n        lex();\r\n\r\n        markers = [marker, lookahead];\r\n        right = isolateCoverGrammar(parseUnaryExpression);\r\n\r\n        stack = [left, token, right];\r\n\r\n        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {\r\n\r\n            // Reduce: make a binary expression from the three topmost entries.\r\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\r\n                right = stack.pop();\r\n                operator = stack.pop().value;\r\n                left = stack.pop();\r\n                markers.pop();\r\n                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);\r\n                stack.push(expr);\r\n            }\r\n\r\n            // Shift.\r\n            token = lex();\r\n            token.prec = prec;\r\n            stack.push(token);\r\n            markers.push(lookahead);\r\n            expr = isolateCoverGrammar(parseUnaryExpression);\r\n            stack.push(expr);\r\n        }\r\n\r\n        // Final reduce to clean-up the stack.\r\n        i = stack.length - 1;\r\n        expr = stack[i];\r\n        markers.pop();\r\n        while (i > 1) {\r\n            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\r\n            i -= 2;\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n\r\n    // ECMA-262 12.13 Conditional Operator\r\n\r\n    function parseConditionalExpression() {\r\n        var expr, previousAllowIn, consequent, alternate, startToken;\r\n\r\n        startToken = lookahead;\r\n\r\n        expr = inheritCoverGrammar(parseBinaryExpression);\r\n        if (match('?')) {\r\n            lex();\r\n            previousAllowIn = state.allowIn;\r\n            state.allowIn = true;\r\n            consequent = isolateCoverGrammar(parseAssignmentExpression);\r\n            state.allowIn = previousAllowIn;\r\n            expect(':');\r\n            alternate = isolateCoverGrammar(parseAssignmentExpression);\r\n\r\n            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);\r\n            isAssignmentTarget = isBindingElement = false;\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 14.2 Arrow Function Definitions\r\n\r\n    function parseConciseBody() {\r\n        if (match('{')) {\r\n            return parseFunctionSourceElements();\r\n        }\r\n        return isolateCoverGrammar(parseAssignmentExpression);\r\n    }\r\n\r\n    function checkPatternParam(options, param) {\r\n        var i;\r\n        switch (param.type) {\r\n        case Syntax.Identifier:\r\n            validateParam(options, param, param.name);\r\n            break;\r\n        case Syntax.RestElement:\r\n            checkPatternParam(options, param.argument);\r\n            break;\r\n        case Syntax.AssignmentPattern:\r\n            checkPatternParam(options, param.left);\r\n            break;\r\n        case Syntax.ArrayPattern:\r\n            for (i = 0; i < param.elements.length; i++) {\r\n                if (param.elements[i] !== null) {\r\n                    checkPatternParam(options, param.elements[i]);\r\n                }\r\n            }\r\n            break;\r\n        case Syntax.YieldExpression:\r\n            break;\r\n        default:\r\n            assert(param.type === Syntax.ObjectPattern, 'Invalid type');\r\n            for (i = 0; i < param.properties.length; i++) {\r\n                checkPatternParam(options, param.properties[i].value);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    function reinterpretAsCoverFormalsList(expr) {\r\n        var i, len, param, params, defaults, defaultCount, options, token;\r\n\r\n        defaults = [];\r\n        defaultCount = 0;\r\n        params = [expr];\r\n\r\n        switch (expr.type) {\r\n        case Syntax.Identifier:\r\n            break;\r\n        case PlaceHolders.ArrowParameterPlaceHolder:\r\n            params = expr.params;\r\n            break;\r\n        default:\r\n            return null;\r\n        }\r\n\r\n        options = {\r\n            paramSet: {}\r\n        };\r\n\r\n        for (i = 0, len = params.length; i < len; i += 1) {\r\n            param = params[i];\r\n            switch (param.type) {\r\n            case Syntax.AssignmentPattern:\r\n                params[i] = param.left;\r\n                if (param.right.type === Syntax.YieldExpression) {\r\n                    if (param.right.argument) {\r\n                        throwUnexpectedToken(lookahead);\r\n                    }\r\n                    param.right.type = Syntax.Identifier;\r\n                    param.right.name = 'yield';\r\n                    delete param.right.argument;\r\n                    delete param.right.delegate;\r\n                }\r\n                defaults.push(param.right);\r\n                ++defaultCount;\r\n                checkPatternParam(options, param.left);\r\n                break;\r\n            default:\r\n                checkPatternParam(options, param);\r\n                params[i] = param;\r\n                defaults.push(null);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (strict || !state.allowYield) {\r\n            for (i = 0, len = params.length; i < len; i += 1) {\r\n                param = params[i];\r\n                if (param.type === Syntax.YieldExpression) {\r\n                    throwUnexpectedToken(lookahead);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.message === Messages.StrictParamDupe) {\r\n            token = strict ? options.stricted : options.firstRestricted;\r\n            throwUnexpectedToken(token, options.message);\r\n        }\r\n\r\n        if (defaultCount === 0) {\r\n            defaults = [];\r\n        }\r\n\r\n        return {\r\n            params: params,\r\n            defaults: defaults,\r\n            stricted: options.stricted,\r\n            firstRestricted: options.firstRestricted,\r\n            message: options.message\r\n        };\r\n    }\r\n\r\n    function parseArrowFunctionExpression(options, node) {\r\n        var previousStrict, previousAllowYield, body;\r\n\r\n        if (hasLineTerminator) {\r\n            tolerateUnexpectedToken(lookahead);\r\n        }\r\n        expect('=>');\r\n\r\n        previousStrict = strict;\r\n        previousAllowYield = state.allowYield;\r\n        state.allowYield = true;\r\n\r\n        body = parseConciseBody();\r\n\r\n        if (strict && options.firstRestricted) {\r\n            throwUnexpectedToken(options.firstRestricted, options.message);\r\n        }\r\n        if (strict && options.stricted) {\r\n            tolerateUnexpectedToken(options.stricted, options.message);\r\n        }\r\n\r\n        strict = previousStrict;\r\n        state.allowYield = previousAllowYield;\r\n\r\n        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);\r\n    }\r\n\r\n    // ECMA-262 14.4 Yield expression\r\n\r\n    function parseYieldExpression() {\r\n        var argument, expr, delegate, previousAllowYield;\r\n\r\n        argument = null;\r\n        expr = new Node();\r\n        delegate = false;\r\n\r\n        expectKeyword('yield');\r\n\r\n        if (!hasLineTerminator) {\r\n            previousAllowYield = state.allowYield;\r\n            state.allowYield = false;\r\n            delegate = match('*');\r\n            if (delegate) {\r\n                lex();\r\n                argument = parseAssignmentExpression();\r\n            } else {\r\n                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {\r\n                    argument = parseAssignmentExpression();\r\n                }\r\n            }\r\n            state.allowYield = previousAllowYield;\r\n        }\r\n\r\n        return expr.finishYieldExpression(argument, delegate);\r\n    }\r\n\r\n    // ECMA-262 12.14 Assignment Operators\r\n\r\n    function parseAssignmentExpression() {\r\n        var token, expr, right, list, startToken;\r\n\r\n        startToken = lookahead;\r\n        token = lookahead;\r\n\r\n        if (!state.allowYield && matchKeyword('yield')) {\r\n            return parseYieldExpression();\r\n        }\r\n\r\n        expr = parseConditionalExpression();\r\n\r\n        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {\r\n            isAssignmentTarget = isBindingElement = false;\r\n            list = reinterpretAsCoverFormalsList(expr);\r\n\r\n            if (list) {\r\n                firstCoverInitializedNameError = null;\r\n                return parseArrowFunctionExpression(list, new WrappingNode(startToken));\r\n            }\r\n\r\n            return expr;\r\n        }\r\n\r\n        if (matchAssign()) {\r\n            if (!isAssignmentTarget) {\r\n                tolerateError(Messages.InvalidLHSInAssignment);\r\n            }\r\n\r\n            // ECMA-262 12.1.1\r\n            if (strict && expr.type === Syntax.Identifier) {\r\n                if (isRestrictedWord(expr.name)) {\r\n                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);\r\n                }\r\n                if (isStrictModeReservedWord(expr.name)) {\r\n                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n                }\r\n            }\r\n\r\n            if (!match('=')) {\r\n                isAssignmentTarget = isBindingElement = false;\r\n            } else {\r\n                reinterpretExpressionAsPattern(expr);\r\n            }\r\n\r\n            token = lex();\r\n            right = isolateCoverGrammar(parseAssignmentExpression);\r\n            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);\r\n            firstCoverInitializedNameError = null;\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 12.15 Comma Operator\r\n\r\n    function parseExpression() {\r\n        var expr, startToken = lookahead, expressions;\r\n\r\n        expr = isolateCoverGrammar(parseAssignmentExpression);\r\n\r\n        if (match(',')) {\r\n            expressions = [expr];\r\n\r\n            while (startIndex < length) {\r\n                if (!match(',')) {\r\n                    break;\r\n                }\r\n                lex();\r\n                expressions.push(isolateCoverGrammar(parseAssignmentExpression));\r\n            }\r\n\r\n            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // ECMA-262 13.2 Block\r\n\r\n    function parseStatementListItem() {\r\n        if (lookahead.type === Token.Keyword) {\r\n            switch (lookahead.value) {\r\n            case 'export':\r\n                if (state.sourceType !== 'module') {\r\n                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);\r\n                }\r\n                return parseExportDeclaration();\r\n            case 'import':\r\n                if (state.sourceType !== 'module') {\r\n                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);\r\n                }\r\n                return parseImportDeclaration();\r\n            case 'const':\r\n                return parseLexicalDeclaration({inFor: false});\r\n            case 'function':\r\n                return parseFunctionDeclaration(new Node());\r\n            case 'class':\r\n                return parseClassDeclaration();\r\n            }\r\n        }\r\n\r\n        if (matchKeyword('let') && isLexicalDeclaration()) {\r\n            return parseLexicalDeclaration({inFor: false});\r\n        }\r\n\r\n        return parseStatement();\r\n    }\r\n\r\n    function parseStatementList() {\r\n        var list = [];\r\n        while (startIndex < length) {\r\n            if (match('}')) {\r\n                break;\r\n            }\r\n            list.push(parseStatementListItem());\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function parseBlock() {\r\n        var block, node = new Node();\r\n\r\n        expect('{');\r\n\r\n        block = parseStatementList();\r\n\r\n        expect('}');\r\n\r\n        return node.finishBlockStatement(block);\r\n    }\r\n\r\n    // ECMA-262 13.3.2 Variable Statement\r\n\r\n    function parseVariableIdentifier(kind) {\r\n        var token, node = new Node();\r\n\r\n        token = lex();\r\n\r\n        if (token.type === Token.Keyword && token.value === 'yield') {\r\n            if (strict) {\r\n                tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n            } if (!state.allowYield) {\r\n                throwUnexpectedToken(token);\r\n            }\r\n        } else if (token.type !== Token.Identifier) {\r\n            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {\r\n                tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n            } else {\r\n                if (strict || token.value !== 'let' || kind !== 'var') {\r\n                    throwUnexpectedToken(token);\r\n                }\r\n            }\r\n        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {\r\n            tolerateUnexpectedToken(token);\r\n        }\r\n\r\n        return node.finishIdentifier(token.value);\r\n    }\r\n\r\n    function parseVariableDeclaration(options) {\r\n        var init = null, id, node = new Node(), params = [];\r\n\r\n        id = parsePattern(params, 'var');\r\n\r\n        // ECMA-262 12.2.1\r\n        if (strict && isRestrictedWord(id.name)) {\r\n            tolerateError(Messages.StrictVarName);\r\n        }\r\n\r\n        if (match('=')) {\r\n            lex();\r\n            init = isolateCoverGrammar(parseAssignmentExpression);\r\n        } else if (id.type !== Syntax.Identifier && !options.inFor) {\r\n            expect('=');\r\n        }\r\n\r\n        return node.finishVariableDeclarator(id, init);\r\n    }\r\n\r\n    function parseVariableDeclarationList(options) {\r\n        var opt, list;\r\n\r\n        opt = { inFor: options.inFor };\r\n        list = [parseVariableDeclaration(opt)];\r\n\r\n        while (match(',')) {\r\n            lex();\r\n            list.push(parseVariableDeclaration(opt));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function parseVariableStatement(node) {\r\n        var declarations;\r\n\r\n        expectKeyword('var');\r\n\r\n        declarations = parseVariableDeclarationList({ inFor: false });\r\n\r\n        consumeSemicolon();\r\n\r\n        return node.finishVariableDeclaration(declarations);\r\n    }\r\n\r\n    // ECMA-262 13.3.1 Let and Const Declarations\r\n\r\n    function parseLexicalBinding(kind, options) {\r\n        var init = null, id, node = new Node(), params = [];\r\n\r\n        id = parsePattern(params, kind);\r\n\r\n        // ECMA-262 12.2.1\r\n        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {\r\n            tolerateError(Messages.StrictVarName);\r\n        }\r\n\r\n        if (kind === 'const') {\r\n            if (!matchKeyword('in') && !matchContextualKeyword('of')) {\r\n                expect('=');\r\n                init = isolateCoverGrammar(parseAssignmentExpression);\r\n            }\r\n        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {\r\n            expect('=');\r\n            init = isolateCoverGrammar(parseAssignmentExpression);\r\n        }\r\n\r\n        return node.finishVariableDeclarator(id, init);\r\n    }\r\n\r\n    function parseBindingList(kind, options) {\r\n        var list = [parseLexicalBinding(kind, options)];\r\n\r\n        while (match(',')) {\r\n            lex();\r\n            list.push(parseLexicalBinding(kind, options));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n\r\n    function tokenizerState() {\r\n        return {\r\n            index: index,\r\n            lineNumber: lineNumber,\r\n            lineStart: lineStart,\r\n            hasLineTerminator: hasLineTerminator,\r\n            lastIndex: lastIndex,\r\n            lastLineNumber: lastLineNumber,\r\n            lastLineStart: lastLineStart,\r\n            startIndex: startIndex,\r\n            startLineNumber: startLineNumber,\r\n            startLineStart: startLineStart,\r\n            lookahead: lookahead,\r\n            tokenCount: extra.tokens ? extra.tokens.length : 0\r\n        };\r\n    }\r\n\r\n    function resetTokenizerState(ts) {\r\n        index = ts.index;\r\n        lineNumber = ts.lineNumber;\r\n        lineStart = ts.lineStart;\r\n        hasLineTerminator = ts.hasLineTerminator;\r\n        lastIndex = ts.lastIndex;\r\n        lastLineNumber = ts.lastLineNumber;\r\n        lastLineStart = ts.lastLineStart;\r\n        startIndex = ts.startIndex;\r\n        startLineNumber = ts.startLineNumber;\r\n        startLineStart = ts.startLineStart;\r\n        lookahead = ts.lookahead;\r\n        if (extra.tokens) {\r\n            extra.tokens.splice(ts.tokenCount, extra.tokens.length);\r\n        }\r\n    }\r\n\r\n    function isLexicalDeclaration() {\r\n        var lexical, ts;\r\n\r\n        ts = tokenizerState();\r\n\r\n        lex();\r\n        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||\r\n            matchKeyword('let') || matchKeyword('yield');\r\n\r\n        resetTokenizerState(ts);\r\n\r\n        return lexical;\r\n    }\r\n\r\n    function parseLexicalDeclaration(options) {\r\n        var kind, declarations, node = new Node();\r\n\r\n        kind = lex().value;\r\n        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\r\n\r\n        declarations = parseBindingList(kind, options);\r\n\r\n        consumeSemicolon();\r\n\r\n        return node.finishLexicalDeclaration(declarations, kind);\r\n    }\r\n\r\n    function parseRestElement(params) {\r\n        var param, node = new Node();\r\n\r\n        lex();\r\n\r\n        if (match('{')) {\r\n            throwError(Messages.ObjectPatternAsRestParameter);\r\n        }\r\n\r\n        params.push(lookahead);\r\n\r\n        param = parseVariableIdentifier();\r\n\r\n        if (match('=')) {\r\n            throwError(Messages.DefaultRestParameter);\r\n        }\r\n\r\n        if (!match(')')) {\r\n            throwError(Messages.ParameterAfterRestParameter);\r\n        }\r\n\r\n        return node.finishRestElement(param);\r\n    }\r\n\r\n    // ECMA-262 13.4 Empty Statement\r\n\r\n    function parseEmptyStatement(node) {\r\n        expect(';');\r\n        return node.finishEmptyStatement();\r\n    }\r\n\r\n    // ECMA-262 12.4 Expression Statement\r\n\r\n    function parseExpressionStatement(node) {\r\n        var expr = parseExpression();\r\n        consumeSemicolon();\r\n        return node.finishExpressionStatement(expr);\r\n    }\r\n\r\n    // ECMA-262 13.6 If statement\r\n\r\n    function parseIfStatement(node) {\r\n        var test, consequent, alternate;\r\n\r\n        expectKeyword('if');\r\n\r\n        expect('(');\r\n\r\n        test = parseExpression();\r\n\r\n        expect(')');\r\n\r\n        consequent = parseStatement();\r\n\r\n        if (matchKeyword('else')) {\r\n            lex();\r\n            alternate = parseStatement();\r\n        } else {\r\n            alternate = null;\r\n        }\r\n\r\n        return node.finishIfStatement(test, consequent, alternate);\r\n    }\r\n\r\n    // ECMA-262 13.7 Iteration Statements\r\n\r\n    function parseDoWhileStatement(node) {\r\n        var body, test, oldInIteration;\r\n\r\n        expectKeyword('do');\r\n\r\n        oldInIteration = state.inIteration;\r\n        state.inIteration = true;\r\n\r\n        body = parseStatement();\r\n\r\n        state.inIteration = oldInIteration;\r\n\r\n        expectKeyword('while');\r\n\r\n        expect('(');\r\n\r\n        test = parseExpression();\r\n\r\n        expect(')');\r\n\r\n        if (match(';')) {\r\n            lex();\r\n        }\r\n\r\n        return node.finishDoWhileStatement(body, test);\r\n    }\r\n\r\n    function parseWhileStatement(node) {\r\n        var test, body, oldInIteration;\r\n\r\n        expectKeyword('while');\r\n\r\n        expect('(');\r\n\r\n        test = parseExpression();\r\n\r\n        expect(')');\r\n\r\n        oldInIteration = state.inIteration;\r\n        state.inIteration = true;\r\n\r\n        body = parseStatement();\r\n\r\n        state.inIteration = oldInIteration;\r\n\r\n        return node.finishWhileStatement(test, body);\r\n    }\r\n\r\n    function parseForStatement(node) {\r\n        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,\r\n            body, oldInIteration, previousAllowIn = state.allowIn;\r\n\r\n        init = test = update = null;\r\n        forIn = true;\r\n\r\n        expectKeyword('for');\r\n\r\n        expect('(');\r\n\r\n        if (match(';')) {\r\n            lex();\r\n        } else {\r\n            if (matchKeyword('var')) {\r\n                init = new Node();\r\n                lex();\r\n\r\n                state.allowIn = false;\r\n                declarations = parseVariableDeclarationList({ inFor: true });\r\n                state.allowIn = previousAllowIn;\r\n\r\n                if (declarations.length === 1 && matchKeyword('in')) {\r\n                    init = init.finishVariableDeclaration(declarations);\r\n                    lex();\r\n                    left = init;\r\n                    right = parseExpression();\r\n                    init = null;\r\n                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {\r\n                    init = init.finishVariableDeclaration(declarations);\r\n                    lex();\r\n                    left = init;\r\n                    right = parseAssignmentExpression();\r\n                    init = null;\r\n                    forIn = false;\r\n                } else {\r\n                    init = init.finishVariableDeclaration(declarations);\r\n                    expect(';');\r\n                }\r\n            } else if (matchKeyword('const') || matchKeyword('let')) {\r\n                init = new Node();\r\n                kind = lex().value;\r\n\r\n                if (!strict && lookahead.value === 'in') {\r\n                    init = init.finishIdentifier(kind);\r\n                    lex();\r\n                    left = init;\r\n                    right = parseExpression();\r\n                    init = null;\r\n                } else {\r\n                    state.allowIn = false;\r\n                    declarations = parseBindingList(kind, {inFor: true});\r\n                    state.allowIn = previousAllowIn;\r\n\r\n                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {\r\n                        init = init.finishLexicalDeclaration(declarations, kind);\r\n                        lex();\r\n                        left = init;\r\n                        right = parseExpression();\r\n                        init = null;\r\n                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {\r\n                        init = init.finishLexicalDeclaration(declarations, kind);\r\n                        lex();\r\n                        left = init;\r\n                        right = parseAssignmentExpression();\r\n                        init = null;\r\n                        forIn = false;\r\n                    } else {\r\n                        consumeSemicolon();\r\n                        init = init.finishLexicalDeclaration(declarations, kind);\r\n                    }\r\n                }\r\n            } else {\r\n                initStartToken = lookahead;\r\n                state.allowIn = false;\r\n                init = inheritCoverGrammar(parseAssignmentExpression);\r\n                state.allowIn = previousAllowIn;\r\n\r\n                if (matchKeyword('in')) {\r\n                    if (!isAssignmentTarget) {\r\n                        tolerateError(Messages.InvalidLHSInForIn);\r\n                    }\r\n\r\n                    lex();\r\n                    reinterpretExpressionAsPattern(init);\r\n                    left = init;\r\n                    right = parseExpression();\r\n                    init = null;\r\n                } else if (matchContextualKeyword('of')) {\r\n                    if (!isAssignmentTarget) {\r\n                        tolerateError(Messages.InvalidLHSInForLoop);\r\n                    }\r\n\r\n                    lex();\r\n                    reinterpretExpressionAsPattern(init);\r\n                    left = init;\r\n                    right = parseAssignmentExpression();\r\n                    init = null;\r\n                    forIn = false;\r\n                } else {\r\n                    if (match(',')) {\r\n                        initSeq = [init];\r\n                        while (match(',')) {\r\n                            lex();\r\n                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));\r\n                        }\r\n                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);\r\n                    }\r\n                    expect(';');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (typeof left === 'undefined') {\r\n\r\n            if (!match(';')) {\r\n                test = parseExpression();\r\n            }\r\n            expect(';');\r\n\r\n            if (!match(')')) {\r\n                update = parseExpression();\r\n            }\r\n        }\r\n\r\n        expect(')');\r\n\r\n        oldInIteration = state.inIteration;\r\n        state.inIteration = true;\r\n\r\n        body = isolateCoverGrammar(parseStatement);\r\n\r\n        state.inIteration = oldInIteration;\r\n\r\n        return (typeof left === 'undefined') ?\r\n                node.finishForStatement(init, test, update, body) :\r\n                forIn ? node.finishForInStatement(left, right, body) :\r\n                    node.finishForOfStatement(left, right, body);\r\n    }\r\n\r\n    // ECMA-262 13.8 The continue statement\r\n\r\n    function parseContinueStatement(node) {\r\n        var label = null, key;\r\n\r\n        expectKeyword('continue');\r\n\r\n        // Optimize the most common form: 'continue;'.\r\n        if (source.charCodeAt(startIndex) === 0x3B) {\r\n            lex();\r\n\r\n            if (!state.inIteration) {\r\n                throwError(Messages.IllegalContinue);\r\n            }\r\n\r\n            return node.finishContinueStatement(null);\r\n        }\r\n\r\n        if (hasLineTerminator) {\r\n            if (!state.inIteration) {\r\n                throwError(Messages.IllegalContinue);\r\n            }\r\n\r\n            return node.finishContinueStatement(null);\r\n        }\r\n\r\n        if (lookahead.type === Token.Identifier) {\r\n            label = parseVariableIdentifier();\r\n\r\n            key = '$' + label.name;\r\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\r\n                throwError(Messages.UnknownLabel, label.name);\r\n            }\r\n        }\r\n\r\n        consumeSemicolon();\r\n\r\n        if (label === null && !state.inIteration) {\r\n            throwError(Messages.IllegalContinue);\r\n        }\r\n\r\n        return node.finishContinueStatement(label);\r\n    }\r\n\r\n    // ECMA-262 13.9 The break statement\r\n\r\n    function parseBreakStatement(node) {\r\n        var label = null, key;\r\n\r\n        expectKeyword('break');\r\n\r\n        // Catch the very common case first: immediately a semicolon (U+003B).\r\n        if (source.charCodeAt(lastIndex) === 0x3B) {\r\n            lex();\r\n\r\n            if (!(state.inIteration || state.inSwitch)) {\r\n                throwError(Messages.IllegalBreak);\r\n            }\r\n\r\n            return node.finishBreakStatement(null);\r\n        }\r\n\r\n        if (hasLineTerminator) {\r\n            if (!(state.inIteration || state.inSwitch)) {\r\n                throwError(Messages.IllegalBreak);\r\n            }\r\n        } else if (lookahead.type === Token.Identifier) {\r\n            label = parseVariableIdentifier();\r\n\r\n            key = '$' + label.name;\r\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\r\n                throwError(Messages.UnknownLabel, label.name);\r\n            }\r\n        }\r\n\r\n        consumeSemicolon();\r\n\r\n        if (label === null && !(state.inIteration || state.inSwitch)) {\r\n            throwError(Messages.IllegalBreak);\r\n        }\r\n\r\n        return node.finishBreakStatement(label);\r\n    }\r\n\r\n    // ECMA-262 13.10 The return statement\r\n\r\n    function parseReturnStatement(node) {\r\n        var argument = null;\r\n\r\n        expectKeyword('return');\r\n\r\n        if (!state.inFunctionBody) {\r\n            tolerateError(Messages.IllegalReturn);\r\n        }\r\n\r\n        // 'return' followed by a space and an identifier is very common.\r\n        if (source.charCodeAt(lastIndex) === 0x20) {\r\n            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {\r\n                argument = parseExpression();\r\n                consumeSemicolon();\r\n                return node.finishReturnStatement(argument);\r\n            }\r\n        }\r\n\r\n        if (hasLineTerminator) {\r\n            // HACK\r\n            return node.finishReturnStatement(null);\r\n        }\r\n\r\n        if (!match(';')) {\r\n            if (!match('}') && lookahead.type !== Token.EOF) {\r\n                argument = parseExpression();\r\n            }\r\n        }\r\n\r\n        consumeSemicolon();\r\n\r\n        return node.finishReturnStatement(argument);\r\n    }\r\n\r\n    // ECMA-262 13.11 The with statement\r\n\r\n    function parseWithStatement(node) {\r\n        var object, body;\r\n\r\n        if (strict) {\r\n            tolerateError(Messages.StrictModeWith);\r\n        }\r\n\r\n        expectKeyword('with');\r\n\r\n        expect('(');\r\n\r\n        object = parseExpression();\r\n\r\n        expect(')');\r\n\r\n        body = parseStatement();\r\n\r\n        return node.finishWithStatement(object, body);\r\n    }\r\n\r\n    // ECMA-262 13.12 The switch statement\r\n\r\n    function parseSwitchCase() {\r\n        var test, consequent = [], statement, node = new Node();\r\n\r\n        if (matchKeyword('default')) {\r\n            lex();\r\n            test = null;\r\n        } else {\r\n            expectKeyword('case');\r\n            test = parseExpression();\r\n        }\r\n        expect(':');\r\n\r\n        while (startIndex < length) {\r\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\r\n                break;\r\n            }\r\n            statement = parseStatementListItem();\r\n            consequent.push(statement);\r\n        }\r\n\r\n        return node.finishSwitchCase(test, consequent);\r\n    }\r\n\r\n    function parseSwitchStatement(node) {\r\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\r\n\r\n        expectKeyword('switch');\r\n\r\n        expect('(');\r\n\r\n        discriminant = parseExpression();\r\n\r\n        expect(')');\r\n\r\n        expect('{');\r\n\r\n        cases = [];\r\n\r\n        if (match('}')) {\r\n            lex();\r\n            return node.finishSwitchStatement(discriminant, cases);\r\n        }\r\n\r\n        oldInSwitch = state.inSwitch;\r\n        state.inSwitch = true;\r\n        defaultFound = false;\r\n\r\n        while (startIndex < length) {\r\n            if (match('}')) {\r\n                break;\r\n            }\r\n            clause = parseSwitchCase();\r\n            if (clause.test === null) {\r\n                if (defaultFound) {\r\n                    throwError(Messages.MultipleDefaultsInSwitch);\r\n                }\r\n                defaultFound = true;\r\n            }\r\n            cases.push(clause);\r\n        }\r\n\r\n        state.inSwitch = oldInSwitch;\r\n\r\n        expect('}');\r\n\r\n        return node.finishSwitchStatement(discriminant, cases);\r\n    }\r\n\r\n    // ECMA-262 13.14 The throw statement\r\n\r\n    function parseThrowStatement(node) {\r\n        var argument;\r\n\r\n        expectKeyword('throw');\r\n\r\n        if (hasLineTerminator) {\r\n            throwError(Messages.NewlineAfterThrow);\r\n        }\r\n\r\n        argument = parseExpression();\r\n\r\n        consumeSemicolon();\r\n\r\n        return node.finishThrowStatement(argument);\r\n    }\r\n\r\n    // ECMA-262 13.15 The try statement\r\n\r\n    function parseCatchClause() {\r\n        var param, params = [], paramMap = {}, key, i, body, node = new Node();\r\n\r\n        expectKeyword('catch');\r\n\r\n        expect('(');\r\n        if (match(')')) {\r\n            throwUnexpectedToken(lookahead);\r\n        }\r\n\r\n        param = parsePattern(params);\r\n        for (i = 0; i < params.length; i++) {\r\n            key = '$' + params[i].value;\r\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\r\n                tolerateError(Messages.DuplicateBinding, params[i].value);\r\n            }\r\n            paramMap[key] = true;\r\n        }\r\n\r\n        // ECMA-262 12.14.1\r\n        if (strict && isRestrictedWord(param.name)) {\r\n            tolerateError(Messages.StrictCatchVariable);\r\n        }\r\n\r\n        expect(')');\r\n        body = parseBlock();\r\n        return node.finishCatchClause(param, body);\r\n    }\r\n\r\n    function parseTryStatement(node) {\r\n        var block, handler = null, finalizer = null;\r\n\r\n        expectKeyword('try');\r\n\r\n        block = parseBlock();\r\n\r\n        if (matchKeyword('catch')) {\r\n            handler = parseCatchClause();\r\n        }\r\n\r\n        if (matchKeyword('finally')) {\r\n            lex();\r\n            finalizer = parseBlock();\r\n        }\r\n\r\n        if (!handler && !finalizer) {\r\n            throwError(Messages.NoCatchOrFinally);\r\n        }\r\n\r\n        return node.finishTryStatement(block, handler, finalizer);\r\n    }\r\n\r\n    // ECMA-262 13.16 The debugger statement\r\n\r\n    function parseDebuggerStatement(node) {\r\n        expectKeyword('debugger');\r\n\r\n        consumeSemicolon();\r\n\r\n        return node.finishDebuggerStatement();\r\n    }\r\n\r\n    // 13 Statements\r\n\r\n    function parseStatement() {\r\n        var type = lookahead.type,\r\n            expr,\r\n            labeledBody,\r\n            key,\r\n            node;\r\n\r\n        if (type === Token.EOF) {\r\n            throwUnexpectedToken(lookahead);\r\n        }\r\n\r\n        if (type === Token.Punctuator && lookahead.value === '{') {\r\n            return parseBlock();\r\n        }\r\n        isAssignmentTarget = isBindingElement = true;\r\n        node = new Node();\r\n\r\n        if (type === Token.Punctuator) {\r\n            switch (lookahead.value) {\r\n            case ';':\r\n                return parseEmptyStatement(node);\r\n            case '(':\r\n                return parseExpressionStatement(node);\r\n            default:\r\n                break;\r\n            }\r\n        } else if (type === Token.Keyword) {\r\n            switch (lookahead.value) {\r\n            case 'break':\r\n                return parseBreakStatement(node);\r\n            case 'continue':\r\n                return parseContinueStatement(node);\r\n            case 'debugger':\r\n                return parseDebuggerStatement(node);\r\n            case 'do':\r\n                return parseDoWhileStatement(node);\r\n            case 'for':\r\n                return parseForStatement(node);\r\n            case 'function':\r\n                return parseFunctionDeclaration(node);\r\n            case 'if':\r\n                return parseIfStatement(node);\r\n            case 'return':\r\n                return parseReturnStatement(node);\r\n            case 'switch':\r\n                return parseSwitchStatement(node);\r\n            case 'throw':\r\n                return parseThrowStatement(node);\r\n            case 'try':\r\n                return parseTryStatement(node);\r\n            case 'var':\r\n                return parseVariableStatement(node);\r\n            case 'while':\r\n                return parseWhileStatement(node);\r\n            case 'with':\r\n                return parseWithStatement(node);\r\n            default:\r\n                break;\r\n            }\r\n        }\r\n\r\n        expr = parseExpression();\r\n\r\n        // ECMA-262 12.12 Labelled Statements\r\n        if ((expr.type === Syntax.Identifier) && match(':')) {\r\n            lex();\r\n\r\n            key = '$' + expr.name;\r\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\r\n                throwError(Messages.Redeclaration, 'Label', expr.name);\r\n            }\r\n\r\n            state.labelSet[key] = true;\r\n            labeledBody = parseStatement();\r\n            delete state.labelSet[key];\r\n            return node.finishLabeledStatement(expr, labeledBody);\r\n        }\r\n\r\n        consumeSemicolon();\r\n\r\n        return node.finishExpressionStatement(expr);\r\n    }\r\n\r\n    // ECMA-262 14.1 Function Definition\r\n\r\n    function parseFunctionSourceElements() {\r\n        var statement, body = [], token, directive, firstRestricted,\r\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,\r\n            node = new Node();\r\n\r\n        expect('{');\r\n\r\n        while (startIndex < length) {\r\n            if (lookahead.type !== Token.StringLiteral) {\r\n                break;\r\n            }\r\n            token = lookahead;\r\n\r\n            statement = parseStatementListItem();\r\n            body.push(statement);\r\n            if (statement.expression.type !== Syntax.Literal) {\r\n                // this is not directive\r\n                break;\r\n            }\r\n            directive = source.slice(token.start + 1, token.end - 1);\r\n            if (directive === 'use strict') {\r\n                strict = true;\r\n                if (firstRestricted) {\r\n                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);\r\n                }\r\n            } else {\r\n                if (!firstRestricted && token.octal) {\r\n                    firstRestricted = token;\r\n                }\r\n            }\r\n        }\r\n\r\n        oldLabelSet = state.labelSet;\r\n        oldInIteration = state.inIteration;\r\n        oldInSwitch = state.inSwitch;\r\n        oldInFunctionBody = state.inFunctionBody;\r\n\r\n        state.labelSet = {};\r\n        state.inIteration = false;\r\n        state.inSwitch = false;\r\n        state.inFunctionBody = true;\r\n\r\n        while (startIndex < length) {\r\n            if (match('}')) {\r\n                break;\r\n            }\r\n            body.push(parseStatementListItem());\r\n        }\r\n\r\n        expect('}');\r\n\r\n        state.labelSet = oldLabelSet;\r\n        state.inIteration = oldInIteration;\r\n        state.inSwitch = oldInSwitch;\r\n        state.inFunctionBody = oldInFunctionBody;\r\n\r\n        return node.finishBlockStatement(body);\r\n    }\r\n\r\n    function validateParam(options, param, name) {\r\n        var key = '$' + name;\r\n        if (strict) {\r\n            if (isRestrictedWord(name)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamName;\r\n            }\r\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamDupe;\r\n            }\r\n        } else if (!options.firstRestricted) {\r\n            if (isRestrictedWord(name)) {\r\n                options.firstRestricted = param;\r\n                options.message = Messages.StrictParamName;\r\n            } else if (isStrictModeReservedWord(name)) {\r\n                options.firstRestricted = param;\r\n                options.message = Messages.StrictReservedWord;\r\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamDupe;\r\n            }\r\n        }\r\n        options.paramSet[key] = true;\r\n    }\r\n\r\n    function parseParam(options) {\r\n        var token, param, params = [], i, def;\r\n\r\n        token = lookahead;\r\n        if (token.value === '...') {\r\n            param = parseRestElement(params);\r\n            validateParam(options, param.argument, param.argument.name);\r\n            options.params.push(param);\r\n            options.defaults.push(null);\r\n            return false;\r\n        }\r\n\r\n        param = parsePatternWithDefault(params);\r\n        for (i = 0; i < params.length; i++) {\r\n            validateParam(options, params[i], params[i].value);\r\n        }\r\n\r\n        if (param.type === Syntax.AssignmentPattern) {\r\n            def = param.right;\r\n            param = param.left;\r\n            ++options.defaultCount;\r\n        }\r\n\r\n        options.params.push(param);\r\n        options.defaults.push(def);\r\n\r\n        return !match(')');\r\n    }\r\n\r\n    function parseParams(firstRestricted) {\r\n        var options;\r\n\r\n        options = {\r\n            params: [],\r\n            defaultCount: 0,\r\n            defaults: [],\r\n            firstRestricted: firstRestricted\r\n        };\r\n\r\n        expect('(');\r\n\r\n        if (!match(')')) {\r\n            options.paramSet = {};\r\n            while (startIndex < length) {\r\n                if (!parseParam(options)) {\r\n                    break;\r\n                }\r\n                expect(',');\r\n            }\r\n        }\r\n\r\n        expect(')');\r\n\r\n        if (options.defaultCount === 0) {\r\n            options.defaults = [];\r\n        }\r\n\r\n        return {\r\n            params: options.params,\r\n            defaults: options.defaults,\r\n            stricted: options.stricted,\r\n            firstRestricted: options.firstRestricted,\r\n            message: options.message\r\n        };\r\n    }\r\n\r\n    function parseFunctionDeclaration(node, identifierIsOptional) {\r\n        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,\r\n            isGenerator, previousAllowYield;\r\n\r\n        previousAllowYield = state.allowYield;\r\n\r\n        expectKeyword('function');\r\n\r\n        isGenerator = match('*');\r\n        if (isGenerator) {\r\n            lex();\r\n        }\r\n\r\n        if (!identifierIsOptional || !match('(')) {\r\n            token = lookahead;\r\n            id = parseVariableIdentifier();\r\n            if (strict) {\r\n                if (isRestrictedWord(token.value)) {\r\n                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);\r\n                }\r\n            } else {\r\n                if (isRestrictedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictFunctionName;\r\n                } else if (isStrictModeReservedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictReservedWord;\r\n                }\r\n            }\r\n        }\r\n\r\n        state.allowYield = !isGenerator;\r\n        tmp = parseParams(firstRestricted);\r\n        params = tmp.params;\r\n        defaults = tmp.defaults;\r\n        stricted = tmp.stricted;\r\n        firstRestricted = tmp.firstRestricted;\r\n        if (tmp.message) {\r\n            message = tmp.message;\r\n        }\r\n\r\n\r\n        previousStrict = strict;\r\n        body = parseFunctionSourceElements();\r\n        if (strict && firstRestricted) {\r\n            throwUnexpectedToken(firstRestricted, message);\r\n        }\r\n        if (strict && stricted) {\r\n            tolerateUnexpectedToken(stricted, message);\r\n        }\r\n\r\n        strict = previousStrict;\r\n        state.allowYield = previousAllowYield;\r\n\r\n        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);\r\n    }\r\n\r\n    function parseFunctionExpression() {\r\n        var token, id = null, stricted, firstRestricted, message, tmp,\r\n            params = [], defaults = [], body, previousStrict, node = new Node(),\r\n            isGenerator, previousAllowYield;\r\n\r\n        previousAllowYield = state.allowYield;\r\n\r\n        expectKeyword('function');\r\n\r\n        isGenerator = match('*');\r\n        if (isGenerator) {\r\n            lex();\r\n        }\r\n\r\n        state.allowYield = !isGenerator;\r\n        if (!match('(')) {\r\n            token = lookahead;\r\n            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();\r\n            if (strict) {\r\n                if (isRestrictedWord(token.value)) {\r\n                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);\r\n                }\r\n            } else {\r\n                if (isRestrictedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictFunctionName;\r\n                } else if (isStrictModeReservedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictReservedWord;\r\n                }\r\n            }\r\n        }\r\n\r\n        tmp = parseParams(firstRestricted);\r\n        params = tmp.params;\r\n        defaults = tmp.defaults;\r\n        stricted = tmp.stricted;\r\n        firstRestricted = tmp.firstRestricted;\r\n        if (tmp.message) {\r\n            message = tmp.message;\r\n        }\r\n\r\n        previousStrict = strict;\r\n        body = parseFunctionSourceElements();\r\n        if (strict && firstRestricted) {\r\n            throwUnexpectedToken(firstRestricted, message);\r\n        }\r\n        if (strict && stricted) {\r\n            tolerateUnexpectedToken(stricted, message);\r\n        }\r\n        strict = previousStrict;\r\n        state.allowYield = previousAllowYield;\r\n\r\n        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);\r\n    }\r\n\r\n    // ECMA-262 14.5 Class Definitions\r\n\r\n    function parseClassBody() {\r\n        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;\r\n\r\n        classBody = new Node();\r\n\r\n        expect('{');\r\n        body = [];\r\n        while (!match('}')) {\r\n            if (match(';')) {\r\n                lex();\r\n            } else {\r\n                method = new Node();\r\n                token = lookahead;\r\n                isStatic = false;\r\n                computed = match('[');\r\n                if (match('*')) {\r\n                    lex();\r\n                } else {\r\n                    key = parseObjectPropertyKey();\r\n                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {\r\n                        token = lookahead;\r\n                        isStatic = true;\r\n                        computed = match('[');\r\n                        if (match('*')) {\r\n                            lex();\r\n                        } else {\r\n                            key = parseObjectPropertyKey();\r\n                        }\r\n                    }\r\n                }\r\n                method = tryParseMethodDefinition(token, key, computed, method);\r\n                if (method) {\r\n                    method['static'] = isStatic; // jscs:ignore requireDotNotation\r\n                    if (method.kind === 'init') {\r\n                        method.kind = 'method';\r\n                    }\r\n                    if (!isStatic) {\r\n                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {\r\n                            if (method.kind !== 'method' || !method.method || method.value.generator) {\r\n                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);\r\n                            }\r\n                            if (hasConstructor) {\r\n                                throwUnexpectedToken(token, Messages.DuplicateConstructor);\r\n                            } else {\r\n                                hasConstructor = true;\r\n                            }\r\n                            method.kind = 'constructor';\r\n                        }\r\n                    } else {\r\n                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {\r\n                            throwUnexpectedToken(token, Messages.StaticPrototype);\r\n                        }\r\n                    }\r\n                    method.type = Syntax.MethodDefinition;\r\n                    delete method.method;\r\n                    delete method.shorthand;\r\n                    body.push(method);\r\n                } else {\r\n                    throwUnexpectedToken(lookahead);\r\n                }\r\n            }\r\n        }\r\n        lex();\r\n        return classBody.finishClassBody(body);\r\n    }\r\n\r\n    function parseClassDeclaration(identifierIsOptional) {\r\n        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;\r\n        strict = true;\r\n\r\n        expectKeyword('class');\r\n\r\n        if (!identifierIsOptional || lookahead.type === Token.Identifier) {\r\n            id = parseVariableIdentifier();\r\n        }\r\n\r\n        if (matchKeyword('extends')) {\r\n            lex();\r\n            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);\r\n        }\r\n        classBody = parseClassBody();\r\n        strict = previousStrict;\r\n\r\n        return classNode.finishClassDeclaration(id, superClass, classBody);\r\n    }\r\n\r\n    function parseClassExpression() {\r\n        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;\r\n        strict = true;\r\n\r\n        expectKeyword('class');\r\n\r\n        if (lookahead.type === Token.Identifier) {\r\n            id = parseVariableIdentifier();\r\n        }\r\n\r\n        if (matchKeyword('extends')) {\r\n            lex();\r\n            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);\r\n        }\r\n        classBody = parseClassBody();\r\n        strict = previousStrict;\r\n\r\n        return classNode.finishClassExpression(id, superClass, classBody);\r\n    }\r\n\r\n    // ECMA-262 15.2 Modules\r\n\r\n    function parseModuleSpecifier() {\r\n        var node = new Node();\r\n\r\n        if (lookahead.type !== Token.StringLiteral) {\r\n            throwError(Messages.InvalidModuleSpecifier);\r\n        }\r\n        return node.finishLiteral(lex());\r\n    }\r\n\r\n    // ECMA-262 15.2.3 Exports\r\n\r\n    function parseExportSpecifier() {\r\n        var exported, local, node = new Node(), def;\r\n        if (matchKeyword('default')) {\r\n            // export {default} from 'something';\r\n            def = new Node();\r\n            lex();\r\n            local = def.finishIdentifier('default');\r\n        } else {\r\n            local = parseVariableIdentifier();\r\n        }\r\n        if (matchContextualKeyword('as')) {\r\n            lex();\r\n            exported = parseNonComputedProperty();\r\n        }\r\n        return node.finishExportSpecifier(local, exported);\r\n    }\r\n\r\n    function parseExportNamedDeclaration(node) {\r\n        var declaration = null,\r\n            isExportFromIdentifier,\r\n            src = null, specifiers = [];\r\n\r\n        // non-default export\r\n        if (lookahead.type === Token.Keyword) {\r\n            // covers:\r\n            // export var f = 1;\r\n            switch (lookahead.value) {\r\n                case 'let':\r\n                case 'const':\r\n                    declaration = parseLexicalDeclaration({inFor: false});\r\n                    return node.finishExportNamedDeclaration(declaration, specifiers, null);\r\n                case 'var':\r\n                case 'class':\r\n                case 'function':\r\n                    declaration = parseStatementListItem();\r\n                    return node.finishExportNamedDeclaration(declaration, specifiers, null);\r\n            }\r\n        }\r\n\r\n        expect('{');\r\n        while (!match('}')) {\r\n            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');\r\n            specifiers.push(parseExportSpecifier());\r\n            if (!match('}')) {\r\n                expect(',');\r\n                if (match('}')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        expect('}');\r\n\r\n        if (matchContextualKeyword('from')) {\r\n            // covering:\r\n            // export {default} from 'foo';\r\n            // export {foo} from 'foo';\r\n            lex();\r\n            src = parseModuleSpecifier();\r\n            consumeSemicolon();\r\n        } else if (isExportFromIdentifier) {\r\n            // covering:\r\n            // export {default}; // missing fromClause\r\n            throwError(lookahead.value ?\r\n                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);\r\n        } else {\r\n            // cover\r\n            // export {foo};\r\n            consumeSemicolon();\r\n        }\r\n        return node.finishExportNamedDeclaration(declaration, specifiers, src);\r\n    }\r\n\r\n    function parseExportDefaultDeclaration(node) {\r\n        var declaration = null,\r\n            expression = null;\r\n\r\n        // covers:\r\n        // export default ...\r\n        expectKeyword('default');\r\n\r\n        if (matchKeyword('function')) {\r\n            // covers:\r\n            // export default function foo () {}\r\n            // export default function () {}\r\n            declaration = parseFunctionDeclaration(new Node(), true);\r\n            return node.finishExportDefaultDeclaration(declaration);\r\n        }\r\n        if (matchKeyword('class')) {\r\n            declaration = parseClassDeclaration(true);\r\n            return node.finishExportDefaultDeclaration(declaration);\r\n        }\r\n\r\n        if (matchContextualKeyword('from')) {\r\n            throwError(Messages.UnexpectedToken, lookahead.value);\r\n        }\r\n\r\n        // covers:\r\n        // export default {};\r\n        // export default [];\r\n        // export default (1 + 2);\r\n        if (match('{')) {\r\n            expression = parseObjectInitializer();\r\n        } else if (match('[')) {\r\n            expression = parseArrayInitializer();\r\n        } else {\r\n            expression = parseAssignmentExpression();\r\n        }\r\n        consumeSemicolon();\r\n        return node.finishExportDefaultDeclaration(expression);\r\n    }\r\n\r\n    function parseExportAllDeclaration(node) {\r\n        var src;\r\n\r\n        // covers:\r\n        // export * from 'foo';\r\n        expect('*');\r\n        if (!matchContextualKeyword('from')) {\r\n            throwError(lookahead.value ?\r\n                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);\r\n        }\r\n        lex();\r\n        src = parseModuleSpecifier();\r\n        consumeSemicolon();\r\n\r\n        return node.finishExportAllDeclaration(src);\r\n    }\r\n\r\n    function parseExportDeclaration() {\r\n        var node = new Node();\r\n        if (state.inFunctionBody) {\r\n            throwError(Messages.IllegalExportDeclaration);\r\n        }\r\n\r\n        expectKeyword('export');\r\n\r\n        if (matchKeyword('default')) {\r\n            return parseExportDefaultDeclaration(node);\r\n        }\r\n        if (match('*')) {\r\n            return parseExportAllDeclaration(node);\r\n        }\r\n        return parseExportNamedDeclaration(node);\r\n    }\r\n\r\n    // ECMA-262 15.2.2 Imports\r\n\r\n    function parseImportSpecifier() {\r\n        // import {<foo as bar>} ...;\r\n        var local, imported, node = new Node();\r\n\r\n        imported = parseNonComputedProperty();\r\n        if (matchContextualKeyword('as')) {\r\n            lex();\r\n            local = parseVariableIdentifier();\r\n        }\r\n\r\n        return node.finishImportSpecifier(local, imported);\r\n    }\r\n\r\n    function parseNamedImports() {\r\n        var specifiers = [];\r\n        // {foo, bar as bas}\r\n        expect('{');\r\n        while (!match('}')) {\r\n            specifiers.push(parseImportSpecifier());\r\n            if (!match('}')) {\r\n                expect(',');\r\n                if (match('}')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        expect('}');\r\n        return specifiers;\r\n    }\r\n\r\n    function parseImportDefaultSpecifier() {\r\n        // import <foo> ...;\r\n        var local, node = new Node();\r\n\r\n        local = parseNonComputedProperty();\r\n\r\n        return node.finishImportDefaultSpecifier(local);\r\n    }\r\n\r\n    function parseImportNamespaceSpecifier() {\r\n        // import <* as foo> ...;\r\n        var local, node = new Node();\r\n\r\n        expect('*');\r\n        if (!matchContextualKeyword('as')) {\r\n            throwError(Messages.NoAsAfterImportNamespace);\r\n        }\r\n        lex();\r\n        local = parseNonComputedProperty();\r\n\r\n        return node.finishImportNamespaceSpecifier(local);\r\n    }\r\n\r\n    function parseImportDeclaration() {\r\n        var specifiers = [], src, node = new Node();\r\n\r\n        if (state.inFunctionBody) {\r\n            throwError(Messages.IllegalImportDeclaration);\r\n        }\r\n\r\n        expectKeyword('import');\r\n\r\n        if (lookahead.type === Token.StringLiteral) {\r\n            // import 'foo';\r\n            src = parseModuleSpecifier();\r\n        } else {\r\n\r\n            if (match('{')) {\r\n                // import {bar}\r\n                specifiers = specifiers.concat(parseNamedImports());\r\n            } else if (match('*')) {\r\n                // import * as foo\r\n                specifiers.push(parseImportNamespaceSpecifier());\r\n            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {\r\n                // import foo\r\n                specifiers.push(parseImportDefaultSpecifier());\r\n                if (match(',')) {\r\n                    lex();\r\n                    if (match('*')) {\r\n                        // import foo, * as foo\r\n                        specifiers.push(parseImportNamespaceSpecifier());\r\n                    } else if (match('{')) {\r\n                        // import foo, {bar}\r\n                        specifiers = specifiers.concat(parseNamedImports());\r\n                    } else {\r\n                        throwUnexpectedToken(lookahead);\r\n                    }\r\n                }\r\n            } else {\r\n                throwUnexpectedToken(lex());\r\n            }\r\n\r\n            if (!matchContextualKeyword('from')) {\r\n                throwError(lookahead.value ?\r\n                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);\r\n            }\r\n            lex();\r\n            src = parseModuleSpecifier();\r\n        }\r\n\r\n        consumeSemicolon();\r\n        return node.finishImportDeclaration(specifiers, src);\r\n    }\r\n\r\n    // ECMA-262 15.1 Scripts\r\n\r\n    function parseScriptBody() {\r\n        var statement, body = [], token, directive, firstRestricted;\r\n\r\n        while (startIndex < length) {\r\n            token = lookahead;\r\n            if (token.type !== Token.StringLiteral) {\r\n                break;\r\n            }\r\n\r\n            statement = parseStatementListItem();\r\n            body.push(statement);\r\n            if (statement.expression.type !== Syntax.Literal) {\r\n                // this is not directive\r\n                break;\r\n            }\r\n            directive = source.slice(token.start + 1, token.end - 1);\r\n            if (directive === 'use strict') {\r\n                strict = true;\r\n                if (firstRestricted) {\r\n                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);\r\n                }\r\n            } else {\r\n                if (!firstRestricted && token.octal) {\r\n                    firstRestricted = token;\r\n                }\r\n            }\r\n        }\r\n\r\n        while (startIndex < length) {\r\n            statement = parseStatementListItem();\r\n            /* istanbul ignore if */\r\n            if (typeof statement === 'undefined') {\r\n                break;\r\n            }\r\n            body.push(statement);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    function parseProgram() {\r\n        var body, node;\r\n\r\n        peek();\r\n        node = new Node();\r\n\r\n        body = parseScriptBody();\r\n        return node.finishProgram(body, state.sourceType);\r\n    }\r\n\r\n    function filterTokenLocation() {\r\n        var i, entry, token, tokens = [];\r\n\r\n        for (i = 0; i < extra.tokens.length; ++i) {\r\n            entry = extra.tokens[i];\r\n            token = {\r\n                type: entry.type,\r\n                value: entry.value\r\n            };\r\n            if (entry.regex) {\r\n                token.regex = {\r\n                    pattern: entry.regex.pattern,\r\n                    flags: entry.regex.flags\r\n                };\r\n            }\r\n            if (extra.range) {\r\n                token.range = entry.range;\r\n            }\r\n            if (extra.loc) {\r\n                token.loc = entry.loc;\r\n            }\r\n            tokens.push(token);\r\n        }\r\n\r\n        extra.tokens = tokens;\r\n    }\r\n\r\n    function tokenize(code, options, delegate) {\r\n        var toString,\r\n            tokens;\r\n\r\n        toString = String;\r\n        if (typeof code !== 'string' && !(code instanceof String)) {\r\n            code = toString(code);\r\n        }\r\n\r\n        source = code;\r\n        index = 0;\r\n        lineNumber = (source.length > 0) ? 1 : 0;\r\n        lineStart = 0;\r\n        startIndex = index;\r\n        startLineNumber = lineNumber;\r\n        startLineStart = lineStart;\r\n        length = source.length;\r\n        lookahead = null;\r\n        state = {\r\n            allowIn: true,\r\n            allowYield: true,\r\n            labelSet: {},\r\n            inFunctionBody: false,\r\n            inIteration: false,\r\n            inSwitch: false,\r\n            lastCommentStart: -1,\r\n            curlyStack: []\r\n        };\r\n\r\n        extra = {};\r\n\r\n        // Options matching.\r\n        options = options || {};\r\n\r\n        // Of course we collect tokens here.\r\n        options.tokens = true;\r\n        extra.tokens = [];\r\n        extra.tokenValues = [];\r\n        extra.tokenize = true;\r\n        extra.delegate = delegate;\r\n\r\n        // The following two fields are necessary to compute the Regex tokens.\r\n        extra.openParenToken = -1;\r\n        extra.openCurlyToken = -1;\r\n\r\n        extra.range = (typeof options.range === 'boolean') && options.range;\r\n        extra.loc = (typeof options.loc === 'boolean') && options.loc;\r\n\r\n        if (typeof options.comment === 'boolean' && options.comment) {\r\n            extra.comments = [];\r\n        }\r\n        if (typeof options.tolerant === 'boolean' && options.tolerant) {\r\n            extra.errors = [];\r\n        }\r\n\r\n        try {\r\n            peek();\r\n            if (lookahead.type === Token.EOF) {\r\n                return extra.tokens;\r\n            }\r\n\r\n            lex();\r\n            while (lookahead.type !== Token.EOF) {\r\n                try {\r\n                    lex();\r\n                } catch (lexError) {\r\n                    if (extra.errors) {\r\n                        recordError(lexError);\r\n                        // We have to break on the first error\r\n                        // to avoid infinite loops.\r\n                        break;\r\n                    } else {\r\n                        throw lexError;\r\n                    }\r\n                }\r\n            }\r\n\r\n            tokens = extra.tokens;\r\n            if (typeof extra.errors !== 'undefined') {\r\n                tokens.errors = extra.errors;\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        } finally {\r\n            extra = {};\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    function parse(code, options) {\r\n        var program, toString;\r\n\r\n        toString = String;\r\n        if (typeof code !== 'string' && !(code instanceof String)) {\r\n            code = toString(code);\r\n        }\r\n\r\n        source = code;\r\n        index = 0;\r\n        lineNumber = (source.length > 0) ? 1 : 0;\r\n        lineStart = 0;\r\n        startIndex = index;\r\n        startLineNumber = lineNumber;\r\n        startLineStart = lineStart;\r\n        length = source.length;\r\n        lookahead = null;\r\n        state = {\r\n            allowIn: true,\r\n            allowYield: true,\r\n            labelSet: {},\r\n            inFunctionBody: false,\r\n            inIteration: false,\r\n            inSwitch: false,\r\n            lastCommentStart: -1,\r\n            curlyStack: [],\r\n            sourceType: 'script'\r\n        };\r\n        strict = false;\r\n\r\n        extra = {};\r\n        if (typeof options !== 'undefined') {\r\n            extra.range = (typeof options.range === 'boolean') && options.range;\r\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\r\n            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;\r\n\r\n            if (extra.loc && options.source !== null && options.source !== undefined) {\r\n                extra.source = toString(options.source);\r\n            }\r\n\r\n            if (typeof options.tokens === 'boolean' && options.tokens) {\r\n                extra.tokens = [];\r\n            }\r\n            if (typeof options.comment === 'boolean' && options.comment) {\r\n                extra.comments = [];\r\n            }\r\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\r\n                extra.errors = [];\r\n            }\r\n            if (extra.attachComment) {\r\n                extra.range = true;\r\n                extra.comments = [];\r\n                extra.bottomRightStack = [];\r\n                extra.trailingComments = [];\r\n                extra.leadingComments = [];\r\n            }\r\n            if (options.sourceType === 'module') {\r\n                // very restrictive condition for now\r\n                state.sourceType = options.sourceType;\r\n                strict = true;\r\n            }\r\n        }\r\n\r\n        try {\r\n            program = parseProgram();\r\n            if (typeof extra.comments !== 'undefined') {\r\n                program.comments = extra.comments;\r\n            }\r\n            if (typeof extra.tokens !== 'undefined') {\r\n                filterTokenLocation();\r\n                program.tokens = extra.tokens;\r\n            }\r\n            if (typeof extra.errors !== 'undefined') {\r\n                program.errors = extra.errors;\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        } finally {\r\n            extra = {};\r\n        }\r\n\r\n        return program;\r\n    }\r\n\r\n    // Sync with *.json manifests.\r\n    exports.version = '2.7.3';\r\n\r\n    exports.tokenize = tokenize;\r\n\r\n    exports.parse = parse;\r\n\r\n    // Deep copy.\r\n    /* istanbul ignore next */\r\n    exports.Syntax = (function () {\r\n        var name, types = {};\r\n\r\n        if (typeof Object.create === 'function') {\r\n            types = Object.create(null);\r\n        }\r\n\r\n        for (name in Syntax) {\r\n            if (Syntax.hasOwnProperty(name)) {\r\n                types[name] = Syntax[name];\r\n            }\r\n        }\r\n\r\n        if (typeof Object.freeze === 'function') {\r\n            Object.freeze(types);\r\n        }\r\n\r\n        return types;\r\n    }());\r\n\r\n}));\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n},{}],40:[function(require,module,exports){\r\n/*\r\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n/*jslint vars:false, bitwise:true*/\r\n/*jshint indent:4*/\r\n/*global exports:true, define:true*/\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\r\n    // and plain browser loading,\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(['exports'], factory);\r\n    } else if (typeof exports !== 'undefined') {\r\n        factory(exports);\r\n    } else {\r\n        factory((root.estraverse = {}));\r\n    }\r\n}(this, function (exports) {\r\n    'use strict';\r\n\r\n    var Syntax,\r\n        isArray,\r\n        VisitorOption,\r\n        VisitorKeys,\r\n        BREAK,\r\n        SKIP;\r\n\r\n    Syntax = {\r\n        AssignmentExpression: 'AssignmentExpression',\r\n        ArrayExpression: 'ArrayExpression',\r\n        ArrayPattern: 'ArrayPattern',\r\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n        BlockStatement: 'BlockStatement',\r\n        BinaryExpression: 'BinaryExpression',\r\n        BreakStatement: 'BreakStatement',\r\n        CallExpression: 'CallExpression',\r\n        CatchClause: 'CatchClause',\r\n        ClassBody: 'ClassBody',\r\n        ClassDeclaration: 'ClassDeclaration',\r\n        ClassExpression: 'ClassExpression',\r\n        ConditionalExpression: 'ConditionalExpression',\r\n        ContinueStatement: 'ContinueStatement',\r\n        DebuggerStatement: 'DebuggerStatement',\r\n        DirectiveStatement: 'DirectiveStatement',\r\n        DoWhileStatement: 'DoWhileStatement',\r\n        EmptyStatement: 'EmptyStatement',\r\n        ExpressionStatement: 'ExpressionStatement',\r\n        ForStatement: 'ForStatement',\r\n        ForInStatement: 'ForInStatement',\r\n        FunctionDeclaration: 'FunctionDeclaration',\r\n        FunctionExpression: 'FunctionExpression',\r\n        Identifier: 'Identifier',\r\n        IfStatement: 'IfStatement',\r\n        Literal: 'Literal',\r\n        LabeledStatement: 'LabeledStatement',\r\n        LogicalExpression: 'LogicalExpression',\r\n        MemberExpression: 'MemberExpression',\r\n        MethodDefinition: 'MethodDefinition',\r\n        NewExpression: 'NewExpression',\r\n        ObjectExpression: 'ObjectExpression',\r\n        ObjectPattern: 'ObjectPattern',\r\n        Program: 'Program',\r\n        Property: 'Property',\r\n        ReturnStatement: 'ReturnStatement',\r\n        SequenceExpression: 'SequenceExpression',\r\n        SwitchStatement: 'SwitchStatement',\r\n        SwitchCase: 'SwitchCase',\r\n        ThisExpression: 'ThisExpression',\r\n        ThrowStatement: 'ThrowStatement',\r\n        TryStatement: 'TryStatement',\r\n        UnaryExpression: 'UnaryExpression',\r\n        UpdateExpression: 'UpdateExpression',\r\n        VariableDeclaration: 'VariableDeclaration',\r\n        VariableDeclarator: 'VariableDeclarator',\r\n        WhileStatement: 'WhileStatement',\r\n        WithStatement: 'WithStatement',\r\n        YieldExpression: 'YieldExpression'\r\n    };\r\n\r\n    function ignoreJSHintError() { }\r\n\r\n    isArray = Array.isArray;\r\n    if (!isArray) {\r\n        isArray = function isArray(array) {\r\n            return Object.prototype.toString.call(array) === '[object Array]';\r\n        };\r\n    }\r\n\r\n    function deepCopy(obj) {\r\n        var ret = {}, key, val;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                val = obj[key];\r\n                if (typeof val === 'object' && val !== null) {\r\n                    ret[key] = deepCopy(val);\r\n                } else {\r\n                    ret[key] = val;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function shallowCopy(obj) {\r\n        var ret = {}, key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                ret[key] = obj[key];\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    ignoreJSHintError(shallowCopy);\r\n\r\n    // based on LLVM libc++ upper_bound / lower_bound\r\n    // MIT License\r\n\r\n    function upperBound(array, func) {\r\n        var diff, len, i, current;\r\n\r\n        len = array.length;\r\n        i = 0;\r\n\r\n        while (len) {\r\n            diff = len >>> 1;\r\n            current = i + diff;\r\n            if (func(array[current])) {\r\n                len = diff;\r\n            } else {\r\n                i = current + 1;\r\n                len -= diff + 1;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n\r\n    function lowerBound(array, func) {\r\n        var diff, len, i, current;\r\n\r\n        len = array.length;\r\n        i = 0;\r\n\r\n        while (len) {\r\n            diff = len >>> 1;\r\n            current = i + diff;\r\n            if (func(array[current])) {\r\n                i = current + 1;\r\n                len -= diff + 1;\r\n            } else {\r\n                len = diff;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n    ignoreJSHintError(lowerBound);\r\n\r\n    VisitorKeys = {\r\n        AssignmentExpression: ['left', 'right'],\r\n        ArrayExpression: ['elements'],\r\n        ArrayPattern: ['elements'],\r\n        ArrowFunctionExpression: ['params', 'defaults', 'rest', 'body'],\r\n        BlockStatement: ['body'],\r\n        BinaryExpression: ['left', 'right'],\r\n        BreakStatement: ['label'],\r\n        CallExpression: ['callee', 'arguments'],\r\n        CatchClause: ['param', 'body'],\r\n        ClassBody: ['body'],\r\n        ClassDeclaration: ['id', 'body', 'superClass'],\r\n        ClassExpression: ['id', 'body', 'superClass'],\r\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\r\n        ContinueStatement: ['label'],\r\n        DebuggerStatement: [],\r\n        DirectiveStatement: [],\r\n        DoWhileStatement: ['body', 'test'],\r\n        EmptyStatement: [],\r\n        ExpressionStatement: ['expression'],\r\n        ForStatement: ['init', 'test', 'update', 'body'],\r\n        ForInStatement: ['left', 'right', 'body'],\r\n        ForOfStatement: ['left', 'right', 'body'],\r\n        FunctionDeclaration: ['id', 'params', 'defaults', 'rest', 'body'],\r\n        FunctionExpression: ['id', 'params', 'defaults', 'rest', 'body'],\r\n        Identifier: [],\r\n        IfStatement: ['test', 'consequent', 'alternate'],\r\n        Literal: [],\r\n        LabeledStatement: ['label', 'body'],\r\n        LogicalExpression: ['left', 'right'],\r\n        MemberExpression: ['object', 'property'],\r\n        MethodDefinition: ['key', 'value'],\r\n        NewExpression: ['callee', 'arguments'],\r\n        ObjectExpression: ['properties'],\r\n        ObjectPattern: ['properties'],\r\n        Program: ['body'],\r\n        Property: ['key', 'value'],\r\n        ReturnStatement: ['argument'],\r\n        SequenceExpression: ['expressions'],\r\n        SwitchStatement: ['discriminant', 'cases'],\r\n        SwitchCase: ['test', 'consequent'],\r\n        ThisExpression: [],\r\n        ThrowStatement: ['argument'],\r\n        TryStatement: ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],\r\n        UnaryExpression: ['argument'],\r\n        UpdateExpression: ['argument'],\r\n        VariableDeclaration: ['declarations'],\r\n        VariableDeclarator: ['id', 'init'],\r\n        WhileStatement: ['test', 'body'],\r\n        WithStatement: ['object', 'body'],\r\n        YieldExpression: ['argument']\r\n    };\r\n\r\n    // unique id\r\n    BREAK = {};\r\n    SKIP = {};\r\n\r\n    VisitorOption = {\r\n        Break: BREAK,\r\n        Skip: SKIP\r\n    };\r\n\r\n    function Reference(parent, key) {\r\n        this.parent = parent;\r\n        this.key = key;\r\n    }\r\n\r\n    Reference.prototype.replace = function replace(node) {\r\n        this.parent[this.key] = node;\r\n    };\r\n\r\n    function Element(node, path, wrap, ref) {\r\n        this.node = node;\r\n        this.path = path;\r\n        this.wrap = wrap;\r\n        this.ref = ref;\r\n    }\r\n\r\n    function Controller() { }\r\n\r\n    // API:\r\n    // return property path array from root to current node\r\n    Controller.prototype.path = function path() {\r\n        var i, iz, j, jz, result, element;\r\n\r\n        function addToPath(result, path) {\r\n            if (isArray(path)) {\r\n                for (j = 0, jz = path.length; j < jz; ++j) {\r\n                    result.push(path[j]);\r\n                }\r\n            } else {\r\n                result.push(path);\r\n            }\r\n        }\r\n\r\n        // root node\r\n        if (!this.__current.path) {\r\n            return null;\r\n        }\r\n\r\n        // first node is sentinel, second node is root element\r\n        result = [];\r\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\r\n            element = this.__leavelist[i];\r\n            addToPath(result, element.path);\r\n        }\r\n        addToPath(result, this.__current.path);\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // return array of parent elements\r\n    Controller.prototype.parents = function parents() {\r\n        var i, iz, result;\r\n\r\n        // first node is sentinel\r\n        result = [];\r\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\r\n            result.push(this.__leavelist[i].node);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // return current node\r\n    Controller.prototype.current = function current() {\r\n        return this.__current.node;\r\n    };\r\n\r\n    Controller.prototype.__execute = function __execute(callback, element) {\r\n        var previous, result;\r\n\r\n        result = undefined;\r\n\r\n        previous  = this.__current;\r\n        this.__current = element;\r\n        this.__state = null;\r\n        if (callback) {\r\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\r\n        }\r\n        this.__current = previous;\r\n\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // notify control skip / break\r\n    Controller.prototype.notify = function notify(flag) {\r\n        this.__state = flag;\r\n    };\r\n\r\n    // API:\r\n    // skip child nodes of current node\r\n    Controller.prototype.skip = function () {\r\n        this.notify(SKIP);\r\n    };\r\n\r\n    // API:\r\n    // break traversals\r\n    Controller.prototype['break'] = function () {\r\n        this.notify(BREAK);\r\n    };\r\n\r\n    Controller.prototype.__initialize = function(root, visitor) {\r\n        this.visitor = visitor;\r\n        this.root = root;\r\n        this.__worklist = [];\r\n        this.__leavelist = [];\r\n        this.__current = null;\r\n        this.__state = null;\r\n    };\r\n\r\n    Controller.prototype.traverse = function traverse(root, visitor) {\r\n        var worklist,\r\n            leavelist,\r\n            element,\r\n            node,\r\n            nodeType,\r\n            ret,\r\n            key,\r\n            current,\r\n            current2,\r\n            candidates,\r\n            candidate,\r\n            sentinel;\r\n\r\n        this.__initialize(root, visitor);\r\n\r\n        sentinel = {};\r\n\r\n        // reference\r\n        worklist = this.__worklist;\r\n        leavelist = this.__leavelist;\r\n\r\n        // initialize\r\n        worklist.push(new Element(root, null, null, null));\r\n        leavelist.push(new Element(null, null, null, null));\r\n\r\n        while (worklist.length) {\r\n            element = worklist.pop();\r\n\r\n            if (element === sentinel) {\r\n                element = leavelist.pop();\r\n\r\n                ret = this.__execute(visitor.leave, element);\r\n\r\n                if (this.__state === BREAK || ret === BREAK) {\r\n                    return;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (element.node) {\r\n\r\n                ret = this.__execute(visitor.enter, element);\r\n\r\n                if (this.__state === BREAK || ret === BREAK) {\r\n                    return;\r\n                }\r\n\r\n                worklist.push(sentinel);\r\n                leavelist.push(element);\r\n\r\n                if (this.__state === SKIP || ret === SKIP) {\r\n                    continue;\r\n                }\r\n\r\n                node = element.node;\r\n                nodeType = element.wrap || node.type;\r\n                candidates = VisitorKeys[nodeType];\r\n\r\n                current = candidates.length;\r\n                while ((current -= 1) >= 0) {\r\n                    key = candidates[current];\r\n                    candidate = node[key];\r\n                    if (!candidate) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!isArray(candidate)) {\r\n                        worklist.push(new Element(candidate, key, null, null));\r\n                        continue;\r\n                    }\r\n\r\n                    current2 = candidate.length;\r\n                    while ((current2 -= 1) >= 0) {\r\n                        if (!candidate[current2]) {\r\n                            continue;\r\n                        }\r\n                        if ((nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === candidates[current]) {\r\n                            element = new Element(candidate[current2], [key, current2], 'Property', null);\r\n                        } else {\r\n                            element = new Element(candidate[current2], [key, current2], null, null);\r\n                        }\r\n                        worklist.push(element);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Controller.prototype.replace = function replace(root, visitor) {\r\n        var worklist,\r\n            leavelist,\r\n            node,\r\n            nodeType,\r\n            target,\r\n            element,\r\n            current,\r\n            current2,\r\n            candidates,\r\n            candidate,\r\n            sentinel,\r\n            outer,\r\n            key;\r\n\r\n        this.__initialize(root, visitor);\r\n\r\n        sentinel = {};\r\n\r\n        // reference\r\n        worklist = this.__worklist;\r\n        leavelist = this.__leavelist;\r\n\r\n        // initialize\r\n        outer = {\r\n            root: root\r\n        };\r\n        element = new Element(root, null, null, new Reference(outer, 'root'));\r\n        worklist.push(element);\r\n        leavelist.push(element);\r\n\r\n        while (worklist.length) {\r\n            element = worklist.pop();\r\n\r\n            if (element === sentinel) {\r\n                element = leavelist.pop();\r\n\r\n                target = this.__execute(visitor.leave, element);\r\n\r\n                // node may be replaced with null,\r\n                // so distinguish between undefined and null in this place\r\n                if (target !== undefined && target !== BREAK && target !== SKIP) {\r\n                    // replace\r\n                    element.ref.replace(target);\r\n                }\r\n\r\n                if (this.__state === BREAK || target === BREAK) {\r\n                    return outer.root;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            target = this.__execute(visitor.enter, element);\r\n\r\n            // node may be replaced with null,\r\n            // so distinguish between undefined and null in this place\r\n            if (target !== undefined && target !== BREAK && target !== SKIP) {\r\n                // replace\r\n                element.ref.replace(target);\r\n                element.node = target;\r\n            }\r\n\r\n            if (this.__state === BREAK || target === BREAK) {\r\n                return outer.root;\r\n            }\r\n\r\n            // node may be null\r\n            node = element.node;\r\n            if (!node) {\r\n                continue;\r\n            }\r\n\r\n            worklist.push(sentinel);\r\n            leavelist.push(element);\r\n\r\n            if (this.__state === SKIP || target === SKIP) {\r\n                continue;\r\n            }\r\n\r\n            nodeType = element.wrap || node.type;\r\n            candidates = VisitorKeys[nodeType];\r\n\r\n            current = candidates.length;\r\n            while ((current -= 1) >= 0) {\r\n                key = candidates[current];\r\n                candidate = node[key];\r\n                if (!candidate) {\r\n                    continue;\r\n                }\r\n\r\n                if (!isArray(candidate)) {\r\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\r\n                    continue;\r\n                }\r\n\r\n                current2 = candidate.length;\r\n                while ((current2 -= 1) >= 0) {\r\n                    if (!candidate[current2]) {\r\n                        continue;\r\n                    }\r\n                    if (nodeType === Syntax.ObjectExpression && 'properties' === candidates[current]) {\r\n                        element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\r\n                    } else {\r\n                        element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\r\n                    }\r\n                    worklist.push(element);\r\n                }\r\n            }\r\n        }\r\n\r\n        return outer.root;\r\n    };\r\n\r\n    function traverse(root, visitor) {\r\n        var controller = new Controller();\r\n        return controller.traverse(root, visitor);\r\n    }\r\n\r\n    function replace(root, visitor) {\r\n        var controller = new Controller();\r\n        return controller.replace(root, visitor);\r\n    }\r\n\r\n    function extendCommentRange(comment, tokens) {\r\n        var target;\r\n\r\n        target = upperBound(tokens, function search(token) {\r\n            return token.range[0] > comment.range[0];\r\n        });\r\n\r\n        comment.extendedRange = [comment.range[0], comment.range[1]];\r\n\r\n        if (target !== tokens.length) {\r\n            comment.extendedRange[1] = tokens[target].range[0];\r\n        }\r\n\r\n        target -= 1;\r\n        if (target >= 0) {\r\n            comment.extendedRange[0] = tokens[target].range[1];\r\n        }\r\n\r\n        return comment;\r\n    }\r\n\r\n    function attachComments(tree, providedComments, tokens) {\r\n        // At first, we should calculate extended comment ranges.\r\n        var comments = [], comment, len, i, cursor;\r\n\r\n        if (!tree.range) {\r\n            throw new Error('attachComments needs range information');\r\n        }\r\n\r\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\r\n        if (!tokens.length) {\r\n            if (providedComments.length) {\r\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\r\n                    comment = deepCopy(providedComments[i]);\r\n                    comment.extendedRange = [0, tree.range[0]];\r\n                    comments.push(comment);\r\n                }\r\n                tree.leadingComments = comments;\r\n            }\r\n            return tree;\r\n        }\r\n\r\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\r\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\r\n        }\r\n\r\n        // This is based on John Freeman's implementation.\r\n        cursor = 0;\r\n        traverse(tree, {\r\n            enter: function (node) {\r\n                var comment;\r\n\r\n                while (cursor < comments.length) {\r\n                    comment = comments[cursor];\r\n                    if (comment.extendedRange[1] > node.range[0]) {\r\n                        break;\r\n                    }\r\n\r\n                    if (comment.extendedRange[1] === node.range[0]) {\r\n                        if (!node.leadingComments) {\r\n                            node.leadingComments = [];\r\n                        }\r\n                        node.leadingComments.push(comment);\r\n                        comments.splice(cursor, 1);\r\n                    } else {\r\n                        cursor += 1;\r\n                    }\r\n                }\r\n\r\n                // already out of owned node\r\n                if (cursor === comments.length) {\r\n                    return VisitorOption.Break;\r\n                }\r\n\r\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\r\n                    return VisitorOption.Skip;\r\n                }\r\n            }\r\n        });\r\n\r\n        cursor = 0;\r\n        traverse(tree, {\r\n            leave: function (node) {\r\n                var comment;\r\n\r\n                while (cursor < comments.length) {\r\n                    comment = comments[cursor];\r\n                    if (node.range[1] < comment.extendedRange[0]) {\r\n                        break;\r\n                    }\r\n\r\n                    if (node.range[1] === comment.extendedRange[0]) {\r\n                        if (!node.trailingComments) {\r\n                            node.trailingComments = [];\r\n                        }\r\n                        node.trailingComments.push(comment);\r\n                        comments.splice(cursor, 1);\r\n                    } else {\r\n                        cursor += 1;\r\n                    }\r\n                }\r\n\r\n                // already out of owned node\r\n                if (cursor === comments.length) {\r\n                    return VisitorOption.Break;\r\n                }\r\n\r\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\r\n                    return VisitorOption.Skip;\r\n                }\r\n            }\r\n        });\r\n\r\n        return tree;\r\n    }\r\n\r\n    exports.version = '1.5.1-dev';\r\n    exports.Syntax = Syntax;\r\n    exports.traverse = traverse;\r\n    exports.replace = replace;\r\n    exports.attachComments = attachComments;\r\n    exports.VisitorKeys = VisitorKeys;\r\n    exports.VisitorOption = VisitorOption;\r\n    exports.Controller = Controller;\r\n}));\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n},{}],41:[function(require,module,exports){\r\n\r\n},{}],42:[function(require,module,exports){\r\n(function (process){\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// resolves . and .. elements in a path array with directory names there\r\n// must be no slashes, empty elements, or device names (c:\\) in the array\r\n// (so also no leading and trailing slashes - it does not distinguish\r\n// relative and absolute paths)\r\nfunction normalizeArray(parts, allowAboveRoot) {\r\n  // if the path tries to go above the root, `up` ends up > 0\r\n  var up = 0;\r\n  for (var i = parts.length - 1; i >= 0; i--) {\r\n    var last = parts[i];\r\n    if (last === '.') {\r\n      parts.splice(i, 1);\r\n    } else if (last === '..') {\r\n      parts.splice(i, 1);\r\n      up++;\r\n    } else if (up) {\r\n      parts.splice(i, 1);\r\n      up--;\r\n    }\r\n  }\r\n\r\n  // if the path is allowed to go above the root, restore leading ..s\r\n  if (allowAboveRoot) {\r\n    for (; up--; up) {\r\n      parts.unshift('..');\r\n    }\r\n  }\r\n\r\n  return parts;\r\n}\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar splitPath = function(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n};\r\n\r\n// path.resolve([from ...], to)\r\n// posix version\r\nexports.resolve = function() {\r\n  var resolvedPath = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n    var path = (i >= 0) ? arguments[i] : process.cwd();\r\n\r\n    // Skip empty and invalid entries\r\n    if (typeof path !== 'string') {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    resolvedPath = path + '/' + resolvedPath;\r\n    resolvedAbsolute = path.charAt(0) === '/';\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path, but\r\n  // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n  // Normalize the path\r\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\r\n    return !!p;\r\n  }), !resolvedAbsolute).join('/');\r\n\r\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\n\r\n// path.normalize(path)\r\n// posix version\r\nexports.normalize = function(path) {\r\n  var isAbsolute = exports.isAbsolute(path),\r\n      trailingSlash = substr(path, -1) === '/';\r\n\r\n  // Normalize the path\r\n  path = normalizeArray(filter(path.split('/'), function(p) {\r\n    return !!p;\r\n  }), !isAbsolute).join('/');\r\n\r\n  if (!path && !isAbsolute) {\r\n    path = '.';\r\n  }\r\n  if (path && trailingSlash) {\r\n    path += '/';\r\n  }\r\n\r\n  return (isAbsolute ? '/' : '') + path;\r\n};\r\n\r\n// posix version\r\nexports.isAbsolute = function(path) {\r\n  return path.charAt(0) === '/';\r\n};\r\n\r\n// posix version\r\nexports.join = function() {\r\n  var paths = Array.prototype.slice.call(arguments, 0);\r\n  return exports.normalize(filter(paths, function(p, index) {\r\n    if (typeof p !== 'string') {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    return p;\r\n  }).join('/'));\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// posix version\r\nexports.relative = function(from, to) {\r\n  from = exports.resolve(from).substr(1);\r\n  to = exports.resolve(to).substr(1);\r\n\r\n  function trim(arr) {\r\n    var start = 0;\r\n    for (; start < arr.length; start++) {\r\n      if (arr[start] !== '') break;\r\n    }\r\n\r\n    var end = arr.length - 1;\r\n    for (; end >= 0; end--) {\r\n      if (arr[end] !== '') break;\r\n    }\r\n\r\n    if (start > end) return [];\r\n    return arr.slice(start, end - start + 1);\r\n  }\r\n\r\n  var fromParts = trim(from.split('/'));\r\n  var toParts = trim(to.split('/'));\r\n\r\n  var length = Math.min(fromParts.length, toParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (fromParts[i] !== toParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < fromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('/');\r\n};\r\n\r\nexports.sep = '/';\r\nexports.delimiter = ':';\r\n\r\nexports.dirname = function(path) {\r\n  var result = splitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nexports.basename = function(path, ext) {\r\n  var f = splitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nexports.extname = function(path) {\r\n  return splitPath(path)[3];\r\n};\r\n\r\nfunction filter (xs, f) {\r\n    if (xs.filter) return xs.filter(f);\r\n    var res = [];\r\n    for (var i = 0; i < xs.length; i++) {\r\n        if (f(xs[i], i, xs)) res.push(xs[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\n// String.prototype.substr - negative index don't work in IE8\r\nvar substr = 'ab'.substr(-1) === 'b'\r\n    ? function (str, start, len) { return str.substr(start, len) }\r\n    : function (str, start, len) {\r\n        if (start < 0) start = str.length + start;\r\n        return str.substr(start, len);\r\n    }\r\n;\r\n\r\n}).call(this,require(\"JkpR2F\"))\r\n},{\"JkpR2F\":43}],43:[function(require,module,exports){\r\n// shim for using process in browser\r\n\r\nvar process = module.exports = {};\r\n\r\nprocess.nextTick = (function () {\r\n    var canSetImmediate = typeof window !== 'undefined'\r\n    && window.setImmediate;\r\n    var canPost = typeof window !== 'undefined'\r\n    && window.postMessage && window.addEventListener\r\n    ;\r\n\r\n    if (canSetImmediate) {\r\n        return function (f) { return window.setImmediate(f) };\r\n    }\r\n\r\n    if (canPost) {\r\n        var queue = [];\r\n        window.addEventListener('message', function (ev) {\r\n            var source = ev.source;\r\n            if ((source === window || source === null) && ev.data === 'process-tick') {\r\n                ev.stopPropagation();\r\n                if (queue.length > 0) {\r\n                    var fn = queue.shift();\r\n                    fn();\r\n                }\r\n            }\r\n        }, true);\r\n\r\n        return function nextTick(fn) {\r\n            queue.push(fn);\r\n            window.postMessage('process-tick', '*');\r\n        };\r\n    }\r\n\r\n    return function nextTick(fn) {\r\n        setTimeout(fn, 0);\r\n    };\r\n})();\r\n\r\nprocess.title = 'browser';\r\nprocess.browser = true;\r\nprocess.env = {};\r\nprocess.argv = [];\r\n\r\nfunction noop() {}\r\n\r\nprocess.on = noop;\r\nprocess.addListener = noop;\r\nprocess.once = noop;\r\nprocess.off = noop;\r\nprocess.removeListener = noop;\r\nprocess.removeAllListeners = noop;\r\nprocess.emit = noop;\r\n\r\nprocess.binding = function (name) {\r\n    throw new Error('process.binding is not supported');\r\n}\r\n\r\n// TODO(shtylman)\r\nprocess.cwd = function () { return '/' };\r\nprocess.chdir = function (dir) {\r\n    throw new Error('process.chdir is not supported');\r\n};\r\n\r\n},{}],44:[function(require,module,exports){\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"filbert\"] = factory();\r\n\telse\r\n\t\troot[\"filbert\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId])\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\texports: {},\r\n/******/ \t\t\tid: moduleId,\r\n/******/ \t\t\tloaded: false\r\n/******/ \t\t};\r\n\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.loaded = true;\r\n\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n\r\n\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\tvar Sk = __webpack_require__(1);\r\n\tvar transform = __webpack_require__(2);\r\n\tvar improveError = __webpack_require__(3);\r\n\r\n\tvar defaultOptions = {\r\n\t\tlocations: true,\r\n\t\tranges: true,\r\n\t\tsippets: true,\r\n\t\tfilename: 'file.py',\r\n\t\tuseLet: false,\r\n\t\tfriendlyErrors: true\r\n\t};\r\n\r\n\tfunction rangeToLoc(x, offsets) {\r\n\t\tvar best = -1;\r\n\t\tfor ( var i = 0; i < offsets.length; ++i ) {\r\n\t\t\tif ( offsets[i] > x ) break;\r\n\t\t\tbest = i;\r\n\t\t}\r\n\t\tvar off = best >= 0 ? offsets[best] : 0;\r\n\t\treturn {line: best+2, column: x - off, pos: x };\r\n\t}\r\n\r\n\tfunction locToRange(line, col, offsets) {\r\n\t\tvar loff = 0;\r\n\t\tif ( line > 2 && (line-2) < offsets.length ) loff = offsets[line-2];\r\n\t\treturn loff + col;\r\n\t}\r\n\r\n\tfunction decorate(n, code, offsets, options) {\r\n\t\tvar numrange = locToRange(n.lineno, n.col_offset, offsets);\r\n\r\n\t\tvar range = [\r\n\t\t\tnumrange === numrange ? numrange : Infinity,\r\n\t\t\tnumrange === numrange ? numrange : -Infinity\r\n\t\t];\r\n\t\t\r\n\t\tif ( n.value ) range[1] += (n.value.length);\r\n\r\n\t\tif ( n.children )\r\n\t\tfor ( var i = 0; i < n.children.length; ++i ) {\r\n\t\t\tvar r = decorate(n.children[i], code, offsets, options);\r\n\t\t\trange[0] = Math.min(range[0], r[0]);\r\n\t\t\trange[1] = Math.max(range[1], r[1]);\r\n\t\t}\r\n\r\n\t\tif ( options.ranges ) n.range = range;\r\n\t\tif ( options.locations ) {\r\n\t\t\tn.loc = {\r\n\t\t\t\tstart: rangeToLoc(range[0], offsets),\r\n\t\t\t\tend: rangeToLoc(range[1], offsets),\r\n\t\t\t};\r\n\t\t}\r\n\t\tif ( options.snippets ) n.str = code.substring(range[0], range[1]);\r\n\r\n\t\treturn range;\r\n\t}\r\n\r\n\tfunction parser(code, options) {\r\n\t\tvar lineOffsets = [];\r\n\t\tvar idx = -1;\r\n\t\tvar parse, ast;\r\n\t\toptions = options || {};\r\n\t\tfor ( var opt in defaultOptions ) {\r\n\t\t\tif ( !(opt in options) ) options[opt] = defaultOptions[opt];\r\n\t\t}\r\n\r\n\t\twhile ( true ) {\r\n\t\t\tidx = code.indexOf(\"\\n\", idx+1);\r\n\t\t\tif ( idx < 0 ) break;\r\n\t\t\tlineOffsets.push(idx+1);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tparse = Sk.parse(options.filename, code);\r\n\t\t\tdecorate(parse.cst, code, lineOffsets, options);\r\n\t\t\tparse.flags = parse.flags | Sk.Parser.CO_FUTURE_UNICODE_LITERALS; //Enable future unicode literals\r\n\t\t\tast = Sk.astFromParse(parse.cst, options.filename, parse.flags);\r\n\t\t} catch ( e ) {\r\n\t\t\tif ( e.extra && e.extra.node ) decorate(e.extra.node, code, lineOffsets, options);\r\n\t\t\timproveError(e, options, code);\r\n\t\t\tif ( e.loc ) {\r\n\t\t\t\te.pos = locToRange(e.loc.line, e.loc.column, lineOffsets);\r\n\t\t\t}\r\n\t\t\tthrow e;\r\n\t\t}\r\n\r\n\t\t//console.log(JSON.stringify(ast, null, \"  \"));\r\n\t\tvar ctx = {varType: (options.useLet ? 'let' : 'var')};\r\n\t\tvar js = transform(ast, ctx);\r\n\t\treturn js;\r\n\t}\r\n\r\n\tmodule.exports = {\r\n\t\tparse: parser,\r\n\t\tpythonRuntime: __webpack_require__(4),\r\n\t\tdefaultOptions: {runtimeParamName: '__pythonRuntime'}\r\n\t};\r\n\r\n/***/ },\r\n/* 1 */\r\n/***/ function(module, exports) {\r\n\r\n\t/* WEBPACK VAR INJECTION */(function(global) {\r\n\t/* ---- /Users/rob/skulpty/lib/preamble.js ---- */ \r\n\r\n\tvar goog = {\r\n\t\tglobal: global\r\n\t};\r\n\r\n\tvar COMPILED = false;\r\n\r\n\tgoog.exportSymbol = function() {};\r\n\tgoog.require = function() {};\r\n\r\n\tgoog.inherits = function(childCtor, parentCtor) {\r\n\t  if ( !parentCtor ) throw new Error(\"Cant inherit from undefined?\");\r\n\t  /** @constructor */\r\n\t  function tempCtor() {};\r\n\t  tempCtor.prototype = parentCtor.prototype;\r\n\t  childCtor.superClass_ = parentCtor.prototype;\r\n\t  childCtor.prototype = new tempCtor();\r\n\t  /** @override */\r\n\t  childCtor.prototype.constructor = childCtor;\r\n\t};\r\n\r\n\tgoog.asserts = {\r\n\t\tassert: function(what, why) {\r\n\t        if ( !what ) throw new Error(\"AssertionFailed:\" + why);\r\n\t    }\r\n\t};\r\n\r\n\tvar Sk = Sk || {};\r\n\r\n\tSk.builtin = Sk.builtin  ||  {};\r\n\r\n\tSk.builtin.bool = Boolean;\r\n\tSk.builtin.int_ = function Int(x) {\r\n\t  this.v = x;\r\n\t};\r\n\r\n\tSk.builtin.int_.prototype.threshold$ = Infinity;\r\n\tSk.builtin.int_.prototype.valueOf = function() { return this.v.valueOf(); };\r\n\r\n\tSk.builtin.tuple = function(x) {\r\n\t  this.v = Array.prototype.slice.call(x, 0);\r\n\t};\r\n\tSk.builtin.tuple.prototype.sq$length = function() { return this.length; };\r\n\r\n\tSk.builtin.float_ = Number;\r\n\tSk.builtin.long = Number;\r\n\tSk.builtin.func = function(fx) { return fx; };\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/type.js ---- */ \r\n\r\n\tif(Sk.builtin === undefined) {\r\n\t    Sk.builtin = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Maps Python dunder names to the Skulpt Javascript function names that\r\n\t * implement them.\r\n\t *\r\n\t * Note: __add__, __mul__, and __rmul__ can be used for either numeric or\r\n\t * sequence types. Here, they default to the numeric versions (i.e. nb$add,\r\n\t * nb$multiply, and nb$reflected_multiply). This works because Sk.abstr.binary_op_\r\n\t * checks for the numeric shortcuts and not the sequence shortcuts when computing\r\n\t * a binary operation.\r\n\t *\r\n\t * Because many of these functions are used in contexts in which Skulpt does not\r\n\t * [yet] handle suspensions, the assumption is that they must not suspend. However,\r\n\t * some of these built-in functions are acquiring 'canSuspend' arguments to signal\r\n\t * where this is not the case. These need to be spliced out of the argument list before\r\n\t * it is passed to python. Array values in this map contain [dunderName, argumentIdx],\r\n\t * where argumentIdx specifies the index of the 'canSuspend' boolean argument.\r\n\t *\r\n\t * @type {Object}\r\n\t */\r\n\tSk.dunderToSkulpt = {\r\n\t    \"__eq__\": \"ob$eq\",\r\n\t    \"__ne__\": \"ob$ne\",\r\n\t    \"__lt__\": \"ob$lt\",\r\n\t    \"__le__\": \"ob$le\",\r\n\t    \"__gt__\": \"ob$gt\",\r\n\t    \"__ge__\": \"ob$ge\",\r\n\t    \"__hash__\": \"tp$hash\",\r\n\t    \"__abs__\": \"nb$abs\",\r\n\t    \"__neg__\": \"nb$negative\",\r\n\t    \"__pos__\": \"nb$positive\",\r\n\t    \"__int__\": \"nb$int_\",\r\n\t    \"__long__\": \"nb$lng\",\r\n\t    \"__float__\": \"nb$float_\",\r\n\t    \"__add__\": \"nb$add\",\r\n\t    \"__radd__\": \"nb$reflected_add\",\r\n\t    \"__sub__\": \"nb$subtract\",\r\n\t    \"__rsub__\": \"nb$reflected_subtract\",\r\n\t    \"__mul__\": \"nb$multiply\",\r\n\t    \"__rmul__\": \"nb$reflected_multiply\",\r\n\t    \"__div__\": \"nb$divide\",\r\n\t    \"__rdiv__\": \"nb$reflected_divide\",\r\n\t    \"__floordiv__\": \"nb$floor_divide\",\r\n\t    \"__rfloordiv__\": \"nb$reflected_floor_divide\",\r\n\t    \"__mod__\": \"nb$remainder\",\r\n\t    \"__rmod__\": \"nb$reflected_remainder\",\r\n\t    \"__divmod__\": \"nb$divmod\",\r\n\t    \"__rdivmod__\": \"nb$reflected_divmod\",\r\n\t    \"__pow__\": \"nb$power\",\r\n\t    \"__rpow__\": \"nb$reflected_power\",\r\n\t    \"__contains__\": \"sq$contains\",\r\n\t    \"__len__\": [\"sq$length\", 0]\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @constructor\r\n\t *\r\n\t * @param {*} name name or object to get type of, if only one arg\r\n\t *\r\n\t * @param {Sk.builtin.tuple=} bases\r\n\t *\r\n\t * @param {Object=} dict\r\n\t *\r\n\t *\r\n\t * This type represents the type of `type'. *Calling* an instance of\r\n\t * this builtin type named \"type\" creates class objects. The resulting\r\n\t * class objects will have various tp$xyz attributes on them that allow\r\n\t * for the various operations on that object.\r\n\t *\r\n\t * calling the type or calling an instance of the type? or both?\r\n\t */\r\n\tSk.builtin.type = function (name, bases, dict) {\r\n\t    var mro;\r\n\t    var obj;\r\n\t    var klass;\r\n\t    var v;\r\n\t    if (bases === undefined && dict === undefined) {\r\n\t        // 1 arg version of type()\r\n\t        // the argument is an object, not a name and returns a type object\r\n\t        obj = name;\r\n\t        return obj.ob$type;\r\n\t    } else {\r\n\r\n\t        // argument dict must be of type dict\r\n\t        if(dict.tp$name !== \"dict\") {\r\n\t            throw new Sk.builtin.TypeError(\"type() argument 3 must be dict, not \" + Sk.abstr.typeName(dict));\r\n\t        }\r\n\r\n\t        // checks if name must be string\r\n\t        if(!Sk.builtin.checkString(name)) {\r\n\t            throw new Sk.builtin.TypeError(\"type() argument 1 must be str, not \" + Sk.abstr.typeName(name));\r\n\t        }\r\n\r\n\t        // argument bases must be of type tuple\r\n\t        if(bases.tp$name !== \"tuple\") {\r\n\t            throw new Sk.builtin.TypeError(\"type() argument 2 must be tuple, not \" + Sk.abstr.typeName(bases));\r\n\t        }\r\n\r\n\t        // type building version of type\r\n\r\n\t        // dict is the result of running the classes code object\r\n\t        // (basically the dict of functions). those become the prototype\r\n\t        // object of the class).\r\n\t        /**\r\n\t        * @constructor\r\n\t        */\r\n\t        klass = function (kwdict, varargseq, kws, args, canSuspend) {\r\n\t            var init;\r\n\t            var self = this;\r\n\t            var s;\r\n\t            var args_copy;\r\n\t            if (!(this instanceof klass)) {\r\n\t                return new klass(kwdict, varargseq, kws, args, canSuspend);\r\n\t            }\r\n\r\n\t            args = args || [];\r\n\t            self[\"$d\"] = new Sk.builtin.dict([]);\r\n\t            self[\"$d\"].mp$ass_subscript(new Sk.builtin.str(\"__dict__\"), self[\"$d\"]);\r\n\r\n\t            if (klass.prototype.tp$base !== undefined) {\r\n\t                if (klass.prototype.tp$base.sk$klass) {\r\n\t                    klass.prototype.tp$base.call(this, kwdict, varargseq, kws, args.slice(), canSuspend);\r\n\t                } else {\r\n\t                    // Call super constructor if subclass of a builtin\r\n\t                    args_copy = args.slice();\r\n\t                    args_copy.unshift(klass, this);\r\n\t                    Sk.abstr.superConstructor.apply(undefined, args_copy);\r\n\t                }\r\n\t            }\r\n\r\n\t            init = Sk.builtin.type.typeLookup(self.ob$type, \"__init__\");\r\n\t            if (init !== undefined) {\r\n\t                // return should be None or throw a TypeError otherwise\r\n\t                args.unshift(self);\r\n\t                s = Sk.misceval.applyOrSuspend(init, kwdict, varargseq, kws, args);\r\n\r\n\t                return (function doSusp(s) {\r\n\t                    if (s instanceof Sk.misceval.Suspension) {\r\n\t                        // TODO I (Meredydd) don't know whether we are ever called\r\n\t                        // from anywhere except Sk.misceval.applyOrSuspend().\r\n\t                        // If we're not, we don't need a canSuspend parameter at all.\r\n\t                        if (canSuspend) {\r\n\t                            return new Sk.misceval.Suspension(doSusp, s);\r\n\t                        } else {\r\n\t                            return Sk.misceval.retryOptionalSuspensionOrThrow(s);\r\n\t                        }\r\n\t                    } else {\r\n\t                        return self;\r\n\t                    }\r\n\t                })(s);\r\n\t            }\r\n\r\n\t            return self;\r\n\t        };\r\n\r\n\t        var _name = Sk.ffi.remapToJs(name); // unwrap name string to js for latter use\r\n\r\n\t        var inheritsFromObject = false, inheritsBuiltin = false;\r\n\r\n\t        if (bases.v.length === 0 && Sk.python3) {\r\n\t            // new style class, inherits from object by default\r\n\t            inheritsFromObject = true;\r\n\t            Sk.abstr.setUpInheritance(_name, klass, Sk.builtin.object);\r\n\t        }\r\n\r\n\t        var parent, it, firstAncestor, builtin_bases = [];\r\n\t        // Set up inheritance from any builtins\r\n\t        for (it = bases.tp$iter(), parent = it.tp$iternext(); parent !== undefined; parent = it.tp$iternext()) {\r\n\t            if (firstAncestor === undefined) {\r\n\t                firstAncestor = parent;\r\n\t            }\r\n\t            if (parent.prototype instanceof Sk.builtin.object || parent === Sk.builtin.object) {\r\n\r\n\t                while (parent.sk$klass && parent.prototype.tp$base) {\r\n\t                    parent = parent.prototype.tp$base;\r\n\t                }\r\n\r\n\t                if (!parent.sk$klass && builtin_bases.indexOf(parent) < 0) {\r\n\t                    builtin_bases.push(parent);\r\n\t                }\r\n\r\n\t                // This class inherits from Sk.builtin.object at some level\r\n\t                inheritsFromObject = true;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (builtin_bases.length > 1) {\r\n\t            throw new Sk.builtin.TypeError(\"Multiple inheritance with more than one builtin type is unsupported\");\r\n\t        }\r\n\r\n\t        // Javascript does not support multiple inheritance, so only the first\r\n\t        // base (if any) will directly inherit in Javascript\r\n\t        if (firstAncestor !== undefined) {\r\n\t            goog.inherits(klass, firstAncestor);\r\n\r\n\t            if (firstAncestor.prototype instanceof Sk.builtin.object || firstAncestor === Sk.builtin.object) {\r\n\t                klass.prototype.tp$base = firstAncestor;\r\n\t            }\r\n\t        }\r\n\r\n\t        klass.prototype.tp$name = _name;\r\n\t        klass.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(_name, klass);\r\n\r\n\t        if (!inheritsFromObject) {\r\n\t            // old style class, does not inherit from object\r\n\t            klass.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;\r\n\t            klass.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;\r\n\t        }\r\n\r\n\t        // set __module__ if not present (required by direct type(name, bases, dict) calls)\r\n\t        var module_lk = new Sk.builtin.str(\"__module__\");\r\n\t        if(dict.mp$lookup(module_lk) === undefined) {\r\n\t            dict.mp$ass_subscript(module_lk, Sk.globals[\"__name__\"]);\r\n\t        }\r\n\r\n\t        // copy properties into our klass object\r\n\t        // uses python iter methods\r\n\t        var k;\r\n\t        for (it = dict.tp$iter(), k = it.tp$iternext(); k !== undefined; k = it.tp$iternext()) {\r\n\t            v = dict.mp$subscript(k);\r\n\t            if (v === undefined) {\r\n\t                v = null;\r\n\t            }\r\n\t            klass.prototype[k.v] = v;\r\n\t            klass[k.v] = v;\r\n\t        }\r\n\r\n\t        klass[\"__class__\"] = klass;\r\n\t        klass[\"__name__\"] = name;\r\n\t        klass.sk$klass = true;\r\n\t        klass.prototype.tp$descr_get = function () {\r\n\t            goog.asserts.fail(\"in type tp$descr_get\");\r\n\t        };\r\n\t        klass.prototype[\"$r\"] = function () {\r\n\t            var cname;\r\n\t            var mod;\r\n\t            // TODO use Sk.abstr.gattr() here so __repr__ can be dynamically provided (eg by __getattr__())\r\n\t            var reprf = this.tp$getattr(\"__repr__\");\r\n\t            if (reprf !== undefined && reprf.im_func !== Sk.builtin.object.prototype[\"__repr__\"]) {\r\n\t                return Sk.misceval.apply(reprf, undefined, undefined, undefined, []);\r\n\t            }\r\n\r\n\t            if ((klass.prototype.tp$base !== undefined) &&\r\n\t                (klass.prototype.tp$base !== Sk.builtin.object) &&\r\n\t                (klass.prototype.tp$base.prototype[\"$r\"] !== undefined)) {\r\n\t                // If subclass of a builtin which is not object, use that class' repr\r\n\t                return klass.prototype.tp$base.prototype[\"$r\"].call(this);\r\n\t            } else {\r\n\t                // Else, use default repr for a user-defined class instance\r\n\t                mod = dict.mp$subscript(module_lk); // lookup __module__\r\n\t                cname = \"\";\r\n\t                if (mod) {\r\n\t                    cname = mod.v + \".\";\r\n\t                }\r\n\t                return new Sk.builtin.str(\"<\" + cname + _name + \" object>\");\r\n\t            }\r\n\t        };\r\n\t        klass.prototype.tp$str = function () {\r\n\t            // TODO use Sk.abstr.gattr() here so __str__ can be dynamically provided (eg by __getattr__())\r\n\t            var strf = this.tp$getattr(\"__str__\");\r\n\t            if (strf !== undefined && strf.im_func !== Sk.builtin.object.prototype[\"__str__\"]) {\r\n\t                return Sk.misceval.apply(strf, undefined, undefined, undefined, []);\r\n\t            }\r\n\t            if ((klass.prototype.tp$base !== undefined) &&\r\n\t                (klass.prototype.tp$base !== Sk.builtin.object) &&\r\n\t                (klass.prototype.tp$base.prototype.tp$str !== undefined)) {\r\n\t                // If subclass of a builtin which is not object, use that class' repr\r\n\t                return klass.prototype.tp$base.prototype.tp$str.call(this);\r\n\t            }\r\n\t            return this[\"$r\"]();\r\n\t        };\r\n\t        klass.prototype.tp$length = function (canSuspend) {\r\n\t            var r = Sk.misceval.chain(Sk.abstr.gattr(this, \"__len__\", canSuspend), function(lenf) {\r\n\t                return Sk.misceval.applyOrSuspend(lenf, undefined, undefined, undefined, []);\r\n\t            });\r\n\t            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\r\n\t        };\r\n\t        klass.prototype.tp$call = function (args, kw) {\r\n\t            return Sk.misceval.chain(Sk.abstr.gattr(this, \"__call__\", true), function(callf) {\r\n\t                return Sk.misceval.applyOrSuspend(callf, undefined, undefined, kw, args);\r\n\t            });\r\n\t        };\r\n\t        klass.prototype.tp$iter = function () {\r\n\t            var iterf = Sk.abstr.gattr(this, \"__iter__\", false);\r\n\t            return Sk.misceval.callsim(iterf);\r\n\t        };\r\n\t        klass.prototype.tp$iternext = function (canSuspend) {\r\n\t            var self = this;\r\n\t            var r = Sk.misceval.chain(\r\n\t                Sk.misceval.tryCatch(function() {\r\n\t                    return Sk.abstr.gattr(self, \"next\", canSuspend);\r\n\t                }, function(e) {\r\n\t                    if (e instanceof Sk.builtin.AttributeError) {\r\n\t                        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(self) + \"' object is not iterable\");\r\n\t                    } else {\r\n\t                        throw e;\r\n\t                    }\r\n\t                }),\r\n\t            function(/** {Object} */ iternextf) {\r\n\t                return Sk.misceval.tryCatch(function() {\r\n\t                    return Sk.misceval.callsimOrSuspend(iternextf);\r\n\t                }, function(e) {\r\n\t                    if (e instanceof Sk.builtin.StopIteration) {\r\n\t                        return undefined;\r\n\t                    } else {\r\n\t                        throw e;\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\r\n\t            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\r\n\t        };\r\n\r\n\t        klass.prototype.tp$getitem = function (key, canSuspend) {\r\n\t            var getf = Sk.abstr.gattr(this, \"__getitem__\", canSuspend), r;\r\n\t            if (getf !== undefined) {\r\n\t                r = Sk.misceval.applyOrSuspend(getf, undefined, undefined, undefined, [key]);\r\n\t                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\r\n\t            }\r\n\t            throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(this) + \"' object does not support indexing\");\r\n\t        };\r\n\t        klass.prototype.tp$setitem = function (key, value, canSuspend) {\r\n\t            var setf = Sk.abstr.gattr(this, \"__setitem__\", canSuspend), r;\r\n\t            if (setf !== undefined) {\r\n\t                r = Sk.misceval.applyOrSuspend(setf, undefined, undefined, undefined, [key, value]);\r\n\t                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\r\n\t            }\r\n\t            throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(this) + \"' object does not support item assignment\");\r\n\t        };\r\n\r\n\t        if (bases) {\r\n\t            //print(\"building mro for\", name);\r\n\t            //for (var i = 0; i < bases.length; ++i)\r\n\t            //print(\"base[\" + i + \"]=\" + bases[i].tp$name);\r\n\t            klass[\"$d\"] = new Sk.builtin.dict([]);\r\n\t            klass[\"$d\"].mp$ass_subscript(Sk.builtin.type.basesStr_, bases);\r\n\t            mro = Sk.builtin.type.buildMRO(klass);\r\n\t            klass[\"$d\"].mp$ass_subscript(Sk.builtin.type.mroStr_, mro);\r\n\t            klass.tp$mro = mro;\r\n\t            //print(\"mro result\", Sk.builtin.repr(mro).v);\r\n\t        }\r\n\r\n\t        // fix for class attributes\r\n\t        klass.tp$setattr = Sk.builtin.type.prototype.tp$setattr;\r\n\r\n\t        var shortcutDunder = function (skulpt_name, magic_name, magic_func, canSuspendIdx) {\r\n\t            klass.prototype[skulpt_name] = function () {\r\n\t                var args = Array.prototype.slice.call(arguments), canSuspend;\r\n\t                args.unshift(magic_func, this);\r\n\r\n\t                if (canSuspendIdx) {\r\n\t                    canSuspend = args[canSuspendIdx+1];\r\n\t                    args.splice(canSuspendIdx+1, 1);\r\n\t                    if (canSuspend) {\r\n\t                        return Sk.misceval.callsimOrSuspend.apply(undefined, args);\r\n\t                    }\r\n\t                }\r\n\t                return Sk.misceval.callsim.apply(undefined, args);\r\n\t            };\r\n\t        };\r\n\r\n\t        // Register skulpt shortcuts to magic methods defined by this class.\r\n\t        // TODO: This is somewhat problematic, as it means that dynamically defined\r\n\t        // methods (eg those returned by __getattr__()) cannot be used by these magic\r\n\t        // functions.\r\n\t        var dunder, skulpt_name, canSuspendIdx;\r\n\t        for (dunder in Sk.dunderToSkulpt) {\r\n\t            skulpt_name = Sk.dunderToSkulpt[dunder];\r\n\t            if (typeof(skulpt_name) === \"string\") {\r\n\t                canSuspendIdx = null;\r\n\t            } else {\r\n\t                canSuspendIdx = skulpt_name[1];\r\n\t                skulpt_name = skulpt_name[0];\r\n\t            }\r\n\r\n\t            if (klass[dunder]) {\r\n\t                // scope workaround\r\n\t                shortcutDunder(skulpt_name, dunder, klass[dunder], canSuspendIdx);\r\n\t            }\r\n\t        }\r\n\r\n\t        return klass;\r\n\t    }\r\n\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tSk.builtin.type.makeTypeObj = function (name, newedInstanceOfType) {\r\n\t    Sk.builtin.type.makeIntoTypeObj(name, newedInstanceOfType);\r\n\t    return newedInstanceOfType;\r\n\t};\r\n\r\n\tSk.builtin.type.makeIntoTypeObj = function (name, t) {\r\n\t    goog.asserts.assert(name !== undefined);\r\n\t    goog.asserts.assert(t !== undefined);\r\n\t    t.ob$type = Sk.builtin.type;\r\n\t    t.tp$name = name;\r\n\t    t[\"$r\"] = function () {\r\n\t        var ctype;\r\n\t        var mod = t.__module__;\r\n\t        var cname = \"\";\r\n\t        if (mod) {\r\n\t            cname = mod.v + \".\";\r\n\t        }\r\n\t        ctype = \"class\";\r\n\t        if (!mod && !t.sk$klass && !Sk.python3) {\r\n\t            ctype = \"type\";\r\n\t        }\r\n\t        return new Sk.builtin.str(\"<\" + ctype + \" '\" + cname + t.tp$name + \"'>\");\r\n\t    };\r\n\t    t.tp$str = undefined;\r\n\t    t.tp$getattr = Sk.builtin.type.prototype.tp$getattr;\r\n\t    t.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;\r\n\t    t.tp$richcompare = Sk.builtin.type.prototype.tp$richcompare;\r\n\t    t.sk$type = true;\r\n\r\n\t    return t;\r\n\t};\r\n\r\n\tSk.builtin.type.ob$type = Sk.builtin.type;\r\n\tSk.builtin.type.tp$name = \"type\";\r\n\tSk.builtin.type[\"$r\"] = function () {\r\n\t    if(Sk.python3) {\r\n\t        return new Sk.builtin.str(\"<class 'type'>\");\r\n\t    } else {\r\n\t        return new Sk.builtin.str(\"<type 'type'>\");\r\n\t    }\r\n\t};\r\n\r\n\t//Sk.builtin.type.prototype.tp$descr_get = function() { print(\"in type descr_get\"); };\r\n\r\n\t//Sk.builtin.type.prototype.tp$name = \"type\";\r\n\r\n\t// basically the same as GenericGetAttr except looks in the proto instead\r\n\tSk.builtin.type.prototype.tp$getattr = function (name) {\r\n\t    var res;\r\n\t    var tp = this;\r\n\t    var descr;\r\n\t    var f;\r\n\r\n\t    if (this[\"$d\"]) {\r\n\t        res = this[\"$d\"].mp$lookup(new Sk.builtin.str(name));\r\n\t        if (res !== undefined) {\r\n\t            return res;\r\n\t        }\r\n\t    }\r\n\r\n\t    descr = Sk.builtin.type.typeLookup(tp, name);\r\n\r\n\t    //print(\"type.tpgetattr descr\", descr, descr.tp$name, descr.func_code, name);\r\n\t    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {\r\n\t        f = descr.ob$type.tp$descr_get;\r\n\t        // todo;if (f && descr.tp$descr_set) // is a data descriptor if it has a set\r\n\t        // return f.call(descr, this, this.ob$type);\r\n\t    }\r\n\r\n\t    if (f) {\r\n\t        // non-data descriptor\r\n\t        return f.call(descr, null, tp);\r\n\t    }\r\n\r\n\t    if (descr !== undefined) {\r\n\t        return descr;\r\n\t    }\r\n\r\n\t    return undefined;\r\n\t};\r\n\r\n\tSk.builtin.type.prototype.tp$setattr = function (name, value) {\r\n\t    // class attributes are direct properties of the object\r\n\t    this[name] = value;\r\n\t};\r\n\r\n\tSk.builtin.type.typeLookup = function (type, name) {\r\n\t    var mro = type.tp$mro;\r\n\t    var pyname = new Sk.builtin.str(name);\r\n\t    var base;\r\n\t    var res;\r\n\t    var i;\r\n\r\n\t    // todo; probably should fix this, used for builtin types to get stuff\r\n\t    // from prototype\r\n\t    if (!mro) {\r\n\t        if (type.prototype) {\r\n\t            return type.prototype[name];\r\n\t        }\r\n\t        return undefined;\r\n\t    }\r\n\r\n\t    for (i = 0; i < mro.v.length; ++i) {\r\n\t        base = mro.v[i];\r\n\t        if (base.hasOwnProperty(name)) {\r\n\t            return base[name];\r\n\t        }\r\n\t        res = base[\"$d\"].mp$lookup(pyname);\r\n\t        if (res !== undefined) {\r\n\t            return res;\r\n\t        }\r\n\t        if (base.prototype && base.prototype[name] !== undefined) {\r\n\t            return base.prototype[name];\r\n\t        }\r\n\t    }\r\n\r\n\t    return undefined;\r\n\t};\r\n\r\n\tSk.builtin.type.mroMerge_ = function (seqs) {\r\n\t    /*\r\n\t     var tmp = [];\r\n\t     for (var i = 0; i < seqs.length; ++i)\r\n\t     {\r\n\t     tmp.push(new Sk.builtin.list(seqs[i]));\r\n\t     }\r\n\t     print(Sk.builtin.repr(new Sk.builtin.list(tmp)).v);\r\n\t     */\r\n\t    var seq;\r\n\t    var i;\r\n\t    var next;\r\n\t    var k;\r\n\t    var sseq;\r\n\t    var j;\r\n\t    var cand;\r\n\t    var cands;\r\n\t    var res = [];\r\n\t    for (; ;) {\r\n\t        for (i = 0; i < seqs.length; ++i) {\r\n\t            seq = seqs[i];\r\n\t            if (seq.length !== 0) {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        if (i === seqs.length) { // all empty\r\n\t            return res;\r\n\t        }\r\n\t        cands = [];\r\n\t        for (i = 0; i < seqs.length; ++i) {\r\n\t            seq = seqs[i];\r\n\t            //print(\"XXX\", Sk.builtin.repr(new Sk.builtin.list(seq)).v);\r\n\t            if (seq.length !== 0) {\r\n\t                cand = seq[0];\r\n\t                //print(\"CAND\", Sk.builtin.repr(cand).v);\r\n\t                OUTER:\r\n\t                    for (j = 0; j < seqs.length; ++j) {\r\n\t                        sseq = seqs[j];\r\n\t                        for (k = 1; k < sseq.length; ++k) {\r\n\t                            if (sseq[k] === cand) {\r\n\t                                break OUTER;\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\r\n\t                // cand is not in any sequences' tail -> constraint-free\r\n\t                if (j === seqs.length) {\r\n\t                    cands.push(cand);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        if (cands.length === 0) {\r\n\t            throw new Sk.builtin.TypeError(\"Inconsistent precedences in type hierarchy\");\r\n\t        }\r\n\r\n\t        next = cands[0];\r\n\t        // append next to result and remove from sequences\r\n\t        res.push(next);\r\n\t        for (i = 0; i < seqs.length; ++i) {\r\n\t            seq = seqs[i];\r\n\t            if (seq.length > 0 && seq[0] === next) {\r\n\t                seq.splice(0, 1);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t};\r\n\r\n\tSk.builtin.type.buildMRO_ = function (klass) {\r\n\t    // MERGE(klass + mro(bases) + bases)\r\n\t    var i;\r\n\t    var bases;\r\n\t    var all = [\r\n\t        [klass]\r\n\t    ];\r\n\r\n\t    //Sk.debugout(\"buildMRO for\", klass.tp$name);\r\n\r\n\t    var kbases = klass[\"$d\"].mp$subscript(Sk.builtin.type.basesStr_);\r\n\t    for (i = 0; i < kbases.v.length; ++i) {\r\n\t        all.push(Sk.builtin.type.buildMRO_(kbases.v[i]));\r\n\t    }\r\n\r\n\t    bases = [];\r\n\t    for (i = 0; i < kbases.v.length; ++i) {\r\n\t        bases.push(kbases.v[i]);\r\n\t    }\r\n\t    all.push(bases);\r\n\r\n\t    return Sk.builtin.type.mroMerge_(all);\r\n\t};\r\n\r\n\t/*\r\n\t * C3 MRO (aka CPL) linearization. Figures out which order to search through\r\n\t * base classes to determine what should override what. C3 does the \"right\r\n\t * thing\", and it's what Python has used since 2.3.\r\n\t *\r\n\t * Kind of complicated to explain, but not really that complicated in\r\n\t * implementation. Explanations:\r\n\t *\r\n\t * http://people.csail.mit.edu/jrb/goo/manual.43/goomanual_55.html\r\n\t * http://www.python.org/download/releases/2.3/mro/\r\n\t * http://192.220.96.201/dylan/linearization-oopsla96.html\r\n\t *\r\n\t * This implementation is based on a post by Samuele Pedroni on python-dev\r\n\t * (http://mail.python.org/pipermail/python-dev/2002-October/029176.html) when\r\n\t * discussing its addition to Python.\r\n\t */\r\n\tSk.builtin.type.buildMRO = function (klass) {\r\n\t    return new Sk.builtin.tuple(Sk.builtin.type.buildMRO_(klass));\r\n\t};\r\n\r\n\tSk.builtin.type.prototype.tp$richcompare = function (other, op) {\r\n\t    var r2;\r\n\t    var r1;\r\n\t    if (other.ob$type != Sk.builtin.type) {\r\n\t        return undefined;\r\n\t    }\r\n\t    if (!this[\"$r\"] || !other[\"$r\"]) {\r\n\t        return undefined;\r\n\t    }\r\n\t    r1 = new Sk.builtin.str(this[\"$r\"]().v.slice(1,6));\r\n\t    r2 = new Sk.builtin.str(other[\"$r\"]().v.slice(1,6));\r\n\t    if (this[\"$r\"]().v.slice(1,6) !== \"class\") {\r\n\t        r1 = this[\"$r\"]();\r\n\t        r2 = other[\"$r\"]();\r\n\t    }\r\n\t    return r1.tp$richcompare(r2, op);\r\n\t};\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/abstract.js ---- */ \r\n\r\n\t/**\r\n\t * @namespace Sk.abstr\r\n\t *\r\n\t */\r\n\tSk.abstr = {};\r\n\r\n\t//\r\n\t// Number\r\n\t//\r\n\r\n\tSk.abstr.typeName = function (v) {\r\n\t    var vtypename;\r\n\t    if (v.tp$name !== undefined) {\r\n\t        vtypename = v.tp$name;\r\n\t    } else {\r\n\t        vtypename = \"<invalid type>\";\r\n\t    }\r\n\t    return vtypename;\r\n\t};\r\n\r\n\tSk.abstr.binop_type_error = function (v, w, name) {\r\n\t    var vtypename = Sk.abstr.typeName(v),\r\n\t        wtypename = Sk.abstr.typeName(w);\r\n\r\n\t    throw new Sk.builtin.TypeError(\"unsupported operand type(s) for \" + name + \": '\" + vtypename + \"' and '\" + wtypename + \"'\");\r\n\t};\r\n\r\n\tSk.abstr.unop_type_error = function (v, name) {\r\n\t    var vtypename = Sk.abstr.typeName(v),\r\n\t        uop = {\r\n\t            \"UAdd\"  : \"+\",\r\n\t            \"USub\"  : \"-\",\r\n\t            \"Invert\": \"~\"\r\n\t        }[name];\r\n\r\n\t    throw new Sk.builtin.TypeError(\"bad operand type for unary \" + uop + \": '\" + vtypename + \"'\");\r\n\t};\r\n\r\n\t/**\r\n\t * lookup and return the LHS object slot function method.  This coudl be either a builtin slot function or a dunder method defined by the user.\r\n\t * @param obj\r\n\t * @param name\r\n\t * @returns {Object|null|undefined}\r\n\t * @private\r\n\t */\r\n\tSk.abstr.boNameToSlotFuncLhs_ = function (obj, name) {\r\n\t    if (obj === null) {\r\n\t        return undefined;\r\n\t    }\r\n\r\n\t    switch (name) {\r\n\t    case \"Add\":\r\n\t        return obj.nb$add ? obj.nb$add : obj[\"__add__\"];\r\n\t    case \"Sub\":\r\n\t        return obj.nb$subtract ? obj.nb$subtract : obj[\"__sub__\"];\r\n\t    case \"Mult\":\r\n\t        return obj.nb$multiply ? obj.nb$multiply : obj[\"__mul__\"];\r\n\t    case \"Div\":\r\n\t        return obj.nb$divide ? obj.nb$divide : obj[\"__div__\"];\r\n\t    case \"FloorDiv\":\r\n\t        return obj.nb$floor_divide ? obj.nb$floor_divide : obj[\"__floordiv__\"];\r\n\t    case \"Mod\":\r\n\t        return obj.nb$remainder ? obj.nb$remainder : obj[\"__mod__\"];\r\n\t    case \"DivMod\":\r\n\t        return obj.nb$divmod ? obj.nb$divmod : obj[\"__divmod__\"];\r\n\t    case \"Pow\":\r\n\t        return obj.nb$power ? obj.nb$power : obj[\"__pow__\"];\r\n\t    case \"LShift\":\r\n\t        return obj.nb$lshift ? obj.nb$lshift : obj[\"__lshift__\"];\r\n\t    case \"RShift\":\r\n\t        return obj.nb$rshift ? obj.nb$rshift : obj[\"__rshift__\"];\r\n\t    case \"BitAnd\":\r\n\t        return obj.nb$and ? obj.nb$and : obj[\"__and__\"];\r\n\t    case \"BitXor\":\r\n\t        return obj.nb$xor ? obj.nb$xor : obj[\"__xor__\"];\r\n\t    case \"BitOr\":\r\n\t        return obj.nb$or ? obj.nb$or : obj[\"__or__\"];\r\n\t    }\r\n\t};\r\n\r\n\tSk.abstr.boNameToSlotFuncRhs_ = function (obj, name) {\r\n\t    if (obj === null) {\r\n\t        return undefined;\r\n\t    }\r\n\r\n\t    switch (name) {\r\n\t    case \"Add\":\r\n\t        return obj.nb$reflected_add ? obj.nb$reflected_add : obj[\"__radd__\"];\r\n\t    case \"Sub\":\r\n\t        return obj.nb$reflected_subtract ? obj.nb$reflected_subtract : obj[\"__rsub__\"];\r\n\t    case \"Mult\":\r\n\t        return obj.nb$reflected_multiply ? obj.nb$reflected_multiply : obj[\"__rmul__\"];\r\n\t    case \"Div\":\r\n\t        return obj.nb$reflected_divide ? obj.nb$reflected_divide : obj[\"__rdiv__\"];\r\n\t    case \"FloorDiv\":\r\n\t        return obj.nb$reflected_floor_divide ? obj.nb$reflected_floor_divide : obj[\"__rfloordiv__\"];\r\n\t    case \"Mod\":\r\n\t        return obj.nb$reflected_remainder ? obj.nb$reflected_remainder : obj[\"__rmod__\"];\r\n\t    case \"DivMod\":\r\n\t        return obj.nb$reflected_divmod ? obj.nb$reflected_divmod : obj[\"__rdivmod__\"];\r\n\t    case \"Pow\":\r\n\t        return obj.nb$reflected_power ? obj.nb$reflected_power : obj[\"__rpow__\"];\r\n\t    case \"LShift\":\r\n\t        return obj.nb$reflected_lshift ? obj.nb$reflected_lshift : obj[\"__rlshift__\"];\r\n\t    case \"RShift\":\r\n\t        return obj.nb$reflected_rshift ? obj.nb$reflected_rshift : obj[\"__rrshift__\"];\r\n\t    case \"BitAnd\":\r\n\t        return obj.nb$reflected_and ? obj.nb$reflected_and : obj[\"__rand__\"];\r\n\t    case \"BitXor\":\r\n\t        return obj.nb$reflected_xor ? obj.nb$reflected_xor : obj[\"__rxor__\"];\r\n\t    case \"BitOr\":\r\n\t        return obj.nb$reflected_or ? obj.nb$reflected_or : obj[\"__ror__\"];\r\n\t    }\r\n\t};\r\n\r\n\tSk.abstr.iboNameToSlotFunc_ = function (obj, name) {\r\n\t    switch (name) {\r\n\t    case \"Add\":\r\n\t        return obj.nb$inplace_add ? obj.nb$inplace_add : obj[\"__iadd__\"];\r\n\t    case \"Sub\":\r\n\t        return obj.nb$inplace_subtract ? obj.nb$inplace_subtract : obj[\"__isub__\"];\r\n\t    case \"Mult\":\r\n\t        return obj.nb$inplace_multiply ? obj.nb$inplace_multiply : obj[\"__imul__\"];\r\n\t    case \"Div\":\r\n\t        return obj.nb$inplace_divide ? obj.nb$inplace_divide : obj[\"__idiv__\"];\r\n\t    case \"FloorDiv\":\r\n\t        return obj.nb$inplace_floor_divide ? obj.nb$inplace_floor_divide : obj[\"__ifloordiv__\"];\r\n\t    case \"Mod\":\r\n\t        return obj.nb$inplace_remainder;\r\n\t    case \"Pow\":\r\n\t        return obj.nb$inplace_power;\r\n\t    case \"LShift\":\r\n\t        return obj.nb$inplace_lshift ? obj.nb$inplace_lshift : obj[\"__ilshift__\"];\r\n\t    case \"RShift\":\r\n\t        return obj.nb$inplace_rshift ? obj.nb$inplace_rshift : obj[\"__irshift__\"];\r\n\t    case \"BitAnd\":\r\n\t        return obj.nb$inplace_and;\r\n\t    case \"BitOr\":\r\n\t        return obj.nb$inplace_or;\r\n\t    case \"BitXor\":\r\n\t        return obj.nb$inplace_xor ? obj.nb$inplace_xor : obj[\"__ixor__\"];\r\n\t    }\r\n\t};\r\n\tSk.abstr.uoNameToSlotFunc_ = function (obj, name) {\r\n\t    if (obj === null) {\r\n\t        return undefined;\r\n\t    }\r\n\t    switch (name) {\r\n\t    case \"USub\":\r\n\t        return obj.nb$negative ? obj.nb$negative : obj[\"__neg__\"];\r\n\t    case \"UAdd\":\r\n\t        return obj.nb$positive ? obj.nb$positive : obj[\"__pos__\"];\r\n\t    case \"Invert\":\r\n\t        return obj.nb$invert ? obj.nb$invert : obj[\"__invert__\"];\r\n\t    }\r\n\t};\r\n\r\n\tSk.abstr.binary_op_ = function (v, w, opname) {\r\n\t    var wop;\r\n\t    var ret;\r\n\t    var vop;\r\n\r\n\t    // All Python inheritance is now enforced with Javascript inheritance\r\n\t    // (see Sk.abstr.setUpInheritance). This checks if w's type is a strict\r\n\t    // subclass of v's type\r\n\t    var w_is_subclass = w.constructor.prototype instanceof v.constructor;\r\n\r\n\t    // From the Python 2.7 docs:\r\n\t    //\r\n\t    // \"If the right operand’s type is a subclass of the left operand’s type and\r\n\t    // that subclass provides the reflected method for the operation, this\r\n\t    // method will be called before the left operand’s non-reflected method.\r\n\t    // This behavior allows subclasses to override their ancestors’ operations.\"\r\n\t    //\r\n\t    // -- https://docs.python.org/2/reference/datamodel.html#index-92\r\n\r\n\t    if (w_is_subclass) {\r\n\t        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);\r\n\t        if (wop !== undefined) {\r\n\t            if (wop.call) {\r\n\t                ret = wop.call(w, v);\r\n\t            } else {\r\n\t                ret = Sk.misceval.callsim(wop, w, v);\r\n\t            }\r\n\t            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {\r\n\t                return ret;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    vop = Sk.abstr.boNameToSlotFuncLhs_(v, opname);\r\n\t    if (vop !== undefined) {\r\n\t        if (vop.call) {\r\n\t            ret = vop.call(v, w);\r\n\t        } else {\r\n\t            ret = Sk.misceval.callsim(vop, v, w);\r\n\t        }\r\n\t        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {\r\n\t            return ret;\r\n\t        }\r\n\t    }\r\n\t    // Don't retry RHS if failed above\r\n\t    if (!w_is_subclass) {\r\n\t        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);\r\n\t        if (wop !== undefined) {\r\n\t            if (wop.call) {\r\n\t                ret = wop.call(w, v);\r\n\t            } else {\r\n\t                ret = Sk.misceval.callsim(wop, w, v);\r\n\t            }\r\n\t            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {\r\n\t                return ret;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    Sk.abstr.binop_type_error(v, w, opname);\r\n\t};\r\n\r\n\tSk.abstr.binary_iop_ = function (v, w, opname) {\r\n\t    var wop;\r\n\t    var ret;\r\n\t    var vop = Sk.abstr.iboNameToSlotFunc_(v, opname);\r\n\t    if (vop !== undefined) {\r\n\t        if (vop.call) {\r\n\t            ret = vop.call(v, w);\r\n\t        } else {  // assume that vop is an __xxx__ type method\r\n\t            ret = Sk.misceval.callsim(vop, v, w); //  added to be like not-in-place... is this okay?\r\n\t        }\r\n\t        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {\r\n\t            return ret;\r\n\t        }\r\n\t    }\r\n\t    wop = Sk.abstr.iboNameToSlotFunc_(w, opname);\r\n\t    if (wop !== undefined) {\r\n\t        if (wop.call) {\r\n\t            ret = wop.call(w, v);\r\n\t        } else { // assume that wop is an __xxx__ type method\r\n\t            ret = Sk.misceval.callsim(wop, w, v); //  added to be like not-in-place... is this okay?\r\n\t        }\r\n\t        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {\r\n\t            return ret;\r\n\t        }\r\n\t    }\r\n\t    Sk.abstr.binop_type_error(v, w, opname);\r\n\t};\r\n\tSk.abstr.unary_op_ = function (v, opname) {\r\n\t    var ret;\r\n\t    var vop = Sk.abstr.uoNameToSlotFunc_(v, opname);\r\n\t    if (vop !== undefined) {\r\n\t        if (vop.call) {\r\n\t            ret = vop.call(v);\r\n\t        } else {  // assume that vop is an __xxx__ type method\r\n\t            ret = Sk.misceval.callsim(vop, v); //  added to be like not-in-place... is this okay?\r\n\t        }\r\n\t        if (ret !== undefined) {\r\n\t            return ret;\r\n\t        }\r\n\t    }\r\n\t    Sk.abstr.unop_type_error(v, opname);\r\n\t};\r\n\r\n\t//\r\n\t// handle upconverting a/b from number to long if op causes too big/small a\r\n\t// result, or if either of the ops are already longs\r\n\tSk.abstr.numOpAndPromote = function (a, b, opfn) {\r\n\t    var tmp;\r\n\t    var ans;\r\n\t    if (a === null || b === null) {\r\n\t        return undefined;\r\n\t    }\r\n\r\n\t    if (typeof a === \"number\" && typeof b === \"number\") {\r\n\t        ans = opfn(a, b);\r\n\t        // todo; handle float   Removed RNL (bugs in lng, and it should be a question of precision, not magnitude -- this was just wrong)\r\n\t        if ((ans > Sk.builtin.int_.threshold$ || ans < -Sk.builtin.int_.threshold$) && Math.floor(ans) === ans) {\r\n\t            return [Sk.builtin.lng.fromInt$(a), Sk.builtin.lng.fromInt$(b)];\r\n\t        } else {\r\n\t            return ans;\r\n\t        }\r\n\t    } else if (a === undefined || b === undefined) {\r\n\t        throw new Sk.builtin.NameError(\"Undefined variable in expression\");\r\n\t    }\r\n\r\n\t    if (a.constructor === Sk.builtin.lng) {\r\n\t        return [a, b];\r\n\t    } else if ((a.constructor === Sk.builtin.int_ ||\r\n\t                a.constructor === Sk.builtin.float_) &&\r\n\t                b.constructor === Sk.builtin.complex) {\r\n\t        // special case of upconverting nmber and complex\r\n\t        // can we use here the Sk.builtin.checkComplex() method?\r\n\t        tmp = new Sk.builtin.complex(a);\r\n\t        return [tmp, b];\r\n\t    } else if (a.constructor === Sk.builtin.int_ ||\r\n\t               a.constructor === Sk.builtin.float_) {\r\n\t        return [a, b];\r\n\t    } else if (typeof a === \"number\") {\r\n\t        tmp = Sk.builtin.assk$(a);\r\n\t        return [tmp, b];\r\n\t    } else {\r\n\t        return undefined;\r\n\t    }\r\n\t};\r\n\r\n\tSk.abstr.boNumPromote_ = {\r\n\t    \"Add\"     : function (a, b) {\r\n\t        return a + b;\r\n\t    },\r\n\t    \"Sub\"     : function (a, b) {\r\n\t        return a - b;\r\n\t    },\r\n\t    \"Mult\"    : function (a, b) {\r\n\t        return a * b;\r\n\t    },\r\n\t    \"Mod\"     : function (a, b) {\r\n\t        var m;\r\n\t        if (b === 0) {\r\n\t            throw new Sk.builtin.ZeroDivisionError(\"division or modulo by zero\");\r\n\t        }\r\n\t        m = a % b;\r\n\t        return ((m * b) < 0 ? (m + b) : m);\r\n\t    },\r\n\t    \"Div\"     : function (a, b) {\r\n\t        if (b === 0) {\r\n\t            throw new Sk.builtin.ZeroDivisionError(\"division or modulo by zero\");\r\n\t        } else {\r\n\t            return a / b;\r\n\t        }\r\n\t    },\r\n\t    \"FloorDiv\": function (a, b) {\r\n\t        if (b === 0) {\r\n\t            throw new Sk.builtin.ZeroDivisionError(\"division or modulo by zero\");\r\n\t        } else {\r\n\t            return Math.floor(a / b);\r\n\t        } // todo; wrong? neg?\r\n\t    },\r\n\t    \"Pow\"     : Math.pow,\r\n\t    \"BitAnd\"  : function (a, b) {\r\n\t        var m = a & b;\r\n\t        if (m < 0) {\r\n\t            m = m + 4294967296; // convert back to unsigned\r\n\t        }\r\n\t        return m;\r\n\t    },\r\n\t    \"BitOr\"   : function (a, b) {\r\n\t        var m = a | b;\r\n\t        if (m < 0) {\r\n\t            m = m + 4294967296; // convert back to unsigned\r\n\t        }\r\n\t        return m;\r\n\t    },\r\n\t    \"BitXor\"  : function (a, b) {\r\n\t        var m = a ^ b;\r\n\t        if (m < 0) {\r\n\t            m = m + 4294967296; // convert back to unsigned\r\n\t        }\r\n\t        return m;\r\n\t    },\r\n\t    \"LShift\"  : function (a, b) {\r\n\t        var m;\r\n\t        if (b < 0) {\r\n\t            throw new Sk.builtin.ValueError(\"negative shift count\");\r\n\t        }\r\n\t        m = a << b;\r\n\t        if (m > a) {\r\n\t            return m;\r\n\t        } else {\r\n\t            // Fail, this will get recomputed with longs\r\n\t            return a * Math.pow(2, b);\r\n\t        }\r\n\t    },\r\n\t    \"RShift\"  : function (a, b) {\r\n\t        var m;\r\n\t        if (b < 0) {\r\n\t            throw new Sk.builtin.ValueError(\"negative shift count\");\r\n\t        }\r\n\t        m = a >> b;\r\n\t        if ((a > 0) && (m < 0)) {\r\n\t            // fix incorrect sign extension\r\n\t            m = m & (Math.pow(2, 32 - b) - 1);\r\n\t        }\r\n\t        return m;\r\n\t    }\r\n\t};\r\n\r\n\tSk.abstr.numberBinOp = function (v, w, op) {\r\n\t    var tmp;\r\n\t    var numPromoteFunc = Sk.abstr.boNumPromote_[op];\r\n\t    if (numPromoteFunc !== undefined) {\r\n\t        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);\r\n\t        if (typeof tmp === \"number\") {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined) {\r\n\t            v = tmp[0];\r\n\t            w = tmp[1];\r\n\t        }\r\n\t    }\r\n\r\n\t    return Sk.abstr.binary_op_(v, w, op);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.numberBinOp\", Sk.abstr.numberBinOp);\r\n\r\n\tSk.abstr.numberInplaceBinOp = function (v, w, op) {\r\n\t    var tmp;\r\n\t    var numPromoteFunc = Sk.abstr.boNumPromote_[op];\r\n\t    if (numPromoteFunc !== undefined) {\r\n\t        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);\r\n\t        if (typeof tmp === \"number\") {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {\r\n\t            return tmp;\r\n\t        } else if (tmp !== undefined) {\r\n\t            v = tmp[0];\r\n\t            w = tmp[1];\r\n\t        }\r\n\t    }\r\n\r\n\t    return Sk.abstr.binary_iop_(v, w, op);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.numberInplaceBinOp\", Sk.abstr.numberInplaceBinOp);\r\n\r\n\tSk.abstr.numberUnaryOp = function (v, op) {\r\n\t    var value;\r\n\t    if (op === \"Not\") {\r\n\t        return Sk.misceval.isTrue(v) ? Sk.builtin.bool.false$ : Sk.builtin.bool.true$;\r\n\t    } else if (v instanceof Sk.builtin.bool) {\r\n\t        value = Sk.builtin.asnum$(v);\r\n\t        if (op === \"USub\") {\r\n\t            return new Sk.builtin.int_(-value);\r\n\t        }\r\n\t        if (op === \"UAdd\") {\r\n\t            return new Sk.builtin.int_(value);\r\n\t        }\r\n\t        if (op === \"Invert\") {\r\n\t            return new Sk.builtin.int_(~value);\r\n\t        }\r\n\t    } else {\r\n\t        if (op === \"USub\" && v.nb$negative) {\r\n\t            return v.nb$negative();\r\n\t        }\r\n\t        if (op === \"UAdd\" && v.nb$positive) {\r\n\t            return v.nb$positive();\r\n\t        }\r\n\t        if (op === \"Invert\" && v.nb$invert) {\r\n\t            return v.nb$invert();\r\n\t        }\r\n\t    }\r\n\r\n\t    return Sk.abstr.unary_op_(v, op);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.numberUnaryOp\", Sk.abstr.numberUnaryOp);\r\n\r\n\t//\r\n\t// Sequence\r\n\t//\r\n\r\n\tSk.abstr.fixSeqIndex_ = function (seq, i) {\r\n\t    i = Sk.builtin.asnum$(i);\r\n\t    if (i < 0 && seq.sq$length) {\r\n\t        i += seq.sq$length();\r\n\t    }\r\n\t    return i;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {*} seq\r\n\t * @param {*} ob\r\n\t * @param {boolean=} canSuspend\r\n\t */\r\n\tSk.abstr.sequenceContains = function (seq, ob, canSuspend) {\r\n\t    var seqtypename;\r\n\t    var special;\r\n\t    var r;\r\n\r\n\t    if (seq.sq$contains) {\r\n\t        return seq.sq$contains(ob);\r\n\t    }\r\n\r\n\t    /**\r\n\t     *  Look for special method and call it, we have to distinguish between built-ins and\r\n\t     *  python objects\r\n\t     */\r\n\t    special = Sk.abstr.lookupSpecial(seq, \"__contains__\");\r\n\t    if (special != null) {\r\n\t        // method on builtin, provide this arg\r\n\t        return Sk.misceval.isTrue(Sk.misceval.callsim(special, seq, ob));\r\n\t    }\r\n\r\n\t    if (!Sk.builtin.checkIterable(seq)) {\r\n\t        seqtypename = Sk.abstr.typeName(seq);\r\n\t        throw new Sk.builtin.TypeError(\"argument of type '\" + seqtypename + \"' is not iterable\");\r\n\t    }\r\n\r\n\t    r = Sk.misceval.iterFor(Sk.abstr.iter(seq), function(i) {\r\n\t        if (Sk.misceval.richCompareBool(i, ob, \"Eq\")) {\r\n\t            return new Sk.misceval.Break(true);\r\n\t        } else {\r\n\t            return false;\r\n\t        }\r\n\t    }, false);\r\n\r\n\t    return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\r\n\t};\r\n\r\n\tSk.abstr.sequenceConcat = function (seq1, seq2) {\r\n\t    var seq1typename;\r\n\t    if (seq1.sq$concat) {\r\n\t        return seq1.sq$concat(seq2);\r\n\t    }\r\n\t    seq1typename = Sk.abstr.typeName(seq1);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + seq1typename + \"' object can't be concatenated\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceGetIndexOf = function (seq, ob) {\r\n\t    var seqtypename;\r\n\t    var i, it;\r\n\t    var index;\r\n\t    if (seq.index) {\r\n\t        return Sk.misceval.callsim(seq.index, seq, ob);\r\n\t    }\r\n\t    if (Sk.builtin.checkIterable(seq)) {\r\n\t        index = 0;\r\n\t        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();\r\n\t             i !== undefined; i = it.tp$iternext()) {\r\n\t            if (Sk.misceval.richCompareBool(ob, i, \"Eq\")) {\r\n\t                return new Sk.builtin.int_(index);\r\n\t            }\r\n\t            index += 1;\r\n\t        }\r\n\t        throw new Sk.builtin.ValueError(\"sequence.index(x): x not in sequence\");\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"argument of type '\" + seqtypename + \"' is not iterable\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceGetCountOf = function (seq, ob) {\r\n\t    var seqtypename;\r\n\t    var i, it;\r\n\t    var count;\r\n\t    if (seq.count) {\r\n\t        return Sk.misceval.callsim(seq.count, seq, ob);\r\n\t    }\r\n\t    if (Sk.builtin.checkIterable(seq)) {\r\n\t        count = 0;\r\n\t        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();\r\n\t             i !== undefined; i = it.tp$iternext()) {\r\n\t            if (Sk.misceval.richCompareBool(ob, i, \"Eq\")) {\r\n\t                count += 1;\r\n\t            }\r\n\t        }\r\n\t        return new Sk.builtin.int_(count);\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"argument of type '\" + seqtypename + \"' is not iterable\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceGetItem = function (seq, i, canSuspend) {\r\n\t    var seqtypename;\r\n\t    if (seq.mp$subscript) {\r\n\t        return seq.mp$subscript(i);\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + seqtypename + \"' object is unsubscriptable\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceSetItem = function (seq, i, x, canSuspend) {\r\n\t    var seqtypename;\r\n\t    if (seq.mp$ass_subscript) {\r\n\t        return seq.mp$ass_subscript(i, x);\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + seqtypename + \"' object does not support item assignment\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceDelItem = function (seq, i) {\r\n\t    var seqtypename;\r\n\t    if (seq.sq$del_item) {\r\n\t        i = Sk.abstr.fixSeqIndex_(seq, i);\r\n\t        seq.sq$del_item(i);\r\n\t        return;\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + seqtypename + \"' object does not support item deletion\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceRepeat = function (f, seq, n) {\r\n\t    var ntypename;\r\n\t    var count;\r\n\t    n = Sk.builtin.asnum$(n);\r\n\t    count = Sk.misceval.asIndex(n);\r\n\t    if (count === undefined) {\r\n\t        ntypename = Sk.abstr.typeName(n);\r\n\t        throw new Sk.builtin.TypeError(\"can't multiply sequence by non-int of type '\" + ntypename + \"'\");\r\n\t    }\r\n\t    return f.call(seq, n);\r\n\t};\r\n\r\n\tSk.abstr.sequenceGetSlice = function (seq, i1, i2) {\r\n\t    var seqtypename;\r\n\t    if (seq.sq$slice) {\r\n\t        i1 = Sk.abstr.fixSeqIndex_(seq, i1);\r\n\t        i2 = Sk.abstr.fixSeqIndex_(seq, i2);\r\n\t        return seq.sq$slice(i1, i2);\r\n\t    } else if (seq.mp$subscript) {\r\n\t        return seq.mp$subscript(new Sk.builtin.slice(i1, i2));\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + seqtypename + \"' object is unsliceable\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceDelSlice = function (seq, i1, i2) {\r\n\t    var seqtypename;\r\n\t    if (seq.sq$del_slice) {\r\n\t        i1 = Sk.abstr.fixSeqIndex_(seq, i1);\r\n\t        i2 = Sk.abstr.fixSeqIndex_(seq, i2);\r\n\t        seq.sq$del_slice(i1, i2);\r\n\t        return;\r\n\t    }\r\n\r\n\t    seqtypename = Sk.abstr.typeName(seq);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + seqtypename + \"' doesn't support slice deletion\");\r\n\t};\r\n\r\n\tSk.abstr.sequenceSetSlice = function (seq, i1, i2, x) {\r\n\t    var seqtypename;\r\n\t    if (seq.sq$ass_slice) {\r\n\t        i1 = Sk.abstr.fixSeqIndex_(seq, i1);\r\n\t        i2 = Sk.abstr.fixSeqIndex_(seq, i2);\r\n\t        seq.sq$ass_slice(i1, i2, x);\r\n\t    } else if (seq.mp$ass_subscript) {\r\n\t        seq.mp$ass_subscript(new Sk.builtin.slice(i1, i2), x);\r\n\t    } else {\r\n\t        seqtypename = Sk.abstr.typeName(seq);\r\n\t        throw new Sk.builtin.TypeError(\"'\" + seqtypename + \"' object doesn't support slice assignment\");\r\n\t    }\r\n\t};\r\n\r\n\t// seq - Python object to unpack\r\n\t// n   - JavaScript number of items to unpack\r\n\tSk.abstr.sequenceUnpack = function (seq, n) {\r\n\t    var res = [];\r\n\t    var it, i;\r\n\r\n\t    if (!Sk.builtin.checkIterable(seq)) {\r\n\t        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(seq) + \"' object is not iterable\");\r\n\t    }\r\n\r\n\t    for (it = Sk.abstr.iter(seq), i = it.tp$iternext();\r\n\t         (i !== undefined) && (res.length < n);\r\n\t         i = it.tp$iternext()) {\r\n\t        res.push(i);\r\n\t    }\r\n\r\n\t    if (res.length < n) {\r\n\t        throw new Sk.builtin.ValueError(\"need more than \" + res.length + \" values to unpack\");\r\n\t    }\r\n\t    if (i !== undefined) {\r\n\t        throw new Sk.builtin.ValueError(\"too many values to unpack\");\r\n\t    }\r\n\r\n\t    // Return Javascript array of items\r\n\t    return res;\r\n\t};\r\n\r\n\t//\r\n\t// Object\r\n\t//\r\n\r\n\tSk.abstr.objectFormat = function (obj, format_spec) {\r\n\t    var meth; // PyObject\r\n\t    var result; // PyObject\r\n\r\n\t    // If no format_spec is provided, use an empty string\r\n\t    if(format_spec == null) {\r\n\t        format_spec = \"\";\r\n\t    }\r\n\r\n\t    // Find the (unbound!) __format__ method (a borrowed reference)\r\n\t    meth = Sk.abstr.lookupSpecial(obj, \"__format__\");\r\n\t    if (meth == null) {\r\n\t        throw new Sk.builtin.TypeError(\"Type \" + Sk.abstr.typeName(obj) + \"doesn't define __format__\");\r\n\t    }\r\n\r\n\t    // And call it\r\n\t    result = Sk.misceval.callsim(meth, obj, format_spec);\r\n\t    if (!Sk.builtin.checkString(result)) {\r\n\t        throw new Sk.builtin.TypeError(\"__format__ must return a str, not \" + Sk.abstr.typeName(result));\r\n\t    }\r\n\r\n\t    return result;\r\n\t};\r\n\r\n\tSk.abstr.objectAdd = function (a, b) {\r\n\t    var btypename;\r\n\t    var atypename;\r\n\t    if (a.nb$add) {\r\n\t        return a.nb$add(b);\r\n\t    }\r\n\r\n\t    atypename = Sk.abstr.typeName(a);\r\n\t    btypename = Sk.abstr.typeName(b);\r\n\t    throw new Sk.builtin.TypeError(\"unsupported operand type(s) for +: '\" + atypename + \"' and '\" + btypename + \"'\");\r\n\t};\r\n\r\n\t// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)\r\n\tSk.abstr.objectNegative = function (obj) {\r\n\t    var objtypename;\r\n\t    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int\r\n\r\n\t    if (obj instanceof Sk.builtin.bool) {\r\n\t        obj = new Sk.builtin.int_(obj_asnum);\r\n\t    }\r\n\r\n\t    if (obj.nb$negative) {\r\n\t        return obj.nb$negative();\r\n\t    }\r\n\r\n\t    objtypename = Sk.abstr.typeName(obj);\r\n\t    throw new Sk.builtin.TypeError(\"bad operand type for unary -: '\" + objtypename + \"'\");\r\n\t};\r\n\r\n\t// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)\r\n\tSk.abstr.objectPositive = function (obj) {\r\n\t    var objtypename = Sk.abstr.typeName(obj);\r\n\t    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int\r\n\r\n\t    if (obj instanceof Sk.builtin.bool) {\r\n\t        obj = new Sk.builtin.int_(obj_asnum);\r\n\t    }\r\n\r\n\t    if (obj.nb$negative) {\r\n\t        return obj.nb$positive();\r\n\t    }\r\n\r\n\t    throw new Sk.builtin.TypeError(\"bad operand type for unary +: '\" + objtypename + \"'\");\r\n\t};\r\n\r\n\tSk.abstr.objectDelItem = function (o, key) {\r\n\t    var otypename;\r\n\t    var keytypename;\r\n\t    var keyValue;\r\n\t    if (o !== null) {\r\n\t        if (o.mp$del_subscript) {\r\n\t            o.mp$del_subscript(key);\r\n\t            return;\r\n\t        }\r\n\t        if (o.sq$ass_item) {\r\n\t            keyValue = Sk.misceval.asIndex(key);\r\n\t            if (keyValue === undefined) {\r\n\t                keytypename = Sk.abstr.typeName(key);\r\n\t                throw new Sk.builtin.TypeError(\"sequence index must be integer, not '\" + keytypename + \"'\");\r\n\t            }\r\n\t            Sk.abstr.sequenceDelItem(o, keyValue);\r\n\t            return;\r\n\t        }\r\n\t        // if o is a slice do something else...\r\n\t    }\r\n\r\n\t    otypename = Sk.abstr.typeName(o);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + otypename + \"' object does not support item deletion\");\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.objectDelItem\", Sk.abstr.objectDelItem);\r\n\r\n\tSk.abstr.objectGetItem = function (o, key, canSuspend) {\r\n\t    var otypename;\r\n\t    if (o !== null) {\r\n\t        if (o.tp$getitem) {\r\n\t            return o.tp$getitem(key, canSuspend);\r\n\t        } else if (o.mp$subscript) {\r\n\t            return o.mp$subscript(key, canSuspend);\r\n\t        } else if (Sk.misceval.isIndex(key) && o.sq$item) {\r\n\t            return Sk.abstr.sequenceGetItem(o, Sk.misceval.asIndex(key), canSuspend);\r\n\t        }\r\n\t    }\r\n\r\n\t    otypename = Sk.abstr.typeName(o);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + otypename + \"' does not support indexing\");\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.objectGetItem\", Sk.abstr.objectGetItem);\r\n\r\n\tSk.abstr.objectSetItem = function (o, key, v, canSuspend) {\r\n\t    var otypename;\r\n\t    if (o !== null) {\r\n\t        if (o.tp$setitem) {\r\n\t            return o.tp$setitem(key, v, canSuspend);\r\n\t        } else if (o.mp$ass_subscript) {\r\n\t            return o.mp$ass_subscript(key, v, canSuspend);\r\n\t        } else if (Sk.misceval.isIndex(key) && o.sq$ass_item) {\r\n\t            return Sk.abstr.sequenceSetItem(o, Sk.misceval.asIndex(key), v, canSuspend);\r\n\t        }\r\n\t    }\r\n\r\n\t    otypename = Sk.abstr.typeName(o);\r\n\t    throw new Sk.builtin.TypeError(\"'\" + otypename + \"' does not support item assignment\");\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.objectSetItem\", Sk.abstr.objectSetItem);\r\n\r\n\r\n\tSk.abstr.gattr = function (obj, nameJS, canSuspend) {\r\n\t    var ret, f;\r\n\t    var objname = Sk.abstr.typeName(obj);\r\n\r\n\t    if (obj === null) {\r\n\t        throw new Sk.builtin.AttributeError(\"'\" + objname + \"' object has no attribute '\" + nameJS + \"'\");\r\n\t    }\r\n\r\n\r\n\t    if (obj.tp$getattr !== undefined) {\r\n\t        f = obj.tp$getattr(\"__getattribute__\");\r\n\t    }\r\n\r\n\t    if (f !== undefined) {\r\n\t        ret = Sk.misceval.callsimOrSuspend(f, new Sk.builtin.str(nameJS));\r\n\t    }\r\n\r\n\t    ret = Sk.misceval.chain(ret, function(ret) {\r\n\t        var f;\r\n\r\n\t        if (ret === undefined && obj.tp$getattr !== undefined) {\r\n\t            ret = obj.tp$getattr(nameJS);\r\n\r\n\t            if (ret === undefined) {\r\n\t                f = obj.tp$getattr(\"__getattr__\");\r\n\r\n\t                if (f !== undefined) {\r\n\t                    ret = Sk.misceval.callsimOrSuspend(f, new Sk.builtin.str(nameJS));\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return ret;\r\n\t    }, function(r) {\r\n\t        if (r === undefined) {\r\n\t            throw new Sk.builtin.AttributeError(\"'\" + objname + \"' object has no attribute '\" + nameJS + \"'\");\r\n\t        }\r\n\t        return r;\r\n\t    });\r\n\r\n\t    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.gattr\", Sk.abstr.gattr);\r\n\r\n\tSk.abstr.sattr = function (obj, nameJS, data, canSuspend) {\r\n\t    var objname = Sk.abstr.typeName(obj), r, setf;\r\n\r\n\t    if (obj === null) {\r\n\t        throw new Sk.builtin.AttributeError(\"'\" + objname + \"' object has no attribute '\" + nameJS + \"'\");\r\n\t    }\r\n\r\n\t    if (obj.tp$getattr !== undefined) {\r\n\t        setf = obj.tp$getattr(\"__setattr__\");\r\n\t        if (setf !== undefined) {\r\n\t            r = Sk.misceval.callsimOrSuspend(setf, new Sk.builtin.str(nameJS), data);\r\n\t            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\r\n\t        }\r\n\t    }\r\n\r\n\t    if (obj.tp$setattr !== undefined) {\r\n\t        obj.tp$setattr(nameJS, data);\r\n\t    } else {\r\n\t        throw new Sk.builtin.AttributeError(\"'\" + objname + \"' object has no attribute '\" + nameJS + \"'\");\r\n\t    }\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.sattr\", Sk.abstr.sattr);\r\n\r\n\r\n\tSk.abstr.iternext = function (it, canSuspend) {\r\n\t    return it.tp$iternext(canSuspend);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.iternext\", Sk.abstr.iternext);\r\n\r\n\r\n\t/**\r\n\t * Get the iterator for a Python object  This iterator could be one of the following.\r\n\t * This is the preferred mechanism for consistently getting the correct iterator.  You should\r\n\t * not just use tp$iter because that could lead to incorrect behavior of a user created class.\r\n\t *\r\n\t * - tp$iter\r\n\t * - A user defined `__iter__` method\r\n\t * - A user defined `__getitem__` method\r\n\t *\r\n\t * @param obj\r\n\t *\r\n\t * @throws {Sk.builtin.TypeError}\r\n\t * @returns {Object}\r\n\t */\r\n\r\n\tSk.abstr.iter = function(obj) {\r\n\t    var iter;\r\n\t    var getit;\r\n\t    var ret;\r\n\r\n\t    /**\r\n\t     * Builds an iterator around classes that have a __getitem__ method.\r\n\t     *\r\n\t     * @constructor\r\n\t     */\r\n\t    var seqIter = function (obj) {\r\n\t        this.idx = 0;\r\n\t        this.myobj = obj;\r\n\t        this.getitem = Sk.abstr.lookupSpecial(obj, \"__getitem__\");\r\n\t        this.tp$iternext = function () {\r\n\t            var ret;\r\n\t            try {\r\n\t                ret = Sk.misceval.callsim(this.getitem, this.myobj, Sk.ffi.remapToPy(this.idx));\r\n\t            } catch (e) {\r\n\t                if (e instanceof Sk.builtin.IndexError || e instanceof Sk.builtin.StopIteration) {\r\n\t                    return undefined;\r\n\t                } else {\r\n\t                    throw e;\r\n\t                }\r\n\t            }\r\n\t            this.idx++;\r\n\t            return ret;\r\n\t        };\r\n\t    };\r\n\r\n\t    if (obj.tp$getattr) {\r\n\t        iter =  Sk.abstr.lookupSpecial(obj,\"__iter__\");\r\n\t        if (iter) {\r\n\t            ret = Sk.misceval.callsim(iter, obj);\r\n\t            if (ret.tp$iternext) {\r\n\t                return ret;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    if (obj.tp$iter) {\r\n\t        try {  // catch and ignore not iterable error here.\r\n\t            ret = obj.tp$iter();\r\n\t            if (ret.tp$iternext) {\r\n\t                return ret;\r\n\t            }\r\n\t        } catch (e) { }\r\n\t    }\r\n\t    getit = Sk.abstr.lookupSpecial(obj, \"__getitem__\");\r\n\t    if (getit) {\r\n\t        // create internal iterobject if __getitem__\r\n\t        return new seqIter(obj);\r\n\t    }\r\n\t    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(obj) + \"' object is not iterable\");\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.iter\", Sk.abstr.iter);\r\n\r\n\t/**\r\n\t * Special method look up. First try getting the method via\r\n\t * internal dict and getattr. If getattr is not present (builtins)\r\n\t * try if method is defined on the object itself\r\n\t *\r\n\t * @returns {null|Object} Return null if not found or the function\r\n\t */\r\n\tSk.abstr.lookupSpecial = function(op, str) {\r\n\t    var res;\r\n\t    var obtp;\r\n\t    if (op.ob$type) {\r\n\t        obtp = op.ob$type;\r\n\t    } else {\r\n\t        return null;\r\n\t    }\r\n\r\n\t    return Sk.builtin.type.typeLookup(obtp, str);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.abstr.lookupSpecial\", Sk.abstr.lookupSpecial);\r\n\r\n\t/**\r\n\t * Mark a class as unhashable and prevent its `__hash__` function from being called.\r\n\t * @param  {function(...[?])} thisClass The class to mark as unhashable.\r\n\t * @return {undefined}\r\n\t */\r\n\tSk.abstr.markUnhashable = function (thisClass) {\r\n\t    var proto = thisClass.prototype;\r\n\t    proto.__hash__ = Sk.builtin.none.none$;\r\n\t    proto.tp$hash = Sk.builtin.none.none$;\r\n\t};\r\n\r\n\t/**\r\n\t * Set up inheritance between two Python classes. This allows only for single\r\n\t * inheritance -- multiple inheritance is not supported by Javascript.\r\n\t *\r\n\t * Javascript's inheritance is prototypal. This means that properties must\r\n\t * be defined on the superclass' prototype in order for subclasses to inherit\r\n\t * them.\r\n\t *\r\n\t * ```\r\n\t * Sk.superclass.myProperty                 # will NOT be inherited\r\n\t * Sk.superclass.prototype.myProperty       # will be inherited\r\n\t * ```\r\n\t *\r\n\t * In order for a class to be subclassable, it must (directly or indirectly)\r\n\t * inherit from Sk.builtin.object so that it will be properly initialized in\r\n\t * {@link Sk.doOneTimeInitialization} (in src/import.js). Further, all Python\r\n\t * builtins should inherit from Sk.builtin.object.\r\n\t *\r\n\t * @param {string} childName The Python name of the child (subclass).\r\n\t * @param {function(...[?])} child     The subclass.\r\n\t * @param {function(...[?])} parent    The superclass.\r\n\t * @return {undefined}\r\n\t */\r\n\tSk.abstr.setUpInheritance = function (childName, child, parent) {\r\n\t    goog.inherits(child, parent);\r\n\t    child.prototype.tp$base = parent;\r\n\t    child.prototype.tp$name = childName;\r\n\t    child.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(childName, child);\r\n\t};\r\n\r\n\t/**\r\n\t * Call the super constructor of the provided class, with the object `self` as\r\n\t * the `this` value of that constructor. Any arguments passed to this function\r\n\t * after `self` will be passed as-is to the constructor.\r\n\t *\r\n\t * @param  {function(...[?])} thisClass The subclass.\r\n\t * @param  {Object} self      The instance of the subclas.\r\n\t * @param  {...?} args Arguments to pass to the constructor.\r\n\t * @return {undefined}\r\n\t */\r\n\tSk.abstr.superConstructor = function (thisClass, self, args) {\r\n\t    var argumentsForConstructor = Array.prototype.slice.call(arguments, 2);\r\n\t    thisClass.prototype.tp$base.apply(self, argumentsForConstructor);\r\n\t};\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/object.js ---- */ \r\n\r\n\t/**\r\n\t * @constructor\r\n\t * Sk.builtin.object\r\n\t *\r\n\t * @description\r\n\t * Constructor for Python object. All Python classes (builtin and user-defined)\r\n\t * should inherit from this class.\r\n\t *\r\n\t * @return {Sk.builtin.object} Python object\r\n\t */\r\n\tSk.builtin.object = function () {\r\n\t    if (!(this instanceof Sk.builtin.object)) {\r\n\t        return new Sk.builtin.object();\r\n\t    }\r\n\r\n\t    return this;\r\n\t};\r\n\r\n\r\n\r\n\tvar _tryGetSubscript = function(dict, pyName) {\r\n\t    try {\r\n\t        return dict.mp$subscript(pyName);\r\n\t    } catch (x) {\r\n\t        return undefined;\r\n\t    }\r\n\t};\r\n\r\n\t/**\r\n\t * @return {undefined}\r\n\t */\r\n\tSk.builtin.object.prototype.GenericGetAttr = function (name) {\r\n\t    var res;\r\n\t    var f;\r\n\t    var descr;\r\n\t    var tp;\r\n\t    var dict;\r\n\t    var pyName = new Sk.builtin.str(name);\r\n\t    goog.asserts.assert(typeof name === \"string\");\r\n\r\n\t    tp = this.ob$type;\r\n\t    goog.asserts.assert(tp !== undefined, \"object has no ob$type!\");\r\n\r\n\t    dict = this[\"$d\"] || this.constructor[\"$d\"];\r\n\r\n\t    // todo; assert? force?\r\n\t    if (dict) {\r\n\t        if (dict.mp$lookup) {\r\n\t            res = dict.mp$lookup(pyName);\r\n\t        } else if (dict.mp$subscript) {\r\n\t            res = _tryGetSubscript(dict, pyName);\r\n\t        } else if (typeof dict === \"object\") {\r\n\t            // todo; definitely the wrong place for this. other custom tp$getattr won't work on object -- bnm -- implemented custom __getattr__ in abstract.js\r\n\t            res = dict[name];\r\n\t        }\r\n\t        if (res !== undefined) {\r\n\t            return res;\r\n\t        }\r\n\t    }\r\n\r\n\t    descr = Sk.builtin.type.typeLookup(tp, name);\r\n\r\n\t    // otherwise, look in the type for a descr\r\n\t    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {\r\n\t        f = descr.ob$type.tp$descr_get;\r\n\t        if (!(f) && descr[\"__get__\"]) {\r\n\t            f = descr[\"__get__\"];\r\n\t            return Sk.misceval.callsimOrSuspend(f, descr, this, Sk.builtin.none.none$);\r\n\t        }\r\n\t        // todo;\r\n\t        // if (f && descr.tp$descr_set) // is a data descriptor if it has a set\r\n\t        // return f.call(descr, this, this.ob$type);\r\n\r\n\t        if (f) {\r\n\t            // non-data descriptor\r\n\t            return f.call(descr, this, this.ob$type);\r\n\t        }\r\n\t    }\r\n\r\n\t    if (descr !== undefined) {\r\n\t        return descr;\r\n\t    }\r\n\r\n\t    return undefined;\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.object.prototype.GenericGetAttr\", Sk.builtin.object.prototype.GenericGetAttr);\r\n\r\n\tSk.builtin.object.prototype.GenericPythonGetAttr = function(self, name) {\r\n\t    return Sk.builtin.object.prototype.GenericGetAttr.call(self, name.v);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.object.prototype.GenericPythonGetAttr\", Sk.builtin.object.prototype.GenericPythonGetAttr);\r\n\r\n\tSk.builtin.object.prototype.GenericSetAttr = function (name, value) {\r\n\t    var objname = Sk.abstr.typeName(this);\r\n\t    var pyname;\r\n\t    var dict;\r\n\t    var tp = this.ob$type;\r\n\t    var descr;\r\n\t    var f;\r\n\r\n\t    goog.asserts.assert(typeof name === \"string\");\r\n\t    goog.asserts.assert(tp !== undefined, \"object has no ob$type!\");\r\n\r\n\t    dict = this[\"$d\"] || this.constructor[\"$d\"];\r\n\r\n\t    descr = Sk.builtin.type.typeLookup(tp, name);\r\n\r\n\t    // otherwise, look in the type for a descr\r\n\t    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {\r\n\t        //f = descr.ob$type.tp$descr_set;\r\n\t        if (descr[\"__set__\"]) {\r\n\t            f = descr[\"__set__\"];\r\n\t            Sk.misceval.callsimOrSuspend(f, descr, this, value);\r\n\t            return;\r\n\t        }\r\n\t        // todo;\r\n\t        //if (f && descr.tp$descr_set) // is a data descriptor if it has a set\r\n\t        //return f.call(descr, this, this.ob$type);\r\n\t    }\r\n\r\n\t    if (dict.mp$ass_subscript) {\r\n\t        pyname = new Sk.builtin.str(name);\r\n\r\n\t        if (this instanceof Sk.builtin.object && !(this.ob$type.sk$klass) &&\r\n\t            dict.mp$lookup(pyname) === undefined) {\r\n\t            // Cannot add new attributes to a builtin object\r\n\t            throw new Sk.builtin.AttributeError(\"'\" + objname + \"' object has no attribute '\" + name + \"'\");\r\n\t        }\r\n\t        dict.mp$ass_subscript(new Sk.builtin.str(name), value);\r\n\t    } else if (typeof dict === \"object\") {\r\n\t        dict[name] = value;\r\n\t    }\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.object.prototype.GenericSetAttr\", Sk.builtin.object.prototype.GenericSetAttr);\r\n\r\n\tSk.builtin.object.prototype.GenericPythonSetAttr = function(self, name, value) {\r\n\t    return Sk.builtin.object.prototype.GenericSetAttr.call(self, name.v, value);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.object.prototype.GenericPythonSetAttr\", Sk.builtin.object.prototype.GenericPythonSetAttr);\r\n\r\n\tSk.builtin.object.prototype.HashNotImplemented = function () {\r\n\t    throw new Sk.builtin.TypeError(\"unhashable type: '\" + Sk.abstr.typeName(this) + \"'\");\r\n\t};\r\n\r\n\tSk.builtin.object.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;\r\n\tSk.builtin.object.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;\r\n\r\n\t// Although actual attribute-getting happens in pure Javascript via tp$getattr, classes\r\n\t// overriding __getattr__ etc need to be able to call object.__getattr__ etc from Python\r\n\tSk.builtin.object.prototype[\"__getattr__\"] = Sk.builtin.object.prototype.GenericPythonGetAttr;\r\n\tSk.builtin.object.prototype[\"__setattr__\"] = Sk.builtin.object.prototype.GenericPythonSetAttr;\r\n\r\n\t/**\r\n\t * The name of this class.\r\n\t * @type {string}\r\n\t */\r\n\tSk.builtin.object.prototype.tp$name = \"object\";\r\n\r\n\t/**\r\n\t * The type object of this class.\r\n\t * @type {Sk.builtin.type}\r\n\t */\r\n\tSk.builtin.object.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(\"object\", Sk.builtin.object);\r\n\tSk.builtin.object.prototype.ob$type.sk$klass = undefined;   // Nonsense for closure compiler\r\n\r\n\t/** Default implementations of dunder methods found in all Python objects */\r\n\r\n\t/**\r\n\t * Python wrapper for `__repr__` method.\r\n\t * @name  __repr__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__repr__\"] = function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"__repr__\", arguments, 0, 0, false, true);\r\n\r\n\t    return self[\"$r\"]();\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__str__` method.\r\n\t * @name  __str__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__str__\"] = function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"__str__\", arguments, 0, 0, false, true);\r\n\r\n\t    return self[\"$r\"]();\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__hash__` method.\r\n\t * @name  __hash__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__hash__\"] = function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"__hash__\", arguments, 0, 0, false, true);\r\n\r\n\t    return self.tp$hash();\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__eq__` method.\r\n\t * @name  __eq__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__eq__\"] = function (self, other) {\r\n\t    Sk.builtin.pyCheckArgs(\"__eq__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.ob$eq(other);\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__ne__` method.\r\n\t * @name  __ne__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__ne__\"] = function (self, other) {\r\n\t    Sk.builtin.pyCheckArgs(\"__ne__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.ob$ne(other);\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__lt__` method.\r\n\t * @name  __lt__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__lt__\"] = function (self, other) {\r\n\t    Sk.builtin.pyCheckArgs(\"__lt__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.ob$lt(other);\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__le__` method.\r\n\t * @name  __le__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__le__\"] = function (self, other) {\r\n\t    Sk.builtin.pyCheckArgs(\"__le__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.ob$le(other);\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__gt__` method.\r\n\t * @name  __gt__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__gt__\"] = function (self, other) {\r\n\t    Sk.builtin.pyCheckArgs(\"__gt__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.ob$gt(other);\r\n\t};\r\n\r\n\t/**\r\n\t * Python wrapper for `__ge__` method.\r\n\t * @name  __ge__\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @instance\r\n\t */\r\n\tSk.builtin.object.prototype[\"__ge__\"] = function (self, other) {\r\n\t    Sk.builtin.pyCheckArgs(\"__ge__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.ob$ge(other);\r\n\t};\r\n\r\n\t/** Default implementations of Javascript functions used in dunder methods */\r\n\r\n\t/**\r\n\t * Return the string representation of this instance.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @name  $r\r\n\t * @memberOf Sk.builtin.object.prototype\r\n\t * @return {Sk.builtin.str} The Python string representation of this instance.\r\n\t */\r\n\tSk.builtin.object.prototype[\"$r\"] = function () {\r\n\t    return new Sk.builtin.str(\"<object>\");\r\n\t};\r\n\r\n\tSk.builtin.hashCount = 1;\r\n\tSk.builtin.idCount = 1;\r\n\r\n\t/**\r\n\t * Return the hash value of this instance.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @return {Sk.builtin.int_} The hash value\r\n\t */\r\n\tSk.builtin.object.prototype.tp$hash = function () {\r\n\t    if (!this.$savedHash_) {\r\n\t        this.$savedHash_ = new Sk.builtin.int_(Sk.builtin.hashCount++);\r\n\t    }\r\n\r\n\t    return this.$savedHash_;\r\n\t};\r\n\r\n\t/**\r\n\t * Perform equality check between this instance and a Python object (i.e. this == other).\r\n\t *\r\n\t * Implements `__eq__` dunder method.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @param  {Object} other The Python object to check for equality.\r\n\t * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if equal, false otherwise\r\n\t */\r\n\tSk.builtin.object.prototype.ob$eq = function (other) {\r\n\t    if (this === other) {\r\n\t        return Sk.builtin.bool.true$;\r\n\t    }\r\n\r\n\t    return Sk.builtin.NotImplemented.NotImplemented$;\r\n\t};\r\n\r\n\t/**\r\n\t * Perform non-equality check between this instance and a Python object (i.e. this != other).\r\n\t *\r\n\t * Implements `__ne__` dunder method.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @param  {Object} other The Python object to check for non-equality.\r\n\t * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if not equal, false otherwise\r\n\t */\r\n\tSk.builtin.object.prototype.ob$ne = function (other) {\r\n\t    if (this === other) {\r\n\t        return Sk.builtin.bool.false$;\r\n\t    }\r\n\r\n\t    return Sk.builtin.NotImplemented.NotImplemented$;\r\n\t};\r\n\r\n\t/**\r\n\t * Determine if this instance is less than a Python object (i.e. this < other).\r\n\t *\r\n\t * Implements `__lt__` dunder method.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @param  {Object} other The Python object to compare.\r\n\t * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this < other, false otherwise\r\n\t */\r\n\tSk.builtin.object.prototype.ob$lt = function (other) {\r\n\t    return Sk.builtin.NotImplemented.NotImplemented$;\r\n\t};\r\n\r\n\t/**\r\n\t * Determine if this instance is less than or equal to a Python object (i.e. this <= other).\r\n\t *\r\n\t * Implements `__le__` dunder method.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @param  {Object} other The Python object to compare.\r\n\t * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this <= other, false otherwise\r\n\t */\r\n\tSk.builtin.object.prototype.ob$le = function (other) {\r\n\t    return Sk.builtin.NotImplemented.NotImplemented$;\r\n\t};\r\n\r\n\t/**\r\n\t * Determine if this instance is greater than a Python object (i.e. this > other).\r\n\t *\r\n\t * Implements `__gt__` dunder method.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @param  {Object} other The Python object to compare.\r\n\t * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this > other, false otherwise\r\n\t */\r\n\tSk.builtin.object.prototype.ob$gt = function (other) {\r\n\t    return Sk.builtin.NotImplemented.NotImplemented$;\r\n\t};\r\n\r\n\t/**\r\n\t * Determine if this instance is greater than or equal to a Python object (i.e. this >= other).\r\n\t *\r\n\t * Implements `__ge__` dunder method.\r\n\t *\r\n\t * Javascript function, returns Python object.\r\n\t *\r\n\t * @param  {Object} other The Python object to compare.\r\n\t * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this >= other, false otherwise\r\n\t */\r\n\tSk.builtin.object.prototype.ob$ge = function (other) {\r\n\t    return Sk.builtin.NotImplemented.NotImplemented$;\r\n\t};\r\n\r\n\t// Wrap the following functions in Sk.builtin.func once that class is initialized\r\n\t/**\r\n\t * Array of all the Python functions which are methods of this class.\r\n\t * @type {Array}\r\n\t */\r\n\tSk.builtin.object.pythonFunctions = [\"__repr__\", \"__str__\", \"__hash__\",\r\n\t\"__eq__\", \"__ne__\", \"__lt__\", \"__le__\", \"__gt__\", \"__ge__\", \"__getattr__\", \"__setattr__\"];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * Sk.builtin.none\r\n\t *\r\n\t * @extends {Sk.builtin.object}\r\n\t */\r\n\tSk.builtin.none = function () {\r\n\t    this.v = null;\r\n\t};\r\n\tSk.abstr.setUpInheritance(\"NoneType\", Sk.builtin.none, Sk.builtin.object);\r\n\r\n\t/** @override */\r\n\tSk.builtin.none.prototype[\"$r\"] = function () { return new Sk.builtin.str(\"None\"); };\r\n\r\n\t/** @override */\r\n\tSk.builtin.none.prototype.tp$hash = function () {\r\n\t    return new Sk.builtin.int_(0);\r\n\t};\r\n\r\n\t/**\r\n\t * Python None constant.\r\n\t * @type {Sk.builtin.none}\r\n\t */\r\n\tSk.builtin.none.none$ = new Sk.builtin.none();\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * Sk.builtin.NotImplemented\r\n\t *\r\n\t * @extends {Sk.builtin.object}\r\n\t */\r\n\tSk.builtin.NotImplemented = function() { };\r\n\tSk.abstr.setUpInheritance(\"NotImplementedType\", Sk.builtin.NotImplemented, Sk.builtin.object);\r\n\r\n\t/** @override */\r\n\tSk.builtin.NotImplemented.prototype[\"$r\"] = function () { return new Sk.builtin.str(\"NotImplemented\"); };\r\n\r\n\t/**\r\n\t * Python NotImplemented constant.\r\n\t * @type {Sk.builtin.NotImplemented}\r\n\t */\r\n\tSk.builtin.NotImplemented.NotImplemented$ = new Sk.builtin.NotImplemented();\r\n\r\n\tgoog.exportSymbol(\"Sk.builtin.none\", Sk.builtin.none);\r\n\tgoog.exportSymbol(\"Sk.builtin.NotImplemented\", Sk.builtin.NotImplemented);\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/function.js ---- */ \r\n\r\n\t/**\r\n\t * @namespace Sk.builtin\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * Check arguments to Python functions to ensure the correct number of\r\n\t * arguments are passed.\r\n\t *\r\n\t * @param {string} name the name of the function\r\n\t * @param {Object} args the args passed to the function\r\n\t * @param {number} minargs the minimum number of allowable arguments\r\n\t * @param {number=} maxargs optional maximum number of allowable\r\n\t * arguments (default: Infinity)\r\n\t * @param {boolean=} kwargs optional true if kwargs, false otherwise\r\n\t * (default: false)\r\n\t * @param {boolean=} free optional true if free vars, false otherwise\r\n\t * (default: false)\r\n\t */\r\n\tSk.builtin.pyCheckArgs = function (name, args, minargs, maxargs, kwargs, free) {\r\n\t    var nargs = args.length;\r\n\t    var msg = \"\";\r\n\r\n\t    if (maxargs === undefined) {\r\n\t        maxargs = Infinity;\r\n\t    }\r\n\t    if (kwargs) {\r\n\t        nargs -= 1;\r\n\t    }\r\n\t    if (free) {\r\n\t        nargs -= 1;\r\n\t    }\r\n\t    if ((nargs < minargs) || (nargs > maxargs)) {\r\n\t        if (minargs === maxargs) {\r\n\t            msg = name + \"() takes exactly \" + minargs + \" arguments\";\r\n\t        } else if (nargs < minargs) {\r\n\t            msg = name + \"() takes at least \" + minargs + \" arguments\";\r\n\t        } else {\r\n\t            msg = name + \"() takes at most \" + maxargs + \" arguments\";\r\n\t        }\r\n\t        msg += \" (\" + nargs + \" given)\";\r\n\t        throw new Sk.builtin.TypeError(msg);\r\n\t    }\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.pyCheckArgs\", Sk.builtin.pyCheckArgs);\r\n\r\n\t/**\r\n\t * Check type of argument to Python functions.\r\n\t *\r\n\t * @param {string} name the name of the argument\r\n\t * @param {string} exptype string of the expected type name\r\n\t * @param {boolean} check truthy if type check passes, falsy otherwise\r\n\t */\r\n\tSk.builtin.pyCheckType = function (name, exptype, check) {\r\n\t    if (!check) {\r\n\t        throw new Sk.builtin.TypeError(name + \" must be a \" + exptype);\r\n\t    }\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.pyCheckType\", Sk.builtin.pyCheckType);\r\n\r\n\tSk.builtin.checkSequence = function (arg) {\r\n\t    return (arg !== null && arg.mp$subscript !== undefined);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkSequence\", Sk.builtin.checkSequence);\r\n\r\n\t/**\r\n\t * Use this to test whether or not a Python object is iterable.  You should **not** rely\r\n\t * on the presence of tp$iter on the object as a good test, as it could be a user defined\r\n\t * class with `__iter__` defined or ``__getitem__``  This tests for all of those cases\r\n\t *\r\n\t * @param arg {Object}   A Python object\r\n\t * @returns {boolean} true if the object is iterable\r\n\t */\r\n\tSk.builtin.checkIterable = function (arg) {\r\n\t    var ret = false;\r\n\t    if (arg !== null ) {\r\n\t        try {\r\n\t            ret = Sk.abstr.iter(arg);\r\n\t            if (ret) {\r\n\t                return true;\r\n\t            } else {\r\n\t                return false;\r\n\t            }\r\n\t        } catch (e) {\r\n\t            if (e instanceof Sk.builtin.TypeError) {\r\n\t                return false;\r\n\t            } else {\r\n\t                throw e;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return ret;\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkIterable\", Sk.builtin.checkIterable);\r\n\r\n\tSk.builtin.checkCallable = function (obj) {\r\n\t    // takes care of builtin functions and methods, builtins\r\n\t    if (typeof obj === \"function\") {\r\n\t        return true;\r\n\t    }\r\n\t    // takes care of python function, methods and lambdas\r\n\t    if (obj instanceof Sk.builtin.func) {\r\n\t        return true;\r\n\t    }\r\n\t    // takes care of instances of methods\r\n\t    if (obj instanceof Sk.builtin.method) {\r\n\t        return true;\r\n\t    }\r\n\t    // go up the prototype chain to see if the class has a __call__ method\r\n\t    if (Sk.abstr.lookupSpecial(obj, \"__call__\") !== undefined) {\r\n\t        return true;\r\n\t    } \r\n\t    return false;\r\n\t};\r\n\r\n\tSk.builtin.checkNumber = function (arg) {\r\n\t    return (arg !== null && (typeof arg === \"number\" ||\r\n\t        arg instanceof Sk.builtin.int_ ||\r\n\t        arg instanceof Sk.builtin.float_ ||\r\n\t        arg instanceof Sk.builtin.lng));\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkNumber\", Sk.builtin.checkNumber);\r\n\r\n\t/**\r\n\t * Checks for complex type, delegates to internal method\r\n\t * Most skulpt users would search here!\r\n\t */\r\n\tSk.builtin.checkComplex = function (arg) {\r\n\t    return Sk.builtin.complex._complex_check(arg);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkComplex\", Sk.builtin.checkComplex);\r\n\r\n\tSk.builtin.checkInt = function (arg) {\r\n\t    return (arg !== null) && ((typeof arg === \"number\" && arg === (arg | 0)) ||\r\n\t        arg instanceof Sk.builtin.int_ ||\r\n\t        arg instanceof Sk.builtin.lng);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkInt\", Sk.builtin.checkInt);\r\n\r\n\tSk.builtin.checkFloat = function (arg) {\r\n\t    return (arg !== null) && (arg instanceof Sk.builtin.float_);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkFloat\", Sk.builtin.checkFloat);\r\n\r\n\tSk.builtin.checkString = function (arg) {\r\n\t    return (arg !== null && arg.__class__ == Sk.builtin.str);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkString\", Sk.builtin.checkString);\r\n\r\n\tSk.builtin.checkClass = function (arg) {\r\n\t    return (arg !== null && arg.sk$type);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkClass\", Sk.builtin.checkClass);\r\n\r\n\tSk.builtin.checkBool = function (arg) {\r\n\t    return (arg instanceof Sk.builtin.bool);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkBool\", Sk.builtin.checkBool);\r\n\r\n\tSk.builtin.checkNone = function (arg) {\r\n\t    return (arg instanceof Sk.builtin.none);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkNone\", Sk.builtin.checkNone);\r\n\r\n\tSk.builtin.checkFunction = function (arg) {\r\n\t    return (arg !== null && arg.tp$call !== undefined);\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.checkFunction\", Sk.builtin.checkFunction);\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * Sk.builtin.func\r\n\t *\r\n\t * @description\r\n\t * This function converts a Javascript function into a Python object that is callable.  Or just\r\n\t * think of it as a Python function rather than a Javascript function now.  This is an important\r\n\t * distinction in skulpt because once you have Python function you cannot just call it.\r\n\t * You must now use Sk.misceval.callsim to call the Python function.\r\n\t *\r\n\t * @param {Function} code the javascript implementation of this function\r\n\t * @param {Object=} globals the globals where this function was defined.\r\n\t * Can be undefined (which will be stored as null) for builtins. (is\r\n\t * that ok?)\r\n\t * @param {Object=} closure dict of free variables\r\n\t * @param {Object=} closure2 another dict of free variables that will be\r\n\t * merged into 'closure'. there's 2 to simplify generated code (one is $free,\r\n\t * the other is $cell)\r\n\t *\r\n\t * closure is the cell variables from the parent scope that we need to close\r\n\t * over. closure2 is the free variables in the parent scope that we also might\r\n\t * need to access.\r\n\t *\r\n\t * NOTE: co_varnames and co_name are defined by compiled code only, so we have\r\n\t * to access them via dict-style lookup for closure.\r\n\t *\r\n\t */\r\n\tSk.builtin.func = function (code, globals, closure, closure2) {\r\n\t    var k;\r\n\t    this.func_code = code;\r\n\t    this.func_globals = globals || null;\r\n\t    if (closure2 !== undefined) {\r\n\t        // todo; confirm that modification here can't cause problems\r\n\t        for (k in closure2) {\r\n\t            closure[k] = closure2[k];\r\n\t        }\r\n\t    }\r\n\t    this.func_closure = closure;\r\n\t    return this;\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.func\", Sk.builtin.func);\r\n\r\n\r\n\tSk.builtin.func.prototype.tp$name = \"function\";\r\n\tSk.builtin.func.prototype.tp$descr_get = function (obj, objtype) {\r\n\t    goog.asserts.assert(obj !== undefined && objtype !== undefined);\r\n\t    if (obj == null) {\r\n\t        return this;\r\n\t    }\r\n\t    return new Sk.builtin.method(this, obj, objtype);\r\n\t};\r\n\tSk.builtin.func.prototype.tp$call = function (args, kw) {\r\n\t    var j;\r\n\t    var i;\r\n\t    var numvarnames;\r\n\t    var varnames;\r\n\t    var kwlen;\r\n\t    var kwargsarr;\r\n\t    var expectskw;\r\n\t    var name;\r\n\t    var numargs;\r\n\r\n\t    // note: functions expect 'this' to be globals to avoid having to\r\n\t    // slice/unshift onto the main args\r\n\t    if (this.func_closure) {\r\n\t        // todo; OK to modify?\r\n\t        if (this.func_code[\"$defaults\"] && this.func_code[\"co_varnames\"]) {\r\n\t            // Make sure all default arguments are in args before adding closure\r\n\t            numargs = args.length;\r\n\t            numvarnames = this.func_code[\"co_varnames\"].length;\r\n\t            for (i = numargs; i < numvarnames; i++) {\r\n\t                args.push(undefined);\r\n\t            }\r\n\t        }\r\n\t        args.push(this.func_closure);\r\n\t    }\r\n\r\n\t    expectskw = this.func_code[\"co_kwargs\"];\r\n\t    kwargsarr = [];\r\n\r\n\t    if (this.func_code[\"no_kw\"] && kw) {\r\n\t        name = (this.func_code && this.func_code[\"co_name\"] && this.func_code[\"co_name\"].v) || \"<native JS>\";\r\n\t        throw new Sk.builtin.TypeError(name + \"() takes no keyword arguments\");\r\n\t    }\r\n\r\n\t    if (kw) {\r\n\t        // bind the kw args\r\n\t        kwlen = kw.length;\r\n\t        varnames = this.func_code[\"co_varnames\"];\r\n\t        numvarnames = varnames && varnames.length;\r\n\t        for (i = 0; i < kwlen; i += 2) {\r\n\t            // todo; make this a dict mapping name to offset\r\n\t            for (j = 0; j < numvarnames; ++j) {\r\n\t                if (kw[i] === varnames[j]) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (varnames && j !== numvarnames) {\r\n\t                if (j in args) {\r\n\t                    name = (this.func_code && this.func_code[\"co_name\"] && this.func_code[\"co_name\"].v) || \"<native JS>\";\r\n\t                    throw new Sk.builtin.TypeError(name + \"() got multiple values for keyword argument '\" + kw[i] + \"'\");\r\n\t                }\r\n\t                args[j] = kw[i + 1];\r\n\t            } else if (expectskw) {\r\n\t                // build kwargs dict\r\n\t                kwargsarr.push(new Sk.builtin.str(kw[i]));\r\n\t                kwargsarr.push(kw[i + 1]);\r\n\t            } else {\r\n\t                name = (this.func_code && this.func_code[\"co_name\"] && this.func_code[\"co_name\"].v) || \"<native JS>\";\r\n\t                throw new Sk.builtin.TypeError(name + \"() got an unexpected keyword argument '\" + kw[i] + \"'\");\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    if (expectskw) {\r\n\t        args.unshift(kwargsarr);\r\n\t    }\r\n\r\n\t    //print(JSON.stringify(args, null, 2));\r\n\r\n\t    return this.func_code.apply(this.func_globals, args);\r\n\t};\r\n\r\n\tSk.builtin.func.prototype.tp$getattr = function (key) {\r\n\t    return this[key];\r\n\t};\r\n\tSk.builtin.func.prototype.tp$setattr = function (key, value) {\r\n\t    this[key] = value;\r\n\t};\r\n\r\n\t//todo; investigate why the other doesn't work\r\n\t//Sk.builtin.type.makeIntoTypeObj('function', Sk.builtin.func);\r\n\tSk.builtin.func.prototype.ob$type = Sk.builtin.type.makeTypeObj(\"function\", new Sk.builtin.func(null, null));\r\n\r\n\tSk.builtin.func.prototype[\"$r\"] = function () {\r\n\t    var name = (this.func_code && this.func_code[\"co_name\"] && this.func_code[\"co_name\"].v) || \"<native JS>\";\r\n\t    return new Sk.builtin.str(\"<function \" + name + \">\");\r\n\t};\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/seqtype.js ---- */ \r\n\r\n\t/**\r\n\t * @constructor\r\n\t * Sk.builtin.seqtype\r\n\t *\r\n\t * @description\r\n\t * Abstract class for Python sequence types.\r\n\t *\r\n\t * @extends {Sk.builtin.object}\r\n\t *\r\n\t * @return {undefined} Cannot instantiate a Sk.builtin.seqtype object\r\n\t */\r\n\tSk.builtin.seqtype = function () {\r\n\r\n\t    throw new Sk.builtin.ExternalError(\"Cannot instantiate abstract Sk.builtin.seqtype class\");\r\n\r\n\t};\r\n\r\n\tSk.abstr.setUpInheritance(\"SequenceType\", Sk.builtin.seqtype, Sk.builtin.object);\r\n\r\n\tSk.builtin.seqtype.sk$abstract = true;\r\n\r\n\t/**\r\n\t * Python wrapper of `__len__` method.\r\n\t *\r\n\t * @name  __len__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__len__\"] = new Sk.builtin.func(function (self) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__len__\", arguments, 0, 0, false, true);\r\n\r\n\t    return new Sk.builtin.int_(self.sq$length());    \r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Python wrapper of `__iter__` method.\r\n\t *\r\n\t * @name  __iter__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__iter__\"] = new Sk.builtin.func(function (self) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__iter__\", arguments, 0, 0, false, true);\r\n\r\n\t    return self.tp$iter();\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Python wrapper of `__contains__` method.\r\n\t *\r\n\t * @name  __contains__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__contains__\"] = new Sk.builtin.func(function (self, item) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__contains__\", arguments, 1, 1, false, true);\r\n\r\n\t    if (self.sq$contains(item)) {\r\n\t        return Sk.builtin.bool.true$;\r\n\t    } else {\r\n\t        return Sk.builtin.bool.false$;\r\n\t    }\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Python wrapper of `__getitem__` method.\r\n\t *\r\n\t * @name  __getitem__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__getitem__\"] = new Sk.builtin.func(function (self, key) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__getitem__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.mp$subscript(key);\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Python wrapper of `__add__` method.\r\n\t *\r\n\t * @name  __add__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__add__\"] = new Sk.builtin.func(function (self, other) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__add__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.sq$concat(other);\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Python wrapper of `__mul__` method.\r\n\t *\r\n\t * @name  __mul__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__mul__\"] = new Sk.builtin.func(function (self, n) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__mul__\", arguments, 1, 1, false, true);\r\n\r\n\t    if (!Sk.misceval.isIndex(n)) {\r\n\t        throw new Sk.builtin.TypeError(\"can't multiply sequence by non-int of type '\" + Sk.abstr.typeName(n) + \"'\");\r\n\t    }\r\n\r\n\t    return self.sq$repeat(n);\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Python wrapper of `__rmul__` method.\r\n\t *\r\n\t * @name  __rmul__\r\n\t * @instance\r\n\t * @memberOf Sk.builtin.seqtype.prototype\r\n\t */\r\n\tSk.builtin.seqtype.prototype[\"__rmul__\"] = new Sk.builtin.func(function (self, n) {\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"__rmul__\", arguments, 1, 1, false, true);\r\n\r\n\t    return self.sq$repeat(n);    \r\n\r\n\t});\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/str.js ---- */ \r\n\r\n\tSk.builtin.interned = {};\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * @param {*} x\r\n\t * @extends Sk.builtin.object\r\n\t */\r\n\tSk.builtin.str = function (x) {\r\n\t    var ret;\r\n\t    if (x === undefined) {\r\n\t        x = \"\";\r\n\t    }\r\n\t    if (x instanceof Sk.builtin.str) {\r\n\t        return x;\r\n\t    }\r\n\t    if (!(this instanceof Sk.builtin.str)) {\r\n\t        return new Sk.builtin.str(x);\r\n\t    }\r\n\r\n\r\n\t    // convert to js string\r\n\t    if (x === true) {\r\n\t        ret = \"True\";\r\n\t    } else if (x === false) {\r\n\t        ret = \"False\";\r\n\t    } else if ((x === null) || (x instanceof Sk.builtin.none)) {\r\n\t        ret = \"None\";\r\n\t    } else if (x instanceof Sk.builtin.bool) {\r\n\t        if (x.v) {\r\n\t            ret = \"True\";\r\n\t        } else {\r\n\t            ret = \"False\";\r\n\t        }\r\n\t    } else if (typeof x === \"number\") {\r\n\t        ret = x.toString();\r\n\t        if (ret === \"Infinity\") {\r\n\t            ret = \"inf\";\r\n\t        } else if (ret === \"-Infinity\") {\r\n\t            ret = \"-inf\";\r\n\t        }\r\n\t    } else if (typeof x === \"string\") {\r\n\t        ret = x;\r\n\t    } else if (x.tp$str !== undefined) {\r\n\t        ret = x.tp$str();\r\n\t        if (!(ret instanceof Sk.builtin.str)) {\r\n\t            throw new Sk.builtin.ValueError(\"__str__ didn't return a str\");\r\n\t        }\r\n\t        return ret;\r\n\t    } else {\r\n\t        return Sk.misceval.objectRepr(x);\r\n\t    }\r\n\r\n\t    // interning required for strings in py\r\n\t    if (Sk.builtin.interned[\"1\" + ret]) {\r\n\t        return Sk.builtin.interned[\"1\" + ret];\r\n\t    }\r\n\r\n\t    this.__class__ = Sk.builtin.str;\r\n\t    this.v = ret;\r\n\t    this[\"v\"] = this.v;\r\n\t    Sk.builtin.interned[\"1\" + ret] = this;\r\n\t    return this;\r\n\r\n\t};\r\n\tgoog.exportSymbol(\"Sk.builtin.str\", Sk.builtin.str);\r\n\r\n\tSk.abstr.setUpInheritance(\"str\", Sk.builtin.str, Sk.builtin.seqtype);\r\n\r\n\tSk.builtin.str.prototype.mp$subscript = function (index) {\r\n\t    var ret;\r\n\t    if (Sk.misceval.isIndex(index)) {\r\n\t        index = Sk.misceval.asIndex(index);\r\n\t        if (index < 0) {\r\n\t            index = this.v.length + index;\r\n\t        }\r\n\t        if (index < 0 || index >= this.v.length) {\r\n\t            throw new Sk.builtin.IndexError(\"string index out of range\");\r\n\t        }\r\n\t        return new Sk.builtin.str(this.v.charAt(index));\r\n\t    } else if (index instanceof Sk.builtin.slice) {\r\n\t        ret = \"\";\r\n\t        index.sssiter$(this, function (i, wrt) {\r\n\t            if (i >= 0 && i < wrt.v.length) {\r\n\t                ret += wrt.v.charAt(i);\r\n\t            }\r\n\t        });\r\n\t        return new Sk.builtin.str(ret);\r\n\t    } else {\r\n\t        throw new Sk.builtin.TypeError(\"string indices must be integers, not \" + Sk.abstr.typeName(index));\r\n\t    }\r\n\t};\r\n\r\n\tSk.builtin.str.prototype.sq$length = function () {\r\n\t    return this.v.length;\r\n\t};\r\n\tSk.builtin.str.prototype.sq$concat = function (other) {\r\n\t    var otypename;\r\n\t    if (!other || !Sk.builtin.checkString(other)) {\r\n\t        otypename = Sk.abstr.typeName(other);\r\n\t        throw new Sk.builtin.TypeError(\"cannot concatenate 'str' and '\" + otypename + \"' objects\");\r\n\t    }\r\n\t    return new Sk.builtin.str(this.v + other.v);\r\n\t};\r\n\tSk.builtin.str.prototype.nb$add = Sk.builtin.str.prototype.sq$concat;\r\n\tSk.builtin.str.prototype.nb$inplace_add = Sk.builtin.str.prototype.sq$concat;\r\n\tSk.builtin.str.prototype.sq$repeat = function (n) {\r\n\t    var i;\r\n\t    var ret;\r\n\r\n\t    if (!Sk.misceval.isIndex(n)) {\r\n\t        throw new Sk.builtin.TypeError(\"can't multiply sequence by non-int of type '\" + Sk.abstr.typeName(n) + \"'\");\r\n\t    }\r\n\r\n\t    n = Sk.misceval.asIndex(n);\r\n\t    ret = \"\";\r\n\t    for (i = 0; i < n; ++i) {\r\n\t        ret += this.v;\r\n\t    }\r\n\t    return new Sk.builtin.str(ret);\r\n\t};\r\n\tSk.builtin.str.prototype.nb$multiply = Sk.builtin.str.prototype.sq$repeat;\r\n\tSk.builtin.str.prototype.nb$inplace_multiply = Sk.builtin.str.prototype.sq$repeat;\r\n\tSk.builtin.str.prototype.sq$item = function () {\r\n\t    goog.asserts.fail();\r\n\t};\r\n\tSk.builtin.str.prototype.sq$slice = function (i1, i2) {\r\n\t    i1 = Sk.builtin.asnum$(i1);\r\n\t    i2 = Sk.builtin.asnum$(i2);\r\n\t    if (i1 < 0) {\r\n\t        i1 = 0;\r\n\t    }\r\n\t    return new Sk.builtin.str(this.v.substr(i1, i2 - i1));\r\n\t};\r\n\r\n\tSk.builtin.str.prototype.sq$contains = function (ob) {\r\n\t    if (!(ob instanceof Sk.builtin.str)) {\r\n\t        throw new Sk.builtin.TypeError(\"TypeError: 'In <string> requires string as left operand\");\r\n\t    }\r\n\t    return this.v.indexOf(ob.v) != -1;\r\n\t};\r\n\r\n\tSk.builtin.str.prototype.__iter__ = new Sk.builtin.func(function (self) {\r\n\t    return new Sk.builtin.str_iter_(self);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype.tp$iter = function () {\r\n\t    return new Sk.builtin.str_iter_(this);\r\n\t};\r\n\r\n\tSk.builtin.str.prototype.tp$richcompare = function (other, op) {\r\n\t    if (!(other instanceof Sk.builtin.str)) {\r\n\t        return undefined;\r\n\t    }\r\n\r\n\t    switch (op) {\r\n\t        case \"Lt\":\r\n\t            return this.v < other.v;\r\n\t        case \"LtE\":\r\n\t            return this.v <= other.v;\r\n\t        case \"Eq\":\r\n\t            return this.v === other.v;\r\n\t        case \"NotEq\":\r\n\t            return this.v !== other.v;\r\n\t        case \"Gt\":\r\n\t            return this.v > other.v;\r\n\t        case \"GtE\":\r\n\t            return this.v >= other.v;\r\n\t        default:\r\n\t            goog.asserts.fail();\r\n\t    }\r\n\t};\r\n\r\n\tSk.builtin.str.prototype[\"$r\"] = function () {\r\n\t    // single is preferred\r\n\t    var ashex;\r\n\t    var c;\r\n\t    var i;\r\n\t    var ret;\r\n\t    var len;\r\n\t    var quote = \"'\";\r\n\t    //jshint ignore:start\r\n\t    if (this.v.indexOf(\"'\") !== -1 && this.v.indexOf('\"') === -1) {\r\n\t        quote = '\"';\r\n\t    }\r\n\t    //jshint ignore:end\r\n\t    len = this.v.length;\r\n\t    ret = quote;\r\n\t    for (i = 0; i < len; ++i) {\r\n\t        c = this.v.charAt(i);\r\n\t        if (c === quote || c === \"\\\\\") {\r\n\t            ret += \"\\\\\" + c;\r\n\t        } else if (c === \"\\t\") {\r\n\t            ret += \"\\\\t\";\r\n\t        } else if (c === \"\\n\") {\r\n\t            ret += \"\\\\n\";\r\n\t        } else if (c === \"\\r\") {\r\n\t            ret += \"\\\\r\";\r\n\t        } else if (c < \" \" || c >= 0x7f) {\r\n\t            ashex = c.charCodeAt(0).toString(16);\r\n\t            if (ashex.length < 2) {\r\n\t                ashex = \"0\" + ashex;\r\n\t            }\r\n\t            ret += \"\\\\x\" + ashex;\r\n\t        } else {\r\n\t            ret += c;\r\n\t        }\r\n\t    }\r\n\t    ret += quote;\r\n\t    return new Sk.builtin.str(ret);\r\n\t};\r\n\r\n\r\n\tSk.builtin.str.re_escape_ = function (s) {\r\n\t    var c;\r\n\t    var i;\r\n\t    var ret = [];\r\n\t    var re = /^[A-Za-z0-9]+$/;\r\n\t    for (i = 0; i < s.length; ++i) {\r\n\t        c = s.charAt(i);\r\n\r\n\t        if (re.test(c)) {\r\n\t            ret.push(c);\r\n\t        } else {\r\n\t            if (c === \"\\\\000\") {\r\n\t                ret.push(\"\\\\000\");\r\n\t            } else {\r\n\t                ret.push(\"\\\\\" + c);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return ret.join(\"\");\r\n\t};\r\n\r\n\tSk.builtin.str.prototype[\"lower\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"lower\", arguments, 1, 1);\r\n\t    return new Sk.builtin.str(self.v.toLowerCase());\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"upper\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"upper\", arguments, 1, 1);\r\n\t    return new Sk.builtin.str(self.v.toUpperCase());\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"capitalize\"] = new Sk.builtin.func(function (self) {\r\n\t    var i;\r\n\t    var cap;\r\n\t    var orig;\r\n\t    Sk.builtin.pyCheckArgs(\"capitalize\", arguments, 1, 1);\r\n\t    orig = self.v;\r\n\r\n\t    if (orig.length === 0) {\r\n\t        return new Sk.builtin.str(\"\");\r\n\t    }\r\n\t    cap = orig.charAt(0).toUpperCase();\r\n\r\n\t    for (i = 1; i < orig.length; i++) {\r\n\t        cap += orig.charAt(i).toLowerCase();\r\n\t    }\r\n\t    return new Sk.builtin.str(cap);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"join\"] = new Sk.builtin.func(function (self, seq) {\r\n\t    var it, i;\r\n\t    var arrOfStrs;\r\n\t    Sk.builtin.pyCheckArgs(\"join\", arguments, 2, 2);\r\n\t    Sk.builtin.pyCheckType(\"seq\", \"iterable\", Sk.builtin.checkIterable(seq));\r\n\t    arrOfStrs = [];\r\n\t    for (it = seq.tp$iter(), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {\r\n\t        if (i.constructor !== Sk.builtin.str) {\r\n\t            throw new Sk.builtin.TypeError(\"TypeError: sequence item \" + arrOfStrs.length + \": expected string, \" + typeof i + \" found\");\r\n\t        }\r\n\t        arrOfStrs.push(i.v);\r\n\t    }\r\n\t    return new Sk.builtin.str(arrOfStrs.join(self.v));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"split\"] = new Sk.builtin.func(function (self, on, howmany) {\r\n\t    var splits;\r\n\t    var index;\r\n\t    var match;\r\n\t    var result;\r\n\t    var s;\r\n\t    var str;\r\n\t    var regex;\r\n\t    Sk.builtin.pyCheckArgs(\"split\", arguments, 1, 3);\r\n\t    if ((on === undefined) || (on instanceof Sk.builtin.none)) {\r\n\t        on = null;\r\n\t    }\r\n\t    if ((on !== null) && !Sk.builtin.checkString(on)) {\r\n\t        throw new Sk.builtin.TypeError(\"expected a string\");\r\n\t    }\r\n\t    if ((on !== null) && on.v === \"\") {\r\n\t        throw new Sk.builtin.ValueError(\"empty separator\");\r\n\t    }\r\n\t    if ((howmany !== undefined) && !Sk.builtin.checkInt(howmany)) {\r\n\t        throw new Sk.builtin.TypeError(\"an integer is required\");\r\n\t    }\r\n\r\n\t    howmany = Sk.builtin.asnum$(howmany);\r\n\t    regex = /[\\s]+/g;\r\n\t    str = self.v;\r\n\t    if (on === null) {\r\n\t        str = goog.string.trimLeft(str);\r\n\t    } else {\r\n\t        // Escape special characters in \"on\" so we can use a regexp\r\n\t        s = on.v.replace(/([.*+?=|\\\\\\/()\\[\\]\\{\\}^$])/g, \"\\\\$1\");\r\n\t        regex = new RegExp(s, \"g\");\r\n\t    }\r\n\r\n\t    // This is almost identical to re.split,\r\n\t    // except how the regexp is constructed\r\n\r\n\t    result = [];\r\n\t    index = 0;\r\n\t    splits = 0;\r\n\t    while ((match = regex.exec(str)) != null) {\r\n\t        if (match.index === regex.lastIndex) {\r\n\t            // empty match\r\n\t            break;\r\n\t        }\r\n\t        result.push(new Sk.builtin.str(str.substring(index, match.index)));\r\n\t        index = regex.lastIndex;\r\n\t        splits += 1;\r\n\t        if (howmany && (splits >= howmany)) {\r\n\t            break;\r\n\t        }\r\n\t    }\r\n\t    str = str.substring(index);\r\n\t    if (on !== null || (str.length > 0)) {\r\n\t        result.push(new Sk.builtin.str(str));\r\n\t    }\r\n\r\n\t    return new Sk.builtin.list(result);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"strip\"] = new Sk.builtin.func(function (self, chars) {\r\n\t    var regex;\r\n\t    var pattern;\r\n\t    Sk.builtin.pyCheckArgs(\"strip\", arguments, 1, 2);\r\n\t    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {\r\n\t        throw new Sk.builtin.TypeError(\"strip arg must be None or str\");\r\n\t    }\r\n\t    if (chars === undefined) {\r\n\t        pattern = /^\\s+|\\s+$/g;\r\n\t    } else {\r\n\t        regex = Sk.builtin.str.re_escape_(chars.v);\r\n\t        pattern = new RegExp(\"^[\" + regex + \"]+|[\" + regex + \"]+$\", \"g\");\r\n\t    }\r\n\t    return new Sk.builtin.str(self.v.replace(pattern, \"\"));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"lstrip\"] = new Sk.builtin.func(function (self, chars) {\r\n\t    var regex;\r\n\t    var pattern;\r\n\t    Sk.builtin.pyCheckArgs(\"lstrip\", arguments, 1, 2);\r\n\t    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {\r\n\t        throw new Sk.builtin.TypeError(\"lstrip arg must be None or str\");\r\n\t    }\r\n\t    if (chars === undefined) {\r\n\t        pattern = /^\\s+/g;\r\n\t    } else {\r\n\t        regex = Sk.builtin.str.re_escape_(chars.v);\r\n\t        pattern = new RegExp(\"^[\" + regex + \"]+\", \"g\");\r\n\t    }\r\n\t    return new Sk.builtin.str(self.v.replace(pattern, \"\"));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"rstrip\"] = new Sk.builtin.func(function (self, chars) {\r\n\t    var regex;\r\n\t    var pattern;\r\n\t    Sk.builtin.pyCheckArgs(\"rstrip\", arguments, 1, 2);\r\n\t    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {\r\n\t        throw new Sk.builtin.TypeError(\"rstrip arg must be None or str\");\r\n\t    }\r\n\t    if (chars === undefined) {\r\n\t        pattern = /\\s+$/g;\r\n\t    } else {\r\n\t        regex = Sk.builtin.str.re_escape_(chars.v);\r\n\t        pattern = new RegExp(\"[\" + regex + \"]+$\", \"g\");\r\n\t    }\r\n\t    return new Sk.builtin.str(self.v.replace(pattern, \"\"));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"partition\"] = new Sk.builtin.func(function (self, sep) {\r\n\t    var pos;\r\n\t    var sepStr;\r\n\t    Sk.builtin.pyCheckArgs(\"partition\", arguments, 2, 2);\r\n\t    Sk.builtin.pyCheckType(\"sep\", \"string\", Sk.builtin.checkString(sep));\r\n\t    sepStr = new Sk.builtin.str(sep);\r\n\t    pos = self.v.indexOf(sepStr.v);\r\n\t    if (pos < 0) {\r\n\t        return new Sk.builtin.tuple([self, Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr]);\r\n\t    }\r\n\r\n\t    return new Sk.builtin.tuple([\r\n\t        new Sk.builtin.str(self.v.substring(0, pos)),\r\n\t        sepStr,\r\n\t        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"rpartition\"] = new Sk.builtin.func(function (self, sep) {\r\n\t    var pos;\r\n\t    var sepStr;\r\n\t    Sk.builtin.pyCheckArgs(\"rpartition\", arguments, 2, 2);\r\n\t    Sk.builtin.pyCheckType(\"sep\", \"string\", Sk.builtin.checkString(sep));\r\n\t    sepStr = new Sk.builtin.str(sep);\r\n\t    pos = self.v.lastIndexOf(sepStr.v);\r\n\t    if (pos < 0) {\r\n\t        return new Sk.builtin.tuple([Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr, self]);\r\n\t    }\r\n\r\n\t    return new Sk.builtin.tuple([\r\n\t        new Sk.builtin.str(self.v.substring(0, pos)),\r\n\t        sepStr,\r\n\t        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"count\"] = new Sk.builtin.func(function (self, pat, start, end) {\r\n\t    var normaltext;\r\n\t    var ctl;\r\n\t    var slice;\r\n\t    var m;\r\n\t    Sk.builtin.pyCheckArgs(\"count\", arguments, 2, 4);\r\n\t    if (!Sk.builtin.checkString(pat)) {\r\n\t        throw new Sk.builtin.TypeError(\"expected a character buffer object\");\r\n\t    }\r\n\t    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {\r\n\t        throw new Sk.builtin.TypeError(\"slice indices must be integers or None or have an __index__ method\");\r\n\t    }\r\n\t    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {\r\n\t        throw new Sk.builtin.TypeError(\"slice indices must be integers or None or have an __index__ method\");\r\n\t    }\r\n\r\n\t    if (start === undefined) {\r\n\t        start = 0;\r\n\t    } else {\r\n\t        start = Sk.builtin.asnum$(start);\r\n\t        start = start >= 0 ? start : self.v.length + start;\r\n\t    }\r\n\r\n\t    if (end === undefined) {\r\n\t        end = self.v.length;\r\n\t    } else {\r\n\t        end = Sk.builtin.asnum$(end);\r\n\t        end = end >= 0 ? end : self.v.length + end;\r\n\t    }\r\n\r\n\t    normaltext = pat.v.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n\t    m = new RegExp(normaltext, \"g\");\r\n\t    slice = self.v.slice(start, end);\r\n\t    ctl = slice.match(m);\r\n\t    if (!ctl) {\r\n\t        return  new Sk.builtin.int_(0);\r\n\t    } else {\r\n\t        return new Sk.builtin.int_(ctl.length);\r\n\t    }\r\n\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"ljust\"] = new Sk.builtin.func(function (self, len, fillchar) {\r\n\t    var newstr;\r\n\t    Sk.builtin.pyCheckArgs(\"ljust\", arguments, 2, 3);\r\n\t    if (!Sk.builtin.checkInt(len)) {\r\n\t        throw new Sk.builtin.TypeError(\"integer argument exepcted, got \" + Sk.abstr.typeName(len));\r\n\t    }\r\n\t    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {\r\n\t        throw new Sk.builtin.TypeError(\"must be char, not \" + Sk.abstr.typeName(fillchar));\r\n\t    }\r\n\t    if (fillchar === undefined) {\r\n\t        fillchar = \" \";\r\n\t    } else {\r\n\t        fillchar = fillchar.v;\r\n\t    }\r\n\t    len = Sk.builtin.asnum$(len);\r\n\t    if (self.v.length >= len) {\r\n\t        return self;\r\n\t    } else {\r\n\t        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);\r\n\t        return new Sk.builtin.str(self.v + newstr);\r\n\t    }\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"rjust\"] = new Sk.builtin.func(function (self, len, fillchar) {\r\n\t    var newstr;\r\n\t    Sk.builtin.pyCheckArgs(\"rjust\", arguments, 2, 3);\r\n\t    if (!Sk.builtin.checkInt(len)) {\r\n\t        throw new Sk.builtin.TypeError(\"integer argument exepcted, got \" + Sk.abstr.typeName(len));\r\n\t    }\r\n\t    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {\r\n\t        throw new Sk.builtin.TypeError(\"must be char, not \" + Sk.abstr.typeName(fillchar));\r\n\t    }\r\n\t    if (fillchar === undefined) {\r\n\t        fillchar = \" \";\r\n\t    } else {\r\n\t        fillchar = fillchar.v;\r\n\t    }\r\n\t    len = Sk.builtin.asnum$(len);\r\n\t    if (self.v.length >= len) {\r\n\t        return self;\r\n\t    } else {\r\n\t        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);\r\n\t        return new Sk.builtin.str(newstr + self.v);\r\n\t    }\r\n\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"center\"] = new Sk.builtin.func(function (self, len, fillchar) {\r\n\t    var newstr;\r\n\t    var newstr1;\r\n\t    Sk.builtin.pyCheckArgs(\"center\", arguments, 2, 3);\r\n\t    if (!Sk.builtin.checkInt(len)) {\r\n\t        throw new Sk.builtin.TypeError(\"integer argument exepcted, got \" + Sk.abstr.typeName(len));\r\n\t    }\r\n\t    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {\r\n\t        throw new Sk.builtin.TypeError(\"must be char, not \" + Sk.abstr.typeName(fillchar));\r\n\t    }\r\n\t    if (fillchar === undefined) {\r\n\t        fillchar = \" \";\r\n\t    } else {\r\n\t        fillchar = fillchar.v;\r\n\t    }\r\n\t    len = Sk.builtin.asnum$(len);\r\n\t    if (self.v.length >= len) {\r\n\t        return self;\r\n\t    } else {\r\n\t        newstr1 = Array.prototype.join.call({length: Math.floor((len - self.v.length) / 2) + 1}, fillchar);\r\n\t        newstr = newstr1 + self.v + newstr1;\r\n\t        if (newstr.length < len) {\r\n\t            newstr = newstr + fillchar;\r\n\t        }\r\n\t        return new Sk.builtin.str(newstr);\r\n\t    }\r\n\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"find\"] = new Sk.builtin.func(function (self, tgt, start, end) {\r\n\t    var idx;\r\n\t    Sk.builtin.pyCheckArgs(\"find\", arguments, 2, 4);\r\n\t    if (!Sk.builtin.checkString(tgt)) {\r\n\t        throw new Sk.builtin.TypeError(\"expected a character buffer object\");\r\n\t    }\r\n\t    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {\r\n\t        throw new Sk.builtin.TypeError(\"slice indices must be integers or None or have an __index__ method\");\r\n\t    }\r\n\t    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {\r\n\t        throw new Sk.builtin.TypeError(\"slice indices must be integers or None or have an __index__ method\");\r\n\t    }\r\n\r\n\t    if (start === undefined) {\r\n\t        start = 0;\r\n\t    } else {\r\n\t        start = Sk.builtin.asnum$(start);\r\n\t        start = start >= 0 ? start : self.v.length + start;\r\n\t    }\r\n\r\n\t    if (end === undefined) {\r\n\t        end = self.v.length;\r\n\t    } else {\r\n\t        end = Sk.builtin.asnum$(end);\r\n\t        end = end >= 0 ? end : self.v.length + end;\r\n\t    }\r\n\r\n\t    idx = self.v.indexOf(tgt.v, start);\r\n\t    idx = ((idx >= start) && (idx < end)) ? idx : -1;\r\n\r\n\t    return new Sk.builtin.int_(idx);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"index\"] = new Sk.builtin.func(function (self, tgt, start, end) {\r\n\t    var idx;\r\n\t    Sk.builtin.pyCheckArgs(\"index\", arguments, 2, 4);\r\n\t    idx = Sk.misceval.callsim(self[\"find\"], self, tgt, start, end);\r\n\t    if (Sk.builtin.asnum$(idx) === -1) {\r\n\t        throw new Sk.builtin.ValueError(\"substring not found\");\r\n\t    }\r\n\t    return idx;\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"rfind\"] = new Sk.builtin.func(function (self, tgt, start, end) {\r\n\t    var idx;\r\n\t    Sk.builtin.pyCheckArgs(\"rfind\", arguments, 2, 4);\r\n\t    if (!Sk.builtin.checkString(tgt)) {\r\n\t        throw new Sk.builtin.TypeError(\"expected a character buffer object\");\r\n\t    }\r\n\t    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {\r\n\t        throw new Sk.builtin.TypeError(\"slice indices must be integers or None or have an __index__ method\");\r\n\t    }\r\n\t    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {\r\n\t        throw new Sk.builtin.TypeError(\"slice indices must be integers or None or have an __index__ method\");\r\n\t    }\r\n\r\n\t    if (start === undefined) {\r\n\t        start = 0;\r\n\t    } else {\r\n\t        start = Sk.builtin.asnum$(start);\r\n\t        start = start >= 0 ? start : self.v.length + start;\r\n\t    }\r\n\r\n\t    if (end === undefined) {\r\n\t        end = self.v.length;\r\n\t    } else {\r\n\t        end = Sk.builtin.asnum$(end);\r\n\t        end = end >= 0 ? end : self.v.length + end;\r\n\t    }\r\n\r\n\t    idx = self.v.lastIndexOf(tgt.v, end);\r\n\t    idx = (idx !== end) ? idx : self.v.lastIndexOf(tgt.v, end - 1);\r\n\t    idx = ((idx >= start) && (idx < end)) ? idx : -1;\r\n\r\n\t    return new Sk.builtin.int_(idx);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"rindex\"] = new Sk.builtin.func(function (self, tgt, start, end) {\r\n\t    var idx;\r\n\t    Sk.builtin.pyCheckArgs(\"rindex\", arguments, 2, 4);\r\n\t    idx = Sk.misceval.callsim(self[\"rfind\"], self, tgt, start, end);\r\n\t    if (Sk.builtin.asnum$(idx) === -1) {\r\n\t        throw new Sk.builtin.ValueError(\"substring not found\");\r\n\t    }\r\n\t    return idx;\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"startswith\"] = new Sk.builtin.func(function (self, tgt) {\r\n\t    Sk.builtin.pyCheckArgs(\"startswith\", arguments, 2, 2);\r\n\t    Sk.builtin.pyCheckType(\"tgt\", \"string\", Sk.builtin.checkString(tgt));\r\n\t    return new Sk.builtin.bool( self.v.indexOf(tgt.v) === 0);\r\n\t});\r\n\r\n\t// http://stackoverflow.com/questions/280634/endswith-in-javascript\r\n\tSk.builtin.str.prototype[\"endswith\"] = new Sk.builtin.func(function (self, tgt) {\r\n\t    Sk.builtin.pyCheckArgs(\"endswith\", arguments, 2, 2);\r\n\t    Sk.builtin.pyCheckType(\"tgt\", \"string\", Sk.builtin.checkString(tgt));\r\n\t    return new Sk.builtin.bool( self.v.indexOf(tgt.v, self.v.length - tgt.v.length) !== -1);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"replace\"] = new Sk.builtin.func(function (self, oldS, newS, count) {\r\n\t    var c;\r\n\t    var patt;\r\n\t    Sk.builtin.pyCheckArgs(\"replace\", arguments, 3, 4);\r\n\t    Sk.builtin.pyCheckType(\"oldS\", \"string\", Sk.builtin.checkString(oldS));\r\n\t    Sk.builtin.pyCheckType(\"newS\", \"string\", Sk.builtin.checkString(newS));\r\n\t    if ((count !== undefined) && !Sk.builtin.checkInt(count)) {\r\n\t        throw new Sk.builtin.TypeError(\"integer argument expected, got \" +\r\n\t            Sk.abstr.typeName(count));\r\n\t    }\r\n\t    count = Sk.builtin.asnum$(count);\r\n\t    patt = new RegExp(Sk.builtin.str.re_escape_(oldS.v), \"g\");\r\n\r\n\t    if ((count === undefined) || (count < 0)) {\r\n\t        return new Sk.builtin.str(self.v.replace(patt, newS.v));\r\n\t    }\r\n\r\n\t    c = 0;\r\n\r\n\t    function replacer (match) {\r\n\t        c++;\r\n\t        if (c <= count) {\r\n\t            return newS.v;\r\n\t        }\r\n\t        return match;\r\n\t    }\r\n\r\n\t    return new Sk.builtin.str(self.v.replace(patt, replacer));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"zfill\"] = new Sk.builtin.func(function (self, len) {\r\n\t    var str = self.v;\r\n\t    var ret;\r\n\t    var zeroes;\r\n\t    var offset;\r\n\t    var pad = \"\";\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"zfill\", arguments, 2, 2);\r\n\t    if (! Sk.builtin.checkInt(len)) {\r\n\t        throw new Sk.builtin.TypeError(\"integer argument exepected, got \" + Sk.abstr.typeName(len));\r\n\t    }\r\n\r\n\t    // figure out how many zeroes are needed to make the proper length\r\n\t    zeroes = len.v - str.length;\r\n\t    // offset by 1 if there is a +/- at the beginning of the string\r\n\t    offset = (str[0] === \"+\" || str[0] === \"-\") ? 1 : 0;\r\n\t    for(var i = 0; i < zeroes; i++){\r\n\t        pad += \"0\";\r\n\t    }\r\n\t    // combine the string and the zeroes\r\n\t    ret = str.substr(0, offset) + pad + str.substr(offset);\r\n\t    return new Sk.builtin.str(ret);\r\n\r\n\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"isdigit\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"isdigit\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( /^\\d+$/.test(self.v));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"isspace\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"isspace\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( /^\\s+$/.test(self.v));\r\n\t});\r\n\r\n\r\n\tSk.builtin.str.prototype[\"expandtabs\"] = new Sk.builtin.func(function (self, tabsize) {\r\n\t    // var input = self.v;\r\n\t    // var expanded = \"\";\r\n\t    // var split;\r\n\t    // var spacestr = \"\";\r\n\t    // var spacerem;\r\n\r\n\r\n\t    var spaces;\r\n\t    var expanded;\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"expandtabs\", arguments, 1, 2);\r\n\r\n\r\n\t    if ((tabsize !== undefined) && ! Sk.builtin.checkInt(tabsize)) {\r\n\t        throw new Sk.builtin.TypeError(\"integer argument exepected, got \" + Sk.abstr.typeName(tabsize));\r\n\t    }\r\n\t    if (tabsize === undefined) {\r\n\t        tabsize = 8;\r\n\t    } else {\r\n\t        tabsize = Sk.builtin.asnum$(tabsize);\r\n\t    }\r\n\r\n\t    spaces = (new Array(tabsize + 1)).join(\" \");\r\n\t    expanded = self.v.replace(/([^\\r\\n\\t]*)\\t/g, function(a, b) {\r\n\t        return b + spaces.slice(b.length % tabsize);\r\n\t    });\r\n\t    return new Sk.builtin.str(expanded);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"swapcase\"] = new Sk.builtin.func(function (self) {\r\n\t    var ret;\r\n\t    Sk.builtin.pyCheckArgs(\"swapcase\", arguments, 1, 1);\r\n\r\n\r\n\t    ret = self.v.replace(/[a-z]/gi, function(c) {\r\n\t        var lc = c.toLowerCase();\r\n\t        return lc === c ? c.toUpperCase() : lc;\r\n\t    });\r\n\r\n\t    return new Sk.builtin.str(ret);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"splitlines\"] = new Sk.builtin.func(function (self, keepends) {\r\n\t    var data = self.v;\r\n\t    var i = 0;\r\n\t    var j = i;\r\n\t    var selflen = self.v.length;\r\n\t    var strs_w = [];\r\n\t    var ch;\r\n\t    var eol;\r\n\t    var sol = 0;\r\n\t    var slice;\r\n\t    Sk.builtin.pyCheckArgs(\"splitlines\", arguments, 1, 2);\r\n\t    if ((keepends !== undefined) && ! Sk.builtin.checkBool(keepends)) {\r\n\t        throw new Sk.builtin.TypeError(\"boolean argument expected, got \" + Sk.abstr.typeName(keepends));\r\n\t    }\r\n\t    if (keepends === undefined) {\r\n\t        keepends = false;\r\n\t    } else {\r\n\t        keepends = keepends.v;\r\n\t    }\r\n\r\n\r\n\t    for (i = 0; i < selflen; i ++) {\r\n\t        ch = data.charAt(i);\r\n\t        if (data.charAt(i + 1) === \"\\n\" && ch === \"\\r\") {\r\n\t            eol = i + 2;\r\n\t            slice = data.slice(sol, eol);\r\n\t            if (! keepends) {\r\n\t                slice = slice.replace(/(\\r|\\n)/g, \"\");\r\n\t            }\r\n\t            strs_w.push(new Sk.builtin.str(slice));\r\n\t            sol = eol;\r\n\t        } else if ((ch === \"\\n\" && data.charAt(i - 1) !== \"\\r\") || ch === \"\\r\") {\r\n\t            eol = i + 1;\r\n\t            slice = data.slice(sol, eol);\r\n\t            if (! keepends) {\r\n\t                slice = slice.replace(/(\\r|\\n)/g, \"\");\r\n\t            }\r\n\t            strs_w.push(new Sk.builtin.str(slice));\r\n\t            sol = eol;\r\n\t        }\r\n\r\n\t    }\r\n\t    if (sol < selflen) {\r\n\t        eol = selflen;\r\n\t        slice = data.slice(sol, eol);\r\n\t        if (! keepends) {\r\n\t            slice = slice.replace(/(\\r|\\n)/g, \"\");\r\n\t        }\r\n\t        strs_w.push(new Sk.builtin.str(slice));\r\n\t    }\r\n\t    return new Sk.builtin.list(strs_w);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"title\"] = new Sk.builtin.func(function (self) {\r\n\t    var ret;\r\n\r\n\t    Sk.builtin.pyCheckArgs(\"title\", arguments, 1, 1);\r\n\r\n\t    ret = self.v.replace(/[a-z][a-z]*/gi, function(str) {\r\n\t        return str[0].toUpperCase() + str.substr(1).toLowerCase();\r\n\t    });\r\n\r\n\t    return new Sk.builtin.str(ret);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"isalpha\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"isalpha\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( self.v.length && goog.string.isAlpha(self.v));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"isalnum\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"isalnum\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( self.v.length && goog.string.isAlphaNumeric(self.v));\r\n\t});\r\n\r\n\t// does not account for unicode numeric values\r\n\tSk.builtin.str.prototype[\"isnumeric\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"isnumeric\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( self.v.length && goog.string.isNumeric(self.v));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"islower\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"islower\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( self.v.length && /[a-z]/.test(self.v) && !/[A-Z]/.test(self.v));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"isupper\"] = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"isupper\", arguments, 1, 1);\r\n\t    return new Sk.builtin.bool( self.v.length && !/[a-z]/.test(self.v) && /[A-Z]/.test(self.v));\r\n\t});\r\n\r\n\tSk.builtin.str.prototype[\"istitle\"] = new Sk.builtin.func(function (self) {\r\n\t    // Comparing to str.title() seems the most intuitive thing, but it fails on \"\",\r\n\t    // Other empty-ish strings with no change.\r\n\t    var input = self.v;\r\n\t    var cased = false;\r\n\t    var previous_is_cased = false;\r\n\t    var pos;\r\n\t    var ch;\r\n\t    Sk.builtin.pyCheckArgs(\"istitle\", arguments, 1, 1);\r\n\t    for (pos = 0; pos < input.length; pos ++) {\r\n\t        ch = input.charAt(pos);\r\n\t        if (! /[a-z]/.test(ch) && /[A-Z]/.test(ch)) {\r\n\t            if (previous_is_cased) {\r\n\t                return new Sk.builtin.bool( false);\r\n\t            }\r\n\t            previous_is_cased = true;\r\n\t            cased = true;\r\n\t        } else if (/[a-z]/.test(ch) && ! /[A-Z]/.test(ch)) {\r\n\t            if (! previous_is_cased) {\r\n\t                return new Sk.builtin.bool( false);\r\n\t            }\r\n\t            cased = true;\r\n\t        } else {\r\n\t            previous_is_cased = false;\r\n\t        }\r\n\t    }\r\n\t    return new Sk.builtin.bool( cased);\r\n\t});\r\n\r\n\tSk.builtin.str.prototype.nb$remainder = function (rhs) {\r\n\t    // % format op. rhs can be a value, a tuple, or something with __getitem__ (dict)\r\n\r\n\t    // From http://docs.python.org/library/stdtypes.html#string-formatting the\r\n\t    // format looks like:\r\n\t    // 1. The '%' character, which marks the start of the specifier.\r\n\t    // 2. Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)).\r\n\t    // 3. Conversion flags (optional), which affect the result of some conversion types.\r\n\t    // 4. Minimum field width (optional). If specified as an '*' (asterisk), the actual width is read from the next\r\n\t    // element of the tuple in values, and the object to convert comes after the minimum field width and optional\r\n\t    // precision. 5. Precision (optional), given as a '.' (dot) followed by the precision. If specified as '*' (an\r\n\t    // asterisk), the actual width is read from the next element of the tuple in values, and the value to convert comes\r\n\t    // after the precision. 6. Length modifier (optional). 7. Conversion type.  length modifier is ignored\r\n\r\n\t    var ret;\r\n\t    var replFunc;\r\n\t    var index;\r\n\t    var regex;\r\n\t    if (rhs.constructor !== Sk.builtin.tuple && (rhs.mp$subscript === undefined || rhs.constructor === Sk.builtin.str)) {\r\n\t        rhs = new Sk.builtin.tuple([rhs]);\r\n\t    }\r\n\r\n\t    // general approach is to use a regex that matches the format above, and\r\n\t    // do an re.sub with a function as replacement to make the subs.\r\n\r\n\t    //           1 2222222222222222   33333333   444444444   5555555555555  66666  777777777777777777\r\n\t    regex = /%(\\([a-zA-Z0-9]+\\))?([#0 +\\-]+)?(\\*|[0-9]+)?(\\.(\\*|[0-9]+))?[hlL]?([diouxXeEfFgGcrs%])/g;\r\n\t    index = 0;\r\n\t    replFunc = function (substring, mappingKey, conversionFlags, fieldWidth, precision, precbody, conversionType) {\r\n\t        var result;\r\n\t        var convName;\r\n\t        var convValue;\r\n\t        var base;\r\n\t        var r;\r\n\t        var mk;\r\n\t        var value;\r\n\t        var handleWidth;\r\n\t        var formatNumber;\r\n\t        var alternateForm;\r\n\t        var precedeWithSign;\r\n\t        var blankBeforePositive;\r\n\t        var leftAdjust;\r\n\t        var zeroPad;\r\n\t        var i;\r\n\t        fieldWidth = Sk.builtin.asnum$(fieldWidth);\r\n\t        precision = Sk.builtin.asnum$(precision);\r\n\r\n\t        if (mappingKey === undefined || mappingKey === \"\") {\r\n\t            i = index++;\r\n\t        } // ff passes '' not undef for some reason\r\n\r\n\t        if (precision === \"\") { // ff passes '' here aswell causing problems with G,g, etc.\r\n\t            precision = undefined;\r\n\t        }\r\n\r\n\t        zeroPad = false;\r\n\t        leftAdjust = false;\r\n\t        blankBeforePositive = false;\r\n\t        precedeWithSign = false;\r\n\t        alternateForm = false;\r\n\t        if (conversionFlags) {\r\n\t            if (conversionFlags.indexOf(\"-\") !== -1) {\r\n\t                leftAdjust = true;\r\n\t            } else if (conversionFlags.indexOf(\"0\") !== -1) {\r\n\t                zeroPad = true;\r\n\t            }\r\n\r\n\t            if (conversionFlags.indexOf(\"+\") !== -1) {\r\n\t                precedeWithSign = true;\r\n\t            } else if (conversionFlags.indexOf(\" \") !== -1) {\r\n\t                blankBeforePositive = true;\r\n\t            }\r\n\r\n\t            alternateForm = conversionFlags.indexOf(\"#\") !== -1;\r\n\t        }\r\n\r\n\t        if (precision) {\r\n\t            precision = parseInt(precision.substr(1), 10);\r\n\t        }\r\n\r\n\t        formatNumber = function (n, base) {\r\n\t            var precZeroPadded;\r\n\t            var prefix;\r\n\t            var didSign;\r\n\t            var neg;\r\n\t            var r;\r\n\t            var j;\r\n\t            base = Sk.builtin.asnum$(base);\r\n\t            neg = false;\r\n\t            didSign = false;\r\n\t            if (typeof n === \"number\") {\r\n\t                if (n < 0) {\r\n\t                    n = -n;\r\n\t                    neg = true;\r\n\t                }\r\n\t                r = n.toString(base);\r\n\t            } else if (n instanceof Sk.builtin.float_) {\r\n\t                r = n.str$(base, false);\r\n\t                if (r.length > 2 && r.substr(-2) === \".0\") {\r\n\t                    r = r.substr(0, r.length - 2);\r\n\t                }\r\n\t                neg = n.nb$isnegative();\r\n\t            } else if (n instanceof Sk.builtin.int_) {\r\n\t                r = n.str$(base, false);\r\n\t                neg = n.nb$isnegative();\r\n\t            } else if (n instanceof Sk.builtin.lng) {\r\n\t                r = n.str$(base, false);\r\n\t                neg = n.nb$isnegative();\t//\tneg = n.size$ < 0;\tRNL long.js change\r\n\t            }\r\n\r\n\t            goog.asserts.assert(r !== undefined, \"unhandled number format\");\r\n\r\n\t            precZeroPadded = false;\r\n\r\n\t            if (precision) {\r\n\t                //print(\"r.length\",r.length,\"precision\",precision);\r\n\t                for (j = r.length; j < precision; ++j) {\r\n\t                    r = \"0\" + r;\r\n\t                    precZeroPadded = true;\r\n\t                }\r\n\t            }\r\n\r\n\t            prefix = \"\";\r\n\r\n\t            if (neg) {\r\n\t                prefix = \"-\";\r\n\t            } else if (precedeWithSign) {\r\n\t                prefix = \"+\" + prefix;\r\n\t            } else if (blankBeforePositive) {\r\n\t                prefix = \" \" + prefix;\r\n\t            }\r\n\r\n\t            if (alternateForm) {\r\n\t                if (base === 16) {\r\n\t                    prefix += \"0x\";\r\n\t                } else if (base === 8 && !precZeroPadded && r !== \"0\") {\r\n\t                    prefix += \"0\";\r\n\t                }\r\n\t            }\r\n\r\n\t            return [prefix, r];\r\n\t        };\r\n\r\n\t        handleWidth = function (args) {\r\n\t            var totLen;\r\n\t            var prefix = args[0];\r\n\t            var r = args[1];\r\n\t            var j;\r\n\t            if (fieldWidth) {\r\n\t                fieldWidth = parseInt(fieldWidth, 10);\r\n\t                totLen = r.length + prefix.length;\r\n\t                if (zeroPad) {\r\n\t                    for (j = totLen; j < fieldWidth; ++j) {\r\n\t                        r = \"0\" + r;\r\n\t                    }\r\n\t                } else if (leftAdjust) {\r\n\t                    for (j = totLen; j < fieldWidth; ++j) {\r\n\t                        r = r + \" \";\r\n\t                    }\r\n\t                } else {\r\n\t                    for (j = totLen; j < fieldWidth; ++j) {\r\n\t                        prefix = \" \" + prefix;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return prefix + r;\r\n\t        };\r\n\r\n\t        //print(\"Rhs:\",rhs, \"ctor\", rhs.constructor);\r\n\t        if (rhs.constructor === Sk.builtin.tuple) {\r\n\t            value = rhs.v[i];\r\n\t        } else if (rhs.mp$subscript !== undefined && mappingKey !== undefined) {\r\n\t            mk = mappingKey.substring(1, mappingKey.length - 1);\r\n\t            //print(\"mk\",mk);\r\n\t            value = rhs.mp$subscript(new Sk.builtin.str(mk));\r\n\t        } else if (rhs.constructor === Sk.builtin.dict || rhs.constructor === Sk.builtin.list) {\r\n\t            // new case where only one argument is provided\r\n\t            value = rhs;\r\n\t        } else {\r\n\t            throw new Sk.builtin.AttributeError(rhs.tp$name + \" instance has no attribute 'mp$subscript'\");\r\n\t        }\r\n\t        base = 10;\r\n\t        if (conversionType === \"d\" || conversionType === \"i\") {\r\n\t            return handleWidth(formatNumber(value, 10));\r\n\t        } else if (conversionType === \"o\") {\r\n\t            return handleWidth(formatNumber(value, 8));\r\n\t        } else if (conversionType === \"x\") {\r\n\t            return handleWidth(formatNumber(value, 16));\r\n\t        } else if (conversionType === \"X\") {\r\n\t            return handleWidth(formatNumber(value, 16)).toUpperCase();\r\n\t        } else if (conversionType === \"f\" || conversionType === \"F\" || conversionType === \"e\" || conversionType === \"E\" || conversionType === \"g\" || conversionType === \"G\") {\r\n\t            convValue = Sk.builtin.asnum$(value);\r\n\t            if (typeof convValue === \"string\") {\r\n\t                convValue = Number(convValue);\r\n\t            }\r\n\t            if (convValue === Infinity) {\r\n\t                return \"inf\";\r\n\t            }\r\n\t            if (convValue === -Infinity) {\r\n\t                return \"-inf\";\r\n\t            }\r\n\t            if (isNaN(convValue)) {\r\n\t                return \"nan\";\r\n\t            }\r\n\t            convName = [\"toExponential\", \"toFixed\", \"toPrecision\"][\"efg\".indexOf(conversionType.toLowerCase())];\r\n\t            if (precision === undefined || precision === \"\") {\r\n\t                if (conversionType === \"e\" || conversionType === \"E\") {\r\n\t                    precision = 6;\r\n\t                } else if (conversionType === \"f\" || conversionType === \"F\") {\r\n\t                    precision = 7;\r\n\t                }\r\n\t            }\r\n\t            result = (convValue)[convName](precision); // possible loose of negative zero sign\r\n\r\n\t            // apply sign to negative zeros, floats only!\r\n\t            if(Sk.builtin.checkFloat(value)) {\r\n\t                if(convValue === 0 && 1/convValue === -Infinity) {\r\n\t                    result = \"-\" + result; // add sign for zero\r\n\t                }\r\n\t            }\r\n\r\n\t            if (\"EFG\".indexOf(conversionType) !== -1) {\r\n\t                result = result.toUpperCase();\r\n\t            }\r\n\t            return handleWidth([\"\", result]);\r\n\t        } else if (conversionType === \"c\") {\r\n\t            if (typeof value === \"number\") {\r\n\t                return String.fromCharCode(value);\r\n\t            } else if (value instanceof Sk.builtin.int_) {\r\n\t                return String.fromCharCode(value.v);\r\n\t            } else if (value instanceof Sk.builtin.float_) {\r\n\t                return String.fromCharCode(value.v);\r\n\t            } else if (value instanceof Sk.builtin.lng) {\r\n\t                return String.fromCharCode(value.str$(10, false)[0]);\r\n\t            } else if (value.constructor === Sk.builtin.str) {\r\n\t                return value.v.substr(0, 1);\r\n\t            } else {\r\n\t                throw new Sk.builtin.TypeError(\"an integer is required\");\r\n\t            }\r\n\t        } else if (conversionType === \"r\") {\r\n\t            r = Sk.builtin.repr(value);\r\n\t            if (precision) {\r\n\t                return r.v.substr(0, precision);\r\n\t            }\r\n\t            return r.v;\r\n\t        } else if (conversionType === \"s\") {\r\n\t            r = new Sk.builtin.str(value);\r\n\t            if (precision) {\r\n\t                return r.v.substr(0, precision);\r\n\t            }\r\n\t            if(fieldWidth) {\r\n\t                r.v = handleWidth([\" \", r.v]);\r\n\t            }\r\n\t            return r.v;\r\n\t        } else if (conversionType === \"%\") {\r\n\t            return \"%\";\r\n\t        }\r\n\t    };\r\n\r\n\t    ret = this.v.replace(regex, replFunc);\r\n\t    return new Sk.builtin.str(ret);\r\n\t};\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * @param {Object} obj\r\n\t */\r\n\tSk.builtin.str_iter_ = function (obj) {\r\n\t    if (!(this instanceof Sk.builtin.str_iter_)) {\r\n\t        return new Sk.builtin.str_iter_(obj);\r\n\t    }\r\n\t    this.$index = 0;\r\n\t    this.$obj = obj.v.slice();\r\n\t    this.sq$length = this.$obj.length;\r\n\t    this.tp$iter = this;\r\n\t    this.tp$iternext = function () {\r\n\t        if (this.$index >= this.sq$length) {\r\n\t            return undefined;\r\n\t        }\r\n\t        return new Sk.builtin.str(this.$obj.substr(this.$index++, 1));\r\n\t    };\r\n\t    this.$r = function () {\r\n\t        return new Sk.builtin.str(\"iterator\");\r\n\t    };\r\n\t    return this;\r\n\t};\r\n\r\n\tSk.abstr.setUpInheritance(\"iterator\", Sk.builtin.str_iter_, Sk.builtin.object);\r\n\r\n\tSk.builtin.str_iter_.prototype.__class__ = Sk.builtin.str_iter_;\r\n\r\n\tSk.builtin.str_iter_.prototype.__iter__ = new Sk.builtin.func(function (self) {\r\n\t    Sk.builtin.pyCheckArgs(\"__iter__\", arguments, 0, 0, true, false);\r\n\t    return self;\r\n\t});\r\n\r\n\tSk.builtin.str_iter_.prototype[\"next\"] = new Sk.builtin.func(function (self) {\r\n\t    var ret = self.tp$iternext();\r\n\t    if (ret === undefined) {\r\n\t        throw new Sk.builtin.StopIteration();\r\n\t    }\r\n\t    return ret;\r\n\t});\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/tokenize.js ---- */ \r\n\r\n\t/*\r\n\t * This is a port of tokenize.py by Ka-Ping Yee.\r\n\t *\r\n\t * each call to readline should return one line of input as a string, or\r\n\t * undefined if it's finished.\r\n\t *\r\n\t * callback is called for each token with 5 args:\r\n\t * 1. the token type\r\n\t * 2. the token string\r\n\t * 3. [ start_row, start_col ]\r\n\t * 4. [ end_row, end_col ]\r\n\t * 5. logical line where the token was found, including continuation lines\r\n\t *\r\n\t * callback can return true to abort.\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tSk.Tokenizer = function (filename, interactive, callback) {\r\n\t    this.filename = filename;\r\n\t    this.callback = callback;\r\n\t    this.lnum = 0;\r\n\t    this.parenlev = 0;\r\n\t    this.parenstack = [];\r\n\t    this.continued = false;\r\n\t    this.namechars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_\";\r\n\t    this.numchars = \"0123456789\";\r\n\t    this.contstr = \"\";\r\n\t    this.needcont = false;\r\n\t    this.contline = undefined;\r\n\t    this.indents = [0];\r\n\t    this.endprog = /.*/;\r\n\t    this.strstart = [-1, -1];\r\n\t    this.interactive = interactive;\r\n\t    this.doneFunc = function () {\r\n\t        var i;\r\n\t        for (i = 1; i < this.indents.length; ++i) // pop remaining indent levels\r\n\t        {\r\n\t            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, \"\", [this.lnum, 0], [this.lnum, 0], \"\")) {\r\n\t                return \"done\";\r\n\t            }\r\n\t        }\r\n\t        if (this.callback(Sk.Tokenizer.Tokens.T_ENDMARKER, \"\", [this.lnum, 0], [this.lnum, 0], \"\")) {\r\n\t            return \"done\";\r\n\t        }\r\n\r\n\t        return \"failed\";\r\n\t    };\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @enum {number}\r\n\t */\r\n\tSk.Tokenizer.Tokens = {\r\n\t    T_ENDMARKER       : 0,\r\n\t    T_NAME            : 1,\r\n\t    T_NUMBER          : 2,\r\n\t    T_STRING          : 3,\r\n\t    T_NEWLINE         : 4,\r\n\t    T_INDENT          : 5,\r\n\t    T_DEDENT          : 6,\r\n\t    T_LPAR            : 7,\r\n\t    T_RPAR            : 8,\r\n\t    T_LSQB            : 9,\r\n\t    T_RSQB            : 10,\r\n\t    T_COLON           : 11,\r\n\t    T_COMMA           : 12,\r\n\t    T_SEMI            : 13,\r\n\t    T_PLUS            : 14,\r\n\t    T_MINUS           : 15,\r\n\t    T_STAR            : 16,\r\n\t    T_SLASH           : 17,\r\n\t    T_VBAR            : 18,\r\n\t    T_AMPER           : 19,\r\n\t    T_LESS            : 20,\r\n\t    T_GREATER         : 21,\r\n\t    T_EQUAL           : 22,\r\n\t    T_DOT             : 23,\r\n\t    T_PERCENT         : 24,\r\n\t    T_BACKQUOTE       : 25,\r\n\t    T_LBRACE          : 26,\r\n\t    T_RBRACE          : 27,\r\n\t    T_EQEQUAL         : 28,\r\n\t    T_NOTEQUAL        : 29,\r\n\t    T_LESSEQUAL       : 30,\r\n\t    T_GREATEREQUAL    : 31,\r\n\t    T_TILDE           : 32,\r\n\t    T_CIRCUMFLEX      : 33,\r\n\t    T_LEFTSHIFT       : 34,\r\n\t    T_RIGHTSHIFT      : 35,\r\n\t    T_DOUBLESTAR      : 36,\r\n\t    T_PLUSEQUAL       : 37,\r\n\t    T_MINEQUAL        : 38,\r\n\t    T_STAREQUAL       : 39,\r\n\t    T_SLASHEQUAL      : 40,\r\n\t    T_PERCENTEQUAL    : 41,\r\n\t    T_AMPEREQUAL      : 42,\r\n\t    T_VBAREQUAL       : 43,\r\n\t    T_CIRCUMFLEXEQUAL : 44,\r\n\t    T_LEFTSHIFTEQUAL  : 45,\r\n\t    T_RIGHTSHIFTEQUAL : 46,\r\n\t    T_DOUBLESTAREQUAL : 47,\r\n\t    T_DOUBLESLASH     : 48,\r\n\t    T_DOUBLESLASHEQUAL: 49,\r\n\t    T_AT              : 50,\r\n\t    T_OP              : 51,\r\n\t    T_COMMENT         : 52,\r\n\t    T_NL              : 53,\r\n\t    T_RARROW          : 54,\r\n\t    T_ERRORTOKEN      : 55,\r\n\t    T_N_TOKENS        : 56,\r\n\t    T_NT_OFFSET       : 256\r\n\t};\r\n\r\n\t/** @param {...*} x */\r\n\tfunction group (x) {\r\n\t    var args = Array.prototype.slice.call(arguments);\r\n\t    return \"(\" + args.join(\"|\") + \")\";\r\n\t}\r\n\r\n\t/** @param {...*} x */\r\n\tfunction any (x) {\r\n\t    return group.apply(null, arguments) + \"*\";\r\n\t}\r\n\r\n\t/** @param {...*} x */\r\n\tfunction maybe (x) {\r\n\t    return group.apply(null, arguments) + \"?\";\r\n\t}\r\n\r\n\t/* we have to use string and ctor to be able to build patterns up. + on /.../\r\n\t * does something strange. */\r\n\tvar Whitespace = \"[ \\\\f\\\\t]*\";\r\n\tvar Comment_ = \"#[^\\\\r\\\\n]*\";\r\n\tvar Ident = \"[a-zA-Z_]\\\\w*\";\r\n\r\n\tvar Binnumber = \"0[bB][01]*\";\r\n\tvar Hexnumber = \"0[xX][\\\\da-fA-F]*[lL]?\";\r\n\tvar Octnumber = \"0[oO]?[0-7]*[lL]?\";\r\n\tvar Decnumber = \"[1-9]\\\\d*[lL]?\";\r\n\tvar Intnumber = group(Binnumber, Hexnumber, Octnumber, Decnumber);\r\n\r\n\tvar Exponent = \"[eE][-+]?\\\\d+\";\r\n\tvar Pointfloat = group(\"\\\\d+\\\\.\\\\d*\", \"\\\\.\\\\d+\") + maybe(Exponent);\r\n\tvar Expfloat = \"\\\\d+\" + Exponent;\r\n\tvar Floatnumber = group(Pointfloat, Expfloat);\r\n\tvar Imagnumber = group(\"\\\\d+[jJ]\", Floatnumber + \"[jJ]\");\r\n\tvar Number_ = group(Imagnumber, Floatnumber, Intnumber);\r\n\r\n\t// tail end of ' string\r\n\tvar Single = \"^[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'\";\r\n\t// tail end of \" string\r\n\tvar Double_ = '^[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*\"';\r\n\t// tail end of ''' string\r\n\tvar Single3 = \"[^'\\\\\\\\]*(?:(?:\\\\\\\\.|'(?!''))[^'\\\\\\\\]*)*'''\";\r\n\t// tail end of \"\"\" string\r\n\tvar Double3 = '[^\"\\\\\\\\]*(?:(?:\\\\\\\\.|\"(?!\"\"))[^\"\\\\\\\\]*)*\"\"\"';\r\n\tvar Triple = group(\"[ubUB]?[rR]?'''\", '[ubUB]?[rR]?\"\"\"');\r\n\tvar String_ = group(\"[uU]?[rR]?'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*'\",\r\n\t    '[uU]?[rR]?\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*\"');\r\n\r\n\t// Because of leftmost-then-longest match semantics, be sure to put the\r\n\t// longest operators first (e.g., if = came before ==, == would get\r\n\t// recognized as two instances of =).\r\n\tvar Operator = group(\"\\\\*\\\\*=?\", \">>=?\", \"<<=?\", \"<>\", \"!=\",\r\n\t    \"//=?\", \"->\",\r\n\t    \"[+\\\\-*/%&|^=<>]=?\",\r\n\t    \"~\");\r\n\r\n\tvar Bracket = \"[\\\\][(){}]\";\r\n\tvar Special = group(\"\\\\r?\\\\n\", \"[:;.,`@]\");\r\n\tvar Funny = group(Operator, Bracket, Special);\r\n\r\n\tvar ContStr = group(\"[uUbB]?[rR]?'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*\" +\r\n\t        group(\"'\", \"\\\\\\\\\\\\r?\\\\n\"),\r\n\t        \"[uUbB]?[rR]?\\\"[^\\\\n\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\\\"\\\\\\\\]*)*\" +\r\n\t        group(\"\\\"\", \"\\\\\\\\\\\\r?\\\\n\"));\r\n\tvar PseudoExtras = group(\"\\\\\\\\\\\\r?\\\\n\", Comment_, Triple);\r\n\t// Need to prefix with \"^\" as we only want to match what's next\r\n\tvar PseudoToken = \"^\" + group(PseudoExtras, Number_, Funny, ContStr, Ident);\r\n\r\n\r\n\tvar triple_quoted = {\r\n\t    \"'''\"  : true, '\"\"\"': true,\r\n\t    \"r'''\" : true, 'r\"\"\"': true, \"R'''\": true, 'R\"\"\"': true,\r\n\t    \"u'''\" : true, 'u\"\"\"': true, \"U'''\": true, 'U\"\"\"': true,\r\n\t    \"b'''\" : true, 'b\"\"\"': true, \"B'''\": true, 'B\"\"\"': true,\r\n\t    \"ur'''\": true, 'ur\"\"\"': true, \"Ur'''\": true, 'Ur\"\"\"': true,\r\n\t    \"uR'''\": true, 'uR\"\"\"': true, \"UR'''\": true, 'UR\"\"\"': true,\r\n\t    \"br'''\": true, 'br\"\"\"': true, \"Br'''\": true, 'Br\"\"\"': true,\r\n\t    \"bR'''\": true, 'bR\"\"\"': true, \"BR'''\": true, 'BR\"\"\"': true\r\n\t};\r\n\r\n\tvar single_quoted = {\r\n\t    \"'\"  : true, '\"': true,\r\n\t    \"r'\" : true, 'r\"': true, \"R'\": true, 'R\"': true,\r\n\t    \"u'\" : true, 'u\"': true, \"U'\": true, 'U\"': true,\r\n\t    \"b'\" : true, 'b\"': true, \"B'\": true, 'B\"': true,\r\n\t    \"ur'\": true, 'ur\"': true, \"Ur'\": true, 'Ur\"': true,\r\n\t    \"uR'\": true, 'uR\"': true, \"UR'\": true, 'UR\"': true,\r\n\t    \"br'\": true, 'br\"': true, \"Br'\": true, 'Br\"': true,\r\n\t    \"bR'\": true, 'bR\"': true, \"BR'\": true, 'BR\"': true\r\n\t};\r\n\r\n\t// hack to make closure keep those objects. not sure what a better way is.\r\n\t(function () {\r\n\t    var k;\r\n\t    for (k in triple_quoted) {\r\n\t    }\r\n\t    for (k in single_quoted) {\r\n\t    }\r\n\t}());\r\n\r\n\r\n\tvar tabsize = 8;\r\n\r\n\tfunction contains (a, obj) {\r\n\t    var i = a.length;\r\n\t    while (i--) {\r\n\t        if (a[i] === obj) {\r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\t    return false;\r\n\t}\r\n\r\n\tfunction rstrip (input, what) {\r\n\t    var i;\r\n\t    for (i = input.length; i > 0; --i) {\r\n\t        if (what.indexOf(input.charAt(i - 1)) === -1) {\r\n\t            break;\r\n\t        }\r\n\t    }\r\n\t    return input.substring(0, i);\r\n\t}\r\n\r\n\tSk.Tokenizer.prototype.generateTokens = function (line) {\r\n\t    var nl_pos;\r\n\t    var newl;\r\n\t    var initial;\r\n\t    var token;\r\n\t    var epos;\r\n\t    var spos;\r\n\t    var start;\r\n\t    var pseudomatch;\r\n\t    var capos;\r\n\t    var comment_token;\r\n\t    var endmatch, pos, column, end, max;\r\n\r\n\r\n\t    // bnm - Move these definitions in this function otherwise test state is preserved between\r\n\t    // calls on single3prog and double3prog causing weird errors with having multiple instances\r\n\t    // of triple quoted strings in the same program.\r\n\r\n\t    var pseudoprog = new RegExp(PseudoToken);\r\n\t    var single3prog = new RegExp(Single3, \"g\");\r\n\t    var double3prog = new RegExp(Double3, \"g\");\r\n\r\n\t    var endprogs = {     \"'\": new RegExp(Single, \"g\"), \"\\\"\": new RegExp(Double_, \"g\"),\r\n\t        \"'''\"               : single3prog, '\"\"\"': double3prog,\r\n\t        \"r'''\"              : single3prog, 'r\"\"\"': double3prog,\r\n\t        \"u'''\"              : single3prog, 'u\"\"\"': double3prog,\r\n\t        \"b'''\"              : single3prog, 'b\"\"\"': double3prog,\r\n\t        \"ur'''\"             : single3prog, 'ur\"\"\"': double3prog,\r\n\t        \"br'''\"             : single3prog, 'br\"\"\"': double3prog,\r\n\t        \"R'''\"              : single3prog, 'R\"\"\"': double3prog,\r\n\t        \"U'''\"              : single3prog, 'U\"\"\"': double3prog,\r\n\t        \"B'''\"              : single3prog, 'B\"\"\"': double3prog,\r\n\t        \"uR'''\"             : single3prog, 'uR\"\"\"': double3prog,\r\n\t        \"Ur'''\"             : single3prog, 'Ur\"\"\"': double3prog,\r\n\t        \"UR'''\"             : single3prog, 'UR\"\"\"': double3prog,\r\n\t        \"bR'''\"             : single3prog, 'bR\"\"\"': double3prog,\r\n\t        \"Br'''\"             : single3prog, 'Br\"\"\"': double3prog,\r\n\t        \"BR'''\"             : single3prog, 'BR\"\"\"': double3prog,\r\n\t        'r'                 : null, 'R': null,\r\n\t        'u'                 : null, 'U': null,\r\n\t        'b'                 : null, 'B': null\r\n\t    };\r\n\r\n\r\n\t    if (!line) {\r\n\t        line = '';\r\n\t    }\r\n\t    //print(\"LINE:'\"+line+\"'\");\r\n\r\n\t    this.lnum += 1;\r\n\t    pos = 0;\r\n\t    max = line.length;\r\n\r\n\t    if (this.contstr.length > 0) {\r\n\t        if (!line) {\r\n\t            throw new Sk.builtin.SyntaxError(\"EOF in multi-line string\", this.filename, this.strstart[0], this.strstart[1], {\r\n\t                kind: \"STRING_EOF\",\r\n\t                line: this.contline\r\n\t            });\r\n\t        }\r\n\t        this.endprog.lastIndex = 0;\r\n\t        endmatch = this.endprog.test(line);\r\n\t        if (endmatch) {\r\n\t            pos = end = this.endprog.lastIndex;\r\n\t            if (this.callback(Sk.Tokenizer.Tokens.T_STRING, this.contstr + line.substring(0, end),\r\n\t                this.strstart, [this.lnum, end], this.contline + line)) {\r\n\t                return 'done';\r\n\t            }\r\n\t            this.contstr = '';\r\n\t            this.needcont = false;\r\n\t            this.contline = undefined;\r\n\t        }\r\n\t        else if (this.needcont && line.substring(line.length - 2) !== \"\\\\\\n\" && line.substring(line.length - 3) !== \"\\\\\\r\\n\") {\r\n\t            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, this.contstr + line,\r\n\t                this.strstart, [this.lnum, line.length], this.contline)) {\r\n\t                return 'done';\r\n\t            }\r\n\t            this.contstr = '';\r\n\t            this.contline = undefined;\r\n\t            return false;\r\n\t        }\r\n\t        else {\r\n\t            this.contstr += line;\r\n\t            this.contline = this.contline + line;\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\t    else if (this.parenlev === 0 && !this.continued) {\r\n\t        if (!line) {\r\n\t            return this.doneFunc();\r\n\t        }\r\n\t        column = 0;\r\n\t        while (pos < max) {\r\n\t            if (line.charAt(pos) === ' ') {\r\n\t                column += 1;\r\n\t            }\r\n\t            else if (line.charAt(pos) === '\\t') {\r\n\t                column = (column / tabsize + 1) * tabsize;\r\n\t            }\r\n\t            else if (line.charAt(pos) === '\\f') {\r\n\t                column = 0;\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t            pos = pos + 1;\r\n\t        }\r\n\t        if (pos === max) {\r\n\t            return this.doneFunc();\r\n\t        }\r\n\r\n\t        if (\"#\\r\\n\".indexOf(line.charAt(pos)) !== -1) // skip comments or blank lines\r\n\t        {\r\n\t            if (line.charAt(pos) === '#') {\r\n\t                comment_token = rstrip(line.substring(pos), '\\r\\n');\r\n\t                nl_pos = pos + comment_token.length;\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, comment_token,\r\n\t                    [this.lnum, pos], [this.lnum, pos + comment_token.length], line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t                //print(\"HERE:1\");\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(nl_pos),\r\n\t                    [this.lnum, nl_pos], [this.lnum, line.length], line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t                return false;\r\n\t            }\r\n\t            else {\r\n\t                //print(\"HERE:2\");\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(pos),\r\n\t                    [this.lnum, pos], [this.lnum, line.length], line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t                if (!this.interactive) {\r\n\t                    return false;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        if (column > this.indents[this.indents.length - 1]) // count indents or dedents\r\n\t        {\r\n\t            this.indents.push(column);\r\n\t            if (this.callback(Sk.Tokenizer.Tokens.T_INDENT, line.substring(0, pos), [this.lnum, 0], [this.lnum, pos], line)) {\r\n\t                return 'done';\r\n\t            }\r\n\t        }\r\n\t        while (column < this.indents[this.indents.length - 1]) {\r\n\t            if (!contains(this.indents, column)) {\r\n\t                throw new Sk.builtin.IndentationError(\"unindent does not match any outer indentation level\",\r\n\t                    this.filename, this.lnum, pos, line);\r\n\t            }\r\n\t            this.indents.splice(this.indents.length - 1, 1);\r\n\t            //print(\"dedent here\");\r\n\t            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, '', [this.lnum, pos], [this.lnum, pos], line)) {\r\n\t                return 'done';\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    else // continued statement\r\n\t    {\r\n\t        if (!line) {\r\n\t            throw new Sk.builtin.SyntaxError(\"EOF in multi-line statement\", this.filename, this.lnum, 0, {\r\n\t                kind: 'STATEMENT_EOF',\r\n\t                parenlev: this.parenlev,\r\n\t                parenstack: this.parenstack\r\n\t            });\r\n\t        }\r\n\t        this.continued = false;\r\n\t    }\r\n\r\n\t    while (pos < max) {\r\n\t        //print(\"pos:\"+pos+\":\"+max);\r\n\t        // js regexes don't return any info about matches, other than the\r\n\t        // content. we'd like to put a \\w+ before pseudomatch, but then we\r\n\t        // can't get any data\r\n\t        capos = line.charAt(pos);\r\n\t        while (capos === ' ' || capos === '\\f' || capos === '\\t') {\r\n\t            pos += 1;\r\n\t            capos = line.charAt(pos);\r\n\t        }\r\n\t        pseudoprog.lastIndex = 0;\r\n\t        pseudomatch = pseudoprog.exec(line.substring(pos));\r\n\t        if (pseudomatch) {\r\n\t            start = pos;\r\n\t            end = start + pseudomatch[1].length;\r\n\t            spos = [this.lnum, start];\r\n\t            epos = [this.lnum, end];\r\n\t            pos = end;\r\n\t            token = line.substring(start, end);\r\n\t            initial = line.charAt(start);\r\n\t            //Sk.debugout(\"token:\",token, \"initial:\",initial, start, end);\r\n\t            if (this.numchars.indexOf(initial) !== -1 || (initial === '.' && token !== '.')) {\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_NUMBER, token, spos, epos, line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t            }\r\n\t            else if (initial === '\\r' || initial === '\\n') {\r\n\t                newl = Sk.Tokenizer.Tokens.T_NEWLINE;\r\n\t                //print(\"HERE:3\");\r\n\t                if (this.parenlev > 0) {\r\n\t                    newl = Sk.Tokenizer.Tokens.T_NL;\r\n\t                }\r\n\t                if (this.callback(newl, token, spos, epos, line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t            }\r\n\t            else if (initial === '#') {\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, token, spos, epos, line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t            }\r\n\t            else if (triple_quoted.hasOwnProperty(token)) {\r\n\t                this.endprog = endprogs[token];\r\n\t                this.endprog.lastIndex = 0;\r\n\t                endmatch = this.endprog.test(line.substring(pos));\r\n\t                if (endmatch) {\r\n\t                    pos = this.endprog.lastIndex + pos;\r\n\t                    token = line.substring(start, pos);\r\n\t                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, [this.lnum, pos], line)) {\r\n\t                        return 'done';\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    this.strstart = [this.lnum, start];\r\n\t                    this.contstr = line.substring(start);\r\n\t                    this.contline = line;\r\n\t                    return false;\r\n\t                }\r\n\t            }\r\n\t            else if (single_quoted.hasOwnProperty(initial) ||\r\n\t                single_quoted.hasOwnProperty(token.substring(0, 2)) ||\r\n\t                single_quoted.hasOwnProperty(token.substring(0, 3))) {\r\n\t                if (token[token.length - 1] === '\\n') {\r\n\t                    this.strstart = [this.lnum, start];\r\n\t                    this.endprog = endprogs[initial] || endprogs[token[1]] || endprogs[token[2]];\r\n\t                    this.contstr = line.substring(start);\r\n\t                    this.needcont = true;\r\n\t                    this.contline = line;\r\n\t                    //print(\"i, t1, t2\", initial, token[1], token[2]);\r\n\t                    //print(\"ep, cs\", this.endprog, this.contstr);\r\n\t                    return false;\r\n\t                }\r\n\t                else {\r\n\t                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, epos, line)) {\r\n\t                        return 'done';\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            else if (this.namechars.indexOf(initial) !== -1) {\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_NAME, token, spos, epos, line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t            }\r\n\t            else if (initial === '\\\\') {\r\n\t                //print(\"HERE:4\");\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_NL, token, spos, [this.lnum, pos], line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t                this.continued = true;\r\n\t            }\r\n\t            else {\r\n\t                if ('([{'.indexOf(initial) !== -1) {\r\n\t                    this.parenlev += 1;\r\n\t                    this.parenstack.push([initial, this.lnum, pos]);\r\n\t                }\r\n\t                else if (')]}'.indexOf(initial) !== -1) {\r\n\t                    this.parenlev -= 1;\r\n\t                    this.parenstack.pop();\r\n\t                }\r\n\t                if (this.callback(Sk.Tokenizer.Tokens.T_OP, token, spos, epos, line)) {\r\n\t                    return 'done';\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, line.charAt(pos),\r\n\t                [this.lnum, pos], [this.lnum, pos + 1], line)) {\r\n\t                return 'done';\r\n\t            }\r\n\t            pos += 1;\r\n\t        }\r\n\t    }\r\n\r\n\t    return false;\r\n\t};\r\n\r\n\tSk.Tokenizer.tokenNames = {\r\n\t    0  : 'T_ENDMARKER', 1: 'T_NAME', 2: 'T_NUMBER', 3: 'T_STRING', 4: 'T_NEWLINE',\r\n\t    5  : 'T_INDENT', 6: 'T_DEDENT', 7: 'T_LPAR', 8: 'T_RPAR', 9: 'T_LSQB',\r\n\t    10 : 'T_RSQB', 11: 'T_COLON', 12: 'T_COMMA', 13: 'T_SEMI', 14: 'T_PLUS',\r\n\t    15 : 'T_MINUS', 16: 'T_STAR', 17: 'T_SLASH', 18: 'T_VBAR', 19: 'T_AMPER',\r\n\t    20 : 'T_LESS', 21: 'T_GREATER', 22: 'T_EQUAL', 23: 'T_DOT', 24: 'T_PERCENT',\r\n\t    25 : 'T_BACKQUOTE', 26: 'T_LBRACE', 27: 'T_RBRACE', 28: 'T_EQEQUAL', 29: 'T_NOTEQUAL',\r\n\t    30 : 'T_LESSEQUAL', 31: 'T_GREATEREQUAL', 32: 'T_TILDE', 33: 'T_CIRCUMFLEX', 34: 'T_LEFTSHIFT',\r\n\t    35 : 'T_RIGHTSHIFT', 36: 'T_DOUBLESTAR', 37: 'T_PLUSEQUAL', 38: 'T_MINEQUAL', 39: 'T_STAREQUAL',\r\n\t    40 : 'T_SLASHEQUAL', 41: 'T_PERCENTEQUAL', 42: 'T_AMPEREQUAL', 43: 'T_VBAREQUAL', 44: 'T_CIRCUMFLEXEQUAL',\r\n\t    45 : 'T_LEFTSHIFTEQUAL', 46: 'T_RIGHTSHIFTEQUAL', 47: 'T_DOUBLESTAREQUAL', 48: 'T_DOUBLESLASH', 49: 'T_DOUBLESLASHEQUAL',\r\n\t    50 : 'T_AT', 51: 'T_OP', 52: 'T_COMMENT', 53: 'T_NL', 54: 'T_RARROW',\r\n\t    55 : 'T_ERRORTOKEN', 56: 'T_N_TOKENS',\r\n\t    256: 'T_NT_OFFSET'\r\n\t};\r\n\r\n\tgoog.exportSymbol(\"Sk.Tokenizer\", Sk.Tokenizer);\r\n\tgoog.exportSymbol(\"Sk.Tokenizer.prototype.generateTokens\", Sk.Tokenizer.prototype.generateTokens);\r\n\tgoog.exportSymbol(\"Sk.Tokenizer.tokenNames\", Sk.Tokenizer.tokenNames);\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/parse_tables.js ---- */ \r\n\r\n\t// generated by pgen/main.py\r\n\tSk.OpMap = {\r\n\t\"(\": Sk.Tokenizer.Tokens.T_LPAR,\r\n\t\")\": Sk.Tokenizer.Tokens.T_RPAR,\r\n\t\"[\": Sk.Tokenizer.Tokens.T_LSQB,\r\n\t\"]\": Sk.Tokenizer.Tokens.T_RSQB,\r\n\t\":\": Sk.Tokenizer.Tokens.T_COLON,\r\n\t\",\": Sk.Tokenizer.Tokens.T_COMMA,\r\n\t\";\": Sk.Tokenizer.Tokens.T_SEMI,\r\n\t\"+\": Sk.Tokenizer.Tokens.T_PLUS,\r\n\t\"-\": Sk.Tokenizer.Tokens.T_MINUS,\r\n\t\"*\": Sk.Tokenizer.Tokens.T_STAR,\r\n\t\"/\": Sk.Tokenizer.Tokens.T_SLASH,\r\n\t\"|\": Sk.Tokenizer.Tokens.T_VBAR,\r\n\t\"&\": Sk.Tokenizer.Tokens.T_AMPER,\r\n\t\"<\": Sk.Tokenizer.Tokens.T_LESS,\r\n\t\">\": Sk.Tokenizer.Tokens.T_GREATER,\r\n\t\"=\": Sk.Tokenizer.Tokens.T_EQUAL,\r\n\t\".\": Sk.Tokenizer.Tokens.T_DOT,\r\n\t\"%\": Sk.Tokenizer.Tokens.T_PERCENT,\r\n\t\"`\": Sk.Tokenizer.Tokens.T_BACKQUOTE,\r\n\t\"{\": Sk.Tokenizer.Tokens.T_LBRACE,\r\n\t\"}\": Sk.Tokenizer.Tokens.T_RBRACE,\r\n\t\"@\": Sk.Tokenizer.Tokens.T_AT,\r\n\t\"==\": Sk.Tokenizer.Tokens.T_EQEQUAL,\r\n\t\"!=\": Sk.Tokenizer.Tokens.T_NOTEQUAL,\r\n\t\"<>\": Sk.Tokenizer.Tokens.T_NOTEQUAL,\r\n\t\"<=\": Sk.Tokenizer.Tokens.T_LESSEQUAL,\r\n\t\">=\": Sk.Tokenizer.Tokens.T_GREATEREQUAL,\r\n\t\"~\": Sk.Tokenizer.Tokens.T_TILDE,\r\n\t\"^\": Sk.Tokenizer.Tokens.T_CIRCUMFLEX,\r\n\t\"<<\": Sk.Tokenizer.Tokens.T_LEFTSHIFT,\r\n\t\">>\": Sk.Tokenizer.Tokens.T_RIGHTSHIFT,\r\n\t\"**\": Sk.Tokenizer.Tokens.T_DOUBLESTAR,\r\n\t\"+=\": Sk.Tokenizer.Tokens.T_PLUSEQUAL,\r\n\t\"-=\": Sk.Tokenizer.Tokens.T_MINEQUAL,\r\n\t\"*=\": Sk.Tokenizer.Tokens.T_STAREQUAL,\r\n\t\"/=\": Sk.Tokenizer.Tokens.T_SLASHEQUAL,\r\n\t\"%=\": Sk.Tokenizer.Tokens.T_PERCENTEQUAL,\r\n\t\"&=\": Sk.Tokenizer.Tokens.T_AMPEREQUAL,\r\n\t\"|=\": Sk.Tokenizer.Tokens.T_VBAREQUAL,\r\n\t\"^=\": Sk.Tokenizer.Tokens.T_CIRCUMFLEXEQUAL,\r\n\t\"<<=\": Sk.Tokenizer.Tokens.T_LEFTSHIFTEQUAL,\r\n\t\">>=\": Sk.Tokenizer.Tokens.T_RIGHTSHIFTEQUAL,\r\n\t\"**=\": Sk.Tokenizer.Tokens.T_DOUBLESTAREQUAL,\r\n\t\"//\": Sk.Tokenizer.Tokens.T_DOUBLESLASH,\r\n\t\"//=\": Sk.Tokenizer.Tokens.T_DOUBLESLASHEQUAL,\r\n\t\"->\": Sk.Tokenizer.Tokens.T_RARROW\r\n\t};\r\n\tSk.ParseTables = {\r\n\tsym:\r\n\t{and_expr: 257,\r\n\t and_test: 258,\r\n\t arglist: 259,\r\n\t argument: 260,\r\n\t arith_expr: 261,\r\n\t assert_stmt: 262,\r\n\t atom: 263,\r\n\t augassign: 264,\r\n\t break_stmt: 265,\r\n\t classdef: 266,\r\n\t comp_for: 267,\r\n\t comp_if: 268,\r\n\t comp_iter: 269,\r\n\t comp_op: 270,\r\n\t comparison: 271,\r\n\t compound_stmt: 272,\r\n\t continue_stmt: 273,\r\n\t debugger_stmt: 274,\r\n\t decorated: 275,\r\n\t decorator: 276,\r\n\t decorators: 277,\r\n\t del_stmt: 278,\r\n\t dictorsetmaker: 279,\r\n\t dotted_as_name: 280,\r\n\t dotted_as_names: 281,\r\n\t dotted_name: 282,\r\n\t encoding_decl: 283,\r\n\t eval_input: 284,\r\n\t except_clause: 285,\r\n\t exec_stmt: 286,\r\n\t expr: 287,\r\n\t expr_stmt: 288,\r\n\t exprlist: 289,\r\n\t factor: 290,\r\n\t file_input: 291,\r\n\t flow_stmt: 292,\r\n\t for_stmt: 293,\r\n\t fpdef: 294,\r\n\t fplist: 295,\r\n\t funcdef: 296,\r\n\t global_stmt: 297,\r\n\t if_stmt: 298,\r\n\t import_as_name: 299,\r\n\t import_as_names: 300,\r\n\t import_from: 301,\r\n\t import_name: 302,\r\n\t import_stmt: 303,\r\n\t lambdef: 304,\r\n\t list_for: 305,\r\n\t list_if: 306,\r\n\t list_iter: 307,\r\n\t listmaker: 308,\r\n\t not_test: 309,\r\n\t old_lambdef: 310,\r\n\t old_test: 311,\r\n\t or_test: 312,\r\n\t parameters: 313,\r\n\t pass_stmt: 314,\r\n\t power: 315,\r\n\t print_stmt: 316,\r\n\t raise_stmt: 317,\r\n\t return_stmt: 318,\r\n\t shift_expr: 319,\r\n\t simple_stmt: 320,\r\n\t single_input: 256,\r\n\t sliceop: 321,\r\n\t small_stmt: 322,\r\n\t stmt: 323,\r\n\t subscript: 324,\r\n\t subscriptlist: 325,\r\n\t suite: 326,\r\n\t term: 327,\r\n\t test: 328,\r\n\t testlist: 329,\r\n\t testlist1: 330,\r\n\t testlist_comp: 331,\r\n\t testlist_safe: 332,\r\n\t trailer: 333,\r\n\t try_stmt: 334,\r\n\t varargslist: 335,\r\n\t while_stmt: 336,\r\n\t with_item: 337,\r\n\t with_stmt: 338,\r\n\t xor_expr: 339,\r\n\t yield_expr: 340,\r\n\t yield_stmt: 341},\r\n\tnumber2symbol:\r\n\t{256: 'single_input',\r\n\t 257: 'and_expr',\r\n\t 258: 'and_test',\r\n\t 259: 'arglist',\r\n\t 260: 'argument',\r\n\t 261: 'arith_expr',\r\n\t 262: 'assert_stmt',\r\n\t 263: 'atom',\r\n\t 264: 'augassign',\r\n\t 265: 'break_stmt',\r\n\t 266: 'classdef',\r\n\t 267: 'comp_for',\r\n\t 268: 'comp_if',\r\n\t 269: 'comp_iter',\r\n\t 270: 'comp_op',\r\n\t 271: 'comparison',\r\n\t 272: 'compound_stmt',\r\n\t 273: 'continue_stmt',\r\n\t 274: 'debugger_stmt',\r\n\t 275: 'decorated',\r\n\t 276: 'decorator',\r\n\t 277: 'decorators',\r\n\t 278: 'del_stmt',\r\n\t 279: 'dictorsetmaker',\r\n\t 280: 'dotted_as_name',\r\n\t 281: 'dotted_as_names',\r\n\t 282: 'dotted_name',\r\n\t 283: 'encoding_decl',\r\n\t 284: 'eval_input',\r\n\t 285: 'except_clause',\r\n\t 286: 'exec_stmt',\r\n\t 287: 'expr',\r\n\t 288: 'expr_stmt',\r\n\t 289: 'exprlist',\r\n\t 290: 'factor',\r\n\t 291: 'file_input',\r\n\t 292: 'flow_stmt',\r\n\t 293: 'for_stmt',\r\n\t 294: 'fpdef',\r\n\t 295: 'fplist',\r\n\t 296: 'funcdef',\r\n\t 297: 'global_stmt',\r\n\t 298: 'if_stmt',\r\n\t 299: 'import_as_name',\r\n\t 300: 'import_as_names',\r\n\t 301: 'import_from',\r\n\t 302: 'import_name',\r\n\t 303: 'import_stmt',\r\n\t 304: 'lambdef',\r\n\t 305: 'list_for',\r\n\t 306: 'list_if',\r\n\t 307: 'list_iter',\r\n\t 308: 'listmaker',\r\n\t 309: 'not_test',\r\n\t 310: 'old_lambdef',\r\n\t 311: 'old_test',\r\n\t 312: 'or_test',\r\n\t 313: 'parameters',\r\n\t 314: 'pass_stmt',\r\n\t 315: 'power',\r\n\t 316: 'print_stmt',\r\n\t 317: 'raise_stmt',\r\n\t 318: 'return_stmt',\r\n\t 319: 'shift_expr',\r\n\t 320: 'simple_stmt',\r\n\t 321: 'sliceop',\r\n\t 322: 'small_stmt',\r\n\t 323: 'stmt',\r\n\t 324: 'subscript',\r\n\t 325: 'subscriptlist',\r\n\t 326: 'suite',\r\n\t 327: 'term',\r\n\t 328: 'test',\r\n\t 329: 'testlist',\r\n\t 330: 'testlist1',\r\n\t 331: 'testlist_comp',\r\n\t 332: 'testlist_safe',\r\n\t 333: 'trailer',\r\n\t 334: 'try_stmt',\r\n\t 335: 'varargslist',\r\n\t 336: 'while_stmt',\r\n\t 337: 'with_item',\r\n\t 338: 'with_stmt',\r\n\t 339: 'xor_expr',\r\n\t 340: 'yield_expr',\r\n\t 341: 'yield_stmt'},\r\n\tdfas:\r\n\t{256: [[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],\r\n\t       {2: 1,\r\n\t        4: 1,\r\n\t        5: 1,\r\n\t        6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        10: 1,\r\n\t        11: 1,\r\n\t        12: 1,\r\n\t        13: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        16: 1,\r\n\t        17: 1,\r\n\t        18: 1,\r\n\t        19: 1,\r\n\t        20: 1,\r\n\t        21: 1,\r\n\t        22: 1,\r\n\t        23: 1,\r\n\t        24: 1,\r\n\t        25: 1,\r\n\t        26: 1,\r\n\t        27: 1,\r\n\t        28: 1,\r\n\t        29: 1,\r\n\t        30: 1,\r\n\t        31: 1,\r\n\t        32: 1,\r\n\t        33: 1,\r\n\t        34: 1,\r\n\t        35: 1,\r\n\t        36: 1,\r\n\t        37: 1}],\r\n\t 257: [[[[38, 1]], [[39, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 258: [[[[40, 1]], [[41, 0], [0, 1]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 259: [[[[42, 1], [43, 2], [44, 3]],\r\n\t        [[45, 4]],\r\n\t        [[46, 5], [0, 2]],\r\n\t        [[45, 6]],\r\n\t        [[46, 7], [0, 4]],\r\n\t        [[42, 1], [43, 2], [44, 3], [0, 5]],\r\n\t        [[0, 6]],\r\n\t        [[43, 4], [44, 3]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1,\r\n\t        42: 1,\r\n\t        44: 1}],\r\n\t 260: [[[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 261: [[[[49, 1]], [[26, 0], [37, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 262: [[[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],\r\n\t       {21: 1}],\r\n\t 263: [[[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],\r\n\t        [[19, 1], [0, 1]],\r\n\t        [[0, 2]],\r\n\t        [[50, 7], [51, 2]],\r\n\t        [[52, 2], [53, 8], [54, 8]],\r\n\t        [[55, 2], [56, 9]],\r\n\t        [[57, 10]],\r\n\t        [[51, 2]],\r\n\t        [[52, 2]],\r\n\t        [[55, 2]],\r\n\t        [[15, 2]]],\r\n\t       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],\r\n\t 264: [[[[58, 1],\r\n\t         [59, 1],\r\n\t         [60, 1],\r\n\t         [61, 1],\r\n\t         [62, 1],\r\n\t         [63, 1],\r\n\t         [64, 1],\r\n\t         [65, 1],\r\n\t         [66, 1],\r\n\t         [67, 1],\r\n\t         [68, 1],\r\n\t         [69, 1]],\r\n\t        [[0, 1]]],\r\n\t       {58: 1,\r\n\t        59: 1,\r\n\t        60: 1,\r\n\t        61: 1,\r\n\t        62: 1,\r\n\t        63: 1,\r\n\t        64: 1,\r\n\t        65: 1,\r\n\t        66: 1,\r\n\t        67: 1,\r\n\t        68: 1,\r\n\t        69: 1}],\r\n\t 265: [[[[33, 1]], [[0, 1]]], {33: 1}],\r\n\t 266: [[[[10, 1]],\r\n\t        [[22, 2]],\r\n\t        [[70, 3], [30, 4]],\r\n\t        [[71, 5]],\r\n\t        [[52, 6], [72, 7]],\r\n\t        [[0, 5]],\r\n\t        [[70, 3]],\r\n\t        [[52, 6]]],\r\n\t       {10: 1}],\r\n\t 267: [[[[29, 1]],\r\n\t        [[73, 2]],\r\n\t        [[74, 3]],\r\n\t        [[75, 4]],\r\n\t        [[76, 5], [0, 4]],\r\n\t        [[0, 5]]],\r\n\t       {29: 1}],\r\n\t 268: [[[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]], {32: 1}],\r\n\t 269: [[[[78, 1], [48, 1]], [[0, 1]]], {29: 1, 32: 1}],\r\n\t 270: [[[[79, 1],\r\n\t         [80, 1],\r\n\t         [7, 2],\r\n\t         [81, 1],\r\n\t         [79, 1],\r\n\t         [74, 1],\r\n\t         [82, 1],\r\n\t         [83, 3],\r\n\t         [84, 1],\r\n\t         [85, 1]],\r\n\t        [[0, 1]],\r\n\t        [[74, 1]],\r\n\t        [[7, 1], [0, 3]]],\r\n\t       {7: 1, 74: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1}],\r\n\t 271: [[[[86, 1]], [[87, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 272: [[[[88, 1],\r\n\t         [89, 1],\r\n\t         [90, 1],\r\n\t         [91, 1],\r\n\t         [92, 1],\r\n\t         [93, 1],\r\n\t         [94, 1],\r\n\t         [95, 1]],\r\n\t        [[0, 1]]],\r\n\t       {4: 1, 10: 1, 16: 1, 18: 1, 29: 1, 32: 1, 35: 1, 36: 1}],\r\n\t 273: [[[[34, 1]], [[0, 1]]], {34: 1}],\r\n\t 274: [[[[13, 1]], [[0, 1]]], {13: 1}],\r\n\t 275: [[[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]], {35: 1}],\r\n\t 276: [[[[35, 1]],\r\n\t        [[97, 2]],\r\n\t        [[2, 4], [30, 3]],\r\n\t        [[52, 5], [98, 6]],\r\n\t        [[0, 4]],\r\n\t        [[2, 4]],\r\n\t        [[52, 5]]],\r\n\t       {35: 1}],\r\n\t 277: [[[[99, 1]], [[99, 1], [0, 1]]], {35: 1}],\r\n\t 278: [[[[23, 1]], [[73, 2]], [[0, 2]]], {23: 1}],\r\n\t 279: [[[[45, 1]],\r\n\t        [[70, 2], [48, 3], [46, 4], [0, 1]],\r\n\t        [[45, 5]],\r\n\t        [[0, 3]],\r\n\t        [[45, 6], [0, 4]],\r\n\t        [[48, 3], [46, 7], [0, 5]],\r\n\t        [[46, 4], [0, 6]],\r\n\t        [[45, 8], [0, 7]],\r\n\t        [[70, 9]],\r\n\t        [[45, 10]],\r\n\t        [[46, 7], [0, 10]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 280: [[[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],\r\n\t 281: [[[[101, 1]], [[46, 0], [0, 1]]], {22: 1}],\r\n\t 282: [[[[22, 1]], [[102, 0], [0, 1]]], {22: 1}],\r\n\t 283: [[[[22, 1]], [[0, 1]]], {22: 1}],\r\n\t 284: [[[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 285: [[[[104, 1]],\r\n\t        [[45, 2], [0, 1]],\r\n\t        [[100, 3], [46, 3], [0, 2]],\r\n\t        [[45, 4]],\r\n\t        [[0, 4]]],\r\n\t       {104: 1}],\r\n\t 286: [[[[17, 1]],\r\n\t        [[86, 2]],\r\n\t        [[74, 3], [0, 2]],\r\n\t        [[45, 4]],\r\n\t        [[46, 5], [0, 4]],\r\n\t        [[45, 6]],\r\n\t        [[0, 6]]],\r\n\t       {17: 1}],\r\n\t 287: [[[[105, 1]], [[106, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 288: [[[[72, 1]],\r\n\t        [[107, 2], [47, 3], [0, 1]],\r\n\t        [[72, 4], [53, 4]],\r\n\t        [[72, 5], [53, 5]],\r\n\t        [[0, 4]],\r\n\t        [[47, 3], [0, 5]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 289: [[[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 290: [[[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 291: [[[[2, 0], [103, 1], [110, 0]], [[0, 1]]],\r\n\t       {2: 1,\r\n\t        4: 1,\r\n\t        5: 1,\r\n\t        6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        10: 1,\r\n\t        11: 1,\r\n\t        12: 1,\r\n\t        13: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        16: 1,\r\n\t        17: 1,\r\n\t        18: 1,\r\n\t        19: 1,\r\n\t        20: 1,\r\n\t        21: 1,\r\n\t        22: 1,\r\n\t        23: 1,\r\n\t        24: 1,\r\n\t        25: 1,\r\n\t        26: 1,\r\n\t        27: 1,\r\n\t        28: 1,\r\n\t        29: 1,\r\n\t        30: 1,\r\n\t        31: 1,\r\n\t        32: 1,\r\n\t        33: 1,\r\n\t        34: 1,\r\n\t        35: 1,\r\n\t        36: 1,\r\n\t        37: 1,\r\n\t        103: 1}],\r\n\t 292: [[[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],\r\n\t       {5: 1, 20: 1, 27: 1, 33: 1, 34: 1}],\r\n\t 293: [[[[29, 1]],\r\n\t        [[73, 2]],\r\n\t        [[74, 3]],\r\n\t        [[72, 4]],\r\n\t        [[70, 5]],\r\n\t        [[71, 6]],\r\n\t        [[116, 7], [0, 6]],\r\n\t        [[70, 8]],\r\n\t        [[71, 9]],\r\n\t        [[0, 9]]],\r\n\t       {29: 1}],\r\n\t 294: [[[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]], {22: 1, 30: 1}],\r\n\t 295: [[[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]], {22: 1, 30: 1}],\r\n\t 296: [[[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],\r\n\t       {4: 1}],\r\n\t 297: [[[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]], {28: 1}],\r\n\t 298: [[[[32, 1]],\r\n\t        [[45, 2]],\r\n\t        [[70, 3]],\r\n\t        [[71, 4]],\r\n\t        [[116, 5], [120, 1], [0, 4]],\r\n\t        [[70, 6]],\r\n\t        [[71, 7]],\r\n\t        [[0, 7]]],\r\n\t       {32: 1}],\r\n\t 299: [[[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],\r\n\t 300: [[[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]], {22: 1}],\r\n\t 301: [[[[31, 1]],\r\n\t        [[97, 2], [102, 3]],\r\n\t        [[25, 4]],\r\n\t        [[97, 2], [25, 4], [102, 3]],\r\n\t        [[122, 5], [42, 5], [30, 6]],\r\n\t        [[0, 5]],\r\n\t        [[122, 7]],\r\n\t        [[52, 5]]],\r\n\t       {31: 1}],\r\n\t 302: [[[[25, 1]], [[123, 2]], [[0, 2]]], {25: 1}],\r\n\t 303: [[[[124, 1], [125, 1]], [[0, 1]]], {25: 1, 31: 1}],\r\n\t 304: [[[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],\r\n\t       {11: 1}],\r\n\t 305: [[[[29, 1]],\r\n\t        [[73, 2]],\r\n\t        [[74, 3]],\r\n\t        [[127, 4]],\r\n\t        [[128, 5], [0, 4]],\r\n\t        [[0, 5]]],\r\n\t       {29: 1}],\r\n\t 306: [[[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]], {32: 1}],\r\n\t 307: [[[[129, 1], [130, 1]], [[0, 1]]], {29: 1, 32: 1}],\r\n\t 308: [[[[45, 1]],\r\n\t        [[129, 2], [46, 3], [0, 1]],\r\n\t        [[0, 2]],\r\n\t        [[45, 4], [0, 3]],\r\n\t        [[46, 3], [0, 4]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 309: [[[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 310: [[[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],\r\n\t       {11: 1}],\r\n\t 311: [[[[132, 1], [75, 1]], [[0, 1]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 312: [[[[133, 1]], [[134, 0], [0, 1]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 313: [[[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]], {30: 1}],\r\n\t 314: [[[[24, 1]], [[0, 1]]], {24: 1}],\r\n\t 315: [[[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],\r\n\t       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],\r\n\t 316: [[[[12, 1]],\r\n\t        [[45, 2], [137, 3], [0, 1]],\r\n\t        [[46, 4], [0, 2]],\r\n\t        [[45, 5]],\r\n\t        [[45, 2], [0, 4]],\r\n\t        [[46, 6], [0, 5]],\r\n\t        [[45, 7]],\r\n\t        [[46, 8], [0, 7]],\r\n\t        [[45, 7], [0, 8]]],\r\n\t       {12: 1}],\r\n\t 317: [[[[5, 1]],\r\n\t        [[45, 2], [0, 1]],\r\n\t        [[46, 3], [0, 2]],\r\n\t        [[45, 4]],\r\n\t        [[46, 5], [0, 4]],\r\n\t        [[45, 6]],\r\n\t        [[0, 6]]],\r\n\t       {5: 1}],\r\n\t 318: [[[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]], {20: 1}],\r\n\t 319: [[[[138, 1]], [[139, 0], [137, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 320: [[[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],\r\n\t       {5: 1,\r\n\t        6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        12: 1,\r\n\t        13: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        17: 1,\r\n\t        19: 1,\r\n\t        20: 1,\r\n\t        21: 1,\r\n\t        22: 1,\r\n\t        23: 1,\r\n\t        24: 1,\r\n\t        25: 1,\r\n\t        26: 1,\r\n\t        27: 1,\r\n\t        28: 1,\r\n\t        30: 1,\r\n\t        31: 1,\r\n\t        33: 1,\r\n\t        34: 1,\r\n\t        37: 1}],\r\n\t 321: [[[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]], {70: 1}],\r\n\t 322: [[[[142, 1],\r\n\t         [143, 1],\r\n\t         [144, 1],\r\n\t         [145, 1],\r\n\t         [146, 1],\r\n\t         [147, 1],\r\n\t         [148, 1],\r\n\t         [149, 1],\r\n\t         [150, 1],\r\n\t         [151, 1]],\r\n\t        [[0, 1]]],\r\n\t       {5: 1,\r\n\t        6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        12: 1,\r\n\t        13: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        17: 1,\r\n\t        19: 1,\r\n\t        20: 1,\r\n\t        21: 1,\r\n\t        22: 1,\r\n\t        23: 1,\r\n\t        24: 1,\r\n\t        25: 1,\r\n\t        26: 1,\r\n\t        27: 1,\r\n\t        28: 1,\r\n\t        30: 1,\r\n\t        31: 1,\r\n\t        33: 1,\r\n\t        34: 1,\r\n\t        37: 1}],\r\n\t 323: [[[[1, 1], [3, 1]], [[0, 1]]],\r\n\t       {4: 1,\r\n\t        5: 1,\r\n\t        6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        10: 1,\r\n\t        11: 1,\r\n\t        12: 1,\r\n\t        13: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        16: 1,\r\n\t        17: 1,\r\n\t        18: 1,\r\n\t        19: 1,\r\n\t        20: 1,\r\n\t        21: 1,\r\n\t        22: 1,\r\n\t        23: 1,\r\n\t        24: 1,\r\n\t        25: 1,\r\n\t        26: 1,\r\n\t        27: 1,\r\n\t        28: 1,\r\n\t        29: 1,\r\n\t        30: 1,\r\n\t        31: 1,\r\n\t        32: 1,\r\n\t        33: 1,\r\n\t        34: 1,\r\n\t        35: 1,\r\n\t        36: 1,\r\n\t        37: 1}],\r\n\t 324: [[[[45, 1], [70, 2], [102, 3]],\r\n\t        [[70, 2], [0, 1]],\r\n\t        [[45, 4], [152, 5], [0, 2]],\r\n\t        [[102, 6]],\r\n\t        [[152, 5], [0, 4]],\r\n\t        [[0, 5]],\r\n\t        [[102, 5]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1,\r\n\t        70: 1,\r\n\t        102: 1}],\r\n\t 325: [[[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1,\r\n\t        70: 1,\r\n\t        102: 1}],\r\n\t 326: [[[[1, 1], [2, 2]],\r\n\t        [[0, 1]],\r\n\t        [[154, 3]],\r\n\t        [[110, 4]],\r\n\t        [[155, 1], [110, 4]]],\r\n\t       {2: 1,\r\n\t        5: 1,\r\n\t        6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        12: 1,\r\n\t        13: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        17: 1,\r\n\t        19: 1,\r\n\t        20: 1,\r\n\t        21: 1,\r\n\t        22: 1,\r\n\t        23: 1,\r\n\t        24: 1,\r\n\t        25: 1,\r\n\t        26: 1,\r\n\t        27: 1,\r\n\t        28: 1,\r\n\t        30: 1,\r\n\t        31: 1,\r\n\t        33: 1,\r\n\t        34: 1,\r\n\t        37: 1}],\r\n\t 327: [[[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 328: [[[[75, 1], [159, 2]],\r\n\t        [[32, 3], [0, 1]],\r\n\t        [[0, 2]],\r\n\t        [[75, 4]],\r\n\t        [[116, 5]],\r\n\t        [[45, 2]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 329: [[[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 330: [[[[45, 1]], [[46, 0], [0, 1]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 331: [[[[45, 1]],\r\n\t        [[48, 2], [46, 3], [0, 1]],\r\n\t        [[0, 2]],\r\n\t        [[45, 4], [0, 3]],\r\n\t        [[46, 3], [0, 4]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 332: [[[[77, 1]],\r\n\t        [[46, 2], [0, 1]],\r\n\t        [[77, 3]],\r\n\t        [[46, 4], [0, 3]],\r\n\t        [[77, 3], [0, 4]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 333: [[[[30, 1], [102, 2], [14, 3]],\r\n\t        [[52, 4], [98, 5]],\r\n\t        [[22, 4]],\r\n\t        [[160, 6]],\r\n\t        [[0, 4]],\r\n\t        [[52, 4]],\r\n\t        [[51, 4]]],\r\n\t       {14: 1, 30: 1, 102: 1}],\r\n\t 334: [[[[16, 1]],\r\n\t        [[70, 2]],\r\n\t        [[71, 3]],\r\n\t        [[161, 4], [162, 5]],\r\n\t        [[70, 6]],\r\n\t        [[70, 7]],\r\n\t        [[71, 8]],\r\n\t        [[71, 9]],\r\n\t        [[161, 4], [116, 10], [162, 5], [0, 8]],\r\n\t        [[0, 9]],\r\n\t        [[70, 11]],\r\n\t        [[71, 12]],\r\n\t        [[162, 5], [0, 12]]],\r\n\t       {16: 1}],\r\n\t 335: [[[[42, 1], [118, 2], [44, 3]],\r\n\t        [[22, 4]],\r\n\t        [[47, 5], [46, 6], [0, 2]],\r\n\t        [[22, 7]],\r\n\t        [[46, 8], [0, 4]],\r\n\t        [[45, 9]],\r\n\t        [[42, 1], [118, 2], [44, 3], [0, 6]],\r\n\t        [[0, 7]],\r\n\t        [[44, 3]],\r\n\t        [[46, 6], [0, 9]]],\r\n\t       {22: 1, 30: 1, 42: 1, 44: 1}],\r\n\t 336: [[[[18, 1]],\r\n\t        [[45, 2]],\r\n\t        [[70, 3]],\r\n\t        [[71, 4]],\r\n\t        [[116, 5], [0, 4]],\r\n\t        [[70, 6]],\r\n\t        [[71, 7]],\r\n\t        [[0, 7]]],\r\n\t       {18: 1}],\r\n\t 337: [[[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],\r\n\t       {6: 1,\r\n\t        7: 1,\r\n\t        8: 1,\r\n\t        9: 1,\r\n\t        11: 1,\r\n\t        14: 1,\r\n\t        15: 1,\r\n\t        19: 1,\r\n\t        22: 1,\r\n\t        26: 1,\r\n\t        30: 1,\r\n\t        37: 1}],\r\n\t 338: [[[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],\r\n\t       {36: 1}],\r\n\t 339: [[[[164, 1]], [[165, 0], [0, 1]]],\r\n\t       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],\r\n\t 340: [[[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]], {27: 1}],\r\n\t 341: [[[[53, 1]], [[0, 1]]], {27: 1}]},\r\n\tstates:\r\n\t[[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],\r\n\t [[[38, 1]], [[39, 0], [0, 1]]],\r\n\t [[[40, 1]], [[41, 0], [0, 1]]],\r\n\t [[[42, 1], [43, 2], [44, 3]],\r\n\t  [[45, 4]],\r\n\t  [[46, 5], [0, 2]],\r\n\t  [[45, 6]],\r\n\t  [[46, 7], [0, 4]],\r\n\t  [[42, 1], [43, 2], [44, 3], [0, 5]],\r\n\t  [[0, 6]],\r\n\t  [[43, 4], [44, 3]]],\r\n\t [[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],\r\n\t [[[49, 1]], [[26, 0], [37, 0], [0, 1]]],\r\n\t [[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],\r\n\t [[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],\r\n\t  [[19, 1], [0, 1]],\r\n\t  [[0, 2]],\r\n\t  [[50, 7], [51, 2]],\r\n\t  [[52, 2], [53, 8], [54, 8]],\r\n\t  [[55, 2], [56, 9]],\r\n\t  [[57, 10]],\r\n\t  [[51, 2]],\r\n\t  [[52, 2]],\r\n\t  [[55, 2]],\r\n\t  [[15, 2]]],\r\n\t [[[58, 1],\r\n\t   [59, 1],\r\n\t   [60, 1],\r\n\t   [61, 1],\r\n\t   [62, 1],\r\n\t   [63, 1],\r\n\t   [64, 1],\r\n\t   [65, 1],\r\n\t   [66, 1],\r\n\t   [67, 1],\r\n\t   [68, 1],\r\n\t   [69, 1]],\r\n\t  [[0, 1]]],\r\n\t [[[33, 1]], [[0, 1]]],\r\n\t [[[10, 1]],\r\n\t  [[22, 2]],\r\n\t  [[70, 3], [30, 4]],\r\n\t  [[71, 5]],\r\n\t  [[52, 6], [72, 7]],\r\n\t  [[0, 5]],\r\n\t  [[70, 3]],\r\n\t  [[52, 6]]],\r\n\t [[[29, 1]], [[73, 2]], [[74, 3]], [[75, 4]], [[76, 5], [0, 4]], [[0, 5]]],\r\n\t [[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]],\r\n\t [[[78, 1], [48, 1]], [[0, 1]]],\r\n\t [[[79, 1],\r\n\t   [80, 1],\r\n\t   [7, 2],\r\n\t   [81, 1],\r\n\t   [79, 1],\r\n\t   [74, 1],\r\n\t   [82, 1],\r\n\t   [83, 3],\r\n\t   [84, 1],\r\n\t   [85, 1]],\r\n\t  [[0, 1]],\r\n\t  [[74, 1]],\r\n\t  [[7, 1], [0, 3]]],\r\n\t [[[86, 1]], [[87, 0], [0, 1]]],\r\n\t [[[88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1]],\r\n\t  [[0, 1]]],\r\n\t [[[34, 1]], [[0, 1]]],\r\n\t [[[13, 1]], [[0, 1]]],\r\n\t [[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]],\r\n\t [[[35, 1]],\r\n\t  [[97, 2]],\r\n\t  [[2, 4], [30, 3]],\r\n\t  [[52, 5], [98, 6]],\r\n\t  [[0, 4]],\r\n\t  [[2, 4]],\r\n\t  [[52, 5]]],\r\n\t [[[99, 1]], [[99, 1], [0, 1]]],\r\n\t [[[23, 1]], [[73, 2]], [[0, 2]]],\r\n\t [[[45, 1]],\r\n\t  [[70, 2], [48, 3], [46, 4], [0, 1]],\r\n\t  [[45, 5]],\r\n\t  [[0, 3]],\r\n\t  [[45, 6], [0, 4]],\r\n\t  [[48, 3], [46, 7], [0, 5]],\r\n\t  [[46, 4], [0, 6]],\r\n\t  [[45, 8], [0, 7]],\r\n\t  [[70, 9]],\r\n\t  [[45, 10]],\r\n\t  [[46, 7], [0, 10]]],\r\n\t [[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],\r\n\t [[[101, 1]], [[46, 0], [0, 1]]],\r\n\t [[[22, 1]], [[102, 0], [0, 1]]],\r\n\t [[[22, 1]], [[0, 1]]],\r\n\t [[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],\r\n\t [[[104, 1]],\r\n\t  [[45, 2], [0, 1]],\r\n\t  [[100, 3], [46, 3], [0, 2]],\r\n\t  [[45, 4]],\r\n\t  [[0, 4]]],\r\n\t [[[17, 1]],\r\n\t  [[86, 2]],\r\n\t  [[74, 3], [0, 2]],\r\n\t  [[45, 4]],\r\n\t  [[46, 5], [0, 4]],\r\n\t  [[45, 6]],\r\n\t  [[0, 6]]],\r\n\t [[[105, 1]], [[106, 0], [0, 1]]],\r\n\t [[[72, 1]],\r\n\t  [[107, 2], [47, 3], [0, 1]],\r\n\t  [[72, 4], [53, 4]],\r\n\t  [[72, 5], [53, 5]],\r\n\t  [[0, 4]],\r\n\t  [[47, 3], [0, 5]]],\r\n\t [[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],\r\n\t [[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],\r\n\t [[[2, 0], [103, 1], [110, 0]], [[0, 1]]],\r\n\t [[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],\r\n\t [[[29, 1]],\r\n\t  [[73, 2]],\r\n\t  [[74, 3]],\r\n\t  [[72, 4]],\r\n\t  [[70, 5]],\r\n\t  [[71, 6]],\r\n\t  [[116, 7], [0, 6]],\r\n\t  [[70, 8]],\r\n\t  [[71, 9]],\r\n\t  [[0, 9]]],\r\n\t [[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]],\r\n\t [[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]],\r\n\t [[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],\r\n\t [[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]],\r\n\t [[[32, 1]],\r\n\t  [[45, 2]],\r\n\t  [[70, 3]],\r\n\t  [[71, 4]],\r\n\t  [[116, 5], [120, 1], [0, 4]],\r\n\t  [[70, 6]],\r\n\t  [[71, 7]],\r\n\t  [[0, 7]]],\r\n\t [[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],\r\n\t [[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]],\r\n\t [[[31, 1]],\r\n\t  [[97, 2], [102, 3]],\r\n\t  [[25, 4]],\r\n\t  [[97, 2], [25, 4], [102, 3]],\r\n\t  [[122, 5], [42, 5], [30, 6]],\r\n\t  [[0, 5]],\r\n\t  [[122, 7]],\r\n\t  [[52, 5]]],\r\n\t [[[25, 1]], [[123, 2]], [[0, 2]]],\r\n\t [[[124, 1], [125, 1]], [[0, 1]]],\r\n\t [[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],\r\n\t [[[29, 1]], [[73, 2]], [[74, 3]], [[127, 4]], [[128, 5], [0, 4]], [[0, 5]]],\r\n\t [[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]],\r\n\t [[[129, 1], [130, 1]], [[0, 1]]],\r\n\t [[[45, 1]],\r\n\t  [[129, 2], [46, 3], [0, 1]],\r\n\t  [[0, 2]],\r\n\t  [[45, 4], [0, 3]],\r\n\t  [[46, 3], [0, 4]]],\r\n\t [[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],\r\n\t [[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],\r\n\t [[[132, 1], [75, 1]], [[0, 1]]],\r\n\t [[[133, 1]], [[134, 0], [0, 1]]],\r\n\t [[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]],\r\n\t [[[24, 1]], [[0, 1]]],\r\n\t [[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],\r\n\t [[[12, 1]],\r\n\t  [[45, 2], [137, 3], [0, 1]],\r\n\t  [[46, 4], [0, 2]],\r\n\t  [[45, 5]],\r\n\t  [[45, 2], [0, 4]],\r\n\t  [[46, 6], [0, 5]],\r\n\t  [[45, 7]],\r\n\t  [[46, 8], [0, 7]],\r\n\t  [[45, 7], [0, 8]]],\r\n\t [[[5, 1]],\r\n\t  [[45, 2], [0, 1]],\r\n\t  [[46, 3], [0, 2]],\r\n\t  [[45, 4]],\r\n\t  [[46, 5], [0, 4]],\r\n\t  [[45, 6]],\r\n\t  [[0, 6]]],\r\n\t [[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]],\r\n\t [[[138, 1]], [[139, 0], [137, 0], [0, 1]]],\r\n\t [[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],\r\n\t [[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]],\r\n\t [[[142, 1],\r\n\t   [143, 1],\r\n\t   [144, 1],\r\n\t   [145, 1],\r\n\t   [146, 1],\r\n\t   [147, 1],\r\n\t   [148, 1],\r\n\t   [149, 1],\r\n\t   [150, 1],\r\n\t   [151, 1]],\r\n\t  [[0, 1]]],\r\n\t [[[1, 1], [3, 1]], [[0, 1]]],\r\n\t [[[45, 1], [70, 2], [102, 3]],\r\n\t  [[70, 2], [0, 1]],\r\n\t  [[45, 4], [152, 5], [0, 2]],\r\n\t  [[102, 6]],\r\n\t  [[152, 5], [0, 4]],\r\n\t  [[0, 5]],\r\n\t  [[102, 5]]],\r\n\t [[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],\r\n\t [[[1, 1], [2, 2]], [[0, 1]], [[154, 3]], [[110, 4]], [[155, 1], [110, 4]]],\r\n\t [[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],\r\n\t [[[75, 1], [159, 2]],\r\n\t  [[32, 3], [0, 1]],\r\n\t  [[0, 2]],\r\n\t  [[75, 4]],\r\n\t  [[116, 5]],\r\n\t  [[45, 2]]],\r\n\t [[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],\r\n\t [[[45, 1]], [[46, 0], [0, 1]]],\r\n\t [[[45, 1]],\r\n\t  [[48, 2], [46, 3], [0, 1]],\r\n\t  [[0, 2]],\r\n\t  [[45, 4], [0, 3]],\r\n\t  [[46, 3], [0, 4]]],\r\n\t [[[77, 1]],\r\n\t  [[46, 2], [0, 1]],\r\n\t  [[77, 3]],\r\n\t  [[46, 4], [0, 3]],\r\n\t  [[77, 3], [0, 4]]],\r\n\t [[[30, 1], [102, 2], [14, 3]],\r\n\t  [[52, 4], [98, 5]],\r\n\t  [[22, 4]],\r\n\t  [[160, 6]],\r\n\t  [[0, 4]],\r\n\t  [[52, 4]],\r\n\t  [[51, 4]]],\r\n\t [[[16, 1]],\r\n\t  [[70, 2]],\r\n\t  [[71, 3]],\r\n\t  [[161, 4], [162, 5]],\r\n\t  [[70, 6]],\r\n\t  [[70, 7]],\r\n\t  [[71, 8]],\r\n\t  [[71, 9]],\r\n\t  [[161, 4], [116, 10], [162, 5], [0, 8]],\r\n\t  [[0, 9]],\r\n\t  [[70, 11]],\r\n\t  [[71, 12]],\r\n\t  [[162, 5], [0, 12]]],\r\n\t [[[42, 1], [118, 2], [44, 3]],\r\n\t  [[22, 4]],\r\n\t  [[47, 5], [46, 6], [0, 2]],\r\n\t  [[22, 7]],\r\n\t  [[46, 8], [0, 4]],\r\n\t  [[45, 9]],\r\n\t  [[42, 1], [118, 2], [44, 3], [0, 6]],\r\n\t  [[0, 7]],\r\n\t  [[44, 3]],\r\n\t  [[46, 6], [0, 9]]],\r\n\t [[[18, 1]],\r\n\t  [[45, 2]],\r\n\t  [[70, 3]],\r\n\t  [[71, 4]],\r\n\t  [[116, 5], [0, 4]],\r\n\t  [[70, 6]],\r\n\t  [[71, 7]],\r\n\t  [[0, 7]]],\r\n\t [[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],\r\n\t [[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],\r\n\t [[[164, 1]], [[165, 0], [0, 1]]],\r\n\t [[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]],\r\n\t [[[53, 1]], [[0, 1]]]],\r\n\tlabels:\r\n\t[[0, 'EMPTY'],\r\n\t [320, null],\r\n\t [4, null],\r\n\t [272, null],\r\n\t [1, 'def'],\r\n\t [1, 'raise'],\r\n\t [32, null],\r\n\t [1, 'not'],\r\n\t [2, null],\r\n\t [26, null],\r\n\t [1, 'class'],\r\n\t [1, 'lambda'],\r\n\t [1, 'print'],\r\n\t [1, 'debugger'],\r\n\t [9, null],\r\n\t [25, null],\r\n\t [1, 'try'],\r\n\t [1, 'exec'],\r\n\t [1, 'while'],\r\n\t [3, null],\r\n\t [1, 'return'],\r\n\t [1, 'assert'],\r\n\t [1, null],\r\n\t [1, 'del'],\r\n\t [1, 'pass'],\r\n\t [1, 'import'],\r\n\t [15, null],\r\n\t [1, 'yield'],\r\n\t [1, 'global'],\r\n\t [1, 'for'],\r\n\t [7, null],\r\n\t [1, 'from'],\r\n\t [1, 'if'],\r\n\t [1, 'break'],\r\n\t [1, 'continue'],\r\n\t [50, null],\r\n\t [1, 'with'],\r\n\t [14, null],\r\n\t [319, null],\r\n\t [19, null],\r\n\t [309, null],\r\n\t [1, 'and'],\r\n\t [16, null],\r\n\t [260, null],\r\n\t [36, null],\r\n\t [328, null],\r\n\t [12, null],\r\n\t [22, null],\r\n\t [267, null],\r\n\t [327, null],\r\n\t [308, null],\r\n\t [10, null],\r\n\t [8, null],\r\n\t [340, null],\r\n\t [331, null],\r\n\t [27, null],\r\n\t [279, null],\r\n\t [330, null],\r\n\t [46, null],\r\n\t [39, null],\r\n\t [41, null],\r\n\t [47, null],\r\n\t [42, null],\r\n\t [43, null],\r\n\t [37, null],\r\n\t [44, null],\r\n\t [49, null],\r\n\t [45, null],\r\n\t [38, null],\r\n\t [40, null],\r\n\t [11, null],\r\n\t [326, null],\r\n\t [329, null],\r\n\t [289, null],\r\n\t [1, 'in'],\r\n\t [312, null],\r\n\t [269, null],\r\n\t [311, null],\r\n\t [268, null],\r\n\t [29, null],\r\n\t [21, null],\r\n\t [28, null],\r\n\t [30, null],\r\n\t [1, 'is'],\r\n\t [31, null],\r\n\t [20, null],\r\n\t [287, null],\r\n\t [270, null],\r\n\t [334, null],\r\n\t [298, null],\r\n\t [293, null],\r\n\t [266, null],\r\n\t [338, null],\r\n\t [336, null],\r\n\t [296, null],\r\n\t [275, null],\r\n\t [277, null],\r\n\t [282, null],\r\n\t [259, null],\r\n\t [276, null],\r\n\t [1, 'as'],\r\n\t [280, null],\r\n\t [23, null],\r\n\t [0, null],\r\n\t [1, 'except'],\r\n\t [339, null],\r\n\t [18, null],\r\n\t [264, null],\r\n\t [315, null],\r\n\t [290, null],\r\n\t [323, null],\r\n\t [265, null],\r\n\t [273, null],\r\n\t [317, null],\r\n\t [318, null],\r\n\t [341, null],\r\n\t [1, 'else'],\r\n\t [295, null],\r\n\t [294, null],\r\n\t [313, null],\r\n\t [1, 'elif'],\r\n\t [299, null],\r\n\t [300, null],\r\n\t [281, null],\r\n\t [302, null],\r\n\t [301, null],\r\n\t [335, null],\r\n\t [332, null],\r\n\t [307, null],\r\n\t [305, null],\r\n\t [306, null],\r\n\t [271, null],\r\n\t [310, null],\r\n\t [258, null],\r\n\t [1, 'or'],\r\n\t [263, null],\r\n\t [333, null],\r\n\t [35, null],\r\n\t [261, null],\r\n\t [34, null],\r\n\t [322, null],\r\n\t [13, null],\r\n\t [292, null],\r\n\t [278, null],\r\n\t [288, null],\r\n\t [314, null],\r\n\t [316, null],\r\n\t [262, null],\r\n\t [286, null],\r\n\t [297, null],\r\n\t [303, null],\r\n\t [274, null],\r\n\t [321, null],\r\n\t [324, null],\r\n\t [5, null],\r\n\t [6, null],\r\n\t [48, null],\r\n\t [17, null],\r\n\t [24, null],\r\n\t [304, null],\r\n\t [325, null],\r\n\t [285, null],\r\n\t [1, 'finally'],\r\n\t [337, null],\r\n\t [257, null],\r\n\t [33, null]],\r\n\tkeywords:\r\n\t{'and': 41,\r\n\t 'as': 100,\r\n\t 'assert': 21,\r\n\t 'break': 33,\r\n\t 'class': 10,\r\n\t 'continue': 34,\r\n\t 'debugger': 13,\r\n\t 'def': 4,\r\n\t 'del': 23,\r\n\t 'elif': 120,\r\n\t 'else': 116,\r\n\t 'except': 104,\r\n\t 'exec': 17,\r\n\t 'finally': 162,\r\n\t 'for': 29,\r\n\t 'from': 31,\r\n\t 'global': 28,\r\n\t 'if': 32,\r\n\t 'import': 25,\r\n\t 'in': 74,\r\n\t 'is': 83,\r\n\t 'lambda': 11,\r\n\t 'not': 7,\r\n\t 'or': 134,\r\n\t 'pass': 24,\r\n\t 'print': 12,\r\n\t 'raise': 5,\r\n\t 'return': 20,\r\n\t 'try': 16,\r\n\t 'while': 18,\r\n\t 'with': 36,\r\n\t 'yield': 27},\r\n\ttokens:\r\n\t{0: 103,\r\n\t 1: 22,\r\n\t 2: 8,\r\n\t 3: 19,\r\n\t 4: 2,\r\n\t 5: 154,\r\n\t 6: 155,\r\n\t 7: 30,\r\n\t 8: 52,\r\n\t 9: 14,\r\n\t 10: 51,\r\n\t 11: 70,\r\n\t 12: 46,\r\n\t 13: 141,\r\n\t 14: 37,\r\n\t 15: 26,\r\n\t 16: 42,\r\n\t 17: 157,\r\n\t 18: 106,\r\n\t 19: 39,\r\n\t 20: 85,\r\n\t 21: 80,\r\n\t 22: 47,\r\n\t 23: 102,\r\n\t 24: 158,\r\n\t 25: 15,\r\n\t 26: 9,\r\n\t 27: 55,\r\n\t 28: 81,\r\n\t 29: 79,\r\n\t 30: 82,\r\n\t 31: 84,\r\n\t 32: 6,\r\n\t 33: 165,\r\n\t 34: 139,\r\n\t 35: 137,\r\n\t 36: 44,\r\n\t 37: 64,\r\n\t 38: 68,\r\n\t 39: 59,\r\n\t 40: 69,\r\n\t 41: 60,\r\n\t 42: 62,\r\n\t 43: 63,\r\n\t 44: 65,\r\n\t 45: 67,\r\n\t 46: 58,\r\n\t 47: 61,\r\n\t 48: 156,\r\n\t 49: 66,\r\n\t 50: 35},\r\n\tstart: 256\r\n\t};\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/parser.js ---- */ \r\n\r\n\t// low level parser to a concrete syntax tree, derived from cpython's lib2to3\r\n\r\n\t/**\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} grammar\r\n\t *\r\n\t * p = new Parser(grammar);\r\n\t * p.setup([start]);\r\n\t * foreach input token:\r\n\t *     if p.addtoken(...):\r\n\t *         break\r\n\t * root = p.rootnode\r\n\t *\r\n\t * can throw SyntaxError\r\n\t */\r\n\tfunction Parser (filename, grammar) {\r\n\t    this.filename = filename;\r\n\t    this.grammar = grammar;\r\n\t    this.p_flags = 0;\r\n\t    return this;\r\n\t}\r\n\r\n\t// all possible parser flags\r\n\tParser.FUTURE_PRINT_FUNCTION = \"print_function\";\r\n\tParser.FUTURE_UNICODE_LITERALS = \"unicode_literals\";\r\n\tParser.FUTURE_DIVISION = \"division\";\r\n\tParser.FUTURE_ABSOLUTE_IMPORT = \"absolute_import\";\r\n\tParser.FUTURE_WITH_STATEMENT = \"with_statement\";\r\n\tParser.FUTURE_NESTED_SCOPES = \"nested_scopes\";\r\n\tParser.FUTURE_GENERATORS = \"generators\";\r\n\tParser.CO_FUTURE_PRINT_FUNCTION = 0x10000;\r\n\tParser.CO_FUTURE_UNICODE_LITERALS = 0x20000;\r\n\tParser.CO_FUTURE_DIVISON = 0x2000;\r\n\tParser.CO_FUTURE_ABSOLUTE_IMPORT = 0x4000;\r\n\tParser.CO_FUTURE_WITH_STATEMENT = 0x8000;\r\n\r\n\tParser.prototype.setup = function (start) {\r\n\t    var stackentry;\r\n\t    var newnode;\r\n\t    start = start || this.grammar.start;\r\n\t    //print(\"START:\"+start);\r\n\r\n\t    newnode =\r\n\t    {\r\n\t        type    : start,\r\n\t        value   : null,\r\n\t        context : null,\r\n\t        children: []\r\n\t    };\r\n\t    stackentry =\r\n\t    {\r\n\t        dfa  : this.grammar.dfas[start],\r\n\t        state: 0,\r\n\t        node : newnode\r\n\t    };\r\n\t    this.stack = [stackentry];\r\n\t    this.used_names = {};\r\n\t};\r\n\r\n\tfunction findInDfa (a, obj) {\r\n\t    var i = a.length;\r\n\t    while (i--) {\r\n\t        if (a[i][0] === obj[0] && a[i][1] === obj[1]) {\r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\t    return false;\r\n\t}\r\n\r\n\r\n\t// Add a token; return true if we're done\r\n\tParser.prototype.addtoken = function (type, value, context) {\r\n\t    var errline;\r\n\t    var itsfirst;\r\n\t    var itsdfa;\r\n\t    var state;\r\n\t    var v;\r\n\t    var t;\r\n\t    var newstate;\r\n\t    var i;\r\n\t    var a;\r\n\t    var arcs;\r\n\t    var first;\r\n\t    var states;\r\n\t    var tp;\r\n\t    var ilabel = this.classify(type, value, context);\r\n\t    //print(\"ilabel:\"+ilabel);\r\n\r\n\t    OUTERWHILE:\r\n\t    while (true) {\r\n\t        tp = this.stack[this.stack.length - 1];\r\n\t        states = tp.dfa[0];\r\n\t        first = tp.dfa[1];\r\n\t        arcs = states[tp.state];\r\n\r\n\t        // look for a state with this label\r\n\t        for (a = 0; a < arcs.length; ++a) {\r\n\t            i = arcs[a][0];\r\n\t            newstate = arcs[a][1];\r\n\t            t = this.grammar.labels[i][0];\r\n\t            v = this.grammar.labels[i][1];\r\n\t            if (ilabel === i) {\r\n\t                // look it up in the list of labels\r\n\t                goog.asserts.assert(t < 256);\r\n\t                // shift a token; we're done with it\r\n\t                this.shift(type, value, newstate, context);\r\n\t                // pop while we are in an accept-only state\r\n\t                state = newstate;\r\n\t                //print(\"before:\"+JSON.stringify(states[state]) + \":state:\"+state+\":\"+JSON.stringify(states[state]));\r\n\t                /* jshint ignore:start */\r\n\t                while (states[state].length === 1\r\n\t                    && states[state][0][0] === 0\r\n\t                    && states[state][0][1] === state) {\r\n\t                    // states[state] == [(0, state)])\r\n\t                    this.pop();\r\n\t                    //print(\"in after pop:\"+JSON.stringify(states[state]) + \":state:\"+state+\":\"+JSON.stringify(states[state]));\r\n\t                    if (this.stack.length === 0) {\r\n\t                        // done!\r\n\t                        return true;\r\n\t                    }\r\n\t                    tp = this.stack[this.stack.length - 1];\r\n\t                    state = tp.state;\r\n\t                    states = tp.dfa[0];\r\n\t                    first = tp.dfa[1];\r\n\t                    //print(JSON.stringify(states), JSON.stringify(first));\r\n\t                    //print(\"bottom:\"+JSON.stringify(states[state]) + \":state:\"+state+\":\"+JSON.stringify(states[state]));\r\n\t                }\r\n\t                /* jshint ignore:end */\r\n\t                // done with this token\r\n\t                //print(\"DONE, return false\");\r\n\t                return false;\r\n\t            } else if (t >= 256) {\r\n\t                itsdfa = this.grammar.dfas[t];\r\n\t                itsfirst = itsdfa[1];\r\n\t                if (itsfirst.hasOwnProperty(ilabel)) {\r\n\t                    // push a symbol\r\n\t                    this.push(t, this.grammar.dfas[t], newstate, context);\r\n\t                    continue OUTERWHILE;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        //print(\"findInDfa: \" + JSON.stringify(arcs)+\" vs. \" + tp.state);\r\n\t        if (findInDfa(arcs, [0, tp.state])) {\r\n\t            // an accepting state, pop it and try somethign else\r\n\t            //print(\"WAA\");\r\n\t            this.pop();\r\n\t            if (this.stack.length === 0) {\r\n\t                throw new Sk.builtin.SyntaxError(\"too much input\", this.filename);\r\n\t            }\r\n\t        } else {\r\n\t            // no transition\r\n\t            errline = context[0][0];\r\n\r\n\t            var that = this;\r\n\t            var ar = arcs.map(function(a) {\r\n\t                var i = a[0];\r\n\t                var t = that.grammar.labels[i][0];\r\n\t                return Sk.nameForToken(t);\r\n\t            });\r\n\t            var extra = {\r\n\t                kind: \"DAG_MISS\",\r\n\t                expected: ar,\r\n\t                found: Sk.nameForToken(type),\r\n\t                found_val: value,\r\n\t                inside: Sk.nameForToken(tp.node.type),\r\n\t                node: tp.node,\r\n\t                parent: this.stack.length > 1 ? this.stack[this.stack.length - 2].node : undefined\r\n\t            };\r\n\t            var reason = \"expected \" + ar.join(', ') + \" but found \" + extra.found + \" while parsing \" + extra.inside;\r\n\r\n\t            throw new Sk.builtin.SyntaxError(reason, this.filename, errline, context, extra);\r\n\t        }\r\n\t    }\r\n\t};\r\n\r\n\t// turn a token into a label\r\n\tParser.prototype.classify = function (type, value, context) {\r\n\t    var ilabel;\r\n\t    if (type === Sk.Tokenizer.Tokens.T_NAME) {\r\n\t        this.used_names[value] = true;\r\n\t        ilabel = this.grammar.keywords.hasOwnProperty(value) && this.grammar.keywords[value];\r\n\r\n\t        /* Check for handling print as an builtin function */\r\n\t        if(value === \"print\" && (this.p_flags & Parser.CO_FUTURE_PRINT_FUNCTION || Sk.python3 === true)) {\r\n\t            ilabel = false; // ilabel determines if the value is a keyword\r\n\t        }\r\n\r\n\t        if (ilabel) {\r\n\t            //print(\"is keyword\");\r\n\t            return ilabel;\r\n\t        }\r\n\t    }\r\n\t    ilabel = this.grammar.tokens.hasOwnProperty(type) && this.grammar.tokens[type];\r\n\t    if (!ilabel) {\r\n\t        // throw new Sk.builtin.SyntaxError(\"bad token\", type, value, context);\r\n\t        // Questionable modification to put line number in position 2\r\n\t        // like everywhere else and filename in position 1.\r\n\t        var extra = {\r\n\t            kind: \"CLASSIFY\",\r\n\t            type: type,\r\n\t            value: value\r\n\t        };\r\n\t        throw new Sk.builtin.SyntaxError(\"bad token\", this.filename, context[0][0], context, extra);\r\n\t    }\r\n\t    return ilabel;\r\n\t};\r\n\r\n\t// shift a token\r\n\tParser.prototype.shift = function (type, value, newstate, context) {\r\n\t    var dfa = this.stack[this.stack.length - 1].dfa;\r\n\t    var state = this.stack[this.stack.length - 1].state;\r\n\t    var node = this.stack[this.stack.length - 1].node;\r\n\t    //print(\"context\", context);\r\n\t    var newnode = {\r\n\t        type      : type,\r\n\t        value     : value,\r\n\t        lineno    : context[0][0],         // throwing away end here to match cpython\r\n\t        col_offset: context[0][1],\r\n\t        children  : null\r\n\t    };\r\n\t    if (newnode) {\r\n\t        node.children.push(newnode);\r\n\t    }\r\n\t    this.stack[this.stack.length - 1] = {\r\n\t        dfa  : dfa,\r\n\t        state: newstate,\r\n\t        node : node\r\n\t    };\r\n\t};\r\n\r\n\t// push a nonterminal\r\n\tParser.prototype.push = function (type, newdfa, newstate, context) {\r\n\t    var dfa = this.stack[this.stack.length - 1].dfa;\r\n\t    var node = this.stack[this.stack.length - 1].node;\r\n\t    var newnode = {\r\n\t        type      : type,\r\n\t        value     : null,\r\n\t        lineno    : context[0][0],      // throwing away end here to match cpython\r\n\t        col_offset: context[0][1],\r\n\t        children  : []\r\n\t    };\r\n\t    this.stack[this.stack.length - 1] = {\r\n\t        dfa  : dfa,\r\n\t        state: newstate,\r\n\t        node : node\r\n\t    };\r\n\t    this.stack.push({\r\n\t        dfa  : newdfa,\r\n\t        state: 0,\r\n\t        node : newnode\r\n\t    });\r\n\t};\r\n\r\n\t//var ac = 0;\r\n\t//var bc = 0;\r\n\r\n\t// pop a nonterminal\r\n\tParser.prototype.pop = function () {\r\n\t    var node;\r\n\t    var pop = this.stack.pop();\r\n\t    var newnode = pop.node;\r\n\t    //print(\"POP\");\r\n\t    if (newnode) {\r\n\t        //print(\"A\", ac++, newnode.type);\r\n\t        //print(\"stacklen:\"+this.stack.length);\r\n\t        if (this.stack.length !== 0) {\r\n\t            //print(\"B\", bc++);\r\n\t            node = this.stack[this.stack.length - 1].node;\r\n\t            node.children.push(newnode);\r\n\t        } else {\r\n\t            //print(\"C\");\r\n\t            this.rootnode = newnode;\r\n\t            this.rootnode.used_names = this.used_names;\r\n\t        }\r\n\t    }\r\n\t};\r\n\r\n\t/**\r\n\t * parser for interactive input. returns a function that should be called with\r\n\t * lines of input as they are entered. the function will return false\r\n\t * until the input is complete, when it will return the rootnode of the parse.\r\n\t *\r\n\t * @param {string} filename\r\n\t * @param {string=} style root of parse tree (optional)\r\n\t */\r\n\tfunction makeParser (filename, style) {\r\n\t    var tokenizer;\r\n\t    var T_OP;\r\n\t    var T_NL;\r\n\t    var T_COMMENT;\r\n\t    var prefix;\r\n\t    var column;\r\n\t    var lineno;\r\n\t    var p;\r\n\t    if (style === undefined) {\r\n\t        style = \"file_input\";\r\n\t    }\r\n\t    p = new Parser(filename, Sk.ParseTables);\r\n\t    // for closure's benefit\r\n\t    if (style === \"file_input\") {\r\n\t        p.setup(Sk.ParseTables.sym.file_input);\r\n\t    } else {\r\n\t        goog.asserts.fail(\"todo;\");\r\n\t    }\r\n\t    lineno = 1;\r\n\t    column = 0;\r\n\t    prefix = \"\";\r\n\t    T_COMMENT = Sk.Tokenizer.Tokens.T_COMMENT;\r\n\t    T_NL = Sk.Tokenizer.Tokens.T_NL;\r\n\t    T_OP = Sk.Tokenizer.Tokens.T_OP;\r\n\t    tokenizer = new Sk.Tokenizer(filename, style === \"single_input\", function (type, value, start, end, line) {\r\n\t        var s_lineno = start[0];\r\n\t        var s_column = start[1];\r\n\t        /*\r\n\t         if (s_lineno !== lineno && s_column !== column)\r\n\t         {\r\n\t         // todo; update prefix and line/col\r\n\t         }\r\n\t         */\r\n\t        if (type === T_COMMENT || type === T_NL) {\r\n\t            prefix += value;\r\n\t            lineno = end[0];\r\n\t            column = end[1];\r\n\t            if (value[value.length - 1] === \"\\n\") {\r\n\t                lineno += 1;\r\n\t                column = 0;\r\n\t            }\r\n\t            //print(\"  not calling addtoken\");\r\n\t            return undefined;\r\n\t        }\r\n\t        if (type === T_OP) {\r\n\t            type = Sk.OpMap[value];\r\n\t        }\r\n\t        if (p.addtoken(type, value, [start, end, line])) {\r\n\t            return true;\r\n\t        }\r\n\t    });\r\n\r\n\t    // create parser function\r\n\t    var parseFunc = function (line) {\r\n\t        var ret = tokenizer.generateTokens(line);\r\n\t        //print(\"tok:\"+ret);\r\n\t        if (ret) {\r\n\t            if (ret !== \"done\") {\r\n\t                throw new Sk.builtin.SyntaxError(\"incomplete input\", this.filename);\r\n\t            }\r\n\t            return p.rootnode;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\r\n\t    // set flags, and return\r\n\t    parseFunc.p_flags = p.p_flags;\r\n\t    return parseFunc;\r\n\t}\r\n\r\n\tSk.parse = function parse (filename, input) {\r\n\t    var i;\r\n\t    var ret;\r\n\t    var lines;\r\n\t    var parseFunc = makeParser(filename);\r\n\t    if (input.substr(input.length - 1, 1) !== \"\\n\") {\r\n\t        input += \"\\n\";\r\n\t    }\r\n\t    //print(\"input:\"+input);\r\n\t    lines = input.split(\"\\n\");\r\n\t    for (i = 0; i < lines.length; ++i) {\r\n\t        ret = parseFunc(lines[i] + ((i === lines.length - 1) ? \"\" : \"\\n\"));\r\n\t    }\r\n\r\n\t    /*\r\n\t     * Small adjustments here in order to return th flags and the cst\r\n\t     */\r\n\t    return {\"cst\": ret, \"flags\": parseFunc.p_flags};\r\n\t};\r\n\r\n\tSk.parseTreeDump = function parseTreeDump (n, indent) {\r\n\t    //return JSON.stringify(n, null, 2);\r\n\t    var i;\r\n\t    var ret;\r\n\t    indent = indent || \"\";\r\n\t    ret = \"\";\r\n\t    ret += indent;\r\n\t    if (n.type >= 256) { // non-term\r\n\t        ret += Sk.ParseTables.number2symbol[n.type] + \"\\n\";\r\n\t        for (i = 0; i < n.children.length; ++i) {\r\n\t            ret += Sk.parseTreeDump(n.children[i], indent + \"  \");\r\n\t        }\r\n\t    } else {\r\n\t        ret += Sk.Tokenizer.tokenNames[n.type] + \": \" + new Sk.builtin.str(n.value)[\"$r\"]().v + \"\\n\";\r\n\t    }\r\n\t    return ret;\r\n\t};\r\n\r\n\r\n\tgoog.exportSymbol(\"Sk.parse\", Sk.parse);\r\n\tgoog.exportSymbol(\"Sk.parseTreeDump\", Sk.parseTreeDump);\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/astnodes.js ---- */ \r\n\r\n\t/* File automatically generated by ./asdl_js.py. */\r\n\r\n\t/* ----- expr_context ----- */\r\n\t/** @constructor */\r\n\tfunction Load() {}\r\n\t/** @constructor */\r\n\tfunction Store() {}\r\n\t/** @constructor */\r\n\tfunction Del() {}\r\n\t/** @constructor */\r\n\tfunction AugLoad() {}\r\n\t/** @constructor */\r\n\tfunction AugStore() {}\r\n\t/** @constructor */\r\n\tfunction Param() {}\r\n\r\n\t/* ----- boolop ----- */\r\n\t/** @constructor */\r\n\tfunction And() {}\r\n\t/** @constructor */\r\n\tfunction Or() {}\r\n\r\n\t/* ----- operator ----- */\r\n\t/** @constructor */\r\n\tfunction Add() {}\r\n\t/** @constructor */\r\n\tfunction Sub() {}\r\n\t/** @constructor */\r\n\tfunction Mult() {}\r\n\t/** @constructor */\r\n\tfunction Div() {}\r\n\t/** @constructor */\r\n\tfunction Mod() {}\r\n\t/** @constructor */\r\n\tfunction Pow() {}\r\n\t/** @constructor */\r\n\tfunction LShift() {}\r\n\t/** @constructor */\r\n\tfunction RShift() {}\r\n\t/** @constructor */\r\n\tfunction BitOr() {}\r\n\t/** @constructor */\r\n\tfunction BitXor() {}\r\n\t/** @constructor */\r\n\tfunction BitAnd() {}\r\n\t/** @constructor */\r\n\tfunction FloorDiv() {}\r\n\r\n\t/* ----- unaryop ----- */\r\n\t/** @constructor */\r\n\tfunction Invert() {}\r\n\t/** @constructor */\r\n\tfunction Not() {}\r\n\t/** @constructor */\r\n\tfunction UAdd() {}\r\n\t/** @constructor */\r\n\tfunction USub() {}\r\n\r\n\t/* ----- cmpop ----- */\r\n\t/** @constructor */\r\n\tfunction Eq() {}\r\n\t/** @constructor */\r\n\tfunction NotEq() {}\r\n\t/** @constructor */\r\n\tfunction Lt() {}\r\n\t/** @constructor */\r\n\tfunction LtE() {}\r\n\t/** @constructor */\r\n\tfunction Gt() {}\r\n\t/** @constructor */\r\n\tfunction GtE() {}\r\n\t/** @constructor */\r\n\tfunction Is() {}\r\n\t/** @constructor */\r\n\tfunction IsNot() {}\r\n\t/** @constructor */\r\n\tfunction In_() {}\r\n\t/** @constructor */\r\n\tfunction NotIn() {}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/* ---------------------- */\r\n\t/* constructors for nodes */\r\n\t/* ---------------------- */\r\n\r\n\r\n\r\n\r\n\r\n\t/** @constructor */\r\n\tfunction Module(/* {asdl_seq *} */ body)\r\n\t{\r\n\t    this.body = body;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Interactive(/* {asdl_seq *} */ body)\r\n\t{\r\n\t    this.body = body;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Expression(/* {expr_ty} */ body)\r\n\t{\r\n\t    goog.asserts.assert(body !== null && body !== undefined);\r\n\t    this.body = body;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Suite(/* {asdl_seq *} */ body)\r\n\t{\r\n\t    this.body = body;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction FunctionDef(/* {identifier} */ name, /* {arguments__ty} */ args, /*\r\n\t                          {asdl_seq *} */ body, /* {asdl_seq *} */\r\n\t                          decorator_list, /* {int} */ lineno, /* {int} */\r\n\t                          col_offset)\r\n\t{\r\n\t    goog.asserts.assert(name !== null && name !== undefined);\r\n\t    goog.asserts.assert(args !== null && args !== undefined);\r\n\t    this.name = name;\r\n\t    this.args = args;\r\n\t    this.body = body;\r\n\t    this.decorator_list = decorator_list;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction ClassDef(/* {identifier} */ name, /* {asdl_seq *} */ bases, /*\r\n\t                       {asdl_seq *} */ body, /* {asdl_seq *} */ decorator_list,\r\n\t                       /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(name !== null && name !== undefined);\r\n\t    this.name = name;\r\n\t    this.bases = bases;\r\n\t    this.body = body;\r\n\t    this.decorator_list = decorator_list;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Return_(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */\r\n\t                      col_offset)\r\n\t{\r\n\t    this.value = value;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Delete_(/* {asdl_seq *} */ targets, /* {int} */ lineno, /* {int} */\r\n\t                      col_offset)\r\n\t{\r\n\t    this.targets = targets;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Assign(/* {asdl_seq *} */ targets, /* {expr_ty} */ value, /* {int} */\r\n\t                     lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.targets = targets;\r\n\t    this.value = value;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction AugAssign(/* {expr_ty} */ target, /* {operator_ty} */ op, /* {expr_ty}\r\n\t                        */ value, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(target !== null && target !== undefined);\r\n\t    goog.asserts.assert(op !== null && op !== undefined);\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.target = target;\r\n\t    this.op = op;\r\n\t    this.value = value;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Print(/* {expr_ty} */ dest, /* {asdl_seq *} */ values, /* {bool} */\r\n\t                    nl, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.dest = dest;\r\n\t    this.values = values;\r\n\t    this.nl = nl;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction For_(/* {expr_ty} */ target, /* {expr_ty} */ iter, /* {asdl_seq *} */\r\n\t                   body, /* {asdl_seq *} */ orelse, /* {int} */ lineno, /*\r\n\t                   {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(target !== null && target !== undefined);\r\n\t    goog.asserts.assert(iter !== null && iter !== undefined);\r\n\t    this.target = target;\r\n\t    this.iter = iter;\r\n\t    this.body = body;\r\n\t    this.orelse = orelse;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction While_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *}\r\n\t                     */ orelse, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(test !== null && test !== undefined);\r\n\t    this.test = test;\r\n\t    this.body = body;\r\n\t    this.orelse = orelse;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction If_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *} */\r\n\t                  orelse, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(test !== null && test !== undefined);\r\n\t    this.test = test;\r\n\t    this.body = body;\r\n\t    this.orelse = orelse;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction With_(/* {expr_ty} */ context_expr, /* {expr_ty} */ optional_vars, /*\r\n\t                    {asdl_seq *} */ body, /* {int} */ lineno, /* {int} */\r\n\t                    col_offset)\r\n\t{\r\n\t    goog.asserts.assert(context_expr !== null && context_expr !== undefined);\r\n\t    this.context_expr = context_expr;\r\n\t    this.optional_vars = optional_vars;\r\n\t    this.body = body;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Raise(/* {expr_ty} */ type, /* {expr_ty} */ inst, /* {expr_ty} */\r\n\t                    tback, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.type = type;\r\n\t    this.inst = inst;\r\n\t    this.tback = tback;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction TryExcept(/* {asdl_seq *} */ body, /* {asdl_seq *} */ handlers, /*\r\n\t                        {asdl_seq *} */ orelse, /* {int} */ lineno, /* {int} */\r\n\t                        col_offset)\r\n\t{\r\n\t    this.body = body;\r\n\t    this.handlers = handlers;\r\n\t    this.orelse = orelse;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction TryFinally(/* {asdl_seq *} */ body, /* {asdl_seq *} */ finalbody, /*\r\n\t                         {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.body = body;\r\n\t    this.finalbody = finalbody;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg, /* {int} */ lineno,\r\n\t                     /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(test !== null && test !== undefined);\r\n\t    this.test = test;\r\n\t    this.msg = msg;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Import_(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */\r\n\t                      col_offset)\r\n\t{\r\n\t    this.names = names;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction ImportFrom(/* {identifier} */ module, /* {asdl_seq *} */ names, /*\r\n\t                         {int} */ level, /* {int} */ lineno, /* {int} */\r\n\t                         col_offset)\r\n\t{\r\n\t    goog.asserts.assert(module !== null && module !== undefined);\r\n\t    this.module = module;\r\n\t    this.names = names;\r\n\t    this.level = level;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Exec(/* {expr_ty} */ body, /* {expr_ty} */ globals, /* {expr_ty} */\r\n\t                   locals, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(body !== null && body !== undefined);\r\n\t    this.body = body;\r\n\t    this.globals = globals;\r\n\t    this.locals = locals;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Global(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */\r\n\t                     col_offset)\r\n\t{\r\n\t    this.names = names;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Expr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.value = value;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Pass(/* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Break_(/* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Continue_(/* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Debugger_(/* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction BoolOp(/* {boolop_ty} */ op, /* {asdl_seq *} */ values, /* {int} */\r\n\t                     lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(op !== null && op !== undefined);\r\n\t    this.op = op;\r\n\t    this.values = values;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction BinOp(/* {expr_ty} */ left, /* {operator_ty} */ op, /* {expr_ty} */\r\n\t                    right, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(left !== null && left !== undefined);\r\n\t    goog.asserts.assert(op !== null && op !== undefined);\r\n\t    goog.asserts.assert(right !== null && right !== undefined);\r\n\t    this.left = left;\r\n\t    this.op = op;\r\n\t    this.right = right;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction UnaryOp(/* {unaryop_ty} */ op, /* {expr_ty} */ operand, /* {int} */\r\n\t                      lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(op !== null && op !== undefined);\r\n\t    goog.asserts.assert(operand !== null && operand !== undefined);\r\n\t    this.op = op;\r\n\t    this.operand = operand;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Lambda(/* {arguments__ty} */ args, /* {expr_ty} */ body, /* {int} */\r\n\t                     lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(args !== null && args !== undefined);\r\n\t    goog.asserts.assert(body !== null && body !== undefined);\r\n\t    this.args = args;\r\n\t    this.body = body;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body, /* {expr_ty} */\r\n\t                    orelse, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(test !== null && test !== undefined);\r\n\t    goog.asserts.assert(body !== null && body !== undefined);\r\n\t    goog.asserts.assert(orelse !== null && orelse !== undefined);\r\n\t    this.test = test;\r\n\t    this.body = body;\r\n\t    this.orelse = orelse;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Dict(/* {asdl_seq *} */ keys, /* {asdl_seq *} */ values, /* {int} */\r\n\t                   lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    this.keys = keys;\r\n\t    this.values = values;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /* {int} */\r\n\t                  col_offset)\r\n\t{\r\n\t    this.elts = elts;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction ListComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}\r\n\t                       */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(elt !== null && elt !== undefined);\r\n\t    this.elt = elt;\r\n\t    this.generators = generators;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction SetComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}\r\n\t                      */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(elt !== null && elt !== undefined);\r\n\t    this.elt = elt;\r\n\t    this.generators = generators;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction DictComp(/* {expr_ty} */ key, /* {expr_ty} */ value, /* {asdl_seq *}\r\n\t                       */ generators, /* {int} */ lineno, /* {int} */\r\n\t                       col_offset)\r\n\t{\r\n\t    goog.asserts.assert(key !== null && key !== undefined);\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.key = key;\r\n\t    this.value = value;\r\n\t    this.generators = generators;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction GeneratorExp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /*\r\n\t                           {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(elt !== null && elt !== undefined);\r\n\t    this.elt = elt;\r\n\t    this.generators = generators;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Yield(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */\r\n\t                    col_offset)\r\n\t{\r\n\t    this.value = value;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Compare(/* {expr_ty} */ left, /* {asdl_int_seq *} */ ops, /* {asdl_seq\r\n\t                      *} */ comparators, /* {int} */ lineno, /* {int} */\r\n\t                      col_offset)\r\n\t{\r\n\t    goog.asserts.assert(left !== null && left !== undefined);\r\n\t    this.left = left;\r\n\t    this.ops = ops;\r\n\t    this.comparators = comparators;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args, /* {asdl_seq *} */\r\n\t                   keywords, /* {expr_ty} */ starargs, /* {expr_ty} */ kwargs,\r\n\t                   /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(func !== null && func !== undefined);\r\n\t    this.func = func;\r\n\t    this.args = args;\r\n\t    this.keywords = keywords;\r\n\t    this.starargs = starargs;\r\n\t    this.kwargs = kwargs;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Repr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.value = value;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Num(/* {object} */ n, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(n !== null && n !== undefined);\r\n\t    this.n = n;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Str(/* {string} */ s, /* {int} */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(s !== null && s !== undefined);\r\n\t    this.s = s;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Attribute(/* {expr_ty} */ value, /* {identifier} */ attr, /*\r\n\t                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}\r\n\t                        */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    goog.asserts.assert(attr !== null && attr !== undefined);\r\n\t    goog.asserts.assert(ctx !== null && ctx !== undefined);\r\n\t    this.value = value;\r\n\t    this.attr = attr;\r\n\t    this.ctx = ctx;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Subscript(/* {expr_ty} */ value, /* {slice_ty} */ slice, /*\r\n\t                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}\r\n\t                        */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    goog.asserts.assert(slice !== null && slice !== undefined);\r\n\t    goog.asserts.assert(ctx !== null && ctx !== undefined);\r\n\t    this.value = value;\r\n\t    this.slice = slice;\r\n\t    this.ctx = ctx;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Name(/* {identifier} */ id, /* {expr_context_ty} */ ctx, /* {int} */\r\n\t                   lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(id !== null && id !== undefined);\r\n\t    goog.asserts.assert(ctx !== null && ctx !== undefined);\r\n\t    this.id = id;\r\n\t    this.ctx = ctx;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction List(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int} */\r\n\t                   lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(ctx !== null && ctx !== undefined);\r\n\t    this.elts = elts;\r\n\t    this.ctx = ctx;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Tuple(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int}\r\n\t                    */ lineno, /* {int} */ col_offset)\r\n\t{\r\n\t    goog.asserts.assert(ctx !== null && ctx !== undefined);\r\n\t    this.elts = elts;\r\n\t    this.ctx = ctx;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Ellipsis()\r\n\t{\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Slice(/* {expr_ty} */ lower, /* {expr_ty} */ upper, /* {expr_ty} */\r\n\t                    step)\r\n\t{\r\n\t    this.lower = lower;\r\n\t    this.upper = upper;\r\n\t    this.step = step;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction ExtSlice(/* {asdl_seq *} */ dims)\r\n\t{\r\n\t    this.dims = dims;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction Index(/* {expr_ty} */ value)\r\n\t{\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.value = value;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction comprehension(/* {expr_ty} */ target, /* {expr_ty} */ iter, /*\r\n\t                            {asdl_seq *} */ ifs)\r\n\t{\r\n\t    goog.asserts.assert(target !== null && target !== undefined);\r\n\t    goog.asserts.assert(iter !== null && iter !== undefined);\r\n\t    this.target = target;\r\n\t    this.iter = iter;\r\n\t    this.ifs = ifs;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction ExceptHandler(/* {expr_ty} */ type, /* {expr_ty} */ name, /* {asdl_seq\r\n\t                            *} */ body, /* {int} */ lineno, /* {int} */\r\n\t                            col_offset)\r\n\t{\r\n\t    this.type = type;\r\n\t    this.name = name;\r\n\t    this.body = body;\r\n\t    this.lineno = lineno;\r\n\t    this.col_offset = col_offset;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction arguments_(/* {asdl_seq *} */ args, /* {identifier} */ vararg, /*\r\n\t                         {identifier} */ kwarg, /* {asdl_seq *} */ defaults)\r\n\t{\r\n\t    this.args = args;\r\n\t    this.vararg = vararg;\r\n\t    this.kwarg = kwarg;\r\n\t    this.defaults = defaults;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction keyword(/* {identifier} */ arg, /* {expr_ty} */ value)\r\n\t{\r\n\t    goog.asserts.assert(arg !== null && arg !== undefined);\r\n\t    goog.asserts.assert(value !== null && value !== undefined);\r\n\t    this.arg = arg;\r\n\t    this.value = value;\r\n\t    return this;\r\n\t}\r\n\r\n\t/** @constructor */\r\n\tfunction alias(/* {identifier} */ name, /* {identifier} */ asname)\r\n\t{\r\n\t    goog.asserts.assert(name !== null && name !== undefined);\r\n\t    this.name = name;\r\n\t    this.asname = asname;\r\n\t    return this;\r\n\t}\r\n\r\n\r\n\tModule.prototype._astname = \"Module\";\r\n\tModule.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\tInteractive.prototype._astname = \"Interactive\";\r\n\tInteractive.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\tExpression.prototype._astname = \"Expression\";\r\n\tExpression.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\tSuite.prototype._astname = \"Suite\";\r\n\tSuite.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\tFunctionDef.prototype._astname = \"FunctionDef\";\r\n\tFunctionDef.prototype._fields = [\r\n\t    \"name\", function(n) { return n.name; },\r\n\t    \"args\", function(n) { return n.args; },\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"decorator_list\", function(n) { return n.decorator_list; }\r\n\t];\r\n\tClassDef.prototype._astname = \"ClassDef\";\r\n\tClassDef.prototype._fields = [\r\n\t    \"name\", function(n) { return n.name; },\r\n\t    \"bases\", function(n) { return n.bases; },\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"decorator_list\", function(n) { return n.decorator_list; }\r\n\t];\r\n\tReturn_.prototype._astname = \"Return\";\r\n\tReturn_.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tDelete_.prototype._astname = \"Delete\";\r\n\tDelete_.prototype._fields = [\r\n\t    \"targets\", function(n) { return n.targets; }\r\n\t];\r\n\tAssign.prototype._astname = \"Assign\";\r\n\tAssign.prototype._fields = [\r\n\t    \"targets\", function(n) { return n.targets; },\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tAugAssign.prototype._astname = \"AugAssign\";\r\n\tAugAssign.prototype._fields = [\r\n\t    \"target\", function(n) { return n.target; },\r\n\t    \"op\", function(n) { return n.op; },\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tPrint.prototype._astname = \"Print\";\r\n\tPrint.prototype._fields = [\r\n\t    \"dest\", function(n) { return n.dest; },\r\n\t    \"values\", function(n) { return n.values; },\r\n\t    \"nl\", function(n) { return n.nl; }\r\n\t];\r\n\tFor_.prototype._astname = \"For\";\r\n\tFor_.prototype._fields = [\r\n\t    \"target\", function(n) { return n.target; },\r\n\t    \"iter\", function(n) { return n.iter; },\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"orelse\", function(n) { return n.orelse; }\r\n\t];\r\n\tWhile_.prototype._astname = \"While\";\r\n\tWhile_.prototype._fields = [\r\n\t    \"test\", function(n) { return n.test; },\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"orelse\", function(n) { return n.orelse; }\r\n\t];\r\n\tIf_.prototype._astname = \"If\";\r\n\tIf_.prototype._fields = [\r\n\t    \"test\", function(n) { return n.test; },\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"orelse\", function(n) { return n.orelse; }\r\n\t];\r\n\tWith_.prototype._astname = \"With\";\r\n\tWith_.prototype._fields = [\r\n\t    \"context_expr\", function(n) { return n.context_expr; },\r\n\t    \"optional_vars\", function(n) { return n.optional_vars; },\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\tRaise.prototype._astname = \"Raise\";\r\n\tRaise.prototype._fields = [\r\n\t    \"type\", function(n) { return n.type; },\r\n\t    \"inst\", function(n) { return n.inst; },\r\n\t    \"tback\", function(n) { return n.tback; }\r\n\t];\r\n\tTryExcept.prototype._astname = \"TryExcept\";\r\n\tTryExcept.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"handlers\", function(n) { return n.handlers; },\r\n\t    \"orelse\", function(n) { return n.orelse; }\r\n\t];\r\n\tTryFinally.prototype._astname = \"TryFinally\";\r\n\tTryFinally.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"finalbody\", function(n) { return n.finalbody; }\r\n\t];\r\n\tAssert.prototype._astname = \"Assert\";\r\n\tAssert.prototype._fields = [\r\n\t    \"test\", function(n) { return n.test; },\r\n\t    \"msg\", function(n) { return n.msg; }\r\n\t];\r\n\tImport_.prototype._astname = \"Import\";\r\n\tImport_.prototype._fields = [\r\n\t    \"names\", function(n) { return n.names; }\r\n\t];\r\n\tImportFrom.prototype._astname = \"ImportFrom\";\r\n\tImportFrom.prototype._fields = [\r\n\t    \"module\", function(n) { return n.module; },\r\n\t    \"names\", function(n) { return n.names; },\r\n\t    \"level\", function(n) { return n.level; }\r\n\t];\r\n\tExec.prototype._astname = \"Exec\";\r\n\tExec.prototype._fields = [\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"globals\", function(n) { return n.globals; },\r\n\t    \"locals\", function(n) { return n.locals; }\r\n\t];\r\n\tGlobal.prototype._astname = \"Global\";\r\n\tGlobal.prototype._fields = [\r\n\t    \"names\", function(n) { return n.names; }\r\n\t];\r\n\tExpr.prototype._astname = \"Expr\";\r\n\tExpr.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tPass.prototype._astname = \"Pass\";\r\n\tPass.prototype._fields = [\r\n\t];\r\n\tBreak_.prototype._astname = \"Break\";\r\n\tBreak_.prototype._fields = [\r\n\t];\r\n\tContinue_.prototype._astname = \"Continue\";\r\n\tContinue_.prototype._fields = [\r\n\t];\r\n\tDebugger_.prototype._astname = \"Debugger\";\r\n\tDebugger_.prototype._fields = [\r\n\t];\r\n\tBoolOp.prototype._astname = \"BoolOp\";\r\n\tBoolOp.prototype._fields = [\r\n\t    \"op\", function(n) { return n.op; },\r\n\t    \"values\", function(n) { return n.values; }\r\n\t];\r\n\tBinOp.prototype._astname = \"BinOp\";\r\n\tBinOp.prototype._fields = [\r\n\t    \"left\", function(n) { return n.left; },\r\n\t    \"op\", function(n) { return n.op; },\r\n\t    \"right\", function(n) { return n.right; }\r\n\t];\r\n\tUnaryOp.prototype._astname = \"UnaryOp\";\r\n\tUnaryOp.prototype._fields = [\r\n\t    \"op\", function(n) { return n.op; },\r\n\t    \"operand\", function(n) { return n.operand; }\r\n\t];\r\n\tLambda.prototype._astname = \"Lambda\";\r\n\tLambda.prototype._fields = [\r\n\t    \"args\", function(n) { return n.args; },\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\tIfExp.prototype._astname = \"IfExp\";\r\n\tIfExp.prototype._fields = [\r\n\t    \"test\", function(n) { return n.test; },\r\n\t    \"body\", function(n) { return n.body; },\r\n\t    \"orelse\", function(n) { return n.orelse; }\r\n\t];\r\n\tDict.prototype._astname = \"Dict\";\r\n\tDict.prototype._fields = [\r\n\t    \"keys\", function(n) { return n.keys; },\r\n\t    \"values\", function(n) { return n.values; }\r\n\t];\r\n\tSet.prototype._astname = \"Set\";\r\n\tSet.prototype._fields = [\r\n\t    \"elts\", function(n) { return n.elts; }\r\n\t];\r\n\tListComp.prototype._astname = \"ListComp\";\r\n\tListComp.prototype._fields = [\r\n\t    \"elt\", function(n) { return n.elt; },\r\n\t    \"generators\", function(n) { return n.generators; }\r\n\t];\r\n\tSetComp.prototype._astname = \"SetComp\";\r\n\tSetComp.prototype._fields = [\r\n\t    \"elt\", function(n) { return n.elt; },\r\n\t    \"generators\", function(n) { return n.generators; }\r\n\t];\r\n\tDictComp.prototype._astname = \"DictComp\";\r\n\tDictComp.prototype._fields = [\r\n\t    \"key\", function(n) { return n.key; },\r\n\t    \"value\", function(n) { return n.value; },\r\n\t    \"generators\", function(n) { return n.generators; }\r\n\t];\r\n\tGeneratorExp.prototype._astname = \"GeneratorExp\";\r\n\tGeneratorExp.prototype._fields = [\r\n\t    \"elt\", function(n) { return n.elt; },\r\n\t    \"generators\", function(n) { return n.generators; }\r\n\t];\r\n\tYield.prototype._astname = \"Yield\";\r\n\tYield.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tCompare.prototype._astname = \"Compare\";\r\n\tCompare.prototype._fields = [\r\n\t    \"left\", function(n) { return n.left; },\r\n\t    \"ops\", function(n) { return n.ops; },\r\n\t    \"comparators\", function(n) { return n.comparators; }\r\n\t];\r\n\tCall.prototype._astname = \"Call\";\r\n\tCall.prototype._fields = [\r\n\t    \"func\", function(n) { return n.func; },\r\n\t    \"args\", function(n) { return n.args; },\r\n\t    \"keywords\", function(n) { return n.keywords; },\r\n\t    \"starargs\", function(n) { return n.starargs; },\r\n\t    \"kwargs\", function(n) { return n.kwargs; }\r\n\t];\r\n\tRepr.prototype._astname = \"Repr\";\r\n\tRepr.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tNum.prototype._astname = \"Num\";\r\n\tNum.prototype._fields = [\r\n\t    \"n\", function(n) { return n.n; }\r\n\t];\r\n\tStr.prototype._astname = \"Str\";\r\n\tStr.prototype._fields = [\r\n\t    \"s\", function(n) { return n.s; }\r\n\t];\r\n\tAttribute.prototype._astname = \"Attribute\";\r\n\tAttribute.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; },\r\n\t    \"attr\", function(n) { return n.attr; },\r\n\t    \"ctx\", function(n) { return n.ctx; }\r\n\t];\r\n\tSubscript.prototype._astname = \"Subscript\";\r\n\tSubscript.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; },\r\n\t    \"slice\", function(n) { return n.slice; },\r\n\t    \"ctx\", function(n) { return n.ctx; }\r\n\t];\r\n\tName.prototype._astname = \"Name\";\r\n\tName.prototype._fields = [\r\n\t    \"id\", function(n) { return n.id; },\r\n\t    \"ctx\", function(n) { return n.ctx; }\r\n\t];\r\n\tList.prototype._astname = \"List\";\r\n\tList.prototype._fields = [\r\n\t    \"elts\", function(n) { return n.elts; },\r\n\t    \"ctx\", function(n) { return n.ctx; }\r\n\t];\r\n\tTuple.prototype._astname = \"Tuple\";\r\n\tTuple.prototype._fields = [\r\n\t    \"elts\", function(n) { return n.elts; },\r\n\t    \"ctx\", function(n) { return n.ctx; }\r\n\t];\r\n\tLoad.prototype._astname = \"Load\";\r\n\tLoad.prototype._isenum = true;\r\n\tStore.prototype._astname = \"Store\";\r\n\tStore.prototype._isenum = true;\r\n\tDel.prototype._astname = \"Del\";\r\n\tDel.prototype._isenum = true;\r\n\tAugLoad.prototype._astname = \"AugLoad\";\r\n\tAugLoad.prototype._isenum = true;\r\n\tAugStore.prototype._astname = \"AugStore\";\r\n\tAugStore.prototype._isenum = true;\r\n\tParam.prototype._astname = \"Param\";\r\n\tParam.prototype._isenum = true;\r\n\tEllipsis.prototype._astname = \"Ellipsis\";\r\n\tEllipsis.prototype._fields = [\r\n\t];\r\n\tSlice.prototype._astname = \"Slice\";\r\n\tSlice.prototype._fields = [\r\n\t    \"lower\", function(n) { return n.lower; },\r\n\t    \"upper\", function(n) { return n.upper; },\r\n\t    \"step\", function(n) { return n.step; }\r\n\t];\r\n\tExtSlice.prototype._astname = \"ExtSlice\";\r\n\tExtSlice.prototype._fields = [\r\n\t    \"dims\", function(n) { return n.dims; }\r\n\t];\r\n\tIndex.prototype._astname = \"Index\";\r\n\tIndex.prototype._fields = [\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\tAnd.prototype._astname = \"And\";\r\n\tAnd.prototype._isenum = true;\r\n\tOr.prototype._astname = \"Or\";\r\n\tOr.prototype._isenum = true;\r\n\tAdd.prototype._astname = \"Add\";\r\n\tAdd.prototype._isenum = true;\r\n\tSub.prototype._astname = \"Sub\";\r\n\tSub.prototype._isenum = true;\r\n\tMult.prototype._astname = \"Mult\";\r\n\tMult.prototype._isenum = true;\r\n\tDiv.prototype._astname = \"Div\";\r\n\tDiv.prototype._isenum = true;\r\n\tMod.prototype._astname = \"Mod\";\r\n\tMod.prototype._isenum = true;\r\n\tPow.prototype._astname = \"Pow\";\r\n\tPow.prototype._isenum = true;\r\n\tLShift.prototype._astname = \"LShift\";\r\n\tLShift.prototype._isenum = true;\r\n\tRShift.prototype._astname = \"RShift\";\r\n\tRShift.prototype._isenum = true;\r\n\tBitOr.prototype._astname = \"BitOr\";\r\n\tBitOr.prototype._isenum = true;\r\n\tBitXor.prototype._astname = \"BitXor\";\r\n\tBitXor.prototype._isenum = true;\r\n\tBitAnd.prototype._astname = \"BitAnd\";\r\n\tBitAnd.prototype._isenum = true;\r\n\tFloorDiv.prototype._astname = \"FloorDiv\";\r\n\tFloorDiv.prototype._isenum = true;\r\n\tInvert.prototype._astname = \"Invert\";\r\n\tInvert.prototype._isenum = true;\r\n\tNot.prototype._astname = \"Not\";\r\n\tNot.prototype._isenum = true;\r\n\tUAdd.prototype._astname = \"UAdd\";\r\n\tUAdd.prototype._isenum = true;\r\n\tUSub.prototype._astname = \"USub\";\r\n\tUSub.prototype._isenum = true;\r\n\tEq.prototype._astname = \"Eq\";\r\n\tEq.prototype._isenum = true;\r\n\tNotEq.prototype._astname = \"NotEq\";\r\n\tNotEq.prototype._isenum = true;\r\n\tLt.prototype._astname = \"Lt\";\r\n\tLt.prototype._isenum = true;\r\n\tLtE.prototype._astname = \"LtE\";\r\n\tLtE.prototype._isenum = true;\r\n\tGt.prototype._astname = \"Gt\";\r\n\tGt.prototype._isenum = true;\r\n\tGtE.prototype._astname = \"GtE\";\r\n\tGtE.prototype._isenum = true;\r\n\tIs.prototype._astname = \"Is\";\r\n\tIs.prototype._isenum = true;\r\n\tIsNot.prototype._astname = \"IsNot\";\r\n\tIsNot.prototype._isenum = true;\r\n\tIn_.prototype._astname = \"In\";\r\n\tIn_.prototype._isenum = true;\r\n\tNotIn.prototype._astname = \"NotIn\";\r\n\tNotIn.prototype._isenum = true;\r\n\tcomprehension.prototype._astname = \"comprehension\";\r\n\tcomprehension.prototype._fields = [\r\n\t    \"target\", function(n) { return n.target; },\r\n\t    \"iter\", function(n) { return n.iter; },\r\n\t    \"ifs\", function(n) { return n.ifs; }\r\n\t];\r\n\tExceptHandler.prototype._astname = \"ExceptHandler\";\r\n\tExceptHandler.prototype._fields = [\r\n\t    \"type\", function(n) { return n.type; },\r\n\t    \"name\", function(n) { return n.name; },\r\n\t    \"body\", function(n) { return n.body; }\r\n\t];\r\n\targuments_.prototype._astname = \"arguments\";\r\n\targuments_.prototype._fields = [\r\n\t    \"args\", function(n) { return n.args; },\r\n\t    \"vararg\", function(n) { return n.vararg; },\r\n\t    \"kwarg\", function(n) { return n.kwarg; },\r\n\t    \"defaults\", function(n) { return n.defaults; }\r\n\t];\r\n\tkeyword.prototype._astname = \"keyword\";\r\n\tkeyword.prototype._fields = [\r\n\t    \"arg\", function(n) { return n.arg; },\r\n\t    \"value\", function(n) { return n.value; }\r\n\t];\r\n\talias.prototype._astname = \"alias\";\r\n\talias.prototype._fields = [\r\n\t    \"name\", function(n) { return n.name; },\r\n\t    \"asname\", function(n) { return n.asname; }\r\n\t];\r\n\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/ast.js ---- */ \r\n\r\n\t//\r\n\t// This is pretty much a straight port of ast.c from CPython 2.6.5.\r\n\t//\r\n\t// The previous version was easier to work with and more JS-ish, but having a\r\n\t// somewhat different ast structure than cpython makes testing more difficult.\r\n\t//\r\n\t// This way, we can use a dump from the ast module on any arbitrary python\r\n\t// code and know that we're the same up to ast level, at least.\r\n\t//\r\n\r\n\tvar SYM = Sk.ParseTables.sym;\r\n\tvar TOK = Sk.Tokenizer.Tokens;\r\n\tvar COMP_GENEXP = 0;\r\n\tvar COMP_SETCOMP = 1;\r\n\r\n\t/** @constructor */\r\n\tfunction Compiling (encoding, filename, c_flags) {\r\n\t    this.c_encoding = encoding;\r\n\t    this.c_filename = filename;\r\n\t    this.c_flags = c_flags || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tfunction NCH (n) {\r\n\t    goog.asserts.assert(n !== undefined);\r\n\t    if (n.children === null) {\r\n\t        return 0;\r\n\t    }\r\n\t    return n.children.length;\r\n\t}\r\n\r\n\tfunction CHILD (n, i) {\r\n\t    goog.asserts.assert(n !== undefined);\r\n\t    goog.asserts.assert(i !== undefined);\r\n\t    return n.children[i];\r\n\t}\r\n\r\n\tfunction REQ (n, type) {\r\n\t    goog.asserts.assert(n.type === type, \"node wasn't expected type\");\r\n\t}\r\n\r\n\tfunction strobj (s) {\r\n\t    goog.asserts.assert(typeof s === \"string\", \"expecting string, got \" + (typeof s));\r\n\t    return new Sk.builtin.str(s);\r\n\t}\r\n\r\n\t/** @return {number} */\r\n\tfunction numStmts (n) {\r\n\t    var ch;\r\n\t    var i;\r\n\t    var cnt;\r\n\t    switch (n.type) {\r\n\t        case SYM.single_input:\r\n\t            if (CHILD(n, 0).type === TOK.T_NEWLINE) {\r\n\t                return 0;\r\n\t            }\r\n\t            else {\r\n\t                return numStmts(CHILD(n, 0));\r\n\t            }\r\n\t        case SYM.file_input:\r\n\t            cnt = 0;\r\n\t            for (i = 0; i < NCH(n); ++i) {\r\n\t                ch = CHILD(n, i);\r\n\t                if (ch.type === SYM.stmt) {\r\n\t                    cnt += numStmts(ch);\r\n\t                }\r\n\t            }\r\n\t            return cnt;\r\n\t        case SYM.stmt:\r\n\t            return numStmts(CHILD(n, 0));\r\n\t        case SYM.compound_stmt:\r\n\t            return 1;\r\n\t        case SYM.simple_stmt:\r\n\t            return Math.floor(NCH(n) / 2); // div 2 is to remove count of ;s\r\n\t        case SYM.suite:\r\n\t            if (NCH(n) === 1) {\r\n\t                return numStmts(CHILD(n, 0));\r\n\t            }\r\n\t            else {\r\n\t                cnt = 0;\r\n\t                for (i = 2; i < NCH(n) - 1; ++i) {\r\n\t                    cnt += numStmts(CHILD(n, i));\r\n\t                }\r\n\t                return cnt;\r\n\t            }\r\n\t            break;\r\n\t        default:\r\n\t            goog.asserts.fail(\"Non-statement found\");\r\n\t    }\r\n\t    return 0;\r\n\t}\r\n\r\n\tfunction forbiddenCheck (c, n, x, lineno) {\r\n\t    if (x === \"None\") {\r\n\t        throw new Sk.builtin.SyntaxError(\"assignment to None\", c.c_filename, lineno, [], {node: n});\r\n\t    }\r\n\t    if (x === \"True\" || x === \"False\") {\r\n\t        throw new Sk.builtin.SyntaxError(\"assignment to True or False is forbidden\", c.c_filename, lineno, [], {node: n});\r\n\t    }\r\n\t}\r\n\r\n\t/**\r\n\t * Set the context ctx for e, recursively traversing e.\r\n\t *\r\n\t * Only sets context for expr kinds that can appear in assignment context as\r\n\t * per the asdl file.\r\n\t */\r\n\tfunction setContext (c, e, ctx, n) {\r\n\t    var i;\r\n\t    var exprName;\r\n\t    var s;\r\n\t    goog.asserts.assert(ctx !== AugStore && ctx !== AugLoad);\r\n\t    s = null;\r\n\t    exprName = null;\r\n\r\n\t    switch (e.constructor) {\r\n\t        case Attribute:\r\n\t        case Name:\r\n\t            if (ctx === Store) {\r\n\t                forbiddenCheck(c, n, e.attr, n.lineno);\r\n\t            }\r\n\t            e.ctx = ctx;\r\n\t            break;\r\n\t        case Subscript:\r\n\t            e.ctx = ctx;\r\n\t            break;\r\n\t        case List:\r\n\t            e.ctx = ctx;\r\n\t            s = e.elts;\r\n\t            break;\r\n\t        case Tuple:\r\n\t            if (e.elts.length === 0) {\r\n\t                throw new Sk.builtin.SyntaxError(\"can't assign to ()\", c.c_filename, n.lineno, ctx, {node: n});\r\n\t            }\r\n\t            e.ctx = ctx;\r\n\t            s = e.elts;\r\n\t            break;\r\n\t        case Lambda:\r\n\t            exprName = \"lambda\";\r\n\t            break;\r\n\t        case Call:\r\n\t            exprName = \"function call\";\r\n\t            break;\r\n\t        case BoolOp:\r\n\t        case BinOp:\r\n\t        case UnaryOp:\r\n\t            exprName = \"operator\";\r\n\t            break;\r\n\t        case GeneratorExp:\r\n\t            exprName = \"generator expression\";\r\n\t            break;\r\n\t        case Yield:\r\n\t            exprName = \"yield expression\";\r\n\t            break;\r\n\t        case ListComp:\r\n\t            exprName = \"list comprehension\";\r\n\t            break;\r\n\t        case SetComp:\r\n\t            exprName = \"set comprehension\";\r\n\t            break;\r\n\t        case DictComp:\r\n\t            exprName = \"dict comprehension\";\r\n\t            break;\r\n\t        case Dict:\r\n\t        case Set:\r\n\t        case Num:\r\n\t        case Str:\r\n\t            exprName = \"literal\";\r\n\t            break;\r\n\t        case Compare:\r\n\t            exprName = \"comparison\";\r\n\t            break;\r\n\t        case Repr:\r\n\t            exprName = \"repr\";\r\n\t            break;\r\n\t        case IfExp:\r\n\t            exprName = \"conditional expression\";\r\n\t            break;\r\n\t        default:\r\n\t            goog.asserts.fail(\"unhandled expression in assignment\");\r\n\t    }\r\n\t    if (exprName) {\r\n\t        throw new Sk.builtin.SyntaxError(\"can't \" + (ctx === Store ? \"assign to\" : \"delete\") + \" \" + exprName, c.c_filename, n.lineno, [], {node: n});\r\n\t    }\r\n\r\n\t    if (s) {\r\n\t        for (i = 0; i < s.length; ++i) {\r\n\t            setContext(c, s[i], ctx, n);\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tvar operatorMap = {};\r\n\t(function () {\r\n\t    operatorMap[TOK.T_VBAR] = BitOr;\r\n\t    operatorMap[TOK.T_CIRCUMFLEX] = BitXor;\r\n\t    operatorMap[TOK.T_AMPER] = BitAnd;\r\n\t    operatorMap[TOK.T_LEFTSHIFT] = LShift;\r\n\t    operatorMap[TOK.T_RIGHTSHIFT] = RShift;\r\n\t    operatorMap[TOK.T_PLUS] = Add;\r\n\t    operatorMap[TOK.T_MINUS] = Sub;\r\n\t    operatorMap[TOK.T_STAR] = Mult;\r\n\t    operatorMap[TOK.T_SLASH] = Div;\r\n\t    operatorMap[TOK.T_DOUBLESLASH] = FloorDiv;\r\n\t    operatorMap[TOK.T_PERCENT] = Mod;\r\n\t}());\r\n\r\n\tfunction getOperator (n) {\r\n\t    goog.asserts.assert(operatorMap[n.type] !== undefined);\r\n\t    return operatorMap[n.type];\r\n\t}\r\n\r\n\tfunction astForCompOp (c, n) {\r\n\t    /* comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'\r\n\t     |'is' 'not'\r\n\t     */\r\n\t    REQ(n, SYM.comp_op);\r\n\t    if (NCH(n) === 1) {\r\n\t        n = CHILD(n, 0);\r\n\t        switch (n.type) {\r\n\t            case TOK.T_LESS:\r\n\t                return Lt;\r\n\t            case TOK.T_GREATER:\r\n\t                return Gt;\r\n\t            case TOK.T_EQEQUAL:\r\n\t                return Eq;\r\n\t            case TOK.T_LESSEQUAL:\r\n\t                return LtE;\r\n\t            case TOK.T_GREATEREQUAL:\r\n\t                return GtE;\r\n\t            case TOK.T_NOTEQUAL:\r\n\t                return NotEq;\r\n\t            case TOK.T_NAME:\r\n\t                if (n.value === \"in\") {\r\n\t                    return In_;\r\n\t                }\r\n\t                if (n.value === \"is\") {\r\n\t                    return Is;\r\n\t                }\r\n\t        }\r\n\t    }\r\n\t    else if (NCH(n) === 2) {\r\n\t        if (CHILD(n, 0).type === TOK.T_NAME) {\r\n\t            if (CHILD(n, 1).value === \"in\") {\r\n\t                return NotIn;\r\n\t            }\r\n\t            if (CHILD(n, 0).value === \"is\") {\r\n\t                return IsNot;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    goog.asserts.fail(\"invalid comp_op\");\r\n\t}\r\n\r\n\tfunction seqForTestlist (c, n) {\r\n\t    /* testlist: test (',' test)* [','] */\r\n\t    var i;\r\n\t    var seq = [];\r\n\t    goog.asserts.assert(n.type === SYM.testlist ||\r\n\t        n.type === SYM.listmaker ||\r\n\t        n.type === SYM.testlist_comp ||\r\n\t        n.type === SYM.testlist_safe ||\r\n\t        n.type === SYM.testlist1);\r\n\t    for (i = 0; i < NCH(n); i += 2) {\r\n\t        goog.asserts.assert(CHILD(n, i).type === SYM.test || CHILD(n, i).type === SYM.old_test);\r\n\t        seq[i / 2] = astForExpr(c, CHILD(n, i));\r\n\t    }\r\n\t    return seq;\r\n\t}\r\n\r\n\tfunction astForSuite (c, n) {\r\n\t    /* suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT */\r\n\t    var j;\r\n\t    var num;\r\n\t    var i;\r\n\t    var end;\r\n\t    var ch;\r\n\t    var pos;\r\n\t    var seq;\r\n\t    REQ(n, SYM.suite);\r\n\t    seq = [];\r\n\t    pos = 0;\r\n\t    if (CHILD(n, 0).type === SYM.simple_stmt) {\r\n\t        n = CHILD(n, 0);\r\n\t        /* simple_stmt always ends with an NEWLINE and may have a trailing\r\n\t         * SEMI. */\r\n\t        end = NCH(n) - 1;\r\n\t        if (CHILD(n, end - 1).type === TOK.T_SEMI) {\r\n\t            end -= 1;\r\n\t        }\r\n\t        for (i = 0; i < end; i += 2) // by 2 to skip ;\r\n\t        {\r\n\t            seq[pos++] = astForStmt(c, CHILD(n, i));\r\n\t        }\r\n\t    }\r\n\t    else {\r\n\t        for (i = 2; i < NCH(n) - 1; ++i) {\r\n\t            ch = CHILD(n, i);\r\n\t            REQ(ch, SYM.stmt);\r\n\t            num = numStmts(ch);\r\n\t            if (num === 1) {\r\n\t                // small_stmt or compound_stmt w/ only 1 child\r\n\t                seq[pos++] = astForStmt(c, ch);\r\n\t            }\r\n\t            else {\r\n\t                ch = CHILD(ch, 0);\r\n\t                REQ(ch, SYM.simple_stmt);\r\n\t                for (j = 0; j < NCH(ch); j += 2) {\r\n\t                    if (NCH(CHILD(ch, j)) === 0) {\r\n\t                        goog.asserts.assert(j + 1 === NCH(ch));\r\n\t                        break;\r\n\t                    }\r\n\t                    seq[pos++] = astForStmt(c, CHILD(ch, j));\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    goog.asserts.assert(pos === numStmts(n));\r\n\t    return seq;\r\n\t}\r\n\r\n\tfunction astForExceptClause (c, exc, body) {\r\n\t    /* except_clause: 'except' [test [(',' | 'as') test]] */\r\n\t    var e;\r\n\t    REQ(exc, SYM.except_clause);\r\n\t    REQ(body, SYM.suite);\r\n\t    if (NCH(exc) === 1) {\r\n\t        return new ExceptHandler(null, null, astForSuite(c, body), exc.lineno, exc.col_offset);\r\n\t    }\r\n\t    else if (NCH(exc) === 2) {\r\n\t        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), null, astForSuite(c, body), exc.lineno, exc.col_offset);\r\n\t    }\r\n\t    else if (NCH(exc) === 4) {\r\n\t        e = astForExpr(c, CHILD(exc, 3));\r\n\t        setContext(c, e, Store, CHILD(exc, 3));\r\n\t        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), e, astForSuite(c, body), exc.lineno, exc.col_offset);\r\n\t    }\r\n\t    goog.asserts.fail(\"wrong number of children for except clause\");\r\n\t}\r\n\r\n\tfunction astForTryStmt (c, n) {\r\n\t    var exceptSt;\r\n\t    var i;\r\n\t    var handlers;\r\n\t    var nc = NCH(n);\r\n\t    var nexcept = (nc - 3) / 3;\r\n\t    var body, orelse = [],\r\n\t        finally_ = null;\r\n\r\n\t    REQ(n, SYM.try_stmt);\r\n\t    body = astForSuite(c, CHILD(n, 2));\r\n\t    if (CHILD(n, nc - 3).type === TOK.T_NAME) {\r\n\t        if (CHILD(n, nc - 3).value === \"finally\") {\r\n\t            if (nc >= 9 && CHILD(n, nc - 6).type === TOK.T_NAME) {\r\n\t                /* we can assume it's an \"else\",\r\n\t                 because nc >= 9 for try-else-finally and\r\n\t                 it would otherwise have a type of except_clause */\r\n\t                orelse = astForSuite(c, CHILD(n, nc - 4));\r\n\t                nexcept--;\r\n\t            }\r\n\r\n\t            finally_ = astForSuite(c, CHILD(n, nc - 1));\r\n\t            nexcept--;\r\n\t        }\r\n\t        else {\r\n\t            /* we can assume it's an \"else\",\r\n\t             otherwise it would have a type of except_clause */\r\n\t            orelse = astForSuite(c, CHILD(n, nc - 1));\r\n\t            nexcept--;\r\n\t        }\r\n\t    }\r\n\t    else if (CHILD(n, nc - 3).type !== SYM.except_clause) {\r\n\t        throw new Sk.builtin.SyntaxError(\"malformed 'try' statement\", c.c_filename, n.lineno);\r\n\t    }\r\n\r\n\t    if (nexcept > 0) {\r\n\t        handlers = [];\r\n\t        for (i = 0; i < nexcept; ++i) {\r\n\t            handlers[i] = astForExceptClause(c, CHILD(n, 3 + i * 3), CHILD(n, 5 + i * 3));\r\n\t        }\r\n\t        exceptSt = new TryExcept(body, handlers, orelse, n.lineno, n.col_offset);\r\n\r\n\t        if (!finally_) {\r\n\t            return exceptSt;\r\n\t        }\r\n\r\n\t        /* if a 'finally' is present too, we nest the TryExcept within a\r\n\t         TryFinally to emulate try ... except ... finally */\r\n\t        body = [exceptSt];\r\n\t    }\r\n\r\n\t    goog.asserts.assert(finally_ !== null);\r\n\t    return new TryFinally(body, finally_, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\r\n\tfunction astForDottedName (c, n) {\r\n\t    var i;\r\n\t    var e;\r\n\t    var id;\r\n\t    var col_offset;\r\n\t    var lineno;\r\n\t    REQ(n, SYM.dotted_name);\r\n\t    lineno = n.lineno;\r\n\t    col_offset = n.col_offset;\r\n\t    id = strobj(CHILD(n, 0).value);\r\n\t    e = new Name(id, Load, lineno, col_offset);\r\n\t    for (i = 2; i < NCH(n); i += 2) {\r\n\t        id = strobj(CHILD(n, i).value);\r\n\t        e = new Attribute(e, id, Load, lineno, col_offset);\r\n\t    }\r\n\t    return e;\r\n\t}\r\n\r\n\tfunction astForDecorator (c, n) {\r\n\t    /* decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE */\r\n\t    var nameExpr;\r\n\t    REQ(n, SYM.decorator);\r\n\t    REQ(CHILD(n, 0), TOK.T_AT);\r\n\t    REQ(CHILD(n, NCH(n) - 1), TOK.T_NEWLINE);\r\n\t    nameExpr = astForDottedName(c, CHILD(n, 1));\r\n\t    if (NCH(n) === 3) // no args\r\n\t    {\r\n\t        return nameExpr;\r\n\t    }\r\n\t    else if (NCH(n) === 5) // call with no args\r\n\t    {\r\n\t        return new Call(nameExpr, [], [], null, null, n.lineno, n.col_offset);\r\n\t    }\r\n\t    else {\r\n\t        return astForCall(c, CHILD(n, 3), nameExpr);\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForDecorators (c, n) {\r\n\t    var i;\r\n\t    var decoratorSeq;\r\n\t    REQ(n, SYM.decorators);\r\n\t    decoratorSeq = [];\r\n\t    for (i = 0; i < NCH(n); ++i) {\r\n\t        decoratorSeq[i] = astForDecorator(c, CHILD(n, i));\r\n\t    }\r\n\t    return decoratorSeq;\r\n\t}\r\n\r\n\tfunction astForDecorated (c, n) {\r\n\t    var thing;\r\n\t    var decoratorSeq;\r\n\t    REQ(n, SYM.decorated);\r\n\t    decoratorSeq = astForDecorators(c, CHILD(n, 0));\r\n\t    goog.asserts.assert(CHILD(n, 1).type === SYM.funcdef || CHILD(n, 1).type === SYM.classdef);\r\n\r\n\t    thing = null;\r\n\t    if (CHILD(n, 1).type === SYM.funcdef) {\r\n\t        thing = astForFuncdef(c, CHILD(n, 1), decoratorSeq);\r\n\t    }\r\n\t    else if (CHILD(n, 1) === SYM.classdef) {\r\n\t        thing = astForClassdef(c, CHILD(n, 1), decoratorSeq);\r\n\t    }\r\n\t    if (thing) {\r\n\t        thing.lineno = n.lineno;\r\n\t        thing.col_offset = n.col_offset;\r\n\t    }\r\n\t    return thing;\r\n\t}\r\n\r\n\t//note: with statements need to be updated to 2.7\r\n\t//see: ast.c lines: 3127 -> 3185\r\n\r\n\tfunction astForWithVar (c, n) {\r\n\t    REQ(n, SYM.with_item);\r\n\t    return astForExpr(c, CHILD(n, 1));\r\n\t}\r\n\r\n\tfunction astForWithStmt (c, n) {\r\n\t    /* with_stmt: 'with' test [ with_var ] ':' suite */\r\n\t    var optionalVars;\r\n\t    var contextExpr;\r\n\t    var suiteIndex = 3; // skip with, test, :\r\n\t    goog.asserts.assert(n.type === SYM.with_stmt);\r\n\t    contextExpr = astForExpr(c, CHILD(n, 1));\r\n\t    if (CHILD(n, 2).type === SYM.with_item) {\r\n\t        optionalVars = astForWithVar(c, CHILD(n, 2));\r\n\t        setContext(c, optionalVars, Store, n);\r\n\t        suiteIndex = 4;\r\n\t    }\r\n\t    return new With_(contextExpr, optionalVars, astForSuite(c, CHILD(n, suiteIndex)), n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForExecStmt (c, n) {\r\n\t    var expr1, globals = null, locals = null;\r\n\t    var nchildren = NCH(n);\r\n\t    goog.asserts.assert(nchildren === 2 || nchildren === 4 || nchildren === 6);\r\n\r\n\t    /* exec_stmt: 'exec' expr ['in' test [',' test]] */\r\n\t    REQ(n, SYM.exec_stmt);\r\n\t    expr1 = astForExpr(c, CHILD(n, 1));\r\n\t    if (nchildren >= 4) {\r\n\t        globals = astForExpr(c, CHILD(n, 3));\r\n\t    }\r\n\t    if (nchildren === 6) {\r\n\t        locals = astForExpr(c, CHILD(n, 5));\r\n\t    }\r\n\t    return new Exec(expr1, globals, locals, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForIfStmt (c, n) {\r\n\t    /* if_stmt: 'if' test ':' suite ('elif' test ':' suite)*\r\n\t     ['else' ':' suite]\r\n\t     */\r\n\t    var off;\r\n\t    var i;\r\n\t    var orelse;\r\n\t    var hasElse;\r\n\t    var nElif;\r\n\t    var decider;\r\n\t    var s;\r\n\t    REQ(n, SYM.if_stmt);\r\n\t    if (NCH(n) === 4) {\r\n\t        return new If_(\r\n\t            astForExpr(c, CHILD(n, 1)),\r\n\t            astForSuite(c, CHILD(n, 3)),\r\n\t            [], n.lineno, n.col_offset);\r\n\t    }\r\n\r\n\t    s = CHILD(n, 4).value;\r\n\t    decider = s.charAt(2); // elSe or elIf\r\n\t    if (decider === \"s\") {\r\n\t        return new If_(\r\n\t            astForExpr(c, CHILD(n, 1)),\r\n\t            astForSuite(c, CHILD(n, 3)),\r\n\t            astForSuite(c, CHILD(n, 6)),\r\n\t            n.lineno, n.col_offset);\r\n\t    }\r\n\t    else if (decider === \"i\") {\r\n\t        nElif = NCH(n) - 4;\r\n\t        hasElse = false;\r\n\t        orelse = [];\r\n\r\n\t        /* must reference the child nElif+1 since 'else' token is third, not\r\n\t         * fourth child from the end. */\r\n\t        if (CHILD(n, nElif + 1).type === TOK.T_NAME &&\r\n\t            CHILD(n, nElif + 1).value.charAt(2) === \"s\") {\r\n\t            hasElse = true;\r\n\t            nElif -= 3;\r\n\t        }\r\n\t        nElif /= 4;\r\n\r\n\t        if (hasElse) {\r\n\t            orelse = [\r\n\t                new If_(\r\n\t                    astForExpr(c, CHILD(n, NCH(n) - 6)),\r\n\t                    astForSuite(c, CHILD(n, NCH(n) - 4)),\r\n\t                    astForSuite(c, CHILD(n, NCH(n) - 1)),\r\n\t                    CHILD(n, NCH(n) - 6).lineno,\r\n\t                    CHILD(n, NCH(n) - 6).col_offset)];\r\n\t            nElif--;\r\n\t        }\r\n\r\n\t        for (i = 0; i < nElif; ++i) {\r\n\t            off = 5 + (nElif - i - 1) * 4;\r\n\t            orelse = [\r\n\t                new If_(\r\n\t                    astForExpr(c, CHILD(n, off)),\r\n\t                    astForSuite(c, CHILD(n, off + 2)),\r\n\t                    orelse,\r\n\t                    CHILD(n, off).lineno,\r\n\t                    CHILD(n, off).col_offset)];\r\n\t        }\r\n\t        return new If_(\r\n\t            astForExpr(c, CHILD(n, 1)),\r\n\t            astForSuite(c, CHILD(n, 3)),\r\n\t            orelse, n.lineno, n.col_offset);\r\n\t    }\r\n\r\n\t    goog.asserts.fail(\"unexpected token in 'if' statement\");\r\n\t}\r\n\r\n\tfunction astForExprlist (c, n, context) {\r\n\t    var e;\r\n\t    var i;\r\n\t    var seq;\r\n\t    REQ(n, SYM.exprlist);\r\n\t    seq = [];\r\n\t    for (i = 0; i < NCH(n); i += 2) {\r\n\t        e = astForExpr(c, CHILD(n, i));\r\n\t        seq[i / 2] = e;\r\n\t        if (context) {\r\n\t            setContext(c, e, context, CHILD(n, i));\r\n\t        }\r\n\t    }\r\n\t    return seq;\r\n\t}\r\n\r\n\tfunction astForDelStmt (c, n) {\r\n\t    /* del_stmt: 'del' exprlist */\r\n\t    REQ(n, SYM.del_stmt);\r\n\t    return new Delete_(astForExprlist(c, CHILD(n, 1), Del), n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForGlobalStmt (c, n) {\r\n\t    /* global_stmt: 'global' NAME (',' NAME)* */\r\n\t    var i;\r\n\t    var s = [];\r\n\t    REQ(n, SYM.global_stmt);\r\n\t    for (i = 1; i < NCH(n); i += 2) {\r\n\t        s[(i - 1) / 2] = strobj(CHILD(n, i).value);\r\n\t    }\r\n\t    return new Global(s, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForAssertStmt (c, n) {\r\n\t    /* assert_stmt: 'assert' test [',' test] */\r\n\t    REQ(n, SYM.assert_stmt);\r\n\t    if (NCH(n) === 2) {\r\n\t        return new Assert(astForExpr(c, CHILD(n, 1)), null, n.lineno, n.col_offset);\r\n\t    }\r\n\t    else if (NCH(n) === 4) {\r\n\t        return new Assert(astForExpr(c, CHILD(n, 1)), astForExpr(c, CHILD(n, 3)), n.lineno, n.col_offset);\r\n\t    }\r\n\t    goog.asserts.fail(\"improper number of parts to assert stmt\");\r\n\t}\r\n\r\n\tfunction aliasForImportName (c, n) {\r\n\t    /*\r\n\t     import_as_name: NAME ['as' NAME]\r\n\t     dotted_as_name: dotted_name ['as' NAME]\r\n\t     dotted_name: NAME ('.' NAME)*\r\n\t     */\r\n\r\n\t    var i;\r\n\t    var a;\r\n\t    var name;\r\n\t    var str;\r\n\t    loop: while (true) {\r\n\t        switch (n.type) {\r\n\t            case SYM.import_as_name:\r\n\t                str = null;\r\n\t                name = strobj(CHILD(n, 0).value);\r\n\t                if (NCH(n) === 3) {\r\n\t                    str = CHILD(n, 2).value;\r\n\t                }\r\n\t                return new alias(name, str == null ? null : strobj(str));\r\n\t            case SYM.dotted_as_name:\r\n\t                if (NCH(n) === 1) {\r\n\t                    n = CHILD(n, 0);\r\n\t                    continue loop;\r\n\t                }\r\n\t                else {\r\n\t                    a = aliasForImportName(c, CHILD(n, 0));\r\n\t                    goog.asserts.assert(!a.asname);\r\n\t                    a.asname = strobj(CHILD(n, 2).value);\r\n\t                    return a;\r\n\t                }\r\n\t                break;\r\n\t            case SYM.dotted_name:\r\n\t                if (NCH(n) === 1) {\r\n\t                    return new alias(strobj(CHILD(n, 0).value), null);\r\n\t                }\r\n\t                else {\r\n\t                    // create a string of the form a.b.c\r\n\t                    str = \"\";\r\n\t                    for (i = 0; i < NCH(n); i += 2) {\r\n\t                        str += CHILD(n, i).value + \".\";\r\n\t                    }\r\n\t                    return new alias(strobj(str.substr(0, str.length - 1)), null);\r\n\t                }\r\n\t                break;\r\n\t            case TOK.T_STAR:\r\n\t                return new alias(strobj(\"*\"), null);\r\n\t            default:\r\n\t                throw new Sk.builtin.SyntaxError(\"unexpected import name\", c.c_filename, n.lineno);\r\n\t        }\r\n\t        break;\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForImportStmt (c, n) {\r\n\t    /*\r\n\t     import_stmt: import_name | import_from\r\n\t     import_name: 'import' dotted_as_names\r\n\t     import_from: 'from' ('.'* dotted_name | '.') 'import'\r\n\t     ('*' | '(' import_as_names ')' | import_as_names)\r\n\t     */\r\n\t    var modname;\r\n\t    var idx;\r\n\t    var nchildren;\r\n\t    var ndots;\r\n\t    var mod;\r\n\t    var i;\r\n\t    var aliases;\r\n\t    var col_offset;\r\n\t    var lineno;\r\n\t    REQ(n, SYM.import_stmt);\r\n\t    lineno = n.lineno;\r\n\t    col_offset = n.col_offset;\r\n\t    n = CHILD(n, 0);\r\n\t    if (n.type === SYM.import_name) {\r\n\t        n = CHILD(n, 1);\r\n\t        REQ(n, SYM.dotted_as_names);\r\n\t        aliases = [];\r\n\t        for (i = 0; i < NCH(n); i += 2) {\r\n\t            aliases[i / 2] = aliasForImportName(c, CHILD(n, i));\r\n\t        }\r\n\t        return new Import_(aliases, lineno, col_offset);\r\n\t    }\r\n\t    else if (n.type === SYM.import_from) {\r\n\t        mod = null;\r\n\t        ndots = 0;\r\n\r\n\t        for (idx = 1; idx < NCH(n); ++idx) {\r\n\t            if (CHILD(n, idx).type === SYM.dotted_name) {\r\n\t                mod = aliasForImportName(c, CHILD(n, idx));\r\n\t                idx++;\r\n\t                break;\r\n\t            }\r\n\t            else if (CHILD(n, idx).type !== TOK.T_DOT) {\r\n\t                break;\r\n\t            }\r\n\t            ndots++;\r\n\t        }\r\n\t        ++idx; // skip the import keyword\r\n\t        switch (CHILD(n, idx).type) {\r\n\t            case TOK.T_STAR:\r\n\t                // from ... import\r\n\t                n = CHILD(n, idx);\r\n\t                nchildren = 1;\r\n\t                break;\r\n\t            case TOK.T_LPAR:\r\n\t                // from ... import (x, y, z)\r\n\t                n = CHILD(n, idx + 1);\r\n\t                nchildren = NCH(n);\r\n\t                break;\r\n\t            case SYM.import_as_names:\r\n\t                // from ... import x, y, z\r\n\t                n = CHILD(n, idx);\r\n\t                nchildren = NCH(n);\r\n\t                if (nchildren % 2 === 0) {\r\n\t                    throw new Sk.builtin.SyntaxError(\"trailing comma not allowed without surrounding parentheses\", c.c_filename, n.lineno);\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                throw new Sk.builtin.SyntaxError(\"Unexpected node-type in from-import\", c.c_filename, n.lineno);\r\n\t        }\r\n\t        aliases = [];\r\n\t        if (n.type === TOK.T_STAR) {\r\n\t            aliases[0] = aliasForImportName(c, n);\r\n\t        }\r\n\t        else {\r\n\t            for (i = 0; i < NCH(n); i += 2) {\r\n\t                aliases[i / 2] = aliasForImportName(c, CHILD(n, i));\r\n\t            }\r\n\t        }\r\n\t        modname = mod ? mod.name.v : \"\";\r\n\t        return new ImportFrom(strobj(modname), aliases, ndots, lineno, col_offset);\r\n\t    }\r\n\t    throw new Sk.builtin.SyntaxError(\"unknown import statement\", c.c_filename, n.lineno);\r\n\t}\r\n\r\n\tfunction astForTestlistComp(c, n) {\r\n\t    /* testlist_comp: test ( comp_for | (',' test)* [','] ) */\r\n\t    /* argument: test [comp_for] */\r\n\t    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);\r\n\t    if (NCH(n) > 1 && CHILD(n, 1).type === SYM.comp_for) {\r\n\t        return astForGenExpr(c, n);\r\n\t    }\r\n\t    return astForTestlist(c, n);\r\n\t}\r\n\r\n\tfunction astForListcomp (c, n) {\r\n\t    /* listmaker: test ( list_for | (',' test)* [','] )\r\n\t     list_for: 'for' exprlist 'in' testlist_safe [list_iter]\r\n\t     list_iter: list_for | list_if\r\n\t     list_if: 'if' test [list_iter]\r\n\t     testlist_safe: test [(',' test)+ [',']]\r\n\t     */\r\n\r\n\t    function countListFors (c, n) {\r\n\t        var nfors = 0;\r\n\t        var ch = CHILD(n, 1);\r\n\t        count_list_for: while (true) {\r\n\t            nfors++;\r\n\t            REQ(ch, SYM.list_for);\r\n\t            if (NCH(ch) === 5) {\r\n\t                ch = CHILD(ch, 4);\r\n\t            }\r\n\t            else {\r\n\t                return nfors;\r\n\t            }\r\n\t            count_list_iter: while (true) {\r\n\t                REQ(ch, SYM.list_iter);\r\n\t                ch = CHILD(ch, 0);\r\n\t                if (ch.type === SYM.list_for) {\r\n\t                    continue count_list_for;\r\n\t                }\r\n\t                else if (ch.type === SYM.list_if) {\r\n\t                    if (NCH(ch) === 3) {\r\n\t                        ch = CHILD(ch, 2);\r\n\t                        continue count_list_iter;\r\n\t                    }\r\n\t                    else {\r\n\t                        return nfors;\r\n\t                    }\r\n\t                }\r\n\t                break;\r\n\t            }\r\n\t            break;\r\n\t        }\r\n\t    }\r\n\r\n\t    function countListIfs (c, n) {\r\n\t        var nifs = 0;\r\n\t        while (true) {\r\n\t            REQ(n, SYM.list_iter);\r\n\t            if (CHILD(n, 0).type === SYM.list_for) {\r\n\t                return nifs;\r\n\t            }\r\n\t            n = CHILD(n, 0);\r\n\t            REQ(n, SYM.list_if);\r\n\t            nifs++;\r\n\t            if (NCH(n) == 2) {\r\n\t                return nifs;\r\n\t            }\r\n\t            n = CHILD(n, 2);\r\n\t        }\r\n\t    }\r\n\r\n\t    var j;\r\n\t    var ifs;\r\n\t    var nifs;\r\n\t    var lc;\r\n\t    var expression;\r\n\t    var t;\r\n\t    var forch;\r\n\t    var i;\r\n\t    var ch;\r\n\t    var listcomps;\r\n\t    var nfors;\r\n\t    var elt;\r\n\t    REQ(n, SYM.listmaker);\r\n\t    goog.asserts.assert(NCH(n) > 1);\r\n\t    elt = astForExpr(c, CHILD(n, 0));\r\n\t    nfors = countListFors(c, n);\r\n\t    listcomps = [];\r\n\t    ch = CHILD(n, 1);\r\n\t    for (i = 0; i < nfors; ++i) {\r\n\t        REQ(ch, SYM.list_for);\r\n\t        forch = CHILD(ch, 1);\r\n\t        t = astForExprlist(c, forch, Store);\r\n\t        expression = astForTestlist(c, CHILD(ch, 3));\r\n\t        if (NCH(forch) === 1) {\r\n\t            lc = new comprehension(t[0], expression, []);\r\n\t        }\r\n\t        else {\r\n\t            lc = new comprehension(new Tuple(t, Store, ch.lineno, ch.col_offset), expression, []);\r\n\t        }\r\n\r\n\t        if (NCH(ch) === 5) {\r\n\t            ch = CHILD(ch, 4);\r\n\t            nifs = countListIfs(c, ch);\r\n\t            ifs = [];\r\n\t            for (j = 0; j < nifs; ++j) {\r\n\t                REQ(ch, SYM.list_iter);\r\n\t                ch = CHILD(ch, 0);\r\n\t                REQ(ch, SYM.list_if);\r\n\t                ifs[j] = astForExpr(c, CHILD(ch, 1));\r\n\t                if (NCH(ch) === 3) {\r\n\t                    ch = CHILD(ch, 2);\r\n\t                }\r\n\t            }\r\n\t            if (ch.type === SYM.list_iter) {\r\n\t                ch = CHILD(ch, 0);\r\n\t            }\r\n\t            lc.ifs = ifs;\r\n\t        }\r\n\t        listcomps[i] = lc;\r\n\t    }\r\n\t    return new ListComp(elt, listcomps, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForFactor (c, n) {\r\n\t    /* some random peephole thing that cpy does */\r\n\t    var expression;\r\n\t    var pnum;\r\n\t    var patom;\r\n\t    var ppower;\r\n\t    var pfactor;\r\n\t    if (CHILD(n, 0).type === TOK.T_MINUS && NCH(n) === 2) {\r\n\t        pfactor = CHILD(n, 1);\r\n\t        if (pfactor.type === SYM.factor && NCH(pfactor) === 1) {\r\n\t            ppower = CHILD(pfactor, 0);\r\n\t            if (ppower.type === SYM.power && NCH(ppower) === 1) {\r\n\t                patom = CHILD(ppower, 0);\r\n\t                if (patom.type === SYM.atom) {\r\n\t                    pnum = CHILD(patom, 0);\r\n\t                    if (pnum.type === TOK.T_NUMBER) {\r\n\t                        pnum.value = \"-\" + pnum.value;\r\n\t                        return astForAtom(c, patom);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    expression = astForExpr(c, CHILD(n, 1));\r\n\t    switch (CHILD(n, 0).type) {\r\n\t        case TOK.T_PLUS:\r\n\t            return new UnaryOp(UAdd, expression, n.lineno, n.col_offset);\r\n\t        case TOK.T_MINUS:\r\n\t            return new UnaryOp(USub, expression, n.lineno, n.col_offset);\r\n\t        case TOK.T_TILDE:\r\n\t            return new UnaryOp(Invert, expression, n.lineno, n.col_offset);\r\n\t    }\r\n\r\n\t    goog.asserts.fail(\"unhandled factor\");\r\n\t}\r\n\r\n\tfunction astForForStmt (c, n) {\r\n\t    /* for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] */\r\n\t    var target;\r\n\t    var _target;\r\n\t    var nodeTarget;\r\n\t    var seq = [];\r\n\t    REQ(n, SYM.for_stmt);\r\n\t    if (NCH(n) === 9) {\r\n\t        seq = astForSuite(c, CHILD(n, 8));\r\n\t    }\r\n\t    nodeTarget = CHILD(n, 1);\r\n\t    _target = astForExprlist(c, nodeTarget, Store);\r\n\t    if (NCH(nodeTarget) === 1) {\r\n\t        target = _target[0];\r\n\t    }\r\n\t    else {\r\n\t        target = new Tuple(_target, Store, n.lineno, n.col_offset);\r\n\t    }\r\n\r\n\t    return new For_(target,\r\n\t        astForTestlist(c, CHILD(n, 3)),\r\n\t        astForSuite(c, CHILD(n, 5)),\r\n\t        seq, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForCall (c, n, func) {\r\n\t    /*\r\n\t      arglist: (argument ',')* (argument [',']| '*' test [',' '**' test]\r\n\t               | '**' test)\r\n\t      argument: test [comp_for] | test '=' test       # Really [keyword '='] test\r\n\t    */\r\n\t    var tmp;\r\n\t    var k;\r\n\t    var key;\r\n\t    var e;\r\n\t    var kwarg;\r\n\t    var vararg;\r\n\t    var keywords;\r\n\t    var args;\r\n\t    var ch;\r\n\t    var i;\r\n\t    var ngens;\r\n\t    var nkeywords;\r\n\t    var nargs;\r\n\r\n\t    REQ(n, SYM.arglist);\r\n\t    nargs = 0;\r\n\t    nkeywords = 0;\r\n\t    ngens = 0;\r\n\t    for (i = 0; i < NCH(n); i++) {\r\n\t        ch = CHILD(n, i);\r\n\t        if (ch.type === SYM.argument) {\r\n\t            if (NCH(ch) === 1) {\r\n\t                nargs++;\r\n\t            }\r\n\t            else if (CHILD(ch, 1).type === SYM.comp_for) {\r\n\t                ngens++;\r\n\t            }\r\n\t            else {\r\n\t                nkeywords++;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    if (ngens > 1 || (ngens && (nargs || nkeywords))) {\r\n\t        throw new Sk.builtin.SyntaxError(\"Generator expression must be parenthesized if not sole argument\", c.c_filename, n.lineno);\r\n\t    }\r\n\t    if (nargs + nkeywords + ngens > 255) {\r\n\t        throw new Sk.builtin.SyntaxError(\"more than 255 arguments\", c.c_filename, n.lineno);\r\n\t    }\r\n\t    args = [];\r\n\t    keywords = [];\r\n\t    nargs = 0;\r\n\t    nkeywords = 0;\r\n\t    vararg = null;\r\n\t    kwarg = null;\r\n\t    for (i = 0; i < NCH(n); i++) {\r\n\t        ch = CHILD(n, i);\r\n\t        if (ch.type === SYM.argument) {\r\n\t            if (NCH(ch) === 1) {\r\n\t                if (nkeywords) {\r\n\t                    throw new Sk.builtin.SyntaxError(\"non-keyword arg after keyword arg\", c.c_filename, n.lineno);\r\n\t                }\r\n\t                if (vararg) {\r\n\t                    throw new Sk.builtin.SyntaxError(\"only named arguments may follow *expression\", c.c_filename, n.lineno);\r\n\t                }\r\n\t                args[nargs++] = astForExpr(c, CHILD(ch, 0));\r\n\t            }\r\n\t            else if (CHILD(ch, 1).type === SYM.comp_for) {\r\n\t                args[nargs++] = astForGenExpr(c, ch);\r\n\t            }\r\n\t            else {\r\n\t                e = astForExpr(c, CHILD(ch, 0));\r\n\t                if (e.constructor === Lambda) {\r\n\t                    throw new Sk.builtin.SyntaxError(\"lambda cannot contain assignment\", c.c_filename, n.lineno);\r\n\t                }\r\n\t                else if (e.constructor !== Name) {\r\n\t                    throw new Sk.builtin.SyntaxError(\"keyword can't be an expression\", c.c_filename, n.lineno);\r\n\t                }\r\n\t                key = e.id;\r\n\t                forbiddenCheck(c, CHILD(ch, 0), key, n.lineno);\r\n\t                for (k = 0; k < nkeywords; ++k) {\r\n\t                    tmp = keywords[k].arg;\r\n\t                    if (tmp === key) {\r\n\t                        throw new Sk.builtin.SyntaxError(\"keyword argument repeated\", c.c_filename, n.lineno);\r\n\t                    }\r\n\t                }\r\n\t                keywords[nkeywords++] = new keyword(key, astForExpr(c, CHILD(ch, 2)));\r\n\t            }\r\n\t        }\r\n\t        else if (ch.type === TOK.T_STAR) {\r\n\t            vararg = astForExpr(c, CHILD(n, ++i));\r\n\t        }\r\n\t        else if (ch.type === TOK.T_DOUBLESTAR) {\r\n\t            kwarg = astForExpr(c, CHILD(n, ++i));\r\n\t        }\r\n\t    }\r\n\t    return new Call(func, args, keywords, vararg, kwarg, func.lineno, func.col_offset);\r\n\t}\r\n\r\n\tfunction astForTrailer (c, n, leftExpr) {\r\n\t    /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME \r\n\t     subscriptlist: subscript (',' subscript)* [',']\r\n\t     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]\r\n\t     */\r\n\t    var e;\r\n\t    var elts;\r\n\t    var slc;\r\n\t    var j;\r\n\t    var slices;\r\n\t    var simple;\r\n\t    REQ(n, SYM.trailer);\r\n\t    if (CHILD(n, 0).type === TOK.T_LPAR) {\r\n\t        if (NCH(n) === 2) {\r\n\t            return new Call(leftExpr, [], [], null, null, n.lineno, n.col_offset);\r\n\t        }\r\n\t        else {\r\n\t            return astForCall(c, CHILD(n, 1), leftExpr);\r\n\t        }\r\n\t    }\r\n\t    else if (CHILD(n, 0).type === TOK.T_DOT) {\r\n\t        return new Attribute(leftExpr, strobj(CHILD(n, 1).value), Load, n.lineno, n.col_offset);\r\n\t    }\r\n\t    else {\r\n\t        REQ(CHILD(n, 0), TOK.T_LSQB);\r\n\t        REQ(CHILD(n, 2), TOK.T_RSQB);\r\n\t        n = CHILD(n, 1);\r\n\t        if (NCH(n) === 1) {\r\n\t            return new Subscript(leftExpr, astForSlice(c, CHILD(n, 0)), Load, n.lineno, n.col_offset);\r\n\t        }\r\n\t        else {\r\n\t            /* The grammar is ambiguous here. The ambiguity is resolved \r\n\t             by treating the sequence as a tuple literal if there are\r\n\t             no slice features.\r\n\t             */\r\n\t            simple = true;\r\n\t            slices = [];\r\n\t            for (j = 0; j < NCH(n); j += 2) {\r\n\t                slc = astForSlice(c, CHILD(n, j));\r\n\t                if (slc.constructor !== Index) {\r\n\t                    simple = false;\r\n\t                }\r\n\t                slices[j / 2] = slc;\r\n\t            }\r\n\t            if (!simple) {\r\n\t                return new Subscript(leftExpr, new ExtSlice(slices), Load, n.lineno, n.col_offset);\r\n\t            }\r\n\t            elts = [];\r\n\t            for (j = 0; j < slices.length; ++j) {\r\n\t                slc = slices[j];\r\n\t                goog.asserts.assert(slc.constructor === Index && slc.value !== null && slc.value !== undefined);\r\n\t                elts[j] = slc.value;\r\n\t            }\r\n\t            e = new Tuple(elts, Load, n.lineno, n.col_offset);\r\n\t            return new Subscript(leftExpr, new Index(e), Load, n.lineno, n.col_offset);\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForFlowStmt (c, n) {\r\n\t    /*\r\n\t     flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt\r\n\t     | yield_stmt\r\n\t     break_stmt: 'break'\r\n\t     continue_stmt: 'continue'\r\n\t     return_stmt: 'return' [testlist]\r\n\t     yield_stmt: yield_expr\r\n\t     yield_expr: 'yield' testlist\r\n\t     raise_stmt: 'raise' [test [',' test [',' test]]]\r\n\t     */\r\n\t    var ch;\r\n\t    REQ(n, SYM.flow_stmt);\r\n\t    ch = CHILD(n, 0);\r\n\t    switch (ch.type) {\r\n\t        case SYM.break_stmt:\r\n\t            return new Break_(n.lineno, n.col_offset);\r\n\t        case SYM.continue_stmt:\r\n\t            return new Continue_(n.lineno, n.col_offset);\r\n\t        case SYM.yield_stmt:\r\n\t            return new Expr(astForExpr(c, CHILD(ch, 0)), n.lineno, n.col_offset);\r\n\t        case SYM.return_stmt:\r\n\t            if (NCH(ch) === 1) {\r\n\t                return new Return_(null, n.lineno, n.col_offset);\r\n\t            }\r\n\t            else {\r\n\t                return new Return_(astForTestlist(c, CHILD(ch, 1)), n.lineno, n.col_offset);\r\n\t            }\r\n\t            break;\r\n\t        case SYM.raise_stmt:\r\n\t            if (NCH(ch) === 1) {\r\n\t                return new Raise(null, null, null, n.lineno, n.col_offset);\r\n\t            }\r\n\t            else if (NCH(ch) === 2) {\r\n\t                return new Raise(astForExpr(c, CHILD(ch, 1)), null, null, n.lineno, n.col_offset);\r\n\t            }\r\n\t            else if (NCH(ch) === 4) {\r\n\t                return new Raise(\r\n\t                    astForExpr(c, CHILD(ch, 1)),\r\n\t                    astForExpr(c, CHILD(ch, 3)),\r\n\t                    null, n.lineno, n.col_offset);\r\n\t            }\r\n\t            else if (NCH(ch) === 6) {\r\n\t                return new Raise(\r\n\t                    astForExpr(c, CHILD(ch, 1)),\r\n\t                    astForExpr(c, CHILD(ch, 3)),\r\n\t                    astForExpr(c, CHILD(ch, 5)),\r\n\t                    n.lineno, n.col_offset);\r\n\t            }\r\n\t            break;\r\n\t        default:\r\n\t            goog.asserts.fail(\"unexpected flow_stmt\");\r\n\t    }\r\n\t    goog.asserts.fail(\"unhandled flow statement\");\r\n\t}\r\n\r\n\tfunction astForArguments (c, n) {\r\n\t    /* parameters: '(' [varargslist] ')'\r\n\t     varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME]\r\n\t     | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']\r\n\t     */\r\n\t    var parenthesized;\r\n\t    var id;\r\n\t    var complexArgs;\r\n\t    var k;\r\n\t    var j;\r\n\t    var i;\r\n\t    var foundDefault;\r\n\t    var defaults;\r\n\t    var args;\r\n\t    var ch;\r\n\t    var vararg = null;\r\n\t    var kwarg = null;\r\n\t    if (n.type === SYM.parameters) {\r\n\t        if (NCH(n) === 2) // () as arglist\r\n\t        {\r\n\t            return new arguments_([], null, null, []);\r\n\t        }\r\n\t        n = CHILD(n, 1);\r\n\t    }\r\n\t    REQ(n, SYM.varargslist);\r\n\r\n\t    args = [];\r\n\t    defaults = [];\r\n\r\n\t    /* fpdef: NAME | '(' fplist ')'\r\n\t     fplist: fpdef (',' fpdef)* [',']\r\n\t     */\r\n\t    foundDefault = false;\r\n\t    i = 0;\r\n\t    j = 0; // index for defaults\r\n\t    k = 0; // index for args\r\n\t    while (i < NCH(n)) {\r\n\t        ch = CHILD(n, i);\r\n\t        switch (ch.type) {\r\n\t            case SYM.fpdef:\r\n\t                complexArgs = 0;\r\n\t                parenthesized = 0;\r\n\t                handle_fpdef: while (true) {\r\n\t                    if (i + 1 < NCH(n) && CHILD(n, i + 1).type === TOK.T_EQUAL) {\r\n\t                        defaults[j++] = astForExpr(c, CHILD(n, i + 2));\r\n\t                        i += 2;\r\n\t                        foundDefault = true;\r\n\t                    }\r\n\t                    else if (foundDefault) {\r\n\t                        /* def f((x)=4): pass should raise an error.\r\n\t                         def f((x, (y))): pass will just incur the tuple unpacking warning. */\r\n\t                        if (parenthesized && !complexArgs) {\r\n\t                            throw new Sk.builtin.SyntaxError(\"parenthesized arg with default\", c.c_filename, n.lineno);\r\n\t                        }\r\n\t                        throw new Sk.builtin.SyntaxError(\"non-default argument follows default argument\", c.c_filename, n.lineno);\r\n\t                    }\r\n\r\n\t                    if (NCH(ch) === 3) {\r\n\t                        ch = CHILD(ch, 1);\r\n\t                        // def foo((x)): is not complex, special case.\r\n\t                        if (NCH(ch) !== 1) {\r\n\t                            throw new Sk.builtin.SyntaxError(\"tuple parameter unpacking has been removed\", c.c_filename, n.lineno);\r\n\t                        }\r\n\t                        else {\r\n\t                            /* def foo((x)): setup for checking NAME below. */\r\n\t                            /* Loop because there can be many parens and tuple\r\n\t                             unpacking mixed in. */\r\n\t                            parenthesized = true;\r\n\t                            ch = CHILD(ch, 0);\r\n\t                            goog.asserts.assert(ch.type === SYM.fpdef);\r\n\t                            continue handle_fpdef;\r\n\t                        }\r\n\t                    }\r\n\t                    if (CHILD(ch, 0).type === TOK.T_NAME) {\r\n\t                        forbiddenCheck(c, n, CHILD(ch, 0).value, n.lineno);\r\n\t                        id = strobj(CHILD(ch, 0).value);\r\n\t                        args[k++] = new Name(id, Param, ch.lineno, ch.col_offset);\r\n\t                    }\r\n\t                    i += 2;\r\n\t                    if (parenthesized) {\r\n\t                        throw new Sk.builtin.SyntaxError(\"parenthesized argument names are invalid\", c.c_filename, n.lineno);\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t                break;\r\n\t            case TOK.T_STAR:\r\n\t                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);\r\n\t                vararg = strobj(CHILD(n, i + 1).value);\r\n\t                i += 3;\r\n\t                break;\r\n\t            case TOK.T_DOUBLESTAR:\r\n\t                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);\r\n\t                kwarg = strobj(CHILD(n, i + 1).value);\r\n\t                i += 3;\r\n\t                break;\r\n\t            default:\r\n\t                goog.asserts.fail(\"unexpected node in varargslist\");\r\n\t        }\r\n\t    }\r\n\t    return new arguments_(args, vararg, kwarg, defaults);\r\n\t}\r\n\r\n\tfunction astForFuncdef (c, n, decoratorSeq) {\r\n\t    /* funcdef: 'def' NAME parameters ':' suite */\r\n\t    var body;\r\n\t    var args;\r\n\t    var name;\r\n\t    REQ(n, SYM.funcdef);\r\n\t    name = strobj(CHILD(n, 1).value);\r\n\t    forbiddenCheck(c, CHILD(n, 1), CHILD(n, 1).value, n.lineno);\r\n\t    args = astForArguments(c, CHILD(n, 2));\r\n\t    body = astForSuite(c, CHILD(n, 4));\r\n\t    return new FunctionDef(name, args, body, decoratorSeq, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForClassBases (c, n) {\r\n\t    /* testlist: test (',' test)* [','] */\r\n\t    goog.asserts.assert(NCH(n) > 0);\r\n\t    REQ(n, SYM.testlist);\r\n\t    if (NCH(n) === 1) {\r\n\t        return [ astForExpr(c, CHILD(n, 0)) ];\r\n\t    }\r\n\t    return seqForTestlist(c, n);\r\n\t}\r\n\r\n\tfunction astForClassdef (c, n, decoratorSeq) {\r\n\t    /* classdef: 'class' NAME ['(' testlist ')'] ':' suite */\r\n\t    var s;\r\n\t    var bases;\r\n\t    var classname;\r\n\t    REQ(n, SYM.classdef);\r\n\t    forbiddenCheck(c, n, CHILD(n, 1).value, n.lineno);\r\n\t    classname = strobj(CHILD(n, 1).value);\r\n\t    if (NCH(n) === 4) {\r\n\t        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 3)), decoratorSeq, n.lineno, n.col_offset);\r\n\t    }\r\n\t    if (CHILD(n, 3).type === TOK.T_RPAR) {\r\n\t        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 5)), decoratorSeq, n.lineno, n.col_offset);\r\n\t    }\r\n\r\n\t    bases = astForClassBases(c, CHILD(n, 3));\r\n\t    s = astForSuite(c, CHILD(n, 6));\r\n\t    return new ClassDef(classname, bases, s, decoratorSeq, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForLambdef (c, n) {\r\n\t    /* lambdef: 'lambda' [varargslist] ':' test */\r\n\t    var args;\r\n\t    var expression;\r\n\t    if (NCH(n) === 3) {\r\n\t        args = new arguments_([], null, null, []);\r\n\t        expression = astForExpr(c, CHILD(n, 2));\r\n\t    }\r\n\t    else {\r\n\t        args = astForArguments(c, CHILD(n, 1));\r\n\t        expression = astForExpr(c, CHILD(n, 3));\r\n\t    }\r\n\t    return new Lambda(args, expression, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForComprehension(c, n) {\r\n\t    /* testlist_comp: test ( comp_for | (',' test)* [','] )\r\n\t       argument: test [comp_for] | test '=' test       # Really [keyword '='] test */\r\n\t    \r\n\t    var j;\r\n\t    var ifs;\r\n\t    var nifs;\r\n\t    var ge;\r\n\t    var expression;\r\n\t    var t;\r\n\t    var forch;\r\n\t    var i;\r\n\t    var ch;\r\n\t    var genexps;\r\n\t    var nfors;\r\n\t    var elt;\r\n\t    var comps;\r\n\t    var comp;\r\n\r\n\t    function countCompFors(c, n) {\r\n\t        var nfors = 0;\r\n\t        count_comp_for: while (true) {\r\n\t            nfors++;\r\n\t            REQ(n, SYM.comp_for);\r\n\t            if (NCH(n) === 5) {\r\n\t                n = CHILD(n, 4);\r\n\t            } else {\r\n\t                return nfors;\r\n\t            }\r\n\t            count_comp_iter: while (true) {\r\n\t                REQ(n, SYM.comp_iter);\r\n\t                n = CHILD(n, 0);\r\n\t                if (n.type === SYM.comp_for) {\r\n\t                    continue count_comp_for;\r\n\t                } else if (n.type === SYM.comp_if) {\r\n\t                    if (NCH(n) === 3) {\r\n\t                        n = CHILD(n, 2);\r\n\t                        continue count_comp_iter;\r\n\t                    } else {\r\n\t                        return nfors;\r\n\t                    }\r\n\t                }\r\n\t                break;\r\n\t            }\r\n\t            break;\r\n\t        }\r\n\t        goog.asserts.fail(\"logic error in countCompFors\");\r\n\t    }\r\n\r\n\t    function countCompIfs(c, n) {\r\n\t        var nifs = 0;\r\n\t        while (true) {\r\n\t            REQ(n, SYM.comp_iter);\r\n\t            if (CHILD(n, 0).type === SYM.comp_for) {\r\n\t                return nifs;\r\n\t            }\r\n\t            n = CHILD(n, 0);\r\n\t            REQ(n, SYM.comp_if);\r\n\t            nifs++;\r\n\t            if (NCH(n) == 2) {\r\n\t                return nifs;\r\n\t            }\r\n\t            n = CHILD(n, 2);\r\n\t        }\r\n\t    }\r\n\r\n\t    nfors = countCompFors(c, n);\r\n\t    comps = [];\r\n\t    for (i = 0; i < nfors; ++i) {\r\n\t        REQ(n, SYM.comp_for);\r\n\t        forch = CHILD(n, 1);\r\n\t        t = astForExprlist(c, forch, Store);\r\n\t        expression = astForExpr(c, CHILD(n, 3));\r\n\t        if (NCH(forch) === 1) {\r\n\t            comp = new comprehension(t[0], expression, []);\r\n\t        } else {\r\n\t            comp = new comprehension(new Tuple(t, Store, n.lineno, n.col_offset), expression, []);\r\n\t        }\r\n\t        if (NCH(n) === 5) {\r\n\t            n = CHILD(n, 4);\r\n\t            nifs = countCompIfs(c, n);\r\n\t            ifs = [];\r\n\t            for (j = 0; j < nifs; ++j) {\r\n\t                REQ(n, SYM.comp_iter);\r\n\t                n = CHILD(n, 0);\r\n\t                REQ(n, SYM.comp_if);\r\n\t                expression = astForExpr(c, CHILD(n, 1));\r\n\t                ifs[j] = expression;\r\n\t                if (NCH(n) === 3) {\r\n\t                    n = CHILD(n, 2);\r\n\t                }\r\n\t            }\r\n\t            if (n.type === SYM.comp_iter) {\r\n\t                n = CHILD(n, 0);\r\n\t            }\r\n\t            comp.ifs = ifs;\r\n\t        }\r\n\t        comps[i] = comp;\r\n\t    }\r\n\t    return comps;\r\n\t}\r\n\r\n\tfunction astForIterComp(c, n, type) {\r\n\t    var elt, comps;\r\n\t    goog.asserts.assert(NCH(n) > 1);\r\n\t    elt = astForExpr(c, CHILD(n, 0));\r\n\t    comps = astForComprehension(c, CHILD(n, 1));\r\n\t    if (type === COMP_GENEXP) {\r\n\t        return new GeneratorExp(elt, comps, n.lineno, n.col_offset);\r\n\t    } else if (type === COMP_SETCOMP) {\r\n\t        return new SetComp(elt, comps, n.lineno, n.col_offset);\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForDictComp(c, n) {\r\n\t    var key, value;\r\n\t    var comps = [];\r\n\t    goog.asserts.assert(NCH(n) > 3);\r\n\t    REQ(CHILD(n, 1), TOK.T_COLON);\r\n\t    key = astForExpr(c, CHILD(n, 0));\r\n\t    value = astForExpr(c, CHILD(n, 2));\r\n\t    comps = astForComprehension(c, CHILD(n, 3));\r\n\t    return new DictComp(key, value, comps, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForGenExpr(c, n) {\r\n\t    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);\r\n\t    return astForIterComp(c, n, COMP_GENEXP);\r\n\t}\r\n\r\n\tfunction astForSetComp(c, n) {\r\n\t    goog.asserts.assert(n.type === SYM.dictorsetmaker);\r\n\t    return astForIterComp(c, n, COMP_SETCOMP);\r\n\t}\r\n\r\n\tfunction astForWhileStmt (c, n) {\r\n\t    /* while_stmt: 'while' test ':' suite ['else' ':' suite] */\r\n\t    REQ(n, SYM.while_stmt);\r\n\t    if (NCH(n) === 4) {\r\n\t        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), [], n.lineno, n.col_offset);\r\n\t    }\r\n\t    else if (NCH(n) === 7) {\r\n\t        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), astForSuite(c, CHILD(n, 6)), n.lineno, n.col_offset);\r\n\t    }\r\n\t    goog.asserts.fail(\"wrong number of tokens for 'while' stmt\");\r\n\t}\r\n\r\n\tfunction astForAugassign (c, n) {\r\n\t    REQ(n, SYM.augassign);\r\n\t    n = CHILD(n, 0);\r\n\t    switch (n.value.charAt(0)) {\r\n\t        case \"+\":\r\n\t            return Add;\r\n\t        case \"-\":\r\n\t            return Sub;\r\n\t        case \"/\":\r\n\t            if (n.value.charAt(1) === \"/\") {\r\n\t                return FloorDiv;\r\n\t            }\r\n\t            return Div;\r\n\t        case \"%\":\r\n\t            return Mod;\r\n\t        case \"<\":\r\n\t            return LShift;\r\n\t        case \">\":\r\n\t            return RShift;\r\n\t        case \"&\":\r\n\t            return BitAnd;\r\n\t        case \"^\":\r\n\t            return BitXor;\r\n\t        case \"|\":\r\n\t            return BitOr;\r\n\t        case \"*\":\r\n\t            if (n.value.charAt(1) === \"*\") {\r\n\t                return Pow;\r\n\t            }\r\n\t            return Mult;\r\n\t        default:\r\n\t            goog.asserts.fail(\"invalid augassign\");\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForBinop (c, n) {\r\n\t    /* Must account for a sequence of expressions.\r\n\t     How should A op B op C by represented?\r\n\t     BinOp(BinOp(A, op, B), op, C).\r\n\t     */\r\n\t    var tmp;\r\n\t    var newoperator;\r\n\t    var nextOper;\r\n\t    var i;\r\n\t    var result = new BinOp(\r\n\t        astForExpr(c, CHILD(n, 0)),\r\n\t        getOperator(CHILD(n, 1)),\r\n\t        astForExpr(c, CHILD(n, 2)),\r\n\t        n.lineno, n.col_offset);\r\n\t    var nops = (NCH(n) - 1) / 2;\r\n\t    for (i = 1; i < nops; ++i) {\r\n\t        nextOper = CHILD(n, i * 2 + 1);\r\n\t        newoperator = getOperator(nextOper);\r\n\t        tmp = astForExpr(c, CHILD(n, i * 2 + 2));\r\n\t        result = new BinOp(result, newoperator, tmp, nextOper.lineno, nextOper.col_offset);\r\n\t    }\r\n\t    return result;\r\n\r\n\t}\r\n\r\n\r\n\tfunction astForTestlist(c, n) {\r\n\t    /* this doesn't show up in Grammar.txt never did: testlist_gexp: test (',' test)* [','] */\r\n\t    /* testlist_comp: test (',' test)* [','] */\r\n\t    /* testlist: test (',' test)* [','] */\r\n\t    /* testlist_safe: test (',' test)+ [','] */\r\n\t    /* testlist1: test (',' test)* */\r\n\t    goog.asserts.assert(NCH(n) > 0);\r\n\t    if (n.type === SYM.testlist_comp) {\r\n\t        if (NCH(n) > 1) {\r\n\t            goog.asserts.assert(CHILD(n, 1).type !== SYM.comp_for);\r\n\t        }\r\n\t    }\r\n\t    else {\r\n\t        goog.asserts.assert(n.type === SYM.testlist || n.type === SYM.testlist_safe || n.type === SYM.testlist1);\r\n\t    }\r\n\r\n\t    if (NCH(n) === 1) {\r\n\t        return astForExpr(c, CHILD(n, 0));\r\n\t    }\r\n\t    else {\r\n\t        return new Tuple(seqForTestlist(c, n), Load, n.lineno, n.col_offset);\r\n\t    }\r\n\r\n\t}\r\n\r\n\tfunction astForExprStmt (c, n) {\r\n\t    var expression;\r\n\t    var value;\r\n\t    var e;\r\n\t    var i;\r\n\t    var targets;\r\n\t    var expr2;\r\n\t    var varName;\r\n\t    var expr1;\r\n\t    var ch;\r\n\t    REQ(n, SYM.expr_stmt);\r\n\t    /* expr_stmt: testlist (augassign (yield_expr|testlist) \r\n\t     | ('=' (yield_expr|testlist))*)\r\n\t     testlist: test (',' test)* [',']\r\n\t     augassign: '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^='\r\n\t     | '<<=' | '>>=' | '**=' | '//='\r\n\t     test: ... here starts the operator precendence dance\r\n\t     */\r\n\t    if (NCH(n) === 1) {\r\n\t        return new Expr(astForTestlist(c, CHILD(n, 0)), n.lineno, n.col_offset);\r\n\t    }\r\n\t    else if (CHILD(n, 1).type === SYM.augassign) {\r\n\t        ch = CHILD(n, 0);\r\n\t        expr1 = astForTestlist(c, ch);\r\n\t        switch (expr1.constructor) {\r\n\t            case GeneratorExp:\r\n\t                throw new Sk.builtin.SyntaxError(\"augmented assignment to generator expression not possible\", c.c_filename, n.lineno);\r\n\t            case Yield:\r\n\t                throw new Sk.builtin.SyntaxError(\"augmented assignment to yield expression not possible\", c.c_filename, n.lineno);\r\n\t            case Name:\r\n\t                varName = expr1.id;\r\n\t                forbiddenCheck(c, ch, varName, n.lineno);\r\n\t                break;\r\n\t            case Attribute:\r\n\t            case Subscript:\r\n\t                break;\r\n\t            default:\r\n\t                throw new Sk.builtin.SyntaxError(\"illegal expression for augmented assignment\", c.c_filename, n.lineno);\r\n\t        }\r\n\t        setContext(c, expr1, Store, ch);\r\n\r\n\t        ch = CHILD(n, 2);\r\n\t        if (ch.type === SYM.testlist) {\r\n\t            expr2 = astForTestlist(c, ch);\r\n\t        }\r\n\t        else {\r\n\t            expr2 = astForExpr(c, ch);\r\n\t        }\r\n\r\n\t        return new AugAssign(expr1, astForAugassign(c, CHILD(n, 1)), expr2, n.lineno, n.col_offset);\r\n\t    }\r\n\t    else {\r\n\t        // normal assignment\r\n\t        REQ(CHILD(n, 1), TOK.T_EQUAL);\r\n\t        targets = [];\r\n\t        for (i = 0; i < NCH(n) - 2; i += 2) {\r\n\t            ch = CHILD(n, i);\r\n\t            if (ch.type === SYM.yield_expr) {\r\n\t                throw new Sk.builtin.SyntaxError(\"assignment to yield expression not possible\", c.c_filename, n.lineno);\r\n\t            }\r\n\t            e = astForTestlist(c, ch);\r\n\t            setContext(c, e, Store, CHILD(n, i));\r\n\t            targets[i / 2] = e;\r\n\t        }\r\n\t        value = CHILD(n, NCH(n) - 1);\r\n\t        if (value.type === SYM.testlist) {\r\n\t            expression = astForTestlist(c, value);\r\n\t        }\r\n\t        else {\r\n\t            expression = astForExpr(c, value);\r\n\t        }\r\n\t        return new Assign(targets, expression, n.lineno, n.col_offset);\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForIfexpr (c, n) {\r\n\t    /* test: or_test 'if' or_test 'else' test */\r\n\t    goog.asserts.assert(NCH(n) === 5);\r\n\t    return new IfExp(\r\n\t        astForExpr(c, CHILD(n, 2)),\r\n\t        astForExpr(c, CHILD(n, 0)),\r\n\t        astForExpr(c, CHILD(n, 4)),\r\n\t        n.lineno, n.col_offset);\r\n\t}\r\n\r\n\t/**\r\n\t * s is a python-style string literal, including quote characters and u/r/b\r\n\t * prefixes. Returns decoded string object.\r\n\t */\r\n\tfunction parsestr (c, s) {\r\n\t    var encodeUtf8 = function (s) {\r\n\t        return unescape(encodeURIComponent(s));\r\n\t    };\r\n\t    var decodeUtf8 = function (s) {\r\n\t        return decodeURIComponent(escape(s));\r\n\t    };\r\n\t    var decodeEscape = function (s, quote) {\r\n\t        var d3;\r\n\t        var d2;\r\n\t        var d1;\r\n\t        var d0;\r\n\t        var c;\r\n\t        var i;\r\n\t        var len = s.length;\r\n\t        var ret = \"\";\r\n\t        for (i = 0; i < len; ++i) {\r\n\t            c = s.charAt(i);\r\n\t            if (c === \"\\\\\") {\r\n\t                ++i;\r\n\t                c = s.charAt(i);\r\n\t                if (c === \"n\") {\r\n\t                    ret += \"\\n\";\r\n\t                }\r\n\t                else if (c === \"\\\\\") {\r\n\t                    ret += \"\\\\\";\r\n\t                }\r\n\t                else if (c === \"t\") {\r\n\t                    ret += \"\\t\";\r\n\t                }\r\n\t                else if (c === \"r\") {\r\n\t                    ret += \"\\r\";\r\n\t                }\r\n\t                else if (c === \"b\") {\r\n\t                    ret += \"\\b\";\r\n\t                }\r\n\t                else if (c === \"f\") {\r\n\t                    ret += \"\\f\";\r\n\t                }\r\n\t                else if (c === \"v\") {\r\n\t                    ret += \"\\v\";\r\n\t                }\r\n\t                else if (c === \"0\") {\r\n\t                    ret += \"\\0\";\r\n\t                }\r\n\t                else if (c === '\"') {\r\n\t                    ret += '\"';\r\n\t                }\r\n\t                else if (c === '\\'') {\r\n\t                    ret += '\\'';\r\n\t                }\r\n\t                else if (c === \"\\n\") /* escaped newline, join lines */ {\r\n\t                }\r\n\t                else if (c === \"x\") {\r\n\t                    d0 = s.charAt(++i);\r\n\t                    d1 = s.charAt(++i);\r\n\t                    ret += String.fromCharCode(parseInt(d0 + d1, 16));\r\n\t                }\r\n\t                else if (c === \"u\" || c === \"U\") {\r\n\t                    d0 = s.charAt(++i);\r\n\t                    d1 = s.charAt(++i);\r\n\t                    d2 = s.charAt(++i);\r\n\t                    d3 = s.charAt(++i);\r\n\t                    ret += String.fromCharCode(parseInt(d0 + d1, 16), parseInt(d2 + d3, 16));\r\n\t                }\r\n\t                else {\r\n\t                    // Leave it alone\r\n\t                    ret += \"\\\\\" + c;\r\n\t                    // goog.asserts.fail(\"unhandled escape: '\" + c.charCodeAt(0) + \"'\");\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                ret += c;\r\n\t            }\r\n\t        }\r\n\t        return ret;\r\n\t    };\r\n\r\n\t    //print(\"parsestr\", s);\r\n\r\n\t    var quote = s.charAt(0);\r\n\t    var rawmode = false;\r\n\t    var unicode = false;\r\n\r\n\t    // treats every sequence as unicodes even if they are not treated with uU prefix\r\n\t    // kinda hacking though working for most purposes\r\n\t    if((c.c_flags & Parser.CO_FUTURE_UNICODE_LITERALS || Sk.python3 === true)) {\r\n\t        unicode = true;\r\n\t    }\r\n\r\n\t    if (quote === \"u\" || quote === \"U\") {\r\n\t        s = s.substr(1);\r\n\t        quote = s.charAt(0);\r\n\t        unicode = true;\r\n\t    }\r\n\t    else if (quote === \"r\" || quote === \"R\") {\r\n\t        s = s.substr(1);\r\n\t        quote = s.charAt(0);\r\n\t        rawmode = true;\r\n\t    }\r\n\t    goog.asserts.assert(quote !== \"b\" && quote !== \"B\", \"todo; haven't done b'' strings yet\");\r\n\r\n\t    goog.asserts.assert(quote === \"'\" || quote === '\"' && s.charAt(s.length - 1) === quote);\r\n\t    s = s.substr(1, s.length - 2);\r\n\t    if (unicode) {\r\n\t        s = encodeUtf8(s);\r\n\t    }\r\n\r\n\t    if (s.length >= 4 && s.charAt(0) === quote && s.charAt(1) === quote) {\r\n\t        goog.asserts.assert(s.charAt(s.length - 1) === quote && s.charAt(s.length - 2) === quote);\r\n\t        s = s.substr(2, s.length - 4);\r\n\t    }\r\n\r\n\t    if (rawmode || s.indexOf(\"\\\\\") === -1) {\r\n\t        return strobj(decodeUtf8(s));\r\n\t    }\r\n\t    return strobj(decodeEscape(s, quote));\r\n\t}\r\n\r\n\tfunction parsestrplus (c, n) {\r\n\t    var i;\r\n\t    var ret;\r\n\t    REQ(CHILD(n, 0), TOK.T_STRING);\r\n\t    ret = new Sk.builtin.str(\"\");\r\n\t    for (i = 0; i < NCH(n); ++i) {\r\n\t        try {\r\n\t            ret = ret.sq$concat(parsestr(c, CHILD(n, i).value));\r\n\t        } catch (x) {\r\n\t            throw new Sk.builtin.SyntaxError(\"invalid string (possibly contains a unicode character)\", c.c_filename, CHILD(n, i).lineno);\r\n\t        }\r\n\t    }\r\n\t    return ret;\r\n\t}\r\n\r\n\tfunction parsenumber (c, s, lineno) {\r\n\t    var neg;\r\n\t    var val;\r\n\t    var tmp;\r\n\t    var end = s.charAt(s.length - 1);\r\n\r\n\t    // call internal complex type constructor for complex strings\r\n\t    if (end === \"j\" || end === \"J\") {\r\n\t        return Sk.builtin.complex.complex_subtype_from_string(s);\r\n\t    }\r\n\r\n\t    // Handle longs\r\n\t    if (end === \"l\" || end === \"L\") {\r\n\t        return Sk.longFromStr(s.substr(0, s.length - 1), 0);\r\n\t    }\r\n\r\n\t    // todo; we don't currently distinguish between int and float so\r\n\t    // str is wrong for these.\r\n\t    if (s.indexOf(\".\") !== -1) {\r\n\t        return new Sk.builtin.float_(parseFloat(s));\r\n\t    }\r\n\r\n\t    // Handle integers of various bases\r\n\t    tmp = s;\r\n\t    neg = false;\r\n\t    if (s.charAt(0) === \"-\") {\r\n\t        tmp = s.substr(1);\r\n\t        neg = true;\r\n\t    }\r\n\r\n\t    if (tmp.charAt(0) === \"0\" && (tmp.charAt(1) === \"x\" || tmp.charAt(1) === \"X\")) {\r\n\t        // Hex\r\n\t        tmp = tmp.substring(2);\r\n\t        val = parseInt(tmp, 16);\r\n\t    } else if ((s.indexOf(\"e\") !== -1) || (s.indexOf(\"E\") !== -1)) {\r\n\t        // Float with exponent (needed to make sure e/E wasn't hex first)\r\n\t        return new Sk.builtin.float_(parseFloat(s));\r\n\t    } else if (tmp.charAt(0) === \"0\" && (tmp.charAt(1) === \"b\" || tmp.charAt(1) === \"B\")) {\r\n\t        // Binary\r\n\t        tmp = tmp.substring(2);\r\n\t        val = parseInt(tmp, 2);\r\n\t    } else if (tmp.charAt(0) === \"0\") {\r\n\t        if (tmp === \"0\") {\r\n\t            // Zero\r\n\t            val = 0;\r\n\t        } else {\r\n\t            // Octal\r\n\t            tmp = tmp.substring(1);\r\n\t            if ((tmp.charAt(0) === \"o\") || (tmp.charAt(0) === \"O\")) {\r\n\t                tmp = tmp.substring(1);\r\n\t            }\r\n\t            val = parseInt(tmp, 8);\r\n\t        }\r\n\t    }\r\n\t    else {\r\n\t        // Decimal\r\n\t        val = parseInt(tmp, 10);\r\n\t    }\r\n\r\n\t    // Convert to long\r\n\t    if (val > Sk.builtin.int_.threshold$ &&\r\n\t        Math.floor(val) === val &&\r\n\t        (s.indexOf(\"e\") === -1 && s.indexOf(\"E\") === -1)) {\r\n\t        return Sk.longFromStr(s, 0);\r\n\t    }\r\n\r\n\t    // Small enough, return parsed number\r\n\t    if (neg) {\r\n\t        return new Sk.builtin.int_(-val);\r\n\t    } else {\r\n\t        return new Sk.builtin.int_(val);\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForSlice (c, n) {\r\n\t    var n2;\r\n\t    var step;\r\n\t    var upper;\r\n\t    var lower;\r\n\t    var ch;\r\n\t    REQ(n, SYM.subscript);\r\n\r\n\t    /*\r\n\t     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]\r\n\t     sliceop: ':' [test]\r\n\t     */\r\n\t    ch = CHILD(n, 0);\r\n\t    lower = null;\r\n\t    upper = null;\r\n\t    step = null;\r\n\t    if (ch.type === TOK.T_DOT) {\r\n\t        return new Ellipsis();\r\n\t    }\r\n\t    if (NCH(n) === 1 && ch.type === SYM.test) {\r\n\t        return new Index(astForExpr(c, ch));\r\n\t    }\r\n\t    if (ch.type === SYM.test) {\r\n\t        lower = astForExpr(c, ch);\r\n\t    }\r\n\t    if (ch.type === TOK.T_COLON) {\r\n\t        if (NCH(n) > 1) {\r\n\t            n2 = CHILD(n, 1);\r\n\t            if (n2.type === SYM.test) {\r\n\t                upper = astForExpr(c, n2);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    else if (NCH(n) > 2) {\r\n\t        n2 = CHILD(n, 2);\r\n\t        if (n2.type === SYM.test) {\r\n\t            upper = astForExpr(c, n2);\r\n\t        }\r\n\t    }\r\n\r\n\t    ch = CHILD(n, NCH(n) - 1);\r\n\t    if (ch.type === SYM.sliceop) {\r\n\t        if (NCH(ch) === 1) {\r\n\t            ch = CHILD(ch, 0);\r\n\t            step = new Name(strobj(\"None\"), Load, ch.lineno, ch.col_offset);\r\n\t        }\r\n\t        else {\r\n\t            ch = CHILD(ch, 1);\r\n\t            if (ch.type === SYM.test) {\r\n\t                step = astForExpr(c, ch);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return new Slice(lower, upper, step);\r\n\t}\r\n\r\n\tfunction astForAtom(c, n) {\r\n\t    /* atom: ('(' [yield_expr|testlist_comp] ')' |\r\n\t       '[' [listmaker] ']' |\r\n\t       '{' [dictorsetmaker] '}' |\r\n\t       '`' testlist1 '`' |\r\n\t       NAME | NUMBER | STRING+)\r\n\t    */\r\n\t    var i;\r\n\t    var values;\r\n\t    var keys;\r\n\t    var size;\r\n\t    var ch = CHILD(n, 0);\r\n\t    var elts;\r\n\t    switch (ch.type) {\r\n\t        case TOK.T_NAME:\r\n\t            // All names start in Load context, but may be changed later\r\n\t            return new Name(strobj(ch.value), Load, n.lineno, n.col_offset);\r\n\t        case TOK.T_STRING:\r\n\t            return new Str(parsestrplus(c, n), n.lineno, n.col_offset);\r\n\t        case TOK.T_NUMBER:\r\n\t            return new Num(parsenumber(c, ch.value, n.lineno), n.lineno, n.col_offset);\r\n\t        case TOK.T_LPAR: // various uses for parens\r\n\t            ch = CHILD(n, 1);\r\n\t            if (ch.type === TOK.T_RPAR) {\r\n\t                return new Tuple([], Load, n.lineno, n.col_offset);\r\n\t            }\r\n\t            if (ch.type === SYM.yield_expr) {\r\n\t                return astForExpr(c, ch);\r\n\t            }\r\n\t            //            if (NCH(ch) > 1 && CHILD(ch, 1).type === SYM.comp_for) {\r\n\t            //                return astForComprehension(c, ch);\r\n\t            //            }\r\n\t            return astForTestlistComp(c, ch);\r\n\t        case TOK.T_LSQB: // list or listcomp\r\n\t            ch = CHILD(n, 1);\r\n\t            if (ch.type === TOK.T_RSQB) {\r\n\t                return new List([], Load, n.lineno, n.col_offset);\r\n\t            }\r\n\t            REQ(ch, SYM.listmaker);\r\n\t            if (NCH(ch) === 1 || CHILD(ch, 1).type === TOK.T_COMMA) {\r\n\t                return new List(seqForTestlist(c, ch), Load, n.lineno, n.col_offset);\r\n\t            } \r\n\t            return astForListcomp(c, ch);\r\n\t            \r\n\t        case TOK.T_LBRACE:\r\n\t            /* dictorsetmaker: \r\n\t             *     (test ':' test (comp_for : (',' test ':' test)* [','])) |\r\n\t             *     (test (comp_for | (',' test)* [',']))\r\n\t             */\r\n\t            keys = [];\r\n\t            values = [];\r\n\t            ch = CHILD(n, 1);\r\n\t            if (n.type === TOK.T_RBRACE) {\r\n\t                //it's an empty dict\r\n\t                return new Dict([], null, n.lineno, n.col_offset);\r\n\t            } \r\n\t            else if (NCH(ch) === 1 || (NCH(ch) !== 0 && CHILD(ch, 1).type === TOK.T_COMMA)) {\r\n\t                //it's a simple set\r\n\t                elts = [];\r\n\t                size = Math.floor((NCH(ch) + 1) / 2);\r\n\t                for (i = 0; i < NCH(ch); i += 2) {\r\n\t                    var expression = astForExpr(c, CHILD(ch, i));\r\n\t                    elts[i / 2] = expression;\r\n\t                }\r\n\t                return new Set(elts, n.lineno, n.col_offset);\r\n\t            } \r\n\t            else if (NCH(ch) !== 0 && CHILD(ch, 1).type == SYM.comp_for) {\r\n\t                //it's a set comprehension\r\n\t                return astForSetComp(c, ch);\r\n\t            } \r\n\t            else if (NCH(ch) > 3 && CHILD(ch, 3).type === SYM.comp_for) {\r\n\t                //it's a dict compr. I think.\r\n\t                return astForDictComp(c, ch);\r\n\t            } \r\n\t            else {\r\n\t                size = Math.floor((NCH(ch) + 1) / 4); // + 1 for no trailing comma case\r\n\t                for (i = 0; i < NCH(ch); i += 4) {\r\n\t                    keys[i / 4] = astForExpr(c, CHILD(ch, i));\r\n\t                    values[i / 4] = astForExpr(c, CHILD(ch, i + 2));\r\n\t                }\r\n\t                return new Dict(keys, values, n.lineno, n.col_offset);\r\n\t            }\r\n\t        case TOK.T_BACKQUOTE:\r\n\t            //throw new Sk.builtin.SyntaxError(\"backquote not supported, use repr()\", c.c_filename, n.lineno);\r\n\t            return new Repr(astForTestlist(c, CHILD(n, 1)), n.lineno, n.col_offset);\r\n\t        default:\r\n\t            goog.asserts.fail(\"unhandled atom\", ch.type);\r\n\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForPower (c, n) {\r\n\t    /* power: atom trailer* ('**' factor)*\r\n\t     */\r\n\t    var f;\r\n\t    var tmp;\r\n\t    var ch;\r\n\t    var i;\r\n\t    var e;\r\n\t    REQ(n, SYM.power);\r\n\t    e = astForAtom(c, CHILD(n, 0));\r\n\t    if (NCH(n) === 1) {\r\n\t        return e;\r\n\t    }\r\n\t    for (i = 1; i < NCH(n); ++i) {\r\n\t        ch = CHILD(n, i);\r\n\t        if (ch.type !== SYM.trailer) {\r\n\t            break;\r\n\t        }\r\n\t        tmp = astForTrailer(c, ch, e);\r\n\t        tmp.lineno = e.lineno;\r\n\t        tmp.col_offset = e.col_offset;\r\n\t        e = tmp;\r\n\t    }\r\n\t    if (CHILD(n, NCH(n) - 1).type === SYM.factor) {\r\n\t        f = astForExpr(c, CHILD(n, NCH(n) - 1));\r\n\t        e = new BinOp(e, Pow, f, n.lineno, n.col_offset);\r\n\t    }\r\n\t    return e;\r\n\t}\r\n\r\n\tfunction astForExpr (c, n) {\r\n\t    /* handle the full range of simple expressions\r\n\t     test: or_test ['if' or_test 'else' test] | lambdef\r\n\t     or_test: and_test ('or' and_test)*\r\n\t     and_test: not_test ('and' not_test)*\r\n\t     not_test: 'not' not_test | comparison\r\n\t     comparison: expr (comp_op expr)*\r\n\t     expr: xor_expr ('|' xor_expr)*\r\n\t     xor_expr: and_expr ('^' and_expr)*\r\n\t     and_expr: shift_expr ('&' shift_expr)*\r\n\t     shift_expr: arith_expr (('<<'|'>>') arith_expr)*\r\n\t     arith_expr: term (('+'|'-') term)*\r\n\t     term: factor (('*'|'/'|'%'|'//') factor)*\r\n\t     factor: ('+'|'-'|'~') factor | power\r\n\t     power: atom trailer* ('**' factor)*\r\n\r\n\t     As well as modified versions that exist for backward compatibility,\r\n\t     to explicitly allow:\r\n\t     [ x for x in lambda: 0, lambda: 1 ]\r\n\t     (which would be ambiguous without these extra rules)\r\n\r\n\t     old_test: or_test | old_lambdef\r\n\t     old_lambdef: 'lambda' [vararglist] ':' old_test\r\n\r\n\t     */\r\n\r\n\t    var exp;\r\n\t    var cmps;\r\n\t    var ops;\r\n\t    var i;\r\n\t    var seq;\r\n\t    LOOP: while (true) {\r\n\t        switch (n.type) {\r\n\t            case SYM.test:\r\n\t            case SYM.old_test:\r\n\t                if (CHILD(n, 0).type === SYM.lambdef || CHILD(n, 0).type === SYM.old_lambdef) {\r\n\t                    return astForLambdef(c, CHILD(n, 0));\r\n\t                }\r\n\t                else if (NCH(n) > 1) {\r\n\t                    return astForIfexpr(c, n);\r\n\t                }\r\n\t            // fallthrough\r\n\t            case SYM.or_test:\r\n\t            case SYM.and_test:\r\n\t                if (NCH(n) === 1) {\r\n\t                    n = CHILD(n, 0);\r\n\t                    continue LOOP;\r\n\t                }\r\n\t                seq = [];\r\n\t                for (i = 0; i < NCH(n); i += 2) {\r\n\t                    seq[i / 2] = astForExpr(c, CHILD(n, i));\r\n\t                }\r\n\t                if (CHILD(n, 1).value === \"and\") {\r\n\t                    return new BoolOp(And, seq, n.lineno, n.col_offset);\r\n\t                }\r\n\t                goog.asserts.assert(CHILD(n, 1).value === \"or\");\r\n\t                return new BoolOp(Or, seq, n.lineno, n.col_offset);\r\n\t            case SYM.not_test:\r\n\t                if (NCH(n) === 1) {\r\n\t                    n = CHILD(n, 0);\r\n\t                    continue LOOP;\r\n\t                }\r\n\t                else {\r\n\t                    return new UnaryOp(Not, astForExpr(c, CHILD(n, 1)), n.lineno, n.col_offset);\r\n\t                }\r\n\t                break;\r\n\t            case SYM.comparison:\r\n\t                if (NCH(n) === 1) {\r\n\t                    n = CHILD(n, 0);\r\n\t                    continue LOOP;\r\n\t                }\r\n\t                else {\r\n\t                    ops = [];\r\n\t                    cmps = [];\r\n\t                    for (i = 1; i < NCH(n); i += 2) {\r\n\t                        ops[(i - 1) / 2] = astForCompOp(c, CHILD(n, i));\r\n\t                        cmps[(i - 1) / 2] = astForExpr(c, CHILD(n, i + 1));\r\n\t                    }\r\n\t                    return new Compare(astForExpr(c, CHILD(n, 0)), ops, cmps, n.lineno, n.col_offset);\r\n\t                }\r\n\t                break;\r\n\t            case SYM.expr:\r\n\t            case SYM.xor_expr:\r\n\t            case SYM.and_expr:\r\n\t            case SYM.shift_expr:\r\n\t            case SYM.arith_expr:\r\n\t            case SYM.term:\r\n\t                if (NCH(n) === 1) {\r\n\t                    n = CHILD(n, 0);\r\n\t                    continue LOOP;\r\n\t                }\r\n\t                return astForBinop(c, n);\r\n\t            case SYM.yield_expr:\r\n\t                exp = null;\r\n\t                if (NCH(n) === 2) {\r\n\t                    exp = astForTestlist(c, CHILD(n, 1));\r\n\t                }\r\n\t                return new Yield(exp, n.lineno, n.col_offset);\r\n\t            case SYM.factor:\r\n\t                if (NCH(n) === 1) {\r\n\t                    n = CHILD(n, 0);\r\n\t                    continue LOOP;\r\n\t                }\r\n\t                return astForFactor(c, n);\r\n\t            case SYM.power:\r\n\t                return astForPower(c, n);\r\n\t            default:\r\n\t                goog.asserts.fail(\"unhandled expr\", \"n.type: %d\", n.type);\r\n\t        }\r\n\t        break;\r\n\t    }\r\n\t}\r\n\r\n\tfunction astForPrintStmt (c, n) {\r\n\t    /* print_stmt: 'print' ( [ test (',' test)* [','] ]\r\n\t     | '>>' test [ (',' test)+ [','] ] )\r\n\t     */\r\n\t    var nl;\r\n\t    var i, j;\r\n\t    var seq;\r\n\t    var start = 1;\r\n\t    var dest = null;\r\n\t    REQ(n, SYM.print_stmt);\r\n\t    if (NCH(n) >= 2 && CHILD(n, 1).type === TOK.T_RIGHTSHIFT) {\r\n\t        dest = astForExpr(c, CHILD(n, 2));\r\n\t        start = 4;\r\n\t    }\r\n\t    seq = [];\r\n\t    for (i = start, j = 0; i < NCH(n); i += 2, ++j) {\r\n\t        seq[j] = astForExpr(c, CHILD(n, i));\r\n\t    }\r\n\t    nl = (CHILD(n, NCH(n) - 1)).type === TOK.T_COMMA ? false : true;\r\n\t    return new Print(dest, seq, nl, n.lineno, n.col_offset);\r\n\t}\r\n\r\n\tfunction astForStmt (c, n) {\r\n\t    var ch;\r\n\t    if (n.type === SYM.stmt) {\r\n\t        goog.asserts.assert(NCH(n) === 1);\r\n\t        n = CHILD(n, 0);\r\n\t    }\r\n\t    if (n.type === SYM.simple_stmt) {\r\n\t        goog.asserts.assert(numStmts(n) === 1);\r\n\t        n = CHILD(n, 0);\r\n\t    }\r\n\t    if (n.type === SYM.small_stmt) {\r\n\t        REQ(n, SYM.small_stmt);\r\n\t        n = CHILD(n, 0);\r\n\t        /* small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt\r\n\t         | flow_stmt | import_stmt | global_stmt | exec_stmt\r\n\t         | assert_stmt\r\n\t         */\r\n\t        switch (n.type) {\r\n\t            case SYM.expr_stmt:\r\n\t                return astForExprStmt(c, n);\r\n\t            case SYM.print_stmt:\r\n\t                return astForPrintStmt(c, n);\r\n\t            case SYM.del_stmt:\r\n\t                return astForDelStmt(c, n);\r\n\t            case SYM.pass_stmt:\r\n\t                return new Pass(n.lineno, n.col_offset);\r\n\t            case SYM.flow_stmt:\r\n\t                return astForFlowStmt(c, n);\r\n\t            case SYM.import_stmt:\r\n\t                return astForImportStmt(c, n);\r\n\t            case SYM.global_stmt:\r\n\t                return astForGlobalStmt(c, n);\r\n\t            case SYM.exec_stmt:\r\n\t                return astForExecStmt(c, n);\r\n\t            case SYM.assert_stmt:\r\n\t                return astForAssertStmt(c, n);\r\n\t            case SYM.debugger_stmt:\r\n\t                return new Debugger_(n.lineno, n.col_offset);\r\n\t            default:\r\n\t                goog.asserts.fail(\"unhandled small_stmt\");\r\n\t        }\r\n\t    }\r\n\t    else {\r\n\t        /* compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt\r\n\t         | funcdef | classdef | decorated\r\n\t         */\r\n\t        ch = CHILD(n, 0);\r\n\t        REQ(n, SYM.compound_stmt);\r\n\t        switch (ch.type) {\r\n\t            case SYM.if_stmt:\r\n\t                return astForIfStmt(c, ch);\r\n\t            case SYM.while_stmt:\r\n\t                return astForWhileStmt(c, ch);\r\n\t            case SYM.for_stmt:\r\n\t                return astForForStmt(c, ch);\r\n\t            case SYM.try_stmt:\r\n\t                return astForTryStmt(c, ch);\r\n\t            case SYM.with_stmt:\r\n\t                return astForWithStmt(c, ch);\r\n\t            case SYM.funcdef:\r\n\t                return astForFuncdef(c, ch, []);\r\n\t            case SYM.classdef:\r\n\t                return astForClassdef(c, ch, []);\r\n\t            case SYM.decorated:\r\n\t                return astForDecorated(c, ch);\r\n\t            default:\r\n\t                goog.asserts.assert(\"unhandled compound_stmt\");\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tSk.astFromParse = function (n, filename, c_flags) {\r\n\t    var j;\r\n\t    var num;\r\n\t    var ch;\r\n\t    var i;\r\n\t    var c = new Compiling(\"utf-8\", filename, c_flags);\r\n\t    var stmts = [];\r\n\t    var k = 0;\r\n\t    switch (n.type) {\r\n\t        case SYM.file_input:\r\n\t            for (i = 0; i < NCH(n) - 1; ++i) {\r\n\t                ch = CHILD(n, i);\r\n\t                if (n.type === TOK.T_NEWLINE) {\r\n\t                    continue;\r\n\t                }\r\n\t                REQ(ch, SYM.stmt);\r\n\t                num = numStmts(ch);\r\n\t                if (num === 1) {\r\n\t                    stmts[k++] = astForStmt(c, ch);\r\n\t                }\r\n\t                else {\r\n\t                    ch = CHILD(ch, 0);\r\n\t                    REQ(ch, SYM.simple_stmt);\r\n\t                    for (j = 0; j < num; ++j) {\r\n\t                        stmts[k++] = astForStmt(c, CHILD(ch, j * 2));\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return new Module(stmts);\r\n\t        case SYM.eval_input:\r\n\t            goog.asserts.fail(\"todo;\");\r\n\t        case SYM.single_input:\r\n\t            goog.asserts.fail(\"todo;\");\r\n\t        default:\r\n\t            goog.asserts.fail(\"todo;\");\r\n\t    }\r\n\t};\r\n\r\n\tSk.astDump = function (node) {\r\n\t    var spaces = function (n) // todo; blurgh\r\n\t    {\r\n\t        var i;\r\n\t        var ret = \"\";\r\n\t        for (i = 0; i < n; ++i) {\r\n\t            ret += \" \";\r\n\t        }\r\n\t        return ret;\r\n\t    };\r\n\r\n\t    var _format = function (node, indent) {\r\n\t        var ret;\r\n\t        var elemsstr;\r\n\t        var x;\r\n\t        var elems;\r\n\t        var fieldstr;\r\n\t        var field;\r\n\t        var attrs;\r\n\t        var fieldlen;\r\n\t        var b;\r\n\t        var a;\r\n\t        var i;\r\n\t        var fields;\r\n\t        var namelen;\r\n\t        if (node === null) {\r\n\t            return indent + \"None\";\r\n\t        }\r\n\t        else if (node.prototype && node.prototype._astname !== undefined && node.prototype._isenum) {\r\n\t            return indent + node.prototype._astname + \"()\";\r\n\t        }\r\n\t        else if (node._astname !== undefined) {\r\n\t            namelen = spaces(node._astname.length + 1);\r\n\t            fields = [];\r\n\t            for (i = 0; i < node._fields.length; i += 2) // iter_fields\r\n\t            {\r\n\t                a = node._fields[i]; // field name\r\n\t                b = node._fields[i + 1](node); // field getter func\r\n\t                fieldlen = spaces(a.length + 1);\r\n\t                fields.push([a, _format(b, indent + namelen + fieldlen)]);\r\n\t            }\r\n\t            attrs = [];\r\n\t            for (i = 0; i < fields.length; ++i) {\r\n\t                field = fields[i];\r\n\t                attrs.push(field[0] + \"=\" + field[1].replace(/^\\s+/, \"\"));\r\n\t            }\r\n\t            fieldstr = attrs.join(\",\\n\" + indent + namelen);\r\n\t            return indent + node._astname + \"(\" + fieldstr + \")\";\r\n\t        }\r\n\t        else if (goog.isArrayLike(node)) {\r\n\t            //Sk.debugout(\"arr\", node.length);\r\n\t            elems = [];\r\n\t            for (i = 0; i < node.length; ++i) {\r\n\t                x = node[i];\r\n\t                elems.push(_format(x, indent + \" \"));\r\n\t            }\r\n\t            elemsstr = elems.join(\",\\n\");\r\n\t            return indent + \"[\" + elemsstr.replace(/^\\s+/, \"\") + \"]\";\r\n\t        }\r\n\t        else {\r\n\t            if (node === true) {\r\n\t                ret = \"True\";\r\n\t            }\r\n\t            else if (node === false) {\r\n\t                ret = \"False\";\r\n\t            }\r\n\t            else if (node instanceof Sk.builtin.lng) {\r\n\t                ret = node.tp$str().v;\r\n\t            }\r\n\t            else if (node instanceof Sk.builtin.str) {\r\n\t                ret = node[\"$r\"]().v;\r\n\t            }\r\n\t            else {\r\n\t                ret = \"\" + node;\r\n\t            }\r\n\t            return indent + ret;\r\n\t        }\r\n\t    };\r\n\r\n\t    return _format(node, \"\");\r\n\t};\r\n\r\n\tgoog.exportSymbol(\"Sk.astFromParse\", Sk.astFromParse);\r\n\tgoog.exportSymbol(\"Sk.astDump\", Sk.astDump);\r\n\r\n\r\n\r\n\t/* ---- /Users/rob/skulpty/lib/afterword.js ---- */ \r\n\r\n\tfunction wrapAstThing(fx, argpos, debug) {\r\n\t\targpos = argpos || 2;\r\n\t\treturn function(x) {\r\n\t\t\tvar n = arguments[argpos-1];\r\n\t\t\tvar result = fx.apply(undefined, arguments);\r\n\t\t\tresult.range = n.range;\r\n\t\t\tresult.str = n.str;\r\n\t\t\tresult.loc = n.loc;\r\n\t\t\tif ( debug ) {\r\n\t\t\t\tconsole.log(n);\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t}\r\n\r\n\tastForAtom = wrapAstThing(astForAtom);\r\n\tastForCompOp = wrapAstThing(astForCompOp);\r\n\tastForSuite = wrapAstThing(astForSuite);\r\n\tastForExceptClause = wrapAstThing(astForExceptClause);\r\n\tastForDottedName = wrapAstThing(astForDottedName);\r\n\tastForDecorator = wrapAstThing(astForDecorator);\r\n\tastForDecorators = wrapAstThing(astForDecorators);\r\n\tastForDecorated = wrapAstThing(astForDecorated);\r\n\tastForWithVar = wrapAstThing(astForWithVar);\r\n\tastForWithStmt = wrapAstThing(astForWithStmt);\r\n\tastForExecStmt = wrapAstThing(astForExecStmt);\r\n\tastForIfStmt = wrapAstThing(astForIfStmt);\r\n\tastForExprlist = wrapAstThing(astForExprlist);\r\n\tastForDelStmt = wrapAstThing(astForDelStmt);\r\n\tastForGlobalStmt = wrapAstThing(astForGlobalStmt);\r\n\tastForAssertStmt = wrapAstThing(astForAssertStmt);\r\n\tastForImportStmt = wrapAstThing(astForImportStmt);\r\n\tastForTestlistComp = wrapAstThing(astForTestlistComp);\r\n\tastForListcomp = wrapAstThing(astForListcomp);\r\n\tastForFactor = wrapAstThing(astForFactor);\r\n\tastForForStmt = wrapAstThing(astForForStmt);\r\n\tastForTrailer = wrapAstThing(astForTrailer);\r\n\tastForFlowStmt = wrapAstThing(astForFlowStmt);\r\n\tastForArguments = wrapAstThing(astForArguments);\r\n\tastForFuncdef = wrapAstThing(astForFuncdef);\r\n\tastForClassBases = wrapAstThing(astForClassBases);\r\n\tastForClassdef = wrapAstThing(astForClassdef);\r\n\tastForLambdef = wrapAstThing(astForLambdef);\r\n\tastForComprehension = wrapAstThing(astForComprehension);\r\n\tastForIterComp = wrapAstThing(astForIterComp);\r\n\tastForDictComp = wrapAstThing(astForDictComp);\r\n\tastForGenExpr = wrapAstThing(astForGenExpr);\r\n\tastForSetComp = wrapAstThing(astForSetComp);\r\n\tastForWhileStmt = wrapAstThing(astForWhileStmt);\r\n\tastForAugassign = wrapAstThing(astForAugassign);\r\n\tastForBinop = wrapAstThing(astForBinop);\r\n\tastForTestlist = wrapAstThing(astForTestlist);\r\n\tastForExprStmt = wrapAstThing(astForExprStmt);\r\n\tastForIfexpr = wrapAstThing(astForIfexpr);\r\n\tastForExpr = wrapAstThing(astForExpr);\r\n\tSk.astFromParse = wrapAstThing(Sk.astFromParse, 1);\r\n\r\n\tSk.nameForToken = function(v) {\r\n\t\tif ( typeof v === \"string\" ) return v;\r\n\t\tfor ( var name in Sk.Tokenizer.Tokens ) {\r\n\t\t\tif ( Sk.Tokenizer.Tokens[name] == v ) return name;\r\n\t\t}\r\n\t\tif ( v in Sk.ParseTables.number2symbol ) {\r\n\t\t\treturn Sk.ParseTables.number2symbol[v];\r\n\t\t}\r\n\r\n\t\treturn '???:' + v;\r\n\t};\r\n\r\n\t//Sk.python3 = true;\r\n\tSk.Parser = Parser;\r\n\tSk.builtin.str.prototype.valueOf = function() { return this.v; };\r\n\tSk.builtin.str.prototype.toString = function() { return this.v; };\r\n\r\n\tSk.builtin.SyntaxError = function(str, file, line, ctx, extra) {\r\n\t\tvar err = new SyntaxError(str, file, line);\r\n\t\terr.context = ctx;\r\n\t\terr.extra = extra;\r\n\t\terr.line = line;\r\n\t\treturn err;\r\n\t};\r\n\r\n\tSk.builtin.IndentationError = function(str, file, line, row, extra) {\r\n\t\tvar err = new SyntaxError('Indentation Error: ' + str, file, line);\r\n\t\terr.context = [[line, row], [line, row]];\r\n\t\terr.extra = {\r\n\t\t};\r\n\t\terr.line = line;\r\n\t\treturn err;\r\n\t};\r\n\r\n\r\n\tmodule.exports = Sk;\r\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\r\n\r\n/***/ },\r\n/* 2 */\r\n/***/ function(module, exports) {\r\n\r\n\t'use strict';\r\n\r\n\tvar isArray = Array.isArray;\r\n\r\n\t//TODO: Find a way to not have to do this.\r\n\tfunction getOpName(op) {\r\n\t\tif (op.prototype._astname) {\r\n\t\t\treturn op.prototype._astname;\r\n\t\t}\r\n\t\tthrow new Error(\"Coudlnt decode operator name for: \" + (op.name || op.toString()));\r\n\t}\r\n\r\n\tfunction abort(why) {\r\n\t\tconsole.log(new Error(\"ABORT:\" + why).stack);\r\n\t\tthrow new Error(why);\r\n\t}\r\n\r\n\tfunction isExpression(n) {\r\n\t\treturn /Expression$/.test(n.type);\r\n\t}\r\n\r\n\tvar idx = 0;\r\n\tfunction createTempName(hint) {\r\n\t\treturn '__temp$' + hint + '$' + idx++;\r\n\t}\r\n\r\n\tfunction ensureStatement(s) {\r\n\t\tvar f = s;\r\n\t\tif ( !isArray(s) ) f = [f];\r\n\t\tfor ( var i = 0; i < f.length; ++i ) {\r\n\t\t\tvar v = f[i];\r\n\t\t\tif ( isExpression(v) ) {\r\n\t\t\t\tf[i] = {type: \"ExpressionStatement\", expression: v};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( isArray(s) ) return s;\r\n\t\telse return f[0];\r\n\t}\r\n\r\n\tfunction ident(n) {\r\n\t\treturn {type: \"Identifier\", name: n.valueOf()};\r\n\t}\r\n\r\n\tfunction member(o, p) {\r\n\t\treturn {\r\n\t\t\ttype: \"MemberExpression\",\r\n\t\t\tobject: o,\r\n\t\t\tproperty: p,\r\n\t\t\tcomputed: false\r\n\t\t};\r\n\t}\r\n\r\n\tfunction literal(v) {\r\n\t\tif ( typeof v === 'object' ) v = v.valueOf();\r\n\r\n\t\tif ( typeof v === 'number' && (1 / v !== 1 / Math.abs(v)) ) {\r\n\t\t\treturn {type: \"UnaryExpression\", argument: literal(-v), operator: '-' };\r\n\t\t}\r\n\r\n\t\treturn {type: \"Literal\", value: v, raw: JSON.stringify(v)};\r\n\t}\r\n\r\n\tfunction binOp(left, op, right) {\r\n\t\treturn {\r\n\t\t\ttype: \"BinaryExpression\",\r\n\t\t\tleft: left,\r\n\t\t\tright: right,\r\n\t\t\toperator: op\r\n\t\t};\r\n\t}\r\n\r\n\tfunction logicOp(left, op, right) {\r\n\t\treturn {\r\n\t\t\ttype: \"LogicalExpression\",\r\n\t\t\tleft: left,\r\n\t\t\tright: right,\r\n\t\t\toperator: op\r\n\t\t};\r\n\t}\r\n\r\n\tfunction ternary(cond, a, b) {\r\n\t\treturn {\r\n\t\t\ttype: \"ConditionalExpression\",\r\n\t\t\ttest: cond,\r\n\t\t\tconsequent: a,\r\n\t\t\talternate: b\r\n\t\t};\r\n\t}\r\n\r\n\tfunction var_(name, init) {\r\n\t\treturn {\r\n\t\t\ttype: \"VariableDeclaration\",\r\n\t\t\tkind: 'var',\r\n\t\t\tdeclarations: [{\r\n\t\t\t\ttype: \"VariableDeclarator\",\r\n\t\t\t\tid: name,\r\n\t\t\t\tinit: init ? init : undefined\r\n\t\t\t}]\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transform(node, ctx) {\r\n\t\t//console.log(node.lineno, node.col_offset);\r\n\t\tvar result = dispatch(node, ctx);\r\n\t\tif ( node.range ) result.range = [node.range[0], node.range[1]];\r\n\t\tif ( node.loc ) result.loc = node.loc;\r\n\t\tresult.str = node.str;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction dispatch(node, ctx) {\r\n\t\tif ( !ctx.locals ) ctx.locals = Object.create(null);\r\n\r\n\t\tif ( !node ) {\r\n\t\t\tconsole.log(\"WAT!\", new Error().stack);\r\n\t\t\tthrow new Error(\"What?\");\r\n\t\t}\r\n\t\tif ( isArray(node) ) {\r\n\t\t\tvar body = [];\r\n\t\t\tfor ( var i = 0; i < node.length; ++i ) {\r\n\t\t\t\tvar r = transform(node[i], ctx);\r\n\t\t\t\tif ( isArray(r) ) body.push.apply(body, r);\r\n\t\t\t\telse body.push(r);\r\n\t\t\t}\r\n\t\t\treturn body;\r\n\t\t}\r\n\t\tswitch (node._astname) {\r\n\t\t\tcase 'Attribute': return transformAttribute(node, ctx);\r\n\t\t\tcase 'Assign': return transformAssign(node, ctx);\r\n\t\t\tcase 'AugAssign': return transformAugAssign(node, ctx);\r\n\t\t\tcase 'BinOp': return transformBinOp(node, ctx);\r\n\t\t\tcase 'BoolOp': return transformBoolOp(node, ctx);\r\n\t\t\tcase 'Break': return transformBreak(node, ctx);\r\n\t\t\tcase 'Call': return transformCall(node, ctx);\r\n\t\t\tcase 'ClassDef': return transformClassDef(node, ctx);\r\n\t\t\tcase 'Continue': return tranformContinue(node, ctx);\r\n\t\t\tcase 'Compare': return transformCompare(node, ctx);\r\n\t\t\tcase 'Dict': return transformDict(node, ctx);\r\n\t\t\tcase 'Delete': return transformDel(node, ctx);\r\n\t\t\tcase 'Expr': return transformExpr(node, ctx);\r\n\t\t\tcase 'For': return transformFor(node, ctx);\r\n\t\t\tcase 'FunctionDef': return transformFunctionDef(node, ctx);\r\n\t\t\tcase 'GeneratorExp': return transformListComp(node, ctx); //TODO: Make this seperate\r\n\t\t\tcase 'Global': return transformGlobal(node, ctx);\r\n\t\t\tcase 'If': return transformIf(node, ctx);\r\n\t\t\tcase 'Import': return NoOp();\r\n\t\t\tcase 'Lambda': return transformLambda(node, ctx);\r\n\t\t\tcase 'List': return transformList(node, ctx);\r\n\t\t\tcase 'ListComp': return transformListComp(node, ctx);\r\n\t\t\tcase 'Module': return transformModule(node, ctx);\r\n\t\t\tcase 'Name': return transformName(node, ctx);\r\n\t\t\tcase 'Print': return transformPrint(node, ctx);\r\n\t\t\tcase 'Return': return transformReturn(node, ctx);\r\n\t\t\tcase 'Str': return transformStr(node, ctx);\r\n\t\t\tcase 'Subscript': return transformSubscript(node, ctx);\r\n\t\t\tcase 'Tuple': return transformTuple(node, ctx);\r\n\t\t\tcase 'Num': return transformNum(node, ctx);\r\n\t\t\tcase 'Pass': return transformPass(node, ctx);\r\n\t\t\tcase 'UnaryOp': return transformUnaryOp(node, ctx);\r\n\t\t\tcase 'While': return transformWhile(node, ctx);\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"Dont know how to transform: \" + node._astname);\r\n\t\t\t\tconsole.log(JSON.stringify(node, null, '  '));\r\n\t\t\t\tthrow new Error(\"Dont know how to transform: \" + node._astname);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction NoOp() { return []; }\r\n\r\n\r\n\r\n\tfunction makeVariableName(name) {\r\n\t\tvar parts = Array.isArray(name) ? name : name.split(/\\./g);\r\n\t\tif ( parts.length === 1 ) return ident(name);\r\n\t\tvar prop = parts.pop();\r\n\t\treturn member(makeVariableName(parts), ident(prop));\r\n\t}\r\n\r\n\tfunction transformAttribute(node, ctx) {\r\n\t\tvar n = node.attr;\r\n\t\tif ( n._astname ) n = transform(n, ctx);\r\n\t\telse n = {type: 'Identifier', name: n.valueOf()};\r\n\t\treturn member(transform(node.value, ctx), n);\r\n\t}\r\n\r\n\tfunction transformAugAssign(node, ctx) {\r\n\t\t//TODO: We need to not inject left into the code twice\r\n\t\t//as it could have side effects.\r\n\t\tvar right = transform(node.value, ctx);\r\n\t\tvar left = transform(node.target, ctx);\r\n\t\tvar tn = createTempName(\"left\");\r\n\t\tvar opName = getOpName(node.op);\r\n\t\treturn [\r\n\t\t\tvar_(ident(tn), left),\r\n\t\t\tensureStatement({\r\n\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\toperator: '=',\r\n\t\t\t\tleft: left,\r\n\t\t\t\tright: createBinOp(left, opName, right)\r\n\t\t\t})\r\n\t\t];\r\n\t}\r\n\r\n\tfunction transformAssign(node, ctx) {\r\n\r\n\t\tvar results = [];\r\n\t\tfor ( var i = 0; i < node.targets.length; ++i ) {\r\n\t\t\tvar left = node.targets[i];\r\n\t\t\tif ( ctx.writeTarget ) {\r\n\t\t\t\tleft = member(ctx.writeTarget, transform(left,ctx));\r\n\t\t\t}\r\n\t\t\tresults.push.apply(results,createTupleUnpackingAssign(left, transform(node.value, ctx), ctx));\r\n\t\t\r\n\t\t}\r\n\t\tif ( results.length == 1 ) return results[0];\r\n\t\treturn {type: \"BlockStatement\", body: results}; \r\n\t}\r\n\r\n\tfunction createBinOp(left, op, right) {\r\n\r\n\t\tif ( op === 'FloorDiv' ) {\r\n\t\t\treturn {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: makeVariableName('Math.floor'),\r\n\t\t\t\targuments: [{\r\n\t\t\t\t\ttype: \"BinaryExpression\",\r\n\t\t\t\t\tleft: left,\r\n\t\t\t\t\tright: right,\r\n\t\t\t\t\toperator: '/'\r\n\t\t\t\t}]\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tvar fxOps = {\r\n\t\t\t\"Add\": \"__pythonRuntime.ops.add\",\r\n\t\t\t\"Mult\": \"__pythonRuntime.ops.multiply\",\r\n\t\t\t\"Pow\": \"Math.pow\"\r\n\t\t};\r\n\r\n\t\tif ( op in fxOps  ) {\r\n\t\t\tvar call = {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: makeVariableName(fxOps[op]),\r\n\t\t\t\targuments: [left, right]\r\n\t\t\t};\r\n\t\t\treturn call;\r\n\t\t}\r\n\r\n\t\tvar operators = {\r\n\t\t\t\"Add\": \"+\",\r\n\t\t\t\"Sub\": \"-\",\r\n\t\t\t\"Mod\": \"%\",\r\n\t\t\t\"Div\": \"/\",\r\n\t\t\t\"BitAnd\": \"&\",\r\n\t\t\t\"BitOr\": \"|\",\r\n\t\t\t'BitXor': '^',\r\n\t\t\t\"LShift\": \"<<\",\r\n\t\t\t\"RShift\": \">>\"\r\n\r\n\t\t};\r\n\r\n\t\tif ( !(op in operators) ) abort(\"Unknown binary operator: \" + op);\r\n\r\n\t\treturn binOp(left, operators[op], right);\r\n\t}\r\n\r\n\tfunction transformBinOp(node, ctx) {\r\n\t\tvar left = transform(node.left, ctx);\r\n\t\tvar right = transform(node.right, ctx);\r\n\t\treturn createBinOp(left, getOpName(node.op), right);\r\n\t}\r\n\r\n\tfunction transformBoolOp(node, ctx) {\r\n\t\tvar fvals = new Array(node.values.length);\r\n\t\tfor ( var i = 0; i < node.values.length; ++i ) {\r\n\t\t\tfvals[i] = transform(node.values[i], ctx);\r\n\t\t}\r\n\t\tvar opName = getOpName(node.op);\r\n\t\tvar operators = {\r\n\t\t\t'And': '&&',\r\n\t\t\t'Or': '||'\r\n\t\t};\r\n\r\n\t\tif ( !(opName in operators ) ) abort(\"Unknown bool opeartor: \" + opName);\r\n\t\tvar opstr = operators[opName];\r\n\r\n\t\tvar result = fvals.pop();\r\n\t\twhile ( fvals.length > 0 ) {\r\n\t\t\tresult = logicOp(fvals.pop(), opstr, result);\r\n\t\t}\r\n\r\n\r\n\t\t//TODO: Support || as well?\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction transformBreak(node, ctx) {\r\n\t\treturn {type: \"BreakStatement\"};\r\n\t}\r\n\r\n\tfunction transformCall(node, ctx) {\r\n\t\tvar builtins = ['len'];\r\n\t\tif ( node.func._astname == 'Name' ) {\r\n\t\t\tswitch ( node.func.id.v ) {\r\n\t\t\t\tcase 'len':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: \"MemberExpression\",\r\n\t\t\t\t\t\tobject: transform(node.args[0], ctx),\r\n\t\t\t\t\t\tproperty: {type: \"Identifier\", name: \"length\"}\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'all': case 'ord':\r\n\t\t\t\tcase 'sum': case 'any':\r\n\t\t\t\tcase 'str': case 'chr':\r\n\t\t\t\tcase 'ascii': case 'divmod':\r\n\t\t\t\tcase 'range': case 'enumerate':\r\n\t\t\t\tcase 'round': case 'filter':\r\n\t\t\t\tcase 'abs': case 'float':\r\n\t\t\t\tcase 'int': case 'hex':\r\n\t\t\t\tcase 'tuple': case  'map':\r\n\t\t\t\tcase 'bool': case 'max':\r\n\t\t\t\tcase 'sorted': case 'min':\r\n\t\t\t\tcase 'list': case 'oct':\r\n\t\t\t\tcase 'pow': case  'reversed':\r\n\t\t\t\tcase 'repr':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: 'CallExpression',\r\n\t\t\t\t\t\tcallee: makeVariableName('__pythonRuntime.functions.' + node.func.id.v),\r\n\t\t\t\t\t\targuments: transform(node.args, ctx)\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'dict':\r\n\t\t\t\t\tvar args = [];\r\n\t\t\t\t\tfor ( var i = 0; i < node.keywords.length; ++i ) {\r\n\t\t\t\t\t\targs.push({\r\n\t\t\t\t\t\t\ttype: \"ArrayExpression\",\r\n\t\t\t\t\t\t\telements: [\r\n\t\t\t\t\t\t\t\tliteral(node.keywords[i].arg.v),\r\n\t\t\t\t\t\t\t\ttransform(node.keywords[i].value, ctx)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: \"NewExpression\",\r\n\t\t\t\t\t\tcallee: makeVariableName('__pythonRuntime.objects.dict'),\r\n\t\t\t\t\t\targuments: args\r\n\t\t\t\t\t};\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar args = transform(node.args, ctx);\r\n\r\n\t\tif ( node.keywords.length > 0 ) {\r\n\t\t\tvar paramsDict = {\r\n\t\t\t\ttype: \"ObjectExpression\",\r\n\t\t\t\tproperties: [{\r\n\t\t\t\t\ttype: \"Property\",\r\n\t\t\t\t\tkey: ident(\"__kwp\"),\r\n\t\t\t\t\tvalue: literal(true)\r\n\t\t\t\t}]\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = 0; i < node.keywords.length; ++i ) {\r\n\t\t\t\tvar k = node.keywords[i];\r\n\t\t\t\tparamsDict.properties.push({\r\n\t\t\t\t\ttype: \"Property\",\r\n\t\t\t\t\tkey: ident(k.arg.v),\r\n\t\t\t\t\tvalue: transform(k.value, ctx)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tvar extraArg = {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: makeVariableName('__pythonRuntime.utils.createParamsObj'),\r\n\t\t\t\targuments: [paramsDict]\r\n\t\t\t};\r\n\r\n\t\t\targs.push(extraArg);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: transform(node.func, ctx),\r\n\t\t\targuments: args\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformClassDef(node, ctx) {\r\n\t\tvar body = [];\r\n\t\tvar proto = member(ident(node.name), ident('prototype'));\r\n\t\tvar nctx = {\r\n\t\t\twriteTarget: proto,\r\n\t\t\tinClass: true,\r\n\t\t\tlocals: Object.create(null)\r\n\t\t};\r\n\r\n\t\tif ( node.bases.length > 1 ) alert(\"Multiple base classes not supported.\");\r\n\r\n\t\tvar base = (node.bases.length > 0) ? transform(node.bases[0], ctx) : undefined;\r\n\r\n\t\tvar ctorBody = [];\r\n\t\tctorBody.push({\r\n\t\t\ttype: \"VariableDeclaration\",\r\n\t\t\tkind: 'var',\r\n\t\t\tdeclarations: [{\r\n\t\t\t\ttype: \"VariableDeclarator\",\r\n\t\t\t\tid: ident('that'),\r\n\t\t\t\tinit: {type: \"ThisExpression\"}\r\n\t\t\t}]\r\n\t\t});\r\n\r\n\t\tctorBody.push({\r\n\t\t\ttype: \"IfStatement\",\r\n\t\t\ttest: {\r\n\t\t\t\ttype:\"UnaryExpression\",\r\n\t\t\t\targument: binOp(ident('that'), \"instanceof\", ident(node.name)),\r\n\t\t\t\toperator: \"!\"\r\n\t\t\t},\r\n\t\t\tconsequent: ensureStatement({\r\n\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\tleft: ident('that'),\r\n\t\t\t\tright: {\r\n\t\t\t\t\ttype:  \"CallExpression\",\r\n\t\t\t\t\tcallee: makeVariableName('Object.create'),\r\n\t\t\t\t\targuments: [ proto ]\r\n\t\t\t\t},\r\n\t\t\t\toperator: '='\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tctorBody.push({\r\n\t\t\ttype: \"IfStatement\",\r\n\t\t\ttest: {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: member(proto, ident('hasOwnProperty')),\r\n\t\t\t\targuments: [literal('__init__')]\r\n\t\t\t},\r\n\t\t\tconsequent: ensureStatement({\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: member(member(proto, ident('__init__')), ident('apply')),\r\n\t\t\t\targuments: [ident('that'), ident('arguments')]\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tif ( base ) {\r\n\t\t\tctorBody.push(ensureStatement({\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: {\r\n\t\t\t\t\ttype: \"MemberExpression\",\r\n\t\t\t\t\tobject: base,\r\n\t\t\t\t\tproperty: ident('apply'),\r\n\t\t\t\t\tcomputed: false\r\n\t\t\t\t},\r\n\t\t\t\targuments: [ident('that'), ident('arguments')]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tctorBody.push({\r\n\t\t\ttype: \"ReturnStatement\",\r\n\t\t\targument: ident('that')\r\n\t\t});\r\n\r\n\r\n\t\tbody.push({\r\n\t\t\ttype: \"FunctionDeclaration\",\r\n\t\t\tid: ident(node.name),\r\n\t\t\tparams: [],\r\n\t\t\tbody: {type: \"BlockStatement\", body:ctorBody}\r\n\t\t});\r\n\r\n\t\tif ( base ) {\r\n\t\t\tbody.push({\r\n\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\tleft: proto,\r\n\t\t\t\tright: {\r\n\t\t\t\t\ttype:  \"CallExpression\",\r\n\t\t\t\t\tcallee: makeVariableName('Object.create'),\r\n\t\t\t\t\targuments: [ member(base, ident('prototype')) ]\r\n\t\t\t\t},\r\n\t\t\t\toperator: \"=\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tbody = body.concat(transform(node.body, nctx));\r\n\r\n\t\tbody.push({\r\n\t\t\ttype: \"ReturnStatement\",\r\n\t\t\targument: ident(node.name)\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\"declarations\": [\r\n\t\t\t{\r\n\t\t\t  \"type\": \"VariableDeclarator\",\r\n\t\t\t  \"id\": ident(node.name),\r\n\t\t\t  \"init\": {\r\n\t\t\t  \ttype: \"CallExpression\",\r\n\t\t\t  \tcallee: {\r\n\t\t\t  \t\ttype: \"FunctionExpression\",\r\n\t\t\t  \t\tparams: [],\r\n\t\t\t  \t\tbody: {type: \"BlockStatement\", body: ensureStatement(body)}\r\n\t\t\t  \t},\r\n\t\t\t  \targuments: []\r\n\t\t\t  }\r\n\t\t\t}],\r\n\t\t\t\"kind\": ctx.varType || 'var'\r\n\t\t};\r\n\t}\r\n\r\n\r\n\tfunction tranformContinue(node, ctx) {\r\n\t\treturn {type: \"ContinueStatement\"};\r\n\t}\r\n\r\n\tfunction makeCop(left, op, right) {\r\n\r\n\t\tvar fxOps = {\r\n\t\t\t\"In_\": \"in\",\r\n\t\t\t\"In\": \"in\",\r\n\t\t\t\"NotIn\": \"in\"\r\n\t\t};\r\n\t\tvar opName = getOpName(op);\r\n\t\tif ( opName in fxOps  ) {\r\n\t\t\tvar call = {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: makeVariableName(\"__pythonRuntime.ops.\" + fxOps[opName]),\r\n\t\t\t\targuments: [left, right]\r\n\t\t\t};\r\n\r\n\t\t\tif ( opName == \"NotIn\" ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttype: \"UnaryExpression\",\r\n\t\t\t\t\targument: call,\r\n\t\t\t\t\toperator: \"!\"\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn call;\t\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\t\r\n\t\tvar operators = {\r\n\t\t\t\"Eq\": \"===\",\r\n\t\t\t\"NotEq\": \"!==\",\r\n\t\t\t\"LtE\": \"<=\",\r\n\t\t\t\"Lt\": \"<\",\r\n\t\t\t\"GtE\": \">=\",\r\n\t\t\t\"Gt\": \">\",\r\n\t\t\t\"Is\": \"===\",\r\n\t\t\t\"IsNot\": \"!==\"\r\n\t\t};\r\n\t\t\r\n\t\tif ( !(opName in operators) ) abort(\"Unsuported Compare operator: \" + opName);\r\n\t\treturn binOp(left, operators[opName], right);\r\n\t}\r\n\r\n\tfunction transformCompare(node, ctx) {\r\n\t\tvar left = transform(node.left, ctx);\r\n\t\tvar result;\r\n\r\n\t\tfor ( var i = 0; i < node.comparators.length; ++i ) {\r\n\t\t\tvar right = transform(node.comparators[i], ctx);\r\n\t\t\tvar cop = makeCop(left, node.ops[i], right);\r\n\t\t\tif ( result ) {\r\n\t\t\t\tresult = binOp(result, '&&', cop);\r\n\t\t\t} else {\r\n\t\t\t\tresult = cop;\r\n\t\t\t}\r\n\t\t\tleft = right;\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\treturn result;\r\n\t\t\r\n\t}\r\n\r\n\tfunction transformDel(node, ctx) {\r\n\t\tvar result = [];\r\n\t\tfor ( var i = 0; i < node.targets.length; ++i ) {\r\n\t\t\tvar st = node.targets[i];\r\n\t\t\tvar partial = transform(st, ctx);\r\n\t\t\tresult.push({\r\n\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\toperator: \"=\",\r\n\t\t\t\tleft: partial,\r\n\t\t\t\tright: {\r\n\t\t\t\t\ttype: \"UnaryExpression\",\r\n\t\t\t\t\targument: literal(0),\r\n\t\t\t\t\toperator: 'void',\r\n\t\t\t\t\tprefix: true\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn ensureStatement({\r\n\t\t\ttype: \"SequenceExpression\",\r\n\t\t\texpressions: result\r\n\t\t});\r\n\t}\r\n\r\n\tfunction transformDict(node, ctx) {\r\n\t\tvar args = [];\r\n\t\tfor ( var i = 0; i < node.keys.length; ++i ) {\r\n\t\t\targs.push({\r\n\t\t\t\ttype: \"ArrayExpression\",\r\n\t\t\t\telements: [\r\n\t\t\t\t\ttransform(node.keys[i], ctx),\r\n\t\t\t\t\ttransform(node.values[i], ctx)\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttype: \"NewExpression\",\r\n\t\t\tcallee: makeVariableName(\"__pythonRuntime.objects.dict\"),\r\n\t\t\targuments: args\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformExpr(node, ctx) {\r\n\t\treturn {\r\n\t\t\ttype: \"ExpressionStatement\",\r\n\t\t\texpression: transform(node.value, ctx)\r\n\t\t};\r\n\t}\r\n\r\n\tfunction assignPossiblyWithDeclaration(target, value, ctx) {\r\n\t\tvar left = target._astname ? transform(target, ctx) : target;\r\n\t\tvar varible;\r\n\r\n\t\tif ( left.type === \"Identifier\" ) varible = left.name;\r\n\r\n\t\tif ( !varible || !ctx || !ctx.locals || ctx.locals[varible] ) {\r\n\t\t\treturn {type: \"ExpressionStatement\", expression: {\r\n\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\toperator: \"=\",\r\n\t\t\t\tleft: left,\r\n\t\t\t\tright: value\r\n\t\t\t}};\r\n\t\t}\r\n\r\n\t\tctx.locals[varible] = true;\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"VariableDeclaration\",\r\n\t\t\tdeclarations: [{\r\n\t\t\t\ttype: \"VariableDeclarator\",\r\n\t\t\t\tid: left,\r\n\t\t\t\tinit: value\r\n\t\t\t}],\r\n\t\t\tkind: ctx.varType || 'var'\r\n\t\t};\r\n\t}\r\n\r\n\tfunction createTupleUnpackingAssign(target, value, ctx) {\r\n\r\n\t\tif ( target._astname === 'Tuple' ) {\r\n\t\t\tvar result = [];\r\n\t\t\tvar tn = createTempName(\"right\");\r\n\t\t\tresult.push({\r\n\t\t\t\ttype: \"VariableDeclaration\",\r\n\t\t\t\tkind: \"var\",\r\n\t\t\t\tdeclarations: [{\r\n\t\t\t\t\ttype: \"VariableDeclarator\",\r\n\t\t\t\t\tid: ident(tn),\r\n\t\t\t\t\tinit: value\r\n\t\t\t\t}]\r\n\t\t\t});\r\n\t\t\tfor ( var i = 0; i < target.elts.length; ++i ) {\r\n\t\t\t\tresult.push.apply(result,createTupleUnpackingAssign(\r\n\t\t\t\t\ttarget.elts[i],\r\n\t\t\t\t\t{type: \"MemberExpression\", object: ident(tn), property: literal(i),  computed: true}\r\n\t\t\t\t,ctx));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\treturn [assignPossiblyWithDeclaration(target, value, ctx)];\r\n\t}\r\n\r\n\tfunction createForLoop(iident, tident, iter, target, body, ctx) {\r\n\r\n\t\tbody = createTupleUnpackingAssign(\r\n\t\t\ttarget, \r\n\t\t\t{type: \"MemberExpression\", object: tident, property: iident, computed: true},\r\n\t\t\tctx\r\n\t\t).concat(body);\r\n\r\n\t\tvar riter = ternary(\r\n\t\t\t{type: \"CallExpression\", callee: makeVariableName(\"Array.isArray\"), arguments:[iter]},\r\n\t\t\titer,\r\n\t\t\t{type: \"CallExpression\", callee: makeVariableName(\"Object.keys\"), arguments:[iter]}\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"ForStatement\",\r\n\t\t\tinit: {\r\n\t\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\t\"declarations\": [\r\n\t\t\t\t{\r\n\t\t\t\t  \"type\": \"VariableDeclarator\",\r\n\t\t\t\t  \"id\": iident,\r\n\t\t\t\t  \"init\": literal(0)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  \"type\": \"VariableDeclarator\",\r\n\t\t\t\t  \"id\": tident,\r\n\t\t\t\t  \"init\": riter\r\n\t\t\t\t}],\r\n\t\t\t\t\"kind\": ctx.varType\r\n\t\t\t},\r\n\t\t\ttest: binOp(iident, '<', {\r\n\t\t\t\ttype: \"MemberExpression\", object: tident, property: {type: \"Identifier\", name: \"length\"}\r\n\t\t\t}),\r\n\t\t\tupdate: {\r\n\t\t\t\t\"type\": \"UpdateExpression\",\r\n\t\t\t\t\"operator\": \"++\",\r\n\t\t\t\t\"prefix\": true,\r\n\t\t\t\t\"argument\": iident\r\n\t\t\t},\r\n\t\t\tbody: {type: \"BlockStatement\", body: body}\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformFor(node, ctx) {\r\n\t\tvar name = createTempName('idx');\r\n\t\tvar iident = ident(name);\r\n\t\tvar tname = createTempName('target');\r\n\t\tvar tident = {type: \"Identifier\", name: tname};\r\n\t\tvar iter = transform(node.iter, ctx);\r\n\t\tvar body = ensureStatement(transform(node.body, ctx));\r\n\r\n\t\tif ( node.orelse && node.orelse.length > 0 ) abort(\"else: for-else statement unsupported.\");\r\n\t\treturn createForLoop(iident, tident, iter, node.target, body, ctx);\r\n\t}\r\n\r\n\tfunction prepareFunctionBody(node, ctx) {\r\n\t\tvar args = node.args.args.slice(0);\r\n\t\tif  ( ctx.inClass ) {\r\n\t\t\t//TODO: Make sure it's named self, maybe?\r\n\t\t\targs.shift();\r\n\t\t}\r\n\t\tvar hasAnyArguments = args.length > 0 || node.args.vararg || node.args.kwarg;\r\n\t\tvar nctx = {\r\n\t\t\tlocals: Object.create(null),\r\n\t\t\tvarType: ctx.varType\r\n\t\t};\r\n\t\tvar body = ensureStatement(transform(node.body, nctx));\r\n\t\tvar premble = [];\r\n\r\n\t\tif ( ctx.inClass ) {\r\n\t\t\tpremble.push({\r\n\t\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\t\"declarations\": [{\r\n\t\t\t\t\t\"type\": \"VariableDeclarator\",\r\n\t\t\t\t\t\"id\": ident('self'),\r\n\t\t\t\t\t\"init\": {type: \"ThisExpression\"}\r\n\t\t\t\t}],\r\n\t\t\t\t\"kind\": \"var\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif ( hasAnyArguments ) {\r\n\t\t\t\r\n\t\t\tvar hasParams = createTempName('hasParams');\r\n\t\t\tvar param0 = createTempName('param0');\r\n\t\t\tvar realArgCount = createTempName('realArgCount');\r\n\t\t\tvar argLen = makeVariableName('arguments.length');\r\n\t\t\tvar argN = {type: \"MemberExpression\", object: ident('arguments'), property: binOp(argLen, '-', literal(1)), computed: true};\r\n\t\t\tvar argNKeywords = {type: \"MemberExpression\", object: argN, property: ident('keywords'), computed: false};\r\n\r\n\t\t\tpremble.push({\r\n\t\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\t\"declarations\": [\r\n\t\t\t\t{\r\n\t\t\t\t  \"type\": \"VariableDeclarator\",\r\n\t\t\t\t  \"id\": ident(hasParams),\r\n\t\t\t\t  \"init\": logicOp(binOp(argLen, '>', literal(0)), '&&', logicOp(argN, '&&', argNKeywords))\r\n\t\t\t\t}],\r\n\t\t\t\t\"kind\":  \"var\"\r\n\t\t\t});\r\n\r\n\t\t\tvar main = [];\r\n\t\t\tmain.push({\r\n\t\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\t\"declarations\": [{\r\n\t\t\t\t\t\"type\": \"VariableDeclarator\",\r\n\t\t\t\t\t\"id\": ident(param0),\r\n\t\t\t\t\t\"init\": ternary(ident(hasParams), argNKeywords, {type: \"ObjectExpression\", properties: []})\r\n\t\t\t\t},{\r\n\t\t\t\t\t\"type\": \"VariableDeclarator\",\r\n\t\t\t\t\t\"id\": ident(realArgCount),\r\n\t\t\t\t\t\"init\": binOp(argLen, '-', ternary(ident(hasParams), literal(1), literal(0)))\r\n\t\t\t\t}],\r\n\t\t\t\t\"kind\": \"var\"\r\n\t\t\t});\r\n\r\n\t\t\tfor ( var i = 0; i < args.length; ++i ) {\r\n\t\t\t\tvar a = node.args.args[i];\r\n\t\t\t\tvar didx = i - (node.args.args.length - node.args.defaults.length);\r\n\t\t\t\tvar def = didx >= 0 ? transform(node.args.defaults[didx], ctx) : ident('undefined');\r\n\r\n\t\t\t\tmain.push({\r\n\t\t\t\t\ttype: \"IfStatement\",\r\n\t\t\t\t\ttest: binOp(ident(realArgCount), '<', literal(i+1)),\r\n\t\t\t\t\tconsequent: ensureStatement({\r\n\t\t\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\t\t\toperator: \"=\",\r\n\t\t\t\t\t\tleft: ident(a.id),\r\n\t\t\t\t\t\tright: ternary(\r\n\t\t\t\t\t\t\tbinOp(literal(a.id), 'in', ident(param0)),\r\n\t\t\t\t\t\t\t{type: \"MemberExpression\", object: ident(param0), property: ident(a.id), computed: false},\r\n\t\t\t\t\t\t\tdef\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif ( node.args.vararg ) {\r\n\t\t\t\tmain.push({\r\n\t\t\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\t\t\"declarations\": [{\r\n\t\t\t\t\t\t\"type\": \"VariableDeclarator\",\r\n\t\t\t\t\t\t\"id\": ident(node.args.vararg),\r\n\t\t\t\t\t\t\"init\": {\r\n\t\t\t\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\t\t\t\tcallee: makeVariableName(\"Array.prototype.slice.call\"),\r\n\t\t\t\t\t\t\targuments: [ident('arguments'), literal(node.args.args.length), hasAnyArguments ? ident(realArgCount) : undefined]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}],\r\n\t\t\t\t\t\"kind\": \"var\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif ( node.args.kwarg ) {\r\n\t\t\t\tfor ( var i = 0; i < node.args.args.length; ++i ) {\r\n\t\t\t\t\tmain.push(ensureStatement({\r\n\t\t\t\t\t\ttype: \"UnaryExpression\",\r\n\t\t\t\t\t\toperator: \"delete\",\r\n\t\t\t\t\t\targument: {\r\n\t\t\t\t\t\t\ttype: \"MemberExpression\",\r\n\t\t\t\t\t\t\tobject: ident(param0),\r\n\t\t\t\t\t\t\tproperty: ident(node.args.args[i].id),\r\n\t\t\t\t\t\t\tcomputed: false\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\tmain.push({\r\n\t\t\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\t\t\"declarations\": [{\r\n\t\t\t\t\t\t\"type\": \"VariableDeclarator\",\r\n\t\t\t\t\t\t\"id\": ident(node.args.kwarg),\r\n\t\t\t\t\t\t\"init\": ident(param0)\r\n\t\t\t\t\t}],\r\n\t\t\t\t\t\"kind\": \"var\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tpremble = premble.concat(main); //TODO: If we dont have defauts, we can guard this with __hasParams\t\r\n\t\t}\r\n\r\n\r\n\t\tbody = premble.concat(body);\r\n\t\tvar params = transform(args, ctx);\r\n\t\treturn {\r\n\t\t\tpremble: premble,\r\n\t\t\tbody: body,\r\n\t\t\tparams: params\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction transformFunctionDef(node, ctx) {\r\n\t\tvar data = prepareFunctionBody(node, ctx);\r\n\r\n\r\n\r\n\t\tif ( ctx.writeTarget ) {\r\n\t\t\treturn ensureStatement({\r\n\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\tleft: {type: \"MemberExpression\", object: ctx.writeTarget, property: ident(node.name)},\r\n\t\t\t\tright: {\r\n\t\t\t\t\ttype: \"FunctionExpression\",\r\n\t\t\t\t\tname: ident(node.name),\r\n\t\t\t\t\tparams: data.params,\r\n\t\t\t\t\tbody: {type: \"BlockStatement\", body: data.body}\r\n\t\t\t\t},\r\n\t\t\t\toperator: '='\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\ttype: \"FunctionDeclaration\",\r\n\t\t\t\tid: {type: \"Identifier\", name: node.name.v},\r\n\t\t\t\tparams: data.params,\r\n\t\t\t\tbody: {type: \"BlockStatement\", body: data.body}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transformGlobal(node, ctx) {\r\n\t\tfor ( var i = 0; i < node.names.length; ++i ) {\r\n\t\t\tctx.locals[node.names[i].v] = true;\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tfunction transformIf(node, ctx) {\r\n\t\tvar body = ensureStatement(transform(node.body, ctx));\r\n\t\treturn {\r\n\t\t\ttype: \"IfStatement\",\r\n\t\t\ttest: transform(node.test, ctx),\r\n\t\t\tconsequent: {type: \"BlockStatement\", body: body},\r\n\t\t\talternate: (node.orelse && node.orelse.length > 0) ? {type: \"BlockStatement\", body: ensureStatement(transform(node.orelse, ctx))} : undefined\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformLambda(node, ctx) {\r\n\t\tvar data = prepareFunctionBody(node, ctx);\r\n\t\t\r\n\t\t//TODO: This is pretty sketchy.\r\n\t\tvar last = data.body[data.body.length - 1];\r\n\t\tdata.body[data.body.length - 1] = {type: \"ReturnStatement\", argument: last.expression};\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"FunctionExpression\",\r\n\t\t\tparams: data.params,\r\n\t\t\tbody: {type: \"BlockStatement\", body: data.body}\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformList(node, ctx) {\r\n\t\tvar call = {\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: makeVariableName(\"__pythonRuntime.objects.list\"),\r\n\t\t\targuments: transform(node.elts, ctx)\r\n\t\t};\r\n\t\treturn call;\r\n\t}\r\n\r\n\tfunction transformListComp(node, ctx) {\t\r\n\t\tvar body = [];\r\n\t\tvar aggrigator = createTempName('result');\r\n\r\n\t\tbody.push({\r\n\t\t\t\"type\": \"VariableDeclaration\",\r\n\t\t\t\"declarations\": [{\r\n\t\t\t\t\"type\": \"VariableDeclarator\",\r\n\t\t\t\t\"id\": ident(aggrigator),\r\n\t\t\t\t\"init\": {\r\n\t\t\t\t\ttype: \"NewExpression\",\r\n\t\t\t\t\tcallee: makeVariableName('__pythonRuntime.objects.list'),\r\n\t\t\t\t\targuments: []\r\n\t\t\t\t}\r\n\t\t\t}],\r\n\t\t\t\"kind\": \"var\"\r\n\t\t});\r\n\r\n\t\tvar insideBody = [];\r\n\r\n\t\tinsideBody.push(ensureStatement({\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: {type: \"MemberExpression\", object: ident(aggrigator), property: ident('push'), computed: false},\r\n\t\t\targuments: [transform(node.elt, ctx)]\r\n\t\t}));\r\n\r\n\t\t//if ( node.generators.length !== 1 ) abort(\"Unsuported number of generators\");\r\n\t\tvar gen = node.generators[0];\r\n\r\n\t\tfor ( var g = node.generators.length - 1; g >= 0; --g ) {\r\n\t\t\tvar idxName = createTempName('idx');\r\n\t\t\tvar listName = createTempName(\"list\" + g);\r\n\t\t\tvar iterName = createTempName('iter');\r\n\t\t\tvar gen = node.generators[g];\r\n\t\t\tfor ( var i = 0; i < gen.ifs.length; ++i ) {\r\n\t\t\t\tinsideBody.unshift({\r\n\t\t\t\t\ttype: \"IfStatement\",\r\n\t\t\t\t\ttest: {type: \"UnaryExpression\", argument: transform(gen.ifs[i], ctx), operator: \"!\"},\r\n\t\t\t\t\tconsequent: {type: \"ContinueStatement\"}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tinsideBody = [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"VariableDeclaration\",\r\n\t\t\t\t\tkind: \"var\",\r\n\t\t\t\t\tdeclarations: [{\r\n\t\t\t\t\t\ttype: \"VariableDeclarator\",\r\n\t\t\t\t\t\tid: ident(listName),\r\n\t\t\t\t\t\tinit: transform(gen.iter, ctx)\r\n\t\t\t\t\t}]\r\n\t\t\t\t},\r\n\t\t\t\tcreateForLoop(ident(idxName), ident(iterName), ident(listName), gen.target, insideBody, ctx)\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tbody.push.apply(body, insideBody);\r\n\t\tbody.push({\r\n\t\t\ttype: \"ReturnStatement\",\r\n\t\t\targument: ident(aggrigator)\r\n\t\t});\r\n\r\n\t\tvar expr = {\r\n\t\t\ttype: \"FunctionExpression\",\r\n\t\t\tparams: [],\r\n\t\t\tbody: {type: \"BlockStatement\", body: body}\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: expr,\r\n\t\t\targuments: []\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformModule(node, ctx) {\r\n\t\treturn {\r\n\t\t\ttype: \"Program\",\r\n\t\t\tbody: ensureStatement(transform(node.body, ctx))\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformName(node, ctx) {\r\n\t\tif ( node.id.v === 'True' ) return {type: \"Literal\", value: true, raw: \"true\"};\r\n\t\tif ( node.id.v === 'False' ) return {type: \"Literal\", value: false, raw: \"false\"};\r\n\t\tif ( node.id.v === 'None' ) return {type: \"Literal\", value: null, raw: \"null\"};\r\n\r\n\t\tif ( node.id.v === 'random' ) return makeVariableName('__pythonRuntime.imports.random');\r\n\t\treturn ident(node.id);\r\n\t}\r\n\r\n\tfunction transformNum(node, ctx) {\r\n\t\treturn literal(node.n);\r\n\t}\r\n\r\n\tfunction transformPrint(node, ctx) {\r\n\t\treturn {\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: makeVariableName(\"console.log\"),\r\n\t\t\targuments: transform(node.values, ctx)\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformReturn(node, ctx) {\r\n\t\treturn {\r\n\t\t\ttype: \"ReturnStatement\",\r\n\t\t\targument: node.value ? transform(node.value, ctx) : undefined\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformStr(node, ctx) {\r\n\t\treturn literal(node.s.valueOf());\r\n\t}\r\n\r\n\tfunction transformTuple(node, ctx) {\r\n\t\tvar call = {\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: makeVariableName(\"__pythonRuntime.objects.tuple\"),\r\n\t\t\targuments: transform(node.elts, ctx)\r\n\t\t};\r\n\t\treturn call;\r\n\t}\r\n\r\n\tfunction transformSubscript(node, ctx) {\r\n\t\t//TODO: Do silly pythonic list offset logic\r\n\t\tvar val = transform(node.value, ctx);\r\n\t\tif ( node.slice.value ) {\r\n\t\t\tvar lu = transform(node.slice.value, ctx);\r\n\t\t\tlu = {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: makeVariableName(\"__pythonRuntime.ops.subscriptIndex\"),\r\n\t\t\t\targuments: [val, lu]\r\n\t\t\t};\r\n\t\t\treturn {\r\n\t\t\t\ttype: \"MemberExpression\",\r\n\t\t\t\tcomputed: true,\r\n\t\t\t\tobject: val,\r\n\t\t\t\tproperty: lu\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"CallExpression\",\r\n\t\t\tcallee: makeVariableName('__pythonRuntime.internal.slice'),\r\n\t\t\targuments:[\r\n\t\t\t\tval,\r\n\t\t\t\tnode.slice.lower ? transform(node.slice.lower, ctx) : ident('undefined'),\r\n\t\t\t\tnode.slice.upper ? transform(node.slice.upper, ctx) : ident('undefined'),\r\n\t\t\t\tnode.slice.step ? transform(node.slice.step, ctx) : ident('undefined'),\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n\r\n\tfunction transformPass(node, ctx) {\r\n\t\treturn {type: \"EmptyStatement\"};\r\n\t}\r\n\r\n\tfunction transformUnaryOp(node, ctx) {\r\n\t\tvar argument = transform(node.operand, ctx);\r\n\r\n\t\tvar fxOps = {\r\n\t\t\t\"Add\": \"add\",\r\n\t\t\t\"Mult\": \"multiply\",\r\n\t\t};\r\n\t\tvar opName = getOpName(node.op);\r\n\r\n\t\tif ( opName in fxOps  ) {\r\n\t\t\tvar call = {\r\n\t\t\t\ttype: \"CallExpression\",\r\n\t\t\t\tcallee: makeVariableName(\"__pythonRuntime.ops.\" + fxOps[opName]),\r\n\t\t\t\targuments: [argument]\r\n\t\t\t};\r\n\t\t\treturn call;\r\n\t\t}\r\n\r\n\t\tvar operators = {\r\n\t\t\t\"Not\": \"!\",\r\n\t\t\t\"USub\": \"-\",\r\n\t\t\t\"Invert\": \"~\"\r\n\t\t};\r\n\r\n\t\tif ( !(opName in operators) ) abort(\"Unknown unary operator: \" + opName);\r\n\r\n\t\treturn {\r\n\t\t\ttype: \"UnaryExpression\",\r\n\t\t\targument: argument,\r\n\t\t\toperator: operators[opName]\r\n\t\t};\r\n\t\t\r\n\t}\r\n\r\n\tfunction transformWhile(node, ctx) {\r\n\t\tif ( node.orelse && node.orelse.length > 0 ) abort(\"else: statement for while unsupported.\");\r\n\t\treturn {\r\n\t\t\ttype: \"WhileStatement\",\r\n\t\t\ttest: transform(node.test, ctx),\r\n\t\t\tbody: {type: \"BlockStatement\", body: ensureStatement(transform(node.body, ctx))}\r\n\t\t};\t\r\n\t}\r\n\r\n\tmodule.exports = transform;\r\n\r\n\r\n/***/ },\r\n/* 3 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\tvar Sk = __webpack_require__(1);\r\n\r\n\tfunction splat(e) {\r\n\t\tconsole.log(\"GOT ERROR!\");\r\n\t\tconsole.log(e, e.extra);\r\n\t\tconsole.log(JSON.stringify(e.extra.node, function(k,  o) {\r\n\t\t\tif ( k == 'type' ) return Sk.nameForToken(o);\r\n\t\t\telse if ( k == 'children' ) return o;\r\n\t\t\telse if ( k ===  '' ) return o;\r\n\t\t\telse if ( !isNaN(parseInt(k)) ) return o;\r\n\t\t\telse return undefined;\r\n\t\t}, '  '));\r\n\t}\r\n\r\n\tfunction improveError(e, options, code) {\r\n\t\tvar r;\r\n\t\tif ( e.context && e.context.length >0 ) {\r\n\t\t\tr = e.context[0];\t\r\n\t\t}\r\n\r\n\t\tif ( e.extra && e.extra.node ) {\r\n\t\t\tif ( !r ) {\r\n\t\t\t\tr = [e.extra.node.loc.start.line,e.extra.node.loc.start.column];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( r ) {\r\n\t\t\tsetErrorPos(e, r[0], r[1]);\r\n\t\t}\r\n\r\n\t\tif ( options.friendlyErrors && e.extra ) {\r\n\t\t\te.message = makeErrorFriendly(e, code);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setErrorPos(e, line, col) {\r\n\t\te.loc = {line: line, column: col};\r\n\t\te.line = line;\r\n\t\te.column = col;\r\n\t}\r\n\r\n\tfunction friendlyString(s) {\r\n\t\tswitch (s) {\r\n\t\tcase 'if_stmt': return 'if statement';\r\n\t\tcase 'while_stmt': return 'while statement';\r\n\t\tcase 'funcdef': return 'function';\r\n\t\tdefault: return '?' + s + '?';\r\n\t\t} \r\n\t}\r\n\r\n\tfunction nodeToType(n) {\r\n\t\tvar type = Sk.nameForToken(n.type);\r\n\t\tif ( type === 'suite' ) return nodeToType(n.children[0]);\r\n\t\treturn friendlyString(type);\r\n\t}\r\n\r\n\tfunction makeErrorFriendly(e, code) {\r\n\t\t//console.log(\"EX\", e.message, e.extra);\r\n\t\tif ( e.extra.kind == \"DAG_MISS\" ) {\r\n\t\t\tif ( e.extra.expected.indexOf('T_COLON') !== -1 ) {\r\n\t\t\t\t//We might be missing a colon.\r\n\t\t\t\tvar after = (e.context && e.context[2] ? e.context[2] : e.extra.found_val).replace(/\\s+$/,'');\r\n\t\t\t\tvar lc = e.extra.node.children[e.extra.node.children.length-1];\r\n\t\t\t\tif ( lc.value === 'else' ) after = 'else';\r\n\r\n\t\t\t\tif ( e.extra.found == 'T_SEMI' ) {\r\n\t\t\t\t\treturn \"Replace the `;` at the end of `\" + after + \"` with a `:`\";\r\n\t\t\t\t} else if ( e.extra.found == 'T_NEWLINE' ) {\r\n\t\t\t\t\treturn \"Need a `:` on the end of the line following `\" + after + \"`.\";\r\n\t\t\t\t} else if ( e.extra.found == 'T_NAME' ) {\r\n\t\t\t\t\treturn \"Need a `:` after `\" + after + \"`.\";\r\n\t\t\t\t} else if ( e.extra.found == 'T_EQUAL' ) {\r\n\t\t\t\t\treturn \"Can't assign to a variable within the condition of an \" + friendlyString(e.extra.inside) + \".  Did you mean to use `==` instead of `=`?\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.expected.indexOf('T_DEDENT') !== -1 ) {\r\n\t\t\t\tif ( e.extra.found_val.toLowerCase() === 'else' ) {\r\n\t\t\t\t\treturn \"`else` needs to line up with its `if`.\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"Indentation error.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.expected.indexOf('T_INDENT') !== -1 ) {\r\n\t\t\t\tvar lc = e.extra.parent || e.extra.node;\r\n\t\t\t\tvar name  = nodeToType(lc);\r\n\t\t\t\tif ( name === 'if statement' ) {\r\n\t\t\t\t\t//Scan for the most recent part of the ifstatement.\r\n\t\t\t\t\tfor ( var i = 0; i < lc.children.length; ++i ) {\r\n\t\t\t\t\t\tif ( [\"if\", \"elif\", \"else\"].indexOf(lc.children[i].value) !== -1 ) {\r\n\t\t\t\t\t\t\tname = lc.children[i].value + ' statement';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif ( lc.value === 'else' ) name = 'else statement';\r\n\t\t\t\treturn 'Empty ' + name + '. Put 4 spaces in front of statements inside the ' + name + '.';\r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.found === 'T_NAME' ) {\r\n\t\t\t\tswitch ( e.extra.found_val ) {\r\n\t\t\t\t\tcase 'else':\r\n\t\t\t\t\tcase 'elif':\r\n\t\t\t\t\t\treturn '`' + e.extra.found_val + '` must be paired with an `if`';\r\n\t\t\t\t\tcase 'elseif':\r\n\t\t\t\t\t\treturn '`elseif` should be shortened to `elif`';\r\n\t\t\t\t} \r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.found === 'T_AMPER' && e.extra.inside == 'and_expr' ) {\r\n\t\t\t\treturn 'Python uses the word `and` instead of `&&` for boolean AND expressions.';\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( e.extra.inside === 'trailer' ) {\r\n\t\t\t\t//We are parsing either an arglist or a subscript.\r\n\t\t\t\tif ( e.extra.expected.indexOf('T_RPAR') === 0 ) {\r\n\t\t\t\t\t//Expected ), must be a arglsit;\r\n\t\t\t\t\tif ( e.line > e.extra.node.lineno ) {\r\n\t\t\t\t\t\t//Our arglist is incomplete, and we have made it to the next line,.\r\n\t\t\t\t\t\t//Likely they just forgot to close their ()'s\r\n\t\t\t\t\t\tsetErrorPos(e, e.extra.node.lineno, e.extra.node.col_offset);\r\n\t\t\t\t\t\tvar t = e.extra.node.loc;\r\n\t\t\t\t\t\te.context = [\r\n\t\t\t\t\t\t\t[t.start.line,t.start.column],\r\n\t\t\t\t\t\t\t[t.end.line,t.end.column]\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\treturn 'Unclosed `(` in function arguments.' + e.extra.node.lineno;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 'Function calls paramaters must be seperated by `,`s';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.found === 'T_INDENT' ) {\r\n\t\t\t\tif ( e.extra.expected.indexOf('stmt') !== -1 ) {\r\n\t\t\t\t\treturn 'Too much indentation at the beginning of this line.';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.expected.indexOf('subscriptlist') === 0 ) {\r\n\t\t\t\treturn \"Malformed subscript\";\r\n\t\t\t}\r\n\r\n\t\t\tif ( e.extra.expected.indexOf('T_NEWLINE') !== -1 ) {\r\n\t\t\t\tvar n = e.extra.node;\r\n\t\t\t\t\r\n\t\t\t\tif ( e.extra.node.children[0] ) {\r\n\t\t\t\t\tvar n = e.extra.node.children[0];\r\n\t\t\t\t\tvar previousType = Sk.nameForToken(n.type);\r\n\t\t\t\t\r\n\t\t\t\t\tif ( previousType == 'small_stmt' ) {\r\n\t\t\t\t\t\twhile ( n.children && n.children.length == 1 ) n = n.children[0];\r\n\t\t\t\t\t\tvar what = code.substring(n.range[0], n.range[1]);\r\n\t\t\t\t\t\treturn 'If you want to call `' + what +'` as function, you need `()`\\'s';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn 'Unexpected token: ' + e.message;\r\n\t\t} else if ( e.extra.kind == \"CLASSIFY\" ) {\r\n\t\t\tif ( e.extra.value === '\"' ) return 'Unterminated string. Add a matching `\"` at the end of your string.';\r\n\t\t\treturn 'Unterminated `' + e.extra.value + '`';\r\n\t\t} else if ( e.extra.kind == \"STRING_EOF\" ) {\r\n\t\t\treturn 'Unterminated muti-line string. Add a matching `\"\"\"` at the end of your string.';\r\n\t\t} else if ( e.extra.kind == \"STATEMENT_EOF\" ) {\r\n\t\t\tif ( e.extra.parenlev > 0 ) {\r\n\t\t\t\tvar top = e.extra.parenstack[e.extra.parenstack.length-1];\r\n\t\t\t\tvar kind = top[0];\r\n\t\t\t\tvar types = '([{';\r\n\t\t\t\tvar pair = ')]}';\r\n\t\t\t\tvar close = pair[types.indexOf(kind)];\r\n\t\t\t\tsetErrorPos(e, top[1], top[2]-1);\r\n\t\t\t\treturn 'Unmatched `' + kind + '`.  Every opening `' + kind + '` needs a closing `' + close + '` to match it.';\r\n\t\t\t}\r\n\t\t\treturn e.message;\r\n\t\t}\r\n\r\n\t\treturn e.message;\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\tmodule.exports = improveError;\r\n\r\n\r\n/***/ },\r\n/* 4 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t(function (root, factory) {\r\n\t  'use strict';\r\n\t  if(true)\r\n\t    module.exports = factory();\r\n\t  else if(typeof define === 'function' && define.amd)\r\n\t    define([], factory);\r\n\t  else if(typeof exports === 'object')\r\n\t    exports[\"__pythonRuntime\"] = factory();\r\n\t  else\r\n\t    root[\"__pythonRuntime\"] = factory();\r\n\t}(this, function() {\r\n\t  'use strict';\r\n\t  var pythonRuntime = {\r\n\t    internal: {\r\n\t      // Only used within runtime\r\n\t      isSeq: function (a) { return a && (a._type === \"list\" || a._type === \"tuple\"); },\r\n\t      slice: function (obj, start, end, step) {\r\n\t        var slice;\r\n\t        if ( typeof obj === 'string' ) slice = function(x,y) { return obj.substring(x,y); }\r\n\t        else slice = obj.slice.bind(obj);\r\n\r\n\t        if (step == null || step === 0) step = 1; // TODO: step === 0 is a runtime error\r\n\t        if (start == null) {\r\n\t          if (step < 0) start = obj.length - 1;\r\n\t          else start = 0;\r\n\t        } else if (start < 0) start += obj.length;\r\n\t        if (end == null) {\r\n\t          if (step < 0) end = -1;\r\n\t          else end = obj.length;\r\n\t        } else if (end < 0) end += obj.length;\r\n\r\n\t        var ret = new pythonRuntime.objects.list(), tmp, i;\r\n\t        if (step < 0) {\r\n\t          tmp = slice(end + 1, start + 1);\r\n\t          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);\r\n\t        } else {\r\n\t          tmp = slice(start, end);\r\n\t          if (step === 1 && typeof tmp !== 'string') ret = pythonRuntime.utils.createList(tmp);\r\n\t          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);\r\n\t        }\r\n\t        if ( typeof obj === 'string' ) return ret.join('');\r\n\t        return ret;\r\n\t      },\r\n\t      isJSArray: Array.isArray || function(obj) {\r\n\t        return toString.call(obj) === '[object Array]';\r\n\t      }\r\n\t    },\r\n\r\n\t    utils: {\r\n\t      createDict: function () {\r\n\t        var ret = new pythonRuntime.objects.dict();\r\n\t        if (arguments.length === 1 && arguments[0] instanceof Object)\r\n\t          for (var k in arguments[0]) ret[k] = arguments[0][k];\r\n\t        else\r\n\t          throw TypeError(\"createDict expects a single JavaScript object\");\r\n\t        return ret;\r\n\t      },\r\n\t      createParamsObj: function () {\r\n\t        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...\r\n\t        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}\r\n\t        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };\r\n\t        for (var i = 0; i < arguments.length; i++) {\r\n\t          if (arguments[i] && arguments[i].__kwp === true) {\r\n\t            for (var k in arguments[i])\r\n\t              if (k !== '__kwp') params.keywords[k] = arguments[i][k];\r\n\t          }\r\n\t          else params.formals.push(arguments[i]);\r\n\t        }\r\n\t        return params;\r\n\t      },\r\n\t      convertToList: function (list) {\r\n\t        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);\r\n\t        return list;\r\n\t      },\r\n\t      convertToDict: function (dict) {\r\n\t        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);\r\n\t        return dict;\r\n\t      }, \r\n\t      listPropertyDescriptor: {\r\n\t          \"_type\": {\r\n\t            get: function () { return 'list'; },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"_isPython\": {\r\n\t            get: function () { return true; },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"append\": {\r\n\t            value: function (x) {\r\n\t              this.push(x);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"clear\": {\r\n\t            value: function () {\r\n\t              this.splice(0, this.length);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"copy\": {\r\n\t            value: function () {\r\n\t              return this.slice(0);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"count\": {\r\n\t            value: function (x) {\r\n\t              var c = 0;\r\n\t              for (var i = 0; i < this.length; i++)\r\n\t                if (this[i] === x) c++;\r\n\t              return c;\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"equals\": {\r\n\t            value: function (x) {\r\n\t              try {\r\n\t                if (this.length !== x.length) return false;\r\n\t                for (var i = 0; i < this.length; i++) {\r\n\t                  if (this[i].hasOwnProperty(\"equals\")) {\r\n\t                    if (!this[i].equals(x[i])) return false;\r\n\t                  } else if (this[i] !== x[i]) return false;\r\n\t                }\r\n\t                return true;\r\n\t              }\r\n\t              catch (e) { }\r\n\t              return false;\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"extend\": {\r\n\t            value: function (L) {\r\n\t              for (var i = 0; i < L.length; i++) this.push(L[i]);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"index\": {\r\n\t            value: function (x) {\r\n\t              return this.indexOf(x);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"indexOf\": {\r\n\t            value: function (x, fromIndex) {\r\n\t              try {\r\n\t                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\r\n\t                  if (this[i].hasOwnProperty(\"equals\")) {\r\n\t                    if (this[i].equals(x)) return i;\r\n\t                  } else if (this[i] === x) return i;\r\n\t                }\r\n\t              }\r\n\t              catch (e) { }\r\n\t              return -1;\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"insert\": {\r\n\t            value: function (i, x) {\r\n\t              this.splice(i, 0, x);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"pop\": {\r\n\t            value: function (i) {\r\n\t              if (arguments.length<1) i = this.length - 1;\r\n\t              var item = this[i];\r\n\t              this.splice(i, 1);\r\n\t              return item;\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"_pySlice\": {\r\n\t            value: function (start, end, step) {\r\n\t              return pythonRuntime.internal.slice(this, start, end, step);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"remove\": {\r\n\t            value: function (x) {\r\n\t              this.splice(this.indexOf(x), 1);\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"sort\": {\r\n\t            value: function(x, reverse) {\r\n\t              var list2 = this.slice(0);\r\n\t              var apply_key = function(a, numerical) {\r\n\t                var list3 = list2.map(x);\r\n\t                // construct a dict that maps the listay before and after the map\r\n\t                var mapping = {}\r\n\t                for(var i in list3) mapping[list3[i]] = list2[i];\r\n\t                if(numerical)\r\n\t                  list3.sort(function(a, b) { return a - b; });\r\n\t                else\r\n\t                  list3.sort()\r\n\t                for(var i in a) a[i] = mapping[list3[i]];\r\n\t              }\r\n\t              for(var i in this) {\r\n\t                if(typeof this[i] !== 'number' || !isFinite(this[i])) {\r\n\t                  if(typeof x != 'undefined') {\r\n\t                    apply_key(this, false);\r\n\t                  }\r\n\t                  else {\r\n\t                    list2.sort();\r\n\t                    for (var j in this) this[j] = list2[j];\r\n\t                  }\r\n\t                  if(reverse)\r\n\t                    this.reverse();\r\n\t                  return;\r\n\t                }\r\n\t              }\r\n\t              if(typeof x != 'undefined') {\r\n\t                apply_key(this, true);\r\n\t              }\r\n\t              else {\r\n\t                list2.sort(function(a, b) { return a - b; });\r\n\t                for(var i in this) this[i] = list2[i];\r\n\t              }\r\n\t              if(reverse)\r\n\t                this.reverse();\r\n\t            },\r\n\t            enumerable: false\r\n\t          },\r\n\t          \"toString\": {\r\n\t            value: function () {\r\n\t              return '[' + this.join(', ') + ']';\r\n\t            },\r\n\t            enumerable: false\r\n\t          }\r\n\t      },\r\n\t      createList: function () {\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        if (arguments.length === 1 && arguments[0] instanceof Array)\r\n\t          for (var i in arguments[0]) ret.push(arguments[0][i]);\r\n\t        else\r\n\t          for (var i in arguments) ret.push(arguments[i]);\r\n\t        return ret;\r\n\t      },\r\n\t      dictPropertyDescriptor: {\r\n\t        \"_type\": {\r\n\t          get: function () { return 'dict';},\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"_isPython\": {\r\n\t          get: function () { return true; },\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"items\": {\r\n\t          value: function () {\r\n\t            var items = new pythonRuntime.objects.list();\r\n\t            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));\r\n\t            return items;\r\n\t          },\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"length\": {\r\n\t          get: function () {\r\n\t            return Object.keys(this).length;\r\n\t          },\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"clear\": {\r\n\t          value: function () {\r\n\t            for (var i in this) delete this[i];\r\n\t          },\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"get\": {\r\n\t          value: function (key, def) {\r\n\t            if (key in this) return this[key];\r\n\t            else if (def !== undefined) return def;\r\n\t            return null;\r\n\t          },\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"keys\": {\r\n\t          value: function () {\r\n\t            return Object.keys(this);\r\n\t          },\r\n\t          enumerable: false\r\n\t        },\r\n\t        \"pop\": {\r\n\t          value: function (key, def) {\r\n\t            var value;\r\n\t            if (key in this) {\r\n\t              value = this[key];\r\n\t              delete this[key];\r\n\t            } else if (def !== undefined) value = def;\r\n\t            else return new Error(\"KeyError\");\r\n\t            return value;\r\n\t          },\r\n\t          enumerable: false\r\n\t        }, \"values\": {\r\n\t          value: function () {\r\n\t            var values = new pythonRuntime.objects.list();\r\n\t            for (var key in this) values.append(this[key]);\r\n\t            return values;\r\n\t          },\r\n\t          enumerable: false\r\n\t        }\r\n\t      }\r\n\t    },\r\n\t    ops: {\r\n\t      add: function (a, b) {\r\n\t        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {\r\n\t          if (a._type !== b._type)\r\n\t            throw TypeError(\"can only concatenate \" + a._type + \" (not '\" + b._type + \"') to \" + a._type);\r\n\t          var ret;\r\n\t          if (a._type === 'list') ret = new pythonRuntime.objects.list();\r\n\t          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\r\n\t          if (ret) {\r\n\t            for (var i = 0; i < a.length; i++) ret.push(a[i]);\r\n\t            for (var i = 0; i < b.length; i++) ret.push(b[i]);\r\n\t            return ret;\r\n\t          }\r\n\t        }\r\n\t        return a + b;\r\n\t      },\r\n\t      in: function (a, b, n) {\r\n\t        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;\r\n\t        return n ? !r : r;\r\n\t      },\r\n\t      multiply: function (a, b) {\r\n\t        // TODO: non-sequence operand must be an integer\r\n\t        if ( typeof a === 'object' ) {\r\n\t          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {\r\n\t            var ret;\r\n\t            if (a._type === 'list') ret = new pythonRuntime.objects.list();\r\n\t            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\r\n\t            if (ret) {\r\n\t              for (var i = 0; i < b; i++)\r\n\t                for (var j = 0; j < a.length; j++) ret.push(a[j]);\r\n\t              return ret;\r\n\t            }\r\n\t          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {\r\n\t            var ret;\r\n\t            if (b._type === 'list') ret = new pythonRuntime.objects.list();\r\n\t            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();\r\n\t            if (ret) {\r\n\t              for (var i = 0; i < a; i++)\r\n\t                for (var j = 0; j < b.length; j++) ret.push(b[j]);\r\n\t              return ret;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t        return a * b;\r\n\t      },\r\n\t      subscriptIndex: function (o, i) {\r\n\t        if ( i >= 0 ) return i;\r\n\t        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;\r\n\t        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;\r\n\t        if ( typeof o === \"string\" ) return o.length + i;\r\n\t        return i;\r\n\t      }\r\n\t    },\r\n\r\n\t    objects: {\r\n\t      dict: function () {\r\n\t        var obj = new PythonDict();\r\n\t        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];\r\n\t        return obj;\r\n\t      },\r\n\t      list: function () {\r\n\t        var arr = [];\r\n\t        arr.push.apply(arr, arguments);\r\n\t        pythonRuntime.utils.convertToList(arr);\r\n\t        return arr;\r\n\t      },\r\n\t      tuple: function () {\r\n\t        var arr = [];\r\n\t        arr.push.apply(arr, arguments);\r\n\t        Object.defineProperty(arr, \"_type\",\r\n\t        {\r\n\t          get: function () { return 'tuple'; },\r\n\t          enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"_isPython\",\r\n\t        {\r\n\t          get: function () { return true; },\r\n\t          enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"count\",\r\n\t        {\r\n\t          value: function (x) {\r\n\t            var c = 0;\r\n\t            for (var i = 0; i < this.length; i++)\r\n\t              if (this[i] === x) c++;\r\n\t            return c;\r\n\t          },\r\n\t          enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"equals\",\r\n\t        {\r\n\t          value: function (x) {\r\n\t            try {\r\n\t              if (this.length !== x.length) return false;\r\n\t              for (var i = 0; i < this.length; i++) {\r\n\t                if (this[i].hasOwnProperty(\"equals\")) {\r\n\t                  if (!this[i].equals(x[i])) return false;\r\n\t                } else if (this[i] !== x[i]) return false;\r\n\t              }\r\n\t              return true;\r\n\t            }\r\n\t            catch (e) { }\r\n\t            return false;\r\n\t          },\r\n\t          enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"index\",\r\n\t        {\r\n\t          value: function (x) {\r\n\t            return this.indexOf(x);\r\n\t          },\r\n\t          enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"indexOf\",\r\n\t        {\r\n\t          value: function (x, fromIndex) {\r\n\t            try {\r\n\t              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\r\n\t                if (this[i].hasOwnProperty(\"equals\")) {\r\n\t                  if (this[i].equals(x)) return i;\r\n\t                } else if (this[i] === x) return i;\r\n\t              }\r\n\t            }\r\n\t            catch (e) { }\r\n\t            return -1;\r\n\t          },\r\n\t          enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"_pySlice\",\r\n\t        {\r\n\t          value: function (start, end, step) { \r\n\t            return pythonRuntime.internal.slice(this, start, end, step);\r\n\t          },\r\n\t            enumerable: false\r\n\t        });\r\n\t        Object.defineProperty(arr, \"toString\",\r\n\t        {\r\n\t          value: function () {\r\n\t            var s = '(' + this.join(', ');\r\n\t            if (this.length === 1) s += ',';\r\n\t            s += ')';\r\n\t            return s;\r\n\t          },\r\n\t          enumerable: false\r\n\t        });\r\n\t        return arr;\r\n\t      }\r\n\t    },\r\n\r\n\t    // Python built-in functions\r\n\r\n\t    functions: {\r\n\t      abs: function(x) {\r\n\t        return Math.abs(x);\r\n\t      },\r\n\t      all: function(iterable) {\r\n\t        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;\r\n\t        return true;\r\n\t      },\r\n\t      any: function(iterable) {\r\n\t        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;\r\n\t        return false;\r\n\t      },\r\n\t      ascii: function(obj) {\r\n\t        var s = pythonRuntime.functions.repr(obj),\r\n\t            asc = \"\",\r\n\t            code;\r\n\t        for (var i = 0; i < s.length; i++) {\r\n\t          code = s.charCodeAt(i);\r\n\t          if (code <= 127) asc += s[i];\r\n\t          else if (code <= 0xFF) asc += \"\\\\x\" + code.toString(16);\r\n\t          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars\r\n\t            // if (i+1 >= s.length) throw \"High surrogate not followed by low surrogate\"; // Is this needed?\r\n\t            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;\r\n\t            asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\r\n\t          } else if (code <= 0xFFFF) asc += \"\\\\u\" + (\"0\"+code.toString(16)).slice(-4);\r\n\t          else if (code <= 0x10FFFF) asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\r\n\t          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place\r\n\t        }\r\n\t        return asc;\r\n\t      },\r\n\t      bool: function(x) {\r\n\t        return !(x === undefined || // No argument\r\n\t                 x === null || // None\r\n\t                 x === false || // False\r\n\t                 x === 0 || // Zero\r\n\t                 x.length === 0 || // Empty Sequence\r\n\t                 // TODO: Empty Mapping, needs more support for python mappings first\r\n\t                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined\r\n\t                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined\r\n\t      },\r\n\t      chr: function(i) {\r\n\t        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111\r\n\t      },\r\n\t      divmod: function(a, b) {\r\n\t        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);\r\n\t      },\r\n\t      enumerate: function(iterable, start) {\r\n\t        start = start || 0;\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));\r\n\t        return ret;\r\n\t      },\r\n\t      filter: function(fn, iterable) {\r\n\t        fn = fn || function () { return true; };\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);\r\n\t        return ret;\r\n\t      },\r\n\t      float: function(x) {\r\n\t        if (x === undefined) return 0.0;\r\n\t        else if (typeof x == \"string\") { // TODO: Fix type check\r\n\t          x = x.trim().toLowerCase();\r\n\t          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]===\"-\"?-1:1);\r\n\t          else if ((/^nan$/i).exec(x) !== null) return NaN;\r\n\t          else return parseFloat(x);\r\n\t        } else if (typeof x == \"number\") { // TODO: Fix type check\r\n\t          return x; // TODO: Get python types working right so we can return an actual float\r\n\t        } else {\r\n\t          if (x.__float__ !== undefined) return x.__float__();\r\n\t          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'\r\n\t        }\r\n\t      },\r\n\t      hex: function(x) {\r\n\t        return x.toString(16);\r\n\t      },\r\n\t      int: function (s) {\r\n\t        return parseInt(s);\r\n\t      },\r\n\t      len: function (o) {\r\n\t        return o.length;\r\n\t      },\r\n\t      list: function (iterable) {\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        if ( arguments.length == 0 ) return ret;\r\n\t        if ( arguments.length > 1 ) throw new TypeError('list() takes at most 1 argument (' + arguments.length + ' given)');\r\n\t        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);\r\n\t        else for (var i in iterable) ret.push(i);\r\n\t        return ret;\r\n\t      },\r\n\t      map: function(fn, iterable) {\r\n\t        // TODO: support additional iterables passed\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        for (var i in iterable) ret.push(fn(iterable[i]));\r\n\t        return ret;\r\n\t      },\r\n\t      max: function(arg1, arg2) {\r\n\t        // TODO: support optional keyword-only arguments\r\n\t        // TODO: empty iterable raises Python ValueError\r\n\t        if (!arg2) { // iterable\r\n\t          var max = null;\r\n\t          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];\r\n\t          return max;\r\n\t        } else return arg1 >= arg2 ? arg1 : arg2;\r\n\t      },\r\n\t      min: function(arg1, arg2) {\r\n\t        // TODO: support optional keyword-only arguments\r\n\t        // TODO: empty iterable raises Python ValueError\r\n\t        if (!arg2) { // iterable\r\n\t          var max = null;\r\n\t          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];\r\n\t          return max;\r\n\t        } else return arg1 <= arg2 ? arg1 : arg2;\r\n\t      },\r\n\t      oct: function(x) {\r\n\t        return x.toString(8);\r\n\t      },\r\n\t      ord: function(c) {\r\n\t        return c.charCodeAt(0);\r\n\t      },\r\n\t      pow: function(x, y, z) {\r\n\t        return z ? Math.pow(x, y) % z : Math.pow(x, y);\r\n\t      },\r\n\t      print: function () {\r\n\t        var s = \"\";\r\n\t        for (var i = 0; i < arguments.length; i++)\r\n\t          s += i === 0 ? arguments[i] : \" \" + arguments[i];\r\n\t        console.log(s);\r\n\t      },\r\n\t      range: function (start, stop, step) {\r\n\t        if (stop === undefined) {\r\n\t          stop = start;\r\n\t          start = 0;\r\n\t          step = 1;\r\n\t        }\r\n\t        else if (step === undefined) step = 1;\r\n\t        var len = ~~((stop - start) / step); //~~ is a fast floor\r\n\t        if ( len < 0 ) return pythonRuntime.utils.convertToList([]);\r\n\t        var r = new Array(len);\r\n\t        var element = 0;\r\n\r\n\t        var i = start;\r\n\t        while (i < stop && step > 0 || i > stop && step < 0) {\r\n\t          r[element++] = i;\r\n\t          i += step;\r\n\t        }\r\n\r\n\t        pythonRuntime.utils.convertToList(r);\r\n\t        return r;\r\n\t      },\r\n\t      repr: function (obj) {\r\n\t        if (typeof obj === 'string') return \"'\" + obj + \"'\"; // TODO: Patch until typesystem comes up.\r\n\t        if (obj.__repr__ !== undefined) return obj.__repr__();\r\n\t        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {\r\n\t          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';\r\n\t        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code\r\n\t      },\r\n\t      reversed: function (seq) {\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        for (var i in seq) ret.push(seq[i]);\r\n\t        return ret.reverse();\r\n\t      },\r\n\t      round: function (num, ndigits) {\r\n\t        if (ndigits) {\r\n\t          var scale = Math.pow(10, ndigits);\r\n\t          return Math.round(num * scale) / scale;\r\n\t        }\r\n\t        return Math.round(num);\r\n\t      },\r\n\t      sorted: function (iterable, key, reverse) {\r\n\t        var ret = new pythonRuntime.objects.list();\r\n\t        for (var i in iterable) ret.push(iterable[i]);\r\n\t        if(key) ret.sort(key); else ret.sort();\r\n\t        if (reverse) ret.reverse();\r\n\t        return ret;\r\n\t      },\r\n\t      str: function (obj) {\r\n\t        return obj.toString();\r\n\t      },\r\n\t      sum: function (iterable, start) {\r\n\t        // TODO: start can't be a string\r\n\t        var ret = start || 0;\r\n\t        for (var i in iterable) ret += iterable[i];\r\n\t        return ret;\r\n\t      },\r\n\t      tuple: function (iterable) {\r\n\t        var ret = new pythonRuntime.objects.tuple();\r\n\t        for (var i in iterable) ret.push(iterable[i]);\r\n\t        return ret;\r\n\t      }\r\n\t    },\r\n\r\n\t    // Python imports\r\n\t    // TODO: from x import y, z\r\n\r\n\t    imports: {\r\n\t      random: {\r\n\t        random: function () { return Math.random(); }\r\n\t      }\r\n\t    }\r\n\t  };\r\n\r\n\t  function PythonDict() {\r\n\r\n\t  }\r\n\r\n\t  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);\r\n\t  return pythonRuntime;\r\n\t}));\r\n\r\n\r\n\r\n/***/ }\r\n/******/ ])\r\n});\r\n;\r\n},{}],45:[function(require,module,exports){\r\n/*!\r\n * string_score.js: String Scoring Algorithm 0.1.22\r\n *\r\n * http://joshaven.com/string_score\r\n * https://github.com/joshaven/string_score\r\n *\r\n * Copyright (C) 2009-2014 Joshaven Potter <yourtech@gmail.com>\r\n * Special thanks to all of the contributors listed here https://github.com/joshaven/string_score\r\n * MIT License: http://opensource.org/licenses/MIT\r\n *\r\n * Date: Tue Mar 1 2011\r\n * Updated: Tue Mar 10 2015\r\n*/\r\n\r\n/*jslint nomen:true, white:true, browser:true,devel:true */\r\n\r\n/**\r\n * Scores a string against another string.\r\n *    'Hello World'.score('he');         //=> 0.5931818181818181\r\n *    'Hello World'.score('Hello');    //=> 0.7318181818181818\r\n */\r\nString.prototype.score = function (word, fuzziness) {\r\n  'use strict';\r\n\r\n  // If the string is equal to the word, perfect match.\r\n  if (this === word) { return 1; }\r\n\r\n  //if it's not a perfect match and is empty return 0\r\n  if (word === \"\") { return 0; }\r\n\r\n  var runningScore = 0,\r\n      charScore,\r\n      finalScore,\r\n      string = this,\r\n      lString = string.toLowerCase(),\r\n      strLength = string.length,\r\n      lWord = word.toLowerCase(),\r\n      wordLength = word.length,\r\n      idxOf,\r\n      startAt = 0,\r\n      fuzzies = 1,\r\n      fuzzyFactor,\r\n      i;\r\n\r\n  // Cache fuzzyFactor for speed increase\r\n  if (fuzziness) { fuzzyFactor = 1 - fuzziness; }\r\n\r\n  // Walk through word and add up scores.\r\n  // Code duplication occurs to prevent checking fuzziness inside for loop\r\n  if (fuzziness) {\r\n    for (i = 0; i < wordLength; i+=1) {\r\n\r\n      // Find next first case-insensitive match of a character.\r\n      idxOf = lString.indexOf(lWord[i], startAt);\r\n\r\n      if (idxOf === -1) {\r\n        fuzzies += fuzzyFactor;\r\n      } else {\r\n        if (startAt === idxOf) {\r\n          // Consecutive letter & start-of-string Bonus\r\n          charScore = 0.7;\r\n        } else {\r\n          charScore = 0.1;\r\n\r\n          // Acronym Bonus\r\n          // Weighing Logic: Typing the first character of an acronym is as if you\r\n          // preceded it with two perfect character matches.\r\n          if (string[idxOf - 1] === ' ') { charScore += 0.8; }\r\n        }\r\n\r\n        // Same case bonus.\r\n        if (string[idxOf] === word[i]) { charScore += 0.1; }\r\n\r\n        // Update scores and startAt position for next round of indexOf\r\n        runningScore += charScore;\r\n        startAt = idxOf + 1;\r\n      }\r\n    }\r\n  } else {\r\n    for (i = 0; i < wordLength; i+=1) {\r\n      idxOf = lString.indexOf(lWord[i], startAt);\r\n      if (-1 === idxOf) { return 0; }\r\n\r\n      if (startAt === idxOf) {\r\n        charScore = 0.7;\r\n      } else {\r\n        charScore = 0.1;\r\n        if (string[idxOf - 1] === ' ') { charScore += 0.8; }\r\n      }\r\n      if (string[idxOf] === word[i]) { charScore += 0.1; }\r\n      runningScore += charScore;\r\n      startAt = idxOf + 1;\r\n    }\r\n  }\r\n\r\n  // Reduce penalty for longer strings.\r\n  finalScore = 0.5 * (runningScore / strLength    + runningScore / wordLength) / fuzzies;\r\n\r\n  if ((lWord[0] === lString[0]) && (finalScore < 0.85)) {\r\n    finalScore += 0.15;\r\n  }\r\n\r\n  return finalScore;\r\n};\r\n\r\n},{}],46:[function(require,module,exports){\r\n/*\r\nAuthor: Geraint Luff and others\r\nYear: 2013\r\n\r\nThis code is released into the \"public domain\" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.\r\n\r\nIf you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.\r\n*/\r\n(function (global, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory);\r\n  } else if (typeof module !== 'undefined' && module.exports){\r\n    // CommonJS. Define export.\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals\r\n    global.tv4 = factory();\r\n  }\r\n}(this, function () {\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys\r\nif (!Object.keys) {\r\n\tObject.keys = (function () {\r\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n\t\t\thasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\r\n\t\t\tdontEnums = [\r\n\t\t\t\t'toString',\r\n\t\t\t\t'toLocaleString',\r\n\t\t\t\t'valueOf',\r\n\t\t\t\t'hasOwnProperty',\r\n\t\t\t\t'isPrototypeOf',\r\n\t\t\t\t'propertyIsEnumerable',\r\n\t\t\t\t'constructor'\r\n\t\t\t],\r\n\t\t\tdontEnumsLength = dontEnums.length;\r\n\r\n\t\treturn function (obj) {\r\n\t\t\tif (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {\r\n\t\t\t\tthrow new TypeError('Object.keys called on non-object');\r\n\t\t\t}\r\n\r\n\t\t\tvar result = [];\r\n\r\n\t\t\tfor (var prop in obj) {\r\n\t\t\t\tif (hasOwnProperty.call(obj, prop)) {\r\n\t\t\t\t\tresult.push(prop);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDontEnumBug) {\r\n\t\t\t\tfor (var i=0; i < dontEnumsLength; i++) {\r\n\t\t\t\t\tif (hasOwnProperty.call(obj, dontEnums[i])) {\r\n\t\t\t\t\t\tresult.push(dontEnums[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t})();\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\nif (!Object.create) {\r\n\tObject.create = (function(){\r\n\t\tfunction F(){}\r\n\r\n\t\treturn function(o){\r\n\t\t\tif (arguments.length !== 1) {\r\n\t\t\t\tthrow new Error('Object.create implementation only accepts one parameter.');\r\n\t\t\t}\r\n\t\t\tF.prototype = o;\r\n\t\t\treturn new F();\r\n\t\t};\r\n\t})();\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray\r\nif(!Array.isArray) {\r\n\tArray.isArray = function (vArg) {\r\n\t\treturn Object.prototype.toString.call(vArg) === \"[object Array]\";\r\n\t};\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf\r\nif (!Array.prototype.indexOf) {\r\n\tArray.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\r\n\t\tif (this === null) {\r\n\t\t\tthrow new TypeError();\r\n\t\t}\r\n\t\tvar t = Object(this);\r\n\t\tvar len = t.length >>> 0;\r\n\r\n\t\tif (len === 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tvar n = 0;\r\n\t\tif (arguments.length > 1) {\r\n\t\t\tn = Number(arguments[1]);\r\n\t\t\tif (n !== n) { // shortcut for verifying if it's NaN\r\n\t\t\t\tn = 0;\r\n\t\t\t} else if (n !== 0 && n !== Infinity && n !== -Infinity) {\r\n\t\t\t\tn = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (n >= len) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tvar k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\r\n\t\tfor (; k < len; k++) {\r\n\t\t\tif (k in t && t[k] === searchElement) {\r\n\t\t\t\treturn k;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n}\r\n\r\n// Grungey Object.isFrozen hack\r\nif (!Object.isFrozen) {\r\n\tObject.isFrozen = function (obj) {\r\n\t\tvar key = \"tv4_test_frozen_key\";\r\n\t\twhile (obj.hasOwnProperty(key)) {\r\n\t\t\tkey += Math.random();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tobj[key] = true;\r\n\t\t\tdelete obj[key];\r\n\t\t\treturn false;\r\n\t\t} catch (e) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n}\r\nvar ValidatorContext = function ValidatorContext(parent, collectMultiple, errorMessages, checkRecursive, trackUnknownProperties) {\r\n\tthis.missing = [];\r\n\tthis.missingMap = {};\r\n\tthis.formatValidators = parent ? Object.create(parent.formatValidators) : {};\r\n\tthis.schemas = parent ? Object.create(parent.schemas) : {};\r\n\tthis.collectMultiple = collectMultiple;\r\n\tthis.errors = [];\r\n\tthis.handleError = collectMultiple ? this.collectError : this.returnError;\r\n\tif (checkRecursive) {\r\n\t\tthis.checkRecursive = true;\r\n\t\tthis.scanned = [];\r\n\t\tthis.scannedFrozen = [];\r\n\t\tthis.scannedFrozenSchemas = [];\r\n\t\tthis.scannedFrozenValidationErrors = [];\r\n\t\tthis.validatedSchemasKey = 'tv4_validation_id';\r\n\t\tthis.validationErrorsKey = 'tv4_validation_errors_id';\r\n\t}\r\n\tif (trackUnknownProperties) {\r\n\t\tthis.trackUnknownProperties = true;\r\n\t\tthis.knownPropertyPaths = {};\r\n\t\tthis.unknownPropertyPaths = {};\r\n\t}\r\n\tthis.errorMessages = errorMessages;\r\n\tthis.definedKeywords = {};\r\n\tif (parent) {\r\n\t\tfor (var key in parent.definedKeywords) {\r\n\t\t\tthis.definedKeywords[key] = parent.definedKeywords[key].slice(0);\r\n\t\t}\r\n\t}\r\n};\r\nValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {\r\n\tthis.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\r\n\tthis.definedKeywords[keyword].push(keywordFunction);\r\n};\r\nValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors) {\r\n\tvar messageTemplate = this.errorMessages[code] || ErrorMessagesDefault[code];\r\n\tif (typeof messageTemplate !== 'string') {\r\n\t\treturn new ValidationError(code, \"Unknown error code \" + code + \": \" + JSON.stringify(messageParams), dataPath, schemaPath, subErrors);\r\n\t}\r\n\t// Adapted from Crockford's supplant()\r\n\tvar message = messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\r\n\t\tvar subValue = messageParams[varName];\r\n\t\treturn typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;\r\n\t});\r\n\treturn new ValidationError(code, message, dataPath, schemaPath, subErrors);\r\n};\r\nValidatorContext.prototype.returnError = function (error) {\r\n\treturn error;\r\n};\r\nValidatorContext.prototype.collectError = function (error) {\r\n\tif (error) {\r\n\t\tthis.errors.push(error);\r\n\t}\r\n\treturn null;\r\n};\r\nValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {\r\n\tfor (var i = startIndex; i < this.errors.length; i++) {\r\n\t\tthis.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\r\n\t}\r\n\treturn this;\r\n};\r\nValidatorContext.prototype.banUnknownProperties = function () {\r\n\tfor (var unknownPath in this.unknownPropertyPaths) {\r\n\t\tvar error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, \"\");\r\n\t\tvar result = this.handleError(error);\r\n\t\tif (result) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.addFormat = function (format, validator) {\r\n\tif (typeof format === 'object') {\r\n\t\tfor (var key in format) {\r\n\t\t\tthis.addFormat(key, format[key]);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tthis.formatValidators[format] = validator;\r\n};\r\nValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {\r\n\tif (schema['$ref'] !== undefined) {\r\n\t\turlHistory = urlHistory || {};\r\n\t\tif (urlHistory[schema['$ref']]) {\r\n\t\t\treturn this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(', ')}, '', '');\r\n\t\t}\r\n\t\turlHistory[schema['$ref']] = true;\r\n\t\tschema = this.getSchema(schema['$ref'], urlHistory);\r\n\t}\r\n\treturn schema;\r\n};\r\nValidatorContext.prototype.getSchema = function (url, urlHistory) {\r\n\tvar schema;\r\n\tif (this.schemas[url] !== undefined) {\r\n\t\tschema = this.schemas[url];\r\n\t\treturn this.resolveRefs(schema, urlHistory);\r\n\t}\r\n\tvar baseUrl = url;\r\n\tvar fragment = \"\";\r\n\tif (url.indexOf('#') !== -1) {\r\n\t\tfragment = url.substring(url.indexOf(\"#\") + 1);\r\n\t\tbaseUrl = url.substring(0, url.indexOf(\"#\"));\r\n\t}\r\n\tif (typeof this.schemas[baseUrl] === 'object') {\r\n\t\tschema = this.schemas[baseUrl];\r\n\t\tvar pointerPath = decodeURIComponent(fragment);\r\n\t\tif (pointerPath === \"\") {\r\n\t\t\treturn this.resolveRefs(schema, urlHistory);\r\n\t\t} else if (pointerPath.charAt(0) !== \"/\") {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar parts = pointerPath.split(\"/\").slice(1);\r\n\t\tfor (var i = 0; i < parts.length; i++) {\r\n\t\t\tvar component = parts[i].replace(/~1/g, \"/\").replace(/~0/g, \"~\");\r\n\t\t\tif (schema[component] === undefined) {\r\n\t\t\t\tschema = undefined;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tschema = schema[component];\r\n\t\t}\r\n\t\tif (schema !== undefined) {\r\n\t\t\treturn this.resolveRefs(schema, urlHistory);\r\n\t\t}\r\n\t}\r\n\tif (this.missing[baseUrl] === undefined) {\r\n\t\tthis.missing.push(baseUrl);\r\n\t\tthis.missing[baseUrl] = baseUrl;\r\n\t\tthis.missingMap[baseUrl] = baseUrl;\r\n\t}\r\n};\r\nValidatorContext.prototype.searchSchemas = function (schema, url) {\r\n\tif (schema && typeof schema === \"object\") {\r\n\t\tif (typeof schema.id === \"string\") {\r\n\t\t\tif (isTrustedUrl(url, schema.id)) {\r\n\t\t\t\tif (this.schemas[schema.id] === undefined) {\r\n\t\t\t\t\tthis.schemas[schema.id] = schema;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var key in schema) {\r\n\t\t\tif (key !== \"enum\") {\r\n\t\t\t\tif (typeof schema[key] === \"object\") {\r\n\t\t\t\t\tthis.searchSchemas(schema[key], url);\r\n\t\t\t\t} else if (key === \"$ref\") {\r\n\t\t\t\t\tvar uri = getDocumentUri(schema[key]);\r\n\t\t\t\t\tif (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\r\n\t\t\t\t\t\tthis.missingMap[uri] = uri;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\nValidatorContext.prototype.addSchema = function (url, schema) {\r\n\t//overload\r\n\tif (typeof url !== 'string' || typeof schema === 'undefined') {\r\n\t\tif (typeof url === 'object' && typeof url.id === 'string') {\r\n\t\t\tschema = url;\r\n\t\t\turl = schema.id;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (url = getDocumentUri(url) + \"#\") {\r\n\t\t// Remove empty fragment\r\n\t\turl = getDocumentUri(url);\r\n\t}\r\n\tthis.schemas[url] = schema;\r\n\tdelete this.missingMap[url];\r\n\tnormSchema(schema, url);\r\n\tthis.searchSchemas(schema, url);\r\n};\r\n\r\nValidatorContext.prototype.getSchemaMap = function () {\r\n\tvar map = {};\r\n\tfor (var key in this.schemas) {\r\n\t\tmap[key] = this.schemas[key];\r\n\t}\r\n\treturn map;\r\n};\r\n\r\nValidatorContext.prototype.getSchemaUris = function (filterRegExp) {\r\n\tvar list = [];\r\n\tfor (var key in this.schemas) {\r\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\r\n\t\t\tlist.push(key);\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n};\r\n\r\nValidatorContext.prototype.getMissingUris = function (filterRegExp) {\r\n\tvar list = [];\r\n\tfor (var key in this.missingMap) {\r\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\r\n\t\t\tlist.push(key);\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n};\r\n\r\nValidatorContext.prototype.dropSchemas = function () {\r\n\tthis.schemas = {};\r\n\tthis.reset();\r\n};\r\nValidatorContext.prototype.reset = function () {\r\n\tthis.missing = [];\r\n\tthis.missingMap = {};\r\n\tthis.errors = [];\r\n};\r\n\r\nValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\r\n\tvar topLevel;\r\n\tschema = this.resolveRefs(schema);\r\n\tif (!schema) {\r\n\t\treturn null;\r\n\t} else if (schema instanceof ValidationError) {\r\n\t\tthis.errors.push(schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tvar startErrorCount = this.errors.length;\r\n\tvar frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;\r\n\tif (this.checkRecursive && data && typeof data === 'object') {\r\n\t\ttopLevel = !this.scanned.length;\r\n\t\tif (data[this.validatedSchemasKey]) {\r\n\t\t\tvar schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\r\n\t\t\tif (schemaIndex !== -1) {\r\n\t\t\t\tthis.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Object.isFrozen(data)) {\r\n\t\t\tfrozenIndex = this.scannedFrozen.indexOf(data);\r\n\t\t\tif (frozenIndex !== -1) {\r\n\t\t\t\tvar frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\r\n\t\t\t\tif (frozenSchemaIndex !== -1) {\r\n\t\t\t\t\tthis.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.scanned.push(data);\r\n\t\tif (Object.isFrozen(data)) {\r\n\t\t\tif (frozenIndex === -1) {\r\n\t\t\t\tfrozenIndex = this.scannedFrozen.length;\r\n\t\t\t\tthis.scannedFrozen.push(data);\r\n\t\t\t\tthis.scannedFrozenSchemas.push([]);\r\n\t\t\t}\r\n\t\t\tscannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\r\n\t\t\tthis.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\r\n\t\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\r\n\t\t} else {\r\n\t\t\tif (!data[this.validatedSchemasKey]) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tObject.defineProperty(data, this.validatedSchemasKey, {\r\n\t\t\t\t\t\tvalue: [],\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\tObject.defineProperty(data, this.validationErrorsKey, {\r\n\t\t\t\t\t\tvalue: [],\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t//IE 7/8 workaround\r\n\t\t\t\t\tdata[this.validatedSchemasKey] = [];\r\n\t\t\t\t\tdata[this.validationErrorsKey] = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tscannedSchemasIndex = data[this.validatedSchemasKey].length;\r\n\t\t\tdata[this.validatedSchemasKey][scannedSchemasIndex] = schema;\r\n\t\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = [];\r\n\t\t}\r\n\t}\r\n\r\n\tvar errorCount = this.errors.length;\r\n\tvar error = this.validateBasic(data, schema, dataPointerPath)\r\n\t\t|| this.validateNumeric(data, schema, dataPointerPath)\r\n\t\t|| this.validateString(data, schema, dataPointerPath)\r\n\t\t|| this.validateArray(data, schema, dataPointerPath)\r\n\t\t|| this.validateObject(data, schema, dataPointerPath)\r\n\t\t|| this.validateCombinations(data, schema, dataPointerPath)\r\n\t\t|| this.validateFormat(data, schema, dataPointerPath)\r\n\t\t|| this.validateDefinedKeywords(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n\r\n\tif (topLevel) {\r\n\t\twhile (this.scanned.length) {\r\n\t\t\tvar item = this.scanned.pop();\r\n\t\t\tdelete item[this.validatedSchemasKey];\r\n\t\t}\r\n\t\tthis.scannedFrozen = [];\r\n\t\tthis.scannedFrozenSchemas = [];\r\n\t}\r\n\r\n\tif (error || errorCount !== this.errors.length) {\r\n\t\twhile ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {\r\n\t\t\tvar dataPart = (dataPathParts && dataPathParts.length) ? \"\" + dataPathParts.pop() : null;\r\n\t\t\tvar schemaPart = (schemaPathParts && schemaPathParts.length) ? \"\" + schemaPathParts.pop() : null;\r\n\t\t\tif (error) {\r\n\t\t\t\terror = error.prefixWith(dataPart, schemaPart);\r\n\t\t\t}\r\n\t\t\tthis.prefixErrors(errorCount, dataPart, schemaPart);\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (scannedFrozenSchemaIndex !== null) {\r\n\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\r\n\t} else if (scannedSchemasIndex !== null) {\r\n\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\r\n\t}\r\n\r\n\treturn this.handleError(error);\r\n};\r\nValidatorContext.prototype.validateFormat = function (data, schema) {\r\n\tif (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {\r\n\t\treturn null;\r\n\t}\r\n\tvar errorMessage = this.formatValidators[schema.format].call(null, data, schema);\r\n\tif (typeof errorMessage === 'string' || typeof errorMessage === 'number') {\r\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}).prefixWith(null, \"format\");\r\n\t} else if (errorMessage && typeof errorMessage === 'object') {\r\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || \"?\"}, errorMessage.dataPath || null, errorMessage.schemaPath || \"/format\");\r\n\t}\r\n\treturn null;\r\n};\r\nValidatorContext.prototype.validateDefinedKeywords = function (data, schema) {\r\n\tfor (var key in this.definedKeywords) {\r\n\t\tif (typeof schema[key] === 'undefined') {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar validationFunctions = this.definedKeywords[key];\r\n\t\tfor (var i = 0; i < validationFunctions.length; i++) {\r\n\t\t\tvar func = validationFunctions[i];\r\n\t\t\tvar result = func(data, schema[key], schema);\r\n\t\t\tif (typeof result === 'string' || typeof result === 'number') {\r\n\t\t\t\treturn this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}).prefixWith(null, \"format\");\r\n\t\t\t} else if (result && typeof result === 'object') {\r\n\t\t\t\tvar code = result.code || ErrorCodes.KEYWORD_CUSTOM;\r\n\t\t\t\tif (typeof code === 'string') {\r\n\t\t\t\t\tif (!ErrorCodes[code]) {\r\n\t\t\t\t\t\tthrow new Error('Undefined error code (use defineError): ' + code);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcode = ErrorCodes[code];\r\n\t\t\t\t}\r\n\t\t\t\tvar messageParams = (typeof result.message === 'object') ? result.message : {key: key, message: result.message || \"?\"};\r\n\t\t\t\tvar schemaPath = result.schemaPath ||( \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1'));\r\n\t\t\t\treturn this.createError(code, messageParams, result.dataPath || null, schemaPath);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nfunction recursiveCompare(A, B) {\r\n\tif (A === B) {\r\n\t\treturn true;\r\n\t}\r\n\tif (typeof A === \"object\" && typeof B === \"object\") {\r\n\t\tif (Array.isArray(A) !== Array.isArray(B)) {\r\n\t\t\treturn false;\r\n\t\t} else if (Array.isArray(A)) {\r\n\t\t\tif (A.length !== B.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (var i = 0; i < A.length; i++) {\r\n\t\t\t\tif (!recursiveCompare(A[i], B[i])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar key;\r\n\t\t\tfor (key in A) {\r\n\t\t\t\tif (B[key] === undefined && A[key] !== undefined) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (key in B) {\r\n\t\t\t\tif (A[key] === undefined && B[key] !== undefined) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (key in A) {\r\n\t\t\t\tif (!recursiveCompare(A[key], B[key])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {\r\n\tvar error;\r\n\tif (error = this.validateType(data, schema, dataPointerPath)) {\r\n\t\treturn error.prefixWith(null, \"type\");\r\n\t}\r\n\tif (error = this.validateEnum(data, schema, dataPointerPath)) {\r\n\t\treturn error.prefixWith(null, \"type\");\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateType = function validateType(data, schema) {\r\n\tif (schema.type === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar dataType = typeof data;\r\n\tif (data === null) {\r\n\t\tdataType = \"null\";\r\n\t} else if (Array.isArray(data)) {\r\n\t\tdataType = \"array\";\r\n\t}\r\n\tvar allowedTypes = schema.type;\r\n\tif (typeof allowedTypes !== \"object\") {\r\n\t\tallowedTypes = [allowedTypes];\r\n\t}\r\n\r\n\tfor (var i = 0; i < allowedTypes.length; i++) {\r\n\t\tvar type = allowedTypes[i];\r\n\t\tif (type === dataType || (type === \"integer\" && dataType === \"number\" && (data % 1 === 0))) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join(\"/\")});\r\n};\r\n\r\nValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {\r\n\tif (schema[\"enum\"] === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tfor (var i = 0; i < schema[\"enum\"].length; i++) {\r\n\t\tvar enumVal = schema[\"enum\"][i];\r\n\t\tif (recursiveCompare(data, enumVal)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== 'undefined') ? JSON.stringify(data) : data});\r\n};\r\n\r\nValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {\r\n\treturn this.validateMultipleOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateMinMax(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {\r\n\tvar multipleOf = schema.multipleOf || schema.divisibleBy;\r\n\tif (multipleOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tif (typeof data === \"number\") {\r\n\t\tif (data % multipleOf !== 0) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf});\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {\r\n\tif (typeof data !== \"number\") {\r\n\t\treturn null;\r\n\t}\r\n\tif (schema.minimum !== undefined) {\r\n\t\tif (data < schema.minimum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}).prefixWith(null, \"minimum\");\r\n\t\t}\r\n\t\tif (schema.exclusiveMinimum && data === schema.minimum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}).prefixWith(null, \"exclusiveMinimum\");\r\n\t\t}\r\n\t}\r\n\tif (schema.maximum !== undefined) {\r\n\t\tif (data > schema.maximum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}).prefixWith(null, \"maximum\");\r\n\t\t}\r\n\t\tif (schema.exclusiveMaximum && data === schema.maximum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}).prefixWith(null, \"exclusiveMaximum\");\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {\r\n\treturn this.validateStringLength(data, schema, dataPointerPath)\r\n\t\t|| this.validateStringPattern(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {\r\n\tif (typeof data !== \"string\") {\r\n\t\treturn null;\r\n\t}\r\n\tif (schema.minLength !== undefined) {\r\n\t\tif (data.length < schema.minLength) {\r\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}).prefixWith(null, \"minLength\");\r\n\t\t}\r\n\t}\r\n\tif (schema.maxLength !== undefined) {\r\n\t\tif (data.length > schema.maxLength) {\r\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}).prefixWith(null, \"maxLength\");\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {\r\n\tif (typeof data !== \"string\" || schema.pattern === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar regexp = new RegExp(schema.pattern);\r\n\tif (!regexp.test(data)) {\r\n\t\treturn this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}).prefixWith(null, \"pattern\");\r\n\t}\r\n\treturn null;\r\n};\r\nValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {\r\n\tif (!Array.isArray(data)) {\r\n\t\treturn null;\r\n\t}\r\n\treturn this.validateArrayLength(data, schema, dataPointerPath)\r\n\t\t|| this.validateArrayUniqueItems(data, schema, dataPointerPath)\r\n\t\t|| this.validateArrayItems(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {\r\n\tvar error;\r\n\tif (schema.minItems !== undefined) {\r\n\t\tif (data.length < schema.minItems) {\r\n\t\t\terror = (this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems})).prefixWith(null, \"minItems\");\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (schema.maxItems !== undefined) {\r\n\t\tif (data.length > schema.maxItems) {\r\n\t\t\terror = (this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems})).prefixWith(null, \"maxItems\");\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {\r\n\tif (schema.uniqueItems) {\r\n\t\tfor (var i = 0; i < data.length; i++) {\r\n\t\t\tfor (var j = i + 1; j < data.length; j++) {\r\n\t\t\t\tif (recursiveCompare(data[i], data[j])) {\r\n\t\t\t\t\tvar error = (this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j})).prefixWith(null, \"uniqueItems\");\r\n\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {\r\n\tif (schema.items === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar error, i;\r\n\tif (Array.isArray(schema.items)) {\r\n\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\tif (i < schema.items.length) {\r\n\t\t\t\tif (error = this.validateAll(data[i], schema.items[i], [i], [\"items\", i], dataPointerPath + \"/\" + i)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t} else if (schema.additionalItems !== undefined) {\r\n\t\t\t\tif (typeof schema.additionalItems === \"boolean\") {\r\n\t\t\t\t\tif (!schema.additionalItems) {\r\n\t\t\t\t\t\terror = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {})).prefixWith(\"\" + i, \"additionalItems\");\r\n\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (error = this.validateAll(data[i], schema.additionalItems, [i], [\"additionalItems\"], dataPointerPath + \"/\" + i)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\tif (error = this.validateAll(data[i], schema.items, [i], [\"items\"], dataPointerPath + \"/\" + i)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {\r\n\tif (typeof data !== \"object\" || data === null || Array.isArray(data)) {\r\n\t\treturn null;\r\n\t}\r\n\treturn this.validateObjectMinMaxProperties(data, schema, dataPointerPath)\r\n\t\t|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)\r\n\t\t|| this.validateObjectProperties(data, schema, dataPointerPath)\r\n\t\t|| this.validateObjectDependencies(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {\r\n\tvar keys = Object.keys(data);\r\n\tvar error;\r\n\tif (schema.minProperties !== undefined) {\r\n\t\tif (keys.length < schema.minProperties) {\r\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}).prefixWith(null, \"minProperties\");\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (schema.maxProperties !== undefined) {\r\n\t\tif (keys.length > schema.maxProperties) {\r\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}).prefixWith(null, \"maxProperties\");\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {\r\n\tif (schema.required !== undefined) {\r\n\t\tfor (var i = 0; i < schema.required.length; i++) {\r\n\t\t\tvar key = schema.required[i];\r\n\t\t\tif (data[key] === undefined) {\r\n\t\t\t\tvar error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}).prefixWith(null, \"\" + i).prefixWith(null, \"required\");\r\n\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {\r\n\tvar error;\r\n\tfor (var key in data) {\r\n\t\tvar keyPointerPath = dataPointerPath + \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\r\n\t\tvar foundMatch = false;\r\n\t\tif (schema.properties !== undefined && schema.properties[key] !== undefined) {\r\n\t\t\tfoundMatch = true;\r\n\t\t\tif (error = this.validateAll(data[key], schema.properties[key], [key], [\"properties\", key], keyPointerPath)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (schema.patternProperties !== undefined) {\r\n\t\t\tfor (var patternKey in schema.patternProperties) {\r\n\t\t\t\tvar regexp = new RegExp(patternKey);\r\n\t\t\t\tif (regexp.test(key)) {\r\n\t\t\t\t\tfoundMatch = true;\r\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], [\"patternProperties\", patternKey], keyPointerPath)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!foundMatch) {\r\n\t\t\tif (schema.additionalProperties !== undefined) {\r\n\t\t\t\tif (this.trackUnknownProperties) {\r\n\t\t\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\r\n\t\t\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof schema.additionalProperties === \"boolean\") {\r\n\t\t\t\t\tif (!schema.additionalProperties) {\r\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {}).prefixWith(key, \"additionalProperties\");\r\n\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.additionalProperties, [key], [\"additionalProperties\"], keyPointerPath)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\r\n\t\t\t\tthis.unknownPropertyPaths[keyPointerPath] = true;\r\n\t\t\t}\r\n\t\t} else if (this.trackUnknownProperties) {\r\n\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\r\n\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {\r\n\tvar error;\r\n\tif (schema.dependencies !== undefined) {\r\n\t\tfor (var depKey in schema.dependencies) {\r\n\t\t\tif (data[depKey] !== undefined) {\r\n\t\t\t\tvar dep = schema.dependencies[depKey];\r\n\t\t\t\tif (typeof dep === \"string\") {\r\n\t\t\t\t\tif (data[dep] === undefined) {\r\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\r\n\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (Array.isArray(dep)) {\r\n\t\t\t\t\tfor (var i = 0; i < dep.length; i++) {\r\n\t\t\t\t\t\tvar requiredKey = dep[i];\r\n\t\t\t\t\t\tif (data[requiredKey] === undefined) {\r\n\t\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}).prefixWith(null, \"\" + i).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\r\n\t\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (error = this.validateAll(data, dep, [], [\"dependencies\", depKey], dataPointerPath)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {\r\n\treturn this.validateAllOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateAnyOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateOneOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateNot(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {\r\n\tif (schema.allOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar error;\r\n\tfor (var i = 0; i < schema.allOf.length; i++) {\r\n\t\tvar subSchema = schema.allOf[i];\r\n\t\tif (error = this.validateAll(data, subSchema, [], [\"allOf\", i], dataPointerPath)) {\r\n\t\t\treturn error;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {\r\n\tif (schema.anyOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar errors = [];\r\n\tvar startErrorCount = this.errors.length;\r\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\r\n\tif (this.trackUnknownProperties) {\r\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\r\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\r\n\t}\r\n\tvar errorAtEnd = true;\r\n\tfor (var i = 0; i < schema.anyOf.length; i++) {\r\n\t\tif (this.trackUnknownProperties) {\r\n\t\t\tthis.unknownPropertyPaths = {};\r\n\t\t\tthis.knownPropertyPaths = {};\r\n\t\t}\r\n\t\tvar subSchema = schema.anyOf[i];\r\n\r\n\t\tvar errorCount = this.errors.length;\r\n\t\tvar error = this.validateAll(data, subSchema, [], [\"anyOf\", i], dataPointerPath);\r\n\r\n\t\tif (error === null && errorCount === this.errors.length) {\r\n\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\r\n\t\t\tif (this.trackUnknownProperties) {\r\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\r\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\r\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\r\n\t\t\t\t}\r\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\r\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\r\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// We need to continue looping so we catch all the property definitions, but we don't want to return an error\r\n\t\t\t\terrorAtEnd = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (error) {\r\n\t\t\terrors.push(error.prefixWith(null, \"\" + i).prefixWith(null, \"anyOf\"));\r\n\t\t}\r\n\t}\r\n\tif (this.trackUnknownProperties) {\r\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\r\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\r\n\t}\r\n\tif (errorAtEnd) {\r\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\r\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t\treturn this.createError(ErrorCodes.ANY_OF_MISSING, {}, \"\", \"/anyOf\", errors);\r\n\t}\r\n};\r\n\r\nValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {\r\n\tif (schema.oneOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar validIndex = null;\r\n\tvar errors = [];\r\n\tvar startErrorCount = this.errors.length;\r\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\r\n\tif (this.trackUnknownProperties) {\r\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\r\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\r\n\t}\r\n\tfor (var i = 0; i < schema.oneOf.length; i++) {\r\n\t\tif (this.trackUnknownProperties) {\r\n\t\t\tthis.unknownPropertyPaths = {};\r\n\t\t\tthis.knownPropertyPaths = {};\r\n\t\t}\r\n\t\tvar subSchema = schema.oneOf[i];\r\n\r\n\t\tvar errorCount = this.errors.length;\r\n\t\tvar error = this.validateAll(data, subSchema, [], [\"oneOf\", i], dataPointerPath);\r\n\r\n\t\tif (error === null && errorCount === this.errors.length) {\r\n\t\t\tif (validIndex === null) {\r\n\t\t\t\tvalidIndex = i;\r\n\t\t\t} else {\r\n\t\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t\t\t\treturn this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, \"\", \"/oneOf\");\r\n\t\t\t}\r\n\t\t\tif (this.trackUnknownProperties) {\r\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\r\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\r\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\r\n\t\t\t\t}\r\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\r\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\r\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (error) {\r\n\t\t\terrors.push(error.prefixWith(null, \"\" + i).prefixWith(null, \"oneOf\"));\r\n\t\t}\r\n\t}\r\n\tif (this.trackUnknownProperties) {\r\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\r\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\r\n\t}\r\n\tif (validIndex === null) {\r\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\r\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t\treturn this.createError(ErrorCodes.ONE_OF_MISSING, {}, \"\", \"/oneOf\", errors);\r\n\t} else {\r\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {\r\n\tif (schema.not === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar oldErrorCount = this.errors.length;\r\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\r\n\tif (this.trackUnknownProperties) {\r\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\r\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\r\n\t\tthis.unknownPropertyPaths = {};\r\n\t\tthis.knownPropertyPaths = {};\r\n\t}\r\n\tvar error = this.validateAll(data, schema.not, null, null, dataPointerPath);\r\n\tvar notErrors = this.errors.slice(oldErrorCount);\r\n\tthis.errors = this.errors.slice(0, oldErrorCount);\r\n\tif (this.trackUnknownProperties) {\r\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\r\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\r\n\t}\r\n\tif (error === null && notErrors.length === 0) {\r\n\t\treturn this.createError(ErrorCodes.NOT_PASSED, {}, \"\", \"/not\");\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\r\n//   -  released as public domain by author (\"Yaffle\") - see comments on gist\r\n\r\nfunction parseURI(url) {\r\n\tvar m = String(url).replace(/^\\s+|\\s+$/g, '').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\r\n\t// authority = '//' + user + ':' + pass '@' + hostname + ':' port\r\n\treturn (m ? {\r\n\t\thref     : m[0] || '',\r\n\t\tprotocol : m[1] || '',\r\n\t\tauthority: m[2] || '',\r\n\t\thost     : m[3] || '',\r\n\t\thostname : m[4] || '',\r\n\t\tport     : m[5] || '',\r\n\t\tpathname : m[6] || '',\r\n\t\tsearch   : m[7] || '',\r\n\t\thash     : m[8] || ''\r\n\t} : null);\r\n}\r\n\r\nfunction resolveUrl(base, href) {// RFC 3986\r\n\r\n\tfunction removeDotSegments(input) {\r\n\t\tvar output = [];\r\n\t\tinput.replace(/^(\\.\\.?(\\/|$))+/, '')\r\n\t\t\t.replace(/\\/(\\.(\\/|$))+/g, '/')\r\n\t\t\t.replace(/\\/\\.\\.$/, '/../')\r\n\t\t\t.replace(/\\/?[^\\/]*/g, function (p) {\r\n\t\t\t\tif (p === '/..') {\r\n\t\t\t\t\toutput.pop();\r\n\t\t\t\t} else {\r\n\t\t\t\t\toutput.push(p);\r\n\t\t\t\t}\r\n\t\t});\r\n\t\treturn output.join('').replace(/^\\//, input.charAt(0) === '/' ? '/' : '');\r\n\t}\r\n\r\n\thref = parseURI(href || '');\r\n\tbase = parseURI(base || '');\r\n\r\n\treturn !href || !base ? null : (href.protocol || base.protocol) +\r\n\t\t(href.protocol || href.authority ? href.authority : base.authority) +\r\n\t\tremoveDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +\r\n\t\t(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +\r\n\t\thref.hash;\r\n}\r\n\r\nfunction getDocumentUri(uri) {\r\n\treturn uri.split('#')[0];\r\n}\r\nfunction normSchema(schema, baseUri) {\r\n\tif (schema && typeof schema === \"object\") {\r\n\t\tif (baseUri === undefined) {\r\n\t\t\tbaseUri = schema.id;\r\n\t\t} else if (typeof schema.id === \"string\") {\r\n\t\t\tbaseUri = resolveUrl(baseUri, schema.id);\r\n\t\t\tschema.id = baseUri;\r\n\t\t}\r\n\t\tif (Array.isArray(schema)) {\r\n\t\t\tfor (var i = 0; i < schema.length; i++) {\r\n\t\t\t\tnormSchema(schema[i], baseUri);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (typeof schema['$ref'] === \"string\") {\r\n\t\t\t\tschema['$ref'] = resolveUrl(baseUri, schema['$ref']);\r\n\t\t\t}\r\n\t\t\tfor (var key in schema) {\r\n\t\t\t\tif (key !== \"enum\") {\r\n\t\t\t\t\tnormSchema(schema[key], baseUri);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar ErrorCodes = {\r\n\tINVALID_TYPE: 0,\r\n\tENUM_MISMATCH: 1,\r\n\tANY_OF_MISSING: 10,\r\n\tONE_OF_MISSING: 11,\r\n\tONE_OF_MULTIPLE: 12,\r\n\tNOT_PASSED: 13,\r\n\t// Numeric errors\r\n\tNUMBER_MULTIPLE_OF: 100,\r\n\tNUMBER_MINIMUM: 101,\r\n\tNUMBER_MINIMUM_EXCLUSIVE: 102,\r\n\tNUMBER_MAXIMUM: 103,\r\n\tNUMBER_MAXIMUM_EXCLUSIVE: 104,\r\n\t// String errors\r\n\tSTRING_LENGTH_SHORT: 200,\r\n\tSTRING_LENGTH_LONG: 201,\r\n\tSTRING_PATTERN: 202,\r\n\t// Object errors\r\n\tOBJECT_PROPERTIES_MINIMUM: 300,\r\n\tOBJECT_PROPERTIES_MAXIMUM: 301,\r\n\tOBJECT_REQUIRED: 302,\r\n\tOBJECT_ADDITIONAL_PROPERTIES: 303,\r\n\tOBJECT_DEPENDENCY_KEY: 304,\r\n\t// Array errors\r\n\tARRAY_LENGTH_SHORT: 400,\r\n\tARRAY_LENGTH_LONG: 401,\r\n\tARRAY_UNIQUE: 402,\r\n\tARRAY_ADDITIONAL_ITEMS: 403,\r\n\t// Custom/user-defined errors\r\n\tFORMAT_CUSTOM: 500,\r\n\tKEYWORD_CUSTOM: 501,\r\n\t// Schema structure\r\n\tCIRCULAR_REFERENCE: 600,\r\n\t// Non-standard validation options\r\n\tUNKNOWN_PROPERTY: 1000\r\n};\r\nvar ErrorCodeLookup = {};\r\nfor (var key in ErrorCodes) {\r\n\tErrorCodeLookup[ErrorCodes[key]] = key;\r\n}\r\nvar ErrorMessagesDefault = {\r\n\tINVALID_TYPE: \"invalid type: {type} (expected {expected})\",\r\n\tENUM_MISMATCH: \"No enum match for: {value}\",\r\n\tANY_OF_MISSING: \"Data does not match any schemas from \\\"anyOf\\\"\",\r\n\tONE_OF_MISSING: \"Data does not match any schemas from \\\"oneOf\\\"\",\r\n\tONE_OF_MULTIPLE: \"Data is valid against more than one schema from \\\"oneOf\\\": indices {index1} and {index2}\",\r\n\tNOT_PASSED: \"Data matches schema from \\\"not\\\"\",\r\n\t// Numeric errors\r\n\tNUMBER_MULTIPLE_OF: \"Value {value} is not a multiple of {multipleOf}\",\r\n\tNUMBER_MINIMUM: \"Value {value} is less than minimum {minimum}\",\r\n\tNUMBER_MINIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive minimum {minimum}\",\r\n\tNUMBER_MAXIMUM: \"Value {value} is greater than maximum {maximum}\",\r\n\tNUMBER_MAXIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive maximum {maximum}\",\r\n\t// String errors\r\n\tSTRING_LENGTH_SHORT: \"String is too short ({length} chars), minimum {minimum}\",\r\n\tSTRING_LENGTH_LONG: \"String is too long ({length} chars), maximum {maximum}\",\r\n\tSTRING_PATTERN: \"String does not match pattern: {pattern}\",\r\n\t// Object errors\r\n\tOBJECT_PROPERTIES_MINIMUM: \"Too few properties defined ({propertyCount}), minimum {minimum}\",\r\n\tOBJECT_PROPERTIES_MAXIMUM: \"Too many properties defined ({propertyCount}), maximum {maximum}\",\r\n\tOBJECT_REQUIRED: \"Missing required property: {key}\",\r\n\tOBJECT_ADDITIONAL_PROPERTIES: \"Additional properties not allowed\",\r\n\tOBJECT_DEPENDENCY_KEY: \"Dependency failed - key must exist: {missing} (due to key: {key})\",\r\n\t// Array errors\r\n\tARRAY_LENGTH_SHORT: \"Array is too short ({length}), minimum {minimum}\",\r\n\tARRAY_LENGTH_LONG: \"Array is too long ({length}), maximum {maximum}\",\r\n\tARRAY_UNIQUE: \"Array items are not unique (indices {match1} and {match2})\",\r\n\tARRAY_ADDITIONAL_ITEMS: \"Additional items not allowed\",\r\n\t// Format errors\r\n\tFORMAT_CUSTOM: \"Format validation failed ({message})\",\r\n\tKEYWORD_CUSTOM: \"Keyword failed: {key} ({message})\",\r\n\t// Schema structure\r\n\tCIRCULAR_REFERENCE: \"Circular $refs: {urls}\",\r\n\t// Non-standard validation options\r\n\tUNKNOWN_PROPERTY: \"Unknown property (not in schema)\"\r\n};\r\n\r\nfunction ValidationError(code, message, dataPath, schemaPath, subErrors) {\r\n\tError.call(this);\r\n\tif (code === undefined) {\r\n\t\tthrow new Error (\"No code supplied for error: \"+ message);\r\n\t}\r\n\tthis.message = message;\r\n\tthis.code = code;\r\n\tthis.dataPath = dataPath || \"\";\r\n\tthis.schemaPath = schemaPath || \"\";\r\n\tthis.subErrors = subErrors || null;\r\n\r\n\tvar err = new Error(this.message);\r\n\tthis.stack = err.stack || err.stacktrace;\r\n\tif (!this.stack) {\r\n\t\ttry {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\tcatch(err) {\r\n\t\t\tthis.stack = err.stack || err.stacktrace;\r\n\t\t}\r\n\t}\r\n}\r\nValidationError.prototype = Object.create(Error.prototype);\r\nValidationError.prototype.constructor = ValidationError;\r\nValidationError.prototype.name = 'ValidationError';\r\n\r\nValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {\r\n\tif (dataPrefix !== null) {\r\n\t\tdataPrefix = dataPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\r\n\t\tthis.dataPath = \"/\" + dataPrefix + this.dataPath;\r\n\t}\r\n\tif (schemaPrefix !== null) {\r\n\t\tschemaPrefix = schemaPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\r\n\t\tthis.schemaPath = \"/\" + schemaPrefix + this.schemaPath;\r\n\t}\r\n\tif (this.subErrors !== null) {\r\n\t\tfor (var i = 0; i < this.subErrors.length; i++) {\r\n\t\t\tthis.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\r\n\t\t}\r\n\t}\r\n\treturn this;\r\n};\r\n\r\nfunction isTrustedUrl(baseUrl, testUrl) {\r\n\tif(testUrl.substring(0, baseUrl.length) === baseUrl){\r\n\t\tvar remainder = testUrl.substring(baseUrl.length);\r\n\t\tif ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === \"/\")\r\n\t\t\t|| remainder.charAt(0) === \"#\"\r\n\t\t\t|| remainder.charAt(0) === \"?\") {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nvar languages = {};\r\nfunction createApi(language) {\r\n\tvar globalContext = new ValidatorContext();\r\n\tvar currentLanguage = language || 'en';\r\n\tvar api = {\r\n\t\taddFormat: function () {\r\n\t\t\tglobalContext.addFormat.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tlanguage: function (code) {\r\n\t\t\tif (!code) {\r\n\t\t\t\treturn currentLanguage;\r\n\t\t\t}\r\n\t\t\tif (!languages[code]) {\r\n\t\t\t\tcode = code.split('-')[0]; // fall back to base language\r\n\t\t\t}\r\n\t\t\tif (languages[code]) {\r\n\t\t\t\tcurrentLanguage = code;\r\n\t\t\t\treturn code; // so you can tell if fall-back has happened\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\taddLanguage: function (code, messageMap) {\r\n\t\t\tvar key;\r\n\t\t\tfor (key in ErrorCodes) {\r\n\t\t\t\tif (messageMap[key] && !messageMap[ErrorCodes[key]]) {\r\n\t\t\t\t\tmessageMap[ErrorCodes[key]] = messageMap[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar rootCode = code.split('-')[0];\r\n\t\t\tif (!languages[rootCode]) { // use for base language if not yet defined\r\n\t\t\t\tlanguages[code] = messageMap;\r\n\t\t\t\tlanguages[rootCode] = messageMap;\r\n\t\t\t} else {\r\n\t\t\t\tlanguages[code] = Object.create(languages[rootCode]);\r\n\t\t\t\tfor (key in messageMap) {\r\n\t\t\t\t\tif (typeof languages[rootCode][key] === 'undefined') {\r\n\t\t\t\t\t\tlanguages[rootCode][key] = messageMap[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlanguages[code][key] = messageMap[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tfreshApi: function (language) {\r\n\t\t\tvar result = createApi();\r\n\t\t\tif (language) {\r\n\t\t\t\tresult.language(language);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tvalidate: function (data, schema, checkRecursive, banUnknownProperties) {\r\n\t\t\tvar context = new ValidatorContext(globalContext, false, languages[currentLanguage], checkRecursive, banUnknownProperties);\r\n\t\t\tif (typeof schema === \"string\") {\r\n\t\t\t\tschema = {\"$ref\": schema};\r\n\t\t\t}\r\n\t\t\tcontext.addSchema(\"\", schema);\r\n\t\t\tvar error = context.validateAll(data, schema, null, null, \"\");\r\n\t\t\tif (!error && banUnknownProperties) {\r\n\t\t\t\terror = context.banUnknownProperties();\r\n\t\t\t}\r\n\t\t\tthis.error = error;\r\n\t\t\tthis.missing = context.missing;\r\n\t\t\tthis.valid = (error === null);\r\n\t\t\treturn this.valid;\r\n\t\t},\r\n\t\tvalidateResult: function () {\r\n\t\t\tvar result = {};\r\n\t\t\tthis.validate.apply(result, arguments);\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tvalidateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {\r\n\t\t\tvar context = new ValidatorContext(globalContext, true, languages[currentLanguage], checkRecursive, banUnknownProperties);\r\n\t\t\tif (typeof schema === \"string\") {\r\n\t\t\t\tschema = {\"$ref\": schema};\r\n\t\t\t}\r\n\t\t\tcontext.addSchema(\"\", schema);\r\n\t\t\tcontext.validateAll(data, schema, null, null, \"\");\r\n\t\t\tif (banUnknownProperties) {\r\n\t\t\t\tcontext.banUnknownProperties();\r\n\t\t\t}\r\n\t\t\tvar result = {};\r\n\t\t\tresult.errors = context.errors;\r\n\t\t\tresult.missing = context.missing;\r\n\t\t\tresult.valid = (result.errors.length === 0);\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\taddSchema: function () {\r\n\t\t\treturn globalContext.addSchema.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetSchema: function () {\r\n\t\t\treturn globalContext.getSchema.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetSchemaMap: function () {\r\n\t\t\treturn globalContext.getSchemaMap.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetSchemaUris: function () {\r\n\t\t\treturn globalContext.getSchemaUris.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetMissingUris: function () {\r\n\t\t\treturn globalContext.getMissingUris.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tdropSchemas: function () {\r\n\t\t\tglobalContext.dropSchemas.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tdefineKeyword: function () {\r\n\t\t\tglobalContext.defineKeyword.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tdefineError: function (codeName, codeNumber, defaultMessage) {\r\n\t\t\tif (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\r\n\t\t\t\tthrow new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');\r\n\t\t\t}\r\n\t\t\tif (typeof codeNumber !== 'number' || codeNumber%1 !== 0 || codeNumber < 10000) {\r\n\t\t\t\tthrow new Error('Code number must be an integer > 10000');\r\n\t\t\t}\r\n\t\t\tif (typeof ErrorCodes[codeName] !== 'undefined') {\r\n\t\t\t\tthrow new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);\r\n\t\t\t}\r\n\t\t\tif (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {\r\n\t\t\t\tthrow new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);\r\n\t\t\t}\r\n\t\t\tErrorCodes[codeName] = codeNumber;\r\n\t\t\tErrorCodeLookup[codeNumber] = codeName;\r\n\t\t\tErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;\r\n\t\t\tfor (var langCode in languages) {\r\n\t\t\t\tvar language = languages[langCode];\r\n\t\t\t\tif (language[codeName]) {\r\n\t\t\t\t\tlanguage[codeNumber] = language[codeNumber] || language[codeName];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\treset: function () {\r\n\t\t\tglobalContext.reset();\r\n\t\t\tthis.error = null;\r\n\t\t\tthis.missing = [];\r\n\t\t\tthis.valid = true;\r\n\t\t},\r\n\t\tmissing: [],\r\n\t\terror: null,\r\n\t\tvalid: true,\r\n\t\tnormSchema: normSchema,\r\n\t\tresolveUrl: resolveUrl,\r\n\t\tgetDocumentUri: getDocumentUri,\r\n\t\terrorCodes: ErrorCodes\r\n\t};\r\n\treturn api;\r\n}\r\n\r\nvar tv4 = createApi();\r\ntv4.addLanguage('en-gb', ErrorMessagesDefault);\r\n\r\n//legacy property\r\ntv4.tv4 = tv4;\r\n\r\nreturn tv4; // used by _header.js to globalise.\r\n\r\n}));\r\n},{}]},{},[1]);"]}